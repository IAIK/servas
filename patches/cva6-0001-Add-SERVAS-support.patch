From 2a994927829130876dcc53debb6f8acf821068a5 Mon Sep 17 00:00:00 2001
From: Stefan Steinegger <stefan.steinegger@iaik.tugraz.at>
Date: Mon, 13 Sep 2021 12:25:07 +0200
Subject: [PATCH] Add SERVAS support

---
 .gitignore                                    |    3 +
 Makefile                                      |  102 +-
 fpga/Makefile                                 |    3 +-
 fpga/scripts/run.tcl                          |    1 +
 fpga/scripts/write_cfgmem.tcl                 |    2 +
 fpga/src/ariane_xilinx.sv                     |  502 +++-
 fpga/src/bootrom/ariane.dts                   |    2 +-
 fpga/src/bootrom/bootrom.h                    | 1034 ++++----
 fpga/src/bootrom/bootrom.sv                   |  572 +++--
 fpga/src/bootrom/src/gpt.c                    |    6 +-
 fpga/src/genesysii.svh                        |   23 +
 fpga/src/kc705.svh                            |   25 +
 fpga/src/memsec/.gitignore                    |    6 +
 fpga/src/memsec/LICENSE                       |  674 +++++
 fpga/src/memsec/Makefile                      |  164 ++
 fpga/src/memsec/README.md                     |  101 +
 .../memsec/build_bitfiles_fpl_optimized.py    |  104 +
 fpga/src/memsec/build_bitfiles_fpl_paper.py   |   93 +
 .../src/memsec/build_bitfiles_meas_journal.py |   89 +
 fpga/src/memsec/examples/full_memenc_bd.tcl   |  918 +++++++
 .../memsec/flow/binary_directory_defines.mk   |  131 +
 fpga/src/memsec/flow/default.mk               |  176 ++
 fpga/src/memsec/flow/ghdl.mk                  |  110 +
 fpga/src/memsec/flow/ghdl/project.sh          |   54 +
 fpga/src/memsec/flow/ghdl/run_simulation.sh   |  163 ++
 fpga/src/memsec/flow/global_defines.mk        |   94 +
 fpga/src/memsec/hdl/crypto/aes/aes128_hs.vhdl |   60 +
 fpga/src/memsec/hdl/crypto/ascon/LICENSE      |  202 ++
 fpga/src/memsec/hdl/crypto/ascon/README.md    |    4 +
 .../hdl/crypto/ascon/ascon_fast_core.vhdl     |  343 +++
 .../memsec/hdl/crypto/ascon/ascon_mac.vhdl    |  304 +++
 .../hdl/crypto/keccak/keccak_package.vhd      |   67 +
 .../hdl/crypto/keccak/keccak_parallel.vhd     |   90 +
 .../crypto/keccak/keccak_parallel_control.vhd |  110 +
 .../keccak/keccak_parallel_datapath.vhd       |  127 +
 .../hdl/crypto/keccak/keccak_register.vhd     |   53 +
 .../crypto/keccak/keccak_round_counter.vhd    |   72 +
 .../hdl/crypto/keccak/keccak_round_iota.vhd   |   68 +
 .../crypto/keccak/keccak_round_parallel.vhd   |   72 +
 .../keccak/keccak_round_parallel_chi.vhd      |   48 +
 .../keccak/keccak_round_parallel_pi.vhd       |   50 +
 .../keccak/keccak_round_parallel_rho.vhd      |   73 +
 .../keccak/keccak_round_parallel_theta.vhd    |   54 +
 .../memsec/hdl/crypto/keccak/keccak_state.vhd |   66 +
 fpga/src/memsec/hdl/crypto/prince.vhd         |  325 +++
 fpga/src/memsec/hdl/crypto/qarma.vhd          |  408 +++
 .../memsec/hdl/crypto/xts_tweak_generator.vhd |  138 +
 fpga/src/memsec/hdl/crypto/xts_tweak_mul.vhd  |   59 +
 .../hdl/framework/axi/axi_deserialization.vhd |  375 +++
 .../hdl/framework/axi/cpu_read_responder.vhd  |  132 +
 .../framework/axi/cpu_request_modifier.vhd    |  268 ++
 .../hdl/framework/axi/cpu_write_data.vhd      |  144 ++
 .../hdl/framework/axi/memory_read_fetcher.vhd |  144 ++
 .../hdl/framework/axi/memory_read_issuer.vhd  |  167 ++
 .../axi/memory_to_cpu_write_responder.vhd     |  170 ++
 .../hdl/framework/axi/memory_write_data.vhd   |  267 ++
 .../hdl/framework/axi/memory_write_issuer.vhd |  178 ++
 .../memsec/hdl/framework/axi/simple_RAM.vhd   |  255 ++
 .../hdl/framework/metadata/key_updater.vhd    |   90 +
 .../hdl/framework/metadata/node_cache.vhd     |  173 ++
 .../metadata/node_cache_read_fetcher.vhd      |  136 +
 .../metadata/node_cache_read_issuer.vhd       |  100 +
 .../framework/metadata/node_cache_writer.vhd  |   95 +
 .../framework/metadata/nonce_increment.vhd    |   66 +
 .../hdl/framework/metadata/secure_root.vhd    |  246 ++
 .../metadata/stream_metadata_injector.vhd     |  255 ++
 .../metadata/stream_metadata_modifier.vhd     |  178 ++
 .../metadata/stream_nonce_incrementer.vhd     |   91 +
 .../metadata/stream_treedata_modifier.vhd     |  130 +
 .../stream/crypto/stream_aes_cbc_decrypt.vhd  |  379 +++
 .../stream/crypto/stream_aes_cbc_encrypt.vhd  |  376 +++
 .../stream/crypto/stream_aes_ecb.vhd          |  199 ++
 .../stream/crypto/stream_aes_xts.vhd          |  387 +++
 .../framework/stream/crypto/stream_ascon.vhd  |  408 +++
 .../crypto/stream_lrae_ascon_prince_delay.vhd |  965 +++++++
 .../crypto/stream_lrae_ascon_prince_ecb.vhd   |  990 ++++++++
 .../crypto/stream_prince_cbc_decrypt.vhd      |  383 +++
 .../crypto/stream_prince_cbc_encrypt.vhd      |  387 +++
 .../stream/crypto/stream_prince_ecb.vhd       |  165 ++
 .../stream/crypto/stream_prince_xts.vhd       |  382 +++
 .../crypto/stream_qarma_cbc_decrypt.vhd       |  386 +++
 .../crypto/stream_qarma_cbc_encrypt.vhd       |  390 +++
 .../stream_crypto_request_modifier.vhd        |  195 ++
 .../stream_request_extractor.vhd              |  123 +
 .../stream_request_splitter.vhd               |  141 ++
 .../stream_tree_request_generator.vhd         |  205 ++
 .../stream/stream_axi_wrap_burst_cache.vhd    |  224 ++
 .../framework/stream/stream_beat_remover.vhd  |   87 +
 .../stream/stream_data_block_filter.vhd       |  320 +++
 .../stream/stream_data_filter_to_stdlogic.vhd |  141 ++
 .../framework/stream/stream_data_modifier.vhd |  159 ++
 .../hdl/framework/stream/stream_fifo.vhd      |   97 +
 .../stream/stream_multi_register_stage.vhd    |   74 +
 .../stream/stream_ready_synchronizer.vhd      |   96 +
 .../stream/stream_register_stage.vhd          |   97 +
 .../stream/stream_register_stage_fifo.vhd     |  155 ++
 .../stream_request_zero_initializer.vhd       |   93 +
 .../hdl/framework/stream/stream_scheduler.vhd |   94 +
 .../hdl/framework/util/data_dispatcher.vhd    |  103 +
 .../hdl/framework/util/deserialization.vhd    |  275 ++
 fpga/src/memsec/hdl/framework/util/fifo.vhd   |  104 +
 .../hdl/framework/util/pipeline_guard.vhd     |  147 ++
 fpga/src/memsec/hdl/framework/util/prng.vhd   |  153 ++
 .../hdl/framework/util/rate_converter.vhd     |  143 ++
 .../hdl/framework/util/ready_synchronizer.vhd |  112 +
 .../hdl/framework/util/register_stage.vhd     |   98 +
 .../framework/util/register_stage_fifo.vhd    |  158 ++
 .../hdl/framework/util/serialization.vhd      |  199 ++
 .../hdl/framework/util/valid_dispatcher.vhd   |  101 +
 .../hdl/framework/util/xilinx_TDP_RAM.vhd     |   86 +
 .../util/xilinx_TDP_RAM_synchronized.vhd      |  173 ++
 fpga/src/memsec/hdl/memsec_config.vhd         |   23 +
 fpga/src/memsec/hdl/memsec_functions.vhd      |  310 +++
 fpga/src/memsec/hdl/memsec_pkg.vhd            |  138 +
 fpga/src/memsec/hdl/top/memsec.vhd            | 1674 ++++++++++++
 fpga/src/memsec/hdl/top/memsec_ascon.vhd      |  694 +++++
 .../hdl/top/memsec_block_encryption.vhd       |  990 ++++++++
 fpga/src/memsec/hdl/top/memsec_meas.vhd       | 1234 +++++++++
 .../memsec/hdl/top/memsec_tectree_ascon.vhd   | 1118 ++++++++
 fpga/src/memsec/python/.gitignore             |  104 +
 fpga/src/memsec/python/MANIFEST.in            |    1 +
 fpga/src/memsec/python/README.rst             |   22 +
 fpga/src/memsec/python/doc/conf.py            |   95 +
 fpga/src/memsec/python/doc/index.rst          |   12 +
 fpga/src/memsec/python/memsec/__init__.py     |   26 +
 .../memsec/python/memsec/flow/abstraction.py  |  128 +
 fpga/src/memsec/python/memsec/helpers.py      |  144 ++
 fpga/src/memsec/python/memsec/utils/dict.py   |  112 +
 fpga/src/memsec/python/setup.cfg              |    5 +
 fpga/src/memsec/python/setup.py               |   56 +
 fpga/src/memsec/run_tests.py                  |  101 +
 fpga/src/memsec/tb/conftest.py                |  140 +
 fpga/src/memsec/tb/tb_aes.vhd                 |  125 +
 fpga/src/memsec/tb/tb_ascon.vhd               |  183 ++
 fpga/src/memsec/tb/tb_cva_ascon_tec.vhd       |  591 +++++
 fpga/src/memsec/tb/tb_memsec.vhd              |  956 +++++++
 fpga/src/memsec/tb/tb_prince.vhd              |  131 +
 fpga/src/memsec/tb/tb_qarma.vhd               |  132 +
 fpga/src/memsec/tb/tb_rw_blockram.vhd         |  546 ++++
 fpga/src/memsec/tb/tb_utils_pkg.vhd           |  102 +
 .../tb/testdata/prince/cbc/initial_memory.txt |  512 ++++
 .../tb/testdata/prince/cbc/test_cases.txt     | 2245 ++++++++++++++++
 .../tb/testdata/prince/ecb/initial_memory.txt |  512 ++++
 .../tb/testdata/prince/ecb/test_cases.txt     | 2245 ++++++++++++++++
 .../tb/testdata/prince/xts/initial_memory.txt |  512 ++++
 .../tb/testdata/prince/xts/test_cases.txt     | 2247 +++++++++++++++++
 fpga/xilinx/xlnx_axi_crossbar/Makefile        |    2 +
 fpga/xilinx/xlnx_axi_crossbar/tcl/run.tcl     |   18 +
 include/ariane_axi_pkg.sv                     |    2 +-
 include/ariane_pkg.sv                         |   50 +-
 include/riscv_pkg.sv                          |  185 +-
 include/wt_cache_pkg.sv                       |    4 +
 src/ariane.sv                                 |    6 +
 src/axi_shim.sv                               |   70 +-
 src/cache_subsystem/cva6_icache.sv            |   39 +-
 .../cva6_icache_axi_wrapper.sv                |    2 +
 src/cache_subsystem/wt_axi_adapter.sv         |   36 +-
 src/cache_subsystem/wt_dcache.sv              |   11 +
 src/cache_subsystem/wt_dcache_ctrl.sv         |   22 +-
 src/cache_subsystem/wt_dcache_mem.sv          |   43 +-
 src/cache_subsystem/wt_dcache_missunit.sv     |   20 +-
 src/cache_subsystem/wt_dcache_wbuffer.sv      |   47 +-
 src/csr_regfile.sv                            |  202 +-
 src/enclave_effective_tweak.sv                |  313 +++
 src/ex_stage.sv                               |    6 +
 src/load_store_unit.sv                        |   50 +-
 src/load_unit.sv                              |   26 +-
 src/mmu.sv                                    |   12 +-
 src/store_buffer.sv                           |   19 +-
 src/store_unit.sv                             |   19 +-
 src/util/axi_master_connect.sv                |    6 +-
 src/util/axi_master_connect_rev.sv            |    6 +-
 src/util/axi_slave_connect.sv                 |    6 +-
 src/util/axi_slave_connect_rev.sv             |    6 +-
 tb/ariane_soc_pkg.sv                          |    2 +-
 tb/ariane_testharness.sv                      |  134 +-
 tb/include/testbench_defines.svh              |   45 +
 177 files changed, 40103 insertions(+), 1027 deletions(-)
 create mode 100644 fpga/src/memsec/.gitignore
 create mode 100644 fpga/src/memsec/LICENSE
 create mode 100644 fpga/src/memsec/Makefile
 create mode 100644 fpga/src/memsec/README.md
 create mode 100644 fpga/src/memsec/build_bitfiles_fpl_optimized.py
 create mode 100644 fpga/src/memsec/build_bitfiles_fpl_paper.py
 create mode 100644 fpga/src/memsec/build_bitfiles_meas_journal.py
 create mode 100644 fpga/src/memsec/examples/full_memenc_bd.tcl
 create mode 100644 fpga/src/memsec/flow/binary_directory_defines.mk
 create mode 100644 fpga/src/memsec/flow/default.mk
 create mode 100644 fpga/src/memsec/flow/ghdl.mk
 create mode 100644 fpga/src/memsec/flow/ghdl/project.sh
 create mode 100644 fpga/src/memsec/flow/ghdl/run_simulation.sh
 create mode 100644 fpga/src/memsec/flow/global_defines.mk
 create mode 100644 fpga/src/memsec/hdl/crypto/aes/aes128_hs.vhdl
 create mode 100644 fpga/src/memsec/hdl/crypto/ascon/LICENSE
 create mode 100644 fpga/src/memsec/hdl/crypto/ascon/README.md
 create mode 100644 fpga/src/memsec/hdl/crypto/ascon/ascon_fast_core.vhdl
 create mode 100644 fpga/src/memsec/hdl/crypto/ascon/ascon_mac.vhdl
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_package.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_parallel.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_parallel_control.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_parallel_datapath.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_register.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_round_counter.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_round_iota.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_chi.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_pi.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_rho.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_theta.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/keccak/keccak_state.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/prince.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/qarma.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/xts_tweak_generator.vhd
 create mode 100644 fpga/src/memsec/hdl/crypto/xts_tweak_mul.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/axi/axi_deserialization.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/axi/cpu_read_responder.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/axi/cpu_request_modifier.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/axi/cpu_write_data.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/axi/memory_read_fetcher.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/axi/memory_read_issuer.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/axi/memory_to_cpu_write_responder.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/axi/memory_write_data.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/axi/memory_write_issuer.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/axi/simple_RAM.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/metadata/key_updater.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/metadata/node_cache.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/metadata/node_cache_read_fetcher.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/metadata/node_cache_read_issuer.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/metadata/node_cache_writer.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/metadata/nonce_increment.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/metadata/secure_root.vhd
 create mode 100755 fpga/src/memsec/hdl/framework/metadata/stream_metadata_injector.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/metadata/stream_metadata_modifier.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/metadata/stream_nonce_incrementer.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/metadata/stream_treedata_modifier.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_cbc_decrypt.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_cbc_encrypt.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_ecb.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_xts.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_ascon.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_lrae_ascon_prince_delay.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_lrae_ascon_prince_ecb.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_cbc_decrypt.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_cbc_encrypt.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_ecb.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_xts.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_qarma_cbc_decrypt.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/crypto/stream_qarma_cbc_encrypt.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/request_modification/stream_crypto_request_modifier.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/request_modification/stream_request_extractor.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/request_modification/stream_request_splitter.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/request_modification/stream_tree_request_generator.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/stream_axi_wrap_burst_cache.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/stream_beat_remover.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/stream_data_block_filter.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/stream_data_filter_to_stdlogic.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/stream_data_modifier.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/stream_fifo.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/stream_multi_register_stage.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/stream_ready_synchronizer.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/stream_register_stage.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/stream_register_stage_fifo.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/stream_request_zero_initializer.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/stream/stream_scheduler.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/data_dispatcher.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/deserialization.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/fifo.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/pipeline_guard.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/prng.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/rate_converter.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/ready_synchronizer.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/register_stage.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/register_stage_fifo.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/serialization.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/valid_dispatcher.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/xilinx_TDP_RAM.vhd
 create mode 100644 fpga/src/memsec/hdl/framework/util/xilinx_TDP_RAM_synchronized.vhd
 create mode 100644 fpga/src/memsec/hdl/memsec_config.vhd
 create mode 100644 fpga/src/memsec/hdl/memsec_functions.vhd
 create mode 100644 fpga/src/memsec/hdl/memsec_pkg.vhd
 create mode 100644 fpga/src/memsec/hdl/top/memsec.vhd
 create mode 100644 fpga/src/memsec/hdl/top/memsec_ascon.vhd
 create mode 100644 fpga/src/memsec/hdl/top/memsec_block_encryption.vhd
 create mode 100644 fpga/src/memsec/hdl/top/memsec_meas.vhd
 create mode 100644 fpga/src/memsec/hdl/top/memsec_tectree_ascon.vhd
 create mode 100644 fpga/src/memsec/python/.gitignore
 create mode 100644 fpga/src/memsec/python/MANIFEST.in
 create mode 100644 fpga/src/memsec/python/README.rst
 create mode 100644 fpga/src/memsec/python/doc/conf.py
 create mode 100644 fpga/src/memsec/python/doc/index.rst
 create mode 100644 fpga/src/memsec/python/memsec/__init__.py
 create mode 100644 fpga/src/memsec/python/memsec/flow/abstraction.py
 create mode 100644 fpga/src/memsec/python/memsec/helpers.py
 create mode 100644 fpga/src/memsec/python/memsec/utils/dict.py
 create mode 100644 fpga/src/memsec/python/setup.cfg
 create mode 100644 fpga/src/memsec/python/setup.py
 create mode 100644 fpga/src/memsec/run_tests.py
 create mode 100644 fpga/src/memsec/tb/conftest.py
 create mode 100644 fpga/src/memsec/tb/tb_aes.vhd
 create mode 100644 fpga/src/memsec/tb/tb_ascon.vhd
 create mode 100644 fpga/src/memsec/tb/tb_cva_ascon_tec.vhd
 create mode 100644 fpga/src/memsec/tb/tb_memsec.vhd
 create mode 100644 fpga/src/memsec/tb/tb_prince.vhd
 create mode 100644 fpga/src/memsec/tb/tb_qarma.vhd
 create mode 100644 fpga/src/memsec/tb/tb_rw_blockram.vhd
 create mode 100644 fpga/src/memsec/tb/tb_utils_pkg.vhd
 create mode 100644 fpga/src/memsec/tb/testdata/prince/cbc/initial_memory.txt
 create mode 100644 fpga/src/memsec/tb/testdata/prince/cbc/test_cases.txt
 create mode 100644 fpga/src/memsec/tb/testdata/prince/ecb/initial_memory.txt
 create mode 100644 fpga/src/memsec/tb/testdata/prince/ecb/test_cases.txt
 create mode 100644 fpga/src/memsec/tb/testdata/prince/xts/initial_memory.txt
 create mode 100644 fpga/src/memsec/tb/testdata/prince/xts/test_cases.txt
 create mode 100644 fpga/xilinx/xlnx_axi_crossbar/Makefile
 create mode 100644 fpga/xilinx/xlnx_axi_crossbar/tcl/run.tcl
 create mode 100644 src/enclave_effective_tweak.sv
 create mode 100644 tb/include/testbench_defines.svh

diff --git a/.gitignore b/.gitignore
index ab82744..a33b09b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -32,3 +32,6 @@ work-dpi/
 tb/riscv-isa-sim/
 work-*/*
 install/
+
+.Xil/
+vivado_*.str
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 29d4579..344a749 100644
--- a/Makefile
+++ b/Makefile
@@ -207,6 +207,101 @@ src :=  $(filter-out src/ariane_regfile.sv, $(wildcard src/*.sv))              \
 
 src := $(addprefix $(root-dir), $(src))
 
+memsecf :=  fpga/src/memsec/hdl/memsec_config.vhd \
+            fpga/src/memsec/hdl/memsec_functions.vhd \
+            fpga/src/memsec/hdl/crypto/ascon/ascon_mac.vhdl \
+            fpga/src/memsec/hdl/crypto/ascon/ascon_fast_core.vhdl \
+            fpga/src/memsec/hdl/crypto/qarma.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_package.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_state.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_parallel.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_round_counter.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_parallel_datapath.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_chi.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_pi.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_rho.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_register.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_parallel_control.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_round_iota.vhd \
+            fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_theta.vhd \
+            fpga/src/memsec/hdl/crypto/aes/aes128_hs.vhdl \
+            fpga/src/memsec/hdl/crypto/xts_tweak_generator.vhd \
+            fpga/src/memsec/hdl/crypto/xts_tweak_mul.vhd \
+            fpga/src/memsec/hdl/crypto/prince.vhd \
+            fpga/src/memsec/hdl/framework/axi/memory_to_cpu_write_responder.vhd \
+            fpga/src/memsec/hdl/framework/axi/axi_deserialization.vhd \
+            fpga/src/memsec/hdl/framework/axi/simple_RAM.vhd \
+            fpga/src/memsec/hdl/framework/axi/memory_write_data.vhd \
+            fpga/src/memsec/hdl/framework/axi/cpu_request_modifier.vhd \
+            fpga/src/memsec/hdl/framework/axi/memory_read_fetcher.vhd \
+            fpga/src/memsec/hdl/framework/axi/memory_write_issuer.vhd \
+            fpga/src/memsec/hdl/framework/axi/cpu_read_responder.vhd \
+            fpga/src/memsec/hdl/framework/axi/memory_read_issuer.vhd \
+            fpga/src/memsec/hdl/framework/axi/cpu_write_data.vhd \
+            fpga/src/memsec/hdl/framework/util/pipeline_guard.vhd \
+            fpga/src/memsec/hdl/framework/util/deserialization.vhd \
+            fpga/src/memsec/hdl/framework/util/prng.vhd \
+            fpga/src/memsec/hdl/framework/util/data_dispatcher.vhd \
+            fpga/src/memsec/hdl/framework/util/fifo.vhd \
+            fpga/src/memsec/hdl/framework/util/register_stage.vhd \
+            fpga/src/memsec/hdl/framework/util/rate_converter.vhd \
+            fpga/src/memsec/hdl/framework/util/xilinx_TDP_RAM.vhd \
+            fpga/src/memsec/hdl/framework/util/xilinx_TDP_RAM_synchronized.vhd \
+            fpga/src/memsec/hdl/framework/util/register_stage_fifo.vhd \
+            fpga/src/memsec/hdl/framework/util/serialization.vhd \
+            fpga/src/memsec/hdl/framework/util/valid_dispatcher.vhd \
+            fpga/src/memsec/hdl/framework/util/ready_synchronizer.vhd \
+            fpga/src/memsec/hdl/framework/stream/request_modification/stream_request_extractor.vhd \
+            fpga/src/memsec/hdl/framework/stream/request_modification/stream_request_splitter.vhd \
+            fpga/src/memsec/hdl/framework/stream/request_modification/stream_crypto_request_modifier.vhd \
+            fpga/src/memsec/hdl/framework/stream/request_modification/stream_tree_request_generator.vhd \
+            fpga/src/memsec/hdl/framework/stream/stream_scheduler.vhd \
+            fpga/src/memsec/hdl/framework/stream/stream_fifo.vhd \
+            fpga/src/memsec/hdl/framework/stream/stream_ready_synchronizer.vhd \
+            fpga/src/memsec/hdl/framework/stream/stream_axi_wrap_burst_cache.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_lrae_ascon_prince_delay.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_ecb.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_cbc_encrypt.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_cbc_decrypt.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_cbc_encrypt.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_ascon.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_lrae_ascon_prince_ecb.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_ecb.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_qarma_cbc_decrypt.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_qarma_cbc_encrypt.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_xts.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_xts.vhd \
+            fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_cbc_decrypt.vhd \
+            fpga/src/memsec/hdl/framework/stream/stream_data_block_filter.vhd \
+            fpga/src/memsec/hdl/framework/stream/stream_register_stage_fifo.vhd \
+            fpga/src/memsec/hdl/framework/stream/stream_register_stage.vhd \
+            fpga/src/memsec/hdl/framework/stream/stream_data_filter_to_stdlogic.vhd \
+            fpga/src/memsec/hdl/framework/stream/stream_multi_register_stage.vhd \
+            fpga/src/memsec/hdl/framework/stream/stream_beat_remover.vhd \
+            fpga/src/memsec/hdl/framework/stream/stream_data_modifier.vhd \
+            fpga/src/memsec/hdl/framework/stream/stream_request_zero_initializer.vhd \
+            fpga/src/memsec/hdl/framework/metadata/node_cache_writer.vhd \
+            fpga/src/memsec/hdl/framework/metadata/stream_nonce_incrementer.vhd \
+            fpga/src/memsec/hdl/framework/metadata/node_cache_read_fetcher.vhd \
+            fpga/src/memsec/hdl/framework/metadata/nonce_increment.vhd \
+            fpga/src/memsec/hdl/framework/metadata/secure_root.vhd \
+            fpga/src/memsec/hdl/framework/metadata/stream_metadata_modifier.vhd \
+            fpga/src/memsec/hdl/framework/metadata/stream_treedata_modifier.vhd \
+            fpga/src/memsec/hdl/framework/metadata/node_cache.vhd \
+            fpga/src/memsec/hdl/framework/metadata/node_cache_read_issuer.vhd \
+            fpga/src/memsec/hdl/framework/metadata/key_updater.vhd \
+            fpga/src/memsec/hdl/framework/metadata/stream_metadata_injector.vhd \
+            fpga/src/memsec/hdl/memsec_pkg.vhd \
+            fpga/src/memsec/hdl/top/memsec_meas.vhd \
+            fpga/src/memsec/hdl/top/memsec_block_encryption.vhd \
+            fpga/src/memsec/hdl/top/memsec_ascon.vhd \
+            fpga/src/memsec/hdl/top/memsec_tectree_ascon.vhd \
+            fpga/src/memsec/hdl/top/memsec.vhd
+
+
+memsecf := $(addprefix $(root-dir), $(memsecf))
+
 uart_src := $(wildcard fpga/src/apb_uart/src/*.vhd)
 uart_src := $(addprefix $(root-dir), $(uart_src))
 
@@ -231,7 +326,7 @@ riscv-fp-tests            := $(shell xargs printf '\n%s' < $(riscv-fp-tests-list
 riscv-benchmarks          := $(shell xargs printf '\n%s' < $(riscv-benchmarks-list) | cut -b 1-)
 
 # Search here for include files (e.g.: non-standalone components)
-incdir := src/common_cells/include/
+incdir := src/common_cells/include/ tb/include
 # Compile and sim flags
 compile_flag     += +cover=bcfst+/dut -incr -64 -nologo -quiet -suppress 13262 -permissive +define+$(defines)
 uvm-flags        += +UVM_NO_RELNOTES +UVM_VERBOSITY=LOW
@@ -292,7 +387,7 @@ $(library)/.build-srcs: $(util) $(library)
 # build TBs
 $(library)/.build-tb: $(dpi)
 	# Compile top level
-	vlog$(questa_version) $(compile_flag) -sv $(tbs) -work $(library)
+	vlog$(questa_version) $(compile_flag) -sv $(tbs) -work $(library) +incdir+ $(list_incdir)
 	touch $(library)/.build-tb
 
 $(library):
@@ -382,6 +477,7 @@ verilate_command := $(verilator)
                     src/util/sram.sv                                                                             \
                     tb/common/mock_uart.sv                                                                       \
                     +incdir+src/axi_node                                                                         \
+                    +incdir+tb/include                                                                           \
                     $(if $(verilator_threads), --threads $(verilator_threads))                                   \
                     --unroll-count 256                                                                           \
                     -Werror-PINMISSING                                                                           \
@@ -559,7 +655,7 @@ fpga_filter += $(addprefix $(root-dir), src/util/instr_tracer.sv)
 
 fpga: $(ariane_pkg) $(util) $(src) $(fpga_src) $(uart_src)
 	@echo "[FPGA] Generate sources"
-	@echo read_vhdl        {$(uart_src)}    > fpga/scripts/add_sources.tcl
+	@echo read_vhdl        {$(uart_src) $(memsecf)}   > fpga/scripts/add_sources.tcl
 	@echo read_verilog -sv {$(ariane_pkg)} >> fpga/scripts/add_sources.tcl
 	@echo read_verilog -sv {$(filter-out $(fpga_filter), $(util))}     >> fpga/scripts/add_sources.tcl
 	@echo read_verilog -sv {$(filter-out $(fpga_filter), $(src))} 	   >> fpga/scripts/add_sources.tcl
diff --git a/fpga/Makefile b/fpga/Makefile
index d322545..199eff8 100644
--- a/fpga/Makefile
+++ b/fpga/Makefile
@@ -10,7 +10,8 @@ ips := xlnx_axi_clock_converter.xci  \
        xlnx_axi_quad_spi.xci         \
        xlnx_axi_gpio.xci             \
        xlnx_clk_gen.xci              \
-       xlnx_mig_7_ddr3.xci
+       xlnx_mig_7_ddr3.xci           \
+	   xlnx_axi_crossbar.xci
 
 ips := $(addprefix $(work-dir)/, $(ips))
 ips-target := $(join $(addsuffix /ip/, $(addprefix $(ip-dir)/, $(basename $(ips)))), $(ips))
diff --git a/fpga/scripts/run.tcl b/fpga/scripts/run.tcl
index de25c7a..c06ace6 100644
--- a/fpga/scripts/run.tcl
+++ b/fpga/scripts/run.tcl
@@ -28,6 +28,7 @@ if {$::env(BOARD) eq "genesys2"} {
 
 read_ip xilinx/xlnx_mig_7_ddr3/ip/xlnx_mig_7_ddr3.xci
 read_ip xilinx/xlnx_axi_clock_converter/ip/xlnx_axi_clock_converter.xci
+read_ip xilinx/xlnx_axi_crossbar/ip/xlnx_axi_crossbar.xci
 read_ip xilinx/xlnx_axi_dwidth_converter/ip/xlnx_axi_dwidth_converter.xci
 read_ip xilinx/xlnx_axi_gpio/ip/xlnx_axi_gpio.xci
 read_ip xilinx/xlnx_axi_quad_spi/ip/xlnx_axi_quad_spi.xci
diff --git a/fpga/scripts/write_cfgmem.tcl b/fpga/scripts/write_cfgmem.tcl
index 30f3e96..71e6098 100644
--- a/fpga/scripts/write_cfgmem.tcl
+++ b/fpga/scripts/write_cfgmem.tcl
@@ -30,6 +30,8 @@ if {$::env(BOARD) eq "genesys2"} {
     write_cfgmem -format mcs -interface SPIx4 -size 256  -loadbit "up 0x0 $bitfile" -file $mcsfile -force
 } elseif {$::env(BOARD) eq "vc707"} {
     write_cfgmem -format mcs -interface bpix16 -size 128 -loadbit "up 0x0 $bitfile" -file $mcsfile -force
+} elseif {$::env(BOARD) eq "kc705"} {
+    write_cfgmem -format mcs -interface SPIx4 -size 128  -loadbit "up 0x0 $bitfile" -file $mcsfile -force
 } else {
       exit 1
 }
diff --git a/fpga/src/ariane_xilinx.sv b/fpga/src/ariane_xilinx.sv
index e8c4d17..23dcc1b 100644
--- a/fpga/src/ariane_xilinx.sv
+++ b/fpga/src/ariane_xilinx.sv
@@ -159,7 +159,8 @@ localparam AxiAddrWidth = 64;
 localparam AxiDataWidth = 64;
 localparam AxiIdWidthMaster = 4;
 localparam AxiIdWidthSlaves = AxiIdWidthMaster + $clog2(NBSlave); // 5
-localparam AxiUserWidth = 1;
+localparam ETweakWidth = 128;
+localparam AxiUserWidth = ETweakWidth;
 
 AXI_BUS #(
     .AXI_ADDR_WIDTH ( AxiAddrWidth     ),
@@ -195,6 +196,50 @@ logic ddr_clock_out;
 logic rst_n, rst;
 logic rtc;
 
+
+`ifdef MEE
+  wire [AxiIdWidthMaster-1:0]  axi_mem_memsec_awid;
+  wire [AxiAddrWidth-1:0]      axi_mem_memsec_awaddr;
+  wire [7:0]                   axi_mem_memsec_awlen;
+  wire [2:0]                   axi_mem_memsec_awsize;
+  wire [1:0]                   axi_mem_memsec_awburst;
+  wire [3:0]                   axi_mem_memsec_awcache;
+  wire [2:0]                   axi_mem_memsec_awprot;
+  wire [3:0]                   axi_mem_memsec_awqos;
+  wire [AxiUserWidth-1:0]      axi_mem_memsec_awuser;
+  wire                         axi_mem_memsec_awvalid;
+  wire                         axi_mem_memsec_awready;
+  wire [AxiDataWidth-1:0]      axi_mem_memsec_wdata;
+  wire [7:0]                   axi_mem_memsec_wstrb;
+  wire                         axi_mem_memsec_wlast;
+  wire [AxiUserWidth-1:0]      axi_mem_memsec_wuser;
+  wire                         axi_mem_memsec_wvalid;
+  wire                         axi_mem_memsec_wready;
+  wire [3:0]                   axi_mem_memsec_bid;
+  wire [1:0]                   axi_mem_memsec_bresp;
+  wire [AxiUserWidth-1:0]      axi_mem_memsec_buser;
+  wire                         axi_mem_memsec_bvalid;
+  wire                         axi_mem_memsec_bready;
+  wire [3:0]                   axi_mem_memsec_arid;
+  wire [AxiAddrWidth-1:0]      axi_mem_memsec_araddr;
+  wire [7:0]                   axi_mem_memsec_arlen;
+  wire [2:0]                   axi_mem_memsec_arsize;
+  wire [1:0]                   axi_mem_memsec_arburst;
+  wire [3:0]                   axi_mem_memsec_arcache;
+  wire [2:0]                   axi_mem_memsec_arprot;
+  wire [3:0]                   axi_mem_memsec_arqos;
+  wire [AxiUserWidth-1:0]      axi_mem_memsec_aruser;
+  wire                         axi_mem_memsec_arvalid;
+  wire                         axi_mem_memsec_arready;
+  wire [3:0]                   axi_mem_memsec_rid;
+  wire [AxiDataWidth-1:0]      axi_mem_memsec_rdata;
+  wire [1:0]                   axi_mem_memsec_rresp;
+  wire                         axi_mem_memsec_rlast;
+  wire [AxiUserWidth-1:0]      axi_mem_memsec_ruser;
+  wire                         axi_mem_memsec_rvalid;
+  wire                         axi_mem_memsec_rready;
+`endif 
+
 // we need to switch reset polarity
 `ifdef VCU118
 logic cpu_resetn;
@@ -246,18 +291,110 @@ assign rst = ddr_sync_reset;
 // ---------------
 // AXI Xbar
 // ---------------
-axi_node_wrap_with_slices #(
-    // three ports from Ariane (instruction, data and bypass)
-    .NB_SLAVE           ( NBSlave                    ),
-    .NB_MASTER          ( ariane_soc::NB_PERIPHERALS ),
-    .NB_REGION          ( ariane_soc::NrRegion       ),
-    .AXI_ADDR_WIDTH     ( AxiAddrWidth               ),
-    .AXI_DATA_WIDTH     ( AxiDataWidth               ),
-    .AXI_USER_WIDTH     ( AxiUserWidth               ),
-    .AXI_ID_WIDTH       ( AxiIdWidthMaster           ),
-    .MASTER_SLICE_DEPTH ( 2                          ),
-    .SLAVE_SLICE_DEPTH  ( 2                          )
-) i_axi_xbar (
+`ifdef XLNX_CB //Currently not working, configure crossbar with 2 slices, additionally, there is a bug in vivado 2018.1 (crashing when synthesizing crossbar)
+  xlnx_axi_crossbar i_xlnx_axi_crossbar (
+    .aclk             ( clk                                   ),          // input wire aclk
+    .aresetn          ( ndmreset_n                            ),          // input wire aresetn
+    .s_axi_awid       ( {slave[1].aw_id, slave[0].aw_id}        ),          // input wire [7 : 0] s_axi_awid
+    .s_axi_awaddr     ( {slave[1].aw_addr, slave[0].aw_addr}    ),          // input wire [127 : 0] s_axi_awaddr
+    .s_axi_awlen      ( {slave[1].aw_len, slave[0].aw_len}      ),          // input wire [15 : 0] s_axi_awlen
+    .s_axi_awsize     ( {slave[1].aw_size, slave[0].aw_size}    ),          // input wire [5 : 0] s_axi_awsize
+    .s_axi_awburst    ( {slave[1].aw_burst, slave[0].aw_burst}  ),          // input wire [3 : 0] s_axi_awburst
+    .s_axi_awlock     ( {slave[1].aw_lock, slave[0].aw_lock}    ),          // input wire [1 : 0] s_axi_awlock
+    .s_axi_awcache    ( {slave[1].aw_cache, slave[0].aw_cache}  ),          // input wire [7 : 0] s_axi_awcache
+    .s_axi_awprot     ( {slave[1].aw_prot, slave[0].aw_prot}    ),          // input wire [5 : 0] s_axi_awprot
+    .s_axi_awqos      ( {slave[1].aw_qos, slave[0].aw_qos}      ),          // input wire [7 : 0] s_axi_awqos
+    .s_axi_awuser     ( {slave[1].aw_user, slave[0].aw_user}    ),          // input wire [255 : 0] s_axi_awuser
+    .s_axi_awvalid    ( {slave[1].aw_valid, slave[0].aw_valid}  ),          // input wire [1 : 0] s_axi_awvalid
+    .s_axi_awready    ( {slave[1].aw_ready, slave[0].aw_ready}  ),          // output wire [1 : 0] s_axi_awready
+    .s_axi_wdata      ( {slave[1].w_data, slave[0].w_data}      ),          // input wire [127 : 0] s_axi_wdata
+    .s_axi_wstrb      ( {slave[1].w_strb, slave[0].w_strb}      ),          // input wire [15 : 0] s_axi_wstrb
+    .s_axi_wlast      ( {slave[1].w_last, slave[0].w_last}      ),          // input wire [1 : 0] s_axi_wlast
+    .s_axi_wuser      ( {slave[1].w_user, slave[0].w_user}      ),          // input wire [255 : 0] s_axi_wuser
+    .s_axi_wvalid     ( {slave[1].w_valid, slave[0].w_valid}    ),          // input wire [1 : 0] s_axi_wvalid
+    .s_axi_wready     ( {slave[1].w_ready, slave[0].w_ready}    ),          // output wire [1 : 0] s_axi_wready
+    .s_axi_bid        ( {slave[1].b_id, slave[0].b_id}          ),          // output wire [7 : 0] s_axi_bid
+    .s_axi_bresp      ( {slave[1].b_resp, slave[0].b_resp}      ),          // output wire [3 : 0] s_axi_bresp
+    .s_axi_buser      ( {slave[1].b_user, slave[0].b_user}      ),          // output wire [255 : 0] s_axi_buser
+    .s_axi_bvalid     ( {slave[1].b_valid, slave[0].b_valid}    ),          // output wire [1 : 0] s_axi_bvalid
+    .s_axi_bready     ( {slave[1].b_ready, slave[0].b_ready}    ),          // input wire [1 : 0] s_axi_bready
+    .s_axi_arid       ( {slave[1].ar_id, slave[0].ar_id}        ),          // input wire [7 : 0] s_axi_arid
+    .s_axi_araddr     ( {slave[1].ar_addr, slave[0].ar_addr}    ),          // input wire [127 : 0] s_axi_araddr
+    .s_axi_arlen      ( {slave[1].ar_len, slave[0].ar_len}      ),          // input wire [15 : 0] s_axi_arlen
+    .s_axi_arsize     ( {slave[1].ar_size, slave[0].ar_size}    ),          // input wire [5 : 0] s_axi_arsize
+    .s_axi_arburst    ( {slave[1].ar_burst, slave[0].ar_burst}  ),          // input wire [3 : 0] s_axi_arburst
+    .s_axi_arlock     ( {slave[1].ar_lock, slave[0].ar_lock}    ),          // input wire [1 : 0] s_axi_arlock
+    .s_axi_arcache    ( {slave[1].ar_cache, slave[0].ar_cache}  ),          // input wire [7 : 0] s_axi_arcache
+    .s_axi_arprot     ( {slave[1].ar_prot, slave[0].ar_prot}    ),          // input wire [5 : 0] s_axi_arprot
+    .s_axi_arqos      ( {slave[1].ar_qos, slave[0].ar_qos}      ),          // input wire [7 : 0] s_axi_arqos
+    .s_axi_aruser     ( {slave[1].ar_user, slave[0].ar_user}    ),          // input wire [255 : 0] s_axi_aruser
+    .s_axi_arvalid    ( {slave[1].ar_valid, slave[0].ar_valid}  ),          // input wire [1 : 0] s_axi_arvalid
+    .s_axi_arready    ( {slave[1].ar_ready, slave[0].ar_ready}  ),          // output wire [1 : 0] s_axi_arready
+    .s_axi_rid        ( {slave[1].r_id, slave[0].r_id}          ),          // output wire [7 : 0] s_axi_rid
+    .s_axi_rdata      ( {slave[1].r_data, slave[0].r_data}      ),          // output wire [127 : 0] s_axi_rdata
+    .s_axi_rresp      ( {slave[1].r_resp, slave[0].r_resp}      ),          // output wire [3 : 0] s_axi_rresp
+    .s_axi_rlast      ( {slave[1].r_last, slave[0].r_last}      ),          // output wire [1 : 0] s_axi_rlast
+    .s_axi_ruser      ( {slave[1].r_user, slave[0].r_user}      ),          // output wire [255 : 0] s_axi_ruser
+    .s_axi_rvalid     ( {slave[1].r_valid, slave[0].r_valid}    ),          // output wire [1 : 0] s_axi_rvalid
+    .s_axi_rready     ( {slave[1].r_ready, slave[0].r_ready}    ),          // input wire [1 : 0] s_axi_rready
+    .m_axi_awid       ( {master[ariane_soc::DRAM].aw_id, master[ariane_soc::GPIO].aw_id, master[ariane_soc::Ethernet].aw_id, master[ariane_soc::SPI].aw_id, master[ariane_soc::Timer].aw_id, master[ariane_soc::UART].aw_id, master[ariane_soc::PLIC].aw_id, master[ariane_soc::CLINT].aw_id, master[ariane_soc::ROM].aw_id, master[ariane_soc::Debug].aw_id  }                                         ),        // output wire [39 : 0] m_axi_awid
+    .m_axi_awaddr     ( {master[ariane_soc::DRAM].aw_addr, master[ariane_soc::GPIO].aw_addr, master[ariane_soc::Ethernet].aw_addr, master[ariane_soc::SPI].aw_addr, master[ariane_soc::Timer].aw_addr, master[ariane_soc::UART].aw_addr, master[ariane_soc::PLIC].aw_addr, master[ariane_soc::CLINT].aw_addr, master[ariane_soc::ROM].aw_addr, master[ariane_soc::Debug].aw_addr}                       ),        // output wire [639 : 0] m_axi_awaddr
+    .m_axi_awlen      ( {master[ariane_soc::DRAM].aw_len, master[ariane_soc::GPIO].aw_len, master[ariane_soc::Ethernet].aw_len, master[ariane_soc::SPI].aw_len, master[ariane_soc::Timer].aw_len, master[ariane_soc::UART].aw_len, master[ariane_soc::PLIC].aw_len, master[ariane_soc::CLINT].aw_len, master[ariane_soc::ROM].aw_len, master[ariane_soc::Debug].aw_len}                                 ),        // output wire [79 : 0] m_axi_awlen
+    .m_axi_awsize     ( {master[ariane_soc::DRAM].aw_size, master[ariane_soc::GPIO].aw_size, master[ariane_soc::Ethernet].aw_size, master[ariane_soc::SPI].aw_size, master[ariane_soc::Timer].aw_size, master[ariane_soc::UART].aw_size, master[ariane_soc::PLIC].aw_size, master[ariane_soc::CLINT].aw_size, master[ariane_soc::ROM].aw_size, master[ariane_soc::Debug].aw_size}                       ),        // output wire [29 : 0] m_axi_awsize
+    .m_axi_awburst    ( {master[ariane_soc::DRAM].aw_burst, master[ariane_soc::GPIO].aw_burst, master[ariane_soc::Ethernet].aw_burst, master[ariane_soc::SPI].aw_burst, master[ariane_soc::Timer].aw_burst, master[ariane_soc::UART].aw_burst, master[ariane_soc::PLIC].aw_burst, master[ariane_soc::CLINT].aw_burst, master[ariane_soc::ROM].aw_burst, master[ariane_soc::Debug].aw_burst}             ),        // output wire [19 : 0] m_axi_awburst
+    .m_axi_awlock     ( {master[ariane_soc::DRAM].aw_lock, master[ariane_soc::GPIO].aw_lock, master[ariane_soc::Ethernet].aw_lock, master[ariane_soc::SPI].aw_lock, master[ariane_soc::Timer].aw_lock, master[ariane_soc::UART].aw_lock, master[ariane_soc::PLIC].aw_lock, master[ariane_soc::CLINT].aw_lock, master[ariane_soc::ROM].aw_lock, master[ariane_soc::Debug].aw_lock }                      ),        // output wire [9 : 0] m_axi_awlock
+    .m_axi_awcache    ( {master[ariane_soc::DRAM].aw_cache, master[ariane_soc::GPIO].aw_cache, master[ariane_soc::Ethernet].aw_cache, master[ariane_soc::SPI].aw_cache, master[ariane_soc::Timer].aw_cache, master[ariane_soc::UART].aw_cache, master[ariane_soc::PLIC].aw_cache, master[ariane_soc::CLINT].aw_cache, master[ariane_soc::ROM].aw_cache, master[ariane_soc::Debug].aw_cache }            ),        // output wire [39 : 0] m_axi_awcache
+    .m_axi_awprot     ( {master[ariane_soc::DRAM].aw_prot, master[ariane_soc::GPIO].aw_prot, master[ariane_soc::Ethernet].aw_prot, master[ariane_soc::SPI].aw_prot, master[ariane_soc::Timer].aw_prot, master[ariane_soc::UART].aw_prot, master[ariane_soc::PLIC].aw_prot, master[ariane_soc::CLINT].aw_prot, master[ariane_soc::ROM].aw_prot, master[ariane_soc::Debug].aw_prot }                      ),        // output wire [29 : 0] m_axi_awprot
+    .m_axi_awregion   ( {master[ariane_soc::DRAM].aw_region, master[ariane_soc::GPIO].aw_region, master[ariane_soc::Ethernet].aw_region, master[ariane_soc::SPI].aw_region, master[ariane_soc::Timer].aw_region, master[ariane_soc::UART].aw_region, master[ariane_soc::PLIC].aw_region, master[ariane_soc::CLINT].aw_region, master[ariane_soc::ROM].aw_region, master[ariane_soc::Debug].aw_region }  ),        // output wire [39 : 0] m_axi_awregion
+    .m_axi_awqos      ( {master[ariane_soc::DRAM].aw_qos, master[ariane_soc::GPIO].aw_qos, master[ariane_soc::Ethernet].aw_qos, master[ariane_soc::SPI].aw_qos, master[ariane_soc::Timer].aw_qos, master[ariane_soc::UART].aw_qos, master[ariane_soc::PLIC].aw_qos, master[ariane_soc::CLINT].aw_qos, master[ariane_soc::ROM].aw_qos, master[ariane_soc::Debug].aw_qos }                                ),        // output wire [39 : 0] m_axi_awqos
+    .m_axi_awuser     ( {master[ariane_soc::DRAM].aw_user, master[ariane_soc::GPIO].aw_user, master[ariane_soc::Ethernet].aw_user, master[ariane_soc::SPI].aw_user, master[ariane_soc::Timer].aw_user, master[ariane_soc::UART].aw_user, master[ariane_soc::PLIC].aw_user, master[ariane_soc::CLINT].aw_user, master[ariane_soc::ROM].aw_user, master[ariane_soc::Debug].aw_user }                      ),        // output wire [1279 : 0] m_axi_awuser
+    .m_axi_awvalid    ( {master[ariane_soc::DRAM].aw_valid, master[ariane_soc::GPIO].aw_valid, master[ariane_soc::Ethernet].aw_valid, master[ariane_soc::SPI].aw_valid, master[ariane_soc::Timer].aw_valid, master[ariane_soc::UART].aw_valid, master[ariane_soc::PLIC].aw_valid, master[ariane_soc::CLINT].aw_valid, master[ariane_soc::ROM].aw_valid, master[ariane_soc::Debug].aw_valid }            ),        // output wire [9 : 0] m_axi_awvalid
+    .m_axi_awready    ( {master[ariane_soc::DRAM].aw_ready, master[ariane_soc::GPIO].aw_ready, master[ariane_soc::Ethernet].aw_ready, master[ariane_soc::SPI].aw_ready, master[ariane_soc::Timer].aw_ready, master[ariane_soc::UART].aw_ready, master[ariane_soc::PLIC].aw_ready, master[ariane_soc::CLINT].aw_ready, master[ariane_soc::ROM].aw_ready, master[ariane_soc::Debug].aw_ready }            ),        // input wire [9 : 0] m_axi_awready
+    .m_axi_wdata      ( {master[ariane_soc::DRAM].w_data, master[ariane_soc::GPIO].w_data, master[ariane_soc::Ethernet].w_data, master[ariane_soc::SPI].w_data, master[ariane_soc::Timer].w_data, master[ariane_soc::UART].w_data, master[ariane_soc::PLIC].w_data, master[ariane_soc::CLINT].w_data, master[ariane_soc::ROM].w_data, master[ariane_soc::Debug].w_data }                                ),        // output wire [639 : 0] m_axi_wdata
+    .m_axi_wstrb      ( {master[ariane_soc::DRAM].w_strb, master[ariane_soc::GPIO].w_strb, master[ariane_soc::Ethernet].w_strb, master[ariane_soc::SPI].w_strb, master[ariane_soc::Timer].w_strb, master[ariane_soc::UART].w_strb, master[ariane_soc::PLIC].w_strb, master[ariane_soc::CLINT].w_strb, master[ariane_soc::ROM].w_strb, master[ariane_soc::Debug].w_strb }                                ),        // output wire [79 : 0] m_axi_wstrb
+    .m_axi_wlast      ( {master[ariane_soc::DRAM].w_last, master[ariane_soc::GPIO].w_last, master[ariane_soc::Ethernet].w_last, master[ariane_soc::SPI].w_last, master[ariane_soc::Timer].w_last, master[ariane_soc::UART].w_last, master[ariane_soc::PLIC].w_last, master[ariane_soc::CLINT].w_last, master[ariane_soc::ROM].w_last, master[ariane_soc::Debug].w_last  }                               ),        // output wire [9 : 0] m_axi_wlast
+    .m_axi_wuser      ( {master[ariane_soc::DRAM].w_user, master[ariane_soc::GPIO].w_user, master[ariane_soc::Ethernet].w_user, master[ariane_soc::SPI].w_user, master[ariane_soc::Timer].w_user, master[ariane_soc::UART].w_user, master[ariane_soc::PLIC].w_user, master[ariane_soc::CLINT].w_user, master[ariane_soc::ROM].w_user, master[ariane_soc::Debug].w_user  }                               ),        // output wire [1279 : 0] m_axi_wuser
+    .m_axi_wvalid     ( {master[ariane_soc::DRAM].w_valid, master[ariane_soc::GPIO].w_valid, master[ariane_soc::Ethernet].w_valid, master[ariane_soc::SPI].w_valid, master[ariane_soc::Timer].w_valid, master[ariane_soc::UART].w_valid, master[ariane_soc::PLIC].w_valid, master[ariane_soc::CLINT].w_valid, master[ariane_soc::ROM].w_valid, master[ariane_soc::Debug].w_valid  }                     ),        // output wire [9 : 0] m_axi_wvalid
+    .m_axi_wready     ( {master[ariane_soc::DRAM].w_ready, master[ariane_soc::GPIO].w_ready, master[ariane_soc::Ethernet].w_ready, master[ariane_soc::SPI].w_ready, master[ariane_soc::Timer].w_ready, master[ariane_soc::UART].w_ready, master[ariane_soc::PLIC].w_ready, master[ariane_soc::CLINT].w_ready, master[ariane_soc::ROM].w_ready, master[ariane_soc::Debug].w_ready  }                     ),        // input wire [9 : 0] m_axi_wready
+    .m_axi_bid        ( {master[ariane_soc::DRAM].b_id, master[ariane_soc::GPIO].b_id, master[ariane_soc::Ethernet].b_id, master[ariane_soc::SPI].b_id, master[ariane_soc::Timer].b_id, master[ariane_soc::UART].b_id, master[ariane_soc::PLIC].b_id, master[ariane_soc::CLINT].b_id, master[ariane_soc::ROM].b_id, master[ariane_soc::Debug].b_id  }                                                   ),        // input wire [39 : 0] m_axi_bid
+    .m_axi_bresp      ( {master[ariane_soc::DRAM].b_resp, master[ariane_soc::GPIO].b_resp, master[ariane_soc::Ethernet].b_resp, master[ariane_soc::SPI].b_resp, master[ariane_soc::Timer].b_resp, master[ariane_soc::UART].b_resp, master[ariane_soc::PLIC].b_resp, master[ariane_soc::CLINT].b_resp, master[ariane_soc::ROM].b_resp, master[ariane_soc::Debug].b_resp  }                               ),        // input wire [19 : 0] m_axi_bresp
+    .m_axi_buser      ( {master[ariane_soc::DRAM].b_user, master[ariane_soc::GPIO].b_user, master[ariane_soc::Ethernet].b_user, master[ariane_soc::SPI].b_user, master[ariane_soc::Timer].b_user, master[ariane_soc::UART].b_user, master[ariane_soc::PLIC].b_user, master[ariane_soc::CLINT].b_user, master[ariane_soc::ROM].b_user, master[ariane_soc::Debug].b_user  }                               ),        // input wire [1279 : 0] m_axi_buser
+    .m_axi_bvalid     ( {master[ariane_soc::DRAM].b_valid, master[ariane_soc::GPIO].b_valid, master[ariane_soc::Ethernet].b_valid, master[ariane_soc::SPI].b_valid, master[ariane_soc::Timer].b_valid, master[ariane_soc::UART].b_valid, master[ariane_soc::PLIC].b_valid, master[ariane_soc::CLINT].b_valid, master[ariane_soc::ROM].b_valid, master[ariane_soc::Debug].b_valid  }                     ),        // input wire [9 : 0] m_axi_bvalid
+    .m_axi_bready     ( {master[ariane_soc::DRAM].b_ready, master[ariane_soc::GPIO].b_ready, master[ariane_soc::Ethernet].b_ready, master[ariane_soc::SPI].b_ready, master[ariane_soc::Timer].b_ready, master[ariane_soc::UART].b_ready, master[ariane_soc::PLIC].b_ready, master[ariane_soc::CLINT].b_ready, master[ariane_soc::ROM].b_ready, master[ariane_soc::Debug].b_ready  }                     ),        // output wire [9 : 0] m_axi_bready
+    .m_axi_arid       ( {master[ariane_soc::DRAM].ar_id, master[ariane_soc::GPIO].ar_id, master[ariane_soc::Ethernet].ar_id, master[ariane_soc::SPI].ar_id, master[ariane_soc::Timer].ar_id, master[ariane_soc::UART].ar_id, master[ariane_soc::PLIC].ar_id, master[ariane_soc::CLINT].ar_id, master[ariane_soc::ROM].ar_id, master[ariane_soc::Debug].ar_id  }                                         ),        // output wire [39 : 0] m_axi_arid
+    .m_axi_araddr     ( {master[ariane_soc::DRAM].ar_addr, master[ariane_soc::GPIO].ar_addr, master[ariane_soc::Ethernet].ar_addr, master[ariane_soc::SPI].ar_addr, master[ariane_soc::Timer].ar_addr, master[ariane_soc::UART].ar_addr, master[ariane_soc::PLIC].ar_addr, master[ariane_soc::CLINT].ar_addr, master[ariane_soc::ROM].ar_addr, master[ariane_soc::Debug].ar_addr  }                     ),        // output wire [639 : 0] m_axi_araddr
+    .m_axi_arlen      ( {master[ariane_soc::DRAM].ar_len, master[ariane_soc::GPIO].ar_len, master[ariane_soc::Ethernet].ar_len, master[ariane_soc::SPI].ar_len, master[ariane_soc::Timer].ar_len, master[ariane_soc::UART].ar_len, master[ariane_soc::PLIC].ar_len, master[ariane_soc::CLINT].ar_len, master[ariane_soc::ROM].ar_len, master[ariane_soc::Debug].ar_len  }                               ),        // output wire [79 : 0] m_axi_arlen
+    .m_axi_arsize     ( {master[ariane_soc::DRAM].ar_size, master[ariane_soc::GPIO].ar_size, master[ariane_soc::Ethernet].ar_size, master[ariane_soc::SPI].ar_size, master[ariane_soc::Timer].ar_size, master[ariane_soc::UART].ar_size, master[ariane_soc::PLIC].ar_size, master[ariane_soc::CLINT].ar_size, master[ariane_soc::ROM].ar_size, master[ariane_soc::Debug].ar_size  }                     ),        // output wire [29 : 0] m_axi_arsize
+    .m_axi_arburst    ( {master[ariane_soc::DRAM].ar_burst, master[ariane_soc::GPIO].ar_burst, master[ariane_soc::Ethernet].ar_burst, master[ariane_soc::SPI].ar_burst, master[ariane_soc::Timer].ar_burst, master[ariane_soc::UART].ar_burst, master[ariane_soc::PLIC].ar_burst, master[ariane_soc::CLINT].ar_burst, master[ariane_soc::ROM].ar_burst, master[ariane_soc::Debug].ar_burst  }           ),        // output wire [19 : 0] m_axi_arburst
+    .m_axi_arlock     ( {master[ariane_soc::DRAM].ar_lock, master[ariane_soc::GPIO].ar_lock, master[ariane_soc::Ethernet].ar_lock, master[ariane_soc::SPI].ar_lock, master[ariane_soc::Timer].ar_lock, master[ariane_soc::UART].ar_lock, master[ariane_soc::PLIC].ar_lock, master[ariane_soc::CLINT].ar_lock, master[ariane_soc::ROM].ar_lock, master[ariane_soc::Debug].ar_lock  }                     ),        // output wire [9 : 0] m_axi_arlock
+    .m_axi_arcache    ( {master[ariane_soc::DRAM].ar_cache, master[ariane_soc::GPIO].ar_cache, master[ariane_soc::Ethernet].ar_cache, master[ariane_soc::SPI].ar_cache, master[ariane_soc::Timer].ar_cache, master[ariane_soc::UART].ar_cache, master[ariane_soc::PLIC].ar_cache, master[ariane_soc::CLINT].ar_cache, master[ariane_soc::ROM].ar_cache, master[ariane_soc::Debug].ar_cache  }           ),        // output wire [39 : 0] m_axi_arcache
+    .m_axi_arprot     ( {master[ariane_soc::DRAM].ar_prot, master[ariane_soc::GPIO].ar_prot, master[ariane_soc::Ethernet].ar_prot, master[ariane_soc::SPI].ar_prot, master[ariane_soc::Timer].ar_prot, master[ariane_soc::UART].ar_prot, master[ariane_soc::PLIC].ar_prot, master[ariane_soc::CLINT].ar_prot, master[ariane_soc::ROM].ar_prot, master[ariane_soc::Debug].ar_prot  }                     ),        // output wire [29 : 0] m_axi_arprot
+    .m_axi_arregion   ( {master[ariane_soc::DRAM].ar_region, master[ariane_soc::GPIO].ar_region, master[ariane_soc::Ethernet].ar_region, master[ariane_soc::SPI].ar_region, master[ariane_soc::Timer].ar_region, master[ariane_soc::UART].ar_region, master[ariane_soc::PLIC].ar_region, master[ariane_soc::CLINT].ar_region, master[ariane_soc::ROM].ar_region, master[ariane_soc::Debug].ar_region  } ),        // output wire [39 : 0] m_axi_arregion
+    .m_axi_arqos      ( {master[ariane_soc::DRAM].ar_qos, master[ariane_soc::GPIO].ar_qos, master[ariane_soc::Ethernet].ar_qos, master[ariane_soc::SPI].ar_qos, master[ariane_soc::Timer].ar_qos, master[ariane_soc::UART].ar_qos, master[ariane_soc::PLIC].ar_qos, master[ariane_soc::CLINT].ar_qos, master[ariane_soc::ROM].ar_qos, master[ariane_soc::Debug].ar_qos  }                               ),        // output wire [39 : 0] m_axi_arqos
+    .m_axi_aruser     ( {master[ariane_soc::DRAM].ar_user, master[ariane_soc::GPIO].ar_user, master[ariane_soc::Ethernet].ar_user, master[ariane_soc::SPI].ar_user, master[ariane_soc::Timer].ar_user, master[ariane_soc::UART].ar_user, master[ariane_soc::PLIC].ar_user, master[ariane_soc::CLINT].ar_user, master[ariane_soc::ROM].ar_user, master[ariane_soc::Debug].ar_user  }                     ),        // output wire [1279 : 0] m_axi_aruser
+    .m_axi_arvalid    ( {master[ariane_soc::DRAM].ar_valid, master[ariane_soc::GPIO].ar_valid, master[ariane_soc::Ethernet].ar_valid, master[ariane_soc::SPI].ar_valid, master[ariane_soc::Timer].ar_valid, master[ariane_soc::UART].ar_valid, master[ariane_soc::PLIC].ar_valid, master[ariane_soc::CLINT].ar_valid, master[ariane_soc::ROM].ar_valid, master[ariane_soc::Debug].ar_valid  }           ),        // output wire [9 : 0] m_axi_arvalid
+    .m_axi_arready    ( {master[ariane_soc::DRAM].ar_ready, master[ariane_soc::GPIO].ar_ready, master[ariane_soc::Ethernet].ar_ready, master[ariane_soc::SPI].ar_ready, master[ariane_soc::Timer].ar_ready, master[ariane_soc::UART].ar_ready, master[ariane_soc::PLIC].ar_ready, master[ariane_soc::CLINT].ar_ready, master[ariane_soc::ROM].ar_ready, master[ariane_soc::Debug].ar_ready  }           ),        // input wire [9 : 0] m_axi_arready
+    .m_axi_rid        ( {master[ariane_soc::DRAM].r_id, master[ariane_soc::GPIO].r_id, master[ariane_soc::Ethernet].r_id, master[ariane_soc::SPI].r_id, master[ariane_soc::Timer].r_id, master[ariane_soc::UART].r_id, master[ariane_soc::PLIC].r_id, master[ariane_soc::CLINT].r_id, master[ariane_soc::ROM].r_id, master[ariane_soc::Debug].r_id  }                                                   ),        // input wire [39 : 0] m_axi_rid
+    .m_axi_rdata      ( {master[ariane_soc::DRAM].r_data, master[ariane_soc::GPIO].r_data, master[ariane_soc::Ethernet].r_data, master[ariane_soc::SPI].r_data, master[ariane_soc::Timer].r_data, master[ariane_soc::UART].r_data, master[ariane_soc::PLIC].r_data, master[ariane_soc::CLINT].r_data, master[ariane_soc::ROM].r_data, master[ariane_soc::Debug].r_data  }                               ),        // input wire [639 : 0] m_axi_rdata
+    .m_axi_rresp      ( {master[ariane_soc::DRAM].r_resp, master[ariane_soc::GPIO].r_resp, master[ariane_soc::Ethernet].r_resp, master[ariane_soc::SPI].r_resp, master[ariane_soc::Timer].r_resp, master[ariane_soc::UART].r_resp, master[ariane_soc::PLIC].r_resp, master[ariane_soc::CLINT].r_resp, master[ariane_soc::ROM].r_resp, master[ariane_soc::Debug].r_resp  }                               ),        // input wire [19 : 0] m_axi_rresp
+    .m_axi_rlast      ( {master[ariane_soc::DRAM].r_last, master[ariane_soc::GPIO].r_last, master[ariane_soc::Ethernet].r_last, master[ariane_soc::SPI].r_last, master[ariane_soc::Timer].r_last, master[ariane_soc::UART].r_last, master[ariane_soc::PLIC].r_last, master[ariane_soc::CLINT].r_last, master[ariane_soc::ROM].r_last, master[ariane_soc::Debug].r_last  }                               ),        // input wire [9 : 0] m_axi_rlast
+    .m_axi_ruser      ( {master[ariane_soc::DRAM].r_user, master[ariane_soc::GPIO].r_user, master[ariane_soc::Ethernet].r_user, master[ariane_soc::SPI].r_user, master[ariane_soc::Timer].r_user, master[ariane_soc::UART].r_user, master[ariane_soc::PLIC].r_user, master[ariane_soc::CLINT].r_user, master[ariane_soc::ROM].r_user, master[ariane_soc::Debug].r_user  }                               ),        // input wire [1279 : 0] m_axi_ruser
+    .m_axi_rvalid     ( {master[ariane_soc::DRAM].r_valid, master[ariane_soc::GPIO].r_valid, master[ariane_soc::Ethernet].r_valid, master[ariane_soc::SPI].r_valid, master[ariane_soc::Timer].r_valid, master[ariane_soc::UART].r_valid, master[ariane_soc::PLIC].r_valid, master[ariane_soc::CLINT].r_valid, master[ariane_soc::ROM].r_valid, master[ariane_soc::Debug].r_valid  }                     ),        // input wire [9 : 0] m_axi_rvalid
+    .m_axi_rready     ( {master[ariane_soc::DRAM].r_ready, master[ariane_soc::GPIO].r_ready, master[ariane_soc::Ethernet].r_ready, master[ariane_soc::SPI].r_ready, master[ariane_soc::Timer].r_ready, master[ariane_soc::UART].r_ready, master[ariane_soc::PLIC].r_ready, master[ariane_soc::CLINT].r_ready, master[ariane_soc::ROM].r_ready, master[ariane_soc::Debug].r_ready  }                     )         // output wire [9 : 0] m_axi_rready
+  );
+`else
+  axi_node_wrap_with_slices #(
+      // three ports from Ariane (instruction, data and bypass)
+      .NB_SLAVE           ( NBSlave                    ),
+      .NB_MASTER          ( ariane_soc::NB_PERIPHERALS ),
+      .NB_REGION          ( ariane_soc::NrRegion       ),
+      .AXI_ADDR_WIDTH     ( AxiAddrWidth               ),
+      .AXI_DATA_WIDTH     ( AxiDataWidth               ),
+      .AXI_USER_WIDTH     ( AxiUserWidth               ),
+      .AXI_ID_WIDTH       ( AxiIdWidthMaster           ),
+      .MASTER_SLICE_DEPTH ( 2                          ),
+      .SLAVE_SLICE_DEPTH  ( 2                          )
+  ) i_axi_xbar (
     .clk          ( clk        ),
     .rst_n        ( ndmreset_n ),
     .test_en_i    ( test_en    ),
@@ -288,7 +425,9 @@ axi_node_wrap_with_slices #(
         ariane_soc::DRAMBase     + ariane_soc::DRAMLength - 1
     }),
     .valid_rule_i (ariane_soc::ValidRule)
-);
+  );
+`endif
+
 
 // ---------------
 // Debug Module
@@ -690,90 +829,259 @@ xlnx_protocol_checker i_xlnx_protocol_checker (
 assign dram.r_user = '0;
 assign dram.b_user = '0;
 
+
+`ifdef MEE
+  memsec #(
+    .C_S_AXI_TARGET_SLAVE_BASE_ADDR ( `MEMSEC_C_S_AXI_TARGET_SLAVE_BASE_ADDR ),
+    .C_S_AXI_ID_WIDTH               ( AxiIdWidthMaster        ), 
+    .C_S_AXI_DATA_WIDTH             ( AxiDataWidth            ),
+    .C_S_AXI_ADDR_WIDTH             ( AxiAddrWidth            ),
+    .C_S_AXI_ARUSER_WIDTH           ( AxiUserWidth            ),
+    .C_S_AXI_AWUSER_WIDTH           ( AxiUserWidth            ),
+    .C_S_AXI_WUSER_WIDTH            ( AxiUserWidth            ),
+    .C_S_AXI_RUSER_WIDTH            ( AxiUserWidth            ),
+    .C_S_AXI_BUSER_WIDTH            ( AxiUserWidth            ),
+
+    .C_M_AXI_ID_WIDTH               ( AxiIdWidthMaster        ),
+    .C_M_AXI_DATA_WIDTH             ( AxiDataWidth            ),
+    .C_M_AXI_ADDR_WIDTH             ( AxiAddrWidth            ),
+    .C_M_AXI_ARUSER_WIDTH           ( AxiUserWidth            ),
+    .C_M_AXI_AWUSER_WIDTH           ( AxiUserWidth            ),
+    .C_M_AXI_WUSER_WIDTH            ( AxiUserWidth            ),
+    .C_M_AXI_RUSER_WIDTH            ( AxiUserWidth            ),
+    .C_M_AXI_BUSER_WIDTH            ( AxiUserWidth            ),
+
+    .CRYPTO_CONFIG                  ( `CRYPTO_CONFIG          ),
+    .DATA_MEMORY_SIZE               ( `DATA_MEMORY_SIZE       ),
+    .TREE_ROOTS                     ( `TREE_ROOTS             ),
+    .TREE_ARITY                     ( `TREE_ARITY             ),
+    .TREE_NODE_CACHE_SIZE           ( `TREE_NODE_CACHE_SIZE   ),
+    .DATA_BLOCK_SIZE                ( `DATA_BLOCK_SIZE        ),
+    .BLOCKS_PER_SECTOR              ( `BLOCKS_PER_SECTOR      ) 
+  ) msec
+  (
+    //Input
+    .s_axi_aclk    ( clk                    ),
+    .s_axi_aresetn ( ndmreset_n             ),
+    .s_axi_awid    ( dram.aw_id             ),
+    .s_axi_awaddr  ( dram.aw_addr           ),
+    .s_axi_awlen   ( dram.aw_len            ),
+    .s_axi_awsize  ( dram.aw_size           ),
+    .s_axi_awburst ( dram.aw_burst          ),
+    .s_axi_awlock  ( dram.aw_lock           ),
+    .s_axi_awcache ( dram.aw_cache          ),
+    .s_axi_awprot  ( dram.aw_prot           ),
+    .s_axi_awqos   ( dram.aw_qos            ),
+    .s_axi_awregion( dram.aw_region         ),
+    .s_axi_awuser  ( dram.aw_user           ),
+    .s_axi_awvalid ( dram.aw_valid          ),
+    .s_axi_awready ( dram.aw_ready          ),
+    .s_axi_wdata   ( dram.w_data            ),
+    .s_axi_wstrb   ( dram.w_strb            ),
+    .s_axi_wlast   ( dram.w_last            ),
+    .s_axi_wuser   ( dram.w_user            ),
+    .s_axi_wvalid  ( dram.w_valid           ),
+    .s_axi_wready  ( dram.w_ready           ),
+    .s_axi_bid     ( dram.b_id              ),
+    .s_axi_bresp   ( dram.b_resp            ),
+    .s_axi_buser   ( dram.b_user            ),
+    .s_axi_bvalid  ( dram.b_valid           ),
+    .s_axi_bready  ( dram.b_ready           ),
+    .s_axi_arid    ( dram.ar_id             ),
+    .s_axi_araddr  ( dram.ar_addr           ),
+    .s_axi_arlen   ( dram.ar_len            ),
+    .s_axi_arsize  ( dram.ar_size           ),
+    .s_axi_arburst ( dram.ar_burst          ),
+    .s_axi_arlock  ( dram.ar_lock           ),
+    .s_axi_arcache ( dram.ar_cache          ),
+    .s_axi_arprot  ( dram.ar_prot           ),
+    .s_axi_arqos   ( dram.ar_qos            ),
+    .s_axi_arregion( dram.ar_region         ),
+    .s_axi_aruser  ( dram.ar_user           ),
+    .s_axi_arvalid ( dram.ar_valid          ),
+    .s_axi_arready ( dram.ar_ready          ),
+    .s_axi_rid     ( dram.r_id              ),
+    .s_axi_rdata   ( dram.r_data            ),
+    .s_axi_rresp   ( dram.r_resp            ),
+    .s_axi_rlast   ( dram.r_last            ),
+    .s_axi_ruser   ( dram.r_user            ),
+    .s_axi_rvalid  ( dram.r_valid           ),
+    .s_axi_rready  ( dram.r_ready           ),
+    //Output
+    .m_axi_aclk    ( clk                    ),
+    .m_axi_aresetn ( rstn                   ),
+    .m_axi_awid    ( axi_mem_memsec_awid    ),
+    .m_axi_awaddr  ( axi_mem_memsec_awaddr  ),
+    .m_axi_awlen   ( axi_mem_memsec_awlen   ),
+    .m_axi_awsize  ( axi_mem_memsec_awsize  ),
+    .m_axi_awburst ( axi_mem_memsec_awburst ),
+    .m_axi_awlock  ( axi_mem_memsec_awlock  ),
+    .m_axi_awcache ( axi_mem_memsec_awcache ),
+    .m_axi_awprot  ( axi_mem_memsec_awprot  ),
+    .m_axi_awqos   ( axi_mem_memsec_awqos   ),
+    .m_axi_awuser  ( axi_mem_memsec_awuser  ),
+    .m_axi_awvalid ( axi_mem_memsec_awvalid ),
+    .m_axi_awready ( axi_mem_memsec_awready ),
+    .m_axi_wdata   ( axi_mem_memsec_wdata   ),
+    .m_axi_wstrb   ( axi_mem_memsec_wstrb   ),
+    .m_axi_wlast   ( axi_mem_memsec_wlast   ),
+    .m_axi_wuser   ( axi_mem_memsec_wuser   ),
+    .m_axi_wvalid  ( axi_mem_memsec_wvalid  ),
+    .m_axi_wready  ( axi_mem_memsec_wready  ),
+    .m_axi_bid     ( axi_mem_memsec_bid     ),
+    .m_axi_bresp   ( axi_mem_memsec_bresp   ),
+    .m_axi_buser   ( axi_mem_memsec_buser   ),
+    .m_axi_bvalid  ( axi_mem_memsec_bvalid  ),
+    .m_axi_bready  ( axi_mem_memsec_bready  ),
+    .m_axi_arid    ( axi_mem_memsec_arid    ),
+    .m_axi_araddr  ( axi_mem_memsec_araddr  ),
+    .m_axi_arlen   ( axi_mem_memsec_arlen   ),
+    .m_axi_arsize  ( axi_mem_memsec_arsize  ),
+    .m_axi_arburst ( axi_mem_memsec_arburst ),
+    .m_axi_arlock  ( axi_mem_memsec_arlock  ),
+    .m_axi_arcache ( axi_mem_memsec_arcache ),
+    .m_axi_arprot  ( axi_mem_memsec_arprot  ),
+    .m_axi_arqos   ( axi_mem_memsec_arqos   ),
+    .m_axi_aruser  ( axi_mem_memsec_aruser  ),
+    .m_axi_arvalid ( axi_mem_memsec_arvalid ),
+    .m_axi_arready ( axi_mem_memsec_arready ),
+    .m_axi_rid     ( axi_mem_memsec_rid     ),
+    .m_axi_rdata   ( axi_mem_memsec_rdata   ),
+    .m_axi_rresp   ( axi_mem_memsec_rresp   ),
+    .m_axi_rlast   ( axi_mem_memsec_rlast   ),
+    .m_axi_ruser   ( axi_mem_memsec_ruser   ),
+    .m_axi_rvalid  ( axi_mem_memsec_rvalid  ),
+    .m_axi_rready  ( axi_mem_memsec_rready  )
+  );
+`endif
+
+
 xlnx_axi_clock_converter i_xlnx_axi_clock_converter_ddr (
-  .s_axi_aclk     ( clk              ),
-  .s_axi_aresetn  ( ndmreset_n       ),
-  .s_axi_awid     ( dram.aw_id       ),
-  .s_axi_awaddr   ( dram.aw_addr     ),
-  .s_axi_awlen    ( dram.aw_len      ),
-  .s_axi_awsize   ( dram.aw_size     ),
-  .s_axi_awburst  ( dram.aw_burst    ),
-  .s_axi_awlock   ( dram.aw_lock     ),
-  .s_axi_awcache  ( dram.aw_cache    ),
-  .s_axi_awprot   ( dram.aw_prot     ),
-  .s_axi_awregion ( dram.aw_region   ),
-  .s_axi_awqos    ( dram.aw_qos      ),
-  .s_axi_awvalid  ( dram.aw_valid    ),
-  .s_axi_awready  ( dram.aw_ready    ),
-  .s_axi_wdata    ( dram.w_data      ),
-  .s_axi_wstrb    ( dram.w_strb      ),
-  .s_axi_wlast    ( dram.w_last      ),
-  .s_axi_wvalid   ( dram.w_valid     ),
-  .s_axi_wready   ( dram.w_ready     ),
-  .s_axi_bid      ( dram.b_id        ),
-  .s_axi_bresp    ( dram.b_resp      ),
-  .s_axi_bvalid   ( dram.b_valid     ),
-  .s_axi_bready   ( dram.b_ready     ),
-  .s_axi_arid     ( dram.ar_id       ),
-  .s_axi_araddr   ( dram.ar_addr     ),
-  .s_axi_arlen    ( dram.ar_len      ),
-  .s_axi_arsize   ( dram.ar_size     ),
-  .s_axi_arburst  ( dram.ar_burst    ),
-  .s_axi_arlock   ( dram.ar_lock     ),
-  .s_axi_arcache  ( dram.ar_cache    ),
-  .s_axi_arprot   ( dram.ar_prot     ),
-  .s_axi_arregion ( dram.ar_region   ),
-  .s_axi_arqos    ( dram.ar_qos      ),
-  .s_axi_arvalid  ( dram.ar_valid    ),
-  .s_axi_arready  ( dram.ar_ready    ),
-  .s_axi_rid      ( dram.r_id        ),
-  .s_axi_rdata    ( dram.r_data      ),
-  .s_axi_rresp    ( dram.r_resp      ),
-  .s_axi_rlast    ( dram.r_last      ),
-  .s_axi_rvalid   ( dram.r_valid     ),
-  .s_axi_rready   ( dram.r_ready     ),
+  .s_axi_aclk     ( clk                        ),
+  .s_axi_aresetn  ( ndmreset_n                 ),
+`ifdef MEE
+  .s_axi_awid     ( axi_mem_memsec_awid       ),
+  .s_axi_awaddr   ( axi_mem_memsec_awaddr     ),
+  .s_axi_awlen    ( axi_mem_memsec_awlen      ),
+  .s_axi_awsize   ( axi_mem_memsec_awsize     ),
+  .s_axi_awburst  ( axi_mem_memsec_awburst    ),
+  .s_axi_awlock   ( axi_mem_memsec_awlock     ),
+  .s_axi_awcache  ( axi_mem_memsec_awcache    ),
+  .s_axi_awprot   ( axi_mem_memsec_awprot     ),
+  .s_axi_awregion ( axi_mem_memsec_awregion   ),
+  .s_axi_awqos    ( axi_mem_memsec_awqos      ),
+  .s_axi_awvalid  ( axi_mem_memsec_awvalid    ),
+  .s_axi_awready  ( axi_mem_memsec_awready    ),
+  .s_axi_wdata    ( axi_mem_memsec_wdata      ),
+  .s_axi_wstrb    ( axi_mem_memsec_wstrb      ),
+  .s_axi_wlast    ( axi_mem_memsec_wlast      ),
+  .s_axi_wvalid   ( axi_mem_memsec_wvalid     ),
+  .s_axi_wready   ( axi_mem_memsec_wready     ),
+  .s_axi_bid      ( axi_mem_memsec_bid        ),
+  .s_axi_bresp    ( axi_mem_memsec_bresp      ),
+  .s_axi_bvalid   ( axi_mem_memsec_bvalid     ),
+  .s_axi_bready   ( axi_mem_memsec_bready     ),
+  .s_axi_arid     ( axi_mem_memsec_arid       ),
+  .s_axi_araddr   ( axi_mem_memsec_araddr     ),
+  .s_axi_arlen    ( axi_mem_memsec_arlen      ),
+  .s_axi_arsize   ( axi_mem_memsec_arsize     ),
+  .s_axi_arburst  ( axi_mem_memsec_arburst    ),
+  .s_axi_arlock   ( axi_mem_memsec_arlock     ),
+  .s_axi_arcache  ( axi_mem_memsec_arcache    ),
+  .s_axi_arprot   ( axi_mem_memsec_arprot     ),
+  .s_axi_arregion ( axi_mem_memsec_arregion   ),
+  .s_axi_arqos    ( axi_mem_memsec_arqos      ),
+  .s_axi_arvalid  ( axi_mem_memsec_arvalid    ),
+  .s_axi_arready  ( axi_mem_memsec_arready    ),
+  .s_axi_rid      ( axi_mem_memsec_rid        ),
+  .s_axi_rdata    ( axi_mem_memsec_rdata      ),
+  .s_axi_rresp    ( axi_mem_memsec_rresp      ),
+  .s_axi_rlast    ( axi_mem_memsec_rlast      ),
+  .s_axi_rvalid   ( axi_mem_memsec_rvalid     ),
+  .s_axi_rready   ( axi_mem_memsec_rready     ),
+`else
+  .s_axi_awid     ( dram.aw_id                 ),
+  .s_axi_awaddr   ( dram.aw_addr               ),
+  .s_axi_awlen    ( dram.aw_len                ),
+  .s_axi_awsize   ( dram.aw_size               ),
+  .s_axi_awburst  ( dram.aw_burst              ),
+  .s_axi_awlock   ( dram.aw_lock               ),
+  .s_axi_awcache  ( dram.aw_cache              ),
+  .s_axi_awprot   ( dram.aw_prot               ),
+  .s_axi_awregion ( dram.aw_region             ),
+  .s_axi_awqos    ( dram.aw_qos                ),
+  .s_axi_awvalid  ( dram.aw_valid              ),
+  .s_axi_awready  ( dram.aw_ready              ),
+  .s_axi_wdata    ( dram.w_data                ),
+  .s_axi_wstrb    ( dram.w_strb                ),
+  .s_axi_wlast    ( dram.w_last                ),
+  .s_axi_wvalid   ( dram.w_valid               ),
+  .s_axi_wready   ( dram.w_ready               ),
+  .s_axi_bid      ( dram.b_id                  ),
+  .s_axi_bresp    ( dram.b_resp                ),
+  .s_axi_bvalid   ( dram.b_valid               ),
+  .s_axi_bready   ( dram.b_ready               ),
+  .s_axi_arid     ( dram.ar_id                 ),
+  .s_axi_araddr   ( dram.ar_addr               ),
+  .s_axi_arlen    ( dram.ar_len                ),
+  .s_axi_arsize   ( dram.ar_size               ),
+  .s_axi_arburst  ( dram.ar_burst              ),
+  .s_axi_arlock   ( dram.ar_lock               ),
+  .s_axi_arcache  ( dram.ar_cache              ),
+  .s_axi_arprot   ( dram.ar_prot               ),
+  .s_axi_arregion ( dram.ar_region             ),
+  .s_axi_arqos    ( dram.ar_qos                ),
+  .s_axi_arvalid  ( dram.ar_valid              ),
+  .s_axi_arready  ( dram.ar_ready              ),
+  .s_axi_rid      ( dram.r_id                  ),
+  .s_axi_rdata    ( dram.r_data                ),
+  .s_axi_rresp    ( dram.r_resp                ),
+  .s_axi_rlast    ( dram.r_last                ),
+  .s_axi_rvalid   ( dram.r_valid               ),
+  .s_axi_rready   ( dram.r_ready               ),
+`endif   
   // to size converter
-  .m_axi_aclk     ( ddr_clock_out    ),
-  .m_axi_aresetn  ( ndmreset_n       ),
-  .m_axi_awid     ( s_axi_awid       ),
-  .m_axi_awaddr   ( s_axi_awaddr     ),
-  .m_axi_awlen    ( s_axi_awlen      ),
-  .m_axi_awsize   ( s_axi_awsize     ),
-  .m_axi_awburst  ( s_axi_awburst    ),
-  .m_axi_awlock   ( s_axi_awlock     ),
-  .m_axi_awcache  ( s_axi_awcache    ),
-  .m_axi_awprot   ( s_axi_awprot     ),
-  .m_axi_awregion ( s_axi_awregion   ),
-  .m_axi_awqos    ( s_axi_awqos      ),
-  .m_axi_awvalid  ( s_axi_awvalid    ),
-  .m_axi_awready  ( s_axi_awready    ),
-  .m_axi_wdata    ( s_axi_wdata      ),
-  .m_axi_wstrb    ( s_axi_wstrb      ),
-  .m_axi_wlast    ( s_axi_wlast      ),
-  .m_axi_wvalid   ( s_axi_wvalid     ),
-  .m_axi_wready   ( s_axi_wready     ),
-  .m_axi_bid      ( s_axi_bid        ),
-  .m_axi_bresp    ( s_axi_bresp      ),
-  .m_axi_bvalid   ( s_axi_bvalid     ),
-  .m_axi_bready   ( s_axi_bready     ),
-  .m_axi_arid     ( s_axi_arid       ),
-  .m_axi_araddr   ( s_axi_araddr     ),
-  .m_axi_arlen    ( s_axi_arlen      ),
-  .m_axi_arsize   ( s_axi_arsize     ),
-  .m_axi_arburst  ( s_axi_arburst    ),
-  .m_axi_arlock   ( s_axi_arlock     ),
-  .m_axi_arcache  ( s_axi_arcache    ),
-  .m_axi_arprot   ( s_axi_arprot     ),
-  .m_axi_arregion ( s_axi_arregion   ),
-  .m_axi_arqos    ( s_axi_arqos      ),
-  .m_axi_arvalid  ( s_axi_arvalid    ),
-  .m_axi_arready  ( s_axi_arready    ),
-  .m_axi_rid      ( s_axi_rid        ),
-  .m_axi_rdata    ( s_axi_rdata      ),
-  .m_axi_rresp    ( s_axi_rresp      ),
-  .m_axi_rlast    ( s_axi_rlast      ),
-  .m_axi_rvalid   ( s_axi_rvalid     ),
-  .m_axi_rready   ( s_axi_rready     )
+  .m_axi_aclk     ( ddr_clock_out              ),
+  .m_axi_aresetn  ( ndmreset_n                 ),
+  .m_axi_awid     ( s_axi_awid                 ),
+  .m_axi_awaddr   ( s_axi_awaddr               ),
+  .m_axi_awlen    ( s_axi_awlen                ),
+  .m_axi_awsize   ( s_axi_awsize               ),
+  .m_axi_awburst  ( s_axi_awburst              ),
+  .m_axi_awlock   ( s_axi_awlock               ),
+  .m_axi_awcache  ( s_axi_awcache              ),
+  .m_axi_awprot   ( s_axi_awprot               ),
+  .m_axi_awregion ( s_axi_awregion             ),
+  .m_axi_awqos    ( s_axi_awqos                ),
+  .m_axi_awvalid  ( s_axi_awvalid              ),
+  .m_axi_awready  ( s_axi_awready              ),
+  .m_axi_wdata    ( s_axi_wdata                ),
+  .m_axi_wstrb    ( s_axi_wstrb                ),
+  .m_axi_wlast    ( s_axi_wlast                ),
+  .m_axi_wvalid   ( s_axi_wvalid               ),
+  .m_axi_wready   ( s_axi_wready               ),
+  .m_axi_bid      ( s_axi_bid                  ),
+  .m_axi_bresp    ( s_axi_bresp                ),
+  .m_axi_bvalid   ( s_axi_bvalid               ),
+  .m_axi_bready   ( s_axi_bready               ),
+  .m_axi_arid     ( s_axi_arid                 ),
+  .m_axi_araddr   ( s_axi_araddr               ),
+  .m_axi_arlen    ( s_axi_arlen                ),
+  .m_axi_arsize   ( s_axi_arsize               ),
+  .m_axi_arburst  ( s_axi_arburst              ),
+  .m_axi_arlock   ( s_axi_arlock               ),
+  .m_axi_arcache  ( s_axi_arcache              ),
+  .m_axi_arprot   ( s_axi_arprot               ),
+  .m_axi_arregion ( s_axi_arregion             ),
+  .m_axi_arqos    ( s_axi_arqos                ),
+  .m_axi_arvalid  ( s_axi_arvalid              ),
+  .m_axi_arready  ( s_axi_arready              ),
+  .m_axi_rid      ( s_axi_rid                  ),
+  .m_axi_rdata    ( s_axi_rdata                ),
+  .m_axi_rresp    ( s_axi_rresp                ),
+  .m_axi_rlast    ( s_axi_rlast                ),
+  .m_axi_rvalid   ( s_axi_rvalid               ),
+  .m_axi_rready   ( s_axi_rready               )
 );
 
 xlnx_clk_gen i_xlnx_clk_gen (
@@ -1456,4 +1764,4 @@ axi_clock_converter_0 pcie_axi_clock_converter (
 );
 `endif
 
-endmodule
+endmodule
\ No newline at end of file
diff --git a/fpga/src/bootrom/ariane.dts b/fpga/src/bootrom/ariane.dts
index c9e11d5..8553792 100644
--- a/fpga/src/bootrom/ariane.dts
+++ b/fpga/src/bootrom/ariane.dts
@@ -31,7 +31,7 @@
   };
   memory@80000000 {
     device_type = "memory";
-    reg = <0x0 0x80000000 0x0 0x40000000>;
+    reg = <0x0 0x80000000 0x0 0x10000000>;
   };
   leds {
     compatible = "gpio-leds";
diff --git a/fpga/src/bootrom/bootrom.h b/fpga/src/bootrom/bootrom.h
index c7e3c30..9a889f5 100644
--- a/fpga/src/bootrom/bootrom.h
+++ b/fpga/src/bootrom/bootrom.h
@@ -1,6 +1,6 @@
 // Auto-generated code
 
-const int reset_vec_size = 1732;
+const int reset_vec_size = 1768;
 
 uint32_t reset_vec[reset_vec_size] = {
     0x00800913,
@@ -10,7 +10,7 @@ uint32_t reset_vec[reset_vec_size] = {
     0x03249663,
     0x0210011b,
     0x01a11113,
-    0x25f000ef,
+    0x285000ef,
     0x020004b7,
     0x00100913,
     0x0124a023,
@@ -154,552 +154,552 @@ uint32_t reset_vec[reset_vec_size] = {
     0x60e2ecff,
     0x80826105,
     0x8082c10c,
-    0x80824108,
+    0x25014108,
+    0x15178082,
+    0x11010000,
+    0x64e50513,
+    0xe822ec06,
+    0xf0efe426,
+    0x07b7f03f,
+    0x47292000,
+    0x47a9c3b8,
+    0x37fd0001,
+    0x0437fff5,
+    0x07932000,
+    0xd03c1040,
+    0x15175064,
+    0x05130000,
+    0xf0ef62e5,
+    0x2481edbf,
+    0x02049513,
+    0xf0ef9101,
+    0x1517f51f,
+    0x05130000,
+    0xf0ef6365,
+    0x0793ec3f,
+    0xd03c1660,
+    0x15175064,
+    0x05130000,
+    0xf0ef6025,
+    0x2481eaff,
+    0x02049513,
+    0xf0ef9101,
+    0x1517f25f,
+    0x05130000,
+    0xf0ef60a5,
+    0x4799e97f,
+    0x6442d03c,
+    0x64a260e2,
     0x00001517,
-    0x05131101,
-    0xec065c05,
-    0xe426e822,
-    0xf05ff0ef,
+    0x5e450513,
+    0xf06f6105,
+    0x1101e7ff,
     0x200007b7,
-    0xc3b84729,
-    0x000147a9,
-    0xfff537fd,
-    0x20000437,
-    0x10400793,
-    0x5064d03c,
-    0x00001517,
-    0x5a050513,
-    0xeddff0ef,
-    0x95132481,
-    0x91010204,
-    0xf53ff0ef,
-    0x00001517,
-    0x5a850513,
-    0xec5ff0ef,
-    0x16600793,
-    0x5064d03c,
-    0x00001517,
-    0x57450513,
-    0xeb1ff0ef,
-    0x95132481,
-    0x91010204,
-    0xf27ff0ef,
+    0xe822ec06,
+    0x5779e426,
+    0xd7a8dbb8,
+    0x06400793,
+    0x37fd0001,
+    0x07b7fff5,
+    0x07132000,
+    0xd3b81060,
+    0x849353f8,
+    0x8b050647,
+    0x57e0ff65,
+    0x240153fc,
+    0xe3958b85,
     0x00001517,
-    0x57c50513,
-    0xe99ff0ef,
-    0xd03c4799,
-    0x60e26442,
-    0x151764a2,
+    0x5b450513,
+    0xe39ff0ef,
+    0x15024088,
+    0xf0ef9101,
+    0x1517eb1f,
     0x05130000,
-    0x61055565,
-    0xe81ff06f,
-    0x07b71101,
-    0xec062000,
-    0xe426e822,
+    0xf0ef5965,
+    0x07b7e23f,
+    0x577d2000,
+    0x0ff47513,
+    0x644260e2,
+    0x4719dbb8,
+    0x64a2d3b8,
+    0x80826105,
+    0x10000793,
+    0x06b7ee63,
+    0x200007b7,
     0xdbb85779,
-    0x0793d7a8,
-    0x00010640,
+    0x200006b7,
+    0x871b4781,
+    0x61630007,
+    0x079304b7,
+    0x00010320,
     0xfff537fd,
-    0x200007b7,
     0x10600713,
-    0x53f8d3b8,
-    0x06478493,
-    0xff658b05,
-    0x53fc57e0,
-    0x8b852401,
-    0x1517e395,
-    0x05130000,
-    0xf0ef5265,
-    0x4088e3bf,
-    0x91011502,
-    0xeb3ff0ef,
-    0x00001517,
-    0x50850513,
-    0xe25ff0ef,
     0x200007b7,
-    0x7513577d,
-    0x60e20ff4,
-    0xdbb86442,
+    0x0737d3b8,
+    0x537c2000,
+    0xfff58b85,
+    0x20000537,
+    0x20000837,
+    0x0007869b,
+    0x02b6e163,
+    0x200007b7,
+    0xdbb8577d,
     0xd3b84719,
-    0x610564a2,
-    0x07938082,
-    0xec631000,
-    0x07b706b7,
-    0x57792000,
-    0x06b7dbb8,
-    0x87aa2000,
-    0x40a7873b,
-    0x04b76163,
-    0x03200793,
-    0x37fd0001,
-    0x0713fff5,
-    0x07b71060,
-    0xd3b82000,
-    0x20000737,
-    0x8b85537c,
-    0x0537fff5,
-    0x08372000,
-    0x869b2000,
-    0xef630007,
-    0x07b700b6,
-    0x577d2000,
-    0x4719dbb8,
-    0x4501d3b8,
-    0xc7038082,
-    0x07850007,
-    0xbf4dd6b8,
-    0x8b055178,
-    0x2683ff79,
-    0x073306c8,
-    0x078500f6,
-    0x00d70023,
-    0x557db7e9,
-    0x05138082,
-    0xf06f0ff0,
-    0x7179f07f,
-    0xe432f406,
-    0xec26f022,
-    0x84aa842e,
-    0xfebff0ef,
-    0x0404e513,
-    0xeedff0ef,
-    0x0184551b,
-    0x0ff57513,
-    0xee1ff0ef,
-    0x0104551b,
-    0x0ff57513,
-    0xed5ff0ef,
-    0x0084551b,
-    0x0ff57513,
-    0xec9ff0ef,
-    0x0ff47513,
-    0xec1ff0ef,
-    0x04136622,
-    0x85320640,
-    0xeb5ff0ef,
-    0xfa7ff0ef,
-    0x0185179b,
-    0x4187d79b,
-    0x0007d463,
-    0xf47d147d,
-    0x740270a2,
-    0x614564e2,
-    0x11018082,
-    0x842ae822,
-    0x00001517,
-    0x40450513,
-    0xe42eec06,
-    0xcfdff0ef,
-    0xf0ef8522,
-    0x1517cf7f,
+    0x80824501,
+    0x00f50733,
+    0x00074703,
+    0xd6b80785,
+    0x5178b77d,
+    0xff698b05,
+    0x06c82683,
+    0x00f60733,
+    0x00230785,
+    0xb7d900d7,
+    0x8082557d,
+    0x0ff00513,
+    0xf03ff06f,
+    0xf4067179,
+    0xf022e432,
+    0x842eec26,
+    0xf0ef84aa,
+    0xe513febf,
+    0xf0ef0404,
+    0x551bee9f,
+    0xf0ef0184,
+    0x551bee1f,
+    0x75130104,
+    0xf0ef0ff5,
+    0x551bed5f,
+    0x75130084,
+    0xf0ef0ff5,
+    0x7513ec9f,
+    0xf0ef0ff4,
+    0x6622ec1f,
+    0x06400413,
+    0xf0ef8532,
+    0xf0efeb5f,
+    0x179bfabf,
+    0xd79b0185,
+    0xd4634187,
+    0x147d0007,
+    0x70a2f47d,
+    0x64e27402,
+    0x80826145,
+    0xe8221101,
+    0x1517842a,
     0x05130000,
-    0xf0ef3fe5,
-    0x65a2cebf,
-    0xf0ef852e,
-    0x6442da7f,
-    0x151760e2,
+    0xec064925,
+    0xf0efe42e,
+    0x8522cfbf,
+    0xcf5ff0ef,
+    0x00001517,
+    0x48c50513,
+    0xce9ff0ef,
+    0x852e65a2,
+    0xda5ff0ef,
+    0x60e26442,
+    0x00001517,
+    0x44450513,
+    0xf06f6105,
+    0x1101ccff,
+    0x6409e822,
+    0xec06e426,
+    0x0413e04a,
+    0x44857104,
+    0x09500613,
+    0x45014581,
+    0xf39ff0ef,
+    0x892a347d,
+    0xf29ff0ef,
+    0x15e3c00d,
+    0x1517fe99,
     0x05130000,
-    0x61053b65,
-    0xcd1ff06f,
-    0xe8221101,
-    0xe4266409,
-    0xe04aec06,
-    0x71040413,
-    0x06134485,
-    0x45810950,
-    0xf0ef4501,
-    0x347df35f,
-    0xf0ef892a,
-    0xc00df25f,
-    0xfe9915e3,
+    0x458544a5,
+    0xf89ff0ef,
+    0x60e24505,
+    0x64a26442,
+    0x61056902,
+    0x45018082,
+    0x1101bfcd,
+    0x08700613,
+    0x1aa00593,
+    0xec064521,
+    0xe426e822,
+    0xf0efe04a,
+    0x892aef3f,
+    0xee5ff0ef,
+    0xee1ff0ef,
+    0xeddff0ef,
+    0xf0ef84aa,
+    0x842aed7f,
+    0xed1ff0ef,
+    0xecdff0ef,
+    0x45014785,
+    0x00f91b63,
+    0x986388bd,
+    0x051b0124,
+    0x05130004,
+    0x3513f565,
+    0x60e20015,
+    0x64a26442,
+    0x61056902,
+    0x11418082,
+    0x06500613,
+    0x05134581,
+    0xe4060370,
+    0xf0efe022,
+    0x842ae9bf,
+    0xe8dff0ef,
     0x00001517,
-    0x3bc50513,
-    0xf0ef4585,
-    0x4505f89f,
-    0x644260e2,
-    0x690264a2,
-    0x80826105,
-    0xbfcd4501,
-    0x06131101,
-    0x05930870,
-    0x45211aa0,
+    0x051385a2,
+    0xf0ef3bc5,
+    0x051bef3f,
+    0x60a20004,
+    0x157d6402,
+    0x00153513,
+    0x80820141,
+    0xe4261101,
     0xe822ec06,
-    0xe04ae426,
-    0xeefff0ef,
-    0xf0ef892a,
-    0xf0efee1f,
-    0xf0efeddf,
-    0x84aaed9f,
-    0xed3ff0ef,
-    0xf0ef842a,
-    0xf0efecdf,
-    0x4785ec9f,
-    0x1b634501,
-    0x88bd00f9,
-    0x01249863,
-    0x0004051b,
-    0xf5650513,
+    0xf0ef4485,
+    0x0613fbdf,
+    0x05b70770,
+    0x05134000,
+    0xf0ef0290,
+    0x842ae57f,
+    0x151785aa,
+    0x05130000,
+    0xf0ef3825,
+    0xf0efeb3f,
+    0x0ce3e3bf,
+    0x051bfc94,
+    0x60e20004,
+    0x64a26442,
     0x00153513,
-    0x644260e2,
-    0x690264a2,
     0x80826105,
-    0x06131141,
-    0x45810650,
-    0x03700513,
-    0xe022e406,
-    0xe97ff0ef,
-    0xf0ef842a,
-    0x1517e89f,
-    0x85a20000,
-    0x32e50513,
-    0xef3ff0ef,
-    0x0004051b,
-    0x640260a2,
-    0x3513157d,
-    0x01410015,
-    0x11018082,
-    0xec06e426,
-    0x4485e822,
-    0xfbdff0ef,
-    0x07700613,
-    0x400005b7,
-    0x02900513,
-    0xe53ff0ef,
-    0x85aa842a,
-    0x00001517,
-    0x2f450513,
-    0xeb3ff0ef,
-    0xe37ff0ef,
-    0xfc940ce3,
-    0x0004051b,
-    0x644260e2,
-    0x351364a2,
-    0x61050015,
-    0x11418082,
-    0xe022e406,
-    0xc89ff0ef,
-    0x00001517,
-    0x2cc50513,
-    0xb91ff0ef,
-    0x347d4429,
-    0xe03ff0ef,
-    0xf0effc6d,
-    0x57fdeb7f,
-    0xf0efc911,
-    0x57f9efbf,
-    0xf0efc511,
-    0x57f5f89f,
-    0x4781c111,
-    0x640260a2,
-    0x0141853e,
-    0x8de98082,
-    0x0075d79b,
+    0xe4061141,
+    0xf0efe022,
+    0x1517c89f,
+    0x05130000,
+    0xf0ef35a5,
+    0x4429b8ff,
+    0xf0ef347d,
+    0xfc6de07f,
+    0xeb7ff0ef,
+    0xc91157fd,
+    0xefbff0ef,
+    0xc51157f9,
+    0xf89ff0ef,
+    0xe1114781,
+    0x60a257f5,
+    0x853e6402,
+    0x80820141,
+    0xd79b8de9,
+    0xd51b0075,
+    0x8d3d0045,
+    0x15938d2d,
+    0x8d2d0045,
+    0x07f57513,
+    0x579b8082,
+    0x05220085,
+    0x15428d5d,
+    0x8da99141,
     0x0045d51b,
-    0x8d2d8d3d,
-    0x00451593,
-    0x75138d2d,
-    0x808207f5,
-    0x0085579b,
-    0x8d5d0522,
-    0x91411542,
-    0xd51b8da9,
-    0x893d0045,
-    0x95138da9,
-    0x8d2d00c5,
-    0x0105151b,
-    0x4105551b,
-    0x0105179b,
-    0x0107d79b,
-    0x17016709,
-    0x0057979b,
-    0x8d3d8ff9,
-    0x91411542,
-    0x71558082,
-    0x1993f54e,
-    0xe1a20206,
-    0xe586fd26,
-    0xf152f94a,
-    0xe95aed56,
-    0x84aae55e,
-    0xd993842e,
-    0x47810209,
-    0x0713567d,
-    0x06b30800,
-    0x802300f1,
-    0x078500c6,
-    0xfee79be3,
-    0x0184559b,
+    0x8da9893d,
+    0x00c59513,
+    0x151b8d2d,
+    0x551b0105,
+    0x179b4105,
+    0xd79b0105,
+    0x67090107,
+    0x979b1701,
+    0x8ff90057,
+    0x15428d3d,
+    0x80829141,
+    0xf54e7155,
+    0x02061993,
+    0xfd26e1a2,
+    0xf94ae586,
+    0xed56f152,
+    0xe55ee95a,
+    0x842e84aa,
+    0x0209d993,
+    0x567d4781,
+    0x08000713,
+    0x00f106b3,
+    0x00c68023,
+    0x9be30785,
+    0x559bfee7,
+    0x45010184,
+    0xf6dff0ef,
+    0x0104559b,
     0x0ff5f593,
-    0xf0ef4501,
-    0x559bf69f,
-    0xf5930104,
-    0xf0ef0ff5,
-    0x559bf5df,
-    0xf5930084,
-    0xf0ef0ff5,
-    0x7593f51f,
-    0xf0ef0ff4,
-    0x161bf49f,
-    0x66130015,
-    0x76130016,
-    0x85a20ff6,
-    0xf0ef4549,
-    0xe951d15f,
-    0x0fe00a13,
-    0x3e800a93,
-    0xcffff0ef,
-    0xff451ee3,
-    0x20048b13,
-    0x49018426,
+    0xf61ff0ef,
+    0x0084559b,
+    0x0ff5f593,
+    0xf55ff0ef,
+    0x0ff47593,
+    0xf4dff0ef,
+    0x0015161b,
+    0x00166613,
+    0x0ff67613,
+    0x454985a2,
+    0xd1dff0ef,
+    0x20048493,
+    0x0a93e951,
+    0x0b130fe0,
+    0x84133e80,
+    0xf0efe004,
+    0x1ee3cfff,
+    0x4901ff55,
     0x05938622,
     0x850a0400,
-    0xc67ff0ef,
-    0x0b934481,
+    0xc69ff0ef,
+    0x0b934a01,
     0x07b30400,
-    0xc5830094,
+    0xc5830144,
     0x854a0007,
-    0xf0ef0485,
-    0x892af13f,
-    0xff7497e3,
+    0xf0ef0a05,
+    0x892af15f,
+    0xff7a17e3,
     0x04040413,
-    0xfd641ae3,
-    0xcbfff0ef,
+    0xfc941ae3,
+    0xcc5ff0ef,
     0x0085151b,
-    0x141384a2,
-    0x90410305,
-    0xcafff0ef,
-    0x14428c49,
-    0x29019041,
-    0x07241a63,
-    0x0359e7b3,
-    0x1517e799,
-    0x05130000,
-    0xf0ef18a5,
-    0x19fda17f,
-    0xf93046e3,
-    0x46054401,
-    0x45314581,
-    0xc87ff0ef,
-    0xc7bff0ef,
-    0xf0efa805,
-    0xf0efc75f,
-    0xf0efc71f,
-    0xf0efc6df,
-    0xf0efc69f,
-    0xf0efc65f,
-    0xf0efc61f,
-    0xf0efc5df,
-    0x1517c59f,
-    0x05130000,
-    0xf0ef1265,
-    0x547d9d3f,
-    0x60ae8522,
-    0x74ea640e,
-    0x79aa794a,
-    0x6aea7a0a,
-    0x6baa6b4a,
-    0x80826169,
-    0xb7655479,
-    0xe0a2715d,
-    0xe85af052,
-    0xfc26e486,
-    0xf44ef84a,
-    0xe45eec56,
-    0x0880e062,
-    0x8b2e8a2a,
-    0xdf3ff0ef,
-    0x1517c51d,
-    0x05130000,
-    0xf0ef1025,
-    0x54fd987f,
-    0xfb040113,
-    0x852660a6,
-    0x74e26406,
-    0x79a27942,
-    0x6ae27a02,
-    0x6ba26b42,
-    0x61616c02,
-    0x15178082,
-    0x05130000,
-    0xf0ef0fe5,
-    0x710195bf,
-    0x45854605,
-    0xf0ef850a,
-    0x890ae49f,
-    0xc90584aa,
+    0x03051413,
+    0xf0ef9041,
+    0x8c49cb7f,
+    0x29011442,
+    0x1c639041,
+    0xe7b30689,
+    0xe7990369,
     0x00001517,
-    0x0f850513,
-    0x93dff0ef,
+    0x21c50513,
+    0xa19ff0ef,
+    0x849319fd,
+    0x46e32004,
+    0x4401f930,
+    0x45814605,
+    0xf0ef4531,
+    0xf0efc8bf,
+    0xa805c7ff,
+    0xc79ff0ef,
+    0xc75ff0ef,
+    0xc71ff0ef,
+    0xc6dff0ef,
+    0xc69ff0ef,
+    0xc65ff0ef,
+    0xc61ff0ef,
+    0xc5dff0ef,
     0x00001517,
-    0x10450513,
-    0x931ff0ef,
-    0xf0ef8526,
-    0x15179adf,
-    0x05130000,
-    0xf0ef0025,
-    0x54f991ff,
-    0x1517bf61,
+    0x1b450513,
+    0x9d1ff0ef,
+    0x8522547d,
+    0x640e60ae,
+    0x794a74ea,
+    0x7a0a79aa,
+    0x6b4a6aea,
+    0x61696baa,
+    0x54798082,
+    0x711db765,
+    0xf456e8a2,
+    0xec86f05a,
+    0xe0cae4a6,
+    0xf852fc4e,
+    0xe862ec5e,
+    0xe06ae466,
+    0x8b2a1080,
+    0xf0ef8aae,
+    0xc90ddeff,
+    0x00001517,
+    0x18c50513,
+    0x981ff0ef,
+    0x011354fd,
+    0x60e6fa04,
+    0x64468526,
+    0x690664a6,
+    0x7a4279e2,
+    0x7b027aa2,
+    0x6c426be2,
+    0x6d026ca2,
+    0x80826125,
+    0x00001517,
+    0x18450513,
+    0x951ff0ef,
+    0x46057101,
+    0x850a4585,
+    0xe41ff0ef,
+    0x84aa890a,
+    0x1517c905,
     0x05130000,
-    0xf0ef0fa5,
-    0x151790ff,
+    0xf0ef17e5,
+    0x1517933f,
     0x05130000,
-    0xf0ef10e5,
-    0x6502903f,
-    0xf0ef4b91,
-    0x151797df,
+    0xf0ef18a5,
+    0x8526927f,
+    0x9a3ff0ef,
+    0x00001517,
+    0x08850513,
+    0x915ff0ef,
+    0xbf5154f9,
+    0x00001517,
+    0x18050513,
+    0x905ff0ef,
+    0x00001517,
+    0x19450513,
+    0x8f9ff0ef,
+    0xf0ef6502,
+    0x1517975f,
     0x05130000,
-    0xf0ef10a5,
-    0x45228eff,
-    0x92bff0ef,
+    0xf0ef1925,
+    0x45228e7f,
+    0x923ff0ef,
     0x00001517,
-    0x10850513,
-    0x8ddff0ef,
+    0x19050513,
+    0x8d5ff0ef,
     0xf0ef4532,
-    0x1517919f,
+    0x1517911f,
     0x05130000,
-    0xf0ef1065,
-    0x45428cbf,
-    0x907ff0ef,
+    0xf0ef18e5,
+    0x45428c3f,
+    0x8ffff0ef,
     0x00001517,
-    0x10450513,
-    0x8b9ff0ef,
+    0x18c50513,
+    0x8b1ff0ef,
     0xf0ef4552,
-    0x15178f5f,
+    0x15178edf,
     0x05130000,
-    0xf0ef1025,
-    0x65628a7f,
-    0x923ff0ef,
+    0xf0ef18a5,
+    0x656289ff,
+    0x91bff0ef,
     0x00001517,
-    0x10850513,
-    0x895ff0ef,
+    0x19050513,
+    0x88dff0ef,
     0xf0ef7502,
-    0x1517911f,
+    0x1517909f,
     0x05130000,
-    0xf0ef1065,
-    0x6526883f,
-    0x8ffff0ef,
+    0xf0ef18e5,
+    0x652687bf,
+    0x8f7ff0ef,
     0x00001517,
-    0x11450513,
-    0x871ff0ef,
+    0x19c50513,
+    0x869ff0ef,
     0xf0ef4546,
-    0x15178adf,
+    0x15178a5f,
     0x05130000,
-    0xf0ef1225,
-    0x455685ff,
-    0x89bff0ef,
+    0xf0ef1aa5,
+    0x4556857f,
+    0x893ff0ef,
     0x00001517,
-    0xf3050513,
-    0x84dff0ef,
+    0xfb850513,
+    0x845ff0ef,
     0x04892583,
     0x46057101,
     0xf0ef850a,
-    0x8a8ad39f,
-    0x080489aa,
-    0x1517c50d,
+    0x8b8ad33f,
+    0x091384aa,
+    0x09930201,
+    0x1e630801,
+    0x4cc11005,
+    0x15174c11,
+    0x05130000,
+    0xf0ef18a5,
+    0xf513817f,
+    0xf0ef0ff4,
+    0x15178d3f,
     0x05130000,
-    0xf0effe65,
-    0x151782bf,
+    0x8d1318e5,
+    0xf0eff809,
+    0x4a01ffef,
+    0x014d07b3,
+    0x0007c503,
+    0xf0ef0a05,
+    0x19e38b3f,
+    0x1517ff9a,
     0x05130000,
-    0xf0efff25,
-    0x854e81ff,
-    0x89bff0ef,
+    0xf0ef18a5,
+    0x8a13fdef,
+    0x4503f909,
+    0x0a05000a,
+    0x895ff0ef,
+    0xff2a1be3,
+    0x00001517,
+    0x18c50513,
+    0xfc0ff0ef,
+    0x00093503,
+    0xfb898a13,
+    0x837ff0ef,
+    0x00001517,
+    0x18450513,
+    0xfa8ff0ef,
+    0x00893503,
+    0x823ff0ef,
+    0x00001517,
+    0x18050513,
+    0xf94ff0ef,
+    0x01093503,
+    0x80fff0ef,
     0x00001517,
-    0xef050513,
-    0x1517b5fd,
+    0x17c50513,
+    0xf80ff0ef,
+    0x000a4503,
+    0xf0ef0a05,
+    0x1be383bf,
+    0x1517ff3a,
     0x05130000,
-    0xf0ef0e65,
-    0xf513803f,
-    0xf0ef0ff9,
-    0x15178bff,
+    0xf0efeda5,
+    0xe099f66f,
+    0x00892a83,
+    0x09132485,
+    0x89930809,
+    0x9ae30809,
+    0x1517f384,
     0x05130000,
-    0xf0ef0ea5,
-    0x8913feef,
-    0x4503ff04,
-    0x09050009,
-    0x8a5ff0ef,
-    0xfe991be3,
-    0x00001517,
-    0x0ec50513,
-    0xfd0ff0ef,
-    0x01090c13,
-    0x00094503,
-    0xf0ef0905,
-    0x1be3887f,
-    0x1517ff2c,
+    0xf0ef1525,
+    0xa583f46f,
+    0x8656020b,
+    0xf0ef855a,
+    0x84aac37f,
+    0x1517c929,
     0x05130000,
-    0xf0ef0ee5,
-    0x6888fb2f,
-    0x02848913,
-    0x07048c13,
-    0x827ff0ef,
-    0x00001517,
-    0x0e450513,
-    0xf98ff0ef,
-    0xf0ef6c88,
-    0x1517815f,
+    0xf0eff765,
+    0x1517f2af,
     0x05130000,
-    0xf0ef0e25,
-    0x7088f86f,
-    0x803ff0ef,
+    0xf0eff825,
+    0x8526f1ef,
+    0xf9aff0ef,
     0x00001517,
-    0x0e050513,
-    0xf74ff0ef,
-    0x00094503,
-    0xf0ef0905,
-    0x1be382ff,
-    0x1517ff2c,
+    0xe8050513,
+    0x1517bbe5,
     0x05130000,
-    0x2985e3e5,
-    0xf58ff0ef,
-    0x08048493,
-    0xf57993e3,
-    0x00001517,
-    0x0c050513,
-    0xf44ff0ef,
-    0x020aa583,
-    0x8552865a,
-    0xc33ff0ef,
-    0xc50d84aa,
-    0x00001517,
-    0xee450513,
-    0xf28ff0ef,
-    0x00001517,
-    0xef050513,
-    0xf1cff0ef,
-    0xf0ef8526,
-    0x1517f98f,
+    0xf0eff4e5,
+    0x1517f02f,
     0x05130000,
-    0xb3f5dee5,
+    0xf0eff5a5,
+    0x8526ef6f,
+    0xf72ff0ef,
     0x00001517,
-    0x09450513,
-    0xf00ff0ef,
-    0x65f1bbb5,
-    0x02faf537,
-    0x85931141,
-    0x05132005,
-    0xe4060805,
-    0xea4ff0ef,
-    0x00001517,
-    0xd8050513,
-    0xedcff0ef,
-    0x65a14505,
-    0xf0ef057e,
-    0xe911d23f,
-    0x0010041b,
-    0x01f41413,
-    0x00000597,
-    0x15058593,
-    0xa0018402,
-    0x00000000,
-    0x00000000,
-    0x00000000,
-    0x00000000,
-    0x00000000,
-    0x00000000,
-    0x00000000,
-    0x00000000,
-    0x00000000,
-    0x00000000,
+    0xe5850513,
+    0x1517bbc1,
+    0x05130000,
+    0xf0ef0fe5,
+    0xbbb1edaf,
+    0xf53765f1,
+    0x114102fa,
+    0x20058593,
+    0x08050513,
+    0xf0efe406,
+    0x1517e7ef,
+    0x05130000,
+    0xf0efdea5,
+    0x4505eb6f,
+    0x057e65a1,
+    0xcffff0ef,
+    0x041be911,
+    0x14130010,
+    0x059701f4,
+    0x85930000,
+    0x840212a5,
+    0x0000a001,
     0x00000000,
     0x00000000,
     0x00000000,
@@ -772,15 +772,15 @@ uint32_t reset_vec[reset_vec_size] = {
     0x00000000,
     0x00000000,
     0xedfe0dd0,
-    0x100c0000,
+    0xa00c0000,
     0x38000000,
-    0x38090000,
+    0xc8090000,
     0x28000000,
     0x11000000,
     0x10000000,
     0x00000000,
     0xd8020000,
-    0x00090000,
+    0x90090000,
     0x00000000,
     0x00000000,
     0x00000000,
@@ -838,7 +838,7 @@ uint32_t reset_vec[reset_vec_size] = {
     0x03000000,
     0x04000000,
     0x38000000,
-    0xc0e1e400,
+    0x40787d01,
     0x01000000,
     0x40757063,
     0x00000030,
@@ -930,7 +930,7 @@ uint32_t reset_vec[reset_vec_size] = {
     0x00000000,
     0x00000080,
     0x00000000,
-    0x00000040,
+    0x00000010,
     0x02000000,
     0x01000000,
     0x7364656c,
@@ -1066,7 +1066,7 @@ uint32_t reset_vec[reset_vec_size] = {
     0x03000000,
     0x04000000,
     0x2e010000,
-    0x03000000,
+    0x1e000000,
     0x03000000,
     0x04000000,
     0xb5000000,
@@ -1150,6 +1150,42 @@ uint32_t reset_vec[reset_vec_size] = {
     0x04000000,
     0x02000000,
     0x01000000,
+    0x656d6974,
+    0x38314072,
+    0x30303030,
+    0x00003030,
+    0x03000000,
+    0x0f000000,
+    0x1b000000,
+    0x706c7570,
+    0x6270612c,
+    0x6d69745f,
+    0x00007265,
+    0x03000000,
+    0x10000000,
+    0x58010000,
+    0x04000000,
+    0x05000000,
+    0x06000000,
+    0x07000000,
+    0x03000000,
+    0x10000000,
+    0x67000000,
+    0x00000000,
+    0x00000018,
+    0x00000000,
+    0x00100000,
+    0x03000000,
+    0x04000000,
+    0x47010000,
+    0x03000000,
+    0x03000000,
+    0x08000000,
+    0x11010000,
+    0x746e6f63,
+    0x006c6f72,
+    0x02000000,
+    0x01000000,
     0x2d737078,
     0x40697073,
     0x30303032,
diff --git a/fpga/src/bootrom/bootrom.sv b/fpga/src/bootrom/bootrom.sv
index 5987194..ecb310e 100644
--- a/fpga/src/bootrom/bootrom.sv
+++ b/fpga/src/bootrom/bootrom.sv
@@ -20,7 +20,7 @@ module bootrom (
    input  logic [63:0]  addr_i,
    output logic [63:0]  rdata_o
 );
-    localparam int RomSize = 866;
+    localparam int RomSize = 884;
 
     const logic [RomSize-1:0][63:0] mem = {
         64'h00000000_00000000,
@@ -316,6 +316,24 @@ module bootrom (
         64'h00000000_30303030,
         64'h30303032_40697073,
         64'h2d737078_01000000,
+        64'h02000000_006c6f72,
+        64'h746e6f63_11010000,
+        64'h08000000_03000000,
+        64'h03000000_47010000,
+        64'h04000000_03000000,
+        64'h00100000_00000000,
+        64'h00000018_00000000,
+        64'h67000000_10000000,
+        64'h03000000_07000000,
+        64'h06000000_05000000,
+        64'h04000000_58010000,
+        64'h10000000_03000000,
+        64'h00007265_6d69745f,
+        64'h6270612c_706c7570,
+        64'h1b000000_0f000000,
+        64'h03000000_00003030,
+        64'h30303030_38314072,
+        64'h656d6974_01000000,
         64'h02000000_04000000,
         64'h6d010000_04000000,
         64'h03000000_02000000,
@@ -357,7 +375,7 @@ module bootrom (
         64'h04000000_03000000,
         64'h03000000_b5000000,
         64'h04000000_03000000,
-        64'h03000000_2e010000,
+        64'h1e000000_2e010000,
         64'h04000000_03000000,
         64'h07000000_1b010000,
         64'h04000000_03000000,
@@ -425,7 +443,7 @@ module bootrom (
         64'h0a000000_03000000,
         64'h00000000_7364656c,
         64'h01000000_02000000,
-        64'h00000040_00000000,
+        64'h00000010_00000000,
         64'h00000080_00000000,
         64'h67000000_10000000,
         64'h03000000_00007972,
@@ -471,7 +489,7 @@ module bootrom (
         64'h4b000000_04000000,
         64'h03000000_00000030,
         64'h40757063_01000000,
-        64'hc0e1e400_38000000,
+        64'h40787d01_38000000,
         64'h04000000_03000000,
         64'h00000000_0f000000,
         64'h04000000_03000000,
@@ -500,11 +518,11 @@ module bootrom (
         64'h00000000_01000000,
         64'h00000000_00000000,
         64'h00000000_00000000,
-        64'h00090000_d8020000,
+        64'h90090000_d8020000,
         64'h00000000_10000000,
         64'h11000000_28000000,
-        64'h38090000_38000000,
-        64'h100c0000_edfe0dd0,
+        64'hc8090000_38000000,
+        64'ha00c0000_edfe0dd0,
         64'h00000000_00000000,
         64'h00000000_00000000,
         64'h00000000_00000000,
@@ -540,280 +558,280 @@ module bootrom (
         64'h00000000_00000000,
         64'h00000000_00000000,
         64'h00000000_00000000,
-        64'h00000000_00000000,
-        64'h00000000_00000000,
-        64'h00000000_00000000,
-        64'h00000000_00000000,
-        64'h00000000_00000000,
-        64'h00000000_a0018402,
-        64'h15058593_00000597,
-        64'h01f41413_0010041b,
-        64'he911d23f_f0ef057e,
-        64'h65a14505_edcff0ef,
-        64'hd8050513_00001517,
-        64'hea4ff0ef_e4060805,
-        64'h05132005_85931141,
-        64'h02faf537_65f1bbb5,
-        64'hf00ff0ef_09450513,
-        64'h00001517_b3f5dee5,
-        64'h05130000_1517f98f,
-        64'hf0ef8526_f1cff0ef,
-        64'hef050513_00001517,
-        64'hf28ff0ef_ee450513,
-        64'h00001517_c50d84aa,
-        64'hc33ff0ef_8552865a,
-        64'h020aa583_f44ff0ef,
-        64'h0c050513_00001517,
-        64'hf57993e3_08048493,
-        64'hf58ff0ef_2985e3e5,
-        64'h05130000_1517ff2c,
-        64'h1be382ff_f0ef0905,
-        64'h00094503_f74ff0ef,
-        64'h0e050513_00001517,
-        64'h803ff0ef_7088f86f,
-        64'hf0ef0e25_05130000,
-        64'h1517815f_f0ef6c88,
-        64'hf98ff0ef_0e450513,
-        64'h00001517_827ff0ef,
-        64'h07048c13_02848913,
-        64'h6888fb2f_f0ef0ee5,
-        64'h05130000_1517ff2c,
-        64'h1be3887f_f0ef0905,
-        64'h00094503_01090c13,
-        64'hfd0ff0ef_0ec50513,
-        64'h00001517_fe991be3,
-        64'h8a5ff0ef_09050009,
-        64'h4503ff04_8913feef,
-        64'hf0ef0ea5_05130000,
-        64'h15178bff_f0ef0ff9,
-        64'hf513803f_f0ef0e65,
-        64'h05130000_1517b5fd,
-        64'hef050513_00001517,
-        64'h89bff0ef_854e81ff,
-        64'hf0efff25_05130000,
-        64'h151782bf_f0effe65,
-        64'h05130000_1517c50d,
-        64'h080489aa_8a8ad39f,
+        64'h00000000_0000a001,
+        64'h840212a5_85930000,
+        64'h059701f4_14130010,
+        64'h041be911_cffff0ef,
+        64'h057e65a1_4505eb6f,
+        64'hf0efdea5_05130000,
+        64'h1517e7ef_f0efe406,
+        64'h08050513_20058593,
+        64'h114102fa_f53765f1,
+        64'hbbb1edaf_f0ef0fe5,
+        64'h05130000_1517bbc1,
+        64'he5850513_00001517,
+        64'hf72ff0ef_8526ef6f,
+        64'hf0eff5a5_05130000,
+        64'h1517f02f_f0eff4e5,
+        64'h05130000_1517bbe5,
+        64'he8050513_00001517,
+        64'hf9aff0ef_8526f1ef,
+        64'hf0eff825_05130000,
+        64'h1517f2af_f0eff765,
+        64'h05130000_1517c929,
+        64'h84aac37f_f0ef855a,
+        64'h8656020b_a583f46f,
+        64'hf0ef1525_05130000,
+        64'h1517f384_9ae30809,
+        64'h89930809_09132485,
+        64'h00892a83_e099f66f,
+        64'hf0efeda5_05130000,
+        64'h1517ff3a_1be383bf,
+        64'hf0ef0a05_000a4503,
+        64'hf80ff0ef_17c50513,
+        64'h00001517_80fff0ef,
+        64'h01093503_f94ff0ef,
+        64'h18050513_00001517,
+        64'h823ff0ef_00893503,
+        64'hfa8ff0ef_18450513,
+        64'h00001517_837ff0ef,
+        64'hfb898a13_00093503,
+        64'hfc0ff0ef_18c50513,
+        64'h00001517_ff2a1be3,
+        64'h895ff0ef_0a05000a,
+        64'h4503f909_8a13fdef,
+        64'hf0ef18a5_05130000,
+        64'h1517ff9a_19e38b3f,
+        64'hf0ef0a05_0007c503,
+        64'h014d07b3_4a01ffef,
+        64'hf0eff809_8d1318e5,
+        64'h05130000_15178d3f,
+        64'hf0ef0ff4_f513817f,
+        64'hf0ef18a5_05130000,
+        64'h15174c11_4cc11005,
+        64'h1e630801_09930201,
+        64'h091384aa_8b8ad33f,
         64'hf0ef850a_46057101,
-        64'h04892583_84dff0ef,
-        64'hf3050513_00001517,
-        64'h89bff0ef_455685ff,
-        64'hf0ef1225_05130000,
-        64'h15178adf_f0ef4546,
-        64'h871ff0ef_11450513,
+        64'h04892583_845ff0ef,
+        64'hfb850513_00001517,
+        64'h893ff0ef_4556857f,
+        64'hf0ef1aa5_05130000,
+        64'h15178a5f_f0ef4546,
+        64'h869ff0ef_19c50513,
+        64'h00001517_8f7ff0ef,
+        64'h652687bf_f0ef18e5,
+        64'h05130000_1517909f,
+        64'hf0ef7502_88dff0ef,
+        64'h19050513_00001517,
+        64'h91bff0ef_656289ff,
+        64'hf0ef18a5_05130000,
+        64'h15178edf_f0ef4552,
+        64'h8b1ff0ef_18c50513,
         64'h00001517_8ffff0ef,
-        64'h6526883f_f0ef1065,
+        64'h45428c3f_f0ef18e5,
         64'h05130000_1517911f,
-        64'hf0ef7502_895ff0ef,
-        64'h10850513_00001517,
-        64'h923ff0ef_65628a7f,
-        64'hf0ef1025_05130000,
-        64'h15178f5f_f0ef4552,
-        64'h8b9ff0ef_10450513,
-        64'h00001517_907ff0ef,
-        64'h45428cbf_f0ef1065,
-        64'h05130000_1517919f,
-        64'hf0ef4532_8ddff0ef,
-        64'h10850513_00001517,
-        64'h92bff0ef_45228eff,
-        64'hf0ef10a5_05130000,
-        64'h151797df_f0ef4b91,
-        64'h6502903f_f0ef10e5,
-        64'h05130000_151790ff,
-        64'hf0ef0fa5_05130000,
-        64'h1517bf61_54f991ff,
-        64'hf0ef0025_05130000,
-        64'h15179adf_f0ef8526,
-        64'h931ff0ef_10450513,
-        64'h00001517_93dff0ef,
-        64'h0f850513_00001517,
-        64'hc90584aa_890ae49f,
-        64'hf0ef850a_45854605,
-        64'h710195bf_f0ef0fe5,
-        64'h05130000_15178082,
-        64'h61616c02_6ba26b42,
-        64'h6ae27a02_79a27942,
-        64'h74e26406_852660a6,
-        64'hfb040113_54fd987f,
-        64'hf0ef1025_05130000,
-        64'h1517c51d_df3ff0ef,
-        64'h8b2e8a2a_0880e062,
-        64'he45eec56_f44ef84a,
-        64'hfc26e486_e85af052,
-        64'he0a2715d_b7655479,
-        64'h80826169_6baa6b4a,
-        64'h6aea7a0a_79aa794a,
-        64'h74ea640e_60ae8522,
-        64'h547d9d3f_f0ef1265,
-        64'h05130000_1517c59f,
-        64'hf0efc5df_f0efc61f,
-        64'hf0efc65f_f0efc69f,
-        64'hf0efc6df_f0efc71f,
-        64'hf0efc75f_f0efa805,
-        64'hc7bff0ef_c87ff0ef,
-        64'h45314581_46054401,
-        64'hf93046e3_19fda17f,
+        64'hf0ef4532_8d5ff0ef,
+        64'h19050513_00001517,
+        64'h923ff0ef_45228e7f,
+        64'hf0ef1925_05130000,
+        64'h1517975f_f0ef6502,
+        64'h8f9ff0ef_19450513,
+        64'h00001517_905ff0ef,
+        64'h18050513_00001517,
+        64'hbf5154f9_915ff0ef,
+        64'h08850513_00001517,
+        64'h9a3ff0ef_8526927f,
         64'hf0ef18a5_05130000,
-        64'h1517e799_0359e7b3,
-        64'h07241a63_29019041,
-        64'h14428c49_cafff0ef,
-        64'h90410305_141384a2,
-        64'h0085151b_cbfff0ef,
-        64'hfd641ae3_04040413,
-        64'hff7497e3_892af13f,
-        64'hf0ef0485_854a0007,
-        64'hc5830094_07b30400,
-        64'h0b934481_c67ff0ef,
+        64'h1517933f_f0ef17e5,
+        64'h05130000_1517c905,
+        64'h84aa890a_e41ff0ef,
+        64'h850a4585_46057101,
+        64'h951ff0ef_18450513,
+        64'h00001517_80826125,
+        64'h6d026ca2_6c426be2,
+        64'h7b027aa2_7a4279e2,
+        64'h690664a6_64468526,
+        64'h60e6fa04_011354fd,
+        64'h981ff0ef_18c50513,
+        64'h00001517_c90ddeff,
+        64'hf0ef8aae_8b2a1080,
+        64'he06ae466_e862ec5e,
+        64'hf852fc4e_e0cae4a6,
+        64'hec86f05a_f456e8a2,
+        64'h711db765_54798082,
+        64'h61696baa_6b4a6aea,
+        64'h7a0a79aa_794a74ea,
+        64'h640e60ae_8522547d,
+        64'h9d1ff0ef_1b450513,
+        64'h00001517_c5dff0ef,
+        64'hc61ff0ef_c65ff0ef,
+        64'hc69ff0ef_c6dff0ef,
+        64'hc71ff0ef_c75ff0ef,
+        64'hc79ff0ef_a805c7ff,
+        64'hf0efc8bf_f0ef4531,
+        64'h45814605_4401f930,
+        64'h46e32004_849319fd,
+        64'ha19ff0ef_21c50513,
+        64'h00001517_e7990369,
+        64'he7b30689_1c639041,
+        64'h29011442_8c49cb7f,
+        64'hf0ef9041_03051413,
+        64'h0085151b_cc5ff0ef,
+        64'hfc941ae3_04040413,
+        64'hff7a17e3_892af15f,
+        64'hf0ef0a05_854a0007,
+        64'hc5830144_07b30400,
+        64'h0b934a01_c69ff0ef,
         64'h850a0400_05938622,
-        64'h49018426_20048b13,
-        64'hff451ee3_cffff0ef,
-        64'h3e800a93_0fe00a13,
-        64'he951d15f_f0ef4549,
-        64'h85a20ff6_76130016,
-        64'h66130015_161bf49f,
-        64'hf0ef0ff4_7593f51f,
-        64'hf0ef0ff5_f5930084,
-        64'h559bf5df_f0ef0ff5,
-        64'hf5930104_559bf69f,
-        64'hf0ef4501_0ff5f593,
-        64'h0184559b_fee79be3,
-        64'h078500c6_802300f1,
-        64'h06b30800_0713567d,
-        64'h47810209_d993842e,
-        64'h84aae55e_e95aed56,
-        64'hf152f94a_e586fd26,
-        64'he1a20206_1993f54e,
-        64'h71558082_91411542,
-        64'h8d3d8ff9_0057979b,
-        64'h17016709_0107d79b,
-        64'h0105179b_4105551b,
-        64'h0105151b_8d2d00c5,
-        64'h95138da9_893d0045,
-        64'hd51b8da9_91411542,
-        64'h8d5d0522_0085579b,
-        64'h808207f5_75138d2d,
-        64'h00451593_8d2d8d3d,
-        64'h0045d51b_0075d79b,
-        64'h8de98082_0141853e,
-        64'h640260a2_4781c111,
-        64'h57f5f89f_f0efc511,
-        64'h57f9efbf_f0efc911,
-        64'h57fdeb7f_f0effc6d,
-        64'he03ff0ef_347d4429,
-        64'hb91ff0ef_2cc50513,
-        64'h00001517_c89ff0ef,
-        64'he022e406_11418082,
-        64'h61050015_351364a2,
-        64'h644260e2_0004051b,
-        64'hfc940ce3_e37ff0ef,
-        64'heb3ff0ef_2f450513,
-        64'h00001517_85aa842a,
-        64'he53ff0ef_02900513,
-        64'h400005b7_07700613,
-        64'hfbdff0ef_4485e822,
-        64'hec06e426_11018082,
-        64'h01410015_3513157d,
-        64'h640260a2_0004051b,
-        64'hef3ff0ef_32e50513,
-        64'h85a20000_1517e89f,
-        64'hf0ef842a_e97ff0ef,
-        64'he022e406_03700513,
-        64'h45810650_06131141,
-        64'h80826105_690264a2,
-        64'h644260e2_00153513,
-        64'hf5650513_0004051b,
-        64'h01249863_88bd00f9,
-        64'h1b634501_4785ec9f,
-        64'hf0efecdf_f0ef842a,
-        64'hed3ff0ef_84aaed9f,
-        64'hf0efeddf_f0efee1f,
-        64'hf0ef892a_eefff0ef,
-        64'he04ae426_e822ec06,
-        64'h45211aa0_05930870,
-        64'h06131101_bfcd4501,
-        64'h80826105_690264a2,
-        64'h644260e2_4505f89f,
-        64'hf0ef4585_3bc50513,
-        64'h00001517_fe9915e3,
-        64'hc00df25f_f0ef892a,
-        64'h347df35f_f0ef4501,
-        64'h45810950_06134485,
-        64'h71040413_e04aec06,
-        64'he4266409_e8221101,
-        64'hcd1ff06f_61053b65,
-        64'h05130000_151760e2,
-        64'h6442da7f_f0ef852e,
-        64'h65a2cebf_f0ef3fe5,
-        64'h05130000_1517cf7f,
-        64'hf0ef8522_cfdff0ef,
-        64'he42eec06_40450513,
-        64'h00001517_842ae822,
-        64'h11018082_614564e2,
-        64'h740270a2_f47d147d,
-        64'h0007d463_4187d79b,
-        64'h0185179b_fa7ff0ef,
-        64'heb5ff0ef_85320640,
-        64'h04136622_ec1ff0ef,
-        64'h0ff47513_ec9ff0ef,
-        64'h0ff57513_0084551b,
-        64'hed5ff0ef_0ff57513,
-        64'h0104551b_ee1ff0ef,
-        64'h0ff57513_0184551b,
-        64'heedff0ef_0404e513,
-        64'hfebff0ef_84aa842e,
-        64'hec26f022_e432f406,
-        64'h7179f07f_f06f0ff0,
-        64'h05138082_557db7e9,
-        64'h00d70023_078500f6,
-        64'h073306c8_2683ff79,
-        64'h8b055178_bf4dd6b8,
-        64'h07850007_c7038082,
-        64'h4501d3b8_4719dbb8,
-        64'h577d2000_07b700b6,
-        64'hef630007_869b2000,
-        64'h08372000_0537fff5,
-        64'h8b85537c_20000737,
-        64'hd3b82000_07b71060,
-        64'h0713fff5_37fd0001,
-        64'h03200793_04b76163,
-        64'h40a7873b_87aa2000,
-        64'h06b7dbb8_57792000,
-        64'h07b706b7_ec631000,
-        64'h07938082_610564a2,
-        64'hd3b84719_dbb86442,
-        64'h60e20ff4_7513577d,
-        64'h200007b7_e25ff0ef,
-        64'h50850513_00001517,
-        64'heb3ff0ef_91011502,
-        64'h4088e3bf_f0ef5265,
-        64'h05130000_1517e395,
-        64'h8b852401_53fc57e0,
-        64'hff658b05_06478493,
-        64'h53f8d3b8_10600713,
-        64'h200007b7_fff537fd,
-        64'h00010640_0793d7a8,
-        64'hdbb85779_e426e822,
-        64'hec062000_07b71101,
-        64'he81ff06f_61055565,
-        64'h05130000_151764a2,
-        64'h60e26442_d03c4799,
-        64'he99ff0ef_57c50513,
-        64'h00001517_f27ff0ef,
-        64'h91010204_95132481,
-        64'heb1ff0ef_57450513,
-        64'h00001517_5064d03c,
-        64'h16600793_ec5ff0ef,
-        64'h5a850513_00001517,
-        64'hf53ff0ef_91010204,
-        64'h95132481_eddff0ef,
-        64'h5a050513_00001517,
-        64'h5064d03c_10400793,
-        64'h20000437_fff537fd,
-        64'h000147a9_c3b84729,
-        64'h200007b7_f05ff0ef,
-        64'he426e822_ec065c05,
-        64'h05131101_00001517,
-        64'h80824108_8082c10c,
+        64'h4901ff55_1ee3cfff,
+        64'hf0efe004_84133e80,
+        64'h0b130fe0_0a93e951,
+        64'h20048493_d1dff0ef,
+        64'h454985a2_0ff67613,
+        64'h00166613_0015161b,
+        64'hf4dff0ef_0ff47593,
+        64'hf55ff0ef_0ff5f593,
+        64'h0084559b_f61ff0ef,
+        64'h0ff5f593_0104559b,
+        64'hf6dff0ef_45010184,
+        64'h559bfee7_9be30785,
+        64'h00c68023_00f106b3,
+        64'h08000713_567d4781,
+        64'h0209d993_842e84aa,
+        64'he55ee95a_ed56f152,
+        64'hf94ae586_fd26e1a2,
+        64'h02061993_f54e7155,
+        64'h80829141_15428d3d,
+        64'h8ff90057_979b1701,
+        64'h67090107_d79b0105,
+        64'h179b4105_551b0105,
+        64'h151b8d2d_00c59513,
+        64'h8da9893d_0045d51b,
+        64'h8da99141_15428d5d,
+        64'h05220085_579b8082,
+        64'h07f57513_8d2d0045,
+        64'h15938d2d_8d3d0045,
+        64'hd51b0075_d79b8de9,
+        64'h80820141_853e6402,
+        64'h60a257f5_e1114781,
+        64'hf89ff0ef_c51157f9,
+        64'hefbff0ef_c91157fd,
+        64'heb7ff0ef_fc6de07f,
+        64'hf0ef347d_4429b8ff,
+        64'hf0ef35a5_05130000,
+        64'h1517c89f_f0efe022,
+        64'he4061141_80826105,
+        64'h00153513_64a26442,
+        64'h60e20004_051bfc94,
+        64'h0ce3e3bf_f0efeb3f,
+        64'hf0ef3825_05130000,
+        64'h151785aa_842ae57f,
+        64'hf0ef0290_05134000,
+        64'h05b70770_0613fbdf,
+        64'hf0ef4485_e822ec06,
+        64'he4261101_80820141,
+        64'h00153513_157d6402,
+        64'h60a20004_051bef3f,
+        64'hf0ef3bc5_051385a2,
+        64'h00001517_e8dff0ef,
+        64'h842ae9bf_f0efe022,
+        64'he4060370_05134581,
+        64'h06500613_11418082,
+        64'h61056902_64a26442,
+        64'h60e20015_3513f565,
+        64'h05130004_051b0124,
+        64'h986388bd_00f91b63,
+        64'h45014785_ecdff0ef,
+        64'hed1ff0ef_842aed7f,
+        64'hf0ef84aa_eddff0ef,
+        64'hee1ff0ef_ee5ff0ef,
+        64'h892aef3f_f0efe04a,
+        64'he426e822_ec064521,
+        64'h1aa00593_08700613,
+        64'h1101bfcd_45018082,
+        64'h61056902_64a26442,
+        64'h60e24505_f89ff0ef,
+        64'h458544a5_05130000,
+        64'h1517fe99_15e3c00d,
+        64'hf29ff0ef_892a347d,
+        64'hf39ff0ef_45014581,
+        64'h09500613_44857104,
+        64'h0413e04a_ec06e426,
+        64'h6409e822_1101ccff,
+        64'hf06f6105_44450513,
+        64'h00001517_60e26442,
+        64'hda5ff0ef_852e65a2,
+        64'hce9ff0ef_48c50513,
+        64'h00001517_cf5ff0ef,
+        64'h8522cfbf_f0efe42e,
+        64'hec064925_05130000,
+        64'h1517842a_e8221101,
+        64'h80826145_64e27402,
+        64'h70a2f47d_147d0007,
+        64'hd4634187_d79b0185,
+        64'h179bfabf_f0efeb5f,
+        64'hf0ef8532_06400413,
+        64'h6622ec1f_f0ef0ff4,
+        64'h7513ec9f_f0ef0ff5,
+        64'h75130084_551bed5f,
+        64'hf0ef0ff5_75130104,
+        64'h551bee1f_f0ef0184,
+        64'h551bee9f_f0ef0404,
+        64'he513febf_f0ef84aa,
+        64'h842eec26_f022e432,
+        64'hf4067179_f03ff06f,
+        64'h0ff00513_8082557d,
+        64'hb7d900d7_00230785,
+        64'h00f60733_06c82683,
+        64'hff698b05_5178b77d,
+        64'hd6b80785_00074703,
+        64'h00f50733_80824501,
+        64'hd3b84719_dbb8577d,
+        64'h200007b7_02b6e163,
+        64'h0007869b_20000837,
+        64'h20000537_fff58b85,
+        64'h537c2000_0737d3b8,
+        64'h200007b7_10600713,
+        64'hfff537fd_00010320,
+        64'h079304b7_61630007,
+        64'h871b4781_200006b7,
+        64'hdbb85779_200007b7,
+        64'h06b7ee63_10000793,
+        64'h80826105_64a2d3b8,
+        64'h4719dbb8_644260e2,
+        64'h0ff47513_577d2000,
+        64'h07b7e23f_f0ef5965,
+        64'h05130000_1517eb1f,
+        64'hf0ef9101_15024088,
+        64'he39ff0ef_5b450513,
+        64'h00001517_e3958b85,
+        64'h240153fc_57e0ff65,
+        64'h8b050647_849353f8,
+        64'hd3b81060_07132000,
+        64'h07b7fff5_37fd0001,
+        64'h06400793_d7a8dbb8,
+        64'h5779e426_e822ec06,
+        64'h200007b7_1101e7ff,
+        64'hf06f6105_5e450513,
+        64'h00001517_64a260e2,
+        64'h6442d03c_4799e97f,
+        64'hf0ef60a5_05130000,
+        64'h1517f25f_f0ef9101,
+        64'h02049513_2481eaff,
+        64'hf0ef6025_05130000,
+        64'h15175064_d03c1660,
+        64'h0793ec3f_f0ef6365,
+        64'h05130000_1517f51f,
+        64'hf0ef9101_02049513,
+        64'h2481edbf_f0ef62e5,
+        64'h05130000_15175064,
+        64'hd03c1040_07932000,
+        64'h0437fff5_37fd0001,
+        64'h47a9c3b8_47292000,
+        64'h07b7f03f_f0efe426,
+        64'he822ec06_64e50513,
+        64'h11010000_15178082,
+        64'h25014108_8082c10c,
         64'h80826105_60e2ecff,
         64'hf0ef0091_4503ed7f,
         64'hf0ef0081_4503f55f,
@@ -885,7 +903,7 @@ module bootrom (
         64'h4009091b_02000937,
         64'h00448493_0124a023,
         64'h00100913_020004b7,
-        64'h25f000ef_01a11113,
+        64'h285000ef_01a11113,
         64'h0210011b_03249663,
         64'hf1402973_00000493,
         64'h30491073_00800913
diff --git a/fpga/src/bootrom/src/gpt.c b/fpga/src/bootrom/src/gpt.c
index 15c9751..18db71e 100644
--- a/fpga/src/bootrom/src/gpt.c
+++ b/fpga/src/bootrom/src/gpt.c
@@ -88,6 +88,10 @@ int gpt_find_boot_partition(uint8_t* dest, uint32_t size)
         for (int j = 0; j < 72; j++)
             print_uart_byte(part_entry->name[j]);
         print_uart("\r\n");
+
+        if(i == 0){
+            size = part_entry->last_lba; //maybe +1 because range is excl?
+        }
     }
 
     partition_entries_t *boot = (partition_entries_t *)(lba2_buf);
@@ -105,4 +109,4 @@ int gpt_find_boot_partition(uint8_t* dest, uint32_t size)
 
     print_uart(" done!\r\n");
     return 0;
-}
\ No newline at end of file
+}
diff --git a/fpga/src/genesysii.svh b/fpga/src/genesysii.svh
index cd350a9..53da566 100644
--- a/fpga/src/genesysii.svh
+++ b/fpga/src/genesysii.svh
@@ -25,3 +25,26 @@
 
 // write-through cache
 `define WT_DCACHE
+
+
+// MEMSEC configuration
+//`define MEMSEC
+//`define XLNX_CB
+`define MEMSEC_C_S_AXI_TARGET_SLAVE_BASE_ADDR (64'h0000000080000000)
+
+`define CRYPTO_CONFIG               (32'h00000002)
+`define DATA_MEMORY_SIZE            (32'h10000000)
+`define TREE_ARITY                  (32'h00000004)
+`define TREE_ROOTS                  (32'h00000004)
+`define TREE_NODE_CACHE_SIZE        (32'h00000400)
+`define DATA_BLOCK_SIZE             (32'h00000040)
+`define BLOCKS_PER_SECTOR           (32'h00000002)
+`define DATA_TAG_SIZE               (32'h00000010)
+
+localparam NumWords = (24 * 1024 * 1024) / 8;
+localparam NBSlave = 2; // debug, ariane
+localparam AxiAddrWidth = 64;
+localparam AxiDataWidth = 64;
+localparam AxiIdWidthMaster = 4;
+localparam AxiIdWidthSlaves = AxiIdWidthMaster + $clog2(NBSlave); // 5
+localparam AxiUserWidth = 128;
\ No newline at end of file
diff --git a/fpga/src/kc705.svh b/fpga/src/kc705.svh
index a66e763..1052bfb 100644
--- a/fpga/src/kc705.svh
+++ b/fpga/src/kc705.svh
@@ -25,3 +25,28 @@
 
 // write-through cache
 `define WT_DCACHE
+
+
+// activates the RVAS mechanism
+`define RVAS
+// activates the hardware memory encryption engine (e.g. MEMSEC)
+//`define MEE
+//`define XLNX_CB
+`define MEMSEC_C_S_AXI_TARGET_SLAVE_BASE_ADDR (64'h0000000080000000)
+
+`define CRYPTO_CONFIG               (32'h00000002)
+`define DATA_MEMORY_SIZE            (32'h10000000)
+`define TREE_ARITY                  (32'h00000004)
+`define TREE_ROOTS                  (32'h00000004)
+`define TREE_NODE_CACHE_SIZE        (32'h00000400)
+`define DATA_BLOCK_SIZE             (32'h00000040)
+`define BLOCKS_PER_SECTOR           (32'h00000002)
+`define DATA_TAG_SIZE               (32'h00000010)
+
+localparam NumWords = (24 * 1024 * 1024) / 8;
+localparam NBSlave = 2; // debug, ariane
+localparam AxiAddrWidth = 64;
+localparam AxiDataWidth = 64;
+localparam AxiIdWidthMaster = 4;
+localparam AxiIdWidthSlaves = AxiIdWidthMaster + $clog2(NBSlave); // 5
+localparam AxiUserWidth = 128;
diff --git a/fpga/src/memsec/.gitignore b/fpga/src/memsec/.gitignore
new file mode 100644
index 0000000..4b36202
--- /dev/null
+++ b/fpga/src/memsec/.gitignore
@@ -0,0 +1,6 @@
+# files from packaging
+component.xml
+xgui
+_*/
+.cache/
+.pytest_cache/
diff --git a/fpga/src/memsec/LICENSE b/fpga/src/memsec/LICENSE
new file mode 100644
index 0000000..94a9ed0
--- /dev/null
+++ b/fpga/src/memsec/LICENSE
@@ -0,0 +1,674 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 3, 29 June 2007
+
+ Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The GNU General Public License is a free, copyleft license for
+software and other kinds of works.
+
+  The licenses for most software and other practical works are designed
+to take away your freedom to share and change the works.  By contrast,
+the GNU General Public License is intended to guarantee your freedom to
+share and change all versions of a program--to make sure it remains free
+software for all its users.  We, the Free Software Foundation, use the
+GNU General Public License for most of our software; it applies also to
+any other work released this way by its authors.  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+them if you wish), that you receive source code or can get it if you
+want it, that you can change the software or use pieces of it in new
+free programs, and that you know you can do these things.
+
+  To protect your rights, we need to prevent others from denying you
+these rights or asking you to surrender the rights.  Therefore, you have
+certain responsibilities if you distribute copies of the software, or if
+you modify it: responsibilities to respect the freedom of others.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must pass on to the recipients the same
+freedoms that you received.  You must make sure that they, too, receive
+or can get the source code.  And you must show them these terms so they
+know their rights.
+
+  Developers that use the GNU GPL protect your rights with two steps:
+(1) assert copyright on the software, and (2) offer you this License
+giving you legal permission to copy, distribute and/or modify it.
+
+  For the developers' and authors' protection, the GPL clearly explains
+that there is no warranty for this free software.  For both users' and
+authors' sake, the GPL requires that modified versions be marked as
+changed, so that their problems will not be attributed erroneously to
+authors of previous versions.
+
+  Some devices are designed to deny users access to install or run
+modified versions of the software inside them, although the manufacturer
+can do so.  This is fundamentally incompatible with the aim of
+protecting users' freedom to change the software.  The systematic
+pattern of such abuse occurs in the area of products for individuals to
+use, which is precisely where it is most unacceptable.  Therefore, we
+have designed this version of the GPL to prohibit the practice for those
+products.  If such problems arise substantially in other domains, we
+stand ready to extend this provision to those domains in future versions
+of the GPL, as needed to protect the freedom of users.
+
+  Finally, every program is threatened constantly by software patents.
+States should not allow patents to restrict development and use of
+software on general-purpose computers, but in those that do, we wish to
+avoid the special danger that patents applied to a free program could
+make it effectively proprietary.  To prevent this, the GPL assures that
+patents cannot be used to render the program non-free.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                       TERMS AND CONDITIONS
+
+  0. Definitions.
+
+  "This License" refers to version 3 of the GNU General Public License.
+
+  "Copyright" also means copyright-like laws that apply to other kinds of
+works, such as semiconductor masks.
+
+  "The Program" refers to any copyrightable work licensed under this
+License.  Each licensee is addressed as "you".  "Licensees" and
+"recipients" may be individuals or organizations.
+
+  To "modify" a work means to copy from or adapt all or part of the work
+in a fashion requiring copyright permission, other than the making of an
+exact copy.  The resulting work is called a "modified version" of the
+earlier work or a work "based on" the earlier work.
+
+  A "covered work" means either the unmodified Program or a work based
+on the Program.
+
+  To "propagate" a work means to do anything with it that, without
+permission, would make you directly or secondarily liable for
+infringement under applicable copyright law, except executing it on a
+computer or modifying a private copy.  Propagation includes copying,
+distribution (with or without modification), making available to the
+public, and in some countries other activities as well.
+
+  To "convey" a work means any kind of propagation that enables other
+parties to make or receive copies.  Mere interaction with a user through
+a computer network, with no transfer of a copy, is not conveying.
+
+  An interactive user interface displays "Appropriate Legal Notices"
+to the extent that it includes a convenient and prominently visible
+feature that (1) displays an appropriate copyright notice, and (2)
+tells the user that there is no warranty for the work (except to the
+extent that warranties are provided), that licensees may convey the
+work under this License, and how to view a copy of this License.  If
+the interface presents a list of user commands or options, such as a
+menu, a prominent item in the list meets this criterion.
+
+  1. Source Code.
+
+  The "source code" for a work means the preferred form of the work
+for making modifications to it.  "Object code" means any non-source
+form of a work.
+
+  A "Standard Interface" means an interface that either is an official
+standard defined by a recognized standards body, or, in the case of
+interfaces specified for a particular programming language, one that
+is widely used among developers working in that language.
+
+  The "System Libraries" of an executable work include anything, other
+than the work as a whole, that (a) is included in the normal form of
+packaging a Major Component, but which is not part of that Major
+Component, and (b) serves only to enable use of the work with that
+Major Component, or to implement a Standard Interface for which an
+implementation is available to the public in source code form.  A
+"Major Component", in this context, means a major essential component
+(kernel, window system, and so on) of the specific operating system
+(if any) on which the executable work runs, or a compiler used to
+produce the work, or an object code interpreter used to run it.
+
+  The "Corresponding Source" for a work in object code form means all
+the source code needed to generate, install, and (for an executable
+work) run the object code and to modify the work, including scripts to
+control those activities.  However, it does not include the work's
+System Libraries, or general-purpose tools or generally available free
+programs which are used unmodified in performing those activities but
+which are not part of the work.  For example, Corresponding Source
+includes interface definition files associated with source files for
+the work, and the source code for shared libraries and dynamically
+linked subprograms that the work is specifically designed to require,
+such as by intimate data communication or control flow between those
+subprograms and other parts of the work.
+
+  The Corresponding Source need not include anything that users
+can regenerate automatically from other parts of the Corresponding
+Source.
+
+  The Corresponding Source for a work in source code form is that
+same work.
+
+  2. Basic Permissions.
+
+  All rights granted under this License are granted for the term of
+copyright on the Program, and are irrevocable provided the stated
+conditions are met.  This License explicitly affirms your unlimited
+permission to run the unmodified Program.  The output from running a
+covered work is covered by this License only if the output, given its
+content, constitutes a covered work.  This License acknowledges your
+rights of fair use or other equivalent, as provided by copyright law.
+
+  You may make, run and propagate covered works that you do not
+convey, without conditions so long as your license otherwise remains
+in force.  You may convey covered works to others for the sole purpose
+of having them make modifications exclusively for you, or provide you
+with facilities for running those works, provided that you comply with
+the terms of this License in conveying all material for which you do
+not control copyright.  Those thus making or running the covered works
+for you must do so exclusively on your behalf, under your direction
+and control, on terms that prohibit them from making any copies of
+your copyrighted material outside their relationship with you.
+
+  Conveying under any other circumstances is permitted solely under
+the conditions stated below.  Sublicensing is not allowed; section 10
+makes it unnecessary.
+
+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
+
+  No covered work shall be deemed part of an effective technological
+measure under any applicable law fulfilling obligations under article
+11 of the WIPO copyright treaty adopted on 20 December 1996, or
+similar laws prohibiting or restricting circumvention of such
+measures.
+
+  When you convey a covered work, you waive any legal power to forbid
+circumvention of technological measures to the extent such circumvention
+is effected by exercising rights under this License with respect to
+the covered work, and you disclaim any intention to limit operation or
+modification of the work as a means of enforcing, against the work's
+users, your or third parties' legal rights to forbid circumvention of
+technological measures.
+
+  4. Conveying Verbatim Copies.
+
+  You may convey verbatim copies of the Program's source code as you
+receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice;
+keep intact all notices stating that this License and any
+non-permissive terms added in accord with section 7 apply to the code;
+keep intact all notices of the absence of any warranty; and give all
+recipients a copy of this License along with the Program.
+
+  You may charge any price or no price for each copy that you convey,
+and you may offer support or warranty protection for a fee.
+
+  5. Conveying Modified Source Versions.
+
+  You may convey a work based on the Program, or the modifications to
+produce it from the Program, in the form of source code under the
+terms of section 4, provided that you also meet all of these conditions:
+
+    a) The work must carry prominent notices stating that you modified
+    it, and giving a relevant date.
+
+    b) The work must carry prominent notices stating that it is
+    released under this License and any conditions added under section
+    7.  This requirement modifies the requirement in section 4 to
+    "keep intact all notices".
+
+    c) You must license the entire work, as a whole, under this
+    License to anyone who comes into possession of a copy.  This
+    License will therefore apply, along with any applicable section 7
+    additional terms, to the whole of the work, and all its parts,
+    regardless of how they are packaged.  This License gives no
+    permission to license the work in any other way, but it does not
+    invalidate such permission if you have separately received it.
+
+    d) If the work has interactive user interfaces, each must display
+    Appropriate Legal Notices; however, if the Program has interactive
+    interfaces that do not display Appropriate Legal Notices, your
+    work need not make them do so.
+
+  A compilation of a covered work with other separate and independent
+works, which are not by their nature extensions of the covered work,
+and which are not combined with it such as to form a larger program,
+in or on a volume of a storage or distribution medium, is called an
+"aggregate" if the compilation and its resulting copyright are not
+used to limit the access or legal rights of the compilation's users
+beyond what the individual works permit.  Inclusion of a covered work
+in an aggregate does not cause this License to apply to the other
+parts of the aggregate.
+
+  6. Conveying Non-Source Forms.
+
+  You may convey a covered work in object code form under the terms
+of sections 4 and 5, provided that you also convey the
+machine-readable Corresponding Source under the terms of this License,
+in one of these ways:
+
+    a) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by the
+    Corresponding Source fixed on a durable physical medium
+    customarily used for software interchange.
+
+    b) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by a
+    written offer, valid for at least three years and valid for as
+    long as you offer spare parts or customer support for that product
+    model, to give anyone who possesses the object code either (1) a
+    copy of the Corresponding Source for all the software in the
+    product that is covered by this License, on a durable physical
+    medium customarily used for software interchange, for a price no
+    more than your reasonable cost of physically performing this
+    conveying of source, or (2) access to copy the
+    Corresponding Source from a network server at no charge.
+
+    c) Convey individual copies of the object code with a copy of the
+    written offer to provide the Corresponding Source.  This
+    alternative is allowed only occasionally and noncommercially, and
+    only if you received the object code with such an offer, in accord
+    with subsection 6b.
+
+    d) Convey the object code by offering access from a designated
+    place (gratis or for a charge), and offer equivalent access to the
+    Corresponding Source in the same way through the same place at no
+    further charge.  You need not require recipients to copy the
+    Corresponding Source along with the object code.  If the place to
+    copy the object code is a network server, the Corresponding Source
+    may be on a different server (operated by you or a third party)
+    that supports equivalent copying facilities, provided you maintain
+    clear directions next to the object code saying where to find the
+    Corresponding Source.  Regardless of what server hosts the
+    Corresponding Source, you remain obligated to ensure that it is
+    available for as long as needed to satisfy these requirements.
+
+    e) Convey the object code using peer-to-peer transmission, provided
+    you inform other peers where the object code and Corresponding
+    Source of the work are being offered to the general public at no
+    charge under subsection 6d.
+
+  A separable portion of the object code, whose source code is excluded
+from the Corresponding Source as a System Library, need not be
+included in conveying the object code work.
+
+  A "User Product" is either (1) a "consumer product", which means any
+tangible personal property which is normally used for personal, family,
+or household purposes, or (2) anything designed or sold for incorporation
+into a dwelling.  In determining whether a product is a consumer product,
+doubtful cases shall be resolved in favor of coverage.  For a particular
+product received by a particular user, "normally used" refers to a
+typical or common use of that class of product, regardless of the status
+of the particular user or of the way in which the particular user
+actually uses, or expects or is expected to use, the product.  A product
+is a consumer product regardless of whether the product has substantial
+commercial, industrial or non-consumer uses, unless such uses represent
+the only significant mode of use of the product.
+
+  "Installation Information" for a User Product means any methods,
+procedures, authorization keys, or other information required to install
+and execute modified versions of a covered work in that User Product from
+a modified version of its Corresponding Source.  The information must
+suffice to ensure that the continued functioning of the modified object
+code is in no case prevented or interfered with solely because
+modification has been made.
+
+  If you convey an object code work under this section in, or with, or
+specifically for use in, a User Product, and the conveying occurs as
+part of a transaction in which the right of possession and use of the
+User Product is transferred to the recipient in perpetuity or for a
+fixed term (regardless of how the transaction is characterized), the
+Corresponding Source conveyed under this section must be accompanied
+by the Installation Information.  But this requirement does not apply
+if neither you nor any third party retains the ability to install
+modified object code on the User Product (for example, the work has
+been installed in ROM).
+
+  The requirement to provide Installation Information does not include a
+requirement to continue to provide support service, warranty, or updates
+for a work that has been modified or installed by the recipient, or for
+the User Product in which it has been modified or installed.  Access to a
+network may be denied when the modification itself materially and
+adversely affects the operation of the network or violates the rules and
+protocols for communication across the network.
+
+  Corresponding Source conveyed, and Installation Information provided,
+in accord with this section must be in a format that is publicly
+documented (and with an implementation available to the public in
+source code form), and must require no special password or key for
+unpacking, reading or copying.
+
+  7. Additional Terms.
+
+  "Additional permissions" are terms that supplement the terms of this
+License by making exceptions from one or more of its conditions.
+Additional permissions that are applicable to the entire Program shall
+be treated as though they were included in this License, to the extent
+that they are valid under applicable law.  If additional permissions
+apply only to part of the Program, that part may be used separately
+under those permissions, but the entire Program remains governed by
+this License without regard to the additional permissions.
+
+  When you convey a copy of a covered work, you may at your option
+remove any additional permissions from that copy, or from any part of
+it.  (Additional permissions may be written to require their own
+removal in certain cases when you modify the work.)  You may place
+additional permissions on material, added by you to a covered work,
+for which you have or can give appropriate copyright permission.
+
+  Notwithstanding any other provision of this License, for material you
+add to a covered work, you may (if authorized by the copyright holders of
+that material) supplement the terms of this License with terms:
+
+    a) Disclaiming warranty or limiting liability differently from the
+    terms of sections 15 and 16 of this License; or
+
+    b) Requiring preservation of specified reasonable legal notices or
+    author attributions in that material or in the Appropriate Legal
+    Notices displayed by works containing it; or
+
+    c) Prohibiting misrepresentation of the origin of that material, or
+    requiring that modified versions of such material be marked in
+    reasonable ways as different from the original version; or
+
+    d) Limiting the use for publicity purposes of names of licensors or
+    authors of the material; or
+
+    e) Declining to grant rights under trademark law for use of some
+    trade names, trademarks, or service marks; or
+
+    f) Requiring indemnification of licensors and authors of that
+    material by anyone who conveys the material (or modified versions of
+    it) with contractual assumptions of liability to the recipient, for
+    any liability that these contractual assumptions directly impose on
+    those licensors and authors.
+
+  All other non-permissive additional terms are considered "further
+restrictions" within the meaning of section 10.  If the Program as you
+received it, or any part of it, contains a notice stating that it is
+governed by this License along with a term that is a further
+restriction, you may remove that term.  If a license document contains
+a further restriction but permits relicensing or conveying under this
+License, you may add to a covered work material governed by the terms
+of that license document, provided that the further restriction does
+not survive such relicensing or conveying.
+
+  If you add terms to a covered work in accord with this section, you
+must place, in the relevant source files, a statement of the
+additional terms that apply to those files, or a notice indicating
+where to find the applicable terms.
+
+  Additional terms, permissive or non-permissive, may be stated in the
+form of a separately written license, or stated as exceptions;
+the above requirements apply either way.
+
+  8. Termination.
+
+  You may not propagate or modify a covered work except as expressly
+provided under this License.  Any attempt otherwise to propagate or
+modify it is void, and will automatically terminate your rights under
+this License (including any patent licenses granted under the third
+paragraph of section 11).
+
+  However, if you cease all violation of this License, then your
+license from a particular copyright holder is reinstated (a)
+provisionally, unless and until the copyright holder explicitly and
+finally terminates your license, and (b) permanently, if the copyright
+holder fails to notify you of the violation by some reasonable means
+prior to 60 days after the cessation.
+
+  Moreover, your license from a particular copyright holder is
+reinstated permanently if the copyright holder notifies you of the
+violation by some reasonable means, this is the first time you have
+received notice of violation of this License (for any work) from that
+copyright holder, and you cure the violation prior to 30 days after
+your receipt of the notice.
+
+  Termination of your rights under this section does not terminate the
+licenses of parties who have received copies or rights from you under
+this License.  If your rights have been terminated and not permanently
+reinstated, you do not qualify to receive new licenses for the same
+material under section 10.
+
+  9. Acceptance Not Required for Having Copies.
+
+  You are not required to accept this License in order to receive or
+run a copy of the Program.  Ancillary propagation of a covered work
+occurring solely as a consequence of using peer-to-peer transmission
+to receive a copy likewise does not require acceptance.  However,
+nothing other than this License grants you permission to propagate or
+modify any covered work.  These actions infringe copyright if you do
+not accept this License.  Therefore, by modifying or propagating a
+covered work, you indicate your acceptance of this License to do so.
+
+  10. Automatic Licensing of Downstream Recipients.
+
+  Each time you convey a covered work, the recipient automatically
+receives a license from the original licensors, to run, modify and
+propagate that work, subject to this License.  You are not responsible
+for enforcing compliance by third parties with this License.
+
+  An "entity transaction" is a transaction transferring control of an
+organization, or substantially all assets of one, or subdividing an
+organization, or merging organizations.  If propagation of a covered
+work results from an entity transaction, each party to that
+transaction who receives a copy of the work also receives whatever
+licenses to the work the party's predecessor in interest had or could
+give under the previous paragraph, plus a right to possession of the
+Corresponding Source of the work from the predecessor in interest, if
+the predecessor has it or can get it with reasonable efforts.
+
+  You may not impose any further restrictions on the exercise of the
+rights granted or affirmed under this License.  For example, you may
+not impose a license fee, royalty, or other charge for exercise of
+rights granted under this License, and you may not initiate litigation
+(including a cross-claim or counterclaim in a lawsuit) alleging that
+any patent claim is infringed by making, using, selling, offering for
+sale, or importing the Program or any portion of it.
+
+  11. Patents.
+
+  A "contributor" is a copyright holder who authorizes use under this
+License of the Program or a work on which the Program is based.  The
+work thus licensed is called the contributor's "contributor version".
+
+  A contributor's "essential patent claims" are all patent claims
+owned or controlled by the contributor, whether already acquired or
+hereafter acquired, that would be infringed by some manner, permitted
+by this License, of making, using, or selling its contributor version,
+but do not include claims that would be infringed only as a
+consequence of further modification of the contributor version.  For
+purposes of this definition, "control" includes the right to grant
+patent sublicenses in a manner consistent with the requirements of
+this License.
+
+  Each contributor grants you a non-exclusive, worldwide, royalty-free
+patent license under the contributor's essential patent claims, to
+make, use, sell, offer for sale, import and otherwise run, modify and
+propagate the contents of its contributor version.
+
+  In the following three paragraphs, a "patent license" is any express
+agreement or commitment, however denominated, not to enforce a patent
+(such as an express permission to practice a patent or covenant not to
+sue for patent infringement).  To "grant" such a patent license to a
+party means to make such an agreement or commitment not to enforce a
+patent against the party.
+
+  If you convey a covered work, knowingly relying on a patent license,
+and the Corresponding Source of the work is not available for anyone
+to copy, free of charge and under the terms of this License, through a
+publicly available network server or other readily accessible means,
+then you must either (1) cause the Corresponding Source to be so
+available, or (2) arrange to deprive yourself of the benefit of the
+patent license for this particular work, or (3) arrange, in a manner
+consistent with the requirements of this License, to extend the patent
+license to downstream recipients.  "Knowingly relying" means you have
+actual knowledge that, but for the patent license, your conveying the
+covered work in a country, or your recipient's use of the covered work
+in a country, would infringe one or more identifiable patents in that
+country that you have reason to believe are valid.
+
+  If, pursuant to or in connection with a single transaction or
+arrangement, you convey, or propagate by procuring conveyance of, a
+covered work, and grant a patent license to some of the parties
+receiving the covered work authorizing them to use, propagate, modify
+or convey a specific copy of the covered work, then the patent license
+you grant is automatically extended to all recipients of the covered
+work and works based on it.
+
+  A patent license is "discriminatory" if it does not include within
+the scope of its coverage, prohibits the exercise of, or is
+conditioned on the non-exercise of one or more of the rights that are
+specifically granted under this License.  You may not convey a covered
+work if you are a party to an arrangement with a third party that is
+in the business of distributing software, under which you make payment
+to the third party based on the extent of your activity of conveying
+the work, and under which the third party grants, to any of the
+parties who would receive the covered work from you, a discriminatory
+patent license (a) in connection with copies of the covered work
+conveyed by you (or copies made from those copies), or (b) primarily
+for and in connection with specific products or compilations that
+contain the covered work, unless you entered into that arrangement,
+or that patent license was granted, prior to 28 March 2007.
+
+  Nothing in this License shall be construed as excluding or limiting
+any implied license or other defenses to infringement that may
+otherwise be available to you under applicable patent law.
+
+  12. No Surrender of Others' Freedom.
+
+  If conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot convey a
+covered work so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you may
+not convey it at all.  For example, if you agree to terms that obligate you
+to collect a royalty for further conveying from those to whom you convey
+the Program, the only way you could satisfy both those terms and this
+License would be to refrain entirely from conveying the Program.
+
+  13. Use with the GNU Affero General Public License.
+
+  Notwithstanding any other provision of this License, you have
+permission to link or combine any covered work with a work licensed
+under version 3 of the GNU Affero General Public License into a single
+combined work, and to convey the resulting work.  The terms of this
+License will continue to apply to the part which is the covered work,
+but the special requirements of the GNU Affero General Public License,
+section 13, concerning interaction through a network will apply to the
+combination as such.
+
+  14. Revised Versions of this License.
+
+  The Free Software Foundation may publish revised and/or new versions of
+the GNU General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+  Each version is given a distinguishing version number.  If the
+Program specifies that a certain numbered version of the GNU General
+Public License "or any later version" applies to it, you have the
+option of following the terms and conditions either of that numbered
+version or of any later version published by the Free Software
+Foundation.  If the Program does not specify a version number of the
+GNU General Public License, you may choose any version ever published
+by the Free Software Foundation.
+
+  If the Program specifies that a proxy can decide which future
+versions of the GNU General Public License can be used, that proxy's
+public statement of acceptance of a version permanently authorizes you
+to choose that version for the Program.
+
+  Later license versions may give you additional or different
+permissions.  However, no additional obligations are imposed on any
+author or copyright holder as a result of your choosing to follow a
+later version.
+
+  15. Disclaimer of Warranty.
+
+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. Limitation of Liability.
+
+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGES.
+
+  17. Interpretation of Sections 15 and 16.
+
+  If the disclaimer of warranty and limitation of liability provided
+above cannot be given local legal effect according to their terms,
+reviewing courts shall apply local law that most closely approximates
+an absolute waiver of all civil liability in connection with the
+Program, unless a warranty or assumption of liability accompanies a
+copy of the Program in return for a fee.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+state the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+Also add information on how to contact you by electronic and paper mail.
+
+  If the program does terminal interaction, make it output a short
+notice like this when it starts in an interactive mode:
+
+    <program>  Copyright (C) <year>  <name of author>
+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, your program's commands
+might be different; for a GUI interface, you would use an "about box".
+
+  You should also get your employer (if you work as a programmer) or school,
+if any, to sign a "copyright disclaimer" for the program, if necessary.
+For more information on this, and how to apply and follow the GNU GPL, see
+<http://www.gnu.org/licenses/>.
+
+  The GNU General Public License does not permit incorporating your program
+into proprietary programs.  If your program is a subroutine library, you
+may consider it more useful to permit linking proprietary applications with
+the library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.  But first, please read
+<http://www.gnu.org/philosophy/why-not-lgpl.html>.
diff --git a/fpga/src/memsec/Makefile b/fpga/src/memsec/Makefile
new file mode 100644
index 0000000..2215e48
--- /dev/null
+++ b/fpga/src/memsec/Makefile
@@ -0,0 +1,164 @@
+#
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+# determine the source directory and the default script directory based on the Makefile
+override FLOW_SOURCE_SCRIPT := $(realpath $(firstword $(MAKEFILE_LIST)))
+override FLOW_SOURCE_DIR    := $(shell dirname $(FLOW_SOURCE_SCRIPT))
+FLOW_DIR                    ?= ${FLOW_SOURCE_DIR}/flow
+
+FLOW_MODULE ?= memsec
+
+# The used test benches write the result into a file inside the simulation
+# directory where 1 means success and 0 means failure.
+${FLOW_MODULE}FLOW_SIM_RESULT_FILE  ?= ${${FLOW_MODULE}FLOW_SIM_TOP}_log.txt
+${FLOW_MODULE}FLOW_SIM_RESULT_REGEX ?= ^1
+${FLOW_MODULE}FLOW_SIM_RESULT_RULE  ?= file-success
+${FLOW_MODULE}FLOW_BINARY_DIR       ?= ${FLOW_BINARY_ROOT_DIR}/work
+
+include $(FLOW_DIR)/binary_directory_defines.mk
+
+###############################################################################
+# testing package
+###############################################################################
+FLOW_MODULES                       += tb.pkg
+tb.pkgFLOW_HDL_FILES               ?= ${FLOW_SOURCE_DIR}/tb/tb_utils_pkg.vhd
+
+###############################################################################
+# crypto modules
+###############################################################################
+FLOW_MODULES                       += crypto.aes
+crypto.aesFLOW_HDL_FILES           ?= $(shell find ${FLOW_SOURCE_DIR}/hdl/crypto/aes -iname "*.vhd" | xargs) $(shell find ${FLOW_SOURCE_DIR}/hdl/crypto/aes -iname "*.vhdl" | xargs)
+crypto.aesFLOW_SIM_HDL_FILES       ?= ${FLOW_SOURCE_DIR}/tb/tb_aes.vhd
+crypto.aesFLOW_SIM_DEPENDENCIES    ?= tb.pkg
+crypto.aesFLOW_HDL_TOP             ?= aes128_hs
+crypto.aesFLOW_SIM_TOP             ?= tb_aes
+crypto.aesFLOW_GHDL_CFLAGS         ?= --ieee=synopsys
+
+FLOW_MODULES                       += crypto.ascon
+crypto.asconFLOW_HDL_FILES         ?= $(shell find ${FLOW_SOURCE_DIR}/hdl/crypto/ascon -iname "*.vhdl" | xargs)
+crypto.asconFLOW_SIM_HDL_FILES     ?= ${FLOW_SOURCE_DIR}/tb/tb_ascon.vhd
+crypto.asconFLOW_SIM_DEPENDENCIES  ?= tb.pkg
+crypto.asconFLOW_HDL_TOP           ?= ascon
+crypto.asconFLOW_SIM_TOP           ?= tb_ascon
+
+FLOW_MODULES                       += crypto.keccak
+crypto.keccakFLOW_HDL_FILES        ?= $(shell find ${FLOW_SOURCE_DIR}/hdl/crypto/keccak -iname "*.vhd" | xargs)
+crypto.keccakFLOW_HDL_TOP          ?= keccak
+
+FLOW_MODULES                       += crypto.prince
+crypto.princeFLOW_HDL_FILES        ?= ${FLOW_SOURCE_DIR}/hdl/crypto/prince.vhd
+crypto.princeFLOW_DEPENDENCIES     ?= framework.util
+crypto.princeFLOW_SIM_HDL_FILES    ?= ${FLOW_SOURCE_DIR}/tb/tb_prince.vhd
+crypto.princeFLOW_SIM_DEPENDENCIES ?= tb.pkg
+crypto.princeFLOW_HDL_TOP          ?= prince
+crypto.princeFLOW_SIM_TOP          ?= tb_prince
+
+FLOW_MODULES                       += crypto.qarma
+crypto.qarmaFLOW_HDL_FILES         ?= ${FLOW_SOURCE_DIR}/hdl/crypto/qarma.vhd
+crypto.qarmaFLOW_DEPENDENCIES      ?= framework.util
+crypto.qarmaFLOW_SIM_HDL_FILES     ?= ${FLOW_SOURCE_DIR}/tb/tb_qarma.vhd
+crypto.qarmaFLOW_SIM_DEPENDENCIES  ?= tb.pkg
+crypto.qarmaFLOW_HDL_TOP           ?= qarma
+crypto.qarmaFLOW_SIM_TOP           ?= tb_qarma
+
+FLOW_MODULES                       += crypto.xts
+crypto.xtsFLOW_HDL_FILES           ?= ${FLOW_SOURCE_DIR}/hdl/crypto/xts_tweak_generator.vhd ${FLOW_SOURCE_DIR}/hdl/crypto/xts_tweak_mul.vhd
+crypto.xtsFLOW_HDL_TOP             ?= qarma
+
+###############################################################################
+# framework modules
+###############################################################################
+FLOW_MODULES                       += framework.pkg
+framework.pkgFLOW_HDL_FILES        ?= $(shell find ${FLOW_SOURCE_DIR}/hdl -maxdepth 1 -iname "*.vhd" | xargs)
+
+FLOW_MODULES                       += framework.axi
+framework.axiFLOW_HDL_FILES        ?= $(shell find ${FLOW_SOURCE_DIR}/hdl/framework/axi -iname "*.vhd" | xargs)
+framework.axiFLOW_DEPENDENCIES     ?= framework.pkg framework.util
+
+FLOW_MODULES                       += framework.metadata
+framework.metadataFLOW_HDL_FILES   ?= $(shell find ${FLOW_SOURCE_DIR}/hdl/framework/metadata -iname "*.vhd" | xargs)
+framework.metadataFLOW_DEPENDENCIES?= framework.pkg framework.util
+
+FLOW_MODULES                       += framework.stream
+framework.streamFLOW_HDL_FILES     ?= $(shell find ${FLOW_SOURCE_DIR}/hdl/framework/stream -iname "*.vhd" | xargs)
+framework.streamFLOW_DEPENDENCIES  ?= framework.pkg framework.util crypto.aes crypto.ascon crypto.prince crypto.qarma crypto.xts
+
+FLOW_MODULES                       += framework.util
+framework.utilFLOW_HDL_FILES       ?= $(shell find ${FLOW_SOURCE_DIR}/hdl/framework/util -iname "*.vhd" | xargs)
+framework.utilFLOW_DEPENDENCIES    ?= framework.pkg crypto.keccak
+
+###############################################################################
+# top modules
+###############################################################################
+FLOW_MODULES                       += top.ascon
+top.asconFLOW_HDL_FILES            ?= ${FLOW_SOURCE_DIR}/hdl/top/memsec_ascon.vhd
+top.asconFLOW_DEPENDENCIES         ?= framework.axi framework.stream framework.util framework.metadata
+top.asconFLOW_HDL_TOP              ?= memsec_ascon
+
+FLOW_MODULES                       += top.block_enc
+top.block_encFLOW_HDL_FILES        ?= ${FLOW_SOURCE_DIR}/hdl/top/memsec_block_encryption.vhd
+top.block_encFLOW_DEPENDENCIES     ?= framework.axi framework.stream framework.util
+top.block_encFLOW_HDL_TOP          ?= memsec_block_encryption
+
+FLOW_MODULES                       += top.meas
+top.measFLOW_HDL_FILES             ?= ${FLOW_SOURCE_DIR}/hdl/top/memsec_meas.vhd
+top.measFLOW_DEPENDENCIES          ?= framework.axi framework.stream framework.util framework.metadata
+top.measFLOW_HDL_TOP               ?= memsec_meas
+
+FLOW_MODULES                       += top.tectree
+top.tectreeFLOW_HDL_FILES          ?= ${FLOW_SOURCE_DIR}/hdl/top/memsec_tectree_ascon.vhd
+top.tectreeFLOW_DEPENDENCIES       ?= framework.axi framework.stream framework.util framework.metadata
+top.tectreeFLOW_HDL_TOP            ?= memsec_tectree_ascon
+
+FLOW_MODULES                       += memsec
+memsecFLOW_HDL_FILES               ?= ${FLOW_SOURCE_DIR}/hdl/top/memsec.vhd
+memsecFLOW_DEPENDENCIES            ?= top.ascon top.block_enc top.meas top.tectree
+memsecFLOW_SIM_HDL_FILES           ?= ${FLOW_SOURCE_DIR}/tb/tb_memsec.vhd ${FLOW_SOURCE_DIR}/tb/tb_rw_blockram.vhd ${FLOW_SOURCE_DIR}/tb/tb_cva_ascon_tec.vhd
+memsecFLOW_SIM_DEPENDENCIES        ?= tb.pkg
+memsecFLOW_HDL_TOP                 ?= memsec
+memsecFLOW_SIM_TOP                 ?= tb_memsec
+
+# by default Prince in ECB mode is tested
+memsecGENERIC_CRYPTO_CONFIG        ?= 3
+memsecTEST_FILE_DIRECTORY          ?= prince/ecb
+memsecFLOW_SIM_FILES               ?= ${FLOW_SOURCE_DIR}/tb/testdata/${memsecTEST_FILE_DIRECTORY}/initial_memory.txt ${FLOW_SOURCE_DIR}/tb/testdata/${memsecTEST_FILE_DIRECTORY}/test_cases.txt
+memsecFLOW_SIM_TIME                ?= 1000us
+
+# enable synopsys extensions when ghdl is used (std_logic_textio is used in tb_memsec)
+memsecFLOW_GHDL_CFLAGS             ?= --ieee=synopsys
+
+###############################################################################
+# integration module which embeds the memsec IP core into a block design
+###############################################################################
+FLOW_MODULES                           += full_memenc
+#full_memencFLOW_VIVADO_IP_DEPENDENCIES ?= memsec
+full_memencFLOW_VIVADO_IP_REPO_PATHS   ?= ${FLOW_SOURCE_DIR}
+full_memencFLOW_VIVADO_BD_TCL_FILE     ?= ${FLOW_SOURCE_DIR}/examples/full_memenc_bd.tcl
+full_memencFLOW_VIVADO_BD_NAME         ?= bd
+
+full_memencFLOW_VIVADO_BD_GENERIC_PCW_FPGA0_PERIPHERAL_FREQMHZ_AT_processing_system7_0 ?= 50
+full_memencFLOW_VIVADO_BD_GENERIC_PCW_FCLK0_PERIPHERAL_CLKSRC_AT_processing_system7_0  ?= IO PLL
+
+default: help
+
+include $(FLOW_DIR)/global_defines.mk
+include $(FLOW_DIR)/ghdl.mk
+include $(FLOW_DIR)/vivado.mk
+include $(FLOW_DIR)/default.mk
diff --git a/fpga/src/memsec/README.md b/fpga/src/memsec/README.md
new file mode 100644
index 0000000..1bb9d8b
--- /dev/null
+++ b/fpga/src/memsec/README.md
@@ -0,0 +1,101 @@
+[![Build Status](https://travis-ci.org/IAIK/memsec.svg?branch=develop)](https://travis-ci.org/IAIK/memsec)
+
+# Transparent Memory Encryption and Authentication
+
+VHDL code of the [Transparent Memory Encryption and Authentication](https://eprint.iacr.org/2017/674) framework which has been published at [FPL 2017](https://www.fpl2017.org/). Additionally, the implementation of a novel side-channel secure memory encryption scheme called [MEAS](https://eprint.iacr.org/2017/663) is included.
+
+RAM encryption and authentication, as shown by the implementation of [Intel SGX](https://eprint.iacr.org/2016/204) and [AMD SME](http://developer.amd.com/wordpress/media/2013/12/AMD_Memory_Encryption_Whitepaper_v7-Public.pdf), is an important measure to implement a secure system. However, no open source implementations exist which can be used in free hardware designs or to evaluate new schemes.
+
+To address this problem, we present a modular open-source framework for building transparent RAM encryption and authentication solutions. Our framework comprises a comprehensive collection of modular building blocks which can be used  to built efficient hardware designs with different cryptographic primitives in arbitrary modes of operation. At the moment only AXI-4 is supported as bus interface. However, due to the separation between external bus interface and internal data stream, we expect that porting other (possibly less feature rich) interconnects is easily possibly.
+
+The top modules in the `hdl/top` directory contain example pipelines (e.g., `memsec_block_encryption` and `memsec_ascon`) which are built using our framework. The `memsec` top level entity, on the other hand, is simply used to multiplex between the different designs for simulation and bitfile generation.
+
+## Cryptographic Primitives and Modes
+
+Used primitives:
+* [AES-128](https://doi.org/10.6028/NIST.FIPS.197): Currently no implementation bundled!
+* [Ascon-128 v1.2](http://ascon.iaik.tugraz.at/specification.html): [Original implementation](https://github.com/IAIK/ascon_hardware) by Hannes Groß
+* [PRINCE](https://eprint.iacr.org/2012/529): Implementation by Erich Wenger
+* [QARMA-64 (sigma1)](https://eprint.iacr.org/2016/444): Implementation by Thomas Unterluggauer
+* [Keccak-f[400]](http://keccak.noekeon.org/): Implementation by Thomas Kastner, Christian Maierhofer, and Mario Werner
+
+Modes and tested primitives:
+* ECB/Standalone
+  * AES
+  * Ascon
+  * PRINCE
+* [CBC-ESSIV](http://clemens.endorphin.org/nmihde/nmihde-A4-os.pdf)
+  * AES
+  * PRINCE
+* [MEAS](https://eprint.iacr.org/2017/663) (with different re-keying approaches for the tree nodes)
+  * Ascon + PRINCE + Keccak PRNG
+  * Ascon + QARMA + Keccak PRNG
+* [TEC-Tree](https://www.iacr.org/archive/ches2007/47270289/47270289.pdf)
+  * Ascon (= AE cipher instead of AREA construction)
+* [XTS](https://doi.org/10.1109%2FIEEESTD.2008.4493450) (tweak is computed using decryption instead of encryption)
+  * AES
+  * PRINCE
+
+All these configurations have been tested using HDL simulation as well as in practice for encrypting Linux on a [ZedBoard](http://zedboard.org/product/zedboard) featuring a Xilinx Zynq-7020 SoC FPGA. As EDA tool, Vivado 2018.2 has been used.
+
+## The HDL Flow
+
+The framework comes with a Makefile-based HDL flow. This flow can be used to run simulations, and to build bitstream files from the command line. Conceptually, the flow acts as custom front-end for the EDA (e.g., Vivado) tools which perform the real work and is controlled by environment variables and via command line parameters. Like any other make invocation the basic syntax of calling the flow looks the following:
+
+`make <target> [Variables and Definitions]`
+
+Important Targets:
+* `clean`: Delete the binary directory of the module.
+* `distclean`: Delete the binary root directory.
+* `info`: Print information about discovered flow variables and the module which is built. (Lists even the source files when `VERBOSE=1` is specified.)
+* `hdlsb`: Simulate the module (batch mode).
+* `hdlsg`: Simulate the module (GUI).
+* `synthcb`: Synthesize the module (batch mode).
+* `implcb`: Implement the module (batch mode).
+
+### Flow Variables
+
+Variables and variable overrides are the most powerful and complex part of the flow which permit to customize how the framework is simulated or built. The default configuration for the build-able modules is rather simple and can be found in the `Makefile` and mostly touch the following variables:
+
+* `FLOW_MODULE=<modulename>`: (default: `memsec`) The flow supports to manage multiple different modules in one source tree. This variable selects which module is currently active.
+* `BINARY_ROOT_DIR=<path>`: (default: `_build` when make is called in-source or `.` when make is called out-of-source) All build artifacts are generated out-of-source in a build directory which can be overwritten using this variable.
+* `<modulename>FLOW_HDL_TOP=<entity>`: The top module of the design. Important when the module gets packaged as IP core for the use in a block design.
+* `<modulename>FLOW_SIM_TOP=<entity>`: The top module which gets simulated.
+* `<modulename>FLOW_HDL_FILES=<hdlfiles>`: The HDL files which make up the module. (typically not overwritten via the command line)
+* `<modulename>FLOW_SIM_HDL_FILES=<hdlfiles>`:The HDL files which make up the test bench of the module. (typically not overwritten via the command line)
+* `<modulename>FLOW_SIMULATION_TIME=<duration>`: (default: `500us`) The time duration which is run in a simulation.
+
+Besides these more or less static configuration options, also more dynamic options like generics can be specified as simple environment or command line variables. The syntax for overriding generics is as follows: `<modulename>GENERIC_<parameter>=<value>`
+
+Last but not least, also a few Vivado specific options exist. These options mainly deal with Vivado specifics like tcl files to generate block designs and IP cores which can be used for simulation. However, when a block design is used, also the generics for the instantiated IP cores have to be overwritten using the Vivado specific variables.
+
+* `<modulename>FLOW_VIVADO_SIM_IP_FILES=<xcifiles>`: The Vivado IP files (.xci) which are used in the test bench. (typically not overwritten via the command line)
+* `<modulename>FLOW_VIVADO_IP_REPO_PATHS=<repopaths>`: Paths where the used IP cores are located.
+* `<modulename>FLOW_VIVADO_BD_TCL_FILE=<tclfile>`: The tcl file which is used to generate the block design in Vivado. (typically exported via the tcl command `write_bd_tcl`)
+* `<modulename>FLOW_VIVADO_BD_GENERIC_<parameter>_AT_<bdnode>=<value>`: Block design equivalent to the `<modulename>GENERIC_<parameter>=<value>` variables.
+
+### Examples
+
+* Simulate the default configuration of the framework: `make hdlsb`
+* Simulate the Ascon TEC-Tree (i.e., CRYPTO_CONFIG=2): `make hdlsb memsecGENERIC_CRYPTO_CONFIG=2`
+* Build a bitfile with Prince ECB (i.e., CRYPTO_CONFIG=3): `make vivado_package; make implcb FLOW_MODULE=full_memenc full_memencFLOW_VIVADO_BD_GENERIC_CRYPTO_CONFIG_AT_memsec_0=3`
+
+As can be seen, specifying multiple parameters potentially leads to very long parameter argument strings, especially during bitfile generation. Therefore, additionally some python tooling is provided to generate the argument lists. Examples for this can be found in `build_bitfiles_fpl_paper.py`.
+
+## License
+
+The framework itself is licensed under GPLv3. On the other hand, the crypto implementations may have different licenses. For example, the Ascon implementation is licensed under Apache-2.0.
+
+## Authors
+
+The majority of the framework was designed and implemented by Thomas Unterluggauer (<thomas.unterluggauer@iaik.tugraz.at>) and Mario Werner (<mario.werner@iaik.tugraz.at>). Additionally, code and concepts from Hannes Groß, Thomas Kastner, Christian Maierhofer, David Schaffenrath, Robert Schilling, and Erich Wenger have been used.
+
+## Open Tasks and Current Limitations
+
+* *Add Open Source AES Implementation*: The AES core which was initially used can not be open-sourced. Therefore, another open source core has to be integrated to restore the original functionality.
+* *Open-sourcing new Test Bench*: Unfortunately, the python high level implementation which was used as golden model during development, is not well suited for public release. Therefore, we are currently working on a new reference implementation which eventually will be used for the open source test bench.
+* *Releasing Benchmark Results*: Numerous different hardware configurations have been measured for the FPL publication of which only few have been highlighted in the paper. Publishing all these results in an easily comparable way is planned. However, some tooling has to be developed first to make them easily accessible.
+* *Code Refactoring*: During the development of the framework, most of the building blocks where designed when a certain functionality was needed more often. Therefore, sometimes old code still exists which does not yet use all available blocks. Refactoring such code parts is an ongoing effort.
+
+# GHDL
+GHDL release v0.37.0 contains a bug. Nightly GHDL build from 21.05.2020 fixed this bug and simulation is working.
diff --git a/fpga/src/memsec/build_bitfiles_fpl_optimized.py b/fpga/src/memsec/build_bitfiles_fpl_optimized.py
new file mode 100644
index 0000000..151cc36
--- /dev/null
+++ b/fpga/src/memsec/build_bitfiles_fpl_optimized.py
@@ -0,0 +1,104 @@
+#!/usr/bin/env python3
+
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+
+import os
+import sys
+
+try:
+    import memsec
+    from memsec import merge_dicts
+except ImportError:
+    sys.path.append(os.path.join(os.path.dirname(__file__), "python"))
+    import memsec
+    from memsec import merge_dicts
+
+
+def build_bit_stream(module, generics, options):
+    return [
+        memsec.implement_bd_module(
+            module, generics, options,
+            source_root_dir=os.path.join(os.path.dirname(__file__), "."),
+            binary_root_dir=memsec.mangle_config, targets=['implcb', 'clean']
+        )
+    ]
+
+
+module = 'full_memenc'
+res = []
+
+# package the IP core
+# memsec.run('memsec', ['info', 'vivado_package', 'distclean'])
+
+# PCW_FPGA0_PERIPHERAL_FREQMHZ, PCW_FCLK0_PERIPHERAL_CLKSRC, ...
+globalBdGenerics = {'PCW_FPGA0_PERIPHERAL_FREQMHZ': 100}
+
+globalOptionDictList = [
+    {},
+    {'FLOW_VIVADO_IMPL_STRATEGY': 'Performance_NetDelay_high'},
+    {'FLOW_VIVADO_IMPL_STRATEGY': 'Performance_NetDelay_low'},
+    {'FLOW_VIVADO_IMPL_STRATEGY': 'Flow_RunPostRoutePhysOpt'},
+]
+
+# PLAIN
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 0, 'BLOCKS_PER_SECTOR': 4})
+for optionsDict in globalOptionDictList:
+    res += build_bit_stream(module, localBdGenerics, optionsDict)
+
+# ASCON
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 1, 'DATA_BLOCK_SIZE': 32})
+for optionsDict in globalOptionDictList:
+    res += build_bit_stream(module, localBdGenerics, optionsDict)
+
+# ASCON TREE
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 2, 'TREE_ROOTS': 1024, 'TREE_ARITY': 8, 'DATA_BLOCK_SIZE': 64})
+for optionsDict in globalOptionDictList:
+    res += build_bit_stream(module, localBdGenerics, optionsDict)
+
+# Prince ECB
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 3, 'BLOCKS_PER_SECTOR': 4})
+for optionsDict in globalOptionDictList:
+    res += build_bit_stream(module, localBdGenerics, optionsDict)
+
+# AES ECB
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 4, 'BLOCKS_PER_SECTOR': 2})
+for optionsDict in globalOptionDictList:
+    res += build_bit_stream(module, localBdGenerics, optionsDict)
+
+# Prince CBC
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 5, 'BLOCKS_PER_SECTOR': 4})
+for optionsDict in globalOptionDictList:
+    res += build_bit_stream(module, localBdGenerics, optionsDict)
+
+# AES CBC
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 6, 'BLOCKS_PER_SECTOR': 2})
+for optionsDict in globalOptionDictList:
+    res += build_bit_stream(module, localBdGenerics, optionsDict)
+
+# Prince XTS
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 7, 'BLOCKS_PER_SECTOR': 4})
+for optionsDict in globalOptionDictList:
+    res += build_bit_stream(module, localBdGenerics, optionsDict)
+
+# AES XTS
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 8, 'BLOCKS_PER_SECTOR': 2})
+for optionsDict in globalOptionDictList:
+    res += build_bit_stream(module, localBdGenerics, optionsDict)
+
+sys.exit(memsec.printSummary(res))
diff --git a/fpga/src/memsec/build_bitfiles_fpl_paper.py b/fpga/src/memsec/build_bitfiles_fpl_paper.py
new file mode 100644
index 0000000..8ad8c74
--- /dev/null
+++ b/fpga/src/memsec/build_bitfiles_fpl_paper.py
@@ -0,0 +1,93 @@
+#!/usr/bin/env python3
+
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+
+import os
+import sys
+
+try:
+    import memsec
+    from memsec import merge_dicts
+except ImportError:
+    sys.path.append(os.path.join(os.path.dirname(__file__), "python"))
+    import memsec
+    from memsec import merge_dicts
+
+
+def build_bit_stream(module, generics):
+    return [
+        memsec.implement_bd_module(
+            module, generics,
+            source_root_dir=os.path.join(os.path.dirname(__file__), "."),
+            binary_root_dir=memsec.mangle_config, targets=['implcb', 'clean']
+        )
+    ]
+
+
+module = 'full_memenc'
+res = []
+
+# package the IP core
+# memsec.run('memsec', ['info', 'vivado_package', 'distclean'])
+
+globalBdGenerics = {'PCW_FPGA0_PERIPHERAL_FREQMHZ': 50}
+
+# PLAIN
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 0})
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 4}))
+
+# ASCON
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 1})
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'DATA_BLOCK_SIZE': 32}))
+
+# ASCON TREE
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 2})
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ROOTS': 1024, 'TREE_ARITY': 8, 'DATA_BLOCK_SIZE': 64}))
+
+# Prince ECB
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 3})
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 4}))
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 8}))
+
+# AES ECB
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 4})
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 2}))
+
+# Prince CBC
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 5})
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 1}))
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 2}))
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 4}))
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 8}))
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 16}))
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 32}))
+
+# AES CBC
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 6})
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 2}))
+
+# Prince XTS
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 7})
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 4}))
+
+# AES XTS
+localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 8})
+res += build_bit_stream(module, merge_dicts(localBdGenerics, {'BLOCKS_PER_SECTOR': 2}))
+
+sys.exit(memsec.print_summary(res))
diff --git a/fpga/src/memsec/build_bitfiles_meas_journal.py b/fpga/src/memsec/build_bitfiles_meas_journal.py
new file mode 100644
index 0000000..ee7cf79
--- /dev/null
+++ b/fpga/src/memsec/build_bitfiles_meas_journal.py
@@ -0,0 +1,89 @@
+#!/usr/bin/env python3
+
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+
+import os
+import sys
+
+try:
+    import memsec
+    from memsec import merge_dicts
+except ImportError:
+    sys.path.append(os.path.join(os.path.dirname(__file__), "python"))
+    import memsec
+    from memsec import merge_dicts
+
+
+def build_bit_stream(module, generics, options):
+    return [
+        memsec.implement_bd_module(
+            module, generics, options,
+            source_root_dir=os.path.join(os.path.dirname(__file__), "."),
+            binary_root_dir=memsec.mangle_config, targets=['implcb', 'clean']
+        )
+    ]
+
+
+module ='full_memenc'
+res = []
+
+# package the IP core
+# memsec.run('memsec', ['info', 'vivado_package', 'distclean'])
+
+globalBdGenerics = {'PCW_FPGA0_PERIPHERAL_FREQMHZ': 50}
+
+globalOptionDict = {'FLOW_VIVADO_IMPL_STRATEGY': 'Flow_RunPostRoutePhysOpt'}
+
+# MEAS
+# localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 9, 'TREE_ROOTS': 1024, 'DATA_BLOCK_SIZE': 64})
+# res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ARITY': 2}), merge_dicts(globalOptionDict, {'DATASTREAM_DATA_WIDTH': 64}))
+# res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ARITY': 4}), merge_dicts(globalOptionDict, {'DATASTREAM_DATA_WIDTH': 64}))
+# res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ARITY': 8}), merge_dicts(globalOptionDict, {'DATASTREAM_DATA_WIDTH': 64}))
+# res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ARITY': 2}), merge_dicts(globalOptionDict, {'DATASTREAM_DATA_WIDTH': 128}))
+# res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ARITY': 4}), merge_dicts(globalOptionDict, {'DATASTREAM_DATA_WIDTH': 128}))
+# res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ARITY': 8}), merge_dicts(globalOptionDict, {'DATASTREAM_DATA_WIDTH': 128}))
+
+# MEAS ECB
+# localBdGenerics = merge_dicts(globalBdGenerics, {'CRYPTO_CONFIG': 10, 'TREE_ROOTS': 1024, 'DATA_BLOCK_SIZE': 64})
+# res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ARITY': 2}), merge_dicts(globalOptionDict, {'DATASTREAM_DATA_WIDTH': 64}))
+# res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ARITY': 4}), merge_dicts(globalOptionDict, {'DATASTREAM_DATA_WIDTH': 64}))
+# res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ARITY': 8}), merge_dicts(globalOptionDict, {'DATASTREAM_DATA_WIDTH': 64}))
+# res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ARITY': 2}), merge_dicts(globalOptionDict, {'DATASTREAM_DATA_WIDTH': 128}))
+# res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ARITY': 4}), merge_dicts(globalOptionDict, {'DATASTREAM_DATA_WIDTH': 128}))
+# res += build_bit_stream(module, merge_dicts(localBdGenerics, {'TREE_ARITY': 8}), merge_dicts(globalOptionDict, {'DATASTREAM_DATA_WIDTH': 128}))
+
+# build MEAS (ECB) with different optimizer settings
+synthOptionDictList = [
+    {'FLOW_VIVADO_SYNTH_STRATEGY': 'Flow_AlternateRoutability'},
+    {'FLOW_VIVADO_SYNTH_STRATEGY': 'Flow_PerfOptimized_high'},
+    {'FLOW_VIVADO_SYNTH_STRATEGY': 'Flow_PerfThresholdCarry'},
+]
+
+implOptionDictList = [
+    {'FLOW_VIVADO_IMPL_STRATEGY': 'Flow_RunPostRoutePhysOpt'},
+]
+
+localBdGenerics = merge_dicts(globalBdGenerics, {'TREE_ARITY': 4, 'TREE_ROOTS': 1024, 'DATA_BLOCK_SIZE': 64})
+for synthOptionsDict in synthOptionDictList:
+    for implOptionsDict in implOptionDictList:
+        optionsDict = merge_dicts(implOptionsDict, synthOptionsDict, {'DATASTREAM_DATA_WIDTH': 128})
+        res += build_bit_stream(module, merge_dicts(localBdGenerics, {'CRYPTO_CONFIG': 9}), optionsDict)
+        res += build_bit_stream(module, merge_dicts(localBdGenerics, {'CRYPTO_CONFIG': 10}), optionsDict)
+
+sys.exit(memsec.printSummary(res))
diff --git a/fpga/src/memsec/examples/full_memenc_bd.tcl b/fpga/src/memsec/examples/full_memenc_bd.tcl
new file mode 100644
index 0000000..1b7e92d
--- /dev/null
+++ b/fpga/src/memsec/examples/full_memenc_bd.tcl
@@ -0,0 +1,918 @@
+#
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+################################################################
+# This is a generated script based on design: bd
+#
+# Though there are limitations about the generated script,
+# the main purpose of this utility is to make learning
+# IP Integrator Tcl commands easier.
+################################################################
+
+namespace eval _tcl {
+proc get_script_folder {} {
+   set script_path [file normalize [info script]]
+   set script_folder [file dirname $script_path]
+   return $script_folder
+}
+}
+variable script_folder
+set script_folder [_tcl::get_script_folder]
+
+################################################################
+# Check if script is running in correct Vivado version.
+################################################################
+set scripts_vivado_version 2018.2
+set current_vivado_version [version -short]
+
+if { [string first $scripts_vivado_version $current_vivado_version] == -1 } {
+   puts ""
+   common::send_msg_id "BD_TCL-1002" "WARNING" "This script was generated using Vivado <$scripts_vivado_version> without IP versions in the create_bd_cell commands, but is now being run in <$current_vivado_version> of Vivado. There may have been major IP version changes between Vivado <$scripts_vivado_version> and <$current_vivado_version>, which could impact the parameter settings of the IPs."
+
+}
+
+################################################################
+# START
+################################################################
+
+# To test this script, run the following commands from Vivado Tcl console:
+# source bd_script.tcl
+
+# If there is no project opened, this script will create a
+# project, but make sure you do not have an existing project
+# <./myproj/project_1.xpr> in the current working folder.
+
+set list_projs [get_projects -quiet]
+if { $list_projs eq "" } {
+   create_project project_1 myproj -part xc7z020clg484-1
+   set_property BOARD_PART em.avnet.com:zed:part0:1.3 [current_project]
+}
+
+
+# CHANGE DESIGN NAME HERE
+variable design_name
+set design_name bd
+
+# If you do not already have an existing IP Integrator design open,
+# you can create a design using the following command:
+#    create_bd_design $design_name
+
+# Creating design if needed
+set errMsg ""
+set nRet 0
+
+set cur_design [current_bd_design -quiet]
+set list_cells [get_bd_cells -quiet]
+
+if { ${design_name} eq "" } {
+   # USE CASES:
+   #    1) Design_name not set
+
+   set errMsg "Please set the variable <design_name> to a non-empty value."
+   set nRet 1
+
+} elseif { ${cur_design} ne "" && ${list_cells} eq "" } {
+   # USE CASES:
+   #    2): Current design opened AND is empty AND names same.
+   #    3): Current design opened AND is empty AND names diff; design_name NOT in project.
+   #    4): Current design opened AND is empty AND names diff; design_name exists in project.
+
+   if { $cur_design ne $design_name } {
+      common::send_msg_id "BD_TCL-001" "INFO" "Changing value of <design_name> from <$design_name> to <$cur_design> since current design is empty."
+      set design_name [get_property NAME $cur_design]
+   }
+   common::send_msg_id "BD_TCL-002" "INFO" "Constructing design in IPI design <$cur_design>..."
+
+} elseif { ${cur_design} ne "" && $list_cells ne "" && $cur_design eq $design_name } {
+   # USE CASES:
+   #    5) Current design opened AND has components AND same names.
+
+   set errMsg "Design <$design_name> already exists in your project, please set the variable <design_name> to another value."
+   set nRet 1
+} elseif { [get_files -quiet ${design_name}.bd] ne "" } {
+   # USE CASES: 
+   #    6) Current opened design, has components, but diff names, design_name exists in project.
+   #    7) No opened design, design_name exists in project.
+
+   set errMsg "Design <$design_name> already exists in your project, please set the variable <design_name> to another value."
+   set nRet 2
+
+} else {
+   # USE CASES:
+   #    8) No opened design, design_name not in project.
+   #    9) Current opened design, has components, but diff names, design_name not in project.
+
+   common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."
+
+   create_bd_design $design_name
+
+   common::send_msg_id "BD_TCL-004" "INFO" "Making design <$design_name> as current_bd_design."
+   current_bd_design $design_name
+
+}
+
+common::send_msg_id "BD_TCL-005" "INFO" "Currently the variable <design_name> is equal to \"$design_name\"."
+
+if { $nRet != 0 } {
+   catch {common::send_msg_id "BD_TCL-114" "ERROR" $errMsg}
+   return $nRet
+}
+
+set bCheckIPsPassed 1
+##################################################################
+# CHECK IPs
+##################################################################
+set bCheckIPs 1
+if { $bCheckIPs == 1 } {
+   set list_check_ips "\ 
+IAIK:IAIK:memsec:*\
+xilinx.com:ip:processing_system7:*\
+xilinx.com:ip:proc_sys_reset:*\
+"
+
+   set list_ips_missing ""
+   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."
+
+   foreach ip_vlnv $list_check_ips {
+      set ip_obj [get_ipdefs -all $ip_vlnv]
+      if { $ip_obj eq "" } {
+         lappend list_ips_missing $ip_vlnv
+      }
+   }
+
+   if { $list_ips_missing ne "" } {
+      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
+      set bCheckIPsPassed 0
+   }
+
+}
+
+if { $bCheckIPsPassed != 1 } {
+  common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
+  return 3
+}
+
+##################################################################
+# DESIGN PROCs
+##################################################################
+
+
+
+# Procedure to create entire design; Provide argument to make
+# procedure reusable. If parentCell is "", will use root.
+proc create_root_design { parentCell } {
+
+  variable script_folder
+  variable design_name
+
+  if { $parentCell eq "" } {
+     set parentCell [get_bd_cells /]
+  }
+
+  # Get object for parentCell
+  set parentObj [get_bd_cells $parentCell]
+  if { $parentObj == "" } {
+     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
+     return
+  }
+
+  # Make sure parentObj is hier blk
+  set parentType [get_property TYPE $parentObj]
+  if { $parentType ne "hier" } {
+     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
+     return
+  }
+
+  # Save current instance; Restore later
+  set oldCurInst [current_bd_instance .]
+
+  # Set parent object as current
+  current_bd_instance $parentObj
+
+
+  # Create interface ports
+  set DDR [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:ddrx_rtl:1.0 DDR ]
+  set FIXED_IO [ create_bd_intf_port -mode Master -vlnv xilinx.com:display_processing_system7:fixedio_rtl:1.0 FIXED_IO ]
+
+  # Create ports
+
+  # Create instance: axi_mem_intercon, and set properties
+  set axi_mem_intercon [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect axi_mem_intercon ]
+  set_property -dict [ list \
+   CONFIG.NUM_MI {1} \
+ ] $axi_mem_intercon
+
+  # Create instance: memsec_0, and set properties
+  set memsec_0 [ create_bd_cell -type ip -vlnv IAIK:IAIK:memsec memsec_0 ]
+  set_property -dict [ list \
+   CONFIG.CRYPTO_CONFIG {3} \
+ ] $memsec_0
+
+  # Create instance: processing_system7_0, and set properties
+  set processing_system7_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:processing_system7 processing_system7_0 ]
+  set_property -dict [ list \
+   CONFIG.PCW_ACT_APU_PERIPHERAL_FREQMHZ {666.666687} \
+   CONFIG.PCW_ACT_CAN_PERIPHERAL_FREQMHZ {10.000000} \
+   CONFIG.PCW_ACT_DCI_PERIPHERAL_FREQMHZ {10.158730} \
+   CONFIG.PCW_ACT_ENET0_PERIPHERAL_FREQMHZ {125.000000} \
+   CONFIG.PCW_ACT_ENET1_PERIPHERAL_FREQMHZ {10.000000} \
+   CONFIG.PCW_ACT_FPGA0_PERIPHERAL_FREQMHZ {50.000000} \
+   CONFIG.PCW_ACT_FPGA1_PERIPHERAL_FREQMHZ {10.000000} \
+   CONFIG.PCW_ACT_FPGA2_PERIPHERAL_FREQMHZ {10.000000} \
+   CONFIG.PCW_ACT_FPGA3_PERIPHERAL_FREQMHZ {10.000000} \
+   CONFIG.PCW_ACT_PCAP_PERIPHERAL_FREQMHZ {200.000000} \
+   CONFIG.PCW_ACT_QSPI_PERIPHERAL_FREQMHZ {200.000000} \
+   CONFIG.PCW_ACT_SDIO_PERIPHERAL_FREQMHZ {50.000000} \
+   CONFIG.PCW_ACT_SMC_PERIPHERAL_FREQMHZ {10.000000} \
+   CONFIG.PCW_ACT_SPI_PERIPHERAL_FREQMHZ {10.000000} \
+   CONFIG.PCW_ACT_TPIU_PERIPHERAL_FREQMHZ {200.000000} \
+   CONFIG.PCW_ACT_TTC0_CLK0_PERIPHERAL_FREQMHZ {111.111115} \
+   CONFIG.PCW_ACT_TTC0_CLK1_PERIPHERAL_FREQMHZ {111.111115} \
+   CONFIG.PCW_ACT_TTC0_CLK2_PERIPHERAL_FREQMHZ {111.111115} \
+   CONFIG.PCW_ACT_TTC1_CLK0_PERIPHERAL_FREQMHZ {111.111115} \
+   CONFIG.PCW_ACT_TTC1_CLK1_PERIPHERAL_FREQMHZ {111.111115} \
+   CONFIG.PCW_ACT_TTC1_CLK2_PERIPHERAL_FREQMHZ {111.111115} \
+   CONFIG.PCW_ACT_TTC_PERIPHERAL_FREQMHZ {50} \
+   CONFIG.PCW_ACT_UART_PERIPHERAL_FREQMHZ {50.000000} \
+   CONFIG.PCW_ACT_USB0_PERIPHERAL_FREQMHZ {60} \
+   CONFIG.PCW_ACT_USB1_PERIPHERAL_FREQMHZ {60} \
+   CONFIG.PCW_ACT_WDT_PERIPHERAL_FREQMHZ {111.111115} \
+   CONFIG.PCW_APU_CLK_RATIO_ENABLE {6:2:1} \
+   CONFIG.PCW_APU_PERIPHERAL_FREQMHZ {666.666667} \
+   CONFIG.PCW_ARMPLL_CTRL_FBDIV {40} \
+   CONFIG.PCW_CAN0_GRP_CLK_ENABLE {0} \
+   CONFIG.PCW_CAN0_PERIPHERAL_CLKSRC {External} \
+   CONFIG.PCW_CAN0_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_CAN1_GRP_CLK_ENABLE {0} \
+   CONFIG.PCW_CAN1_PERIPHERAL_CLKSRC {External} \
+   CONFIG.PCW_CAN1_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_CAN_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_CAN_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_CAN_PERIPHERAL_DIVISOR1 {1} \
+   CONFIG.PCW_CAN_PERIPHERAL_FREQMHZ {100} \
+   CONFIG.PCW_CAN_PERIPHERAL_VALID {0} \
+   CONFIG.PCW_CLK0_FREQ {50000000} \
+   CONFIG.PCW_CLK1_FREQ {10000000} \
+   CONFIG.PCW_CLK2_FREQ {10000000} \
+   CONFIG.PCW_CLK3_FREQ {10000000} \
+   CONFIG.PCW_CPU_CPU_6X4X_MAX_RANGE {667} \
+   CONFIG.PCW_CPU_CPU_PLL_FREQMHZ {1333.333} \
+   CONFIG.PCW_CPU_PERIPHERAL_CLKSRC {ARM PLL} \
+   CONFIG.PCW_CPU_PERIPHERAL_DIVISOR0 {2} \
+   CONFIG.PCW_CRYSTAL_PERIPHERAL_FREQMHZ {33.333333} \
+   CONFIG.PCW_DCI_PERIPHERAL_CLKSRC {DDR PLL} \
+   CONFIG.PCW_DCI_PERIPHERAL_DIVISOR0 {15} \
+   CONFIG.PCW_DCI_PERIPHERAL_DIVISOR1 {7} \
+   CONFIG.PCW_DCI_PERIPHERAL_FREQMHZ {10.159} \
+   CONFIG.PCW_DDRPLL_CTRL_FBDIV {32} \
+   CONFIG.PCW_DDR_DDR_PLL_FREQMHZ {1066.667} \
+   CONFIG.PCW_DDR_HPRLPR_QUEUE_PARTITION {HPR(0)/LPR(32)} \
+   CONFIG.PCW_DDR_HPR_TO_CRITICAL_PRIORITY_LEVEL {15} \
+   CONFIG.PCW_DDR_LPR_TO_CRITICAL_PRIORITY_LEVEL {2} \
+   CONFIG.PCW_DDR_PERIPHERAL_CLKSRC {DDR PLL} \
+   CONFIG.PCW_DDR_PERIPHERAL_DIVISOR0 {2} \
+   CONFIG.PCW_DDR_PORT0_HPR_ENABLE {0} \
+   CONFIG.PCW_DDR_PORT1_HPR_ENABLE {0} \
+   CONFIG.PCW_DDR_PORT2_HPR_ENABLE {0} \
+   CONFIG.PCW_DDR_PORT3_HPR_ENABLE {0} \
+   CONFIG.PCW_DDR_RAM_HIGHADDR {0x1FFFFFFF} \
+   CONFIG.PCW_DDR_WRITE_TO_CRITICAL_PRIORITY_LEVEL {2} \
+   CONFIG.PCW_ENET0_ENET0_IO {MIO 16 .. 27} \
+   CONFIG.PCW_ENET0_GRP_MDIO_ENABLE {1} \
+   CONFIG.PCW_ENET0_GRP_MDIO_IO {MIO 52 .. 53} \
+   CONFIG.PCW_ENET0_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_ENET0_PERIPHERAL_DIVISOR0 {8} \
+   CONFIG.PCW_ENET0_PERIPHERAL_DIVISOR1 {1} \
+   CONFIG.PCW_ENET0_PERIPHERAL_ENABLE {1} \
+   CONFIG.PCW_ENET0_PERIPHERAL_FREQMHZ {1000 Mbps} \
+   CONFIG.PCW_ENET0_RESET_ENABLE {0} \
+   CONFIG.PCW_ENET1_GRP_MDIO_ENABLE {0} \
+   CONFIG.PCW_ENET1_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_ENET1_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_ENET1_PERIPHERAL_DIVISOR1 {1} \
+   CONFIG.PCW_ENET1_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_ENET1_PERIPHERAL_FREQMHZ {1000 Mbps} \
+   CONFIG.PCW_ENET1_RESET_ENABLE {0} \
+   CONFIG.PCW_ENET_RESET_ENABLE {1} \
+   CONFIG.PCW_ENET_RESET_POLARITY {Active Low} \
+   CONFIG.PCW_ENET_RESET_SELECT {Share reset pin} \
+   CONFIG.PCW_EN_4K_TIMER {0} \
+   CONFIG.PCW_EN_CAN0 {0} \
+   CONFIG.PCW_EN_CAN1 {0} \
+   CONFIG.PCW_EN_CLK0_PORT {1} \
+   CONFIG.PCW_EN_CLK1_PORT {0} \
+   CONFIG.PCW_EN_CLK2_PORT {0} \
+   CONFIG.PCW_EN_CLK3_PORT {0} \
+   CONFIG.PCW_EN_DDR {1} \
+   CONFIG.PCW_EN_EMIO_CAN0 {0} \
+   CONFIG.PCW_EN_EMIO_CAN1 {0} \
+   CONFIG.PCW_EN_EMIO_CD_SDIO0 {0} \
+   CONFIG.PCW_EN_EMIO_CD_SDIO1 {0} \
+   CONFIG.PCW_EN_EMIO_ENET0 {0} \
+   CONFIG.PCW_EN_EMIO_ENET1 {0} \
+   CONFIG.PCW_EN_EMIO_GPIO {0} \
+   CONFIG.PCW_EN_EMIO_I2C0 {0} \
+   CONFIG.PCW_EN_EMIO_I2C1 {0} \
+   CONFIG.PCW_EN_EMIO_MODEM_UART0 {0} \
+   CONFIG.PCW_EN_EMIO_MODEM_UART1 {0} \
+   CONFIG.PCW_EN_EMIO_PJTAG {0} \
+   CONFIG.PCW_EN_EMIO_SDIO0 {0} \
+   CONFIG.PCW_EN_EMIO_SDIO1 {0} \
+   CONFIG.PCW_EN_EMIO_SPI0 {0} \
+   CONFIG.PCW_EN_EMIO_SPI1 {0} \
+   CONFIG.PCW_EN_EMIO_SRAM_INT {0} \
+   CONFIG.PCW_EN_EMIO_TRACE {0} \
+   CONFIG.PCW_EN_EMIO_TTC0 {1} \
+   CONFIG.PCW_EN_EMIO_TTC1 {0} \
+   CONFIG.PCW_EN_EMIO_UART0 {0} \
+   CONFIG.PCW_EN_EMIO_UART1 {0} \
+   CONFIG.PCW_EN_EMIO_WDT {0} \
+   CONFIG.PCW_EN_EMIO_WP_SDIO0 {0} \
+   CONFIG.PCW_EN_EMIO_WP_SDIO1 {0} \
+   CONFIG.PCW_EN_ENET0 {1} \
+   CONFIG.PCW_EN_ENET1 {0} \
+   CONFIG.PCW_EN_GPIO {1} \
+   CONFIG.PCW_EN_I2C0 {0} \
+   CONFIG.PCW_EN_I2C1 {0} \
+   CONFIG.PCW_EN_MODEM_UART0 {0} \
+   CONFIG.PCW_EN_MODEM_UART1 {0} \
+   CONFIG.PCW_EN_PJTAG {0} \
+   CONFIG.PCW_EN_QSPI {1} \
+   CONFIG.PCW_EN_SDIO0 {1} \
+   CONFIG.PCW_EN_SDIO1 {0} \
+   CONFIG.PCW_EN_SMC {0} \
+   CONFIG.PCW_EN_SPI0 {0} \
+   CONFIG.PCW_EN_SPI1 {0} \
+   CONFIG.PCW_EN_TRACE {0} \
+   CONFIG.PCW_EN_TTC0 {1} \
+   CONFIG.PCW_EN_TTC1 {0} \
+   CONFIG.PCW_EN_UART0 {1} \
+   CONFIG.PCW_EN_UART1 {1} \
+   CONFIG.PCW_EN_USB0 {1} \
+   CONFIG.PCW_EN_USB1 {0} \
+   CONFIG.PCW_EN_WDT {0} \
+   CONFIG.PCW_FCLK0_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_FCLK0_PERIPHERAL_DIVISOR0 {5} \
+   CONFIG.PCW_FCLK0_PERIPHERAL_DIVISOR1 {4} \
+   CONFIG.PCW_FCLK1_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_FCLK1_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_FCLK1_PERIPHERAL_DIVISOR1 {1} \
+   CONFIG.PCW_FCLK2_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_FCLK2_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_FCLK2_PERIPHERAL_DIVISOR1 {1} \
+   CONFIG.PCW_FCLK3_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_FCLK3_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_FCLK3_PERIPHERAL_DIVISOR1 {1} \
+   CONFIG.PCW_FCLK_CLK0_BUF {TRUE} \
+   CONFIG.PCW_FCLK_CLK1_BUF {FALSE} \
+   CONFIG.PCW_FCLK_CLK2_BUF {FALSE} \
+   CONFIG.PCW_FCLK_CLK3_BUF {FALSE} \
+   CONFIG.PCW_FPGA0_PERIPHERAL_FREQMHZ {50} \
+   CONFIG.PCW_FPGA1_PERIPHERAL_FREQMHZ {150.000000} \
+   CONFIG.PCW_FPGA2_PERIPHERAL_FREQMHZ {50.000000} \
+   CONFIG.PCW_FPGA3_PERIPHERAL_FREQMHZ {50} \
+   CONFIG.PCW_FPGA_FCLK0_ENABLE {1} \
+   CONFIG.PCW_FPGA_FCLK1_ENABLE {0} \
+   CONFIG.PCW_FPGA_FCLK2_ENABLE {0} \
+   CONFIG.PCW_FPGA_FCLK3_ENABLE {0} \
+   CONFIG.PCW_GPIO_EMIO_GPIO_ENABLE {0} \
+   CONFIG.PCW_GPIO_EMIO_GPIO_WIDTH {64} \
+   CONFIG.PCW_GPIO_MIO_GPIO_ENABLE {1} \
+   CONFIG.PCW_GPIO_MIO_GPIO_IO {MIO} \
+   CONFIG.PCW_GPIO_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_I2C0_GRP_INT_ENABLE {0} \
+   CONFIG.PCW_I2C0_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_I2C0_RESET_ENABLE {0} \
+   CONFIG.PCW_I2C1_GRP_INT_ENABLE {0} \
+   CONFIG.PCW_I2C1_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_I2C1_RESET_ENABLE {0} \
+   CONFIG.PCW_I2C_PERIPHERAL_FREQMHZ {25} \
+   CONFIG.PCW_I2C_RESET_ENABLE {1} \
+   CONFIG.PCW_I2C_RESET_POLARITY {Active Low} \
+   CONFIG.PCW_IOPLL_CTRL_FBDIV {30} \
+   CONFIG.PCW_IO_IO_PLL_FREQMHZ {1000.000} \
+   CONFIG.PCW_IRQ_F2P_MODE {DIRECT} \
+   CONFIG.PCW_MIO_0_DIRECTION {inout} \
+   CONFIG.PCW_MIO_0_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_0_PULLUP {disabled} \
+   CONFIG.PCW_MIO_0_SLEW {slow} \
+   CONFIG.PCW_MIO_10_DIRECTION {in} \
+   CONFIG.PCW_MIO_10_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_10_PULLUP {disabled} \
+   CONFIG.PCW_MIO_10_SLEW {slow} \
+   CONFIG.PCW_MIO_11_DIRECTION {out} \
+   CONFIG.PCW_MIO_11_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_11_PULLUP {disabled} \
+   CONFIG.PCW_MIO_11_SLEW {slow} \
+   CONFIG.PCW_MIO_12_DIRECTION {inout} \
+   CONFIG.PCW_MIO_12_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_12_PULLUP {disabled} \
+   CONFIG.PCW_MIO_12_SLEW {slow} \
+   CONFIG.PCW_MIO_13_DIRECTION {inout} \
+   CONFIG.PCW_MIO_13_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_13_PULLUP {disabled} \
+   CONFIG.PCW_MIO_13_SLEW {slow} \
+   CONFIG.PCW_MIO_14_DIRECTION {inout} \
+   CONFIG.PCW_MIO_14_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_14_PULLUP {disabled} \
+   CONFIG.PCW_MIO_14_SLEW {slow} \
+   CONFIG.PCW_MIO_15_DIRECTION {inout} \
+   CONFIG.PCW_MIO_15_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_15_PULLUP {disabled} \
+   CONFIG.PCW_MIO_15_SLEW {slow} \
+   CONFIG.PCW_MIO_16_DIRECTION {out} \
+   CONFIG.PCW_MIO_16_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_16_PULLUP {disabled} \
+   CONFIG.PCW_MIO_16_SLEW {fast} \
+   CONFIG.PCW_MIO_17_DIRECTION {out} \
+   CONFIG.PCW_MIO_17_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_17_PULLUP {disabled} \
+   CONFIG.PCW_MIO_17_SLEW {fast} \
+   CONFIG.PCW_MIO_18_DIRECTION {out} \
+   CONFIG.PCW_MIO_18_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_18_PULLUP {disabled} \
+   CONFIG.PCW_MIO_18_SLEW {fast} \
+   CONFIG.PCW_MIO_19_DIRECTION {out} \
+   CONFIG.PCW_MIO_19_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_19_PULLUP {disabled} \
+   CONFIG.PCW_MIO_19_SLEW {fast} \
+   CONFIG.PCW_MIO_1_DIRECTION {out} \
+   CONFIG.PCW_MIO_1_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_1_PULLUP {disabled} \
+   CONFIG.PCW_MIO_1_SLEW {fast} \
+   CONFIG.PCW_MIO_20_DIRECTION {out} \
+   CONFIG.PCW_MIO_20_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_20_PULLUP {disabled} \
+   CONFIG.PCW_MIO_20_SLEW {fast} \
+   CONFIG.PCW_MIO_21_DIRECTION {out} \
+   CONFIG.PCW_MIO_21_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_21_PULLUP {disabled} \
+   CONFIG.PCW_MIO_21_SLEW {fast} \
+   CONFIG.PCW_MIO_22_DIRECTION {in} \
+   CONFIG.PCW_MIO_22_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_22_PULLUP {disabled} \
+   CONFIG.PCW_MIO_22_SLEW {fast} \
+   CONFIG.PCW_MIO_23_DIRECTION {in} \
+   CONFIG.PCW_MIO_23_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_23_PULLUP {disabled} \
+   CONFIG.PCW_MIO_23_SLEW {fast} \
+   CONFIG.PCW_MIO_24_DIRECTION {in} \
+   CONFIG.PCW_MIO_24_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_24_PULLUP {disabled} \
+   CONFIG.PCW_MIO_24_SLEW {fast} \
+   CONFIG.PCW_MIO_25_DIRECTION {in} \
+   CONFIG.PCW_MIO_25_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_25_PULLUP {disabled} \
+   CONFIG.PCW_MIO_25_SLEW {fast} \
+   CONFIG.PCW_MIO_26_DIRECTION {in} \
+   CONFIG.PCW_MIO_26_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_26_PULLUP {disabled} \
+   CONFIG.PCW_MIO_26_SLEW {fast} \
+   CONFIG.PCW_MIO_27_DIRECTION {in} \
+   CONFIG.PCW_MIO_27_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_27_PULLUP {disabled} \
+   CONFIG.PCW_MIO_27_SLEW {fast} \
+   CONFIG.PCW_MIO_28_DIRECTION {inout} \
+   CONFIG.PCW_MIO_28_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_28_PULLUP {disabled} \
+   CONFIG.PCW_MIO_28_SLEW {fast} \
+   CONFIG.PCW_MIO_29_DIRECTION {in} \
+   CONFIG.PCW_MIO_29_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_29_PULLUP {disabled} \
+   CONFIG.PCW_MIO_29_SLEW {fast} \
+   CONFIG.PCW_MIO_2_DIRECTION {inout} \
+   CONFIG.PCW_MIO_2_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_2_PULLUP {disabled} \
+   CONFIG.PCW_MIO_2_SLEW {fast} \
+   CONFIG.PCW_MIO_30_DIRECTION {out} \
+   CONFIG.PCW_MIO_30_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_30_PULLUP {disabled} \
+   CONFIG.PCW_MIO_30_SLEW {fast} \
+   CONFIG.PCW_MIO_31_DIRECTION {in} \
+   CONFIG.PCW_MIO_31_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_31_PULLUP {disabled} \
+   CONFIG.PCW_MIO_31_SLEW {fast} \
+   CONFIG.PCW_MIO_32_DIRECTION {inout} \
+   CONFIG.PCW_MIO_32_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_32_PULLUP {disabled} \
+   CONFIG.PCW_MIO_32_SLEW {fast} \
+   CONFIG.PCW_MIO_33_DIRECTION {inout} \
+   CONFIG.PCW_MIO_33_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_33_PULLUP {disabled} \
+   CONFIG.PCW_MIO_33_SLEW {fast} \
+   CONFIG.PCW_MIO_34_DIRECTION {inout} \
+   CONFIG.PCW_MIO_34_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_34_PULLUP {disabled} \
+   CONFIG.PCW_MIO_34_SLEW {fast} \
+   CONFIG.PCW_MIO_35_DIRECTION {inout} \
+   CONFIG.PCW_MIO_35_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_35_PULLUP {disabled} \
+   CONFIG.PCW_MIO_35_SLEW {fast} \
+   CONFIG.PCW_MIO_36_DIRECTION {in} \
+   CONFIG.PCW_MIO_36_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_36_PULLUP {disabled} \
+   CONFIG.PCW_MIO_36_SLEW {fast} \
+   CONFIG.PCW_MIO_37_DIRECTION {inout} \
+   CONFIG.PCW_MIO_37_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_37_PULLUP {disabled} \
+   CONFIG.PCW_MIO_37_SLEW {fast} \
+   CONFIG.PCW_MIO_38_DIRECTION {inout} \
+   CONFIG.PCW_MIO_38_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_38_PULLUP {disabled} \
+   CONFIG.PCW_MIO_38_SLEW {fast} \
+   CONFIG.PCW_MIO_39_DIRECTION {inout} \
+   CONFIG.PCW_MIO_39_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_39_PULLUP {disabled} \
+   CONFIG.PCW_MIO_39_SLEW {fast} \
+   CONFIG.PCW_MIO_3_DIRECTION {inout} \
+   CONFIG.PCW_MIO_3_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_3_PULLUP {disabled} \
+   CONFIG.PCW_MIO_3_SLEW {fast} \
+   CONFIG.PCW_MIO_40_DIRECTION {inout} \
+   CONFIG.PCW_MIO_40_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_40_PULLUP {disabled} \
+   CONFIG.PCW_MIO_40_SLEW {fast} \
+   CONFIG.PCW_MIO_41_DIRECTION {inout} \
+   CONFIG.PCW_MIO_41_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_41_PULLUP {disabled} \
+   CONFIG.PCW_MIO_41_SLEW {fast} \
+   CONFIG.PCW_MIO_42_DIRECTION {inout} \
+   CONFIG.PCW_MIO_42_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_42_PULLUP {disabled} \
+   CONFIG.PCW_MIO_42_SLEW {fast} \
+   CONFIG.PCW_MIO_43_DIRECTION {inout} \
+   CONFIG.PCW_MIO_43_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_43_PULLUP {disabled} \
+   CONFIG.PCW_MIO_43_SLEW {fast} \
+   CONFIG.PCW_MIO_44_DIRECTION {inout} \
+   CONFIG.PCW_MIO_44_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_44_PULLUP {disabled} \
+   CONFIG.PCW_MIO_44_SLEW {fast} \
+   CONFIG.PCW_MIO_45_DIRECTION {inout} \
+   CONFIG.PCW_MIO_45_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_45_PULLUP {disabled} \
+   CONFIG.PCW_MIO_45_SLEW {fast} \
+   CONFIG.PCW_MIO_46_DIRECTION {in} \
+   CONFIG.PCW_MIO_46_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_46_PULLUP {disabled} \
+   CONFIG.PCW_MIO_46_SLEW {slow} \
+   CONFIG.PCW_MIO_47_DIRECTION {in} \
+   CONFIG.PCW_MIO_47_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_47_PULLUP {disabled} \
+   CONFIG.PCW_MIO_47_SLEW {slow} \
+   CONFIG.PCW_MIO_48_DIRECTION {out} \
+   CONFIG.PCW_MIO_48_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_48_PULLUP {disabled} \
+   CONFIG.PCW_MIO_48_SLEW {slow} \
+   CONFIG.PCW_MIO_49_DIRECTION {in} \
+   CONFIG.PCW_MIO_49_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_49_PULLUP {disabled} \
+   CONFIG.PCW_MIO_49_SLEW {slow} \
+   CONFIG.PCW_MIO_4_DIRECTION {inout} \
+   CONFIG.PCW_MIO_4_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_4_PULLUP {disabled} \
+   CONFIG.PCW_MIO_4_SLEW {fast} \
+   CONFIG.PCW_MIO_50_DIRECTION {inout} \
+   CONFIG.PCW_MIO_50_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_50_PULLUP {disabled} \
+   CONFIG.PCW_MIO_50_SLEW {slow} \
+   CONFIG.PCW_MIO_51_DIRECTION {inout} \
+   CONFIG.PCW_MIO_51_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_51_PULLUP {disabled} \
+   CONFIG.PCW_MIO_51_SLEW {slow} \
+   CONFIG.PCW_MIO_52_DIRECTION {out} \
+   CONFIG.PCW_MIO_52_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_52_PULLUP {disabled} \
+   CONFIG.PCW_MIO_52_SLEW {slow} \
+   CONFIG.PCW_MIO_53_DIRECTION {inout} \
+   CONFIG.PCW_MIO_53_IOTYPE {LVCMOS 1.8V} \
+   CONFIG.PCW_MIO_53_PULLUP {disabled} \
+   CONFIG.PCW_MIO_53_SLEW {slow} \
+   CONFIG.PCW_MIO_5_DIRECTION {inout} \
+   CONFIG.PCW_MIO_5_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_5_PULLUP {disabled} \
+   CONFIG.PCW_MIO_5_SLEW {fast} \
+   CONFIG.PCW_MIO_6_DIRECTION {out} \
+   CONFIG.PCW_MIO_6_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_6_PULLUP {disabled} \
+   CONFIG.PCW_MIO_6_SLEW {fast} \
+   CONFIG.PCW_MIO_7_DIRECTION {out} \
+   CONFIG.PCW_MIO_7_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_7_PULLUP {disabled} \
+   CONFIG.PCW_MIO_7_SLEW {slow} \
+   CONFIG.PCW_MIO_8_DIRECTION {out} \
+   CONFIG.PCW_MIO_8_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_8_PULLUP {disabled} \
+   CONFIG.PCW_MIO_8_SLEW {fast} \
+   CONFIG.PCW_MIO_9_DIRECTION {inout} \
+   CONFIG.PCW_MIO_9_IOTYPE {LVCMOS 3.3V} \
+   CONFIG.PCW_MIO_9_PULLUP {disabled} \
+   CONFIG.PCW_MIO_9_SLEW {slow} \
+   CONFIG.PCW_MIO_TREE_PERIPHERALS {GPIO#Quad SPI Flash#Quad SPI Flash#Quad SPI Flash#Quad SPI Flash#Quad SPI Flash#Quad SPI Flash#GPIO#GPIO#GPIO#UART 0#UART 0#GPIO#GPIO#GPIO#GPIO#Enet 0#Enet 0#Enet 0#Enet 0#Enet 0#Enet 0#Enet 0#Enet 0#Enet 0#Enet 0#Enet 0#Enet 0#USB 0#USB 0#USB 0#USB 0#USB 0#USB 0#USB 0#USB 0#USB 0#USB 0#USB 0#USB 0#SD 0#SD 0#SD 0#SD 0#SD 0#SD 0#SD 0#SD 0#UART 1#UART 1#GPIO#GPIO#Enet 0#Enet 0} \
+   CONFIG.PCW_MIO_TREE_SIGNALS {gpio[0]#qspi0_ss_b#qspi0_io[0]#qspi0_io[1]#qspi0_io[2]#qspi0_io[3]/HOLD_B#qspi0_sclk#gpio[7]#gpio[8]#gpio[9]#rx#tx#gpio[12]#gpio[13]#gpio[14]#gpio[15]#tx_clk#txd[0]#txd[1]#txd[2]#txd[3]#tx_ctl#rx_clk#rxd[0]#rxd[1]#rxd[2]#rxd[3]#rx_ctl#data[4]#dir#stp#nxt#data[0]#data[1]#data[2]#data[3]#clk#data[5]#data[6]#data[7]#clk#cmd#data[0]#data[1]#data[2]#data[3]#wp#cd#tx#rx#gpio[50]#gpio[51]#mdc#mdio} \
+   CONFIG.PCW_NAND_CYCLES_T_AR {1} \
+   CONFIG.PCW_NAND_CYCLES_T_CLR {1} \
+   CONFIG.PCW_NAND_CYCLES_T_RC {11} \
+   CONFIG.PCW_NAND_CYCLES_T_REA {1} \
+   CONFIG.PCW_NAND_CYCLES_T_RR {1} \
+   CONFIG.PCW_NAND_CYCLES_T_WC {11} \
+   CONFIG.PCW_NAND_CYCLES_T_WP {1} \
+   CONFIG.PCW_NAND_GRP_D8_ENABLE {0} \
+   CONFIG.PCW_NAND_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_NOR_CS0_T_CEOE {1} \
+   CONFIG.PCW_NOR_CS0_T_PC {1} \
+   CONFIG.PCW_NOR_CS0_T_RC {11} \
+   CONFIG.PCW_NOR_CS0_T_TR {1} \
+   CONFIG.PCW_NOR_CS0_T_WC {11} \
+   CONFIG.PCW_NOR_CS0_T_WP {1} \
+   CONFIG.PCW_NOR_CS0_WE_TIME {0} \
+   CONFIG.PCW_NOR_CS1_T_CEOE {1} \
+   CONFIG.PCW_NOR_CS1_T_PC {1} \
+   CONFIG.PCW_NOR_CS1_T_RC {11} \
+   CONFIG.PCW_NOR_CS1_T_TR {1} \
+   CONFIG.PCW_NOR_CS1_T_WC {11} \
+   CONFIG.PCW_NOR_CS1_T_WP {1} \
+   CONFIG.PCW_NOR_CS1_WE_TIME {0} \
+   CONFIG.PCW_NOR_GRP_A25_ENABLE {0} \
+   CONFIG.PCW_NOR_GRP_CS0_ENABLE {0} \
+   CONFIG.PCW_NOR_GRP_CS1_ENABLE {0} \
+   CONFIG.PCW_NOR_GRP_SRAM_CS0_ENABLE {0} \
+   CONFIG.PCW_NOR_GRP_SRAM_CS1_ENABLE {0} \
+   CONFIG.PCW_NOR_GRP_SRAM_INT_ENABLE {0} \
+   CONFIG.PCW_NOR_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_NOR_SRAM_CS0_T_CEOE {1} \
+   CONFIG.PCW_NOR_SRAM_CS0_T_PC {1} \
+   CONFIG.PCW_NOR_SRAM_CS0_T_RC {11} \
+   CONFIG.PCW_NOR_SRAM_CS0_T_TR {1} \
+   CONFIG.PCW_NOR_SRAM_CS0_T_WC {11} \
+   CONFIG.PCW_NOR_SRAM_CS0_T_WP {1} \
+   CONFIG.PCW_NOR_SRAM_CS0_WE_TIME {0} \
+   CONFIG.PCW_NOR_SRAM_CS1_T_CEOE {1} \
+   CONFIG.PCW_NOR_SRAM_CS1_T_PC {1} \
+   CONFIG.PCW_NOR_SRAM_CS1_T_RC {11} \
+   CONFIG.PCW_NOR_SRAM_CS1_T_TR {1} \
+   CONFIG.PCW_NOR_SRAM_CS1_T_WC {11} \
+   CONFIG.PCW_NOR_SRAM_CS1_T_WP {1} \
+   CONFIG.PCW_NOR_SRAM_CS1_WE_TIME {0} \
+   CONFIG.PCW_OVERRIDE_BASIC_CLOCK {0} \
+   CONFIG.PCW_PACKAGE_DDR_BOARD_DELAY0 {0.063} \
+   CONFIG.PCW_PACKAGE_DDR_BOARD_DELAY1 {0.062} \
+   CONFIG.PCW_PACKAGE_DDR_BOARD_DELAY2 {0.065} \
+   CONFIG.PCW_PACKAGE_DDR_BOARD_DELAY3 {0.083} \
+   CONFIG.PCW_PACKAGE_DDR_DQS_TO_CLK_DELAY_0 {-0.007} \
+   CONFIG.PCW_PACKAGE_DDR_DQS_TO_CLK_DELAY_1 {-0.010} \
+   CONFIG.PCW_PACKAGE_DDR_DQS_TO_CLK_DELAY_2 {-0.006} \
+   CONFIG.PCW_PACKAGE_DDR_DQS_TO_CLK_DELAY_3 {-0.048} \
+   CONFIG.PCW_PCAP_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_PCAP_PERIPHERAL_DIVISOR0 {5} \
+   CONFIG.PCW_PCAP_PERIPHERAL_FREQMHZ {200} \
+   CONFIG.PCW_PERIPHERAL_BOARD_PRESET {part0} \
+   CONFIG.PCW_PJTAG_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_PLL_BYPASSMODE_ENABLE {0} \
+   CONFIG.PCW_PRESET_BANK0_VOLTAGE {LVCMOS 3.3V} \
+   CONFIG.PCW_PRESET_BANK1_VOLTAGE {LVCMOS 1.8V} \
+   CONFIG.PCW_QSPI_GRP_FBCLK_ENABLE {0} \
+   CONFIG.PCW_QSPI_GRP_IO1_ENABLE {0} \
+   CONFIG.PCW_QSPI_GRP_SINGLE_SS_ENABLE {1} \
+   CONFIG.PCW_QSPI_GRP_SINGLE_SS_IO {MIO 1 .. 6} \
+   CONFIG.PCW_QSPI_GRP_SS1_ENABLE {0} \
+   CONFIG.PCW_QSPI_INTERNAL_HIGHADDRESS {0xFCFFFFFF} \
+   CONFIG.PCW_QSPI_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_QSPI_PERIPHERAL_DIVISOR0 {5} \
+   CONFIG.PCW_QSPI_PERIPHERAL_ENABLE {1} \
+   CONFIG.PCW_QSPI_PERIPHERAL_FREQMHZ {200.000000} \
+   CONFIG.PCW_QSPI_QSPI_IO {MIO 1 .. 6} \
+   CONFIG.PCW_SD0_GRP_CD_ENABLE {1} \
+   CONFIG.PCW_SD0_GRP_CD_IO {MIO 47} \
+   CONFIG.PCW_SD0_GRP_POW_ENABLE {0} \
+   CONFIG.PCW_SD0_GRP_WP_ENABLE {1} \
+   CONFIG.PCW_SD0_GRP_WP_IO {MIO 46} \
+   CONFIG.PCW_SD0_PERIPHERAL_ENABLE {1} \
+   CONFIG.PCW_SD0_SD0_IO {MIO 40 .. 45} \
+   CONFIG.PCW_SD1_GRP_CD_ENABLE {0} \
+   CONFIG.PCW_SD1_GRP_POW_ENABLE {0} \
+   CONFIG.PCW_SD1_GRP_WP_ENABLE {0} \
+   CONFIG.PCW_SD1_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_SDIO_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_SDIO_PERIPHERAL_DIVISOR0 {20} \
+   CONFIG.PCW_SDIO_PERIPHERAL_FREQMHZ {50} \
+   CONFIG.PCW_SDIO_PERIPHERAL_VALID {1} \
+   CONFIG.PCW_SINGLE_QSPI_DATA_MODE {x4} \
+   CONFIG.PCW_SMC_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_SMC_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_SMC_PERIPHERAL_FREQMHZ {100} \
+   CONFIG.PCW_SMC_PERIPHERAL_VALID {0} \
+   CONFIG.PCW_SPI0_GRP_SS0_ENABLE {0} \
+   CONFIG.PCW_SPI0_GRP_SS1_ENABLE {0} \
+   CONFIG.PCW_SPI0_GRP_SS2_ENABLE {0} \
+   CONFIG.PCW_SPI0_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_SPI1_GRP_SS0_ENABLE {0} \
+   CONFIG.PCW_SPI1_GRP_SS1_ENABLE {0} \
+   CONFIG.PCW_SPI1_GRP_SS2_ENABLE {0} \
+   CONFIG.PCW_SPI1_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_SPI_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_SPI_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_SPI_PERIPHERAL_FREQMHZ {166.666666} \
+   CONFIG.PCW_SPI_PERIPHERAL_VALID {0} \
+   CONFIG.PCW_S_AXI_HP0_DATA_WIDTH {64} \
+   CONFIG.PCW_S_AXI_HP1_DATA_WIDTH {64} \
+   CONFIG.PCW_S_AXI_HP2_DATA_WIDTH {64} \
+   CONFIG.PCW_S_AXI_HP3_DATA_WIDTH {64} \
+   CONFIG.PCW_TPIU_PERIPHERAL_CLKSRC {External} \
+   CONFIG.PCW_TPIU_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_TPIU_PERIPHERAL_FREQMHZ {200} \
+   CONFIG.PCW_TRACE_GRP_16BIT_ENABLE {0} \
+   CONFIG.PCW_TRACE_GRP_2BIT_ENABLE {0} \
+   CONFIG.PCW_TRACE_GRP_32BIT_ENABLE {0} \
+   CONFIG.PCW_TRACE_GRP_4BIT_ENABLE {0} \
+   CONFIG.PCW_TRACE_GRP_8BIT_ENABLE {0} \
+   CONFIG.PCW_TRACE_INTERNAL_WIDTH {2} \
+   CONFIG.PCW_TRACE_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_TTC0_CLK0_PERIPHERAL_CLKSRC {CPU_1X} \
+   CONFIG.PCW_TTC0_CLK0_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_TTC0_CLK0_PERIPHERAL_FREQMHZ {133.333333} \
+   CONFIG.PCW_TTC0_CLK1_PERIPHERAL_CLKSRC {CPU_1X} \
+   CONFIG.PCW_TTC0_CLK1_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_TTC0_CLK1_PERIPHERAL_FREQMHZ {133.333333} \
+   CONFIG.PCW_TTC0_CLK2_PERIPHERAL_CLKSRC {CPU_1X} \
+   CONFIG.PCW_TTC0_CLK2_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_TTC0_CLK2_PERIPHERAL_FREQMHZ {133.333333} \
+   CONFIG.PCW_TTC0_PERIPHERAL_ENABLE {1} \
+   CONFIG.PCW_TTC0_TTC0_IO {EMIO} \
+   CONFIG.PCW_TTC1_CLK0_PERIPHERAL_CLKSRC {CPU_1X} \
+   CONFIG.PCW_TTC1_CLK0_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_TTC1_CLK0_PERIPHERAL_FREQMHZ {133.333333} \
+   CONFIG.PCW_TTC1_CLK1_PERIPHERAL_CLKSRC {CPU_1X} \
+   CONFIG.PCW_TTC1_CLK1_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_TTC1_CLK1_PERIPHERAL_FREQMHZ {133.333333} \
+   CONFIG.PCW_TTC1_CLK2_PERIPHERAL_CLKSRC {CPU_1X} \
+   CONFIG.PCW_TTC1_CLK2_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_TTC1_CLK2_PERIPHERAL_FREQMHZ {133.333333} \
+   CONFIG.PCW_TTC1_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_TTC_PERIPHERAL_FREQMHZ {50} \
+   CONFIG.PCW_UART0_BAUD_RATE {115200} \
+   CONFIG.PCW_UART0_GRP_FULL_ENABLE {0} \
+   CONFIG.PCW_UART0_PERIPHERAL_ENABLE {1} \
+   CONFIG.PCW_UART0_UART0_IO {MIO 10 .. 11} \
+   CONFIG.PCW_UART1_BAUD_RATE {115200} \
+   CONFIG.PCW_UART1_GRP_FULL_ENABLE {0} \
+   CONFIG.PCW_UART1_PERIPHERAL_ENABLE {1} \
+   CONFIG.PCW_UART1_UART1_IO {MIO 48 .. 49} \
+   CONFIG.PCW_UART_PERIPHERAL_CLKSRC {IO PLL} \
+   CONFIG.PCW_UART_PERIPHERAL_DIVISOR0 {20} \
+   CONFIG.PCW_UART_PERIPHERAL_FREQMHZ {50} \
+   CONFIG.PCW_UART_PERIPHERAL_VALID {1} \
+   CONFIG.PCW_UIPARAM_ACT_DDR_FREQ_MHZ {533.333374} \
+   CONFIG.PCW_UIPARAM_DDR_ADV_ENABLE {0} \
+   CONFIG.PCW_UIPARAM_DDR_AL {0} \
+   CONFIG.PCW_UIPARAM_DDR_BANK_ADDR_COUNT {3} \
+   CONFIG.PCW_UIPARAM_DDR_BL {8} \
+   CONFIG.PCW_UIPARAM_DDR_BOARD_DELAY0 {0.41} \
+   CONFIG.PCW_UIPARAM_DDR_BOARD_DELAY1 {0.411} \
+   CONFIG.PCW_UIPARAM_DDR_BOARD_DELAY2 {0.341} \
+   CONFIG.PCW_UIPARAM_DDR_BOARD_DELAY3 {0.358} \
+   CONFIG.PCW_UIPARAM_DDR_BUS_WIDTH {32 Bit} \
+   CONFIG.PCW_UIPARAM_DDR_CL {7} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_0_LENGTH_MM {0} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_0_PACKAGE_LENGTH {61.0905} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_0_PROPOGATION_DELAY {160} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_1_LENGTH_MM {0} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_1_PACKAGE_LENGTH {61.0905} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_1_PROPOGATION_DELAY {160} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_2_LENGTH_MM {0} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_2_PACKAGE_LENGTH {61.0905} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_2_PROPOGATION_DELAY {160} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_3_LENGTH_MM {0} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_3_PACKAGE_LENGTH {61.0905} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_3_PROPOGATION_DELAY {160} \
+   CONFIG.PCW_UIPARAM_DDR_CLOCK_STOP_EN {0} \
+   CONFIG.PCW_UIPARAM_DDR_COL_ADDR_COUNT {10} \
+   CONFIG.PCW_UIPARAM_DDR_CWL {6} \
+   CONFIG.PCW_UIPARAM_DDR_DEVICE_CAPACITY {2048 MBits} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_0_LENGTH_MM {0} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_0_PACKAGE_LENGTH {68.4725} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_0_PROPOGATION_DELAY {160} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_1_LENGTH_MM {0} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_1_PACKAGE_LENGTH {71.086} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_1_PROPOGATION_DELAY {160} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_2_LENGTH_MM {0} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_2_PACKAGE_LENGTH {66.794} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_2_PROPOGATION_DELAY {160} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_3_LENGTH_MM {0} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_3_PACKAGE_LENGTH {108.7385} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_3_PROPOGATION_DELAY {160} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_TO_CLK_DELAY_0 {0.025} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_TO_CLK_DELAY_1 {0.028} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_TO_CLK_DELAY_2 {-0.009} \
+   CONFIG.PCW_UIPARAM_DDR_DQS_TO_CLK_DELAY_3 {-0.061} \
+   CONFIG.PCW_UIPARAM_DDR_DQ_0_LENGTH_MM {0} \
+   CONFIG.PCW_UIPARAM_DDR_DQ_0_PACKAGE_LENGTH {64.1705} \
+   CONFIG.PCW_UIPARAM_DDR_DQ_0_PROPOGATION_DELAY {160} \
+   CONFIG.PCW_UIPARAM_DDR_DQ_1_LENGTH_MM {0} \
+   CONFIG.PCW_UIPARAM_DDR_DQ_1_PACKAGE_LENGTH {63.686} \
+   CONFIG.PCW_UIPARAM_DDR_DQ_1_PROPOGATION_DELAY {160} \
+   CONFIG.PCW_UIPARAM_DDR_DQ_2_LENGTH_MM {0} \
+   CONFIG.PCW_UIPARAM_DDR_DQ_2_PACKAGE_LENGTH {68.46} \
+   CONFIG.PCW_UIPARAM_DDR_DQ_2_PROPOGATION_DELAY {160} \
+   CONFIG.PCW_UIPARAM_DDR_DQ_3_LENGTH_MM {0} \
+   CONFIG.PCW_UIPARAM_DDR_DQ_3_PACKAGE_LENGTH {105.4895} \
+   CONFIG.PCW_UIPARAM_DDR_DQ_3_PROPOGATION_DELAY {160} \
+   CONFIG.PCW_UIPARAM_DDR_DRAM_WIDTH {16 Bits} \
+   CONFIG.PCW_UIPARAM_DDR_ECC {Disabled} \
+   CONFIG.PCW_UIPARAM_DDR_ENABLE {1} \
+   CONFIG.PCW_UIPARAM_DDR_FREQ_MHZ {533.333313} \
+   CONFIG.PCW_UIPARAM_DDR_HIGH_TEMP {Normal (0-85)} \
+   CONFIG.PCW_UIPARAM_DDR_MEMORY_TYPE {DDR 3} \
+   CONFIG.PCW_UIPARAM_DDR_PARTNO {MT41J128M16 HA-15E} \
+   CONFIG.PCW_UIPARAM_DDR_ROW_ADDR_COUNT {14} \
+   CONFIG.PCW_UIPARAM_DDR_SPEED_BIN {DDR3_1066F} \
+   CONFIG.PCW_UIPARAM_DDR_TRAIN_DATA_EYE {1} \
+   CONFIG.PCW_UIPARAM_DDR_TRAIN_READ_GATE {1} \
+   CONFIG.PCW_UIPARAM_DDR_TRAIN_WRITE_LEVEL {1} \
+   CONFIG.PCW_UIPARAM_DDR_T_FAW {45.0} \
+   CONFIG.PCW_UIPARAM_DDR_T_RAS_MIN {36.0} \
+   CONFIG.PCW_UIPARAM_DDR_T_RC {49.5} \
+   CONFIG.PCW_UIPARAM_DDR_T_RCD {7} \
+   CONFIG.PCW_UIPARAM_DDR_T_RP {7} \
+   CONFIG.PCW_UIPARAM_DDR_USE_INTERNAL_VREF {1} \
+   CONFIG.PCW_USB0_PERIPHERAL_ENABLE {1} \
+   CONFIG.PCW_USB0_PERIPHERAL_FREQMHZ {60} \
+   CONFIG.PCW_USB0_RESET_ENABLE {0} \
+   CONFIG.PCW_USB0_USB0_IO {MIO 28 .. 39} \
+   CONFIG.PCW_USB1_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_USB1_PERIPHERAL_FREQMHZ {60} \
+   CONFIG.PCW_USB1_RESET_ENABLE {0} \
+   CONFIG.PCW_USB_RESET_ENABLE {1} \
+   CONFIG.PCW_USB_RESET_POLARITY {Active Low} \
+   CONFIG.PCW_USB_RESET_SELECT {Share reset pin} \
+   CONFIG.PCW_USE_AXI_NONSECURE {0} \
+   CONFIG.PCW_USE_CROSS_TRIGGER {0} \
+   CONFIG.PCW_USE_S_AXI_GP0 {0} \
+   CONFIG.PCW_USE_S_AXI_HP0 {1} \
+   CONFIG.PCW_WDT_PERIPHERAL_CLKSRC {CPU_1X} \
+   CONFIG.PCW_WDT_PERIPHERAL_DIVISOR0 {1} \
+   CONFIG.PCW_WDT_PERIPHERAL_ENABLE {0} \
+   CONFIG.PCW_WDT_PERIPHERAL_FREQMHZ {133.333333} \
+   CONFIG.preset {ZedBoard} \
+ ] $processing_system7_0
+
+  # Create instance: processing_system7_0_axi_periph, and set properties
+  set processing_system7_0_axi_periph [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect processing_system7_0_axi_periph ]
+  set_property -dict [ list \
+   CONFIG.NUM_MI {1} \
+ ] $processing_system7_0_axi_periph
+
+  # Create instance: rst_processing_system7_0_100M, and set properties
+  set rst_processing_system7_0_100M [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset rst_processing_system7_0_100M ]
+
+  # Create interface connections
+  connect_bd_intf_net -intf_net axi_mem_intercon_M00_AXI [get_bd_intf_pins axi_mem_intercon/M00_AXI] [get_bd_intf_pins processing_system7_0/S_AXI_HP0]
+  connect_bd_intf_net -intf_net memsec_0_m_axi [get_bd_intf_pins axi_mem_intercon/S00_AXI] [get_bd_intf_pins memsec_0/m_axi]
+  connect_bd_intf_net -intf_net processing_system7_0_DDR [get_bd_intf_ports DDR] [get_bd_intf_pins processing_system7_0/DDR]
+  connect_bd_intf_net -intf_net processing_system7_0_FIXED_IO [get_bd_intf_ports FIXED_IO] [get_bd_intf_pins processing_system7_0/FIXED_IO]
+  connect_bd_intf_net -intf_net processing_system7_0_M_AXI_GP0 [get_bd_intf_pins processing_system7_0/M_AXI_GP0] [get_bd_intf_pins processing_system7_0_axi_periph/S00_AXI]
+  connect_bd_intf_net -intf_net processing_system7_0_axi_periph_M00_AXI [get_bd_intf_pins memsec_0/s_axi] [get_bd_intf_pins processing_system7_0_axi_periph/M00_AXI]
+
+  # Create port connections
+  connect_bd_net -net processing_system7_0_FCLK_CLK0 [get_bd_pins axi_mem_intercon/ACLK] [get_bd_pins axi_mem_intercon/M00_ACLK] [get_bd_pins axi_mem_intercon/S00_ACLK] [get_bd_pins memsec_0/m_axi_aclk] [get_bd_pins memsec_0/s_axi_aclk] [get_bd_pins processing_system7_0/FCLK_CLK0] [get_bd_pins processing_system7_0/M_AXI_GP0_ACLK] [get_bd_pins processing_system7_0/S_AXI_HP0_ACLK] [get_bd_pins processing_system7_0_axi_periph/ACLK] [get_bd_pins processing_system7_0_axi_periph/M00_ACLK] [get_bd_pins processing_system7_0_axi_periph/S00_ACLK] [get_bd_pins rst_processing_system7_0_100M/slowest_sync_clk]
+  connect_bd_net -net processing_system7_0_FCLK_RESET0_N [get_bd_pins processing_system7_0/FCLK_RESET0_N] [get_bd_pins rst_processing_system7_0_100M/ext_reset_in]
+  connect_bd_net -net rst_processing_system7_0_100M_interconnect_aresetn [get_bd_pins axi_mem_intercon/ARESETN] [get_bd_pins processing_system7_0_axi_periph/ARESETN] [get_bd_pins rst_processing_system7_0_100M/interconnect_aresetn]
+  connect_bd_net -net rst_processing_system7_0_100M_peripheral_aresetn [get_bd_pins axi_mem_intercon/M00_ARESETN] [get_bd_pins axi_mem_intercon/S00_ARESETN] [get_bd_pins memsec_0/m_axi_aresetn] [get_bd_pins memsec_0/s_axi_aresetn] [get_bd_pins processing_system7_0_axi_periph/M00_ARESETN] [get_bd_pins processing_system7_0_axi_periph/S00_ARESETN] [get_bd_pins rst_processing_system7_0_100M/peripheral_aresetn]
+
+  # Create address segments
+  create_bd_addr_seg -range 0x20000000 -offset 0x00000000 [get_bd_addr_spaces memsec_0/m_axi] [get_bd_addr_segs processing_system7_0/S_AXI_HP0/HP0_DDR_LOWOCM] SEG_processing_system7_0_HP0_DDR_LOWOCM
+  create_bd_addr_seg -range 0x40000000 -offset 0x40000000 [get_bd_addr_spaces processing_system7_0/Data] [get_bd_addr_segs memsec_0/s_axi/reg0] SEG_memsec_0_reg0
+
+
+  # Restore current instance
+  current_bd_instance $oldCurInst
+
+  save_bd_design
+}
+# End of create_root_design()
+
+
+##################################################################
+# MAIN FLOW
+##################################################################
+
+create_root_design ""
+
+
diff --git a/fpga/src/memsec/flow/binary_directory_defines.mk b/fpga/src/memsec/flow/binary_directory_defines.mk
new file mode 100644
index 0000000..f2feebb
--- /dev/null
+++ b/fpga/src/memsec/flow/binary_directory_defines.mk
@@ -0,0 +1,131 @@
+#
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+# default binary root directory configuration
+FLOW_BINARY_ROOT_DIR ?= $(shell pwd)
+override FLOW_BINARY_ROOT_DIR := $(abspath ${FLOW_BINARY_ROOT_DIR})
+ifeq (${FLOW_SOURCE_DIR},${FLOW_BINARY_ROOT_DIR})
+override FLOW_BINARY_ROOT_DIR := ${FLOW_SOURCE_DIR}/_build
+endif # FLOW_SOURCE_DIR equal to FLOW_BINARY_ROOT_DIR
+
+DEFAULT_INFO_VARS := FLOW_BACKEND \
+                     FLOW_BACKENDS \
+                     FLOW_BINARY_ROOT_DIR \
+                     FLOW_DIR \
+                     FLOW_FULL_DEPENDENCIES \
+                     FLOW_MODULE \
+                     FLOW_MODULES \
+                     FLOW_SOURCE_DIR \
+                     FLOW_SOURCE_SCRIPT
+
+HIDDEN_INFO_VARS :=  FLOW_FULL_DEPENDENCY_DIRS \
+                     FLOW_VERBOSITY
+
+# setup default settings for the standard properties
+# FLOW_BINARY_DIR       Absolute path to the directory where the module will
+#                       be built and simulated.
+# FLOW_DEPENDENCIES     List of modules on which the current module depends.
+# FLOW_FILES            List of absolute paths to non-HDL files of the module.
+# FLOW_HDL_FILES        List of absolute paths to the HDL files of the module.
+# FLOW_HDL_TOP          Name of the TOP entitiy of the module.
+# FLOW_LIBRARY_NAME     Name of the library into which the module should be
+#                       built.
+# FLOW_SIM_DEPENDENCIES List of modules solely the simulation depends on.
+# FLOW_SIM_FILES        List of absolute paths to support files needed for
+#                       simulating the module. By default, the files are copied
+#                       into the FLOW_BINARY_DIR before starting the simulation.
+#                       However, when needed the destination can be overwritten
+#                       using a <srcfile>:<destfile> syntax. If <destfile> ends
+#                       with / then it is considered as directory.
+# FLOW_SIM_HDL_FILES    List of absolute paths to the HDL files needed for
+#                       simulating the module.
+# FLOW_SIM_RESULT_FILE  Absolute path to the file which contains the test
+#                       result. For determining the result FLOW_SIM_RESULT_REGEX
+#                       is matched against the content. If the file does not
+#                       exist a timeout is reported. If no file is specified,
+#                       stdout of the simulation command is matched instead.
+# FLOW_SIM_RESULT_REGEX The regex which is matched against the test output.
+# FLOW_SIM_RESULT_RULE  Defines how the simulation result is determined.
+#                       At the moment "file-success", "file-failure", and
+#                       "sim-return" are supported. Both file modes
+#                       match FLOW_SIM_RESULT_REGEX on FLOW_SIM_RESULT_FILE to
+#                       determine success or failure. "sim-return", on the other
+#                       hand simply uses the simulator return value as result
+#                       (0 is success).
+# FLOW_SIM_TIME         Defines how long the simulation is executed.
+# FLOW_SIM_TOP          Name of the TOP entitiy for simulating the module.
+
+#
+# TODO support relative paths for the FILES and DIR properties in the future
+STANDARD_MODULE_PROPERTIES := FLOW_BINARY_DIR \
+                              FLOW_DEPENDENCIES \
+                              FLOW_FILES \
+                              FLOW_HDL_FILES \
+                              FLOW_HDL_TOP \
+                              FLOW_LIBRARY_NAME \
+                              FLOW_SIM_DEPENDENCIES \
+                              FLOW_SIM_FILES \
+                              FLOW_SIM_HDL_FILES \
+                              FLOW_SIM_RESULT_FILE \
+                              FLOW_SIM_RESULT_REGEX \
+                              FLOW_SIM_RESULT_RULE \
+                              FLOW_SIM_TIME \
+                              FLOW_SIM_TOP
+
+FLOW_ROOT_MODULE ?= ${FLOW_MODULE}
+ifneq (${FLOW_MODULE},${FLOW_ROOT_MODULE})
+# Define a function that either undefines a value or sets it to empty
+# if the make version is to old.
+MAKE_VER_MAJOR := $(shell echo $(MAKE_VERSION) | cut -f1 -d.)
+MAKE_VER_MINOR := $(shell echo $(MAKE_VERSION) | cut -f2 -d.)
+MAKE_GTE_3_82 := $(shell [ $(MAKE_VER_MAJOR) -gt 3 -o \( $(MAKE_VER_MAJOR) -eq 3 -a $(MAKE_VER_MINOR) -ge 82 \) ] && echo true)
+ifeq ($(MAKE_GTE_3_82),true)
+  define undefineFunc
+    $(eval override undefine $1)
+  endef
+else
+  define undefineFunc
+    $(eval $1 := )
+  endef
+endif
+
+# clear all flow vars which can be set later on and only keep those which
+# have already sensible values or are save to propagate
+WHITELISTED_VARS := FLOW_BACKEND \
+                    FLOW_BINARY_ROOT_DIR \
+                    FLOW_DIR \
+                    FLOW_MODULE \
+                    FLOW_ROOT_MODULE \
+                    FLOW_SOURCE_DIR \
+                    FLOW_SOURCE_SCRIPT \
+                    FLOW_VERBOSITY \
+                    FLOW_VIVADO_BINARY \
+                    FLOW_VIVADO_ROOT_RECIPE
+
+VIVADO_VARS := $(filter FLOW_VIVADO_%,$(.VARIABLES))
+CLEAR_VARS := $(filter-out ${WHITELISTED_VARS},${DEFAULT_INFO_VARS} ${HIDDEN_INFO_VARS} ${STANDARD_MODULE_PROPERTIES} ${CUSTOM_MODULE_PROPERTIES} ${VIVADO_VARS})
+unexport ${CLEAR_VARS}
+$(foreach var,${CLEAR_VARS},$(eval $(call undefineFunc,${var})))
+
+# clear all generics
+CLEAR_VARS  := $(filter GENERIC_%,$(.VARIABLES))
+unexport ${CLEAR_VARS}
+$(foreach var,${CLEAR_VARS},$(eval $(call undefineFunc,${var})))
+endif # FLOW_MODULE not empty
diff --git a/fpga/src/memsec/flow/default.mk b/fpga/src/memsec/flow/default.mk
new file mode 100644
index 0000000..884044a
--- /dev/null
+++ b/fpga/src/memsec/flow/default.mk
@@ -0,0 +1,176 @@
+#
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+# (re)export all FLOW and GENERIC variables into the environment for the use in the sh and tcl files
+GENERICS  := $(filter GENERIC_%,$(.VARIABLES))
+FLOW_VARS := $(filter FLOW_%,$(.VARIABLES))
+export ${GENERICS}
+export ${FLOW_VARS}
+
+OTHER_FLOW_VARS := $(filter-out ${DEFAULT_INFO_VARS} ${HIDDEN_INFO_VARS} ${STANDARD_MODULE_PROPERTIES} ${BACKEND_INFO_VARS},${FLOW_VARS})
+
+# assert that a default backend exists
+ifndef FLOW_BACKEND
+$(error No FLOW_BACKEND backend has been found! Make sure that the necessary EDA tools are installed.)
+endif
+
+# aliases for the backend specific targets
+.PHONY: project hdlsb hdlsg synthcb implcb
+project: ${FLOW_BACKEND}_project
+hdlsb: ${FLOW_BACKEND}_hdlsb
+hdlsg: ${FLOW_BACKEND}_hdlsg
+synthcb: ${FLOW_BACKEND}_synthcb
+implcb: ${FLOW_BACKEND}_implcb
+
+.PHONY: info
+info:
+	@$(call printStep,"### ${FLOW_MODULE}: calling $@")
+ifdef VERBOSE
+	@echo "Directory configuration:"
+	@echo "FLOW_DIR:        ${FLOW_DIR}"
+	@echo "BINARY_DIR:      ${FLOW_BINARY_DIR}"
+	@echo "BINARY_ROOT_DIR: ${FLOW_BINARY_ROOT_DIR}"
+	@echo "SOURCE_DIR:      ${FLOW_SOURCE_DIR}"
+	@echo "SOURCE_SCRIPT:   ${FLOW_SOURCE_SCRIPT}"
+	@echo ""
+	@echo "Available Backends:"
+	@$(foreach var,$(sort ${FLOW_BACKENDS}),echo "    ${var}";)
+	@echo ""
+	@echo "Available modules:"
+	@$(foreach var,$(sort ${FLOW_MODULES}),echo "    ${var}";)
+	@echo ""
+endif # VERBOSE
+	@echo "FLOW_BACKEND:           ${FLOW_BACKEND}"
+	@echo "FLOW_MODULE:            ${FLOW_MODULE}"
+ifdef FLOW_HDL_TOP
+	@echo "FLOW_HDL_TOP:           ${FLOW_HDL_TOP}"
+endif # FLOW_HDL_TOP
+ifdef FLOW_SIM_TOP
+	@echo "FLOW_SIM_TOP:           ${FLOW_SIM_TOP}"
+endif # FLOW_SIM_TOP
+ifdef FLOW_LIBRARY_NAME
+	@echo "FLOW_LIBRARY_NAME:      ${FLOW_LIBRARY_NAME}"
+endif # FLOW_LIBRARY_NAME
+ifdef FLOW_DEPENDENCIES
+	@echo "FLOW_DEPENDENCIES:      ${FLOW_DEPENDENCIES}"
+endif # FLOW_DEPENDENCIES
+ifdef FLOW_SIM_DEPENDENCIES
+	@echo "FLOW_SIM_DEPENDENCIES:  ${FLOW_SIM_DEPENDENCIES}"
+endif # FLOW_SIM_DEPENDENCIES
+ifdef FLOW_FULL_DEPENDENCIES
+	@echo "FLOW_FULL_DEPENDENCIES: ${FLOW_FULL_DEPENDENCIES}"
+endif # FLOW_FULL_DEPENDENCIES
+ifdef FLOW_SIM_RESULT_FILE
+	@echo "FLOW_SIM_RESULT_FILE:   ${FLOW_SIM_RESULT_FILE}"
+endif # FLOW_SIM_RESULT_FILE
+ifdef FLOW_SIM_RESULT_REGEX
+	@echo "FLOW_SIM_RESULT_REGEX:  ${FLOW_SIM_RESULT_REGEX}"
+endif # FLOW_SIM_RESULT_REGEX
+ifdef FLOW_SIM_RESULT_RULE
+	@echo "FLOW_SIM_RESULT_RULE:   ${FLOW_SIM_RESULT_RULE}"
+endif # FLOW_SIM_RESULT_RULE
+ifdef FLOW_SIM_TIME
+	@echo "FLOW_SIM_TIME:          ${FLOW_SIM_TIME}"
+endif # FLOW_SIM_TIME
+ifdef VERBOSE
+	@echo ""
+ifdef FLOW_FULL_DEPENDENCY_DIRS
+	@echo "FLOW_FULL_DEPENDENCY_DIRS: ${FLOW_FULL_DEPENDENCY_DIRS}"
+endif # FLOW_FULL_DEPENDENCY_DIRS
+ifdef FLOW_FILES
+	@echo ""
+	@echo "Files: (FLOW_FILES)"
+	@$(foreach var,$(sort ${FLOW_FILES}),echo "    ${var}";)
+endif # FLOW_FILES
+ifdef FLOW_HDL_FILES
+	@echo ""
+	@echo "HDL files: (FLOW_HDL_FILES)"
+	@$(foreach var,$(sort ${FLOW_HDL_FILES}),echo "    ${var}";)
+endif # FLOW_HDL_FILES
+ifdef FLOW_SIM_FILES
+	@echo ""
+	@echo "SIML files: (FLOW_SIM_FILES)"
+	@$(foreach var,$(sort ${FLOW_SIM_FILES}),echo "    ${var}";)
+endif # FLOW_SIM_FILES
+ifdef FLOW_SIM_HDL_FILES
+	@echo ""
+	@echo "SIM_HDL files: (FLOW_SIM_HDL_FILES)"
+	@$(foreach var,$(sort ${FLOW_SIM_HDL_FILES}),echo "    ${var}";)
+endif # FLOW_SIM_HDL_FILES
+endif # VERBOSE
+ifdef GENERICS
+	@echo ""
+	@echo "Overwritten generics: (GENERIC_*)"
+	@$(foreach var,$(sort ${GENERICS}),echo "    $(subst GENERIC_,,${var})=${${var}}";)
+endif # GENERICS
+ifdef BACKEND_INFO_VARS
+	@echo ""
+	@echo "Backend specific variables:"
+	@$(foreach var,$(sort ${BACKEND_INFO_VARS}),echo "    ${var}=${${var}}";)
+endif # BACKEND_INFO_VARS
+ifdef OTHER_FLOW_VARS
+	@echo ""
+	@echo "Other variables: (FLOW_*)"
+	@$(foreach var,$(sort ${OTHER_FLOW_VARS}),echo "    ${var}=${${var}}";)
+endif # OTHER_FLOW_VARS
+	@echo ""
+ifeq (${FLOW_VERBOSITY},3)
+	@$(foreach module,$(FLOW_FULL_DEPENDENCIES),$(call makeTarget,FLOW_MODULE=$(module) FLOW_VERBOSITY=2 $@);)
+endif
+
+.PHONY: help
+help:
+	@echo "Usage: make <target> [FLOW_MODULE=<module>] [additional options]"
+	@echo ""
+	@echo "Available modules: (selected \"${FLOW_MODULE}\")"
+	@$(foreach var,$(sort ${FLOW_MODULES}),echo "    ${var}";)
+	@echo ""
+	@echo "Common targets:"
+	@echo "    clean.............Delete the binary directory of the module."
+	@echo "    distclean.........Delete the binary root directory."
+	@echo "    info [VERBOSE=1]..Print information about the module and the flow."
+	@echo "    project...........Generate a project for the module into the binary directory."
+	@echo ""
+	@echo "    hdlsb.............Simulate the module (batch mode)."
+	@echo "    hdlsg.............Simulate the module (GUI)."
+	@echo ""
+	@echo "    synthcb...........Synthesize the module (batch mode)."
+	@echo ""
+	@echo "    implcb............Implement the module (batch mode)."
+ifdef BACKEND_HELP_TEXT
+	@echo ""
+	@echo "Backend specific targets:"
+	@$(foreach var,$(sort ${BACKEND_HELP_TEXT}),echo "    $(subst +,${space},${var})";)
+endif # BACKEND_HELP_TEXT
+	@echo ""
+
+.PHONY: clean
+clean:
+	@$(call printStep,"### ${FLOW_MODULE}: removing the binary directory of the module")
+	@$(call printStep,"$$ rm -rf ${FLOW_BINARY_DIR}")
+	@rm -rf ${FLOW_BINARY_DIR}
+	@$(call printStep,"")
+
+.PHONY: distclean
+distclean:
+	@$(call printStep,"### removing all binary directories")
+	@$(call printStep,"$$ rm -rf ${FLOW_BINARY_ROOT_DIR}")
+	@rm -rf ${FLOW_BINARY_ROOT_DIR}
+	@$(call printStep,"")
diff --git a/fpga/src/memsec/flow/ghdl.mk b/fpga/src/memsec/flow/ghdl.mk
new file mode 100644
index 0000000..884a0c5
--- /dev/null
+++ b/fpga/src/memsec/flow/ghdl.mk
@@ -0,0 +1,110 @@
+#
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+# check if ghdl is available
+FLOW_GHDL_BINARY ?= $(shell which ghdl)
+ifneq (${FLOW_GHDL_BINARY},)
+FLOW_BACKEND  ?= ghdl
+FLOW_BACKENDS += ghdl
+
+ifeq (${FLOW_BACKEND},ghdl)
+###############################################################################
+# Backend specific variables
+###############################################################################
+FLOW_GTKWAVE_BINARY ?= $(shell which gtkwave)
+FLOW_LCOV_BINARY ?= $(shell which lcov)
+FLOW_GENHTML_BINARY ?= $(shell which genhtml)
+
+FLOW_GHDL_GCC ?= $(shell ! ${FLOW_GHDL_BINARY} -v | grep -q "GCC back-end code generator"; echo $$?)
+
+# Additional flags that are passed to ghdl during project generation
+# (i.e., in the analysis and elaboration phase).
+ifeq (${FLOW_GHDL_GCC},1)
+FLOW_GHDL_CFLAGS += -Wc,-ftest-coverage -Wc,-fprofile-arcs -Wl,--coverage
+endif
+
+# Additional flags that are passed to ghdl during simulation
+# (i.e., in the run phase).
+FLOW_GHDL_RFLAGS ?= --ieee-asserts=disable-at-0
+
+# define which variables should be shown on the info screen
+BACKEND_INFO_VARS += $(filter FLOW_GHDL_%,$(.VARIABLES)) FLOW_GTKWAVE_BINARY FLOW_LCOV_BINARY FLOW_GENHTML_BINARY
+
+###############################################################################
+# Backend specific targets
+###############################################################################
+
+.PHONY: ghdl_project ghdl_subproject
+GHDL_PROJECT := ${FLOW_BINARY_DIR}/${FLOW_MODULE}-${FLOW_SIM_TOP}.stamp
+${GHDL_PROJECT}: ${FLOW_HDL_FILES} ${FLOW_SIM_HDL_FILES}
+	@mkdir -p ${FLOW_BINARY_DIR}
+	@cd ${FLOW_BINARY_DIR}; FLOW_LOG_FILE="${FLOW_BINARY_ROOT_DIR}/${FLOW_MODULE}_${FLOW_SIM_TOP}_project.log" bash ${FLOW_DIR}/ghdl/project.sh
+	@touch $@
+
+ghdl_project:
+	@$(call printStep,"### ${FLOW_MODULE}: processing dependencies")
+	@$(foreach entry,$(FLOW_SIM_FILES),mkdir -p $(dir $(lastword $(subst :, ,$(entry)))) && cp $(firstword $(subst :, ,$(entry))) $(lastword $(subst :, ,$(entry)));)
+	@$(foreach module,$(FLOW_FULL_DEPENDENCIES),$(call makeTarget,FLOW_MODULE=$(module) ghdl_subproject);)
+	@$(call printStep,"### ${FLOW_MODULE}: configuring as top-level project")
+	@$(call makeTarget,$(GHDL_PROJECT))
+	@$(call printStep,"")
+
+ghdl_subproject:
+	@$(call printStep,"### ${FLOW_MODULE}: configuring as sub project")
+	@$(call makeTarget,$(GHDL_PROJECT))
+	@$(call printStep,"")
+
+.PHONY: ghdl_hdlsb
+ghdl_hdlsb: ghdl_project
+	@$(call printStep,"### ${FLOW_MODULE}: simulating in batch mode")
+	@cd ${FLOW_BINARY_DIR}; FLOW_LOG_FILE="${FLOW_BINARY_ROOT_DIR}/${FLOW_MODULE}_${FLOW_SIM_TOP}_simulation.log" bash ${FLOW_DIR}/ghdl/run_simulation.sh
+	@$(call printStep,"")
+
+.PHONY: ghdl_hdlsg
+ghdl_hdlsg: ghdl_project
+	@$(call printStep,"### ${FLOW_MODULE}: simulating in graphical mode")
+	@cd ${FLOW_BINARY_DIR}; FLOW_LOG_FILE="${FLOW_BINARY_ROOT_DIR}/${FLOW_MODULE}_${FLOW_SIM_TOP}_simulation.log" FLOW_GTKWAVE_GUI=1 bash ${FLOW_DIR}/ghdl/run_simulation.sh
+	@$(call printStep,"")
+
+.PHONY: ghdl_synthcb
+ghdl_synthcb:
+	@echo "Synthesis is not supported by GHDL!"
+	@exit 1
+
+.PHONY: ghdl_implcb
+ghdl_implcb:
+	@echo "Implementation is not supported by GHDL!"
+	@exit 1
+
+ifeq (${FLOW_GHDL_GCC},1)
+BACKEND_HELP_TEXT += $(subst ${space},+,"ghdl_covReset.....Reset the coverage counters.")
+BACKEND_HELP_TEXT += $(subst ${space},+,"ghdl_covGenerate..Generate coverage report.")
+.PHONY: ghdl_covReset ghdl_covGenerate
+ghdl_covReset:
+	@${FLOW_LCOV_BINARY} -z -d ${FLOW_BINARY_DIR}
+
+ghdl_covGenerate:
+	@${FLOW_LCOV_BINARY} -c -d ${FLOW_BINARY_DIR} -o ${FLOW_BINARY_DIR}/coverage.info
+	@${FLOW_LCOV_BINARY} --remove ${FLOW_BINARY_DIR}/coverage.info '${FLOW_BINARY_DIR}/e~*' -o ${FLOW_BINARY_DIR}/coverage.info
+	@cd ${FLOW_BINARY_DIR}; ${FLOW_GENHTML_BINARY} coverage.info -o html
+endif
+
+endif # FLOW_BACKEND is ghdl
+endif # FLOW_GHDL_BINARY not empty
diff --git a/fpga/src/memsec/flow/ghdl/project.sh b/fpga/src/memsec/flow/ghdl/project.sh
new file mode 100644
index 0000000..214dd28
--- /dev/null
+++ b/fpga/src/memsec/flow/ghdl/project.sh
@@ -0,0 +1,54 @@
+#!/bin/bash
+#
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+#
+shopt -s expand_aliases
+PWD=$(pwd)
+DATE=$(date)
+
+# define the log command which writes to the logfile and possibly to stdout
+if [ ${FLOW_VERBOSITY} -ge 2 ]; then
+  alias log='tee -a "${FLOW_LOG_FILE}"'
+else
+  alias log='cat >> "${FLOW_LOG_FILE}"'
+fi
+
+echo "" >> "${FLOW_LOG_FILE}"
+echo "###############################################################################" >> "${FLOW_LOG_FILE}"
+echo "# ${DATE}" >> "${FLOW_LOG_FILE}"
+echo "###############################################################################" >> "${FLOW_LOG_FILE}"
+echo "\$ cd ${PWD}" 2>&1 | log
+
+# generate the ghdl command line flags
+GHDL_COMPILE_OPTIONS=""
+if [ -n "${FLOW_LIBRARY_NAME}" ]; then
+  GHDL_COMPILE_OPTIONS="${GHDL_COMPILE_OPTIONS} --work=${FLOW_LIBRARY_NAME}"
+fi
+
+# add the directories of all dependencies to the compile options
+for I in ${FLOW_FULL_DEPENDENCY_DIRS}
+do
+  GHDL_COMPILE_OPTIONS="${GHDL_COMPILE_OPTIONS} -P${I}"
+done
+
+echo "\$ ${FLOW_GHDL_BINARY} -i ${GHDL_COMPILE_OPTIONS} ${FLOW_HDL_FILES} ${FLOW_SIM_HDL_FILES}" 2>&1 | log
+${FLOW_GHDL_BINARY} -i ${GHDL_COMPILE_OPTIONS} ${FLOW_HDL_FILES} ${FLOW_SIM_HDL_FILES} 2>&1 | log
+RETURN_VALUE=${PIPESTATUS[0]}
+
+exit $RETURN_VALUE
diff --git a/fpga/src/memsec/flow/ghdl/run_simulation.sh b/fpga/src/memsec/flow/ghdl/run_simulation.sh
new file mode 100644
index 0000000..f15d2d0
--- /dev/null
+++ b/fpga/src/memsec/flow/ghdl/run_simulation.sh
@@ -0,0 +1,163 @@
+#!/bin/bash
+#
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+#
+shopt -s expand_aliases
+PWD=$(pwd)
+DATE=$(date)
+
+# define the log command which writes to the logfile and possibly to stdout
+if [ ${FLOW_VERBOSITY} -ge 2 ]; then
+  alias log='tee -a "${FLOW_LOG_FILE}"'
+else
+  alias log='cat >> "${FLOW_LOG_FILE}"'
+fi
+
+echo "" >> "${FLOW_LOG_FILE}"
+echo "###############################################################################" >> "${FLOW_LOG_FILE}"
+echo "# ${DATE}" >> "${FLOW_LOG_FILE}"
+echo "###############################################################################" >> "${FLOW_LOG_FILE}"
+echo "\$ cd ${PWD}" 2>&1 | log
+
+if [ -z "${FLOW_SIM_TOP}" ]; then
+  echo "No top module defined. Simulation not possible!"
+  exit 1
+fi
+
+# add the directories of all dependencies to the compile options
+GHDL_COMPILE_OPTIONS="${FLOW_GHDL_CFLAGS}"
+for I in ${FLOW_FULL_DEPENDENCY_DIRS}
+do
+  GHDL_COMPILE_OPTIONS="${GHDL_COMPILE_OPTIONS} -P${I}"
+done
+
+# Analyse and elaborate the design
+echo "\$ ${FLOW_GHDL_BINARY} -m ${GHDL_COMPILE_OPTIONS} ${FLOW_SIM_TOP}" 2>&1 | log
+${FLOW_GHDL_BINARY} -m ${GHDL_COMPILE_OPTIONS} ${FLOW_SIM_TOP} 2>&1 | log
+RETURN_VALUE=${PIPESTATUS[0]}
+if [ $RETURN_VALUE -ne "0" ]; then
+  exit $RETURN_VALUE
+fi
+
+# generate the ghdl command line flags
+GHDL_RUN_OPTIONS="${FLOW_GHDL_RFLAGS} --stop-time=${FLOW_SIM_TIME}"
+if [ "1" = "${FLOW_GTKWAVE_GUI}" ] || [ "1" = "${FLOW_WRITE_GHW}" ]; then
+  GHDL_RUN_OPTIONS="${GHDL_RUN_OPTIONS} --wave=${FLOW_SIM_TOP}.ghw"
+fi
+if [ "1" = "${FLOW_WRITE_VCD}" ]; then
+  GHDL_RUN_OPTIONS="${GHDL_RUN_OPTIONS} --vcd=${FLOW_SIM_TOP}.vcd"
+fi
+
+case ${FLOW_SIM_RESULT_RULE} in
+  file-*)
+  # set the result file to the log file if it is undefined
+  if [ -z "${FLOW_SIM_RESULT_FILE}" ]; then
+    FLOW_SIM_RESULT_FILE="${FLOW_MODULE}_${FLOW_SIM_TOP}_latest_simulation.log"
+  fi
+  # delete the result file if it is used and already exists
+  if [ -f ${FLOW_SIM_RESULT_FILE} ]; then
+    echo "\$ rm ${FLOW_SIM_RESULT_FILE}" 2>&1 | log
+    rm ${FLOW_SIM_RESULT_FILE} 2>&1 | log
+  fi
+  ;;
+esac
+
+# convert the generics into ghdl options
+GENERICS=$(env | grep -e "^GENERIC_" | xargs)
+for I in ${GENERICS}
+do
+  GHDL_RUN_OPTIONS="${GHDL_RUN_OPTIONS} -g${I#GENERIC_}"
+done
+
+# run the simulation
+echo "\$ ${FLOW_GHDL_BINARY} -r ${GHDL_COMPILE_OPTIONS} ${FLOW_SIM_TOP} ${GHDL_RUN_OPTIONS}" 2>&1 | log
+${FLOW_GHDL_BINARY} -r ${GHDL_COMPILE_OPTIONS} ${FLOW_SIM_TOP} ${GHDL_RUN_OPTIONS} 2>&1 | tee "${FLOW_MODULE}_${FLOW_SIM_TOP}_latest_simulation.log" | log
+RETURN_VALUE=${PIPESTATUS[0]}
+if [ $RETURN_VALUE -ne "0" ] && [ "sim-return" = "${FLOW_SIM_RESULT_RULE}" ]; then
+  echo "RESULT: Simulation failed. Simulator exited with return value \"${RETURN_VALUE}\"." 2>&1 | log
+  exit $RETURN_VALUE
+fi
+
+# determine the exit code of the simulation
+case ${FLOW_SIM_RESULT_RULE} in
+  file-success)
+  EXIT_CODE=1
+  # check if the result file exists and check its contents
+  if [ -f ${FLOW_SIM_RESULT_FILE} ]; then
+    COMP=$(cat "${FLOW_SIM_RESULT_FILE}" | grep -Eq  "${FLOW_SIM_RESULT_REGEX}"; echo $?)
+    if [ $COMP -eq "0" ]; then
+      echo "RESULT: Simulation succeeded." 2>&1 | log
+      EXIT_CODE=0
+    else
+      echo "RESULT: Simulation failed." 2>&1 | log
+    fi
+  else
+    echo "RESULT: Timeout. Result file \"${FLOW_SIM_RESULT_FILE}\" not found." 2>&1 | log
+    EXIT_CODE=2
+  fi
+  ;;
+
+  file-failure)
+  EXIT_CODE=0
+  # check if the result file exists and check its contents
+  if [ -f ${FLOW_SIM_RESULT_FILE} ]; then
+    COMP=$(cat "${FLOW_SIM_RESULT_FILE}" | grep -Eq  "${FLOW_SIM_RESULT_REGEX}"; echo $?)
+    if [ $COMP -eq "0" ]; then
+      echo "RESULT: Simulation failed." 2>&1 | log
+      EXIT_CODE=1
+    else
+      echo "RESULT: Simulation succeeded." 2>&1 | log
+    fi
+  else
+    echo "RESULT: Timeout. Result file \"${FLOW_SIM_RESULT_FILE}\" not found." 2>&1 | log
+    EXIT_CODE=2
+  fi
+  ;;
+
+  sim-return)
+  ;;
+
+  *)
+  echo "ERROR: unsupported RESULT_RULE '${FLOW_SIM_RESULT_RULE}' used" 2>&1 | log
+  EXIT_CODE=1
+  ;;
+esac
+
+# launch gtkwave if requested
+if [ "1" = "${FLOW_GTKWAVE_GUI}" ]; then
+  if [ "" = "${FLOW_GTKWAVE_BINARY}" ]; then
+    echo "" 2>&1 | log
+    echo "ERROR: gtkwave has not been found, consider opening the ghw file manually" 2>&1 | log
+    echo "ERROR: ghw-file: ${FLOW_BINARY_DIR}/${FLOW_SIM_TOP}.ghw" 2>&1 | log
+    echo "" 2>&1 | log
+  else
+    GTKWAVE_RUN_OPTIONS="${FLOW_SIM_TOP}.ghw"
+    if [ -f "${FLOW_SIM_TOP}.sav" ]; then
+      GTKWAVE_RUN_OPTIONS="${GTKWAVE_RUN_OPTIONS} ${FLOW_SIM_TOP}.sav"
+    fi
+    if [ -f "${FLOW_SIM_TOP}.gtkw" ]; then
+      GTKWAVE_RUN_OPTIONS="${FLOW_SIM_TOP}.gtkw"
+    fi
+
+    echo "\$ ${FLOW_GTKWAVE_BINARY} ${GTKWAVE_RUN_OPTIONS} &" 2>&1 | log
+    ${FLOW_GTKWAVE_BINARY} ${GTKWAVE_RUN_OPTIONS} 2>&1 | log &
+  fi
+fi
+
+exit ${EXIT_CODE}
diff --git a/fpga/src/memsec/flow/global_defines.mk b/fpga/src/memsec/flow/global_defines.mk
new file mode 100644
index 0000000..30cc33f
--- /dev/null
+++ b/fpga/src/memsec/flow/global_defines.mk
@@ -0,0 +1,94 @@
+#
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+#
+
+# helpers for escaping spaces (used in the BACKEND_HELP_TEXT)
+empty :=
+space := $(empty) $(empty)
+
+${FLOW_MODULE}FLOW_SIM_TOP          ?= ${${FLOW_MODULE}FLOW_HDL_TOP}
+${FLOW_MODULE}FLOW_SIM_TIME         ?= 500us
+${FLOW_MODULE}FLOW_BINARY_DIR       ?= ${FLOW_BINARY_ROOT_DIR}/${FLOW_MODULE}
+${FLOW_MODULE}FLOW_SIM_RESULT_RULE  ?= sim-return
+$(foreach prop,${STANDARD_PROPERTIES},$(eval ${FLOW_MODULE}${prop} ?= ))
+
+# Overwrite variables by version which are prefixed with the module name,
+# Note that we override FLOW_BINARY_DIR first such that it is already usable
+# in other expansions,
+# e.g.: GENERIC_foobar := ${${FLOW_MODULE}GENERIC_foobar}
+NAMES := ${FLOW_MODULE}FLOW_BINARY_DIR
+$(foreach var,${NAMES},$(eval $(subst ${FLOW_MODULE},,${var}) := ${${var}}))
+NAMES := $(filter ${FLOW_MODULE}%,$(.VARIABLES))
+$(foreach var,${NAMES},$(eval $(subst ${FLOW_MODULE},,${var}) := ${${var}}))
+
+# Configure a verbosity level for the output
+# 0 ..... no output
+# 1 ..... output only the performed steps
+# 2 ..... (default) tool output in adition to the output of level 1
+# 3 ..... include all dependent modules in info and output of level 2
+FLOW_VERBOSITY ?= 2
+
+# if VERBOSITY is 0, steps are not printed and make is quiet
+define printStep
+endef
+define makeTarget
+  $(MAKE) --quiet --no-print-directory -f ${FLOW_SOURCE_SCRIPT} $1
+endef
+
+# otherwise steps get printed and make is less quiet
+ifneq (${FLOW_VERBOSITY},0)
+define printStep
+  echo $1
+endef
+define makeTarget
+  $(MAKE) --no-print-directory -f ${FLOW_SOURCE_SCRIPT} $1
+endef
+endif
+
+# calculate dependencies
+# TODO separate SIM dependencies into a extra hierarchy
+DEPENDENCIES_HIER1 := ${FLOW_DEPENDENCIES} ${FLOW_SIM_DEPENDENCIES}
+DEPENDENCIES_HIER2 := $(foreach m,$(DEPENDENCIES_HIER1),$($(m)FLOW_DEPENDENCIES))
+DEPENDENCIES_HIER3 := $(foreach m,$(DEPENDENCIES_HIER2),$($(m)FLOW_DEPENDENCIES))
+DEPENDENCIES_HIER4 := $(foreach m,$(DEPENDENCIES_HIER3),$($(m)FLOW_DEPENDENCIES))
+DEPENDENCIES_HIER5 := $(foreach m,$(DEPENDENCIES_HIER4),$($(m)FLOW_DEPENDENCIES))
+DEPENDENCIES_HIER6 := $(foreach m,$(DEPENDENCIES_HIER5),$($(m)FLOW_DEPENDENCIES))
+DEPENDENCIES_HIER7 := $(foreach m,$(DEPENDENCIES_HIER6),$($(m)FLOW_DEPENDENCIES))
+DEPENDENCIES_HIER8 := $(foreach m,$(DEPENDENCIES_HIER7),$($(m)FLOW_DEPENDENCIES))
+DEPENDENCIES_HIER9 := $(foreach m,$(DEPENDENCIES_HIER8),$($(m)FLOW_DEPENDENCIES))
+
+define uniq
+  $(eval seen :=)
+  $(foreach _,$1,$(if $(filter $_,${seen}),,$(eval seen += $_)))
+  ${seen}
+endef
+
+FLOW_FULL_DEPENDENCIES    := $(strip $(call uniq,$(foreach m,9 8 7 6 5 4 3 2 1,$(DEPENDENCIES_HIER$(m)))))
+FLOW_FULL_DEPENDENCY_DIRS := $(strip $(call uniq,$(foreach module, $(FLOW_FULL_DEPENDENCIES),$(if $($(module)FLOW_BINARY_DIR),$($(module)FLOW_BINARY_DIR),$(FLOW_BINARY_ROOT_DIR)/$(module)))))
+
+# normalize SIM_FILES format into the <srcfile>:<destfile> format from either
+# * <srcfile>
+# * <srcfile>:<destdir>
+# * <srcfile>:<destfile>
+par2Func = $(lastword $(subst :, ,$1))
+
+srcFunc         = $(firstword $(subst :, ,$1))
+srcFileNameFunc = $(notdir $(call srcFunc,$1))
+destFunc        = $(if $(findstring :,$1),$(if $(notdir $(call par2Func,$1)),$(call par2Func,$1),$(call par2Func,$1)$(call srcFileNameFunc,$1)),$(FLOW_BINARY_DIR)/$(call srcFileNameFunc,$1))
+FLOW_SIM_FILES := $(foreach entry,$(FLOW_SIM_FILES),$(call srcFunc,$(entry)):$(call destFunc,$(entry)))
diff --git a/fpga/src/memsec/hdl/crypto/aes/aes128_hs.vhdl b/fpga/src/memsec/hdl/crypto/aes/aes128_hs.vhdl
new file mode 100644
index 0000000..af1690f
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/aes/aes128_hs.vhdl
@@ -0,0 +1,60 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+
+entity aes128_hs is
+  port(
+    ClkxCI        : in  std_logic;
+    RstxRBI       : in  std_logic;
+    KeyxDI        : in  std_logic_vector(127 downto 0);
+    DataxDI       : in  std_logic_vector(127 downto 0);
+    DataxDO       : out std_logic_vector(127 downto 0);
+    EncryptxSI    : in  std_logic;
+
+    in_ready      : out std_logic;
+    in_valid      : in  std_logic;
+    out_ready     : in  std_logic;
+    out_valid     : out std_logic
+  );
+end aes128_hs;
+
+--! @FIXME replace with real implementation for aes128_hs
+architecture nop of aes128_hs is
+begin
+  data_reg : entity work.register_stage
+    generic map(
+      WIDTH      => 128,
+      REGISTERED => true
+      )
+    port map (
+      clk    => ClkxCI,
+      resetn => RstxRBI,
+
+      in_data  => DataxDI,
+      in_valid => in_valid,
+      in_ready => in_ready,
+
+      out_data  => DataxDO,
+      out_valid => out_valid,
+      out_ready => out_ready
+      );
+end nop;
diff --git a/fpga/src/memsec/hdl/crypto/ascon/LICENSE b/fpga/src/memsec/hdl/crypto/ascon/LICENSE
new file mode 100644
index 0000000..e06d208
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/ascon/LICENSE
@@ -0,0 +1,202 @@
+Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "{}"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright {yyyy} {name of copyright owner}
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
diff --git a/fpga/src/memsec/hdl/crypto/ascon/README.md b/fpga/src/memsec/hdl/crypto/ascon/README.md
new file mode 100644
index 0000000..1608bfc
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/ascon/README.md
@@ -0,0 +1,4 @@
+Generic Ascon VHDL implementation from <https://github.com/IAIK/ascon_hardware/tree/master/generic_implementation>.
+
+* `ascon_fast_core.vhdl` modified version of the original upstream implementation by Hannes Groß.
+* `ascon_spongewrap.vhdl` Ascon in a MAC mode.
diff --git a/fpga/src/memsec/hdl/crypto/ascon/ascon_fast_core.vhdl b/fpga/src/memsec/hdl/crypto/ascon/ascon_fast_core.vhdl
new file mode 100644
index 0000000..2560921
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/ascon/ascon_fast_core.vhdl
@@ -0,0 +1,343 @@
+-------------------------------------------------------------------------------
+-- Title      : A generic implementation of Ascon
+-- Project    : 
+-------------------------------------------------------------------------------
+-- File       : 
+-- Author     : Hannes Gross <hannes.gross@iaik.tugraz.at>
+-- Company    : 
+-- Created    : 2016-05-25
+-- Last update: 2016-06-14
+-- Platform   : 
+-- Standard   : VHDL'93/02
+-------------------------------------------------------------------------------
+-- Description: 
+-------------------------------------------------------------------------------
+-- Copyright 2014 Graz University of Technology
+--
+-- Licensed under the Apache License, Version 2.0 (the "License");
+-- you may not use this file except in compliance with the License.
+-- You may obtain a copy of the License at
+--
+--     http://www.apache.org/licenses/LICENSE-2.0
+--
+-- Unless required by applicable law or agreed to in writing, software
+-- distributed under the License is distributed on an "AS IS" BASIS,
+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+-- See the License for the specific language governing permissions and
+-- limitations under the License.
+-------------------------------------------------------------------------------
+-- Revisions  :
+-- Date        Version  Author           Description
+-- 2016-05-25  1.0      Hannes Gross     Created
+-- 2017-??-??  1.1      T. Unterluggauer Updated to Ascon 1.2 and removed bus
+--                                       interface for nonces
+-------------------------------------------------------------------------------
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+
+entity ascon is
+  generic (
+    UNROLED_ROUNDS  : integer := 1;  -- 1,2,3 or 6 for Ascon-128; 1,2,4 for Ascon-128a
+    DATA_BLOCK_SIZE : integer := 64;  -- 64 or 128, (selects between Ascon-128 and Ascon-128a)
+    ROUNDS_A        : integer := 12;    -- 12 for Ascon-128 and Ascon-128a
+    ROUNDS_B        : integer := 6;     -- 6 for Ascon-128, 8 for Ascon-128a
+    DATA_BUS_WIDTH  : integer := 64);  -- 64 or 128 (limits the max nonce size)
+  port (
+    ClkxCI             : in  std_logic;
+    RstxRBI            : in  std_logic;
+    KeyxDI             : in  std_logic_vector(127 downto 0);
+    CP_InitxSI         : in  std_logic;
+    CP_AssociatexSI    : in  std_logic;
+    CP_EncryptxSI      : in  std_logic;
+    CP_DecryptxSI      : in  std_logic;
+    CP_FinalEncryptxSI : in  std_logic;
+    CP_FinalDecryptxSI : in  std_logic;
+    DataWritexDI       : in  std_logic_vector(DATA_BUS_WIDTH-1 downto 0);
+    IODataxDO          : out std_logic_vector(DATA_BLOCK_SIZE-1 downto 0);
+    CP_DonexSO         : out std_logic;
+    TagxDO             : out std_logic_vector(127 downto 0)
+    );
+
+end entity ascon;
+
+architecture structural of ascon is
+  constant CONTROL_STATE_SIZE : integer := 4;
+  constant STATE_WORD_SIZE    : integer := 64;
+  constant KEY_SIZE           : integer := 128;
+
+  constant CONST_UNROLED_R : std_logic_vector(7 downto 0) := std_logic_vector(to_unsigned(UNROLED_ROUNDS, 8));
+  constant CONST_KEY_SIZE  : std_logic_vector(7 downto 0) := std_logic_vector(to_unsigned(KEY_SIZE, 8));
+  constant CONST_ROUNDS_A  : std_logic_vector(7 downto 0) := std_logic_vector(to_unsigned(ROUNDS_A, 8));
+  constant CONST_ROUNDS_B  : std_logic_vector(7 downto 0) := std_logic_vector(to_unsigned(ROUNDS_B, 8));
+  constant CONST_RATE      : std_logic_vector(7 downto 0) := std_logic_vector(to_unsigned(DATA_BLOCK_SIZE, 8));
+
+  signal State0xDP, State0xDN             : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+  signal State1xDP, State1xDN             : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+  signal State2xDP, State2xDN             : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+  signal State3xDP, State3xDN             : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+  signal State4xDP, State4xDN             : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+  signal ControlStatexDP, ControlStatexDN : std_logic_vector(CONTROL_STATE_SIZE-1 downto 0);
+
+  signal DP_ControlStatexD                                    : std_logic_vector(CONTROL_STATE_SIZE-1 downto 0);
+  signal DP_InitxS                                            : std_logic;
+  signal DP_XorZKeyxS                                         : std_logic;
+  signal DP_XorKeyZxS                                         : std_logic;
+  signal DP_XorZOnexS                                         : std_logic;
+  signal DP_EncryptxS                                         : std_logic;
+  signal DP_DecryptxS                                         : std_logic;
+  signal DP_AssociatexS                                       : std_logic;
+  signal CP_DonexS                                            : std_logic;
+  signal DP_RoundxSN, DP_RoundxSP                             : std_logic;
+  signal CP_FinalAssociatedDataxSN, CP_FinalAssociatedDataxSP : std_logic;
+
+  function ZEROS (
+    constant WIDTH : natural)
+    return std_logic_vector is
+    variable x : std_logic_vector(WIDTH-1 downto 0);
+  begin  -- ZEROS
+    x := (others => '0');
+    return x;
+  end ZEROS;
+
+  function ROTATE_STATE_WORD (
+    word            : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+    constant rotate : integer)
+    return std_logic_vector is
+    variable x : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+  begin  -- ROTATE_STATE_WORD
+    x := word(ROTATE-1 downto 0) & word(STATE_WORD_SIZE-1 downto ROTATE);
+    return x;
+  end ROTATE_STATE_WORD;
+
+begin  -- architecture structural
+  CP_DonexSO <= CP_DonexS;
+
+  -- purpose: Defines all registers
+  -- type   : sequential
+  -- inputs : ClkxCI, RstxRBI, *xDN signals
+  -- outputs: *xDP signals
+  RegisterProc : process (ClkxCI, RstxRBI) is
+  begin  -- process RegisterProc
+    if RstxRBI = '0' then               -- asynchronous reset (active low)
+      State0xDP                 <= (others => '0');
+      State1xDP                 <= (others => '0');
+      State2xDP                 <= (others => '0');
+      State3xDP                 <= (others => '0');
+      State4xDP                 <= (others => '0');
+      ControlStatexDP           <= (others => '0');
+      CP_FinalAssociatedDataxSP <= '0';
+      DP_RoundxSP               <= '0';
+    elsif ClkxCI'event and ClkxCI = '1' then  -- rising clock edge
+      State0xDP                 <= State0xDN;
+      State1xDP                 <= State1xDN;
+      State2xDP                 <= State2xDN;
+      State3xDP                 <= State3xDN;
+      State4xDP                 <= State4xDN;
+      ControlStatexDP           <= ControlStatexDN;
+      CP_FinalAssociatedDataxSP <= CP_FinalAssociatedDataxSN;
+      DP_RoundxSP               <= DP_RoundxSN;
+    end if;
+  end process RegisterProc;
+
+  -- purpose: Controlpath of Ascon
+  -- type   : combinational
+  ControlProc : process (CP_AssociatexSI, CP_DecryptxSI, CP_EncryptxSI,
+                         CP_FinalAssociatedDataxSP, CP_FinalDecryptxSI,
+                         CP_FinalEncryptxSI, CP_InitxSI, ControlStatexDP) is
+    variable ControlStatexDV : integer;
+  begin  -- process ControlProc
+
+    CP_FinalAssociatedDataxSN <= CP_FinalAssociatedDataxSP;
+
+    DP_InitxS      <= '0';
+    DP_RoundxSN    <= '0';
+    DP_XorZKeyxS   <= '0';
+    DP_XorKeyZxS   <= '0';
+    DP_XorZOnexS   <= '0';
+    DP_EncryptxS   <= '0';
+    DP_DecryptxS   <= '0';
+    CP_DonexS      <= '0';
+    DP_AssociatexS <= '0';
+
+    ControlStatexDV   := to_integer(unsigned(ControlStatexDP));
+    ControlStatexDN   <= ControlStatexDP;
+    DP_ControlStatexD <= ControlStatexDP;
+
+    if ControlStatexDV = 0 then
+      DP_InitxS      <= CP_InitxSI;
+      DP_AssociatexS <= CP_AssociatexSI;
+      DP_EncryptxS   <= CP_EncryptxSI or CP_FinalEncryptxSI;
+      DP_DecryptxS   <= CP_DecryptxSI or CP_FinalDecryptxSI;
+      DP_XorKeyZxS   <= CP_FinalEncryptxSI or CP_FinalDecryptxSI;
+
+      if CP_InitxSI = '1' then
+        CP_FinalAssociatedDataxSN <= '0';
+      end if;
+      if (CP_EncryptxSI = '1') or (CP_DecryptxSI = '1') or (CP_FinalEncryptxSI = '1') or (CP_FinalDecryptxSI = '1') then
+        CP_FinalAssociatedDataxSN <= '1';
+        if CP_FinalAssociatedDataxSP = '0' then
+          DP_XorZOnexS <= '1';
+        end if;
+      end if;
+    end if;
+
+    if (CP_InitxSI = '1') or (CP_AssociatexSI = '1') or (CP_EncryptxSI = '1') or (CP_DecryptxSI = '1') or (CP_FinalEncryptxSI = '1') or (CP_FinalDecryptxSI = '1') then
+      ControlStatexDN <= std_logic_vector(unsigned(ControlStatexDP) + UNROLED_ROUNDS);
+      DP_RoundxSN     <= '1';
+    end if;
+
+    if ((CP_InitxSI = '1') or (CP_FinalEncryptxSI = '1') or (CP_FinalDecryptxSI = '1')) and (ControlStatexDV = ROUNDS_A-UNROLED_ROUNDS) then
+      ControlStatexDN <= (others => '0');
+      DP_XorZKeyxS    <= '1';
+      CP_DonexS       <= '1';
+    end if;
+
+    if ((CP_AssociatexSI = '1') or (CP_EncryptxSI = '1') or (CP_DecryptxSI = '1')) and (ControlStatexDV = ROUNDS_B-UNROLED_ROUNDS) then
+      ControlStatexDN <= (others => '0');
+      CP_DonexS       <= '1';
+    end if;
+
+    if CP_FinalEncryptxSI = '1' or CP_InitxSI = '1' or CP_FinalDecryptxSI = '1' then
+      DP_ControlStatexD <= std_logic_vector(unsigned(ControlStatexDP) + (12-ROUNDS_A));
+    end if;
+
+    if CP_AssociatexSI = '1' or CP_EncryptxSI = '1' or CP_DecryptxSI = '1' then
+      DP_ControlStatexD <= std_logic_vector(unsigned(ControlStatexDP) + (12-ROUNDS_B));
+    end if;
+  end process ControlProc;
+
+  -- purpose: Datapath of Ascon
+  -- type   : combinational
+  DatapathProc : process (DP_AssociatexS, DP_ControlStatexD,
+                          DP_DecryptxS, DP_EncryptxS, DP_InitxS, DP_RoundxSN,
+                          DP_XorKeyZxS, DP_XorZKeyxS, DP_XorZOnexS,
+                          DataWritexDI, KeyxDI, State0xDP, State1xDP, State2xDP,
+                          State3xDP, State4xDP) is
+    variable P0xDV, P1xDV, P2xDV, P3xDV, P4xDV : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+    variable R0xDV, R1xDV, R2xDV, R3xDV, R4xDV : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+    variable S0xDV, S1xDV, S2xDV, S3xDV, S4xDV : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+    variable T0xDV, T1xDV, T2xDV, T3xDV, T4xDV : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+    variable U0xDV, U1xDV, U2xDV, U3xDV, U4xDV : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+    variable RoundConstxDV                     : std_logic_vector(63 downto 0);
+    variable State0XorIODataxDV                : std_logic_vector(63 downto 0);
+    variable State1XorIODataxDV                : std_logic_vector(63 downto 0);
+  begin  -- process DatapathProc
+
+    -- default
+    State0xDN <= State0xDP;
+    State1xDN <= State1xDP;
+    State2xDN <= State2xDP;
+    State3xDN <= State3xDP;
+    State4xDN <= State4xDP;
+
+    P0xDV := State0xDP;
+    P1xDV := State1xDP;
+    P2xDV := State2xDP;
+    P3xDV := State3xDP;
+    P4xDV := State4xDP;
+
+    if DP_InitxS = '1' then
+      P0xDV := CONST_KEY_SIZE & CONST_RATE & CONST_ROUNDS_A & CONST_ROUNDS_B & ZEROS(32);
+      P1xDV := KeyxDI(127 downto 64);
+      P2xDV := KeyxDI(63 downto 0);
+      -- directly use nonce from DataWrite input
+      if DATA_BUS_WIDTH = 128 then
+        P3xDV := DataWritexDI(127 downto 64);
+      else
+        -- when a 64-bit data bus is used, also only 64-bit nonces possible
+        P3xDV := (others => '0');
+      end if;
+      P4xDV := DataWritexDI(63 downto 0);
+    end if;
+
+    TagxDO <= State3xDP & State4xDP;
+    --- for 128 variant
+    if DATA_BLOCK_SIZE = 64 then
+      State0XorIODataxDV := State0xDP xor DataWritexDI(63 downto 0);
+      IODataxDO          <= State0XorIODataxDV;
+
+      -- finalization
+      if DP_XorKeyZxS = '1' then
+        P1xDV := State1xDP xor KeyxDI(127 downto 64);
+        P2xDV := State2xDP xor KeyxDI(63 downto 0);
+      end if;
+
+      if (DP_EncryptxS = '1') or (DP_AssociatexS = '1') then
+        P0xDV := State0XorIODataxDV;
+      end if;
+    -- for 128a variant
+    elsif DATA_BLOCK_SIZE = 128 then
+      State0XorIODataxDV := State0xDP xor DataWritexDI(127 downto 64);
+      State1XorIODataxDV := State1xDP xor DataWritexDI(63 downto 0);
+      IODataxDO          <= State0XorIODataxDV & State1XorIODataxDV;
+
+      -- finalization
+      if DP_XorKeyZxS = '1' then
+        P2xDV := State2xDP xor KeyxDI(127 downto 64);
+        P3xDV := State3xDP xor KeyxDI(63 downto 0);
+      end if;
+
+      if (DP_EncryptxS = '1') or (DP_AssociatexS = '1') then
+        P0xDV := State0XorIODataxDV;
+        P1xDV := State1XorIODataxDV;
+      end if;
+    end if;
+
+    P4xDV(0) := P4xDV(0) xor DP_XorZOnexS;
+
+    if DP_DecryptxS = '1' then
+      P0xDV := DataWritexDI(63 downto 0);
+    end if;
+
+    -- Unrole combinatorial path
+    for r in 0 to UNROLED_ROUNDS-1 loop
+      RoundConstxDV := ZEROS(64-8) & not std_logic_vector(unsigned(DP_ControlStatexD(3 downto 0)) + r) & std_logic_vector(unsigned(DP_ControlStatexD(3 downto 0)) + r);
+
+      R0xDV := P0xDV xor P4xDV;
+      R1xDV := P1xDV;
+      R2xDV := P2xDV xor P1xDV xor RoundConstxDV;
+      R3xDV := P3xDV;
+      R4xDV := P4xDV xor P3xDV;
+
+      S0xDV := R0xDV xor (not R1xDV and R2xDV);
+      S1xDV := R1xDV xor (not R2xDV and R3xDV);
+      S2xDV := R2xDV xor (not R3xDV and R4xDV);
+      S3xDV := R3xDV xor (not R4xDV and R0xDV);
+      S4xDV := R4xDV xor (not R0xDV and R1xDV);
+
+      T0xDV := S0xDV xor S4xDV;
+      T1xDV := S1xDV xor S0xDV;
+      T2xDV := not S2xDV;
+      T3xDV := S3xDV xor S2xDV;
+      T4xDV := S4xDV;
+
+      U0xDV := T0xDV xor ROTATE_STATE_WORD(T0xDV, 19) xor ROTATE_STATE_WORD(T0xDV, 28);
+      U1xDV := T1xDV xor ROTATE_STATE_WORD(T1xDV, 61) xor ROTATE_STATE_WORD(T1xDV, 39);
+      U2xDV := T2xDV xor ROTATE_STATE_WORD(T2xDV, 1) xor ROTATE_STATE_WORD(T2xDV, 6);
+      U3xDV := T3xDV xor ROTATE_STATE_WORD(T3xDV, 10) xor ROTATE_STATE_WORD(T3xDV, 17);
+      U4xDV := T4xDV xor ROTATE_STATE_WORD(T4xDV, 7) xor ROTATE_STATE_WORD(T4xDV, 41);
+
+      P0xDV := U0xDV;
+      P1xDV := U1xDV;
+      P2xDV := U2xDV;
+      P3xDV := U3xDV;
+      P4xDV := U4xDV;
+    end loop;
+
+    if DP_XorZKeyxS = '1' then
+      U3xDV := U3xDV xor KeyxDI(127 downto 64);
+      U4xDV := U4xDV xor KeyxDI(63 downto 0);
+    end if;
+
+    if DP_RoundxSN = '1' then
+      State0xDN <= U0xDV;
+      State1xDN <= U1xDV;
+      State2xDN <= U2xDV;
+      State3xDN <= U3xDV;
+      State4xDN <= U4xDV;
+    end if;
+  end process DatapathProc;
+
+end architecture structural;
diff --git a/fpga/src/memsec/hdl/crypto/ascon/ascon_mac.vhdl b/fpga/src/memsec/hdl/crypto/ascon/ascon_mac.vhdl
new file mode 100644
index 0000000..c8ccfab
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/ascon/ascon_mac.vhdl
@@ -0,0 +1,304 @@
+-------------------------------------------------------------------------------
+-- Title      : A generic implementation of Ascon
+-- Project    : 
+-------------------------------------------------------------------------------
+-- File       : 
+-- Author     : Hannes Gross <hannes.gross@iaik.tugraz.at>
+-- Company    : 
+-- Created    : 2016-05-25
+-- Last update: 2016-06-14
+-- Platform   : 
+-- Standard   : VHDL'93/02
+-------------------------------------------------------------------------------
+-- Description: 
+-------------------------------------------------------------------------------
+-- Copyright 2014 Graz University of Technology
+--
+-- Licensed under the Apache License, Version 2.0 (the "License");
+-- you may not use this file except in compliance with the License.
+-- You may obtain a copy of the License at
+--
+--     http://www.apache.org/licenses/LICENSE-2.0
+--
+-- Unless required by applicable law or agreed to in writing, software
+-- distributed under the License is distributed on an "AS IS" BASIS,
+-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+-- See the License for the specific language governing permissions and
+-- limitations under the License.
+-------------------------------------------------------------------------------
+-- Revisions  :
+-- Date        Version  Author           Description
+-- 2016-05-25  1.0      Hannes Gross     Created
+-- 2017-??-??  1.1      T. Unterluggauer Updated to Ascon 1.2 and switched mode
+--                                       to a MAC
+-------------------------------------------------------------------------------
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+
+entity ascon_mac is
+  generic (
+    UNROLED_ROUNDS      : integer := 1;  --1,2,3,6
+    DATA_BLOCK_SIZE     : integer := 64;
+    ROUNDS_A            : integer := 12;
+    ROUNDS_B            : integer := 6;
+    DATA_BUS_WIDTH      : integer := 32;
+    ADDR_BUS_WIDTH      : integer := 8;
+    INITIAL_PERMUTATION : boolean := true
+    );
+  port (
+    ClkxCI             : in  std_logic;
+    RstxRBI            : in  std_logic;
+    KeyxDI             : in  std_logic_vector(127 downto 0);
+    CP_InitxSI         : in  std_logic;
+    CP_PermutexSI      : in  std_logic;
+    CP_FinalPermutexSI : in  std_logic;
+    CP_OutputTagxSI    : in  std_logic;
+    DataWritexDI       : in  std_logic_vector(DATA_BUS_WIDTH-1 downto 0);
+    IODataxDO          : out std_logic_vector(DATA_BLOCK_SIZE-1 downto 0);
+    CP_DonexSO         : out std_logic
+    );
+
+end entity ascon_mac;
+
+architecture structural of ascon_mac is
+  constant CONTROL_STATE_SIZE : integer := 4;
+  constant STATE_WORD_SIZE    : integer := 64;
+  constant KEY_SIZE           : integer := 128;
+
+  constant CONST_UNROLED_R : std_logic_vector(7 downto 0) := std_logic_vector(to_unsigned(UNROLED_ROUNDS, 8));
+  constant CONST_KEY_SIZE  : std_logic_vector(7 downto 0) := std_logic_vector(to_unsigned(KEY_SIZE, 8));
+  constant CONST_ROUNDS_A  : std_logic_vector(7 downto 0) := std_logic_vector(to_unsigned(ROUNDS_A, 8));
+  constant CONST_ROUNDS_B  : std_logic_vector(7 downto 0) := std_logic_vector(to_unsigned(ROUNDS_B, 8));
+  constant CONST_RATE      : std_logic_vector(7 downto 0) := std_logic_vector(to_unsigned(DATA_BLOCK_SIZE, 8));
+
+  signal State0xDP, State0xDN             : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+  signal State1xDP, State1xDN             : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+  signal State2xDP, State2xDN             : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+  signal State3xDP, State3xDN             : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+  signal State4xDP, State4xDN             : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+  signal ControlStatexDP, ControlStatexDN : std_logic_vector(CONTROL_STATE_SIZE-1 downto 0);
+
+  signal DP_ControlStatexD        : std_logic_vector(CONTROL_STATE_SIZE-1 downto 0);
+  signal DP_InitxS                : std_logic;
+  signal DP_PermutexS             : std_logic;
+  signal CP_DonexS                : std_logic;
+  signal DP_RoundxSN, DP_RoundxSP : std_logic;
+  signal DP_OutputTagxS           : std_logic;
+
+  function ZEROS (
+    constant WIDTH : natural)
+    return std_logic_vector is
+    variable x : std_logic_vector(WIDTH-1 downto 0);
+  begin  -- ZEROS
+    x := (others => '0');
+    return x;
+  end ZEROS;
+
+  function ROTATE_STATE_WORD (
+    word            : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+    constant rotate : integer)
+    return std_logic_vector is
+    variable x : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+  begin  -- ROTATE_STATE_WORD
+    x := word(ROTATE-1 downto 0) & word(STATE_WORD_SIZE-1 downto ROTATE);
+    return x;
+  end ROTATE_STATE_WORD;
+
+begin  -- architecture structural
+  CP_DonexSO <= CP_DonexS;
+
+  -- purpose: Defines all registers
+  -- type   : sequential
+  -- inputs : ClkxCI, RstxRBI, *xDN signals
+  -- outputs: *xDP signals
+  RegisterProc : process (ClkxCI, RstxRBI) is
+  begin  -- process RegisterProc
+    if RstxRBI = '0' then               -- asynchronous reset (active low)
+      State0xDP       <= (others => '0');
+      State1xDP       <= (others => '0');
+      State2xDP       <= (others => '0');
+      State3xDP       <= (others => '0');
+      State4xDP       <= (others => '0');
+      ControlStatexDP <= (others => '0');
+      DP_RoundxSP     <= '0';
+    elsif ClkxCI'event and ClkxCI = '1' then  -- rising clock edge
+      State0xDP       <= State0xDN;
+      State1xDP       <= State1xDN;
+      State2xDP       <= State2xDN;
+      State3xDP       <= State3xDN;
+      State4xDP       <= State4xDN;
+      ControlStatexDP <= ControlStatexDN;
+      DP_RoundxSP     <= DP_RoundxSN;
+    end if;
+  end process RegisterProc;
+
+  -- purpose: Controlpath of Ascon
+  -- type   : combinational
+  ControlProc : process (CP_FinalPermutexSI, CP_InitxSI, CP_OutputTagxSI,
+                         CP_PermutexSI, ControlStatexDP) is
+    variable ControlStatexDV : integer;
+  begin  -- process ControlProc
+
+    DP_InitxS      <= '0';
+    DP_RoundxSN    <= '0';
+    DP_PermutexS   <= '0';
+    CP_DonexS      <= '0';
+    DP_OutputTagxS <= CP_OutputTagxSI;
+
+    ControlStatexDV   := to_integer(unsigned(ControlStatexDP));
+    ControlStatexDN   <= ControlStatexDP;
+    DP_ControlStatexD <= ControlStatexDP;
+
+    if ControlStatexDV = 0 then
+      DP_InitxS    <= CP_InitxSI;
+      DP_PermutexS <= CP_PermutexSI or CP_PermutexSI;
+    end if;
+
+    if (CP_InitxSI = '1' and INITIAL_PERMUTATION) or (CP_PermutexSI = '1') or (CP_FinalPermutexSI = '1') then
+      ControlStatexDN <= std_logic_vector(unsigned(ControlStatexDP) + UNROLED_ROUNDS);
+      DP_RoundxSN     <= '1';
+    end if;
+
+    if ((CP_InitxSI = '1' and INITIAL_PERMUTATION) or (CP_FinalPermutexSI = '1')) and (ControlStatexDV = ROUNDS_A-UNROLED_ROUNDS) then
+      ControlStatexDN <= (others => '0');
+      CP_DonexS       <= '1';
+    end if;
+
+    if ((CP_PermutexSI = '1')) and (ControlStatexDV = ROUNDS_B-UNROLED_ROUNDS) then
+      ControlStatexDN <= (others => '0');
+      CP_DonexS       <= '1';
+    end if;
+
+    if (CP_InitxSI = '1' and INITIAL_PERMUTATION) or CP_FinalPermutexSI = '1' then
+      DP_ControlStatexD <= std_logic_vector(unsigned(ControlStatexDP) + (12-ROUNDS_A));
+    end if;
+
+    if CP_PermutexSI = '1' then
+      DP_ControlStatexD <= std_logic_vector(unsigned(ControlStatexDP) + (12-ROUNDS_B));
+    end if;
+
+    if CP_InitxSI = '1' and not(INITIAL_PERMUTATION) then
+      CP_DonexS <= '1';
+    end if;
+  end process ControlProc;
+
+  -- purpose: Datapath of Ascon
+  -- type   : combinational
+  DatapathProc : process (DP_ControlStatexD, DP_InitxS,
+                          DP_OutputTagxS, DP_PermutexS, DP_RoundxSN,
+                          DataWritexDI, KeyxDI, State0xDP, State1xDP, State2xDP,
+                          State3xDP, State4xDP) is
+    variable P0xDV, P1xDV, P2xDV, P3xDV, P4xDV : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+    variable R0xDV, R1xDV, R2xDV, R3xDV, R4xDV : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+    variable S0xDV, S1xDV, S2xDV, S3xDV, S4xDV : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+    variable T0xDV, T1xDV, T2xDV, T3xDV, T4xDV : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+    variable U0xDV, U1xDV, U2xDV, U3xDV, U4xDV : std_logic_vector(STATE_WORD_SIZE-1 downto 0);
+    variable RoundConstxDV                     : std_logic_vector(63 downto 0);
+    variable State0XorIODataxDV                : std_logic_vector(63 downto 0);
+    variable State1XorIODataxDV                : std_logic_vector(63 downto 0);
+  begin  -- process DatapathProc
+
+    -- default
+    State0xDN <= State0xDP;
+    State1xDN <= State1xDP;
+    State2xDN <= State2xDP;
+    State3xDN <= State3xDP;
+    State4xDN <= State4xDP;
+
+    P0xDV := State0xDP;
+    P1xDV := State1xDP;
+    P2xDV := State2xDP;
+    P3xDV := State3xDP;
+    P4xDV := State4xDP;
+
+    if DP_InitxS = '1' then
+      --P0xDV := CONST_KEY_SIZE & CONST_RATE & CONST_ROUNDS_A & CONST_ROUNDS_B & ZEROS(32);
+      P0xDV := KeyxDI(127 downto 64);
+      P1xDV := KeyxDI(63 downto 0);
+      P2xDV := (others => '0');
+      P3xDV := (others => '0');
+      P4xDV := (others => '0');
+
+      State0xDN <= P0xDV;
+      State1xDN <= P1xDV;
+      State2xDN <= P2xDV;
+      State3xDN <= P3xDV;
+      State4xDN <= P4xDV;
+    end if;
+
+    --- for 128 variant
+    if DATA_BLOCK_SIZE = 64 then
+      State0XorIODataxDV := State0xDP xor DataWritexDI(63 downto 0);
+      IODataxDO          <= State1xDP;
+      if DP_OutputTagxS = '1' then
+        IODataxDO <= State3xDP;
+      end if;
+      -- finalization
+      if (DP_PermutexS = '1') then
+        P0xDV := State0XorIODataxDV;
+      end if;
+    -- for 128a variant
+    elsif DATA_BLOCK_SIZE = 128 then
+      State0XorIODataxDV := State0xDP xor DataWritexDI(127 downto 64);
+      State1XorIODataxDV := State1xDP xor DataWritexDI(63 downto 0);
+      IODataxDO          <= State0xDP & State1xDP;
+
+      if DP_OutputTagxS = '1' then
+        IODataxDO <= State3xDP & State4xDP;
+      end if;
+
+      -- finalization
+
+      if (DP_PermutexS = '1') then
+        P0xDV := State0XorIODataxDV;
+        P1xDV := State1XorIODataxDV;
+      end if;
+    end if;
+
+    -- Unrole combinatorial path
+    for r in 0 to UNROLED_ROUNDS-1 loop
+      RoundConstxDV := ZEROS(64-8) & not std_logic_vector(unsigned(DP_ControlStatexD(3 downto 0)) + r) & std_logic_vector(unsigned(DP_ControlStatexD(3 downto 0)) + r);
+
+      R0xDV := P0xDV xor P4xDV;
+      R1xDV := P1xDV;
+      R2xDV := P2xDV xor P1xDV xor RoundConstxDV;
+      R3xDV := P3xDV;
+      R4xDV := P4xDV xor P3xDV;
+
+      S0xDV := R0xDV xor (not R1xDV and R2xDV);
+      S1xDV := R1xDV xor (not R2xDV and R3xDV);
+      S2xDV := R2xDV xor (not R3xDV and R4xDV);
+      S3xDV := R3xDV xor (not R4xDV and R0xDV);
+      S4xDV := R4xDV xor (not R0xDV and R1xDV);
+
+      T0xDV := S0xDV xor S4xDV;
+      T1xDV := S1xDV xor S0xDV;
+      T2xDV := not S2xDV;
+      T3xDV := S3xDV xor S2xDV;
+      T4xDV := S4xDV;
+
+      U0xDV := T0xDV xor ROTATE_STATE_WORD(T0xDV, 19) xor ROTATE_STATE_WORD(T0xDV, 28);
+      U1xDV := T1xDV xor ROTATE_STATE_WORD(T1xDV, 61) xor ROTATE_STATE_WORD(T1xDV, 39);
+      U2xDV := T2xDV xor ROTATE_STATE_WORD(T2xDV, 1) xor ROTATE_STATE_WORD(T2xDV, 6);
+      U3xDV := T3xDV xor ROTATE_STATE_WORD(T3xDV, 10) xor ROTATE_STATE_WORD(T3xDV, 17);
+      U4xDV := T4xDV xor ROTATE_STATE_WORD(T4xDV, 7) xor ROTATE_STATE_WORD(T4xDV, 41);
+
+      P0xDV := U0xDV;
+      P1xDV := U1xDV;
+      P2xDV := U2xDV;
+      P3xDV := U3xDV;
+      P4xDV := U4xDV;
+    end loop;
+
+    if DP_RoundxSN = '1' then
+      State0xDN <= U0xDV;
+      State1xDN <= U1xDV;
+      State2xDN <= U2xDV;
+      State3xDN <= U3xDV;
+      State4xDN <= U4xDV;
+    end if;
+  end process DatapathProc;
+
+end architecture structural;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_package.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_package.vhd
new file mode 100644
index 0000000..31a6076
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_package.vhd
@@ -0,0 +1,67 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+
+package keccak_package is
+  constant LANE_BITWIDTH : integer := 16;
+
+  subtype Lane is std_logic_vector(LANE_BITWIDTH-1 downto 0);
+  type LaneArray is array (24 downto 0) of Lane;
+  type Plane is array (4 downto 0) of Lane;
+
+  type ParallelCtoD is record  -- Interface from controller to datapath
+    loadState           : std_logic;
+    enableStateRate     : std_logic;
+    enableStateCapacity : std_logic;
+    selectXoredBlock    : std_logic;
+    enableRoundCounter  : std_logic;
+  end record;
+
+  type ParallelDtoC is record    -- Interface from datapath to controller
+    permutate_done : std_logic;  -- all permutation rounds are done
+  end record;
+
+  function log2Ceil(i : natural) return integer;
+end keccak_package;
+
+package body keccak_package is
+  function log2Ceil(i : natural) return integer is
+    variable temp    : integer := i;
+    variable ret_val : integer := 0;
+    variable prev    : integer;
+    variable ceil    : integer := 0;
+  begin
+    while temp > 1 loop
+      ret_val := ret_val + 1;
+      prev    := temp;
+      temp    := temp / 2;
+
+      if temp*2 /= prev then
+        ceil := 1;
+      end if;
+    end loop;
+    ret_val := ret_val + ceil;
+
+    return ret_val;
+  end function;
+end package body;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_parallel.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_parallel.vhd
new file mode 100644
index 0000000..0fe982c
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_parallel.vhd
@@ -0,0 +1,90 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.keccak_package.all;
+
+entity keccak_parallel is
+  generic(
+    UNROLLED_ROUNDS : integer := 1;
+    ROUNDS          : integer := 18;
+    RATE            : integer := 80);
+  port (
+    ClkxCI           : in  std_logic;   -- system clock
+    RstxRBI          : in  std_logic;   -- synchronous reset (active low)
+    -- Data signals
+    BlockxDO         : out std_logic_vector(RATE-1 downto 0);  -- output block
+    BlockxDI         : in  std_logic_vector(RATE-1 downto 0);  -- input block
+    IVxDI            : in  std_logic_vector(25*LANE_BITWIDTH-1 downto 0);  -- initial vector
+    -- Control signals
+    StartInitxSI     : in  std_logic;   -- load IV into current state
+    StartAbsorbxSI   : in  std_logic;   -- absorb the input block
+    StartSqueezexSI  : in  std_logic;   -- absorb the input block
+    PermutateDonexSO : out std_logic);  -- calculation is in progress
+end keccak_parallel;
+
+architecture impl of keccak_parallel is
+  signal CtoD : ParallelCtoD;
+  signal DtoC : ParallelDtoC;
+
+  signal StatexS : LaneArray;
+
+  function Vec2LaneArray(vec : std_logic_vector) return LaneArray is
+    variable result : LaneArray;
+  begin
+    for i in 0 to 24 loop
+      result(i) := vec((i+1)*LANE_BITWIDTH-1 downto i*LANE_BITWIDTH);
+    end loop;
+    return result;
+  end function;
+
+begin
+  datapath : entity work.keccak_parallel_datapath
+    generic map(
+      UNROLLED_ROUNDS => UNROLLED_ROUNDS,
+      RATE            => RATE,
+      ROUNDS          => ROUNDS
+      )
+    port map (
+      ClkxCI     => ClkxCI,
+      RstxRBI    => RstxRBI,
+      -- Data signals
+      BlockxDO   => BlockxDO,
+      BlockxDI   => BlockxDI,
+      IVxDI      => Vec2LaneArray(IVxDI),
+      -- Internal control signals
+      ControlxSI => CtoD,
+      StatusxSO  => DtoC);
+
+  controller : entity work.keccak_parallel_control
+    port map (
+      ClkxCI           => ClkxCI,
+      RstxRBI          => RstxRBI,
+      -- External control signals
+      StartInitxSI     => StartInitxSI,
+      StartAbsorbxSI   => StartAbsorbxSI,
+      StartSqueezexSI  => StartSqueezexSI,
+      PermutateDonexSO => PermutateDonexSO,
+      -- Internal control signals
+      ControlxSO       => CtoD,
+      StatusxSI        => DtoC);
+end impl;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_parallel_control.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_parallel_control.vhd
new file mode 100644
index 0000000..40ea21e
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_parallel_control.vhd
@@ -0,0 +1,110 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use work.keccak_package.all;
+use ieee.numeric_std.all;
+
+entity keccak_parallel_control is
+  port (
+    ClkxCI           : in  std_logic;
+    RstxRBI          : in  std_logic;
+    -- External control signals
+    StartInitxSI     : in  std_logic;
+    StartAbsorbxSI   : in  std_logic;
+    StartSqueezexSI  : in  std_logic;
+    PermutateDonexSO : out std_logic;
+    -- Internal control signals
+    ControlxSO       : out ParallelCtoD;
+    StatusxSI        : in  ParallelDtoC
+    );
+end keccak_parallel_control;
+
+architecture behavior of keccak_parallel_control is
+  type STATE_TYPE is (IDLE, PERMUTATE);
+  signal CurrentStatexS, NextStatexS        : STATE_TYPE;
+  signal PermutateDonexSP, PermutateDonexSN : std_logic;
+begin
+  comb : process(CurrentStatexS, StartInitxSI, StartAbsorbxSI,
+                 StartSqueezexSI, StatusxSI.permutate_done, PermutateDonexSP)
+  begin
+    NextStatexS                    <= CurrentStatexS;
+    ControlxSO.selectXoredBlock    <= '0';
+    ControlxSO.loadState           <= '0';
+    ControlxSO.enableStateRate     <= '0';
+    ControlxSO.enableStateCapacity <= '0';
+    ControlxSO.enableRoundCounter  <= '0';
+    PermutateDonexSN               <= PermutateDonexSP;
+    PermutateDonexSO               <= PermutateDonexSP;
+
+    case CurrentStatexS is
+      when IDLE =>
+        PermutateDonexSN <= '0';
+        if StartInitxSI = '1' then
+          ControlxSO.selectXoredBlock    <= '0';
+          ControlxSO.loadState           <= '1';
+          ControlxSO.enableStateRate     <= '1';
+          ControlxSO.enableStateCapacity <= '1';
+          NextStatexS                    <= PERMUTATE;
+        elsif StartAbsorbxSI = '1' then
+          ControlxSO.selectXoredBlock    <= '1';
+          ControlxSO.loadState           <= '0';
+          ControlxSO.enableStateRate     <= '1';
+          ControlxSO.enableStateCapacity <= '0';
+          NextStatexS                    <= PERMUTATE;
+        elsif StartSqueezexSI = '1' then
+          ControlxSO.selectXoredBlock    <= '0';
+          ControlxSO.loadState           <= '0';
+          ControlxSO.enableStateRate     <= '0';
+          ControlxSO.enableStateCapacity <= '0';
+          NextStatexS                    <= PERMUTATE;
+        else
+          NextStatexS <= IDLE;
+        end if;
+
+      when PERMUTATE =>
+        ControlxSO.selectXoredBlock    <= '0';
+        ControlxSO.loadState           <= '0';
+        ControlxSO.enableStateRate     <= '1';
+        ControlxSO.enableStateCapacity <= '1';
+        ControlxSO.enableRoundCounter  <= '1';
+        NextStatexS                    <= PERMUTATE;
+        if StatusxSI.permutate_done = '1' then
+          ControlxSO.enableRoundCounter <= '0';
+          PermutateDonexSN              <= '1';
+          NextStatexS                   <= IDLE;
+        end if;
+
+    end case;
+  end process;
+
+  sync : process
+  begin
+    wait until rising_edge(ClkxCI);
+    if RstxRBI = '0' then
+      CurrentStatexS   <= IDLE;
+      PermutateDonexSP <= '0';
+    else
+      CurrentStatexS   <= NextStatexS;
+      PermutateDonexSP <= PermutateDonexSN;
+    end if;
+  end process;
+end behavior;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_parallel_datapath.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_parallel_datapath.vhd
new file mode 100644
index 0000000..81c4f65
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_parallel_datapath.vhd
@@ -0,0 +1,127 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.keccak_package.all;
+
+entity keccak_parallel_datapath is
+  generic(
+    UNROLLED_ROUNDS : integer := 1;
+    RATE            : integer := 80;
+    ROUNDS          : integer := 18
+    );
+  port (
+    ClkxCI     : in  std_logic;         -- system clock
+    RstxRBI    : in  std_logic;         -- synchronous reset (active low)
+    -- Data signals
+    BlockxDO   : out std_logic_vector(RATE-1 downto 0);  -- output block
+    BlockxDI   : in  std_logic_vector(RATE-1 downto 0);  -- input block
+    IVxDI      : in  LaneArray;         -- initial state
+    -- Control signals
+    ControlxSI : in  ParallelCtoD;  -- control signals from the controller to the datapath
+    StatusxSO  : out ParallelDtoC);  -- status signals from the datapath to the controller
+end keccak_parallel_datapath;
+
+architecture impl of keccak_parallel_datapath is
+  signal StatexDP         : LaneArray;
+  signal StatexDN         : LaneArray;
+  signal RoundCountxD     : std_logic_vector(log2Ceil(ROUNDS)-1 downto 0);
+  signal SyncCounterReset : std_logic;
+
+  type PermutationStatesType is array (0 to UNROLLED_ROUNDS) of LaneArray;
+  type RoundCountType is array (0 to UNROLLED_ROUNDS-1) of std_logic_vector(log2Ceil(ROUNDS)-1 downto 0);
+
+  signal PermutationStatexD : PermutationStatesType;
+  signal RoundCountsxD      : RoundCountType;
+begin
+  state1 : entity work.keccak_state
+    generic map (
+      RATE     => RATE,
+      BITWIDTH => LANE_BITWIDTH)
+    port map (
+      ClkxCI             => ClkxCI,
+      DxDI               => StatexDN,
+      Enable_RatexSI     => ControlxSI.enableStateRate,
+      Enable_CapacityxSI => ControlxSI.enableStateCapacity,
+      RstxRBI            => RstxRBI,
+      QxDO               => StatexDP);
+
+  keccak_round_counter_1 : entity work.keccak_round_counter
+    generic map (
+      BITWIDTH   => log2Ceil(ROUNDS),
+      SUBTRAHEND => UNROLLED_ROUNDS
+      )
+    port map (
+      ClkxCI           => ClkxCI,
+      EnableCounterxSI => ControlxSI.enableRoundCounter,
+      RstxRBI          => RstxRBI,
+      CounterZeroxSO   => StatusxSO.permutate_done,
+      CounterValuexDO  => RoundCountxD,
+      SyncResetxSI     => SyncCounterReset,
+      ResetValuexDI    => std_logic_vector(to_unsigned(ROUNDS-UNROLLED_ROUNDS, log2Ceil(ROUNDS)))
+      );
+
+  SyncCounterReset <= not ControlxSI.enableRoundCounter;
+
+  next_state : process (StatexDP, ControlxSI.selectXoredBlock, IVxDI,
+                        ControlxSI.loadState, BlockxDI, PermutationStatexD(UNROLLED_ROUNDS))
+    variable nextState : LaneArray;
+  begin
+    nextState := PermutationStatexD(UNROLLED_ROUNDS);
+
+    if ControlxSI.loadState = '1' then
+      nextState := IVxDI;
+    end if;
+
+    if ControlxSI.selectXoredBlock = '1' then
+      -- xor rate
+      for N in RATE/LANE_BITWIDTH - 1 downto 0 loop
+        nextState(N) := StatexDP(N) xor BlockxDI((N+1)*LANE_BITWIDTH-1 downto N*LANE_BITWIDTH);
+      end loop;
+    end if;
+
+    StatexDN <= nextState;
+  end process next_state;
+
+  outBlock : process (StatexDP)
+    variable v_rate : std_logic_vector(RATE-1 downto 0);
+  begin
+    v_rate := (others => '0');
+    for i in RATE/LANE_BITWIDTH -1 downto 0 loop
+      v_rate((i+1)*LANE_BITWIDTH-1 downto i*LANE_BITWIDTH) := StatexDP(i);
+    end loop;
+    BlockxDO <= v_rate;
+  end process outBlock;
+
+  PermutationStatexD(0) <= StatexDP;
+  round_instances :
+  for i in 0 to UNROLLED_ROUNDS-1 generate
+    round : entity work.keccak_round_parallel
+      generic map(BITWIDTH => log2Ceil(ROUNDS))
+      port map(StatexDI     => PermutationStatexD(i),
+               StatexDO     => PermutationStatexD(i+1),
+               CfgRoundsxDI => std_logic_vector(to_unsigned(ROUNDS, log2Ceil(ROUNDS))),
+               RoundNrxDI   => RoundCountsxD(i));
+
+    RoundCountsxD(i) <= std_logic_vector(unsigned(RoundCountxD)+UNROLLED_ROUNDS-1-i);
+  end generate round_instances;
+end impl;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_register.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_register.vhd
new file mode 100644
index 0000000..38f3e4c
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_register.vhd
@@ -0,0 +1,53 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+
+entity keccak_register is
+  generic (
+    BITWIDTH : integer := 16);
+  port (
+    ClkxCI    : in  std_logic;
+    DxDI      : in  std_logic_vector(BITWIDTH-1 downto 0);
+    EnablexSI : in  std_logic;
+    RstxRBI   : in  std_logic;
+    QxDO      : out std_logic_vector(BITWIDTH-1 downto 0)
+    );
+
+end keccak_register;
+
+architecture arch_reg of keccak_register is
+  signal Q_tmp : std_logic_vector(BITWIDTH-1 downto 0) := (others => '0');
+begin
+  SequProc : process
+  begin  -- process SequProc
+    wait until rising_edge(ClkxCI);
+    if RstxRBI = '0' then               -- synchronous reset (active low)
+      Q_tmp <= (others => '0');
+    elsif EnablexSI = '1' then
+      Q_tmp <= DxDI;
+    end if;
+  end process SequProc;
+
+  QxDO <= Q_tmp;
+
+end arch_reg;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_round_counter.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_counter.vhd
new file mode 100644
index 0000000..35c12ef
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_counter.vhd
@@ -0,0 +1,72 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+
+entity keccak_round_counter is
+  generic (
+    SUBTRAHEND : integer := 1;
+    BITWIDTH   : integer := 5);
+  port (
+    ClkxCI           : in  std_logic;
+    EnableCounterxSI : in  std_logic;
+    RstxRBI          : in  std_logic;
+    CounterZeroxSO   : out std_logic;
+    CounterValuexDO  : out std_logic_vector(BITWIDTH-1 downto 0);
+    ResetValuexDI    : in  std_logic_vector(BITWIDTH-1 downto 0);
+    SyncResetxSI     : in  std_logic
+    );
+end keccak_round_counter;
+
+architecture arch_reg of keccak_round_counter is
+  signal QxDP, QxDN : std_logic_vector(BITWIDTH-1 downto 0) := (others => '0');
+begin
+  SequProc : process(RstxRBI, ClkxCI)
+  begin  -- process SequProc
+    if RstxRBI = '0' then               -- asynchronous reset (active low)
+      QxDP <= (others => '0');
+    elsif rising_edge(ClkxCI) then
+      QxDP <= QxDN;
+    end if;
+  end process SequProc;
+  CounterValuexDO <= QxDP;
+
+  CombProc : process (QxDP, SyncResetxSI, EnableCounterxSI, ResetValuexDI)
+    variable new_value : std_logic_vector(BITWIDTH -1 downto 0);
+  begin  -- process CombProc
+    new_value := std_logic_vector(unsigned(QxDP) - SUBTRAHEND);
+
+    QxDN <= QxDP;
+    if EnableCounterxSI = '1' then
+      QxDN <= new_value;
+    end if;
+    if SyncResetxSI = '1' then
+      QxDN <= ResetValuexDI;
+    end if;
+
+    if unsigned(QxDP) = 0 then
+      CounterZeroxSO <= '1';
+    else
+      CounterZeroxSO <= '0';
+    end if;
+  end process CombProc;
+end arch_reg;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_round_iota.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_iota.vhd
new file mode 100644
index 0000000..c4040f1
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_iota.vhd
@@ -0,0 +1,68 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.keccak_package.all;
+
+entity keccak_round_iota is
+  port (
+    StatexDI     : in  Lane;
+    StatexDO     : out Lane;
+    RoundNrxDI   : in  std_logic_vector(4 downto 0);
+    CfgRoundsxDI : in  std_logic_vector(4 downto 0)
+    );
+end keccak_round_iota;
+
+architecture impl of keccak_round_iota is
+begin
+  iota : process (StatexDI, RoundNrxDI, CfgRoundsxDI)
+    variable currentLane : Lane;
+    variable roundAsInt  : integer;
+    variable iota_index  : integer range 0 to 19;
+    type lut_type is array (0 to 19) of std_logic_vector(4 downto 0);
+    constant lut : lut_type := (
+      0  => "00001", 1 => "11010", 2 => "11110", 3 => "10000", 4 => "11111",
+      5  => "00001", 6 => "11001", 7 => "10101", 8 => "01110", 9 => "01100",
+      10 => "10101", 11 => "00110", 12 => "11111", 13 => "01111", 14 => "11101",
+      15 => "10011", 16 => "10010", 17 => "01000", 18 => "10110", 19 => "00110");
+  begin
+    roundAsInt := to_integer(unsigned(RoundNrxDI));
+    if roundAsInt > (to_integer(unsigned(CfgRoundsxDI))-1) then
+      iota_index := 0;
+    else
+      iota_index := to_integer(unsigned(CfgRoundsxDI))-1-roundAsInt;
+    end if;
+
+    currentLane := StatexDI;
+
+    currentLane(1 downto 0) := currentLane(1 downto 0) xor lut(iota_index)(1 downto 0);
+    currentLane(3)          := currentLane(3) xor lut(iota_index)(2);
+    if log2Ceil(LANE_BITWIDTH) > 2 then
+      currentLane(7) := currentLane(7) xor lut(iota_index)(3);
+    end if;
+    if log2Ceil(LANE_BITWIDTH) > 3 then
+      currentLane(15) := currentLane(15) xor lut(iota_index)(4);
+    end if;
+
+    StatexDO <= currentLane;
+  end process iota;
+end impl;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel.vhd
new file mode 100644
index 0000000..5278fa4
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel.vhd
@@ -0,0 +1,72 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.keccak_package.all;
+
+entity keccak_round_parallel is
+  generic (
+    BITWIDTH : integer := 5);
+  port (
+    StatexDI     : in  LaneArray;
+    StatexDO     : out LaneArray;
+    CfgRoundsxDI : in  std_logic_vector(BITWIDTH-1 downto 0);
+    RoundNrxDI   : in  std_logic_vector(BITWIDTH-1 downto 0));
+end keccak_round_parallel;
+
+architecture impl of keccak_round_parallel is
+  signal StateAfterTheta : LaneArray;
+  signal StateAfterRho   : LaneArray;
+  signal StateAfterPi    : LaneArray;
+  signal StateAfterChi   : LaneArray;
+  signal StateAfterIota  : LaneArray;
+begin
+  theta : entity work.keccak_round_parallel_theta
+    port map (
+      StatexDI => StatexDI,
+      StatexDO => StateAfterTheta);
+
+  rho : entity work.keccak_round_parallel_rho
+    port map (
+      StatexDI => StateAfterTheta,
+      StatexDO => StateAfterRho);
+
+  pi : entity work.keccak_round_parallel_pi
+    port map (
+      StatexDI => StateAfterRho,
+      StatexDO => StateAfterPi);
+
+  chi : entity work.keccak_round_parallel_chi
+    port map (
+      StatexDI => StateAfterPi,
+      StatexDO => StateAfterChi);
+
+  iota : entity work.keccak_round_iota
+    port map (
+      StatexDI     => StateAfterChi(0),
+      StatexDO     => StateAfterIota(0),
+      RoundNrxDI   => RoundNrxDI,
+      CfgRoundsxDI => CfgRoundsxDI);
+  StateAfterIota(24 downto 1) <= StateAfterChi(24 downto 1);
+
+  StatexDO <= StateAfterIota;
+end impl;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_chi.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_chi.vhd
new file mode 100644
index 0000000..541a9ef
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_chi.vhd
@@ -0,0 +1,48 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.keccak_package.all;
+
+entity keccak_round_parallel_chi is
+  port (
+    StatexDI : in  LaneArray;
+    StatexDO : out LaneArray);
+end keccak_round_parallel_chi;
+
+architecture impl of keccak_round_parallel_chi is
+begin
+  chi : process (StatexDI)
+    variable currentState : LaneArray;
+    variable tempState    : LaneArray;
+  begin
+    currentState := StatexDI;
+
+    for y in 0 to 4 loop
+      for x in 0 to 4 loop
+        tempState(x + y*5) := currentState(x + y*5) xor ((not (currentState((x+1) mod 5 + 5*y))) and currentState((x+2) mod 5 + 5*y));
+      end loop;
+    end loop;
+
+    StatexDO <= tempState;
+  end process chi;
+end impl;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_pi.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_pi.vhd
new file mode 100644
index 0000000..084c426
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_pi.vhd
@@ -0,0 +1,50 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.keccak_package.all;
+
+entity keccak_round_parallel_pi is
+  port (
+    StatexDI : in  LaneArray;
+    StatexDO : out LaneArray);
+end keccak_round_parallel_pi;
+
+architecture impl of keccak_round_parallel_pi is
+begin
+  pi : process (StatexDI)
+    variable currentState : LaneArray;
+    variable tempState    : LaneArray;
+    variable pi_index     : integer := 0;
+  begin
+    currentState := StatexDI;
+
+    for y in 0 to 4 loop
+      for x in 0 to 4 loop
+        pi_index            := ((2*x+3*y) mod 5)*5 + y;
+        tempState(pi_index) := currentState(x+5*y);
+      end loop;
+    end loop;
+
+    StatexDO <= tempState;
+  end process pi;
+end impl;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_rho.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_rho.vhd
new file mode 100644
index 0000000..33983ac
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_rho.vhd
@@ -0,0 +1,73 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.keccak_package.all;
+
+entity keccak_round_parallel_rho is
+  port (
+    StatexDI : in  LaneArray;
+    StatexDO : out LaneArray);
+end keccak_round_parallel_rho;
+
+architecture impl of keccak_round_parallel_rho is
+begin
+  rho : process (StatexDI)
+    type offset_array is array (0 to 24) of integer;
+    variable offset       : offset_array;
+    variable currentState : LaneArray;
+  begin
+    offset(0)  := 0 mod LANE_BITWIDTH;
+    offset(1)  := 1 mod LANE_BITWIDTH;
+    offset(2)  := 14 mod LANE_BITWIDTH;
+    offset(3)  := 12 mod LANE_BITWIDTH;
+    offset(4)  := 11 mod LANE_BITWIDTH;
+    offset(5)  := 4 mod LANE_BITWIDTH;
+    offset(6)  := 12 mod LANE_BITWIDTH;
+    offset(7)  := 6 mod LANE_BITWIDTH;
+    offset(8)  := 7 mod LANE_BITWIDTH;
+    offset(9)  := 4 mod LANE_BITWIDTH;
+    offset(10) := 3 mod LANE_BITWIDTH;
+    offset(11) := 10 mod LANE_BITWIDTH;
+    offset(12) := 11 mod LANE_BITWIDTH;
+    offset(13) := 9 mod LANE_BITWIDTH;
+    offset(14) := 7 mod LANE_BITWIDTH;
+    offset(15) := 9 mod LANE_BITWIDTH;
+    offset(16) := 13 mod LANE_BITWIDTH;
+    offset(17) := 15 mod LANE_BITWIDTH;
+    offset(18) := 5 mod LANE_BITWIDTH;
+    offset(19) := 8 mod LANE_BITWIDTH;
+    offset(20) := 2 mod LANE_BITWIDTH;
+    offset(21) := 2 mod LANE_BITWIDTH;
+    offset(22) := 13 mod LANE_BITWIDTH;
+    offset(23) := 8 mod LANE_BITWIDTH;
+    offset(24) := 14 mod LANE_BITWIDTH;
+
+    currentState := StatexDI;
+
+    for N in 1 to 24 loop
+      currentState(N) := currentState(N)((LANE_BITWIDTH-1-offset(N)) downto 0) & currentState(N)(LANE_BITWIDTH-1 downto (LANE_BITWIDTH-1 - offset(N)+1));
+    end loop;
+
+    StatexDO <= currentState;
+  end process rho;
+end impl;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_theta.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_theta.vhd
new file mode 100644
index 0000000..9f55352
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_round_parallel_theta.vhd
@@ -0,0 +1,54 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.keccak_package.all;
+
+entity keccak_round_parallel_theta is
+  port (
+    StatexDI : in  LaneArray;
+    StatexDO : out LaneArray);
+end keccak_round_parallel_theta;
+
+architecture impl of keccak_round_parallel_theta is
+begin
+  theta : process (StatexDI)
+    variable thetaXorxD        : Plane;
+    variable thetaXorShiftedxD : Plane;
+    variable currentState      : LaneArray;
+  begin
+    currentState := StatexDI;
+
+    --THETA
+    --xoring planes and shifting help plane
+    for i in 0 to 4 loop
+      thetaXorxD(i)        := currentState(i) xor currentState(i+5) xor currentState(i+10) xor currentState(i+15) xor currentState(i+20);
+      thetaXorShiftedxD(i) := thetaXorxD(i)(LANE_BITWIDTH-2 downto 0) & thetaXorxD(i)(LANE_BITWIDTH-1);
+    end loop;
+    --xoring with actual state
+    for i in 0 to 24 loop
+      currentState(i) := thetaXorxD((i-1) mod 5) xor thetaXorShiftedxD((i+1) mod 5) xor currentState(i);
+    end loop;  -- i
+
+    StatexDO <= currentState;
+  end process theta;
+end impl;
diff --git a/fpga/src/memsec/hdl/crypto/keccak/keccak_state.vhd b/fpga/src/memsec/hdl/crypto/keccak/keccak_state.vhd
new file mode 100644
index 0000000..227fdf3
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/keccak/keccak_state.vhd
@@ -0,0 +1,66 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.keccak_package.all;
+
+entity keccak_state is
+  generic (
+    RATE     : integer := 80;
+    BITWIDTH : integer := 16);
+  port (
+    ClkxCI             : in  std_logic;
+    DxDI               : in  LaneArray;
+    Enable_RatexSI     : in  std_logic;
+    Enable_CapacityxSI : in  std_logic;
+    RstxRBI            : in  std_logic;
+    QxDO               : out LaneArray);
+end keccak_state;
+
+architecture gen of keccak_state is
+begin
+  G1 : for i in 24 downto 0 generate
+    reg_rate : if i < RATE/BITWIDTH generate
+      keccak_rate : entity work.keccak_register
+        generic map (
+          BITWIDTH => BITWIDTH)
+        port map (
+          ClkxCI    => ClkxCI,
+          DxDI      => DxDI(i),
+          EnablexSI => Enable_RatexSI,
+          RstxRBI   => RstxRBI,
+          QxDO      => QxDO(i));
+    end generate reg_rate;
+
+    reg_capacity : if i >= RATE/BITWIDTH generate
+      keccak_capacity : entity work.keccak_register
+        generic map (
+          BITWIDTH => BITWIDTH)
+        port map (
+          ClkxCI    => ClkxCI,
+          DxDI      => DxDI(i),
+          EnablexSI => Enable_CapacityxSI,
+          RstxRBI   => RstxRBI,
+          QxDO      => QxDO(i));
+    end generate reg_capacity;
+  end generate G1;
+end gen;
diff --git a/fpga/src/memsec/hdl/crypto/prince.vhd b/fpga/src/memsec/hdl/crypto/prince.vhd
new file mode 100644
index 0000000..026370e
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/prince.vhd
@@ -0,0 +1,325 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+-------------------------------------------------------------------------------
+-- Title      : Prince block cipher
+-- Project    :
+-------------------------------------------------------------------------------
+-- File       : prince.vhdl
+-- Author     : Erich Wenger  <erichwenger@erich.wenger@iaik.tugraz.at>
+-- Company    :
+-- Created    : 2014-05-23
+-- Last update: 2014-05-30
+-- Platform   :
+-- Standard   : VHDL'93/02
+-------------------------------------------------------------------------------
+-- Description:
+-------------------------------------------------------------------------------
+-- Copyright (c) 2014
+-------------------------------------------------------------------------------
+-- Revisions  :
+-- Date        Version  Author  Description
+-- 2014-05-23  1.0      erichwenger     Created
+-------------------------------------------------------------------------------
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+
+entity prince is
+  generic(
+    DECRYPTION : boolean := false;
+    BLOCK_SIZE : integer := 64
+    );
+  port(
+    ClkxCI        : in  std_logic;
+    RstxRBI       : in  std_logic;
+    Key0xDI       : in  std_logic_vector(63 downto 0);
+    Key1xDI       : in  std_logic_vector(63 downto 0);
+    MessagexDI    : in  std_logic_vector(BLOCK_SIZE-1 downto 0);
+    CiphertextxDO : out std_logic_vector(BLOCK_SIZE-1 downto 0);
+
+    in_ready  : out std_logic;
+    in_valid  : in  std_logic;
+    out_ready : in  std_logic;
+    out_valid : out std_logic
+    );
+
+end entity prince;
+
+architecture structural of prince is
+
+  type state_type is array (10 downto 1) of std_logic_vector(BLOCK_SIZE-1 downto 0);
+  type round_const_type is array (0 to 11) of std_logic_vector(BLOCK_SIZE-1 downto 0);
+  type sbox_type is array (0 to 15) of std_logic_vector(3 downto 0);
+  type shift_rows_type is array (0 to 15) of integer;
+
+  signal MsgCorexD        : std_logic_vector(BLOCK_SIZE-1 downto 0);
+  signal CiphertextCorexD : std_logic_vector(BLOCK_SIZE-1 downto 0);
+
+  signal InRxD                       : state_type;
+  signal OutRxD                      : state_type;
+  signal Key0xD, Key0PrimexD, Key1xD : std_logic_vector(63 downto 0);
+
+  signal AfterSBoxxD, AfterMatrixxD, AfterRoundConstxD, AfterKeyAddxD : state_type;
+
+  signal OutRxDP, OutRxDN : std_logic_vector(63 downto 0);
+
+  constant AlphaxD : std_logic_vector(63 downto 0) := x"c0ac29b7c97c50dd";
+
+  constant RoundConstxD : round_const_type := (
+    (x"0000000000000000"),
+    (x"13198a2e03707344"),
+    (x"a4093822299f31d0"),
+    (x"082efa98ec4e6c89"),
+    (x"452821e638d01377"),
+    (x"be5466cf34e90c6c"),
+    (x"7ef84f78fd955cb1"),
+    (x"85840851f1ac43aa"),
+    (x"c882d32f25323c54"),
+    (x"64a51195e0e3610d"),
+    (x"d3b5a399ca0c2399"),
+    (x"c0ac29b7c97c50dd"));
+
+  constant SboxxD : sbox_type := (
+    (x"B"), (x"F"), (x"3"), (x"2"),
+    (x"A"), (x"C"), (x"9"), (x"1"),
+    (x"6"), (x"7"), (x"8"), (x"0"),
+    (x"E"), (x"5"), (x"D"), (x"4"));
+
+  constant InvSboxxD : sbox_type := (
+    (x"B"), (x"7"), (x"3"), (x"2"),
+    (x"F"), (x"D"), (x"8"), (x"9"),
+    (x"A"), (x"6"), (x"4"), (x"0"),
+    (x"5"), (x"E"), (x"C"), (x"1"));
+
+  constant ShiftRowsxD : shift_rows_type := (0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11);
+
+  function SHIFT_ROWS (
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD : std_logic_vector(63 downto 0);
+    variable j     : integer;
+  begin
+    for i in 0 to 15 loop
+      j                       := 15 - ShiftRowsxD(15 - i);
+      OutxD(i*4+3 downto i*4) := InxD(j*4+3 downto j*4);
+    end loop;  -- i
+    return OutxD;
+  end SHIFT_ROWS;
+
+  function SHIFT_ROWS_INV (
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD : std_logic_vector(63 downto 0);
+    variable j     : integer;
+  begin
+    for i in 0 to 15 loop
+      j                       := 15 - ShiftRowsxD(15 - i);
+      OutxD(j*4+3 downto j*4) := InxD(i*4+3 downto i*4);
+    end loop;  -- i
+    return OutxD;
+  end SHIFT_ROWS_INV;
+
+  function SBOX (
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD : std_logic_vector(63 downto 0);
+  begin
+    for i in 0 to 15 loop
+      OutxD(i*4+3 downto i*4) := SboxxD(to_integer(unsigned(InxD(i*4+3 downto i*4))));
+    end loop;  -- i
+    return OutxD;
+  end SBOX;
+
+  function SBOX_INV (
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD : std_logic_vector(63 downto 0);
+  begin
+    for i in 0 to 15 loop
+      OutxD(i*4+3 downto i*4) := InvSboxxD(to_integer(unsigned(InxD(i*4+3 downto i*4))));
+    end loop;  -- i
+    return OutxD;
+  end SBOX_INV;
+
+  function LINEAR_MATRIX (
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD    : std_logic_vector(63 downto 0);
+    variable LinOutxD : std_logic_vector(63 downto 0);
+    variable LinInxD  : std_logic_vector(63 downto 0);
+  begin  -- ROTATE_STATE_WORD
+    for i in 0 to 63 loop
+      LinInxD(i) := InxD(63 - i);
+    end loop;  -- i
+
+    LinOutxD(0)  := LinInxD(4) xor LinInxD(8) xor LinInxD(12);
+    LinOutxD(1)  := LinInxD(1) xor LinInxD(9) xor LinInxD(13);
+    LinOutxD(2)  := LinInxD(2) xor LinInxD(6) xor LinInxD(14);
+    LinOutxD(3)  := LinInxD(3) xor LinInxD(7) xor LinInxD(11);
+    LinOutxD(4)  := LinInxD(0) xor LinInxD(4) xor LinInxD(8);
+    LinOutxD(5)  := LinInxD(5) xor LinInxD(9) xor LinInxD(13);
+    LinOutxD(6)  := LinInxD(2) xor LinInxD(10) xor LinInxD(14);
+    LinOutxD(7)  := LinInxD(3) xor LinInxD(7) xor LinInxD(15);
+    LinOutxD(8)  := LinInxD(0) xor LinInxD(4) xor LinInxD(12);
+    LinOutxD(9)  := LinInxD(1) xor LinInxD(5) xor LinInxD(9);
+    LinOutxD(10) := LinInxD(6) xor LinInxD(10) xor LinInxD(14);
+    LinOutxD(11) := LinInxD(3) xor LinInxD(11) xor LinInxD(15);
+    LinOutxD(12) := LinInxD(0) xor LinInxD(8) xor LinInxD(12);
+    LinOutxD(13) := LinInxD(1) xor LinInxD(5) xor LinInxD(13);
+    LinOutxD(14) := LinInxD(2) xor LinInxD(6) xor LinInxD(10);
+    LinOutxD(15) := LinInxD(7) xor LinInxD(11) xor LinInxD(15);
+    LinOutxD(16) := LinInxD(16) xor LinInxD(20) xor LinInxD(24);
+    LinOutxD(17) := LinInxD(21) xor LinInxD(25) xor LinInxD(29);
+    LinOutxD(18) := LinInxD(18) xor LinInxD(26) xor LinInxD(30);
+    LinOutxD(19) := LinInxD(19) xor LinInxD(23) xor LinInxD(31);
+    LinOutxD(20) := LinInxD(16) xor LinInxD(20) xor LinInxD(28);
+    LinOutxD(21) := LinInxD(17) xor LinInxD(21) xor LinInxD(25);
+    LinOutxD(22) := LinInxD(22) xor LinInxD(26) xor LinInxD(30);
+    LinOutxD(23) := LinInxD(19) xor LinInxD(27) xor LinInxD(31);
+    LinOutxD(24) := LinInxD(16) xor LinInxD(24) xor LinInxD(28);
+    LinOutxD(25) := LinInxD(17) xor LinInxD(21) xor LinInxD(29);
+    LinOutxD(26) := LinInxD(18) xor LinInxD(22) xor LinInxD(26);
+    LinOutxD(27) := LinInxD(23) xor LinInxD(27) xor LinInxD(31);
+    LinOutxD(28) := LinInxD(20) xor LinInxD(24) xor LinInxD(28);
+    LinOutxD(29) := LinInxD(17) xor LinInxD(25) xor LinInxD(29);
+    LinOutxD(30) := LinInxD(18) xor LinInxD(22) xor LinInxD(30);
+    LinOutxD(31) := LinInxD(19) xor LinInxD(23) xor LinInxD(27);
+    LinOutxD(32) := LinInxD(32) xor LinInxD(36) xor LinInxD(40);
+    LinOutxD(33) := LinInxD(37) xor LinInxD(41) xor LinInxD(45);
+    LinOutxD(34) := LinInxD(34) xor LinInxD(42) xor LinInxD(46);
+    LinOutxD(35) := LinInxD(35) xor LinInxD(39) xor LinInxD(47);
+    LinOutxD(36) := LinInxD(32) xor LinInxD(36) xor LinInxD(44);
+    LinOutxD(37) := LinInxD(33) xor LinInxD(37) xor LinInxD(41);
+    LinOutxD(38) := LinInxD(38) xor LinInxD(42) xor LinInxD(46);
+    LinOutxD(39) := LinInxD(35) xor LinInxD(43) xor LinInxD(47);
+    LinOutxD(40) := LinInxD(32) xor LinInxD(40) xor LinInxD(44);
+    LinOutxD(41) := LinInxD(33) xor LinInxD(37) xor LinInxD(45);
+    LinOutxD(42) := LinInxD(34) xor LinInxD(38) xor LinInxD(42);
+    LinOutxD(43) := LinInxD(39) xor LinInxD(43) xor LinInxD(47);
+    LinOutxD(44) := LinInxD(36) xor LinInxD(40) xor LinInxD(44);
+    LinOutxD(45) := LinInxD(33) xor LinInxD(41) xor LinInxD(45);
+    LinOutxD(46) := LinInxD(34) xor LinInxD(38) xor LinInxD(46);
+    LinOutxD(47) := LinInxD(35) xor LinInxD(39) xor LinInxD(43);
+    LinOutxD(48) := LinInxD(52) xor LinInxD(56) xor LinInxD(60);
+    LinOutxD(49) := LinInxD(49) xor LinInxD(57) xor LinInxD(61);
+    LinOutxD(50) := LinInxD(50) xor LinInxD(54) xor LinInxD(62);
+    LinOutxD(51) := LinInxD(51) xor LinInxD(55) xor LinInxD(59);
+    LinOutxD(52) := LinInxD(48) xor LinInxD(52) xor LinInxD(56);
+    LinOutxD(53) := LinInxD(53) xor LinInxD(57) xor LinInxD(61);
+    LinOutxD(54) := LinInxD(50) xor LinInxD(58) xor LinInxD(62);
+    LinOutxD(55) := LinInxD(51) xor LinInxD(55) xor LinInxD(63);
+    LinOutxD(56) := LinInxD(48) xor LinInxD(52) xor LinInxD(60);
+    LinOutxD(57) := LinInxD(49) xor LinInxD(53) xor LinInxD(57);
+    LinOutxD(58) := LinInxD(54) xor LinInxD(58) xor LinInxD(62);
+    LinOutxD(59) := LinInxD(51) xor LinInxD(59) xor LinInxD(63);
+    LinOutxD(60) := LinInxD(48) xor LinInxD(56) xor LinInxD(60);
+    LinOutxD(61) := LinInxD(49) xor LinInxD(53) xor LinInxD(61);
+    LinOutxD(62) := LinInxD(50) xor LinInxD(54) xor LinInxD(58);
+    LinOutxD(63) := LinInxD(55) xor LinInxD(59) xor LinInxD(63);
+
+    for i in 0 to 63 loop
+      OutxD(i) := LinOutxD(63 - i);
+    end loop;  -- i
+
+    return OutxD;
+  end LINEAR_MATRIX;
+begin  -- architecture structural
+
+  decryption_key : if DECRYPTION generate
+    Key0xD      <= (Key0xDI(0 downto 0) & Key0xDI(63 downto 1)) xor ((62 downto 0 => '0') & Key0xDI(63 downto 63));
+    Key0PrimexD <= Key0xDI;
+    Key1xD      <= Key1xDI xor AlphaxD;
+  end generate;
+
+  encryption_key : if not DECRYPTION generate
+    Key0xD      <= Key0xDI;
+    Key0PrimexD <= (Key0xDI(0 downto 0) & Key0xDI(63 downto 1)) xor ((62 downto 0 => '0') & Key0xDI(63 downto 63));
+    Key1xD      <= Key1xDI;
+  end generate;
+
+  data_reg : entity work.register_stage
+    generic map(
+      WIDTH      => 64,
+      REGISTERED => true
+      )
+    port map (
+      clk    => ClkxCI,
+      resetn => RstxRBI,
+
+      in_data  => OutRxDN,
+      in_valid => in_valid,
+      in_ready => in_ready,
+
+      out_data  => OutRxDP,
+      out_valid => out_valid,
+      out_ready => out_ready
+      );
+
+  --sync: process
+  --begin
+  --  wait until rising_edge(ClkxCI);
+  --  if RstxRBI = '0' then
+  --    OutRxDP <= (others => '0');
+  --  else
+  --    OutRxDP <= OutRxDN;
+  --  end if;
+  --end process;
+
+  MsgCorexD        <= MessagexDI xor Key0xD;
+  CiphertextxDO    <= CiphertextCorexD xor Key0PrimexD;
+  CiphertextCorexD <= OutRxD(10) xor RoundConstxD(11) xor Key1xD;
+
+  InRxD(1) <= MsgCorexD xor Key1xD xor RoundConstxD(0);
+  InRxD(2) <= OutRxD(1);
+  InRxD(3) <= OutRxD(2);
+  InRxD(4) <= OutRxD(3);
+  InRxD(5) <= OutRxD(4);
+
+  InRxD(6)  <= SBOX_INV(LINEAR_MATRIX(SBOX(OutRxDP)));
+  InRxD(7)  <= OutRxD(6);
+  InRxD(8)  <= OutRxD(7);
+  InRxD(9)  <= OutRxD(8);
+  InRxD(10) <= OutRxD(9);
+
+  R1to5 : for i in 1 to 4 generate
+    AfterSBoxxD(i)       <= SBOX(InRxD(i));
+    AfterMatrixxD(i)     <= SHIFT_ROWS(LINEAR_MATRIX(AfterSBoxxD(i)));
+    AfterRoundConstxD(i) <= AfterMatrixxD(i) xor RoundConstxD(i);
+    AfterKeyAddxD(i)     <= AfterRoundConstxD(i) xor Key1xD;
+    OutRxD(i)            <= AfterKeyAddxD(i);
+  end generate R1to5;
+
+  AfterSBoxxD(5)       <= SBOX(InRxD(5));
+  AfterMatrixxD(5)     <= SHIFT_ROWS(LINEAR_MATRIX(AfterSBoxxD(5)));
+  AfterRoundConstxD(5) <= AfterMatrixxD(5) xor RoundConstxD(5);
+  AfterKeyAddxD(5)     <= AfterRoundConstxD(5) xor Key1xD;
+  OutRxDN              <= AfterKeyAddxD(5);
+
+  R6to10 : for i in 6 to 10 generate
+    AfterKeyAddxD(i)     <= InRxD(i) xor Key1xD;
+    AfterRoundConstxD(i) <= AfterKeyAddxD(i) xor RoundConstxD(i);
+    AfterMatrixxD(i)     <= LINEAR_MATRIX(SHIFT_ROWS_INV(AfterRoundConstxD(i)));
+    AfterSBoxxD(i)       <= SBOX_INV(AfterMatrixxD(i));
+    OutRxD(i)            <= AfterSBoxxD(i);
+  end generate R6to10;
+
+end architecture structural;
diff --git a/fpga/src/memsec/hdl/crypto/qarma.vhd b/fpga/src/memsec/hdl/crypto/qarma.vhd
new file mode 100644
index 0000000..980049a
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/qarma.vhd
@@ -0,0 +1,408 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+
+entity qarma is
+  generic(
+    DECRYPTION : boolean := false;
+    ROUNDS     : integer := 7
+    );
+  port(
+    ClkxCI        : in  std_logic;
+    RstxRBI       : in  std_logic;
+    KeyxDI        : in  std_logic_vector(127 downto 0);
+    TweakxDI      : in  std_logic_vector(63 downto 0);
+    MessagexDI    : in  std_logic_vector(63 downto 0);
+    CiphertextxDO : out std_logic_vector(63 downto 0);
+
+    in_ready  : out std_logic;
+    in_valid  : in  std_logic;
+    out_ready : in  std_logic;
+    out_valid : out std_logic
+    );
+end qarma;
+
+architecture Behavioral of qarma is
+  signal W0xD, K0xD : std_logic_vector(63 downto 0);
+  signal W1xD, K1xD : std_logic_vector(63 downto 0);
+
+  type sbox_type is array (0 to 15) of std_logic_vector(3 downto 0);
+  type permutation_type is array(0 to 15) of integer range 0 to 15;
+  type round_const_type is array (0 to 7) of std_logic_vector(63 downto 0);
+  type state_type is array (0 to ROUNDS) of std_logic_vector(63 downto 0);
+
+  signal State0xD, State1xD             : state_type;
+  signal StateMiddle0xD, StateMiddle1xD : std_logic_vector(63 downto 0);
+  signal TweakxD                        : state_type;
+
+  signal RegisterInxD, RegisterOutxD           : std_logic_vector(63 downto 0);
+  signal RegisterInReadyxS, RegisterOutReadyxS : std_logic;
+  signal RegisterInValidxS, RegisterOutValidxS : std_logic;
+
+  constant AlphaxD : std_logic_vector(63 downto 0) := x"c0ac29b7c97c50dd";
+
+  constant RoundConstxD : round_const_type := (
+    (x"0000000000000000"),
+    (x"13198a2e03707344"),
+    (x"a4093822299f31d0"),
+    (x"082efa98ec4e6c89"),
+    (x"452821e638d01377"),
+    (x"be5466cf34e90c6c"),
+    (x"3F84D5B5B5470917"),
+    (x"9216D5D98979FB1B"));
+
+  -- Sigma1 is an involution
+  constant SboxSigma1xD : sbox_type := (
+    (x"A"), (x"D"), (x"E"), (x"6"),
+    (x"F"), (x"7"), (x"3"), (x"5"),
+    (x"9"), (x"8"), (x"0"), (x"C"),
+    (x"B"), (x"1"), (x"2"), (x"4"));
+
+  constant InvSboxSigma1xD : sbox_type := (
+    (x"A"), (x"D"), (x"E"), (x"6"),
+    (x"F"), (x"7"), (x"3"), (x"5"),
+    (x"9"), (x"8"), (x"0"), (x"C"),
+    (x"B"), (x"1"), (x"2"), (x"4"));
+
+  constant PermTauxD : permutation_type := (
+       0, 11,  6, 13,
+      10,  1, 12,  7,
+       5, 14,  3,  8,
+      15,  4,  9,  2);
+
+  constant PermTauInvxD : permutation_type := (
+       0,  5, 15, 10,
+      13,  8,  2,  7,
+      11, 14,  4,  1,
+       6,  3,  9, 12);
+
+  constant PermHxD : permutation_type := (
+       6,  5, 14, 15,
+       0,  1,  2,  3,
+       7, 12, 13,  4,
+       8,  9, 10, 11);
+
+  constant PermHInvxD : permutation_type := (
+       4,  5,  6,  7,
+      11,  1,  0,  8,
+      12, 13, 14, 15,
+       9, 10,  2,  3);
+
+  function LFSR(
+    InxD : std_logic_vector(3 downto 0))
+    return std_logic_vector is
+    variable OutxD : std_logic_vector(3 downto 0);
+  begin
+    OutxD(2 downto 0) := InxD(3 downto 1);
+    OutxD(3)          := InxD(0) xor InxD(1);
+    return OutxD;
+  end LFSR;
+
+  function LFSR_OMEGA(
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD : std_logic_vector(63 downto 0);
+  begin
+    OutxD               := InxD;
+    OutxD(63 downto 60) := LFSR(InxD(63 downto 60));  -- 0
+    OutxD(59 downto 56) := LFSR(InxD(59 downto 56));  -- 1
+    OutxD(51 downto 48) := LFSR(InxD(51 downto 48));  -- 3
+    OutxD(47 downto 44) := LFSR(InxD(47 downto 44));  -- 4
+    OutxD(31 downto 28) := LFSR(InxD(31 downto 28));  -- 8
+    OutxD(19 downto 16) := LFSR(InxD(19 downto 16));  -- 11
+    OutxD(11 downto 8)  := LFSR(InxD(11 downto 8));   -- 13
+    return OutxD;
+  end LFSR_OMEGA;
+
+  function FUNC_O(
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD : std_logic_vector(63 downto 0);
+  begin
+    OutxD    := InxD(0) & InxD(63 downto 1);
+    OutxD(0) := OutxD(0) xor InxD(63);
+    return OutxD;
+  end FUNC_O;
+
+  function SUB_CELLS (
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD : std_logic_vector(63 downto 0);
+  begin
+    for i in 0 to 15 loop
+      OutxD(i*4+3 downto i*4) := SboxSigma1xD(to_integer(unsigned(InxD(i*4+3 downto i*4))));
+    end loop;  -- i
+    return OutxD;
+  end SUB_CELLS;
+
+  function INV_SUB_CELLS (
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD : std_logic_vector(63 downto 0);
+  begin
+    for i in 0 to 15 loop
+      OutxD(i*4+3 downto i*4) := InvSboxSigma1xD(to_integer(unsigned(InxD(i*4+3 downto i*4))));
+    end loop;  -- i
+    return OutxD;
+  end INV_SUB_CELLS;
+
+  function SHUFFLE_CELLS (
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD      : std_logic_vector(63 downto 0);
+    variable index_dest : integer;
+    variable index_src  : integer;
+  begin
+    for i in 0 to 15 loop
+      index_dest                                := 15-i;
+      index_src                                 := 15-PermTauxD(i);
+      OutxD(index_dest*4+3 downto index_dest*4) := InxD(index_src*4+3 downto index_src*4);
+    end loop;  -- i
+    return OutxD;
+  end SHUFFLE_CELLS;
+
+  function INV_SHUFFLE_CELLS (
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD      : std_logic_vector(63 downto 0);
+    variable index_dest : integer;
+    variable index_src  : integer;
+  begin
+    for i in 0 to 15 loop
+      index_dest                                := 15-i;
+      index_src                                 := 15-PermTauInvxD(i);
+      OutxD(index_dest*4+3 downto index_dest*4) := InxD(index_src*4+3 downto index_src*4);
+    end loop;  -- i
+    return OutxD;
+  end INV_SHUFFLE_CELLS;
+
+  function PERMUTATION_H (
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD      : std_logic_vector(63 downto 0);
+    variable index_dest : integer;
+    variable index_src  : integer;
+  begin
+    for i in 0 to 15 loop
+      index_dest                                := 15-i;
+      index_src                                 := 15-PermHxD(i);
+      OutxD(index_dest*4+3 downto index_dest*4) := InxD(index_src*4+3 downto index_src*4);
+    end loop;  -- i
+    return OutxD;
+  end PERMUTATION_H;
+
+  function PERMUTATION_H_INV (
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD      : std_logic_vector(63 downto 0);
+    variable index_dest : integer;
+    variable index_src  : integer;
+  begin
+    for i in 0 to 15 loop
+      index_dest                                := 15-i;
+      index_src                                 := 15-PermHInvxD(i);
+      OutxD(index_dest*4+3 downto index_dest*4) := InxD(index_src*4+3 downto index_src*4);
+    end loop;  -- i
+    return OutxD;
+  end PERMUTATION_H_INV;
+
+  function ROTATE_LEFT(
+    InxD     : std_logic_vector(3 downto 0);
+    rotation : integer)
+    return std_logic_vector is
+    variable OutxD : std_logic_vector(3 downto 0);
+  begin
+    OutxD(3 downto ROTATION)   := InxD(3-ROTATION downto 0);
+    OutxD(ROTATION-1 downto 0) := InxD(3 downto 4-ROTATION);
+    return OutxD;
+  end ROTATE_LEFT;
+
+  function MULTIPLY_M4_2 (
+    InxD : std_logic_vector(15 downto 0))
+    return std_logic_vector is
+    variable OutxD : std_logic_vector(15 downto 0);
+  begin
+    OutxD(15 downto 12) := ROTATE_LEFT(InxD(11 downto 8), 1) xor ROTATE_LEFT(InxD(7 downto 4), 2) xor ROTATE_LEFT(InxD(3 downto 0), 1);
+    OutxD(11 downto 8)  := ROTATE_LEFT(InxD(15 downto 12), 1) xor ROTATE_LEFT(InxD(7 downto 4), 1) xor ROTATE_LEFT(InxD(3 downto 0), 2);
+    OutxD(7 downto 4)   := ROTATE_LEFT(InxD(15 downto 12), 2) xor ROTATE_LEFT(InxD(11 downto 8), 1) xor ROTATE_LEFT(InxD(3 downto 0), 1);
+    OutxD(3 downto 0)   := ROTATE_LEFT(InxD(15 downto 12), 1) xor ROTATE_LEFT(InxD(11 downto 8), 2) xor ROTATE_LEFT(InxD(7 downto 4), 1);
+    return OutxD;
+  end MULTIPLY_M4_2;
+
+  function MIX_COLUMNS (
+    InxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD       : std_logic_vector(63 downto 0);
+    variable ColumnInxD  : std_logic_vector(15 downto 0);
+    variable ColumnOutxD : std_logic_vector(15 downto 0);
+    variable i           : integer;
+  begin  -- MIX COLUMNS
+    for i in 0 to 3 loop
+      ColumnInxD                  := InxD(i*4+51 downto i*4+48) & InxD(i*4+35 downto i*4+32) & InxD(i*4+19 downto i*4+16) & InxD(i*4+3 downto i*4);
+      ColumnOutxD                 := MULTIPLY_M4_2 (ColumnInxD);
+      OutxD(i*4+51 downto i*4+48) := ColumnOutxD(15 downto 12);
+      OutxD(i*4+35 downto i*4+32) := ColumnOutxD(11 downto 8);
+      OutxD(i*4+19 downto i*4+16) := ColumnOutxD(7 downto 4);
+      OutxD(i*4+3 downto i*4)     := ColumnOutxD(3 downto 0);
+    end loop;  -- i
+    return OutxD;
+  end MIX_COLUMNS;
+
+
+  function ROUND (
+    InStatexD    : std_logic_vector(63 downto 0);
+    InTweakKeyxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable OutxD      : std_logic_vector(63 downto 0);
+    variable AdditionxD : std_logic_vector(63 downto 0);
+    variable ShuffledxD : std_logic_vector(63 downto 0);
+    variable MixingxD   : std_logic_vector(63 downto 0);
+  begin  -- ROUND
+    AdditionxD := InStatexD xor InTweakKeyxD;
+    ShuffledxD := SHUFFLE_CELLS(AdditionxD);
+    MixingxD   := MIX_COLUMNS(ShuffledxD);
+    OutxD      := SUB_CELLS(MixingxD);
+    return OutxD;
+  end ROUND;
+
+  function ROUND_SHORT (
+    InStatexD    : std_logic_vector(63 downto 0);
+    InTweakKeyxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable AdditionxD : std_logic_vector(63 downto 0);
+    variable OutxD      : std_logic_vector(63 downto 0);
+  begin  -- ROUND_SHORT
+    AdditionxD := InStatexD xor InTweakKeyxD;
+    OutxD      := SUB_CELLS(AdditionxD);
+    return OutxD;
+  end ROUND_SHORT;
+
+  function ROUND_INV (
+    InStatexD    : std_logic_vector(63 downto 0);
+    InTweakKeyxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable SubstitutionxD : std_logic_vector(63 downto 0);
+    variable MixingxD       : std_logic_vector(63 downto 0);
+    variable ShufflingxD    : std_logic_vector(63 downto 0);
+    variable OutxD          : std_logic_vector(63 downto 0);
+  begin  -- ROUND_INV
+    SubstitutionxD := INV_SUB_CELLS(InStatexD);
+    MixingxD       := MIX_COLUMNS(SubstitutionxD);
+    ShufflingxD    := INV_SHUFFLE_CELLS(MixingxD);
+    OutxD          := ShufflingxD xor InTweakKeyxD;
+    return OutxD;
+  end ROUND_INV;
+
+  function ROUND_INV_SHORT (
+    InStatexD    : std_logic_vector(63 downto 0);
+    InTweakKeyxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable SubstitutionxD : std_logic_vector(63 downto 0);
+    variable OutxD          : std_logic_vector(63 downto 0);
+  begin  -- ROUND_INV_SHORT
+    SubstitutionxD := INV_SUB_CELLS(InStatexD);
+    OutxD          := SubstitutionxD xor InTweakKeyxD;
+    return OutxD;
+  end ROUND_INV_SHORT;
+
+  function PSEUDO_REFLECTOR (
+    InStatexD    : std_logic_vector(63 downto 0);
+    InTweakKeyxD : std_logic_vector(63 downto 0))
+    return std_logic_vector is
+    variable ShufflingxD : std_logic_vector(63 downto 0);
+    variable MultiplyxD  : std_logic_vector(63 downto 0);
+    variable AdditionxD  : std_logic_vector(63 downto 0);
+    variable OutxD       : std_logic_vector(63 downto 0);
+  begin  -- PSEUDO_REFLECTOR
+    ShufflingxD := SHUFFLE_CELLS(InStatexD);
+    MultiplyxD  := MIX_COLUMNS(ShufflingxD);
+    AdditionxD  := MultiplyxD xor InTweakKeyxD;
+    OutxD       := INV_SHUFFLE_CELLS(AdditionxD);
+    return OutxD;
+  end PSEUDO_REFLECTOR;
+
+begin
+
+  encryption_properties : if not(DECRYPTION) generate
+    W0xD <= KeyxDI(127 downto 64);
+    K0xD <= KeyxDI(63 downto 0);
+    W1xD <= FUNC_O(W0xD);
+    K1xD <= K0xD;
+  end generate;
+
+  decryption_properties : if DECRYPTION generate
+    W1xD <= KeyxDI(127 downto 64);
+    K0xD <= KeyxDI(63 downto 0) xor AlphaxD;
+    W0xD <= FUNC_O(W1xD);
+    K1xD <= MIX_COLUMNS(KeyxDI(63 downto 0));
+  end generate;
+
+  State0xD(0) <= MessagexDI xor W0xD;
+  TweakxD(0)  <= TweakxDI;
+
+  State0xD(1) <= ROUND_SHORT(State0xD(0), K0xD xor TweakxD(0) xor RoundConstxD(0));
+  TweakxD(1)  <= LFSR_OMEGA(PERMUTATION_H(TweakxD(0)));
+
+  rounds_0 : for r in 1 to ROUNDS-1 generate
+    State0xD(r+1) <= ROUND(State0xD(r), K0xD xor TweakxD(r) xor RoundConstxD(r));
+    TweakxD(r+1)  <= LFSR_OMEGA(PERMUTATION_H(TweakxD(r)));
+  end generate rounds_0;
+
+
+  StateMiddle0xD <= ROUND(State0xD(ROUNDS), W1xD xor TweakxD(ROUNDS));
+  StateMiddle1xD <= PSEUDO_REFLECTOR(StateMiddle0xD, K1xD);
+
+  RegisterInxD      <= StateMiddle1xD;
+  RegisterInValidxS <= in_valid;
+  in_ready          <= RegisterInReadyxS;
+
+  out_valid          <= RegisterOutValidxS;
+  RegisterOutReadyxS <= out_ready;
+  State1xD(0)        <= ROUND_INV(RegisterOutxD, W0xD xor TweakxD(ROUNDS));
+
+  internal_reg : entity work.register_stage
+    generic map(
+      WIDTH      => 64,
+      REGISTERED => true
+      )
+    port map(
+      clk    => ClkxCI,
+      resetn => RstxRBI,
+
+      in_data  => RegisterInxD,
+      in_valid => RegisterInValidxS,
+      in_ready => RegisterInReadyxS,
+
+      out_data  => RegisterOutxD,
+      out_valid => RegisterOutValidxS,
+      out_ready => RegisterOutReadyxS
+      );
+
+  rounds_1 : for r in 0 to ROUNDS-2 generate
+    State1xD(r+1) <= ROUND_INV(State1xD(r), K0xD xor TweakxD(ROUNDS-1-r) xor RoundConstxD(ROUNDS-1-r) xor AlphaxD);
+  end generate rounds_1;
+
+  State1xD(ROUNDS) <= ROUND_INV_SHORT(State1xD(ROUNDS-1), K0xD xor TweakxD(0) xor RoundConstxD(0) xor AlphaxD);
+
+  CiphertextxDO <= State1xD(ROUNDS) xor W1xD;
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/crypto/xts_tweak_generator.vhd b/fpga/src/memsec/hdl/crypto/xts_tweak_generator.vhd
new file mode 100644
index 0000000..e2b6a9b
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/xts_tweak_generator.vhd
@@ -0,0 +1,138 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+
+entity xts_tweak_generator is
+  generic(
+    WIDTH             : integer := 64;
+    BLOCK_INDEX_WIDTH : integer := 2
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    in_tweak   : in  std_logic_vector(WIDTH - 1 downto 0);
+    in_blockNr : in  std_logic_vector(BLOCK_INDEX_WIDTH - 1 downto 0);  -- the index of the in block
+    in_mulNr   : in  std_logic_vector(BLOCK_INDEX_WIDTH - 1 downto 0);  -- the number of initial multiplications
+    in_valid   : in  std_logic;  -- new tweak and block index are valid and should be used
+    in_ready   : out std_logic;
+
+    out_tweak : out std_logic_vector(WIDTH - 1 downto 0);
+    out_valid : out std_logic;
+    out_ready : in  std_logic  -- the outputed tweak has been processed and the next one can be computed
+    );
+end xts_tweak_generator;
+
+architecture Behavioral of xts_tweak_generator is
+  constant BLOCK_INDEX_MAX : integer := 2**BLOCK_INDEX_WIDTH-1;
+
+  signal tweakxDP, tweakxDN           : std_logic_vector(WIDTH - 1 downto 0);
+  signal mulxDP, mulxDN               : std_logic_vector(BLOCK_INDEX_WIDTH - 1 downto 0);  -- number of multiplications till valid
+  signal blockTotalxDP, blockTotalxDN : std_logic_vector(BLOCK_INDEX_WIDTH - 1 downto 0);
+  signal validxDP, validxDN           : std_logic;
+
+  -- helper signals
+  signal tweak_calc_in, tweak_calc_out : std_logic_vector(WIDTH - 1 downto 0);
+  signal in_readyxS                    : std_logic;
+  signal out_validxS                   : std_logic;
+
+begin
+
+  tweak_mul : entity work.xts_tweak_mul
+    generic map(
+      WIDTH => WIDTH
+      )
+    port map (
+      in_tweak  => tweak_calc_in,
+      out_tweak => tweak_calc_out
+      );
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        tweakxDP      <= (others => '0');
+        mulxDP        <= (others => '0');
+        blockTotalxDP <= (others => '0');
+        validxDP      <= '0';
+      else
+        tweakxDP      <= tweakxDN;
+        mulxDP        <= mulxDN;
+        blockTotalxDP <= blockTotalxDN;
+        validxDP      <= validxDN;
+      end if;
+    end if;
+  end process regs;
+
+  control : process(mulxDP, in_blockNr, in_tweak, in_valid, out_ready, validxDP,
+                    tweak_calc_out, tweakxDP, blockTotalxDP, in_blockNr, in_mulNr) is
+  begin
+    -- hold the values in the registers by default
+    tweakxDN      <= tweakxDP;
+    mulxDN        <= mulxDP;
+    blockTotalxDN <= blockTotalxDP;
+    validxDN      <= validxDP;
+
+    in_readyxS <= '0';
+
+    -- calculate the next tweak from the register and output it by default
+    tweak_calc_in <= tweakxDP;
+    out_tweak     <= tweakxDP;
+
+    -- start a new tweak calculation by loading the input data into the registers
+    if in_valid = '1' then
+      tweakxDN      <= in_tweak;
+      mulxDN        <= in_mulNr;
+      in_readyxS    <= '1';
+      blockTotalxDN <= in_blockNr;
+      validxDN      <= '0';
+      if to_integer(unsigned(in_mulNr)) = 0 then
+        validxDN <= '1';
+      end if;
+    end if;
+
+    -- loop until the first tweak is generated
+    if to_integer(unsigned(mulxDP)) /= 0 then
+      tweakxDN      <= tweak_calc_out;
+      mulxDN        <= std_logic_vector(unsigned(mulxDP) - 1);
+      blockTotalxDN <= std_logic_vector(unsigned(blockTotalxDP) + 1);
+      if to_integer(unsigned(mulxDP)) = 1 then
+        validxDN <= '1';
+      end if;
+    end if;
+
+    -- update the tweak when it has been in_read
+    if validxDP = '1' and out_ready = '1' then
+      tweakxDN      <= tweak_calc_out;
+      blockTotalxDN <= std_logic_vector(unsigned(blockTotalxDP) + 1);
+      if to_integer(unsigned(blockTotalxDP)) = BLOCK_INDEX_MAX then
+        validxDN <= '0';
+      end if;
+    end if;
+  end process control;
+
+  out_valid <= validxDP;
+  in_ready  <= in_readyxS;
+
+end Behavioral;
+
diff --git a/fpga/src/memsec/hdl/crypto/xts_tweak_mul.vhd b/fpga/src/memsec/hdl/crypto/xts_tweak_mul.vhd
new file mode 100644
index 0000000..c8aea47
--- /dev/null
+++ b/fpga/src/memsec/hdl/crypto/xts_tweak_mul.vhd
@@ -0,0 +1,59 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+
+entity xts_tweak_mul is
+  generic(
+    WIDTH : integer := 64
+    );
+  port(
+    in_tweak  : in  std_logic_vector(WIDTH - 1 downto 0);
+    out_tweak : out std_logic_vector(WIDTH - 1 downto 0)
+    );
+end xts_tweak_mul;
+
+architecture Behavioral of xts_tweak_mul is
+-- GCM polynomials: (http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-spec.pdf)
+--
+-- 128-bit: 1 + a + a^2 + a^7 + a^128  => x"87"
+--  64-bit: 1 + a + a^3 + a^4 + a^64   => x"1B"
+--
+  signal multiplied : std_logic_vector(WIDTH - 1 downto 0);
+
+  function polynomial (
+    constant SIZE : natural)
+    return std_logic_vector is
+    variable res : std_logic_vector(WIDTH - 1 downto 0);
+  begin  -- polynomial
+    res := (others => '0');
+    case SIZE is
+      when 64     => res(7 downto 0) := x"1B";
+      when 128    => res(7 downto 0) := x"87";
+      when others => assert false report "WIDTH is not supported" severity error;
+    end case;
+    return res;
+  end polynomial;
+begin
+  multiplied <= in_tweak(WIDTH - 2 downto 0) & '0';
+  out_tweak  <= multiplied xor polynomial(WIDTH) when in_tweak(WIDTH-1) = '1' else multiplied;
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/axi/axi_deserialization.vhd b/fpga/src/memsec/hdl/framework/axi/axi_deserialization.vhd
new file mode 100644
index 0000000..f7421bb
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/axi/axi_deserialization.vhd
@@ -0,0 +1,375 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Deserializes the AXI-4 write channel into a sequence of aligned blocks.
+--!
+--! AXI-4 supports various optimizations on the data write channel like write
+--! strobes, unaligned transfers, and narrow transfers. Additionally, the bus
+--! width is configurable. This module decodes the write channel and outputs
+--! a sequence of aligned blocks with strobes. Subsequently, the support of
+--! narrow and unaligned transfers is basically implemented by this module.
+--! The width of the output blocks is configurable and can be equal or a
+--! multiple of the input AXI write channel width. The address information is
+--! extracted from the StreamType interface which is expected to provide the
+--! information from the AXI write address channel. Per request, only one beat
+--! (i.e., no data) is expected.
+entity axi_deserialization is
+  generic(
+    IN_DATA_WIDTH  : integer := 32;
+    OUT_DATA_WIDTH : integer := 32;  -- has to be (1,2,4,8,...) * IN_DATA_WIDTH
+
+    -- use the address to make sure that only valid strobes are generated
+    ENFORCE_STROBES : boolean := false;
+    REGISTERED      : boolean := true
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    wdata  : in  std_logic_vector(IN_DATA_WIDTH - 1 downto 0);
+    wstrb  : in  std_logic_vector((IN_DATA_WIDTH / 8) - 1 downto 0);
+    wlast  : in  std_logic;
+    wvalid : in  std_logic;
+    wready : out std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_data         : out BlockStreamType;
+    m_data_address : out AddressType;
+    m_data_ready   : in  std_logic
+    );
+end axi_deserialization;
+
+architecture arch_imp of axi_deserialization is
+  constant IN_STROBE_WIDTH      : integer := IN_DATA_WIDTH/8;
+  constant OUT_STROBE_WIDTH     : integer := OUT_DATA_WIDTH/8;
+  constant IN_FIELD_ADDR_WIDTH  : integer := log2_ceil(IN_DATA_WIDTH/8);
+  constant OUT_FIELD_ADDR_WIDTH : integer := log2_ceil(OUT_DATA_WIDTH/8);
+
+  signal bus_beatxDP, bus_beatxDN                   : LenType;
+  signal bus_block_beatxDP, bus_block_beatxDN       : LenType;
+  signal bus_block_dataxDP, bus_block_dataxDN       : std_logic_vector(IN_DATA_WIDTH - 1 downto 0);
+  signal bus_block_strobesxDP, bus_block_strobesxDN : std_logic_vector(IN_STROBE_WIDTH - 1 downto 0);
+
+  -- helper signals for connecting the individual processes
+  signal bus_beat_address : AddressType;
+  signal bus_strobes      : std_logic_vector(IN_STROBE_WIDTH - 1 downto 0);
+  signal bus_field_addr   : std_logic_vector(IN_FIELD_ADDR_WIDTH - 1 downto 0);
+  signal bus_last_field   : std_logic_vector(IN_FIELD_ADDR_WIDTH - 1 downto 0);
+
+  -- output signals from the deserialization to IN_DATA_WIDTH sized bus blocks
+  signal bus_block_address : AddressType;
+  signal bus_block_data    : std_logic_vector(IN_DATA_WIDTH - 1 downto 0);
+  signal bus_block_strobes : std_logic_vector(IN_STROBE_WIDTH - 1 downto 0);
+  signal bus_block_valid   : std_logic;
+  signal bus_block_ready   : std_logic;
+
+  signal data_block_address : AddressType;
+
+  signal address : AddressType;
+  signal data    : std_logic_vector(OUT_DATA_WIDTH - 1 downto 0);
+  signal strobes : std_logic_vector(OUT_DATA_WIDTH/8 - 1 downto 0);
+  signal last    : std_logic;
+  signal valid   : std_logic;
+
+  function size_to_strobemask (
+    SIZE : integer range 0 to 7)
+    return std_logic_vector is
+    variable res : std_logic_vector(127 downto 0);
+  begin  -- size_to_strobemask
+    case SIZE is
+      when 0 => res := mask(1, 128);
+      when 1 => res := mask(2, 128);
+      when 2 => res := mask(4, 128);
+      when 3 => res := mask(8, 128);
+      when 4 => res := mask(16, 128);
+      when 5 => res := mask(32, 128);
+      when 6 => res := mask(64, 128);
+      when 7 => res := ones(128);
+    end case;
+    return res;
+  end size_to_strobemask;
+
+begin
+  assert OUT_DATA_WIDTH >= IN_DATA_WIDTH and OUT_DATA_WIDTH mod IN_DATA_WIDTH = 0
+    report "OUT_DATA_WIDTH has to be a equal or multiple of IN_DATA_WIDTH." severity error;
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        bus_beatxDP          <= (others => '0');
+        bus_block_beatxDP    <= (others => '0');
+        bus_block_dataxDP    <= (others => '0');
+        bus_block_strobesxDP <= (others => '0');
+      else
+        bus_beatxDP          <= bus_beatxDN;
+        bus_block_beatxDP    <= bus_block_beatxDN;
+        bus_block_dataxDP    <= bus_block_dataxDN;
+        bus_block_strobesxDP <= bus_block_strobesxDN;
+      end if;
+    end if;
+  end process regs;
+
+  -- calculates the addresses of the current bus block, output block, and the bus beat
+  p_address : process(bus_beatxDP, bus_block_beatxDP, s_request) is
+    variable transfer_size                  : integer range 0 to 7;
+    variable transfer_aligned_start_address : UAddressType;
+    variable block_aligned_start_address    : UAddressType;
+    variable block_address                  : UAddressType;
+  begin
+    bus_block_address  <= (others => '0');
+    data_block_address <= (others => '0');
+    bus_beat_address   <= (others => '0');
+
+    if s_request.valid = '1' then
+      transfer_aligned_start_address := ualign_dynamic(s_request.address, s_request.size);
+      block_aligned_start_address    := ualign(s_request.address, IN_FIELD_ADDR_WIDTH);
+
+      block_address      := block_aligned_start_address + unsigned(bus_block_beatxDP) * IN_DATA_WIDTH/8;
+      bus_block_address  <= std_logic_vector(block_address);
+      data_block_address <= std_logic_vector(ualign(block_address, OUT_FIELD_ADDR_WIDTH));
+
+      -- The first bus beat has the address from the original request and is
+      -- possibly unaligned. All subsequent beats have transfer size alignment.
+      bus_beat_address <= s_request.address;
+      if unsigned(bus_beatxDP) /= 0 then
+        transfer_size    := to_integer(unsigned(s_request.size));
+        bus_beat_address <= std_logic_vector(transfer_aligned_start_address + unsigned(bus_beatxDP) * 2**transfer_size);
+      end if;
+    end if;
+  end process p_address;
+
+  -- generates bus strobes and the current field address from the bus beat address
+  p_bus_strobes : process(bus_beat_address, bus_beatxDP, s_request, wstrb,
+                          wvalid) is
+    variable address_strobes : std_logic_vector(IN_STROBE_WIDTH - 1 downto 0);
+    variable address_mask    : AddressType;
+    variable transfer_size   : integer range 0 to 7;
+    variable offset          : integer range 0 to IN_DATA_WIDTH/8 - 1;
+    variable sub_field       : integer range 0 to 2**IN_FIELD_ADDR_WIDTH-1;
+  begin
+    bus_strobes    <= (others => '0');
+    bus_field_addr <= (others => '0');
+    bus_last_field <= (others => '0');
+
+    address_strobes := (others => '0');
+    address_mask    := (others => '0');
+    transfer_size   := 0;
+    offset          := 0;
+    sub_field       := 0;
+
+    if wvalid = '1' and s_request.valid = '1' then
+      transfer_size := to_integer(unsigned(s_request.size));
+
+      -- Generate strobes with correct width for aligned bursts.
+      -- The width here only takes narrow bursts into account but ignores potential misalignment.
+      -- Additionally, the real alignment of narrow strobes is ignored here.
+      address_strobes := size_to_strobemask(transfer_size)(IN_STROBE_WIDTH - 1 downto 0);
+
+      -- Update the strobes for unaligned accesses.
+      -- Unalignment only is relevant in the first beat. All subsequent beats are aligned.
+      -- (requests with size 0 (=1 byte) are always aligned)
+      if unsigned(bus_beatxDP) = 0 and transfer_size > 0 then
+        address_mask    := dynamic_mask(transfer_size, ADDRESS_WIDTH);
+        offset          := to_integer(unsigned(s_request.address and address_mask));
+        address_strobes := address_strobes and not(dynamic_mask(offset, IN_STROBE_WIDTH));
+      end if;
+
+      -- shift strobes to the correct alignment in the case of narrow transfers
+      if transfer_size < log2_ceil(IN_DATA_WIDTH/8) then
+        address_mask    := mask(IN_FIELD_ADDR_WIDTH, ADDRESS_WIDTH);
+        sub_field       := to_integer(unsigned(bus_beat_address and address_mask) srl transfer_size);
+        address_strobes := std_logic_vector(unsigned(address_strobes) sll (sub_field*2**transfer_size));
+      end if;
+
+      if ENFORCE_STROBES = true then
+        bus_strobes <= address_strobes and wstrb;
+      else
+        bus_strobes <= wstrb;
+      end if;
+      bus_field_addr <= std_logic_vector(to_unsigned(sub_field, IN_FIELD_ADDR_WIDTH));
+      bus_last_field <= std_logic_vector(to_unsigned(2**(IN_FIELD_ADDR_WIDTH-transfer_size)-1, IN_FIELD_ADDR_WIDTH));
+    end if;
+  end process p_bus_strobes;
+
+  p_deserialization : process(bus_beatxDP, bus_block_beatxDP,
+                              bus_block_dataxDP, bus_block_ready,
+                              bus_block_strobesxDP, bus_block_valid,
+                              bus_field_addr, bus_last_field, bus_strobes,
+                              s_request, wdata, wlast, wvalid) is
+    variable combined_data    : std_logic_vector(IN_DATA_WIDTH - 1 downto 0);
+    variable combined_strobes : std_logic_vector(IN_STROBE_WIDTH - 1 downto 0);
+  begin
+    bus_block_dataxDN    <= bus_block_dataxDP;
+    bus_block_strobesxDN <= bus_block_strobesxDP;
+    bus_beatxDN          <= bus_beatxDP;
+    bus_block_beatxDN    <= bus_block_beatxDP;
+
+    wready            <= '0';
+    s_request_ready   <= '0';
+    bus_block_data    <= (others => '0');
+    bus_block_strobes <= (others => '0');
+    bus_block_valid   <= '0';
+
+    combined_data    := wdata;  -- use the full signal to get nice sensitivity lists from emacs
+    combined_strobes := (others => '0');
+
+    -- skip non data requests which should not occure anyway
+    if s_request.valid = '1' and s_request.request_type /= REQ_TYPE_DATA then
+      s_request_ready <= '1';
+    end if;
+
+    -- react on the ready from the interface
+    if bus_block_valid = '1' and bus_block_ready = '1' then
+      bus_block_dataxDN    <= (others => '0');
+      bus_block_strobesxDN <= (others => '0');
+      wready               <= '1';
+      s_request_ready      <= wlast;
+      if wlast = '0' then
+        bus_beatxDN       <= std_logic_vector(unsigned(bus_beatxDP)+1);
+        bus_block_beatxDN <= std_logic_vector(unsigned(bus_block_beatxDP)+1);
+      else
+        bus_beatxDN       <= (others => '0');
+        bus_block_beatxDN <= (others => '0');
+      end if;
+    end if;
+
+    if wvalid = '1' and s_request.valid = '1' and s_request.request_type = REQ_TYPE_DATA then
+      -- There is data from the bus which should be processed
+      -- Combine the data and the strobes with the data from the register.
+      combined_data := bus_block_dataxDP;
+      for I in 0 to IN_STROBE_WIDTH - 1 loop
+        if bus_strobes(I) = '1' then
+          combined_data(I*8+7 downto I*8) := wdata(I*8+7 downto I*8);
+        end if;
+      end loop;
+
+      combined_strobes := bus_block_strobesxDP or bus_strobes;
+
+      -- check if enough data the output block is full
+      if unsigned(bus_field_addr) < unsigned(bus_last_field) and wlast = '0' then
+        -- not enough data present
+        -- copy the data into the register and wait for more
+        wready               <= '1';
+        bus_beatxDN          <= std_logic_vector(unsigned(bus_beatxDP)+1);
+        bus_block_dataxDN    <= combined_data;
+        bus_block_strobesxDN <= combined_strobes;
+      else
+        -- with the new data the block is full
+        -- forward it to the output and wait for the ready
+        bus_block_data    <= combined_data;
+        bus_block_strobes <= combined_strobes;
+        bus_block_valid   <= '1';
+      end if;
+    end if;
+  end process p_deserialization;
+
+  addr_reg : entity work.register_stage
+    generic map(
+      WIDTH      => ADDRESS_WIDTH,
+      REGISTERED => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => data_block_address,
+      in_valid => bus_block_ready,
+      in_ready => open,  -- data_deserialization handles the synchronization
+
+      out_data  => address,
+      out_valid => open,  -- data_deserialization handles the synchronization
+      out_ready => m_data_ready
+      );
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => IN_DATA_WIDTH,
+      OUT_DATA_WIDTH => OUT_DATA_WIDTH,
+      REGISTERED     => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => bus_block_address(OUT_FIELD_ADDR_WIDTH - 1 downto IN_FIELD_ADDR_WIDTH),
+      in_field_len    => (others => '0'),
+
+      in_last  => wlast,
+      in_data  => bus_block_data,
+      in_valid => bus_block_valid,
+      in_ready => bus_block_ready,
+
+      out_data         => data,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_last         => last,
+      out_valid        => valid,
+      out_ready        => m_data_ready
+      );
+
+  strobe_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => IN_STROBE_WIDTH,
+      OUT_DATA_WIDTH => OUT_STROBE_WIDTH,
+      REGISTERED     => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => bus_block_address(OUT_FIELD_ADDR_WIDTH - 1 downto IN_FIELD_ADDR_WIDTH),
+      in_field_len    => (others => '0'),
+
+      in_last  => wlast,
+      in_data  => bus_block_strobes,
+      in_valid => bus_block_valid,
+      in_ready => open,  -- data_deserialization handles the synchronization
+
+      out_data         => strobes,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_last         => open,  -- data_deserialization handles the synchronization
+      out_valid        => open,  -- data_deserialization handles the synchronization
+      out_ready        => m_data_ready
+      );
+
+  p_output : process(address, data, last, strobes, valid) is
+  begin
+    m_data         <= BlockStreamType_default;
+    m_data_address <= (others => '0');
+
+    if valid = '1' then
+      m_data_address <= address;
+      m_data.data    <= data;
+      m_data.strobes <= strobes;
+      m_data.last    <= last;
+      m_data.valid   <= '1';
+    end if;
+  end process p_output;
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/axi/cpu_read_responder.vhd b/fpga/src/memsec/hdl/framework/axi/cpu_read_responder.vhd
new file mode 100644
index 0000000..06a2247
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/axi/cpu_read_responder.vhd
@@ -0,0 +1,132 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! [Slave] Translates the internal data stream into beats on the AXI read channel.
+--!
+--! The stream is expected to be in correct sequence and to contain only data
+--! beats which are relevant for the receiver. When a narrow transfers has been
+--! requested, each data block from the stream is placed on the AXI read channel
+--! for the correct number of transfer cycles.
+entity cpu_read_responder is
+  generic(
+    C_S_AXI_ID_WIDTH    : integer := 12;
+    C_S_AXI_DATA_WIDTH  : integer := 32;
+    C_S_AXI_RUSER_WIDTH : integer := 0
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_axi_rid    : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_rdata  : out std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_rresp  : out std_logic_vector(1 downto 0);
+    s_axi_rlast  : out std_logic;
+    s_axi_ruser  : out std_logic_vector(C_S_AXI_RUSER_WIDTH - 1 downto 0);
+    s_axi_rvalid : out std_logic;
+    s_axi_rready : in  std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic
+    );
+end cpu_read_responder;
+
+architecture arch_imp of cpu_read_responder is
+  constant BUS_BYTE_FIELD_ADDR_WIDTH : integer := log2_ceil(C_S_AXI_DATA_WIDTH/8);
+
+  signal BlockCounterxDP, BlockCounterxDN : std_logic_vector(s_request.len'length downto 0);
+
+  type tASizeToMaskLUT is array (0 to 2**2 - 1) of std_logic_vector(2 downto 0);
+  constant ASIZE_MASKING_LUT : tASizeToMaskLUT := (
+    0 => "111",
+    1 => "110",
+    2 => "100",
+    3 => "000");
+
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        BlockCounterxDP <= (others => '0');
+      else
+        BlockCounterxDP <= BlockCounterxDN;
+      end if;
+    end if;
+  end process regs;
+
+  -- read back channel
+  collapse_logic : process(BlockCounterxDP, s_axi_rready, s_request) is
+    variable vAddrOffset : std_logic_vector(BlockCounterxDP'length-1 downto 0);
+    variable vCurBlock   : unsigned(BlockCounterxDP'length-1 downto 0);
+    variable vSizeInt    : integer;
+    variable vSize       : unsigned(BlockCounterxDP'length-1 downto 0);
+    variable vLen        : std_logic_vector(BlockCounterxDP'length-1 downto 0);
+  begin
+    -- Default outputs
+    BlockCounterxDN <= BlockCounterxDP;
+    s_request_ready <= '0';
+
+    s_axi_rid    <= s_request.id;
+    s_axi_ruser  <= (others => '0');
+    s_axi_rdata  <= s_request.data(C_S_AXI_DATA_WIDTH-1 downto 0);
+    s_axi_rvalid <= '0';
+    s_axi_rlast  <= '0';
+    s_axi_rresp  <= (others => '0');--s_request.error & '0';
+
+    if s_request.valid = '1' then
+      s_request_ready <= '0';
+      s_axi_rvalid    <= '1';
+
+      vSizeInt    := to_integer(unsigned(s_request.size));
+      vSize       := shift_left((vSize'left downto 1                            => '0') & '1', vSizeInt);
+      vLen        := (vLen'length-1 downto s_request.len'length                 => '0') & s_request.len;
+      vLen        := std_logic_vector(shift_left(unsigned(vLen), to_integer(unsigned(s_request.size))));
+      vAddrOffset := (BlockCounterxDP'length-1 downto BUS_BYTE_FIELD_ADDR_WIDTH => '0') & (s_request.address(BUS_BYTE_FIELD_ADDR_WIDTH-1 downto 0) and ASIZE_MASKING_LUT(to_integer(unsigned(s_request.size)))(BUS_BYTE_FIELD_ADDR_WIDTH-1 downto 0));
+      vCurBlock   := unsigned(BlockCounterxDP) + unsigned(vAddrOffset);
+
+      if s_axi_rready = '1' then
+        -- Increase counter and current address depending on size
+        BlockCounterxDN <= std_logic_vector(unsigned(BlockCounterxDP) + vSize(BlockCounterxDP'length-1 downto 0));
+
+        -- Last subblock before data stream width is reached
+        if vSizeInt >= 0 and vSizeInt < ASIZE_MASKING_LUT'length then
+          if std_logic_vector(vCurBlock(BUS_BYTE_FIELD_ADDR_WIDTH-1 downto 0)) = ASIZE_MASKING_LUT(vSizeInt)(BUS_BYTE_FIELD_ADDR_WIDTH-1 downto 0) then 
+            s_request_ready <= '1';
+          end if;
+        end if;
+
+        -- Last block within transfer
+        if (BlockCounterxDP = vLen) then
+          s_request_ready <= '1';
+          s_axi_rlast     <= s_request.last_request;
+          BlockCounterxDN <= (others => '0');
+        end if;
+      end if;
+    end if;
+  end process collapse_logic;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/axi/cpu_request_modifier.vhd b/fpga/src/memsec/hdl/framework/axi/cpu_request_modifier.vhd
new file mode 100644
index 0000000..945f526
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/axi/cpu_request_modifier.vhd
@@ -0,0 +1,268 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! [Slave] Translates AXI read/write address requests to the internal data stream.
+--!
+--! Additionally, wrapping bursts get decoded. The general solution to support wrapping bursts is to
+--! split the wrapping into two incremental bursts. However, when the wrapping burst is small it is
+--! more efficient perform the reording within the pipeline before returning the data using the
+--! stream_axi_wrap_burst_cache. In these situations the wrapping bursts are represented as single
+--! incremental bursts starting at the wrap boundary.
+--!
+--! Note that only the fields that deal with the original request as well as the block_address and
+--! block_len fields are populated in the internal data stream. Furthermore, requests are widenend
+--! to align with the internal DATASTREAM_DATA_WIDTH.
+entity cpu_request_modifier is
+  generic(
+    C_S_AXI_ID_WIDTH    : integer   := 12;
+    C_S_AXI_ADDR_WIDTH  : integer   := 32;
+    C_S_AXI_DATA_WIDTH  : integer   := 32;
+    C_S_AXI_AUSER_WIDTH : integer   := 16;
+    READ                : std_logic := '0';
+    DOUBLE_LINEFILL     : boolean   := false
+    );
+  port(
+    -- Ports of Axi Slave Bus Interface S_AXI
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_axi_aid     : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_aaddr   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_alen    : in  std_logic_vector(7 downto 0);
+    s_axi_asize   : in  std_logic_vector(2 downto 0);
+    s_axi_aburst  : in  std_logic_vector(1 downto 0);
+    s_axi_alock   : in  std_logic;
+    s_axi_acache  : in  std_logic_vector(3 downto 0);
+    s_axi_aprot   : in  std_logic_vector(2 downto 0);
+    s_axi_aqos    : in  std_logic_vector(3 downto 0);
+    s_axi_aregion : in  std_logic_vector(3 downto 0);
+    s_axi_auser   : in  std_logic_vector(C_S_AXI_AUSER_WIDTH - 1 downto 0);
+    s_axi_avalid  : in  std_logic;
+    s_axi_aready  : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end cpu_request_modifier;
+
+architecture behavioral of cpu_request_modifier is
+  constant STATE_DEFAULT        : std_logic := '0';
+  constant STATE_WRAPPING_BURST : std_logic := '1';
+
+  constant DATASTREAM_ALIGN_BIT        : natural                      := log2_ceil(DATASTREAM_DATA_BYTES);
+  constant AXI_ASIZE_CACHED_BURST_MASK : std_logic_vector(2 downto 0) := std_logic_vector(to_unsigned(log2_ceil(C_S_AXI_DATA_WIDTH/8), 3));
+
+  signal StatexDP, StatexDN           : std_logic;
+  signal AxiAddressxDP, AxiAddressxDN : std_logic_vector(ADDRESS_WIDTH - 1 downto 0);
+  signal AxiLenxDP, AxiLenxDN         : std_logic_vector(s_axi_alen'length - 1 downto 0);
+  signal AxiSizexDP, AxiSizexDN       : std_logic_vector(s_axi_asize'length - 1 downto 0);
+  signal AxiIdxDP, AxiIdxDN           : std_logic_vector(s_axi_aid'length - 1 downto 0);
+  signal AxiCachexDP, AxiCachexDN     : std_logic_vector(s_axi_acache'length - 1 downto 0);
+  signal AxiUserxDP, AxiUserxDN       : std_logic_vector(s_axi_auser'length - 1 downto 0);
+  signal AxiProtxDP, AxiProtxDN       : std_logic_vector(s_axi_aprot'length - 1 downto 0);
+  signal AxiLockxDP, AxiLockxDN       : std_logic;
+  signal AxiQosxDP, AxiQosxDN         : std_logic_vector(s_axi_aqos'length-1 downto 0);
+  signal AxiRegionxDP, AxiRegionxDN   : std_logic_vector(s_axi_aregion'length-1 downto 0);
+
+begin
+  assert s_axi_avalid /= '1' or s_axi_aburst = BURST_TYPE_INCREMENTAL or s_axi_aburst = BURST_TYPE_WRAPPING
+    report "Burst type is not supported." severity error;
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        StatexDP      <= STATE_DEFAULT;
+        AxiLenxDP     <= (others => '0');
+        AxiSizexDP    <= (others => '0');
+        AxiAddressxDP <= (others => '0');
+        AxiIdxDP      <= (others => '0');
+        AxiCachexDP   <= (others => '0');
+        AxiUserxDP    <= (others => '0');
+        AxiProtxDP    <= (others => '0');
+        AxiLockxDP    <= '0';
+        AxiQosxDP     <= (others => '0');
+        AxiRegionxDP  <= (others => '0');
+      else
+        StatexDP      <= StatexDN;
+        AxiLenxDP     <= AxiLenxDN;
+        AxiSizexDP    <= AxiSizexDN;
+        AxiAddressxDP <= AxiAddressxDN;
+        AxiIdxDP      <= AxiIdxDN;
+        AxiCachexDP   <= AxiCachexDN;
+        AxiUserxDP    <= AxiUserxDN;
+        AxiProtxDP    <= AxiProtxDN;
+        AxiLockxDP    <= AxiLockxDN;
+        AxiQosxDP     <= AxiQosxDN;
+        AxiRegionxDP  <= AxiRegionxDN;
+      end if;
+    end if;
+  end process regs;
+
+  form_request : process(AxiAddressxDP, AxiCachexDP, AxiIdxDP, AxiLenxDP,
+                         AxiLockxDP, AxiProtxDP, AxiQosxDP, AxiRegionxDP,
+                         AxiSizexDP, StatexDP, m_request_ready, s_axi_aaddr,
+                         s_axi_aburst, s_axi_acache, s_axi_aid, s_axi_alen,
+                         s_axi_alock, s_axi_aprot, s_axi_aqos, s_axi_aregion,
+                         s_axi_asize, s_axi_avalid) is
+    variable vAxiAAddr : UAddressType;  -- Request address from the bus or register.
+    variable vAxiALen  : ULenType;      -- Request length from the bus or register.
+    variable vAxiASize : USizeType;     -- Request size from the bus or register.
+
+    variable vWrapBoundary : UAddressType;  -- Lowest address in a wrapping burst.
+    variable vAxiALenBytes : UByteLenType;  -- Request length in bytes.
+    variable vStartAddr    : UAddressType;  -- Request address or the wrapping boundary.
+    variable vBlockAddr    : UAddressType;  -- Start address aligned with DATASTREAM_DATA_WIDTH.
+  begin
+    StatexDN      <= StatexDP;
+    AxiLenxDN     <= AxiLenxDP;
+    AxiSizexDN    <= AxiSizexDP;
+    AxiAddressxDN <= AxiAddressxDP;
+    AxiIdxDN      <= AxiIdxDP;
+    AxiCachexDN   <= AxiCachexDP;
+    AxiUserxDN    <= AxiUserxDP;
+    AxiProtxDN    <= AxiProtxDP;
+    AxiLockxDN    <= AxiLockxDP;
+    AxiQosxDN     <= AxiQosxDP;
+    AxiRegionxDN  <= AxiRegionxDP;
+
+    -- Setup the variables, either from the original inputs or the registers.
+    vAxiAAddr := uzextend(s_axi_aaddr, vAxiAAddr'length);
+    vAxiALen  := unsigned(s_axi_alen);
+    vAxiASize := unsigned(s_axi_asize);
+    if StatexDP = STATE_WRAPPING_BURST then
+      vAxiAAddr := uzextend(AxiAddressxDP, vAxiAAddr'length);
+      vAxiALen  := unsigned(AxiLenxDP);
+      vAxiASize := unsigned(AxiSizexDP);
+    end if;
+
+    -- Clean the address by aligning it with the axi request size and determine the request length
+    -- in bytes.
+    vAxiAAddr     := ualign_dynamic(vAxiAAddr, vAxiASize);
+    vAxiALenBytes := uaxi_bytes_len(vAxiALen, vAxiASize, vAxiALenBytes'length);
+
+    -- Calculate wrap boundary. This alignment works because the length of the wrapping bursts is
+    -- always a power of two and the -1 encoded length field corresponds to the req. dynamic mask.
+    vWrapBoundary := vAxiAAddr and not(uzextend(vAxiALenBytes, ADDRESS_WIDTH));
+
+    -- Control slave port
+    s_axi_aready <= m_request_ready;
+
+    -- Default outputs
+    m_request              <= StreamType_default;
+    m_request.read         <= READ;
+    m_request.size         <= s_axi_asize;
+    m_request.id           <= s_axi_aid;
+    m_request.cache        <= s_axi_acache;
+    m_request.prot         <= s_axi_aprot;
+    m_request.lock         <= s_axi_alock;
+    m_request.qos          <= s_axi_aqos;
+    m_request.burst        <= s_axi_aburst;
+    m_request.region       <= s_axi_aregion;
+    m_request.last_request <= '1';
+    m_request.valid        <= s_axi_avalid;
+    m_request.user         <= s_axi_auser;
+
+    vStartAddr := vAxiAAddr;
+    case StatexDP is
+      when STATE_DEFAULT =>
+        if s_axi_aburst = BURST_TYPE_INCREMENTAL or (vWrapBoundary = vAxiAAddr) then
+          -- Incremental burst and wrapping burst which do not actually wrap are treated as
+          -- regular incremental bursts.
+          m_request.burst <= BURST_TYPE_INCREMENTAL;
+
+        elsif s_axi_aburst = BURST_TYPE_WRAPPING and vAxiALenBytes = "000011111" and s_axi_asize = AXI_ASIZE_CACHED_BURST_MASK then
+          -- Optimization: Wrapping burst in cache line size.
+          -- Convert into incremental burst and reorder the data later in the pipeline using
+          -- the stream_axi_wrap_burst_cache.
+          vStartAddr := vWrapBoundary;
+
+        elsif DOUBLE_LINEFILL = true and s_axi_aburst = BURST_TYPE_WRAPPING and vAxiALenBytes = "000111111" and s_axi_asize = AXI_ASIZE_CACHED_BURST_MASK then
+          -- Optimization: Wrapping burst with double cache line size.
+          -- Applies the same late reording as in the previous case but with double cache line size.
+          -- TODO Refactoring the generic interface by providing the reorder cache size instead of
+          --      the DOUBLE_LINEFILL flag should permit to merge both optimization paths.
+          vStartAddr := vWrapBoundary;
+
+        elsif s_axi_aburst = BURST_TYPE_WRAPPING then
+          -- Actual wrapping burst that has to be split, issue the first incremental burst.
+          vAxiALenBytes := vAxiALenBytes - slice(vAxiAAddr - vWrapBoundary, vAxiALenBytes'left, 0);
+
+          m_request.last_request <= '0';
+          m_request.burst        <= BURST_TYPE_INCREMENTAL;
+
+          -- Save requests
+          AxiLenxDN     <= s_axi_alen;
+          AxiSizexDN    <= s_axi_asize;
+          AxiAddressxDN <= s_axi_aaddr;
+          AxiIdxDN      <= s_axi_aid;
+          AxiCachexDN   <= s_axi_acache;
+          AxiUserxDN    <= s_axi_auser;
+          AxiProtxDN    <= s_axi_aprot;
+          AxiLockxDN    <= s_axi_alock;
+          AxiQosxDN     <= s_axi_aqos;
+          AxiRegionxDN  <= s_axi_aregion;
+
+          if m_request_ready = '1' then
+            StatexDN <= STATE_WRAPPING_BURST;
+          end if;
+        end if;
+
+      when STATE_WRAPPING_BURST =>
+        -- Issue the second incremental burst.
+        vAxiALenBytes := slice(vAxiAAddr - vWrapBoundary - 1, vAxiALenBytes'left, 0);
+        vAxiAAddr     := vWrapBoundary;
+        vStartAddr    := vWrapBoundary;
+
+        m_request.size         <= AxiSizexDP;
+        m_request.id           <= AxiIdxDP;
+        m_request.cache        <= AxiCachexDP;
+        m_request.prot         <= AxiProtxDP;
+        m_request.lock         <= AxiLockxDP;
+        m_request.burst        <= BURST_TYPE_INCREMENTAL;
+        m_request.user         <= AxiUserxDP;
+        m_request.qos          <= AxiQosxDP;
+        m_request.region       <= AxiRegionxDP;
+        m_request.last_request <= '1';
+        m_request.valid        <= '1';
+        s_axi_aready           <= '0';
+
+        if m_request_ready = '1' then
+          StatexDN <= STATE_DEFAULT;
+        end if;
+      when others => null;
+    end case;
+
+    m_request.address <= std_logic_vector(vAxiAAddr);
+    m_request.len     <= std_logic_vector(slice(vAxiALenBytes srl to_integer(vAxiASize), m_request.len'left, 0));
+
+    -- Calculate the block address aligned with the data stream data width and the asociated block_len.
+    vBlockAddr              := ualign(vStartAddr, DATASTREAM_ALIGN_BIT);
+    m_request.block_address <= std_logic_vector(vBlockAddr);
+    m_request.block_len     <= std_logic_vector(slice((vStartAddr + vAxiALenBytes - vBlockAddr) / DATASTREAM_DATA_BYTES, m_request.block_len'left, 0));
+  end process form_request;
+
+end behavioral;
diff --git a/fpga/src/memsec/hdl/framework/axi/cpu_write_data.vhd b/fpga/src/memsec/hdl/framework/axi/cpu_write_data.vhd
new file mode 100644
index 0000000..765130f
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/axi/cpu_write_data.vhd
@@ -0,0 +1,144 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! [Slave] Merges data received via the AXI write channel into the internal data stream.
+entity cpu_write_data is
+  generic(
+    C_S_AXI_DATA_WIDTH  : integer := 32;
+    C_S_AXI_WUSER_WIDTH : integer := 0
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_axi_wdata  : in  std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_wstrb  : in  std_logic_vector((C_S_AXI_DATA_WIDTH / 8) - 1 downto 0);
+    s_axi_wlast  : in  std_logic;
+    s_axi_wuser  : in  std_logic_vector(C_S_AXI_WUSER_WIDTH - 1 downto 0);
+    s_axi_wvalid : in  std_logic;
+    s_axi_wready : out std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end cpu_write_data;
+
+architecture arch_imp of cpu_write_data is
+  signal to_extractor, to_axideser, to_modifier                   : StreamType;
+  signal to_extractor_ready, to_axideser_ready, to_modifier_ready : std_logic;
+
+  signal data         : BlockStreamType;
+  signal data_address : AddressType;
+  signal data_ready   : std_logic;
+begin
+  synchronizer : entity work.stream_ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2,
+      REGISTERS => 0
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      s_request       => s_request,
+      s_request_ready => s_request_ready,
+
+      m_requests_ready(0) => to_extractor_ready,
+      m_requests_ready(1) => to_modifier_ready,
+
+      m_requests_active(0) => '1',
+      m_requests_active(1) => '1',
+
+      m_requests(0) => to_extractor,
+      m_requests(1) => to_modifier
+      );
+
+  -- extract the original request from the internal data stream by dropping
+  -- all the data beats
+  extractor : entity work.stream_request_extractor
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      s_request       => to_extractor,
+      s_request_ready => to_extractor_ready,
+
+      m_request       => to_axideser,
+      m_request_ready => to_axideser_ready
+      );
+
+  -- decode AXI write channel into stream of aligned data blocks incl. strobes
+  -- and address but without narrow transfer support
+  deserialization : entity work.axi_deserialization
+    generic map(
+      IN_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      wdata  => s_axi_wdata,
+      wstrb  => s_axi_wstrb,
+      wlast  => s_axi_wlast,
+      wvalid => s_axi_wvalid,
+      wready => s_axi_wready,
+
+      s_request       => to_axideser,
+      s_request_ready => to_axideser_ready,
+
+      m_data         => data,
+      m_data_address => data_address,
+      m_data_ready   => data_ready
+      );
+
+  -- perform the actual modification of the internal data stream
+  modifier : entity work.stream_data_modifier
+    generic map(
+      MATCH_TYPE      => 0,     -- virtual addresses should be matched
+      IGNORE_METADATA => true,  -- don't touch metadata
+      IGNORE_TREE_REQ => true,  -- don't touch tree requests
+      IGNORE_DATA_REQ => false  -- modify real data
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      s_data               => data,
+      s_data_address       => data_address,
+      s_data_address_valid => data.valid,
+      s_data_ready         => data_ready,
+
+      s_request       => to_modifier,
+      s_request_ready => to_modifier_ready,
+
+      m_request       => m_request,
+      m_request_ready => m_request_ready
+      );
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/axi/memory_read_fetcher.vhd b/fpga/src/memsec/hdl/framework/axi/memory_read_fetcher.vhd
new file mode 100644
index 0000000..4a3dc91
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/axi/memory_read_fetcher.vhd
@@ -0,0 +1,144 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! [Master] Reads data from the AXI read channel and translates them to the internal stream.
+--!
+--! After the memory_read_fetcher, a transaction typically consists of multiple
+--! beats. (depending on the transaction and stream width)
+--! Currently, only internal stream widths which are equally wide or wider are
+--! are supported.
+entity memory_read_fetcher is
+  generic(
+    C_M_AXI_ID_WIDTH    : integer := 12;
+    C_M_AXI_DATA_WIDTH  : integer := 32;
+    C_M_AXI_RUSER_WIDTH : integer := 0
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    m_axi_rid    : in  std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_rdata  : in  std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+    m_axi_rresp  : in  std_logic_vector(1 downto 0);
+    m_axi_rlast  : in  std_logic;
+    m_axi_ruser  : in  std_logic_vector(C_M_AXI_RUSER_WIDTH - 1 downto 0);
+    m_axi_rvalid : in  std_logic;
+    m_axi_rready : out std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end memory_read_fetcher;
+
+architecture arch_imp of memory_read_fetcher is
+  signal blockNrxDP, blockNrxDN : std_logic_vector(AXI_LEN_WIDTH-1 downto 0);
+
+  signal bus_data  : std_logic_vector(DATASTREAM_DATA_WIDTH - 1 downto 0);
+  signal bus_last  : std_logic;
+  signal bus_valid : std_logic;
+  signal bus_ready : std_logic;
+begin
+  assert DATASTREAM_DATA_WIDTH >= C_M_AXI_DATA_WIDTH and DATASTREAM_DATA_WIDTH mod C_M_AXI_DATA_WIDTH = 0
+    report "DATASTREAM_DATA_WIDTH has to be a multiple of C_M_AXI_DATA_WIDTH." severity error;
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        blockNrxDP <= (others => '0');
+      else
+        blockNrxDP <= blockNrxDN;
+      end if;
+    end if;
+  end process regs;
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => C_M_AXI_DATA_WIDTH,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => true
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => m_axi_rlast,
+
+      in_data  => m_axi_rdata,
+      in_valid => m_axi_rvalid,
+      in_ready => m_axi_rready,
+
+      out_data         => bus_data,
+      out_last         => bus_last,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => bus_valid,
+      out_ready        => bus_ready
+      );
+
+  work_proc : process(blockNrxDP, bus_data, bus_last, bus_valid, m_request_ready,
+                 s_request) is
+    constant PADDING_BIT_COUNT : integer := log2_ceil(DATASTREAM_DATA_WIDTH/8);
+  begin
+    blockNrxDN <= blockNrxDP;
+
+    m_request       <= StreamType_default;
+    s_request_ready <= '0';
+    bus_ready       <= '0';
+
+    if s_request.valid = '1' and s_request.metadata = '1' then
+      -- Metadata blocks are simply forwarded and ignored. These blocks are
+      -- for example used for cache hits.
+      m_request       <= s_request;
+      s_request_ready <= m_request_ready;
+    elsif s_request.valid = '1' and bus_valid = '1' then
+      m_request      <= s_request;
+      m_request.data <= bus_data;
+
+      -- increment the length and address fields, assuming a 1:1 mapping
+      -- other layouts have to fixup the fields after the memory_read_fetcher
+      m_request.block_len     <= std_logic_vector(unsigned(s_request.block_len) - unsigned(blockNrxDP));
+      m_request.block_address <= std_logic_vector(unsigned(s_request.block_address) + unsigned(blockNrxDP & zeros(PADDING_BIT_COUNT)));
+      m_request.virt_address  <= std_logic_vector(unsigned(s_request.virt_address) + unsigned(blockNrxDP & zeros(PADDING_BIT_COUNT)));
+
+      if m_request_ready = '1' then
+        bus_ready  <= '1';
+        blockNrxDN <= std_logic_vector(unsigned(blockNrxDP) + to_unsigned(1, blockNrxDP'length));
+        if bus_last = '1' then
+          blockNrxDN      <= (others => '0');
+          s_request_ready <= '1';
+        end if;
+      end if;
+    end if;
+
+  end process work_proc;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/axi/memory_read_issuer.vhd b/fpga/src/memsec/hdl/framework/axi/memory_read_issuer.vhd
new file mode 100644
index 0000000..0673f3f
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/axi/memory_read_issuer.vhd
@@ -0,0 +1,167 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! [Master] Translates requests on the internal stream into AXI read requests.
+entity memory_read_issuer is
+  generic(
+    C_M_AXI_ID_WIDTH     : integer := 12;
+    C_M_AXI_ADDR_WIDTH   : integer := 32;
+    C_M_AXI_DATA_WIDTH   : integer := 32;
+    C_M_AXI_ARUSER_WIDTH : integer := 0
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    m_axi_arid    : out std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_araddr  : out std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+    m_axi_arlen   : out std_logic_vector(7 downto 0);
+    m_axi_arsize  : out std_logic_vector(2 downto 0);
+    m_axi_arburst : out std_logic_vector(1 downto 0);
+    m_axi_arlock  : out std_logic;
+    m_axi_arcache : out std_logic_vector(3 downto 0);
+    m_axi_arprot  : out std_logic_vector(2 downto 0);
+    m_axi_arqos   : out std_logic_vector(3 downto 0);
+    m_axi_aruser  : out std_logic_vector(C_M_AXI_ARUSER_WIDTH - 1 downto 0);
+    m_axi_arvalid : out std_logic;
+    m_axi_arready : in  std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end memory_read_issuer;
+
+architecture arch_imp of memory_read_issuer is
+  constant ASIZE : std_logic_vector(2 downto 0) := std_logic_vector(to_unsigned(log2_ceil(C_M_AXI_DATA_WIDTH/8), 3));
+
+  signal reqxDP, reqxDN             : StreamType;
+  signal requestedxDP, requestedxDN : std_logic;
+
+  signal masked_reg : StreamType;
+
+  -- helper signals for the read address stream
+  signal axi_araddr  : std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+  signal axi_arlen   : std_logic_vector(7 downto 0);
+  signal axi_arcache : std_logic_vector(3 downto 0);
+  signal axi_arprot  : std_logic_vector(2 downto 0);
+  signal axi_arvalid : std_logic;
+  signal axi_arqos   : std_logic_vector(3 downto 0);
+  signal axi_arlock  : std_logic;
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        reqxDP       <= StreamType_default;
+        requestedxDP <= '0';
+      else
+        reqxDP       <= reqxDN;
+        requestedxDP <= requestedxDN;
+      end if;
+    end if;
+  end process regs;
+
+  mask : process(requestedxDP, reqxDP) is
+  begin
+    masked_reg       <= reqxDP;
+    masked_reg.valid <= reqxDP.valid and (requestedxDP or reqxDP.metadata);
+  end process mask;
+  m_request <= masked_reg;
+
+  work : process(axi_arvalid, m_axi_arready, m_request_ready, masked_reg.valid,
+                 requestedxDP, reqxDP, s_request) is
+    constant LENGTH_SHIFT_WIDTH : integer := log2_ceil(DATASTREAM_DATA_WIDTH/C_M_AXI_DATA_WIDTH);
+    variable bypass             : boolean;
+  begin
+    reqxDN       <= reqxDP;
+    requestedxDN <= requestedxDP;
+
+    s_request_ready <= '0';
+    axi_araddr      <= (others => '0');
+    axi_arlen       <= (others => '0');
+    axi_arcache     <= (others => '0');
+    axi_arprot      <= (others => '0');
+    axi_arvalid     <= '0';
+    axi_arqos       <= (others => '0');
+    axi_arlock      <= '0';
+
+    bypass := false;
+
+    if masked_reg.valid = '1' and m_request_ready = '1' then
+      reqxDN.valid <= '0';
+      requestedxDN <= '0';
+      bypass       := true;
+    end if;
+
+    -- register is empty
+    -- forward the new request directly from the input
+    if s_request.valid = '1' and (reqxDP.valid = '0' or bypass) then
+      reqxDN          <= s_request;
+      s_request_ready <= '1';
+      if s_request.metadata = '0' then
+        axi_araddr  <= s_request.block_address(C_M_AXI_ADDR_WIDTH-1 downto 0);
+        axi_arlen   <= s_request.block_len(AXI_LEN_WIDTH-LENGTH_SHIFT_WIDTH-1 downto 0) & ones(LENGTH_SHIFT_WIDTH);
+        axi_arcache <= s_request.cache;
+        axi_arprot  <= s_request.prot;
+        axi_arqos   <= s_request.qos;
+        axi_arlock  <= s_request.lock;
+        axi_arvalid <= '1';
+      end if;
+    -- or make the request from the meta register if it has not been accepted yet
+    elsif reqxDP.valid = '1' and reqxDP.metadata = '0' and requestedxDP = '0' then
+      axi_araddr  <= reqxDP.block_address(C_M_AXI_ADDR_WIDTH-1 downto 0);
+      axi_arlen   <= reqxDP.block_len(AXI_LEN_WIDTH-LENGTH_SHIFT_WIDTH-1 downto 0) & ones(LENGTH_SHIFT_WIDTH);
+      axi_arcache <= reqxDP.cache;
+      axi_arprot  <= reqxDP.prot;
+      axi_arqos   <= reqxDP.qos;
+      axi_arlock  <= reqxDP.lock;
+      axi_arvalid <= '1';
+    end if;
+
+    -- remember if the request has already been accepted
+    if axi_arvalid = '1' and m_axi_arready = '1' then
+      requestedxDN <= '1';
+    end if;
+  end process work;
+
+  -- map read address stream
+  m_axi_arid    <= (others => '0');  -- the data should arrive in the requested order
+  m_axi_araddr  <= axi_araddr;
+  m_axi_arlen   <= axi_arlen;
+  m_axi_arsize  <= ASIZE;
+  m_axi_arburst <= BURST_TYPE_INCREMENTAL;  -- all requests towards the memory are incremental
+  m_axi_arlock  <= axi_arlock;
+  m_axi_arcache <= axi_arcache;
+  m_axi_arprot  <= axi_arprot;
+  m_axi_arqos   <= axi_arqos;
+  m_axi_aruser  <= (others => '0');     -- no user data support
+  m_axi_arvalid <= axi_arvalid;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/axi/memory_to_cpu_write_responder.vhd b/fpga/src/memsec/hdl/framework/axi/memory_to_cpu_write_responder.vhd
new file mode 100644
index 0000000..93f925b
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/axi/memory_to_cpu_write_responder.vhd
@@ -0,0 +1,170 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! [Master+Slave] Forwards the AXI write response channel from the master to the slave.
+--!
+--! Additionally, if present, errors from the internal data stream are
+--! incorporated into the response. Such errors occure for example when
+--! an authentication failure has been detected.
+entity memory_to_cpu_write_responder is
+  generic(
+    C_M_AXI_ID_WIDTH    : integer := 6;
+    C_M_AXI_BUSER_WIDTH : integer := 0;
+    C_S_AXI_ID_WIDTH    : integer := 12;
+    C_S_AXI_BUSER_WIDTH : integer := 0;
+    REGISTERED          : boolean := true
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    m_axi_bid    : in  std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_bresp  : in  std_logic_vector(1 downto 0);
+    m_axi_buser  : in  std_logic_vector(C_M_AXI_BUSER_WIDTH - 1 downto 0);
+    m_axi_bvalid : in  std_logic;
+    m_axi_bready : out std_logic;
+
+    s_axi_bid    : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_bresp  : out std_logic_vector(1 downto 0);
+    s_axi_buser  : out std_logic_vector(C_S_AXI_BUSER_WIDTH - 1 downto 0);
+    s_axi_bvalid : out std_logic;
+    s_axi_bready : in  std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    release_lock       : out std_logic;
+    release_lock_ready : in  std_logic
+    );
+end memory_to_cpu_write_responder;
+
+architecture arch_imp of memory_to_cpu_write_responder is
+
+  signal req_sentxDP, req_sentxDN   : std_logic;
+  signal data_sentxDP, data_sentxDN : std_logic;
+  signal id_sentxDP, id_sentxDN     : std_logic;
+
+  signal request       : StreamType;
+  signal request_ready : std_logic;
+
+  -- helper signals for the write response stream
+  signal axi_bid    : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_bresp  : std_logic_vector(1 downto 0);
+  signal axi_bvalid : std_logic;
+
+  -- helper signal for master ready / valid
+  signal m_bvalid, m_bready : std_logic;
+
+  signal error_accxDP, error_accxDN : std_logic;
+begin
+
+  reg_stage : entity work.stream_register_stage
+    generic map(
+      REGISTERED => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request,
+      in_valid => s_request.valid,
+      in_ready => s_request_ready,
+
+      out_data  => request,
+      out_valid => open,
+      out_ready => request_ready
+      );
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        error_accxDP <= '0';
+      else
+        error_accxDP <= error_accxDN;
+      end if;
+    end if;
+  end process regs;
+
+  accumulate_and_respond_errors : process(axi_bvalid, error_accxDP, m_bvalid,
+                                          request.error, request.id,
+                                          request.last_request, request.valid,
+                                          s_axi_bready) is
+  begin
+    error_accxDN  <= error_accxDP;
+    m_bready      <= '0';
+    request_ready <= '0';
+
+    axi_bid    <= (others => '0');
+    axi_bresp  <= (others => '0');
+    axi_bvalid <= '0';
+
+    -- reset as soon as the transfer has been acknowledged
+    if axi_bvalid = '1' and s_axi_bready = '1' then
+      error_accxDN <= '0';
+    end if;
+
+    if request.valid = '1' and m_bvalid = '1' and request.last_request = '1' then
+      -- respond the error accumulation result to the slave at the end of the transfer
+      axi_bid       <= request.id;
+      axi_bvalid    <= '1';
+      m_bready      <= s_axi_bready;
+      request_ready <= s_axi_bready;
+      if error_accxDP = '1' or request.error = '1' then
+        axi_bresp <= "10";
+      end if;
+    elsif request.valid = '1' and m_bvalid = '1' then
+      -- accumulate error flags accross the individual sub requests
+      error_accxDN  <= error_accxDP or request.error;
+      m_bready      <= '1';
+      request_ready <= '1';
+    end if;
+  end process accumulate_and_respond_errors;
+
+  ready_synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => m_axi_bvalid,
+      in_ready => m_axi_bready,
+
+      out_valid(0)  => m_bvalid,
+      out_valid(1)  => release_lock,
+      out_active(0) => '1',
+      out_active(1) => '1',
+      out_ready(0)  => m_bready,
+      out_ready(1)  => release_lock_ready
+      );
+
+  -- map to slave write resonse stream
+  s_axi_bid    <= axi_bid;
+  s_axi_bresp  <= axi_bresp;
+  s_axi_buser  <= (others => '0');      -- no user data support
+  s_axi_bvalid <= axi_bvalid;
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/axi/memory_write_data.vhd b/fpga/src/memsec/hdl/framework/axi/memory_write_data.vhd
new file mode 100644
index 0000000..7886212
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/axi/memory_write_data.vhd
@@ -0,0 +1,267 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! [Master] Writes data from the internal stream to the AXI write channel.
+entity memory_write_data is
+  generic(
+    C_M_AXI_DATA_WIDTH  : integer := 32;
+    C_M_AXI_WUSER_WIDTH : integer := 0;
+    REGISTERED          : boolean := true
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    m_axi_wdata  : out std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+    m_axi_wstrb  : out std_logic_vector(C_M_AXI_DATA_WIDTH / 8 - 1 downto 0);
+    m_axi_wlast  : out std_logic;
+    m_axi_wuser  : out std_logic_vector(C_M_AXI_WUSER_WIDTH - 1 downto 0);
+    m_axi_wvalid : out std_logic;
+    m_axi_wready : in  std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end memory_write_data;
+
+architecture arch_imp of memory_write_data is
+  constant LAST_FIELD_ADDR : integer := DATASTREAM_DATA_WIDTH/C_M_AXI_DATA_WIDTH - 1;
+
+  -- helper signals for the write stream
+  signal axi_wdata  : std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+  signal axi_wlast  : std_logic;
+  signal axi_wvalid : std_logic;
+
+  -- helper signals for the bit rate conversion
+  signal stream_in_last : std_logic;
+  signal stream_data    : std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+  signal stream_last    : std_logic;
+  signal stream_valid   : std_logic;
+  signal stream_ready   : std_logic;
+
+  -- helper signals for the register stage at the stream input
+  signal stream_request_type : std_logic_vector(1 downto 0);
+  signal stream_id           : std_logic_vector(ID_WIDTH-1 downto 0);
+  signal stream_last_request : std_logic;
+  signal stream_error        : std_logic;
+  signal stream_regs_ready   : std_logic;
+
+  -- registers to remember the state across multiple beats of the request or transfer
+  signal error_accxDP, error_accxDN : std_logic;
+
+  signal data_send_valid, data_send_ready : std_logic;
+  signal error_acc_valid, error_acc_ready : std_logic;
+begin
+  assert C_M_AXI_DATA_WIDTH <= DATASTREAM_DATA_WIDTH and DATASTREAM_DATA_WIDTH mod C_M_AXI_DATA_WIDTH = 0
+    report "DATASTREAM_DATA_WIDTH has to be a multiple of C_M_AXI_DATA_WIDTH." severity error;
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        error_accxDP <= '0';
+      else
+        error_accxDP <= error_accxDN;
+      end if;
+    end if;
+  end process regs;
+
+  send_data : process(data_send_valid, m_axi_wready, stream_data, stream_last) is
+  begin
+    axi_wdata  <= (others => '0');
+    axi_wlast  <= '0';
+    axi_wvalid <= '0';
+
+    data_send_ready <= '0';
+
+    -- send the data to the memory
+    if data_send_valid = '1' then
+      axi_wdata       <= stream_data;
+      axi_wlast       <= stream_last;
+      axi_wvalid      <= '1';
+      data_send_ready <= m_axi_wready;
+    end if;
+  end process send_data;
+
+  accumulate_and_forward_errors : process(error_acc_valid, error_accxDP,
+                                          m_request_ready, stream_error,
+                                          stream_id, stream_last,
+                                          stream_last_request, stream_ready,
+                                          stream_request_type, stream_valid) is
+  begin
+    error_accxDN    <= error_accxDP;
+    m_request       <= StreamType_default;
+    error_acc_ready <= '0';
+
+    -- reset as soon as the request ends
+    if stream_valid = '1' and stream_last = '1' and stream_ready = '1' then
+      error_accxDN <= '0';
+    end if;
+
+    if error_acc_valid = '1' and stream_last = '1' then
+      -- forward error accumulation result including id via the master interface
+      m_request.id           <= stream_id;
+      m_request.last_request <= stream_last_request;
+      m_request.request_type <= stream_request_type;
+      m_request.error        <= error_accxDP or stream_error;
+      m_request.valid        <= '1';
+      error_acc_ready        <= m_request_ready;
+    elsif error_acc_valid = '1' then
+      -- accumulate error flags within the beat
+      error_accxDN    <= error_accxDP or stream_error;
+      error_acc_ready <= '1';
+    end if;
+  end process accumulate_and_forward_errors;
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => C_M_AXI_DATA_WIDTH,
+      REGISTERED     => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => stream_in_last,
+      in_data         => s_request.data,
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+      in_valid        => s_request.valid,
+      in_ready        => s_request_ready,
+
+      out_data         => stream_data,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_last         => stream_last,
+      out_valid        => stream_valid,
+      out_ready        => stream_ready
+      );
+  stream_in_last    <= to_std_logic(unsigned(s_request.block_len) = 0);
+  stream_regs_ready <= stream_ready and stream_last;
+
+  request_type_reg : entity work.register_stage
+    generic map(
+      WIDTH      => 2,
+      REGISTERED => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request.request_type,
+      in_valid => s_request.valid,
+      in_ready => open,  -- data_serialization handles the synchronization
+
+      out_data  => stream_request_type,
+      out_valid => open,  -- data_serialization handles the synchronization
+      out_ready => stream_regs_ready
+      );
+
+  id_reg : entity work.register_stage
+    generic map(
+      WIDTH      => ID_WIDTH,
+      REGISTERED => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request.id,
+      in_valid => s_request.valid,
+      in_ready => open,  -- data_serialization handles the synchronization
+
+      out_data  => stream_id,
+      out_valid => open,  -- data_serialization handles the synchronization
+      out_ready => stream_regs_ready
+      );
+
+  last_request_reg : entity work.register_stage
+    generic map(
+      WIDTH      => 1,
+      REGISTERED => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data(0) => s_request.last_request,
+      in_valid   => s_request.valid,
+      in_ready   => open,  -- data_serialization handles the synchronization
+
+      out_data(0) => stream_last_request,
+      out_valid   => open,  -- data_serialization handles the synchronization
+      out_ready   => stream_regs_ready
+      );
+
+  error_reg : entity work.register_stage
+    generic map(
+      WIDTH      => 1,
+      REGISTERED => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data(0) => s_request.error,
+      in_valid   => s_request.valid,
+      in_ready   => open,  -- data_serialization handles the synchronization
+
+      out_data(0) => stream_error,
+      out_valid   => open,  -- data_serialization handles the synchronization
+      out_ready   => stream_ready
+      );
+
+  ready_synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => stream_valid,
+      in_ready => stream_ready,
+
+      out_valid(0)  => data_send_valid,
+      out_valid(1)  => error_acc_valid,
+      out_active(0) => '1',
+      out_active(1) => '1',
+      out_ready(0)  => data_send_ready,
+      out_ready(1)  => error_acc_ready
+      );
+
+  -- map to master write stream
+  m_axi_wdata  <= axi_wdata;
+  m_axi_wstrb  <= (others => '1');      -- write all bytes
+  m_axi_wlast  <= axi_wlast;
+  m_axi_wuser  <= (others => '0');      -- no user data support
+  m_axi_wvalid <= axi_wvalid;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/axi/memory_write_issuer.vhd b/fpga/src/memsec/hdl/framework/axi/memory_write_issuer.vhd
new file mode 100644
index 0000000..76a6ba7
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/axi/memory_write_issuer.vhd
@@ -0,0 +1,178 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! [Master] Translates requests on the internal stream into AXI write requests.
+entity memory_write_issuer is
+  generic(
+    C_M_AXI_ID_WIDTH     : integer := 6;
+    C_M_AXI_ADDR_WIDTH   : integer := 32;
+    C_M_AXI_DATA_WIDTH   : integer := 32;
+    C_M_AXI_AWUSER_WIDTH : integer := 0;
+    IGNORE_METADATA      : boolean := true
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    m_axi_awid    : out std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_awaddr  : out std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+    m_axi_awlen   : out std_logic_vector(7 downto 0);
+    m_axi_awsize  : out std_logic_vector(2 downto 0);
+    m_axi_awburst : out std_logic_vector(1 downto 0);
+    m_axi_awlock  : out std_logic;
+    m_axi_awcache : out std_logic_vector(3 downto 0);
+    m_axi_awprot  : out std_logic_vector(2 downto 0);
+    m_axi_awqos   : out std_logic_vector(3 downto 0);
+    m_axi_awuser  : out std_logic_vector(C_M_AXI_AWUSER_WIDTH - 1 downto 0);
+    m_axi_awvalid : out std_logic;
+    m_axi_awready : in  std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end memory_write_issuer;
+
+architecture arch_imp of memory_write_issuer is
+  constant LENGTH_SHIFT_WIDTH : integer := log2_ceil(DATASTREAM_DATA_WIDTH/C_M_AXI_DATA_WIDTH);
+
+  -- helper signals for the write address stream
+  signal axi_awaddr  : std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+  signal axi_awlen   : std_logic_vector(7 downto 0);
+  signal axi_awcache : std_logic_vector(3 downto 0);
+  signal axi_awprot  : std_logic_vector(2 downto 0);
+  signal axi_awvalid : std_logic;
+  signal axi_awqos   : std_logic_vector(3 downto 0);
+  signal axi_awlock  : std_logic;
+
+  -- registers to remember the state across multiple beats of the request or transfer
+  signal req_sentxDP, req_sentxDN : std_logic;
+
+  signal request_ready                  : std_logic;
+  signal req_send_valid, req_send_ready : std_logic;
+  signal m_request_valid                : std_logic;
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        req_sentxDP <= '0';
+      else
+        req_sentxDP <= req_sentxDN;
+      end if;
+    end if;
+  end process regs;
+
+  send_addr : process(axi_awvalid, m_axi_awready, req_send_valid, req_sentxDP,
+                      request_ready, s_request.block_address, s_request.metadata,
+                      s_request.block_len, s_request.cache, s_request.lock,
+                      s_request.prot, s_request.qos, s_request.valid) is
+    variable ignore_block : std_logic;
+  begin
+    req_sentxDN <= req_sentxDP;
+
+    axi_awaddr  <= (others => '0');
+    axi_awlen   <= (others => '0');
+    axi_awcache <= (others => '0');
+    axi_awprot  <= (others => '0');
+    axi_awqos   <= (others => '0');
+    axi_awlock  <= '0';
+    axi_awvalid <= '0';
+
+    req_send_ready <= '0';
+
+    ignore_block := to_std_logic(IGNORE_METADATA) and s_request.metadata;
+
+    -- remember when a request has been accepted
+    if axi_awvalid = '1' and m_axi_awready = '1' then
+      req_sentxDN <= '1';
+    end if;
+
+    -- acknowledged beats as long as the request is not finished
+    if req_send_valid = '1' and (req_sentxDP = '1' or ignore_block = '1') then
+      req_send_ready <= '1';
+    end if;
+
+    -- and reset as soon as the request ends
+    if s_request.valid = '1' and unsigned(s_request.block_len) = 0 and request_ready = '1' then
+      req_sentxDN <= '0';
+    end if;
+
+    -- send the address to the memory
+    if req_send_valid = '1' and req_sentxDP = '0' and ignore_block = '0' then
+      axi_awaddr  <= s_request.block_address;
+      axi_awlen   <= s_request.block_len(AXI_LEN_WIDTH-LENGTH_SHIFT_WIDTH-1 downto 0) & ones(LENGTH_SHIFT_WIDTH);
+      axi_awcache <= s_request.cache;
+      axi_awprot  <= s_request.prot;
+      axi_awqos   <= s_request.qos;
+      axi_awlock  <= s_request.lock;
+      axi_awvalid <= '1';
+    end if;
+  end process send_addr;
+
+  forward_data : process(m_request_valid, s_request) is
+  begin
+    m_request       <= s_request;
+    m_request.valid <= m_request_valid;
+  end process forward_data;
+
+  ready_synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => s_request.valid,
+      in_ready => request_ready,
+
+      out_valid(0)  => req_send_valid,
+      out_valid(1)  => m_request_valid,
+      out_active(0) => '1',
+      out_active(1) => '1',
+      out_ready(0)  => req_send_ready,
+      out_ready(1)  => m_request_ready
+      );
+  s_request_ready <= request_ready;
+
+  -- map to master write address stream
+  m_axi_awid    <= (others => '0');  -- the real id does not really matter here;
+  m_axi_awaddr  <= axi_awaddr;
+  m_axi_awlen   <= axi_awlen;
+  m_axi_awsize  <= std_logic_vector(to_unsigned(log2_ceil(C_M_AXI_DATA_WIDTH/8), 3));
+  m_axi_awburst <= BURST_TYPE_INCREMENTAL;
+  m_axi_awlock  <= axi_awlock;
+  m_axi_awcache <= axi_awcache;
+  m_axi_awprot  <= axi_awprot;
+  m_axi_awqos   <= axi_awqos;
+  m_axi_awuser  <= (others => '0');     -- no user data support
+  m_axi_awvalid <= axi_awvalid;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/axi/simple_RAM.vhd b/fpga/src/memsec/hdl/framework/axi/simple_RAM.vhd
new file mode 100644
index 0000000..4ea5d58
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/axi/simple_RAM.vhd
@@ -0,0 +1,255 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+-- Implements a RAM with very simple AXI-like interface.
+entity simple_RAM is
+  generic(
+    ENTRIES            : integer := 1024;
+    -- Parameters of Axi Slave Bus Interface S_AXI
+    C_S_AXI_ID_WIDTH   : integer := 12;
+    C_S_AXI_DATA_WIDTH : integer := 32;
+    C_S_AXI_ADDR_WIDTH : integer := 32
+    );
+  port(
+    -- Ports of Axi Slave Bus Interface S_AXI
+    s_aclk    : in std_logic;
+    s_aresetn : in std_logic;
+
+    s_axi_awid    : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_awaddr  : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_awlen   : in  std_logic_vector(7 downto 0);
+    s_axi_awsize  : in  std_logic_vector(2 downto 0);
+    s_axi_awburst : in  std_logic_vector(1 downto 0);
+    s_axi_awvalid : in  std_logic;
+    s_axi_awready : out std_logic;
+    s_axi_wdata   : in  std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_wstrb   : in  std_logic_vector((C_S_AXI_DATA_WIDTH / 8) - 1 downto 0);
+    s_axi_wlast   : in  std_logic;
+    s_axi_wvalid  : in  std_logic;
+    s_axi_wready  : out std_logic;
+    s_axi_bid     : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_bresp   : out std_logic_vector(1 downto 0);
+    s_axi_bvalid  : out std_logic;
+    s_axi_bready  : in  std_logic;
+
+    s_axi_arid    : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_araddr  : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_arlen   : in  std_logic_vector(7 downto 0);
+    s_axi_arsize  : in  std_logic_vector(2 downto 0);
+    s_axi_arburst : in  std_logic_vector(1 downto 0);
+    s_axi_arvalid : in  std_logic;
+    s_axi_arready : out std_logic;
+    s_axi_rid     : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_rdata   : out std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_rresp   : out std_logic_vector(1 downto 0);
+    s_axi_rlast   : out std_logic;
+    s_axi_rvalid  : out std_logic;
+    s_axi_rready  : in  std_logic
+    );
+end simple_RAM;
+
+architecture arch_imp of simple_RAM is
+  constant DATA_WIDTH_BYTE   : positive := C_S_AXI_DATA_WIDTH / 8;
+  constant ADDR_OFFSET_WIDTH : natural  := log2_ceil(DATA_WIDTH_BYTE);
+
+  -- RAM datatype and variable.
+  type ram_type is array (ENTRIES-1 downto 0) of std_logic_vector (C_S_AXI_DATA_WIDTH-1 downto 0);
+  shared variable ram : ram_type := (others => (others => '0'));
+
+  -- Registers for the read process.
+  type ReadStateType is (R_IDLE, R_SERVING_DATA);
+  signal rstatexDP, rstatexDN : ReadStateType;
+  signal ridxDP, ridxDN       : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+  signal raddrxDP, raddrxDN   : unsigned(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+  signal rlenxDP, rlenxDN     : unsigned(7 downto 0);
+  signal rsizexDP, rsizexDN   : unsigned(2 downto 0);
+
+  -- Registers for the write process.
+  type WriteStateType is (W_IDLE, W_ABSORBING_DATA, W_SENDING_RESPONSE);
+  signal wstatexDP, wstatexDN : WriteStateType;
+  signal widxDP, widxDN       : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+  signal waddrxDP, waddrxDN   : unsigned(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+  signal wlenxDP, wlenxDN     : unsigned(7 downto 0);
+begin
+  -- Validate that only supported configurations are instantiated and that
+  -- only supported requests are performed.
+  assert C_S_AXI_DATA_WIDTH mod 8 = 0 report "Data bus width has to be a multiple of 8." severity error;
+  checks : process (s_aresetn, s_axi_araddr, s_axi_arburst, s_axi_arsize,
+                    s_axi_arvalid, s_axi_awaddr, s_axi_awburst, s_axi_awsize,
+                    s_axi_awvalid)
+  begin
+    if s_aresetn = '1' then
+      if s_axi_awvalid = '1' then
+        assert ADDR_OFFSET_WIDTH = unsigned(s_axi_awsize) report "Only write transfers with bus width are supported." severity error;
+        assert unsigned(s_axi_awaddr) mod DATA_WIDTH_BYTE = 0 report "Unaligned write accesses are not supported." severity error;
+        assert unsigned(s_axi_awburst) = 1 report "Only incremental write bursts are supported." severity error;
+      end if;
+      if s_axi_arvalid = '1' then
+        assert ADDR_OFFSET_WIDTH >= unsigned(s_axi_arsize) report "Only read transfer sizes up to the bus width are supported." severity error;
+        assert unsigned(s_axi_araddr) mod 2**to_integer(unsigned(s_axi_awsize)) = 0 report "Unaligned read accesses are not supported." severity error;
+        assert unsigned(s_axi_arburst) = 1 report "Only incremental read bursts are supported." severity error;
+      end if;
+    end if;
+  end process checks;
+
+  -- Instantiate all registers that are needed for our simple RAM implementation.
+  regs : process(s_aclk) is
+  begin
+    if rising_edge(s_aclk) then
+      if s_aresetn = '0' then
+        rstatexDP <= R_IDLE;
+        ridxDP    <= (others => '0');
+        raddrxDP  <= (others => '0');
+        rlenxDP   <= (others => '0');
+        rsizexDP  <= (others => '0');
+
+        wstatexDP <= W_IDLE;
+        widxDP    <= (others => '0');
+        waddrxDP  <= (others => '0');
+        wlenxDP   <= (others => '0');
+      else
+        rstatexDP <= rstatexDN;
+        ridxDP    <= ridxDN;
+        raddrxDP  <= raddrxDN;
+        rlenxDP   <= rlenxDN;
+        rsizexDP  <= rsizexDN;
+
+        wstatexDP <= wstatexDN;
+        widxDP    <= widxDN;
+        waddrxDP  <= waddrxDN;
+        wlenxDP   <= wlenxDN;
+      end if;
+    end if;
+  end process regs;
+
+  -- Implement the read state machine which handles the AXI read address channel
+  -- and the AXI read channel.
+  read_proc : process (raddrxDP, ridxDP, rlenxDP, rstatexDP, s_axi_araddr,
+                       s_axi_arid, s_axi_arlen, s_axi_arvalid, s_axi_rready)
+    variable vRamAddr : unsigned(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+  begin
+    rstatexDN <= rstatexDP;
+    ridxDN    <= ridxDP;
+    raddrxDN  <= raddrxDP;
+    rlenxDN   <= rlenxDP;
+    rsizexDN  <= rsizexDP;
+
+    s_axi_arready <= '0';
+    s_axi_rid     <= (others => '0');
+    s_axi_rdata   <= (others => '0');
+    s_axi_rlast   <= '0';
+    s_axi_rvalid  <= '0';
+
+    case rstatexDP is
+      when R_IDLE =>
+        if s_axi_arvalid = '1' then
+          -- Capture the request into the state registers.
+          s_axi_arready <= '1';
+          rstatexDN     <= R_SERVING_DATA;
+          ridxDN        <= s_axi_arid;
+          raddrxDN      <= unsigned(s_axi_araddr);
+          rlenxDN       <= unsigned(s_axi_arlen);
+          rsizexDN      <= unsigned(s_axi_arsize);
+        end if;
+      when R_SERVING_DATA =>
+        -- Serve the current address
+        s_axi_rvalid <= '1';
+        s_axi_rid    <= ridxDP;
+        vRamAddr     := raddrxDP srl ADDR_OFFSET_WIDTH;
+        assert vRamAddr >= 0 and vRamAddr < ENTRIES
+          report "Address out of range." severity error;
+        s_axi_rdata <= ram(to_integer(vRamAddr));
+        s_axi_rlast <= to_std_logic(rlenxDP = 0);
+        if s_axi_rready = '1' then
+          -- The data is acknowledged.
+          if rlenxDP = 0 then
+            -- This was the last block.
+            rstatexDN <= R_IDLE;
+          else
+            -- More data has to be served as part of this request.
+            raddrxDN <= raddrxDP + 2**to_integer(rsizexDP);
+            rlenxDN  <= rlenxDP - 1;
+          end if;
+        end if;
+    end case;
+  end process read_proc;
+
+  -- Implement the write state machine which handles the AXI write address
+  -- channel, the AXI write data channel, and the AXI write response channel.
+  write_proc : process (wstatexDP, s_axi_awaddr, s_axi_awid, s_axi_awlen,
+                        s_axi_awvalid, s_axi_bready, s_axi_wdata, s_axi_wvalid,
+                        waddrxDP, widxDP, wlenxDP, wstatexDP)
+    variable vRamAddr : unsigned(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+  begin
+    wstatexDN <= wstatexDP;
+    widxDN    <= widxDP;
+    waddrxDN  <= waddrxDP;
+    wlenxDN   <= wlenxDP;
+
+    s_axi_awready <= '0';
+    s_axi_wready  <= '0';
+    s_axi_bid     <= (others => '0');
+    s_axi_bvalid  <= '0';
+
+    case wstatexDP is
+      when W_IDLE =>
+        if s_axi_awvalid = '1' then
+          -- Capture the request into the state registers.
+          s_axi_awready <= '1';
+          wstatexDN     <= W_ABSORBING_DATA;
+          widxDN        <= s_axi_awid;
+          waddrxDN      <= unsigned(s_axi_awaddr);
+          wlenxDN       <= unsigned(s_axi_awlen);
+        end if;
+      when W_ABSORBING_DATA =>
+        -- Absorbing data if available until the request is finished.
+        if s_axi_wvalid = '1' then
+          s_axi_wready <= '1';
+          vRamAddr     := waddrxDP srl ADDR_OFFSET_WIDTH;
+          assert vRamAddr >= 0 and vRamAddr < ENTRIES
+            report "Address out of range." severity error;
+          ram(to_integer(vRamAddr)) := s_axi_wdata;
+          if wlenxDP = 0 then
+            -- This was the last block.
+            wstatexDN <= W_SENDING_RESPONSE;
+          else
+            -- More data has to be served as part of this request.
+            waddrxDN <= waddrxDP + DATA_WIDTH_BYTE;
+            wlenxDN  <= wlenxDP - 1;
+          end if;
+        end if;
+      when W_SENDING_RESPONSE =>
+        s_axi_bvalid <= '1';
+        s_axi_bid    <= widxDP;
+        if s_axi_bready = '1' then
+          wstatexDN <= W_IDLE;
+        end if;
+    end case;
+  end process write_proc;
+
+  s_axi_rresp <= (others => '0');       -- All data we serve is ok.
+  s_axi_bresp <= (others => '0');  -- All write requests we process succeed.
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/metadata/key_updater.vhd b/fpga/src/memsec/hdl/framework/metadata/key_updater.vhd
new file mode 100644
index 0000000..0ac72a6
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/metadata/key_updater.vhd
@@ -0,0 +1,90 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Updates keys/nonces by replacing s_request through random data.
+entity key_updater is
+  generic(
+    KEY_WIDTH  : integer := DATASTREAM_DATA_WIDTH;
+    REGISTERED : boolean := false
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request         : in  std_logic_vector(KEY_WIDTH-1 downto 0);
+    s_request_address : in  std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+    s_request_valid   : in  std_logic;
+    s_request_ready   : out std_logic;
+
+    m_request         : out std_logic_vector(KEY_WIDTH-1 downto 0);
+    m_request_address : out std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+    m_request_valid   : out std_logic;
+    m_request_ready   : in  std_logic;
+
+    random         : in  std_logic_vector(KEY_WIDTH-1 downto 0);
+    random_valid   : in  std_logic;
+    random_ready   : out std_logic;
+    random_request : out std_logic
+    );
+end key_updater;
+
+architecture structural of key_updater is
+  signal request         : std_logic_vector(KEY_WIDTH-1 downto 0);
+  signal request_address : std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+  signal request_valid   : std_logic;
+  signal request_ready   : std_logic;
+  signal reg_in, reg_out : std_logic_vector(KEY_WIDTH+ADDRESS_WIDTH-1 downto 0);
+begin
+  request         <= random;
+  request_address <= s_request_address;
+  request_valid   <= s_request_valid and random_valid;
+
+  s_request_ready <= request_ready;
+  random_ready    <= request_ready;
+  random_request  <= s_request_valid;
+
+  reg_in <= request_address & request;
+
+  register_stage : entity work.register_stage
+    generic map(
+      WIDTH      => KEY_WIDTH+ADDRESS_WIDTH,
+      REGISTERED => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => reg_in,
+      in_valid => request_valid,
+      in_ready => request_ready,
+
+      out_data  => reg_out,
+      out_valid => m_request_valid,
+      out_ready => m_request_ready
+      );
+
+  m_request         <= reg_out(KEY_WIDTH-1 downto 0);
+  m_request_address <= reg_out(KEY_WIDTH+ADDRESS_WIDTH-1 downto KEY_WIDTH);
+end structural;
diff --git a/fpga/src/memsec/hdl/framework/metadata/node_cache.vhd b/fpga/src/memsec/hdl/framework/metadata/node_cache.vhd
new file mode 100644
index 0000000..62dcee1
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/metadata/node_cache.vhd
@@ -0,0 +1,173 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Simple cache for nonces and keys in tree modes.
+--!
+--! The interface of the cache is inspired by AXI and uses separated address
+--! read, read, and write channels.
+entity node_cache is
+  generic(
+    ADDR_WIDTH : integer := 32;
+    DATA_WIDTH : integer := 64;
+    CACHE_SIZE : integer := 32   -- number of entries
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    araddr   : in  std_logic_vector(ADDR_WIDTH - 1 downto 0);
+    ardelete : in  std_logic;  -- invalidate the cache entry in case of a hit
+    arvalid  : in  std_logic;
+    arready  : out std_logic;
+
+    rdata  : out std_logic_vector(DATA_WIDTH - 1 downto 0);
+    rhit   : out std_logic;
+    rvalid : out std_logic;
+    rready : in  std_logic;
+
+    waddr  : in  std_logic_vector(ADDR_WIDTH - 1 downto 0);
+    wdata  : in  std_logic_vector(DATA_WIDTH - 1 downto 0);
+    wvalid : in  std_logic;
+    wready : out std_logic
+    );
+end node_cache;
+
+--! Simple directly mapped cache.
+architecture arch_imp of node_cache is
+  constant INDEX_WIDTH       : integer := log2_ceil(CACHE_SIZE);
+  constant TAG_WIDTH         : integer := ADDR_WIDTH - INDEX_WIDTH;
+  constant CACHE_ENTRY_WIDTH : integer := 1 + TAG_WIDTH + DATA_WIDTH;
+
+  signal read_index, write_index            : std_logic_vector(INDEX_WIDTH-1 downto 0);
+  signal read_tag, last_read_tag, write_tag : std_logic_vector(TAG_WIDTH-1 downto 0);
+
+  signal douta : std_logic_vector(CACHE_ENTRY_WIDTH-1 downto 0);
+  signal dinb  : std_logic_vector(CACHE_ENTRY_WIDTH-1 downto 0);
+
+  signal read_tag_valid, read_tag_ready           : std_logic;
+  signal last_read_tag_valid, last_read_tag_ready : std_logic;
+  signal RAM_read_req_valid, RAM_read_req_ready   : std_logic;
+  signal RAM_read_data_valid, RAM_read_data_ready : std_logic;
+
+begin
+  read_index <= araddr(INDEX_WIDTH - 1 downto 0);
+  read_tag   <= araddr(ADDR_WIDTH - 1 downto INDEX_WIDTH);
+
+  write_index <= waddr(INDEX_WIDTH - 1 downto 0);
+  write_tag   <= waddr(ADDR_WIDTH - 1 downto INDEX_WIDTH);
+
+  dinb <= '1' & write_tag & wdata;
+
+  comb : process(RAM_read_data_valid, douta, last_read_tag,
+                 last_read_tag_valid, rready)
+  begin
+    rdata               <= (others => '0');
+    rhit                <= '0';
+    rvalid              <= '0';
+    RAM_read_data_ready <= '0';
+    last_read_tag_ready <= '0';
+
+    if RAM_read_data_valid = '1' and last_read_tag_valid = '1' then
+      rvalid              <= '1';
+      last_read_tag_ready <= rready;
+      RAM_read_data_ready <= rready;
+
+      if douta(CACHE_ENTRY_WIDTH-1) = '1' and unsigned(douta(CACHE_ENTRY_WIDTH-2 downto DATA_WIDTH)) = unsigned(last_read_tag) then
+        -- cache hit = valid entry and tags match
+        rhit  <= '1';
+        rdata <= douta(DATA_WIDTH-1 downto 0);
+      end if;
+    end if;
+  end process comb;
+
+  rtag_reg : entity work.register_stage
+    generic map(
+      WIDTH => TAG_WIDTH
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => read_tag,
+      in_valid => read_tag_valid,
+      in_ready => read_tag_ready,
+
+      out_data  => last_read_tag,
+      out_valid => last_read_tag_valid,
+      out_ready => last_read_tag_ready
+      );
+
+  ram : entity work.xilinx_TDP_RAM_synchronized
+    generic map(
+      ADDR_WIDTH => INDEX_WIDTH,
+      DATA_WIDTH => CACHE_ENTRY_WIDTH,
+      ENTRIES    => CACHE_SIZE
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      addra => read_index,
+      dina  => (others => '0'),
+      wea   => ardelete,
+      vina  => RAM_read_req_valid,
+      rina  => RAM_read_req_ready,
+
+      douta => douta,
+      vouta => RAM_read_data_valid,
+      routa => RAM_read_data_ready,
+
+      addrb => write_index,
+      dinb  => dinb,
+      web   => '1',
+      vinb  => wvalid,
+      rinb  => wready,
+
+      doutb => open,
+      voutb => open,
+      routb => '1'
+      );
+
+  synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => arvalid,
+      in_ready => arready,
+
+      out_valid(0)  => read_tag_valid,
+      out_valid(1)  => RAM_read_req_valid,
+      out_active(0) => '1',
+      out_active(1) => '1',
+      out_ready(0)  => read_tag_ready,
+      out_ready(1)  => RAM_read_req_ready
+      );
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/metadata/node_cache_read_fetcher.vhd b/fpga/src/memsec/hdl/framework/metadata/node_cache_read_fetcher.vhd
new file mode 100644
index 0000000..213627b
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/metadata/node_cache_read_fetcher.vhd
@@ -0,0 +1,136 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Reads data from the cache into the internal stream.
+--!
+--! For every tree node a response from the cache is expected. If the cache
+--! request is a hit, the result is stored in the internal stream as metadata.
+entity node_cache_read_fetcher is
+  generic(
+    CACHE_DATA_WIDTH : integer := 64
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    rdata  : in  std_logic_vector(CACHE_DATA_WIDTH - 1 downto 0);
+    rhit   : in  std_logic;
+    rvalid : in  std_logic;
+    rready : out std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end node_cache_read_fetcher;
+
+architecture arch_imp of node_cache_read_fetcher is
+  signal cdata                 : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal clast, cvalid, cready : std_logic;
+
+  signal hit, miss               : std_logic;
+  signal rvalid_hit, rvalid_miss : std_logic;
+  signal rready_hit, rready_miss : std_logic;
+
+begin
+
+  hit  <= rhit and s_request.read;
+  miss <= not(hit);
+
+  synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => rvalid,
+      in_ready => rready,
+
+      out_valid(0)  => rvalid_hit,
+      out_valid(1)  => rvalid_miss,
+      out_active(0) => hit,
+      out_active(1) => miss,
+      out_ready(0)  => rready_hit,
+      out_ready(1)  => rready_miss
+      );
+
+  cache_rate_converter : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => CACHE_DATA_WIDTH,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+
+      in_last  => '1',
+      in_data  => rdata,
+      in_valid => rvalid_hit,
+      in_ready => rready_hit,
+
+      out_data         => cdata,
+      out_last         => clast,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => cvalid,
+      out_ready        => cready
+      );
+
+  output : process(m_request_ready, rvalid_miss, s_request, rhit, cvalid, cdata, clast) is
+  begin
+    m_request       <= StreamType_default;
+    s_request_ready <= '0';
+    cready          <= '0';
+    rready_miss     <= '0';
+
+    if s_request.valid = '1' then
+      if s_request.request_type /= REQ_TYPE_TREE and s_request.request_type /= REQ_TYPE_TREE_ROOT then
+        m_request       <= s_request;
+        s_request_ready <= m_request_ready;
+      elsif rvalid_miss = '1' then
+        m_request       <= s_request;
+        rready_miss     <= m_request_ready;
+        s_request_ready <= m_request_ready;
+      elsif cvalid = '1' then
+        m_request           <= s_request;
+        m_request.block_len <= (others => '1');
+        m_request.data      <= cdata;
+        m_request.metadata  <= '1';
+
+        cready          <= m_request_ready;
+        s_request_ready <= m_request_ready and clast;
+      end if;
+    end if;
+  end process output;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/metadata/node_cache_read_issuer.vhd b/fpga/src/memsec/hdl/framework/metadata/node_cache_read_issuer.vhd
new file mode 100644
index 0000000..57a6e08
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/metadata/node_cache_read_issuer.vhd
@@ -0,0 +1,100 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Requests data from the cache for every tree node.
+--!
+--! If the request is a write, the cache entry is also deleted.
+entity node_cache_read_issuer is
+  generic(
+    CACHE_ADDR_WIDTH : integer := 32;
+    DATA_MEMORY_SIZE : integer := 512;  -- Data memory size in byte
+    CACHE_DATA_WIDTH : integer := 64
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    araddr   : out std_logic_vector(CACHE_ADDR_WIDTH - 1 downto 0);
+    ardelete : out std_logic;
+    arvalid  : out std_logic;
+    arready  : in  std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end node_cache_read_issuer;
+
+architecture arch_imp of node_cache_read_issuer is
+  signal m_request_valid : std_logic;
+
+  signal tree_request : std_logic;
+begin
+
+  synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => s_request.valid,
+      in_ready => s_request_ready,
+
+      out_valid(0)  => m_request_valid,
+      out_valid(1)  => arvalid,
+      out_active(0) => '1',
+      out_active(1) => tree_request,
+      out_ready(0)  => m_request_ready,
+      out_ready(1)  => arready
+      );
+
+  tree_request <= '1' when s_request.valid = '1' and (s_request.request_type = REQ_TYPE_TREE or s_request.request_type = REQ_TYPE_TREE_ROOT)
+                  else '0';
+
+  output_cache_lookup : process(s_request.address, s_request.request_type, s_request.valid, s_request.read, tree_request) is
+    constant ALIGNMENT_WIDTH : integer := log2_ceil(CACHE_DATA_WIDTH/8);
+    variable addr            : UAddressType;
+  begin
+    araddr   <= (others => '0');
+    ardelete <= '0';
+    if tree_request = '1' then
+      addr     := unsigned(s_request.address) - to_unsigned(DATA_MEMORY_SIZE, ADDRESS_WIDTH);
+      araddr   <= std_logic_vector(addr(CACHE_ADDR_WIDTH+ALIGNMENT_WIDTH-1 downto ALIGNMENT_WIDTH));
+      ardelete <= not(s_request.read);
+    end if;
+  end process output_cache_lookup;
+
+  output_stream : process(m_request_valid, s_request) is
+  begin
+    m_request       <= s_request;
+    m_request.valid <= m_request_valid;
+  end process output_stream;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/metadata/node_cache_writer.vhd b/fpga/src/memsec/hdl/framework/metadata/node_cache_writer.vhd
new file mode 100644
index 0000000..e852cf2
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/metadata/node_cache_writer.vhd
@@ -0,0 +1,95 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Writes data (from one of two ports) into the cache.
+--!
+--! The new port writes data unconditionally when it is valid. On the other
+--! hand, the old port writes data only when no request from the new port is
+--! pending and when the request is a read.
+entity node_cache_writer is
+  generic(
+    CACHE_ADDR_WIDTH : integer := 32;
+    DATA_MEMORY_SIZE : integer := 512;  -- Data memory size in byte
+    CACHE_DATA_WIDTH : integer := 64
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    waddr  : out std_logic_vector(CACHE_ADDR_WIDTH - 1 downto 0);
+    wdata  : out std_logic_vector(CACHE_DATA_WIDTH - 1 downto 0);
+    wvalid : out std_logic;
+    wready : in  std_logic;
+
+    s_old_entry   : in  std_logic_vector(CACHE_DATA_WIDTH - 1 downto 0);
+    s_old_address : in  AddressType;
+    s_old_is_read : in  std_logic;
+    s_old_valid   : in  std_logic;
+    s_old_ready   : out std_logic;
+
+    s_new_entry   : in  std_logic_vector(CACHE_DATA_WIDTH - 1 downto 0);
+    s_new_address : in  AddressType;
+    s_new_valid   : in  std_logic;
+    s_new_ready   : out std_logic
+    );
+end node_cache_writer;
+
+architecture arch_imp of node_cache_writer is
+begin
+
+  work : process(s_new_address, s_new_entry, s_new_valid, s_old_address,
+                 s_old_entry, s_old_is_read, s_old_valid, wready) is
+    constant ALIGNMENT_WIDTH : integer := log2_ceil(CACHE_DATA_WIDTH/8);
+    variable address         : UAddressType;
+  begin
+    waddr  <= (others => '0');
+    wdata  <= (others => '0');
+    wvalid <= '0';
+
+    s_old_ready <= '0';
+    s_new_ready <= '0';
+
+    address := (others => '0');
+    if s_new_valid = '1' then
+      address     := unsigned(s_new_address) - to_unsigned(DATA_MEMORY_SIZE, ADDRESS_WIDTH);
+      wdata       <= s_new_entry;
+      wvalid      <= '1';
+      s_new_ready <= wready;
+    elsif s_old_valid = '1' and s_old_is_read = '1' then
+      address     := unsigned(s_old_address) - to_unsigned(DATA_MEMORY_SIZE, ADDRESS_WIDTH);
+      wdata       <= s_old_entry;
+      wvalid      <= '1';
+      s_old_ready <= wready;
+    end if;
+
+    if s_old_valid = '1' and s_old_is_read = '0' then
+      s_old_ready <= '1';
+    end if;
+
+    waddr <= std_logic_vector(address(CACHE_ADDR_WIDTH+ALIGNMENT_WIDTH-1 downto ALIGNMENT_WIDTH));
+  end process work;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/metadata/nonce_increment.vhd b/fpga/src/memsec/hdl/framework/metadata/nonce_increment.vhd
new file mode 100644
index 0000000..47f5383
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/metadata/nonce_increment.vhd
@@ -0,0 +1,66 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Increments the nonce from the s_request input and returns it on m_request.
+--!
+--! If the nonce wraps to zero, one is returned instead. This is necessary to
+--! ensure that the zero nonce is reserved for identifiying uninitialized memory.
+entity nonce_increment is
+  generic(
+    NONCE_WIDTH : integer := DATASTREAM_DATA_WIDTH
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request         : in  std_logic_vector(NONCE_WIDTH-1 downto 0);
+    s_request_address : in  std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+    s_request_valid   : in  std_logic;
+    s_request_ready   : out std_logic;
+
+    m_request         : out std_logic_vector(NONCE_WIDTH-1 downto 0);
+    m_request_address : out std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+    m_request_valid   : out std_logic;
+    m_request_ready   : in  std_logic
+    );
+end nonce_increment;
+
+architecture structural of nonce_increment is
+begin
+  m_request_valid <= s_request_valid;
+  s_request_ready <= m_request_ready;
+
+  work : process(s_request, s_request_address) is
+    variable res : unsigned(NONCE_WIDTH-1 downto 0);
+  begin
+    res := unsigned(s_request) + 1;
+    if res = 0 then
+      res := to_unsigned(1, NONCE_WIDTH);
+    end if;
+    m_request         <= std_logic_vector(res);
+    m_request_address <= s_request_address;
+  end process work;
+
+end structural;
diff --git a/fpga/src/memsec/hdl/framework/metadata/secure_root.vhd b/fpga/src/memsec/hdl/framework/metadata/secure_root.vhd
new file mode 100644
index 0000000..b7969cb
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/metadata/secure_root.vhd
@@ -0,0 +1,246 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Implements a configurable number of secure roots for the tree modes.
+--!
+--! Returns the current value for the requested root. Additionally, when a root
+--! update has been requested, also the new root is returned. As update
+--! function, either a counter or random updates can be configured.
+entity secure_root is
+  generic(
+    ROOT_WIDTH  : integer := DATASTREAM_DATA_WIDTH;
+    TREE_ROOTS  : integer := 1;
+    USE_COUNTER : boolean := true
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    root_number       : in  std_logic_vector(log2_ceil(TREE_ROOTS)-1 downto 0);
+    root_update       : in  std_logic;
+    root_number_valid : in  std_logic;
+    root_number_ready : out std_logic;
+
+    root       : out std_logic_vector(ROOT_WIDTH-1 downto 0);
+    root_valid : out std_logic;
+    root_ready : in  std_logic;
+
+    root_next       : out std_logic_vector(ROOT_WIDTH-1 downto 0);
+    root_next_valid : out std_logic;
+    root_next_ready : in  std_logic;
+
+    random         : in  std_logic_vector(ROOT_WIDTH-1 downto 0);
+    random_valid   : in  std_logic;
+    random_ready   : out std_logic;
+    random_request : out std_logic
+    );
+end secure_root;
+
+architecture behavioral of secure_root is
+  constant ROOT_NUMBER_WIDTH                        : integer := log2_ceil(TREE_ROOTS);
+  signal combined_input, delayed_input              : std_logic_vector(ROOT_NUMBER_WIDTH downto 0);
+  signal combined_input_valid, combined_input_ready : std_logic;
+  signal delayed_input_valid, delayed_input_ready   : std_logic;
+
+  signal read_root : std_logic_vector(ROOT_WIDTH-1 downto 0);
+
+  signal root_nextxS : std_logic_vector(ROOT_WIDTH-1 downto 0);
+
+  signal read_number_valid, read_number_ready : std_logic;
+  signal write_root_valid, write_root_ready   : std_logic;
+  signal read_root_valid, read_root_ready     : std_logic;
+
+  signal sync_read_root_valid, sync_read_root_ready               : std_logic;
+  signal sync_root_next_to_reg_valid, sync_root_next_to_reg_ready : std_logic;
+  signal sync_root_valid, sync_root_ready                         : std_logic;
+
+  signal write_transfer : std_logic;
+begin
+
+  write_transfer <= read_root_valid and delayed_input_valid and delayed_input(ROOT_NUMBER_WIDTH);
+
+  comb : process(delayed_input, delayed_input_valid, read_root, read_root_valid,
+                 sync_read_root_ready, write_transfer, random, random_valid, sync_root_next_to_reg_ready) is
+    variable vRootNext : std_logic_vector(ROOT_WIDTH-1 downto 0);
+  begin
+    random_request <= '0';
+    random_ready   <= '0';
+
+    root_nextxS <= (others => '0');
+
+    -- skip the root update in RAM and the output of the next root on read transfers
+    if USE_COUNTER then
+      sync_read_root_valid <= read_root_valid and delayed_input_valid;
+    else
+      sync_read_root_valid <= read_root_valid and delayed_input_valid and
+                              (not(write_transfer) or random_valid);
+    end if;
+
+    read_root_ready     <= sync_read_root_ready;
+    delayed_input_ready <= sync_read_root_ready;
+
+    if write_transfer = '1' then
+      -- write transfer -> update root nonce and write back
+      if USE_COUNTER then
+        vRootNext := std_logic_vector(unsigned(read_root)+1);
+        if vRootNext = zeros(ROOT_WIDTH) then
+          vRootNext(0) := '1';
+        end if;
+        root_nextxS <= vRootNext;
+      else
+        random_request <= read_root_valid and delayed_input_valid;
+        random_ready   <= sync_root_next_to_reg_ready;
+        root_nextxS    <= random;
+      end if;
+    end if;
+  end process comb;
+
+  input_synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => root_number_valid,
+      in_ready => root_number_ready,
+
+      out_valid(0)  => read_number_valid,
+      out_valid(1)  => combined_input_valid,
+      out_active(0) => '1',
+      out_active(1) => '1',
+      out_ready(0)  => read_number_ready,
+      out_ready(1)  => combined_input_ready
+      );
+
+  -- the root update flag is stored in the MSB
+  combined_input <= root_update & root_number;
+  input_delay_reg : entity work.register_stage
+    generic map(
+      WIDTH => ROOT_NUMBER_WIDTH+1
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => combined_input,
+      in_valid => combined_input_valid,
+      in_ready => combined_input_ready,
+
+      out_data  => delayed_input,
+      out_valid => delayed_input_valid,
+      out_ready => delayed_input_ready
+      );
+
+  ram : entity work.xilinx_TDP_RAM_synchronized
+    generic map(
+      ADDR_WIDTH => ROOT_NUMBER_WIDTH,
+      DATA_WIDTH => ROOT_WIDTH,
+      ENTRIES    => TREE_ROOTS
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      addra => root_number,
+      dina  => (others => '0'),
+      wea   => '0',
+      vina  => read_number_valid,
+      rina  => read_number_ready,
+
+      douta => read_root,
+      vouta => read_root_valid,
+      routa => read_root_ready,
+
+      addrb => delayed_input(ROOT_NUMBER_WIDTH-1 downto 0),
+      dinb  => root_nextxS,
+      web   => '1',
+      vinb  => write_root_valid,
+      rinb  => write_root_ready,
+
+      doutb => open,
+      voutb => open,
+      routb => '1'
+      );
+
+  synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 3
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => sync_read_root_valid,
+      in_ready => sync_read_root_ready,
+
+      out_valid(0)  => sync_root_valid,
+      out_valid(1)  => sync_root_next_to_reg_valid,
+      out_valid(2)  => write_root_valid,
+      out_active(0) => '1',
+      out_active(1) => write_transfer,
+      out_active(2) => write_transfer,
+      out_ready(0)  => sync_root_ready,
+      out_ready(1)  => sync_root_next_to_reg_ready,
+      out_ready(2)  => write_root_ready
+      );
+
+  root_output_reg : entity work.register_stage
+    generic map(
+      WIDTH => ROOT_WIDTH
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => read_root,
+      in_valid => sync_root_valid,
+      in_ready => sync_root_ready,
+
+      out_data  => root,
+      out_valid => root_valid,
+      out_ready => root_ready
+      );
+
+  root_next_output_reg : entity work.register_stage
+    generic map(
+      WIDTH => ROOT_WIDTH
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => root_nextxS,
+      in_valid => sync_root_next_to_reg_valid,
+      in_ready => sync_root_next_to_reg_ready,
+
+      out_data  => root_next,
+      out_valid => root_next_valid,
+      out_ready => root_next_ready
+      );
+
+end behavioral;
diff --git a/fpga/src/memsec/hdl/framework/metadata/stream_metadata_injector.vhd b/fpga/src/memsec/hdl/framework/metadata/stream_metadata_injector.vhd
new file mode 100755
index 0000000..4250270
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/metadata/stream_metadata_injector.vhd
@@ -0,0 +1,255 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Inserts a metadata block in front of the memory transaction.
+--!
+--! If the current transaction is a tree root, then the root_metadata is
+--! injected. Otherwise, metadata which has to be extracted from the previous
+--! transaction gets injected.
+entity stream_metadata_injector is
+  generic(
+    METADATA_WIDTH  : integer := DATASTREAM_DATA_WIDTH;
+    INJECT_POSITION : integer := 0
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    metadata       : in  std_logic_vector(METADATA_WIDTH-1 downto 0);
+    metadata_valid : in  std_logic;
+    metadata_ready : out std_logic;
+
+    root_metadata : in  std_logic_vector(METADATA_WIDTH-1 downto 0);
+    root_valid    : in  std_logic;
+    root_ready    : out std_logic
+    );
+end stream_metadata_injector;
+
+architecture behavioral of stream_metadata_injector is
+  constant CONVERSION_FACTOR : integer := METADATA_WIDTH/DATASTREAM_DATA_WIDTH;
+
+  signal BlockCounterxDP, BlockCounterxDN             : std_logic_vector(s_request.len'length-1 downto 0);
+  signal expecting_metadataxDP, expecting_metadataxDN : std_logic;
+
+  signal fifo_input, fifo_output             : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal fifo_input_valid, fifo_output_valid : std_logic;
+  signal fifo_input_ready, fifo_output_ready : std_logic;
+  signal fifo_input_full                     : std_logic;
+
+  signal root_out, metadata_out             : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal root_out_valid, metadata_out_valid : std_logic;
+  signal root_out_ready, metadata_out_ready : std_logic;
+  signal root_out_last, metadata_out_last   : std_logic;
+
+begin
+
+  metadata_fifo : entity work.fifo
+    generic map(
+      WIDTH    => DATASTREAM_DATA_WIDTH,
+      ELEMENTS => CONVERSION_FACTOR
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => fifo_input,
+      in_valid => fifo_input_valid,
+      in_ready => fifo_input_ready,
+      in_full  => fifo_input_full,
+
+      out_data  => fifo_output,
+      out_valid => fifo_output_valid,
+      out_ready => fifo_output_ready
+      );
+
+  root_rate_conversion : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => METADATA_WIDTH,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+
+      in_last  => '1',
+      in_data  => root_metadata,
+      in_valid => root_valid,
+      in_ready => root_ready,
+
+      out_data         => root_out,
+      out_last         => root_out_last,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => root_out_valid,
+      out_ready        => root_out_ready
+      );
+
+  metadata_rate_conversion : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => METADATA_WIDTH,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+
+      in_last  => '1',
+      in_data  => metadata,
+      in_valid => metadata_valid,
+      in_ready => metadata_ready,
+
+      out_data         => metadata_out,
+      out_last         => metadata_out_last,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => metadata_out_valid,
+      out_ready        => metadata_out_ready
+      );
+
+
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        BlockCounterxDP       <= (others => '0');
+        expecting_metadataxDP <= '0';
+      else
+        BlockCounterxDP       <= BlockCounterxDN;
+        expecting_metadataxDP <= expecting_metadataxDN;
+      end if;
+    end if;
+  end process regs;
+
+  comb : process(s_request, m_request_ready, BlockCounterxDP, expecting_metadataxDP,
+                 fifo_input_ready, fifo_output, fifo_output_valid, fifo_input_full,
+                 root_out, metadata_out, root_out_valid, metadata_out_valid,
+                 root_out_last, metadata_out_last, metadata_out_ready, root_valid) is
+    variable vBlockCounter : integer;
+    variable vInjecting    : std_logic;
+  begin
+    BlockCounterxDN       <= BlockCounterxDP;
+    expecting_metadataxDN <= expecting_metadataxDP;
+
+    m_request          <= s_request;
+    s_request_ready    <= m_request_ready;
+    root_out_ready     <= '0';
+    metadata_out_ready <= '0';
+
+    fifo_input        <= (others => '0');
+    fifo_input_valid  <= '0';
+    fifo_output_ready <= '0';
+
+    -- Drop metadata blocks from the stream and store the data into the internal register.
+    -- They are actually cache hits.
+    if s_request.valid = '1' and s_request.metadata = '1' then
+      if s_request.request_type = REQ_TYPE_TREE_ROOT then
+        -- cache hits on the root node have to drop the current root node
+        if root_valid = '1' then
+          m_request         <= StreamType_default;
+          fifo_input        <= s_request.data;
+          fifo_input_valid  <= '1';
+          fifo_output_ready <= fifo_input_full;
+          s_request_ready   <= fifo_input_ready;
+          root_out_ready    <= fifo_input_ready;
+        end if;
+      else
+        m_request         <= StreamType_default;
+        fifo_input        <= s_request.data;
+        fifo_input_valid  <= '1';
+        fifo_output_ready <= fifo_input_full;
+        s_request_ready   <= fifo_input_ready;
+      end if;
+    end if;
+
+    vInjecting    := '0';
+    vBlockCounter := to_integer(unsigned(BlockCounterxDP));
+    if s_request.valid = '1' and s_request.metadata = '0' and
+      vBlockCounter >= INJECT_POSITION and vBlockCounter < (INJECT_POSITION+CONVERSION_FACTOR) then
+      s_request_ready     <= '0';
+      m_request.metadata  <= '1';
+      m_request.block_len <= (others => '1');
+
+      vInjecting := '1';
+      if fifo_output_valid = '1' then
+        -- ouput the metadata from the register
+        if expecting_metadataxDP = '1' then
+          -- but first drop the metadata from the input
+          metadata_out_ready <= metadata_out_valid;
+          m_request.valid    <= '0';
+        else
+          -- output metadata from the register
+          m_request.data    <= fifo_output;
+          m_request.valid   <= '1';
+          fifo_output_ready <= m_request_ready;
+        end if;
+      elsif s_request.request_type = REQ_TYPE_TREE_ROOT then
+        if root_out_valid = '1' then
+          -- output the tree root as metadata
+          m_request.data  <= root_out;
+          m_request.valid <= '1';
+          root_out_ready  <= m_request_ready;
+        end if;
+      else
+        -- output the metadata from the input
+        m_request.data     <= metadata_out;
+        m_request.valid    <= metadata_out_valid;
+        metadata_out_ready <= m_request_ready;
+      end if;
+
+      if metadata_out_valid = '1' and metadata_out_ready = '1' then
+        expecting_metadataxDN <= not(metadata_out_last);
+      end if;
+    end if;
+
+    if to_integer(unsigned(BlockCounterxDP)) = (INJECT_POSITION+CONVERSION_FACTOR-1) and m_request_ready = '1' and (s_request.request_type = REQ_TYPE_TREE or s_request.request_type = REQ_TYPE_TREE_ROOT) then
+      expecting_metadataxDN <= '1';
+    end if;
+
+    if m_request_ready = '1' then
+      if s_request.block_len = zeros(s_request.block_len'length) and vInjecting = '0' then
+        BlockCounterxDN <= (others => '0');
+      else
+        BlockCounterxDN <= std_logic_vector(unsigned(BlockCounterxDP) + 1);
+      end if;
+    end if;
+  end process comb;
+
+end behavioral;
diff --git a/fpga/src/memsec/hdl/framework/metadata/stream_metadata_modifier.vhd b/fpga/src/memsec/hdl/framework/metadata/stream_metadata_modifier.vhd
new file mode 100644
index 0000000..78f584e
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/metadata/stream_metadata_modifier.vhd
@@ -0,0 +1,178 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Replaces the metadata block in a memory transaction.
+--!
+--! If the current transaction is a tree root, then the root input is
+--! used. Otherwise, the metadata input is used to perform the replacement.
+entity stream_metadata_modifier is
+  generic(
+    METADATA_WIDTH : integer := DATASTREAM_DATA_WIDTH
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    metadata       : in  std_logic_vector(METADATA_WIDTH-1 downto 0);
+    metadata_valid : in  std_logic;
+    metadata_ready : out std_logic;
+
+    root       : in  std_logic_vector(METADATA_WIDTH-1 downto 0);
+    root_valid : in  std_logic;
+    root_ready : out std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_metadata_modifier;
+
+architecture arch_imp of stream_metadata_modifier is
+  signal data         : BlockStreamType;
+  signal data_address : AddressType;
+  signal data_ready   : std_logic;
+
+  signal reg_metadata                           : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal reg_metadata_offset                    : std_logic_vector(offset_width(DATASTREAM_DATA_WIDTH, METADATA_WIDTH)-1 downto 0);
+  signal reg_metadata_valid, reg_metadata_ready : std_logic;
+  signal reg_metadata_last                      : std_logic;
+
+  signal root_out                       : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal root_out_offset                : std_logic_vector(offset_width(DATASTREAM_DATA_WIDTH, METADATA_WIDTH)-1 downto 0);
+  signal root_out_valid, root_out_ready : std_logic;
+  signal root_out_last                  : std_logic;
+begin
+
+  metadata_rate_converter : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => METADATA_WIDTH,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => true
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+
+      in_last  => '1',
+      in_data  => metadata,
+      in_valid => metadata_valid,
+      in_ready => metadata_ready,
+
+      out_data         => reg_metadata,
+      out_last         => reg_metadata_last,
+      out_field_offset => reg_metadata_offset,
+      out_field_len    => open,
+      out_valid        => reg_metadata_valid,
+      out_ready        => reg_metadata_ready
+      );
+
+
+
+  root_rate_converter : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => METADATA_WIDTH,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+
+      in_last  => '1',
+      in_data  => root,
+      in_valid => root_valid,
+      in_ready => root_ready,
+
+      out_data         => root_out,
+      out_last         => root_out_last,
+      out_field_offset => root_out_offset,
+      out_field_len    => open,
+      out_valid        => root_out_valid,
+      out_ready        => root_out_ready
+      );
+
+
+  modifier : entity work.stream_data_modifier
+    generic map(
+      MATCH_TYPE      => 2,             -- block numbers should be matched
+      IGNORE_METADATA => false,
+      IGNORE_TREE_REQ => false,
+      IGNORE_DATA_REQ => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      s_data               => data,
+      s_data_address       => data_address,
+      s_data_address_valid => '1',
+      s_data_ready         => data_ready,
+
+      s_request       => s_request,
+      s_request_ready => s_request_ready,
+
+      m_request       => m_request,
+      m_request_ready => m_request_ready
+      );
+
+  work_proc : process(data_ready, reg_metadata, reg_metadata_valid, root_out,
+                 root_out_valid, s_request.request_type, s_request.valid,
+                 root_out_last, reg_metadata_last,
+                 root_out_offset, reg_metadata_offset) is
+  begin
+    data               <= BlockStreamType_default;
+    reg_metadata_ready <= '0';
+    root_out_ready     <= '0';
+    data_address       <= (others => '0');
+
+    if s_request.valid = '1' then
+      data.strobes <= (others => '1');
+
+      if s_request.request_type = REQ_TYPE_TREE_ROOT then
+        data.valid     <= root_out_valid;
+        data.data      <= root_out;
+        data.last      <= root_out_last;
+        data_address   <= zeros(ADDRESS_WIDTH-root_out_offset'length) & root_out_offset;
+        root_out_ready <= data_ready;
+      else
+        data.valid         <= reg_metadata_valid;
+        data.data          <= reg_metadata;
+        data.last          <= reg_metadata_last;
+        data_address       <= zeros(ADDRESS_WIDTH-reg_metadata_offset'length) & reg_metadata_offset;
+        reg_metadata_ready <= data_ready;
+      end if;
+    end if;
+  end process work_proc;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/metadata/stream_nonce_incrementer.vhd b/fpga/src/memsec/hdl/framework/metadata/stream_nonce_incrementer.vhd
new file mode 100644
index 0000000..7e4527f
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/metadata/stream_nonce_incrementer.vhd
@@ -0,0 +1,91 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Increments the metadata block in front of a memory transaction.
+entity stream_nonce_incrementer is
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_nonce_incrementer;
+
+architecture arch_imp of stream_nonce_incrementer is
+  signal data : BlockStreamType;
+
+  signal inc_nonce                        : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal inc_nonce_valid, inc_nonce_ready : std_logic;
+begin
+
+  modifier : entity work.stream_data_modifier
+    generic map(
+      MATCH_TYPE      => 2,     -- block numbers should be matched
+      IGNORE_METADATA => false,
+      IGNORE_TREE_REQ => false,
+      IGNORE_DATA_REQ => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      s_data               => data,
+      s_data_address       => (others => '0'),
+      s_data_address_valid => '1',
+      s_data_ready         => open,
+
+      s_request       => s_request,
+      s_request_ready => s_request_ready,
+
+      m_request       => m_request,
+      m_request_ready => m_request_ready
+      );
+
+
+  work_proc : process(s_request.data, s_request.valid) is
+    variable res : unsigned(DATASTREAM_DATA_WIDTH-1 downto 0);
+  begin
+    data <= BlockStreamType_default;
+    res  := (others => '0');
+
+    if s_request.valid = '1' then
+      data.strobes <= (others => '1');
+      data.last    <= '1';
+      data.valid   <= '1';
+
+      res := unsigned(s_request.data) + 1;
+      if res = 0 then
+        res := to_unsigned(1, DATASTREAM_DATA_WIDTH);
+      end if;
+
+      data.data <= std_logic_vector(res);
+    end if;
+  end process work_proc;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/metadata/stream_treedata_modifier.vhd b/fpga/src/memsec/hdl/framework/metadata/stream_treedata_modifier.vhd
new file mode 100644
index 0000000..7b23cb3
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/metadata/stream_treedata_modifier.vhd
@@ -0,0 +1,130 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Replaces a data block within a tree memory transaction.
+--!
+--! Used to update nonces/keys within the data part of the inner tree nodes.
+entity stream_treedata_modifier is
+  generic(
+    METADATA_WIDTH : integer := DATASTREAM_DATA_WIDTH
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    metadata       : in  std_logic_vector(METADATA_WIDTH-1 downto 0);
+    metadata_valid : in  std_logic;
+    metadata_ready : out std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_treedata_modifier;
+
+architecture arch_imp of stream_treedata_modifier is
+  signal data               : BlockStreamType;
+  signal data_address       : AddressType;
+  signal data_address_valid : std_logic;
+  signal data_ready         : std_logic;
+
+  signal metadata_out                                              : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal metadata_out_offset                                       : std_logic_vector(offset_width(DATASTREAM_DATA_WIDTH, METADATA_WIDTH)-1 downto 0);
+  signal metadata_out_last, metadata_out_valid, metadata_out_ready : std_logic;
+begin
+
+  metadata_rate_converter : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => METADATA_WIDTH,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+
+      in_last  => '1',
+      in_data  => metadata,
+      in_valid => metadata_valid,
+      in_ready => metadata_ready,
+
+      out_data         => metadata_out,
+      out_last         => metadata_out_last,
+      out_field_offset => metadata_out_offset,
+      out_field_len    => open,
+      out_valid        => metadata_out_valid,
+      out_ready        => metadata_out_ready
+      );
+
+  modifier : entity work.stream_data_modifier
+    generic map(
+      MATCH_TYPE      => 0,             --  virtual addresses should be matched
+      IGNORE_METADATA => true,
+      IGNORE_TREE_REQ => false,
+      IGNORE_DATA_REQ => true
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      s_data               => data,
+      s_data_address       => data_address,
+      s_data_address_valid => data_address_valid,
+      s_data_ready         => data_ready,
+
+      s_request       => s_request,
+      s_request_ready => s_request_ready,
+
+      m_request       => m_request,
+      m_request_ready => m_request_ready
+      );
+
+  work_proc : process(data_ready, metadata_out, metadata_out_valid, metadata_out_last,
+                 s_request.address, s_request.request_type, s_request.valid,
+                 metadata_out_offset) is
+  begin
+    data               <= BlockStreamType_default;
+    metadata_out_ready <= '0';
+    data_address       <= (others => '0');
+    data_address_valid <= '0';
+
+    if s_request.valid = '1' and (s_request.request_type = REQ_TYPE_TREE_ROOT or s_request.request_type = REQ_TYPE_TREE) then
+      data_address_valid <= '1';
+      data_address       <= set_bits(s_request.address, metadata_out_offset, DATASTREAM_DATA_WIDTH/8, METADATA_WIDTH/8);
+      data.strobes       <= (others => '1');
+      data.last          <= metadata_out_last;
+      data.valid         <= metadata_out_valid;
+      data.data          <= metadata_out;
+      metadata_out_ready <= data_ready;
+    end if;
+  end process work_proc;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_cbc_decrypt.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_cbc_decrypt.vhd
new file mode 100644
index 0000000..1de47c7
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_cbc_decrypt.vhd
@@ -0,0 +1,379 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Decrypts transactions in AES CBC mode.
+--!
+--! First, the IV for the decryption is generated by decrypting the sector
+--! address with the IV key. Next, the calculated IV is output on the internal
+--! stream to permit later encryption. Finally, the actual data decryption is
+--! performed. Note that only properly aligned transactions are supported.
+entity stream_aes_cbc_decrypt is
+  generic(
+    BLOCK_INDEX_WIDTH : integer := 1
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    KeyCipherxDI : in std_logic_vector(127 downto 0);
+    KeyIvxDI     : in std_logic_vector(127 downto 0)
+    );
+end stream_aes_cbc_decrypt;
+
+architecture Behavioral of stream_aes_cbc_decrypt is
+  constant DATASTREAM_BYTE_FIELD_ADDR_WIDTH : integer                                := log2_ceil(DATASTREAM_DATA_WIDTH/8);
+  constant FIELD_ADDR_WIDTH                 : integer                                := log2_ceil(128/DATASTREAM_DATA_WIDTH);
+  constant MAX_FIELD_COUNTER_VALUE          : unsigned(FIELD_ADDR_WIDTH-1 downto 0)  := (others => '1');
+  constant MAX_BLOCK_INDEX_COUNTER_VALUE    : unsigned(BLOCK_INDEX_WIDTH-1 downto 0) := (others => '1');
+
+  -- signals for the deserialization
+  signal full_in_block                            : std_logic_vector(127 downto 0);
+  signal full_in_block_valid, full_in_block_ready : std_logic;
+  signal full_in_block_masked                     : std_logic_vector(127 downto 0);
+
+  -- signals for the request register stage
+  signal request_reg                                  : StreamType;
+  signal request_reg_full_data                        : std_logic_vector(127 downto 0);
+  signal request_reg_in_valid                         : std_logic;
+  signal request_reg_out_valid, request_reg_out_ready : std_logic;
+
+  -- signals for the crypto unit
+  signal crypto_in, crypto_out              : std_logic_vector(127 downto 0);
+  signal crypto_out_masked                  : std_logic_vector(127 downto 0);
+  signal crypto_key                         : std_logic_vector(127 downto 0);
+  signal crypto_in_valid, crypto_in_ready   : std_logic;
+  signal crypto_out_valid, crypto_out_ready : std_logic;
+  signal EncryptxS                          : std_logic;
+
+  -- signals for the mask management
+  signal mask_in, mask_out              : std_logic_vector(127 downto 0);
+  signal mask_in_valid, mask_in_ready   : std_logic;
+  signal mask_out_valid, mask_out_ready : std_logic;
+
+  -- signals for the deserialization
+  signal out_block                        : std_logic_vector(127 downto 0);
+  signal out_block_valid, out_block_ready : std_logic;
+  signal full_out_block                   : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal full_out_field_addr              : std_logic_vector(FIELD_ADDR_WIDTH-1 downto 0);
+  signal full_out_block_valid             : std_logic;
+
+  signal m_requestxS       : StreamType;
+  signal s_request_validxS : std_logic;
+  signal s_request_readyxS : std_logic;
+
+  -- State machine states and register
+  type StateType is (IDLE, CALC_IV, WAIT_IV, OUTPUT_IV, PROCESS_DATA);
+  signal StatexDP, StatexDN     : StateType;
+  signal blockNrxDP, blockNrxDN : std_logic_vector(BLOCK_INDEX_WIDTH downto 0);
+  signal output_ivxS            : std_logic;
+begin
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 128,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      -- only aligned blocks are expected with multiple of OUT_DATA_WIDTH are expected
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => '0',
+
+      in_data  => s_request.data,
+      in_valid => s_request_validxS,
+      in_ready => s_request_readyxS,
+
+      out_data         => full_in_block,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => full_in_block_valid,
+      out_ready        => full_in_block_ready
+      );
+  full_in_block_masked <= full_in_block xor mask_out;
+  s_request_ready      <= s_request_readyxS;
+
+  reg_stream_data : entity work.register_stage
+    generic map(
+      WIDTH      => 128,
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => full_in_block,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg_full_data,
+      out_valid => open,
+      out_ready => request_reg_out_ready
+      );
+
+  reg_stream : entity work.stream_register_stage
+    generic map(
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg,
+      out_valid => request_reg_out_valid,
+      out_ready => request_reg_out_ready
+      );
+
+  mask_reg : entity work.register_stage
+    generic map(
+      WIDTH      => 128,
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => mask_in,
+      in_valid => mask_in_valid,
+      in_ready => mask_in_ready,
+
+      out_data  => mask_out,
+      out_valid => mask_out_valid,
+      out_ready => mask_out_ready
+      );
+
+  crypto : entity work.aes128_hs
+    port map(
+      ClkxCI     => clk,
+      RstxRBI    => resetn,
+      KeyxDI     => crypto_key,
+      DataxDI    => crypto_in,
+      DataxDO    => crypto_out,
+      EncryptxSI => EncryptxS,
+      in_ready   => crypto_in_ready,
+      in_valid   => crypto_in_valid,
+      out_ready  => crypto_out_ready,
+      out_valid  => crypto_out_valid
+      );
+  crypto_out_masked <= crypto_out xor mask_out;
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 128,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => '1',
+      in_data         => out_block,
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+      in_valid        => out_block_valid,
+      in_ready        => out_block_ready,
+
+      out_data         => full_out_block,
+      out_field_offset => full_out_field_addr,
+      out_field_len    => open,
+      out_last         => open,
+      out_valid        => full_out_block_valid,
+      out_ready        => m_request_ready
+      );
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        StatexDP   <= IDLE;
+        blockNrxDP <= (others => '0');
+      else
+        StatexDP   <= StatexDN;
+        blockNrxDP <= blockNrxDN;
+      end if;
+    end if;
+  end process regs;
+
+  control : process(KeyCipherxDI, KeyIvxDI, StatexDP,
+                    blockNrxDP, crypto_in_ready, crypto_out, crypto_out_masked,
+                    crypto_out_ready, crypto_out_valid, full_in_block,
+                    full_in_block_valid, m_request_ready, full_in_block_masked,
+                    m_requestxS.block_len, mask_in_ready, mask_in_valid,
+                    mask_out, mask_out_valid, out_block_ready,
+                    request_reg.block_len, request_reg_full_data,
+                    request_reg_out_valid, s_request.block_address,
+                    s_request.read, s_request.valid) is
+    variable GENERATE_IV_STATE : StateType;
+  begin
+    StatexDN   <= StatexDP;
+    blockNrxDN <= blockNrxDP;
+
+    crypto_key <= KeyCipherxDI;
+    crypto_in  <= full_in_block;
+
+    out_block <= crypto_out_masked;
+
+    crypto_in_valid      <= '0';
+    request_reg_in_valid <= '0';
+
+    mask_in          <= request_reg_full_data;
+    mask_in_valid    <= '0';
+    mask_out_ready   <= '0';
+    crypto_out_ready <= '0';
+
+    full_in_block_ready <= '0';
+
+    out_block_valid       <= '0';
+    crypto_out_ready      <= '0';
+    request_reg_in_valid  <= '0';
+    request_reg_out_ready <= '0';
+
+    output_ivxS <= '0';
+
+    EncryptxS <= '0';
+
+    s_request_validxS <= s_request.valid;
+
+    case StatexDP is
+      when IDLE =>
+        blockNrxDN <= (others => '0');
+        if full_in_block_valid = '1' then
+          StatexDN <= CALC_IV;
+        end if;
+      when CALC_IV =>
+        -- use the crypto core to calculate the iv
+        crypto_key      <= KeyIvxDI;
+        crypto_in       <= zeros(128-ADDRESS_WIDTH) & (s_request.block_address and not(mask(BLOCK_INDEX_WIDTH+4, ADDRESS_WIDTH)));
+        crypto_in_valid <= '1';
+
+        mask_in_valid    <= crypto_out_valid;
+        crypto_out_ready <= mask_in_ready;
+
+        if crypto_in_ready = '1' then
+          StatexDN <= WAIT_IV;  -- wait in the next state until the tweak is ready
+        end if;
+      when WAIT_IV =>
+        -- wait for the iv to be ready
+        -- the iv keys have to be provided until the end given that prince does not copy them
+        crypto_key <= KeyIvxDI;
+
+        mask_in          <= crypto_out;
+        mask_in_valid    <= crypto_out_valid;
+        crypto_out_ready <= mask_in_ready;
+
+        if mask_out_valid = '1' and mask_in_valid = '0' then
+          StatexDN <= PROCESS_DATA;
+          if s_request.read = '0' then
+            StatexDN <= OUTPUT_IV;
+          end if;
+        end if;
+      when OUTPUT_IV =>
+        output_ivxS     <= '1';
+        out_block_valid <= mask_out_valid;
+        out_block       <= mask_out;
+        if out_block_ready = '1' then
+          StatexDN <= PROCESS_DATA;
+        end if;
+      when PROCESS_DATA =>
+        -- do not start with the next block in this state
+        if request_reg_out_valid = '1' and to_integer(unsigned(request_reg.block_len)) = 0 then
+          s_request_validxS <= '0';
+        end if;
+
+        -- count the number acknowledged blocks at the cipher input
+        if crypto_in_ready = '1' then
+          blockNrxDN <= std_logic_vector(unsigned(blockNrxDP) + 1);
+        end if;
+
+        -- cipher output signals
+        out_block_valid       <= crypto_out_valid and mask_out_valid;
+        crypto_out_ready      <= out_block_ready;
+        request_reg_out_ready <= out_block_ready;
+        mask_out_ready        <= out_block_ready;
+
+        mask_in   <= request_reg_full_data;
+        out_block <= crypto_out_masked;
+
+
+        if to_integer(unsigned(blockNrxDP)) <= to_integer(MAX_BLOCK_INDEX_COUNTER_VALUE) then
+          -- cipher input signals
+          mask_in_valid        <= request_reg_out_valid;
+          crypto_in_valid      <= full_in_block_valid;
+          request_reg_in_valid <= full_in_block_valid;
+          full_in_block_ready  <= crypto_in_ready;
+
+
+        elsif full_in_block_valid = '1' and crypto_out_valid = '0' and mask_out_valid = '0' then
+          -- calculate the next iv
+          StatexDN   <= CALC_IV;
+          blockNrxDN <= (others => '0');
+        end if;
+
+        if m_request_ready = '1' and unsigned(m_requestxS.block_len) = 0 then
+          -- request has been handled, wait for the next one
+          StatexDN <= IDLE;
+        end if;
+      when others => assert false report "Invalid state" severity error;
+    end case;
+  end process control;
+
+  -- adapt the lenght, address and data from the register to the output
+  output : process(full_out_block, full_out_block_valid, full_out_field_addr,
+                   output_ivxS, request_reg, s_request) is
+  begin
+    m_requestxS <= request_reg;
+
+    m_requestxS.virt_address  <= request_reg.virt_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_address <= request_reg.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_len     <= request_reg.block_len(AXI_LEN_WIDTH-1 downto FIELD_ADDR_WIDTH) & std_logic_vector(MAX_FIELD_COUNTER_VALUE - unsigned(full_out_field_addr));
+
+    if output_ivxS = '1' then
+      m_requestxS               <= s_request;
+      m_requestxS.block_address <= s_request.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+      m_requestxS.block_len     <= (others => '1');
+      m_requestxS.metadata      <= '1';
+    end if;
+
+    m_requestxS.data  <= full_out_block;
+    m_requestxS.valid <= full_out_block_valid;
+  end process output;
+  m_request <= m_requestxS;
+
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_cbc_encrypt.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_cbc_encrypt.vhd
new file mode 100644
index 0000000..b90ce67
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_cbc_encrypt.vhd
@@ -0,0 +1,376 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Encrypts transactions in AES CBC mode.
+--!
+--! First, the IV for the encryption is read from the internal stream. Next,
+--! the actual data encryption is performed. Note that only properly aligned
+--! transactions are supported.
+entity stream_aes_cbc_encrypt is
+  generic(
+    BLOCK_INDEX_WIDTH : integer := 1
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    KeyCipherxDI : in std_logic_vector(127 downto 0);
+    KeyIvxDI     : in std_logic_vector(127 downto 0)
+    );
+end stream_aes_cbc_encrypt;
+
+architecture Behavioral of stream_aes_cbc_encrypt is
+  constant DATASTREAM_BYTE_FIELD_ADDR_WIDTH : integer                                := log2_ceil(DATASTREAM_DATA_WIDTH/8);
+  constant FIELD_ADDR_WIDTH                 : integer                                := log2_ceil(128/DATASTREAM_DATA_WIDTH);
+  constant MAX_FIELD_COUNTER_VALUE          : unsigned(FIELD_ADDR_WIDTH-1 downto 0)  := (others => '1');
+  constant MAX_BLOCK_INDEX_COUNTER_VALUE    : unsigned(BLOCK_INDEX_WIDTH-1 downto 0) := (others => '1');
+
+  -- signals for the deserialization
+  signal full_in_block                            : std_logic_vector(127 downto 0);
+  signal full_in_block_valid, full_in_block_ready : std_logic;
+  signal full_in_block_masked                     : std_logic_vector(127 downto 0);
+
+  -- signals for the request register stage
+  signal request_reg                                  : StreamType;
+  signal request_reg_full_data                        : std_logic_vector(127 downto 0);
+  signal request_reg_in_valid                         : std_logic;
+  signal request_reg_out_valid, request_reg_out_ready : std_logic;
+
+  -- signals for the crypto unit
+  signal crypto_in, crypto_out              : std_logic_vector(127 downto 0);
+  signal crypto_out_masked                  : std_logic_vector(127 downto 0);
+  signal crypto_key                         : std_logic_vector(127 downto 0);
+  signal crypto_in_valid, crypto_in_ready   : std_logic;
+  signal crypto_out_valid, crypto_out_ready : std_logic;
+  signal EncryptxS                          : std_logic;
+
+  -- signals for the mask management
+  signal mask_in, mask_out              : std_logic_vector(127 downto 0);
+  signal mask_in_valid, mask_in_ready   : std_logic;
+  signal mask_out_valid, mask_out_ready : std_logic;
+
+  -- synchronizer block
+  signal sync_valid_in, sync_ready_in     : std_logic;
+  signal sync_valid_mask, sync_ready_mask : std_logic;
+
+  -- signals for the deserialization
+  signal out_block                        : std_logic_vector(127 downto 0);
+  signal out_block_valid, out_block_ready : std_logic;
+  signal full_out_block                   : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal full_out_field_addr              : std_logic_vector(FIELD_ADDR_WIDTH-1 downto 0);
+  signal full_out_block_valid             : std_logic;
+
+  signal m_requestxS       : StreamType;
+  signal s_request_validxS : std_logic;
+  signal s_request_readyxS : std_logic;
+
+  -- State machine states and register
+  type StateType is (IDLE, READ_IV, WAIT_IV, PROCESS_DATA);
+  signal StatexDP, StatexDN     : StateType;
+  signal blockNrxDP, blockNrxDN : std_logic_vector(BLOCK_INDEX_WIDTH downto 0);
+begin
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 128,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      -- only aligned blocks are expected with multiple of OUT_DATA_WIDTH are expected
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => '0',
+
+      in_data  => s_request.data,
+      in_valid => s_request_validxS,
+      in_ready => s_request_readyxS,
+
+      out_data         => full_in_block,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => full_in_block_valid,
+      out_ready        => full_in_block_ready
+      );
+  full_in_block_masked <= full_in_block xor mask_out;
+  s_request_ready      <= s_request_readyxS;
+
+  reg_stream_data : entity work.register_stage
+    generic map(
+      WIDTH      => 128,
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => full_in_block,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg_full_data,
+      out_valid => open,
+      out_ready => request_reg_out_ready
+      );
+
+  reg_stream : entity work.stream_register_stage
+    generic map(
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg,
+      out_valid => request_reg_out_valid,
+      out_ready => request_reg_out_ready
+      );
+
+  mask_reg : entity work.register_stage
+    generic map(
+      WIDTH        => 128,
+      READY_BYPASS => false,
+      REGISTERED   => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => mask_in,
+      in_valid => mask_in_valid,
+      in_ready => mask_in_ready,
+
+      out_data  => mask_out,
+      out_valid => mask_out_valid,
+      out_ready => mask_out_ready
+      );
+
+  crypto : entity work.aes128_hs
+    port map(
+      ClkxCI     => clk,
+      RstxRBI    => resetn,
+      KeyxDI     => crypto_key,
+      DataxDI    => crypto_in,
+      DataxDO    => crypto_out,
+      EncryptxSI => EncryptxS,
+      in_ready   => crypto_in_ready,
+      in_valid   => crypto_in_valid,
+      out_ready  => crypto_out_ready,
+      out_valid  => crypto_out_valid
+      );
+  crypto_out_masked <= crypto_out xor mask_out;
+
+  synchronization : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_ready => sync_ready_in,
+      in_valid => sync_valid_in,
+
+      out_ready(0)  => out_block_ready,
+      out_ready(1)  => sync_ready_mask,
+      out_active(0) => '1',
+      out_active(1) => '1',
+      out_valid(0)  => out_block_valid,
+      out_valid(1)  => sync_valid_mask
+      );
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 128,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => '1',
+      in_data         => out_block,
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+      in_valid        => out_block_valid,
+      in_ready        => out_block_ready,
+
+      out_data         => full_out_block,
+      out_field_offset => full_out_field_addr,
+      out_field_len    => open,
+      out_last         => open,
+      out_valid        => full_out_block_valid,
+      out_ready        => m_request_ready
+      );
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        StatexDP   <= IDLE;
+        blockNrxDP <= (others => '0');
+      else
+        StatexDP   <= StatexDN;
+        blockNrxDP <= blockNrxDN;
+      end if;
+    end if;
+  end process regs;
+
+  control : process(KeyCipherxDI, KeyIvxDI, StatexDP,
+                    blockNrxDP, crypto_in_ready, crypto_out, crypto_out_masked,
+                    crypto_out_valid, full_in_block, full_in_block_masked,
+                    full_in_block_valid, m_request_ready,
+                    m_requestxS.block_len, mask_in_ready, mask_in_valid,
+                    mask_out_valid, out_block_ready, request_reg.block_len,
+                    request_reg_full_data, request_reg_out_valid,
+                    s_request.valid, sync_ready_in, sync_valid_mask) is
+  begin
+    StatexDN   <= StatexDP;
+    blockNrxDN <= blockNrxDP;
+
+    crypto_key <= KeyCipherxDI;
+    crypto_in  <= full_in_block;
+
+    out_block <= crypto_out_masked;
+
+    crypto_in_valid      <= '0';
+    request_reg_in_valid <= '0';
+
+    mask_in          <= request_reg_full_data;
+    mask_in_valid    <= '0';
+    mask_out_ready   <= '0';
+    crypto_out_ready <= '0';
+
+    full_in_block_ready <= '0';
+
+    sync_valid_in         <= '0';
+    sync_ready_mask       <= '0';
+    crypto_out_ready      <= '0';
+    request_reg_in_valid  <= '0';
+    request_reg_out_ready <= '0';
+    EncryptxS             <= '1';
+
+    s_request_validxS <= s_request.valid;
+    if request_reg_out_valid = '1' and to_integer(unsigned(request_reg.block_len)) = 0 then
+      s_request_validxS <= '0';
+    end if;
+
+    case StatexDP is
+      when IDLE =>
+        blockNrxDN <= (others => '0');
+        if full_in_block_valid = '1' then
+          StatexDN <= READ_IV;
+        end if;
+      when READ_IV =>
+        mask_in             <= full_in_block;
+        mask_in_valid       <= full_in_block_valid;
+        full_in_block_ready <= mask_in_ready;
+
+        if mask_in_valid = '1' and mask_in_ready = '1' then
+          StatexDN <= WAIT_IV;
+        end if;
+      when WAIT_IV =>
+        mask_in          <= crypto_out;
+        mask_in_valid    <= crypto_out_valid;
+        crypto_out_ready <= mask_in_ready;
+
+        if mask_out_valid = '1' and mask_in_valid = '0' then
+          StatexDN <= PROCESS_DATA;
+        end if;
+      when PROCESS_DATA =>
+        -- count the number acknowledged blocks at the cipher input
+        if crypto_in_ready = '1' then
+          blockNrxDN <= std_logic_vector(unsigned(blockNrxDP) + 1);
+        end if;
+
+        -- cipher output signals
+        sync_valid_in         <= crypto_out_valid;
+        crypto_out_ready      <= sync_ready_in;
+        request_reg_out_ready <= out_block_ready;
+
+        mask_in   <= crypto_out;
+        out_block <= crypto_out;
+
+        -- ignore the mask output by default (overriden for blockNr < maxValue
+        sync_ready_mask <= sync_valid_mask;
+
+        if to_integer(unsigned(blockNrxDP)) <= to_integer(MAX_BLOCK_INDEX_COUNTER_VALUE) then
+          -- cipher input signals
+
+          crypto_in_valid      <= full_in_block_valid and mask_out_valid;
+          request_reg_in_valid <= full_in_block_valid and mask_out_valid;
+          full_in_block_ready  <= crypto_in_ready;
+          mask_out_ready       <= crypto_in_ready;
+
+          mask_in_valid   <= sync_valid_mask;
+          sync_ready_mask <= mask_in_ready;
+
+          crypto_in <= full_in_block_masked;
+
+        elsif full_in_block_valid = '1' and crypto_out_valid = '0' and mask_out_valid = '0' then
+          -- calculate the next iv
+          StatexDN   <= READ_IV;
+          blockNrxDN <= (others => '0');
+        end if;
+
+        if m_request_ready = '1' and unsigned(m_requestxS.block_len) = 0 then
+          -- request has been handled, wait for the next one
+          StatexDN <= IDLE;
+        end if;
+      when others => assert false report "Invalid state" severity error;
+    end case;
+  end process control;
+
+  -- adapt the lenght, address and data from the register to the output
+  output : process(full_out_block, full_out_block_valid, full_out_field_addr,
+                   request_reg) is
+  begin
+    m_requestxS <= request_reg;
+
+    m_requestxS.virt_address  <= request_reg.virt_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_address <= request_reg.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_len     <= request_reg.block_len(AXI_LEN_WIDTH-1 downto FIELD_ADDR_WIDTH) & std_logic_vector(MAX_FIELD_COUNTER_VALUE - unsigned(full_out_field_addr));
+
+    m_requestxS.data  <= full_out_block;
+    m_requestxS.valid <= full_out_block_valid;
+  end process output;
+  m_request <= m_requestxS;
+
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_ecb.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_ecb.vhd
new file mode 100644
index 0000000..667357a
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_ecb.vhd
@@ -0,0 +1,199 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Encrypts or decrypts transactions in AES ECB mode.
+entity stream_aes_ecb is
+  generic(
+    DECRYPTION : boolean := true
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    KeyxDI : in std_logic_vector(127 downto 0)
+    );
+end stream_aes_ecb;
+
+architecture Behavioral of stream_aes_ecb is
+  constant DATASTREAM_BYTE_FIELD_ADDR_WIDTH : integer                               := log2_ceil(DATASTREAM_DATA_WIDTH/8);
+  constant FIELD_ADDR_WIDTH                 : integer                               := log2_ceil(128/DATASTREAM_DATA_WIDTH);
+  constant MAX_FIELD_COUNTER_VALUE          : unsigned(FIELD_ADDR_WIDTH-1 downto 0) := (others => '1');
+
+
+  signal enc_block                        : std_logic_vector(127 downto 0);
+  signal enc_block_valid, enc_block_ready : std_logic;
+
+  signal dec_block                        : std_logic_vector(127 downto 0);
+  signal dec_block_valid, dec_block_ready : std_logic;
+
+  signal out_block_data                   : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal out_field_addr                   : std_logic_vector(FIELD_ADDR_WIDTH-1 downto 0);
+  signal out_block_valid, out_block_ready : std_logic;
+  signal out_last                         : std_logic;
+
+  signal aes_input_valid, aes_input_ready             : std_logic;
+  signal register_input_valid, register_input_ready   : std_logic;
+  signal register_output_valid, register_output_ready : std_logic;
+
+  signal reg_valid : std_logic;
+
+  signal request_reg : StreamType;
+
+  signal EncryptxS : std_logic;
+begin
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 128,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      -- only aligned blocks with multiple of OUT_DATA_WIDTH are expected
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => '0',
+
+      in_data  => s_request.data,
+      in_valid => s_request.valid,
+      in_ready => s_request_ready,
+
+      out_data         => enc_block,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => enc_block_valid,
+      out_ready        => enc_block_ready
+      );
+
+  ready_synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => enc_block_valid,
+      in_ready => enc_block_ready,
+
+      out_valid(0) => aes_input_valid,
+      out_valid(1) => register_input_valid,
+
+      out_active(0) => '1',
+      out_active(1) => '1',
+
+      out_ready(0) => aes_input_ready,
+      out_ready(1) => register_input_ready
+      );
+
+  reg_stream : entity work.stream_register_stage
+    generic map(
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request,
+      in_valid => register_input_valid,
+      in_ready => register_input_ready,
+
+      out_data  => request_reg,
+      out_valid => register_output_valid,
+      out_ready => register_output_ready
+      );
+
+  EncryptxS <= '0' when DECRYPTION else '1';
+
+  crypto : entity work.aes128_hs
+    port map(
+      ClkxCI     => clk,
+      RstxRBI    => resetn,
+      KeyxDI     => KeyxDI,
+      DataxDI    => enc_block,
+      DataxDO    => dec_block,
+      EncryptxSI => EncryptxS,
+      in_ready   => aes_input_ready,
+      in_valid   => aes_input_valid,
+      out_ready  => dec_block_ready,
+      out_valid  => dec_block_valid
+      );
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 128,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => '1',
+      in_data         => dec_block,
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+      in_valid        => dec_block_valid,
+      in_ready        => dec_block_ready,
+
+      out_data         => out_block_data,
+      out_field_offset => out_field_addr,
+      out_field_len    => open,
+      out_last         => out_last,
+      out_valid        => out_block_valid,
+      out_ready        => m_request_ready
+      );
+
+  -- adapt the length, address and data from the register to the output
+  output : process(out_block_data, out_block_valid, out_field_addr, out_last,
+                   request_reg, m_request_ready, register_output_valid) is
+  begin
+    register_output_ready <= '0';
+
+    m_request <= request_reg;
+
+    m_request.virt_address  <= request_reg.virt_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_request.block_address <= request_reg.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_request.block_len     <= request_reg.block_len(AXI_LEN_WIDTH-1 downto FIELD_ADDR_WIDTH) & std_logic_vector(MAX_FIELD_COUNTER_VALUE - unsigned(out_field_addr));
+    m_request.data          <= out_block_data;
+    m_request.valid         <= out_block_valid and register_output_valid;
+
+    if out_last = '1' and m_request_ready = '1' then
+      register_output_ready <= '1';
+    end if;
+
+  end process output;
+
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_xts.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_xts.vhd
new file mode 100644
index 0000000..81036fd
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_aes_xts.vhd
@@ -0,0 +1,387 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Encrypts or decrypts transactions in AES XTS mode.
+--!
+--! First, the initial tweak is generated, either by decrypting the sector
+--! address (XTS decryption) or by reading it from the stream (XTS encryption).
+--! Next, in the case of XTS decryption, the calculated tweak is output on the
+--! internal stream to permit later encryption. Finally, the actual data
+--! encryption/decryption is performed.
+entity stream_aes_xts is
+  generic(
+    DECRYPTION        : boolean := true;
+    BLOCK_INDEX_WIDTH : integer := 1
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    KeyTweakxDI  : in std_logic_vector(127 downto 0);
+    KeyCipherxDI : in std_logic_vector(127 downto 0)
+    );
+end stream_aes_xts;
+
+architecture Behavioral of stream_aes_xts is
+  constant DATASTREAM_BYTE_FIELD_ADDR_WIDTH : integer                               := log2_ceil(DATASTREAM_DATA_WIDTH/8);
+  constant FIELD_ADDR_WIDTH                 : integer                               := log2_ceil(128/DATASTREAM_DATA_WIDTH);
+  constant MAX_FIELD_COUNTER_VALUE          : unsigned(FIELD_ADDR_WIDTH-1 downto 0) := (others => '1');
+
+  -- signals for the deserialization
+  signal full_in_block                            : std_logic_vector(127 downto 0);
+  signal full_in_block_valid, full_in_block_ready : std_logic;
+  signal full_in_block_tweaked                    : std_logic_vector(127 downto 0);
+
+  -- signals for the request register stage
+  signal request_reg                                  : StreamType;
+  signal request_reg_in_valid                         : std_logic;
+  signal request_reg_out_valid, request_reg_out_ready : std_logic;
+
+  -- signals for the crypto unit
+  signal crypto_in, crypto_out              : std_logic_vector(127 downto 0);
+  signal crypto_out_tweaked                 : std_logic_vector(127 downto 0);
+  signal crypto_key                         : std_logic_vector(127 downto 0);
+  signal crypto_in_valid, crypto_in_ready   : std_logic;
+  signal crypto_out_valid, crypto_out_ready : std_logic;
+  signal EncryptxS                          : std_logic;
+
+  -- signals for the tweak generation
+  signal tweak_in, tweak_out, tweak_out_delayed : std_logic_vector(127 downto 0);
+  signal tweak_start_block_number               : std_logic_vector(BLOCK_INDEX_WIDTH-1 downto 0);
+  signal tweak_start_mul_number                 : std_logic_vector(BLOCK_INDEX_WIDTH-1 downto 0);
+  signal tweak_in_valid, tweak_in_ready         : std_logic;
+  signal tweak_out_valid, tweak_out_ready       : std_logic;
+
+  -- signals for the deserialization
+  signal out_block                        : std_logic_vector(127 downto 0);
+  signal out_block_valid, out_block_ready : std_logic;
+  signal full_out_block                   : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal full_out_field_addr              : std_logic_vector(FIELD_ADDR_WIDTH-1 downto 0);
+  signal full_out_block_valid             : std_logic;
+
+  signal m_requestxS       : StreamType;
+  signal s_request_validxS : std_logic;
+  signal s_request_readyxS : std_logic;
+
+  -- State machine states and register
+  type StateType is (IDLE, CALC_TWEAK, CALC_TWEAK_WAIT, READ_TWEAK, TWEAK_WAIT, OUTPUT_TWEAK, PROCESS_DATA);
+  signal StatexDP, StatexDN : StateType;
+  signal output_tweakxS     : std_logic;
+begin
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 128,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      -- only aligned blocks are expected with multiple of OUT_DATA_WIDTH are expected
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => '0',
+
+      in_data  => s_request.data,
+      in_valid => s_request_validxS,
+      in_ready => s_request_readyxS,
+
+      out_data         => full_in_block,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => full_in_block_valid,
+      out_ready        => full_in_block_ready
+      );
+  full_in_block_tweaked <= full_in_block xor tweak_out;
+  s_request_ready       <= s_request_readyxS;
+
+  reg_stream : entity work.stream_register_stage
+    generic map(
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg,
+      out_valid => request_reg_out_valid,
+      out_ready => request_reg_out_ready
+      );
+
+  tweak_gen : entity work.xts_tweak_generator
+    generic map(
+      WIDTH             => 128,
+      BLOCK_INDEX_WIDTH => BLOCK_INDEX_WIDTH
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_tweak   => tweak_in,
+      in_blockNr => tweak_start_block_number,
+      in_mulNr   => tweak_start_mul_number,
+      in_valid   => tweak_in_valid,
+      in_ready   => tweak_in_ready,
+
+      out_tweak => tweak_out,
+      out_valid => tweak_out_valid,
+      out_ready => tweak_out_ready
+      );
+
+  last_tweak : entity work.register_stage
+    generic map(
+      WIDTH      => 128,
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => tweak_out,
+      in_valid => tweak_out_valid,
+      in_ready => open,
+
+      out_data  => tweak_out_delayed,
+      out_valid => open,
+      out_ready => tweak_out_ready
+      );
+
+  crypto : entity work.aes128_hs
+    port map(
+      ClkxCI     => clk,
+      RstxRBI    => resetn,
+      KeyxDI     => crypto_key,
+      DataxDI    => crypto_in,
+      DataxDO    => crypto_out,
+      EncryptxSI => EncryptxS,
+      in_ready   => crypto_in_ready,
+      in_valid   => crypto_in_valid,
+      out_ready  => crypto_out_ready,
+      out_valid  => crypto_out_valid
+      );
+  crypto_out_tweaked <= crypto_out xor tweak_out_delayed;
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 128,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => '1',
+      in_data         => out_block,
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+      in_valid        => out_block_valid,
+      in_ready        => out_block_ready,
+
+      out_data         => full_out_block,
+      out_field_offset => full_out_field_addr,
+      out_field_len    => open,
+      out_last         => open,
+      out_valid        => full_out_block_valid,
+      out_ready        => m_request_ready
+      );
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        StatexDP <= IDLE;
+      else
+        StatexDP <= StatexDN;
+      end if;
+    end if;
+  end process regs;
+
+  control : process(KeyCipherxDI, KeyTweakxDI, StatexDP,
+                    crypto_in_ready, crypto_out, crypto_out_tweaked, full_in_block,
+                    crypto_out_valid, full_in_block_tweaked, request_reg.block_len,
+                    full_in_block_valid, out_block_ready, s_request.valid,
+                    s_request.block_address, tweak_in_ready, tweak_out_valid,
+                    m_request_ready, m_requestxS.block_len, request_reg_out_valid) is
+    variable GENERATE_TWEAK_STATE : StateType;
+  begin
+    StatexDN <= StatexDP;
+
+    crypto_key           <= KeyCipherxDI;
+    crypto_in            <= full_in_block_tweaked;
+    crypto_in_valid      <= '0';
+    request_reg_in_valid <= '0';
+    EncryptxS            <= '0';
+
+    tweak_in                 <= crypto_out;
+    tweak_start_block_number <= (others => '0');
+    tweak_start_mul_number   <= s_request.block_address(BLOCK_INDEX_WIDTH+3 downto 4);
+    tweak_in_valid           <= '0';
+    crypto_out_ready         <= '0';
+
+    full_in_block_ready <= '0';
+    tweak_out_ready     <= '0';
+
+    out_block             <= crypto_out_tweaked;
+    out_block_valid       <= '0';
+    crypto_out_ready      <= '0';
+    request_reg_in_valid  <= '0';
+    request_reg_out_ready <= '0';
+
+    output_tweakxS <= '0';
+
+    s_request_validxS <= s_request.valid;
+
+    GENERATE_TWEAK_STATE := CALC_TWEAK;
+    if DECRYPTION = false then
+      EncryptxS            <= '1';
+      GENERATE_TWEAK_STATE := READ_TWEAK;
+
+      tweak_start_block_number <= s_request.block_address(BLOCK_INDEX_WIDTH+3 downto 4);
+      tweak_start_mul_number   <= (others => '0');
+    end if;
+
+    case StatexDP is
+      when IDLE =>
+        if full_in_block_valid = '1' then
+          StatexDN <= GENERATE_TWEAK_STATE;
+        end if;
+      when CALC_TWEAK =>
+        -- use the crypto core to calculate the tweak
+        crypto_key      <= KeyTweakxDI;
+        crypto_in       <= zeros(128-ADDRESS_WIDTH) & (s_request.block_address and not(mask(BLOCK_INDEX_WIDTH+4, ADDRESS_WIDTH)));
+        crypto_in_valid <= '1';
+        EncryptxS       <= '0';
+
+        tweak_in_valid   <= crypto_out_valid;
+        crypto_out_ready <= tweak_in_ready;
+
+        if crypto_in_ready = '1' then
+          StatexDN <= CALC_TWEAK_WAIT;  -- wait in the next state until the tweak is ready
+        end if;
+      when READ_TWEAK =>
+        tweak_in            <= full_in_block;
+        tweak_in_valid      <= full_in_block_valid;
+        full_in_block_ready <= tweak_in_ready;
+        EncryptxS           <= '0';
+
+        if tweak_in_valid = '1' and tweak_in_ready = '1' then
+          StatexDN <= TWEAK_WAIT;
+        end if;
+      when CALC_TWEAK_WAIT =>
+        -- wait for the tweak crypto computation to be ready
+        crypto_key <= KeyTweakxDI;
+        EncryptxS  <= '0';
+
+        tweak_in_valid   <= crypto_out_valid;
+        crypto_out_ready <= tweak_in_ready;
+
+        if crypto_out_valid = '1' and tweak_in_ready = '1' then
+          StatexDN <= TWEAK_WAIT;
+        end if;
+      when TWEAK_WAIT =>
+        -- wait for the tweak to be ready
+        crypto_key <= KeyTweakxDI;
+        EncryptxS  <= '0';
+
+        tweak_in_valid   <= crypto_out_valid;
+        crypto_out_ready <= tweak_in_ready;
+
+        if tweak_out_valid = '1' and tweak_in_valid = '0' then
+          StatexDN <= PROCESS_DATA;
+          if DECRYPTION and s_request.read = '0' then
+            StatexDN <= OUTPUT_TWEAK;
+          end if;
+        end if;
+      when OUTPUT_TWEAK =>
+        output_tweakxS  <= '1';
+        out_block_valid <= tweak_out_valid;
+        out_block       <= tweak_out;
+        EncryptxS       <= '0';
+        if out_block_ready = '1' then
+          StatexDN <= PROCESS_DATA;
+        end if;
+      when PROCESS_DATA =>
+        -- process the data using the tweak from the tweak generator
+        crypto_in_valid      <= full_in_block_valid and tweak_out_valid;
+        request_reg_in_valid <= full_in_block_valid and tweak_out_valid;
+        full_in_block_ready  <= crypto_in_ready;
+        tweak_out_ready      <= crypto_in_ready;
+
+        out_block_valid       <= crypto_out_valid;
+        crypto_out_ready      <= out_block_ready;
+        request_reg_out_ready <= out_block_ready;
+
+        if request_reg_out_valid = '1' and to_integer(unsigned(request_reg.block_len)) = 0 then
+          s_request_validxS <= '0';
+        end if;
+
+        -- calculate the next tweak when necessary
+        if full_in_block_valid = '1' and tweak_out_valid = '0' and crypto_out_valid = '0' then
+          StatexDN <= GENERATE_TWEAK_STATE;
+        end if;
+
+        if m_request_ready = '1' and unsigned(m_requestxS.block_len) = 0 then
+          StatexDN <= IDLE;
+        end if;
+      when others => assert false report "Invalid state" severity error;
+    end case;
+  end process control;
+
+  -- adapt the length, address and data from the register to the output
+  output : process(full_out_block, full_out_block_valid, full_out_field_addr,
+                   request_reg, output_tweakxS, s_request) is
+  begin
+    m_requestxS <= request_reg;
+
+    m_requestxS.virt_address  <= request_reg.virt_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_address <= request_reg.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_len     <= request_reg.block_len(AXI_LEN_WIDTH-1 downto FIELD_ADDR_WIDTH) & std_logic_vector(MAX_FIELD_COUNTER_VALUE - unsigned(full_out_field_addr));
+
+    if output_tweakxS = '1' then
+      m_requestxS               <= s_request;
+      m_requestxS.block_address <= s_request.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+      m_requestxS.block_len     <= (others => '1');
+      m_requestxS.metadata      <= '1';
+    end if;
+
+    m_requestxS.data  <= full_out_block;
+    m_requestxS.valid <= full_out_block_valid;
+  end process output;
+  m_request <= m_requestxS;
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_ascon.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_ascon.vhd
new file mode 100644
index 0000000..f0e5ec2
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_ascon.vhd
@@ -0,0 +1,408 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Encrypts or decrypts transactions with Ascon.
+--!
+--! Regarding memory layout, first the nonce, second the data, and third the
+--! authentication tag is expected/generated.
+entity stream_ascon is
+  generic(
+    DATA_ALIGNMENT  : integer := 64;
+    TREE_ALIGNMENT  : integer := 32;
+    OUTPUT_REGISTER : boolean := true
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    KeyxDI    : in std_logic_vector(127 downto 0);
+    DecryptxS : in std_logic
+    );
+end stream_ascon;
+
+architecture Behavioral of stream_ascon is
+  constant ALIGNMENT              : integer                                     := maximum(DATA_ALIGNMENT, TREE_ALIGNMENT);
+  constant METADATA               : integer                                     := 16;
+
+  constant ASCON_IDLE            : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := (others                                  => '0');
+  constant ASCON_INIT            : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := (log2_ceil(ALIGNMENT/8) downto 2         => '0') & "11";
+  constant ASCON_AD              : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := (log2_ceil(ALIGNMENT/8) downto 1         => '0') & "1";
+  constant ASCON_CRYPT           : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := '1' & (log2_ceil(ALIGNMENT/8)-1 downto 0 => '0');
+  constant ASCON_TREE_CRYPT_LAST : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := '1' & std_logic_vector(to_unsigned(TREE_ALIGNMENT/8-1, log2_ceil(ALIGNMENT/8)));
+  constant ASCON_CRYPT_LAST      : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := '1' & std_logic_vector(to_unsigned(DATA_ALIGNMENT/8-1, log2_ceil(ALIGNMENT/8)));
+  constant ASCON_VERIFY          : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := (log2_ceil(ALIGNMENT/8) downto 2         => '0') & "10";
+  signal last_block              : std_logic;
+
+  signal enc_block                        : std_logic_vector(63 downto 0);
+  signal enc_block_valid, enc_block_ready : std_logic;
+
+  signal dec_block                        : std_logic_vector(63 downto 0);
+  signal dec_block_valid, dec_block_ready : std_logic;
+
+  signal out_block                                        : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal out_block_valid, out_block_ready, out_block_last : std_logic;
+
+  signal AsconInitxS, AsconDecryptxS, AsconEncryptxS, AsconEncryptFinalizexS : std_logic;
+  signal AsconDecryptFinalizexS, AsconWriteNoncexS, AsconDonexS              : std_logic;
+  signal AsconDataInxD, AsconDataOutxD                                       : std_logic_vector(63 downto 0);
+  signal AsconTagxD                                                          : std_logic_vector(127 downto 0);
+  signal AsconAssociatexS                                                    : std_logic;
+
+  signal AsconStatexDP, AsconStatexDN : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0);
+  signal AsconSyncxDP, AsconSyncxDN   : std_logic;
+
+  signal requestRegxDP, requestRegxDN, out_request : StreamType;
+  signal virtualAddrRegxDP, virtualAddrRegxDN      : std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+  signal requestProcessedxDP, requestProcessedxDN  : std_logic;
+
+  signal DataRequestxS, TreeRequestxS : std_logic;
+  signal AsconLastStatexD             : std_logic_vector(AsconStatexDP'length-1 downto 0);
+
+  signal BufInputxD, BufOutputxD, BufferxDP, BufferxDN                                                      : StreamType;
+  signal BufInputValidxS, BufOutputValidxS, BufInputReadyxS, BufOutputReadyxS, BufferFullxDP, BufferFullxDN : std_logic;
+
+  signal AuthenticationErrorxS : std_logic;
+begin
+  assert DATASTREAM_DATA_WIDTH <= 64
+    report "DATASTREAM_DATA_WIDTH has to be equal or less than 64." severity error; 
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 64,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      -- we expect that everything is probably aligned in the stream
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => '0',
+
+      in_data  => s_request.data,
+      in_valid => s_request.valid,
+      in_ready => s_request_ready,
+
+      out_data         => enc_block,
+      out_valid        => enc_block_valid,
+      out_ready        => enc_block_ready
+      );
+
+  -- Ascon 128
+  ascon_1 : entity work.ascon
+    generic map (
+      UNROLED_ROUNDS  => 3,             -- 1,2,3 or 6 for Ascon-128
+      DATA_BLOCK_SIZE => 64,            -- select Ascon-128
+      ROUNDS_A        => 12,            -- 12 for Ascon-128 and Ascon-128a
+      ROUNDS_B        => 6,             -- 6 for Ascon-128
+      DATA_BUS_WIDTH  => 64)            -- 64-bit nonce and rate
+    port map (
+      ClkxCI             => clk,
+      RstxRBI            => resetn,
+      KeyxDI             => (others => '0'),
+      CP_InitxSI         => AsconInitxS,
+      CP_AssociatexSI    => AsconAssociatexS,
+      CP_EncryptxSI      => AsconEncryptxS,
+      CP_DecryptxSI      => AsconDecryptxS,
+      CP_FinalEncryptxSI => AsconEncryptFinalizexS,
+      CP_FinalDecryptxSI => AsconDecryptFinalizexS,
+      DataWritexDI       => change_endianess(AsconDataInxD),
+      IODataxDO          => AsconDataOutxD,
+      CP_DonexSO         => AsconDonexS,
+      TagxDO             => AsconTagxD
+      );
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 64,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      -- we expect that everything is probably aligned in the stream
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => '0',
+
+      in_data         => dec_block,
+      in_valid        => dec_block_valid,
+      in_ready        => dec_block_ready,
+
+      out_data         => out_block,
+      out_valid        => out_block_valid,
+      out_ready        => out_block_ready
+      );
+
+  input : process (s_request, enc_block_valid, requestRegxDP)
+  begin
+    requestRegxDN <= requestRegxDP;
+    if (enc_block_valid = '1') then
+      requestRegxDN <= s_request;
+    end if;
+  end process input;
+  
+  control : process(enc_block_valid, enc_block, dec_block_ready, AsconDonexS, AsconLastStatexD,
+                    AsconStatexDP, AsconDataOutxD, AsconSyncxDP, DecryptxS, TreeRequestxS, DataRequestxS,
+                    s_request.error)
+
+    variable vLastBlock : std_logic;
+  begin
+    AsconStatexDN <= AsconStatexDP;
+    AsconSyncxDN  <= AsconSyncxDP;
+
+    AsconDataInxD          <= enc_block;
+    AsconInitxS            <= '0';
+    AsconAssociatexS       <= '0';
+    AsconDecryptFinalizexS <= '0';
+    AsconEncryptFinalizexS <= '0';
+    AsconDecryptxS         <= '0';
+    AsconEncryptxS         <= '0';
+
+    enc_block_ready <= '0';
+    dec_block       <= change_endianess(AsconDataOutxD);
+    dec_block_valid <= '0';
+
+    vLastBlock := '0';
+    if (AsconStatexDP = AsconLastStatexD) then
+      vLastBlock := '1';
+    end if;
+
+    AuthenticationErrorxS <= s_request.error;
+
+    -- State Machine
+    if (AsconStatexDP = ASCON_IDLE) then
+      if enc_block_valid = '1' then
+        dec_block_valid <= '1';
+        if dec_block_ready = '1' then
+          enc_block_ready <= '1';
+          AsconInitxS     <= '1';
+          if DecryptxS = '0' then
+            AsconDataInxD <= std_logic_vector(unsigned(enc_block)+0);
+          end if;
+          AsconStatexDN <= ASCON_INIT;
+        end if;
+      end if;
+    end if;
+    if (AsconStatexDP = ASCON_INIT) then
+      AsconInitxS <= '1';
+      if AsconDonexS = '1' then
+        AsconStatexDN <= ASCON_AD;
+      end if;
+    end if;
+    if (AsconStatexDP = ASCON_AD) then
+      AsconAssociatexS <= '1';
+      AsconDataInxD    <=  (others => '0');
+      if AsconDonexS = '1' then
+        AsconStatexDN <= ASCON_CRYPT;
+      end if;
+    end if;
+    if (AsconStatexDP >= ASCON_CRYPT and AsconStatexDP <= AsconLastStatexD) then
+      if enc_block_valid = '1' then
+        dec_block_valid <= '1';
+        if dec_block_ready = '1' then
+          enc_block_ready <= '1';
+          if vLastBlock = '1' then
+            AsconDecryptFinalizexS <= DecryptxS;
+            AsconEncryptFinalizexS <= not(DecryptxS);
+          else
+            AsconDecryptxS <= DecryptxS;
+            AsconEncryptxS <= not(DecryptxS);
+          end if;
+          if AsconDonexS = '1' then
+            AsconStatexDN <= std_logic_vector(unsigned(AsconStatexDP) + 1);
+            if vLastBlock = '1' then
+              AsconStatexDN <= ASCON_VERIFY;
+            end if;
+          else
+            AsconSyncxDN <= '1';
+          end if;
+        end if;
+      end if;
+      if AsconSyncxDP = '1' then
+        if vLastBlock = '1' then
+          AsconDecryptFinalizexS <= DecryptxS;
+          AsconEncryptFinalizexS <= not(DecryptxS);
+        else
+          AsconDecryptxS <= DecryptxS;
+          AsconEncryptxS <= not(DecryptxS);
+        end if;
+        if AsconDonexS = '1' then
+          AsconSyncxDN  <= '0';
+          AsconStatexDN <= std_logic_vector(unsigned(AsconStatexDP) + 1);
+          if vLastBlock = '1' then
+            AsconStatexDN <= ASCON_VERIFY;
+          end if;
+        end if;
+      end if;
+    end if;
+    if (AsconStatexDP = ASCON_VERIFY) then
+      dec_block <= change_endianess(AsconTagxD(63 downto 0));
+      if enc_block_valid = '1' then
+        dec_block_valid <= '1';
+        if (dec_block_ready = '1') then
+          enc_block_ready <= '1';
+          AsconStatexDN   <= ASCON_IDLE;
+        end if;
+        if change_endianess(AsconTagxD(63 downto 0)) /= enc_block and DecryptxS = '1' then
+          AuthenticationErrorxS <= '1';
+        end if;
+      end if;
+    end if;
+  end process control;
+
+  output : process(AsconStatexDP, enc_block_valid, s_request, requestRegxDP, out_block, out_block_valid, AsconSyncxDP,
+                   virtualAddrRegxDP, requestProcessedxDP, out_block_ready, AuthenticationErrorxS) is
+    variable vPhysicalLen               : std_logic_vector(s_request.block_len'length-1 downto 0);
+    variable vVirtAddr                  : integer;
+    variable vRequest                   : StreamType;
+    variable vTreeRequest, vDataRequest : std_logic;
+    variable vAsconLastState            : std_logic_vector(AsconStatexDP'length-1 downto 0);
+  begin
+    virtualAddrRegxDN   <= virtualAddrRegxDP;
+    requestProcessedxDN <= requestProcessedxDP;
+
+    vRequest  := requestRegxDP;
+    vVirtAddr := to_integer(unsigned(virtualAddrRegxDP));
+    if (enc_block_valid = '1') then
+      vRequest := s_request;
+      if (requestProcessedxDP = '1') then
+        vVirtAddr           := to_integer(unsigned(s_request.virt_address));
+        requestProcessedxDN <= '0';
+      end if;
+    end if;
+
+    vTreeRequest    := '0';
+    vDataRequest    := '0';
+    vAsconLastState := ASCON_CRYPT_LAST;
+    if vRequest.request_type = REQ_TYPE_DATA then
+      vDataRequest    := '1';
+      vAsconLastState := ASCON_CRYPT_LAST;
+    elsif (vRequest.request_type = REQ_TYPE_TREE or vRequest.request_type = REQ_TYPE_TREE_ROOT) then
+      vTreeRequest    := '1';
+      vAsconLastState := ASCON_TREE_CRYPT_LAST;
+    end if;
+    DataRequestxS    <= vDataRequest;
+    TreeRequestxS    <= vTreeRequest;
+    AsconLastStatexD <= vAsconLastState;
+
+    -- Defaults for output
+    vPhysicalLen := vRequest.block_len;
+
+    out_request               <= vRequest;
+    out_request.block_len     <= vPhysicalLen;
+    out_request.block_address <= vRequest.block_address;
+    out_request.virt_address  <= (others => '0');
+
+    -- Output overwrites
+    if (AsconStatexDP >= ASCON_CRYPT and AsconStatexDP <= vAsconLastState) then
+      out_request.virt_address <= std_logic_vector(to_unsigned(vVirtAddr, s_request.virt_address'length));
+
+      if (out_block_ready = '1') then
+        vVirtAddr := vVirtAddr + (DATASTREAM_DATA_WIDTH/8);
+      end if;
+    else
+      if AsconStatexDP = ASCON_VERIFY and to_integer(unsigned(vPhysicalLen)) = 0 and out_block_ready = '1' then
+        requestProcessedxDN <= '1';
+      end if;
+      out_request.metadata <= '1';
+      out_request.error    <= AuthenticationErrorxS;
+    end if;
+
+    out_request.valid <= out_block_valid and not(AsconSyncxDP);
+
+    if AsconStatexDP /= ASCON_INIT and AsconStatexDP /= ASCON_IDLE then
+      out_request.data <= out_block;
+    end if;
+
+    virtualAddrRegxDN <= std_logic_vector(to_unsigned(vVirtAddr, s_request.virt_address'length));
+  end process output;
+
+  out_reg : if OUTPUT_REGISTER = true generate
+    output_buf : entity work.stream_register_stage_fifo
+      port map(
+        clk    => clk,
+        resetn => resetn,
+
+        in_data  => BufInputxD,
+        in_valid => BufInputValidxS,
+        in_ready => BufInputReadyxS,
+
+        out_data  => BufOutputxD,
+        out_valid => BufOutputValidxS,
+        out_ready => BufOutputReadyxS
+        );
+  end generate out_reg;
+
+  ascon_buffer : process (BufOutputValidxS, BufOutputxD, m_request_ready, out_request, BufInputReadyxS)
+  begin
+    if OUTPUT_REGISTER then
+      BufInputxD       <= out_request;
+      BufInputValidxS  <= out_request.valid;
+      out_block_ready  <= BufInputReadyxS;
+      m_request        <= BufOutputxD;
+      BufOutputReadyxS <= m_request_ready;
+    else
+      m_request       <= out_request;
+      out_block_ready <= m_request_ready;
+    end if;
+  end process ascon_buffer;
+
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        AsconStatexDP       <= ASCON_IDLE;
+        AsconSyncxDP        <= '0';
+        requestRegxDP       <= StreamType_default;
+        virtualAddrRegxDP   <= (others => '0');
+        requestProcessedxDP <= '1';
+        BufferFullxDP       <= '0';
+        BufferxDP           <= StreamType_default;
+      else
+        AsconStatexDP       <= AsconStatexDN;
+        AsconSyncxDP        <= AsconSyncxDN;
+        requestRegxDP       <= requestRegxDN;
+        virtualAddrRegxDP   <= virtualAddrRegxDN;
+        requestProcessedxDP <= requestProcessedxDN;
+        BufferFullxDP       <= BufferFullxDN;
+        BufferxDP           <= BufferxDN;
+      end if;
+    end if;
+  end process regs;
+
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_lrae_ascon_prince_delay.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_lrae_ascon_prince_delay.vhd
new file mode 100644
index 0000000..aa8cc16
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_lrae_ascon_prince_delay.vhd
@@ -0,0 +1,965 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Encrypts or decrypts transactions in a leakage resilient AE mode.
+--!
+--! For tree and data nodes, an Ascon-like sponge mode is used for key stream
+--! generation and authentication tag calculation. The key stream is then used
+--! in a block cipher (Prince or Qarma) to perform the real encryption. Details
+--! for this mode of operation can be found in the Journal version of the MEAS
+--! paper. (see MEASv1)
+--!
+--! Regarding memory layout, first the key, second the data, and third the
+--! authentication tag is expected/generated.
+entity stream_lrae_ascon_prince_delay is
+  generic(
+    DATA_ALIGNMENT        : integer := 64;
+    TREE_ALIGNMENT        : integer := 32;
+    TAG_SIZE              : integer := 8;
+    DECRYPTION            : boolean := false;
+    OUTPUT_REGISTER       : boolean := true;
+    ENC_ABSORB_CIPHERTEXT : boolean := false
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_lrae_ascon_prince_delay;
+
+architecture Behavioral of stream_lrae_ascon_prince_delay is
+  constant ASCON_DATA_BUS_WIDTH   : integer                                     := 128;
+  constant ALIGNMENT              : integer                                     := maximum(DATA_ALIGNMENT, TREE_ALIGNMENT);
+  constant METADATA               : integer                                     := 16;
+  constant TRANSLATION_FACTOR     : integer                                     := (64/DATASTREAM_DATA_WIDTH);
+  constant TRANSLATION_FACTOR_BIT : integer                                     := log2_ceil(TRANSLATION_FACTOR);
+  constant MAX_COUNTER_VALUE      : unsigned(TRANSLATION_FACTOR_BIT-1 downto 0) := (others => '1');
+
+  constant STATE_IDLE            : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := (others                                  => '0');
+  constant STATE_INIT            : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := (log2_ceil(ALIGNMENT/8) downto 2         => '0') & "01";
+  constant STATE_CRYPT           : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := '1' & (log2_ceil(ALIGNMENT/8)-1 downto 0 => '0');
+  constant STATE_TREE_CRYPT_LAST : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := '1' & std_logic_vector(to_unsigned(TREE_ALIGNMENT/8-1, log2_ceil(ALIGNMENT/8)));
+  constant STATE_CRYPT_LAST      : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := '1' & std_logic_vector(to_unsigned(DATA_ALIGNMENT/8-1, log2_ceil(ALIGNMENT/8)));
+  constant STATE_VERIFY          : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := (log2_ceil(ALIGNMENT/8) downto 2         => '0') & "10";
+  constant STATE_VERIFY_2        : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0) := (log2_ceil(ALIGNMENT/8) downto 2         => '0') & "11";
+  signal last_block              : std_logic;
+
+  signal enc_block                        : std_logic_vector(63 downto 0);
+  signal enc_block_valid, enc_block_ready : std_logic;
+
+  signal block64, block64_reg                       : std_logic_vector(63 downto 0);
+  signal block64_offset, block64_len                : std_logic_vector(offset_width(DATASTREAM_DATA_WIDTH, 64)-1 downto 0);
+  signal block64_offset_reg, block64_len_reg        : std_logic_vector(offset_width(DATASTREAM_DATA_WIDTH, 64)-1 downto 0);
+  signal block64_valid, block64_ready, block64_last : std_logic;
+  signal block64_last_reg                           : std_logic;
+  signal block64_reg_valid, block64_reg_ready       : std_logic;
+
+  signal block128, block128_mod                                                                : std_logic_vector(127 downto 0);
+  signal block128_offset, block128_len                                                         : std_logic_vector(offset_width(DATASTREAM_DATA_WIDTH, 128)-1 downto 0);
+  signal block128_valid, block128_ready, block128_last, block128_mod_valid, block128_mod_ready : std_logic;
+
+  signal dec_block                        : std_logic_vector(63 downto 0);
+  signal dec_block_valid, dec_block_ready : std_logic;
+
+  signal out_block                                        : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal out_block_addr                                   : std_logic_vector(TRANSLATION_FACTOR_BIT-1 downto 0);
+  signal out_block_valid, out_block_ready, out_block_last : std_logic;
+
+  signal out_block64                                            : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal out_block64_valid, out_block64_ready, out_block64_last : std_logic;
+
+  signal out_block128                                              : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal out_block128_valid, out_block128_ready, out_block128_last : std_logic;
+
+  signal AsconInitxS, AsconPermutexS, AsconPermuteFinalizexS : std_logic;
+  signal AsconKeyInputxD                                     : std_logic_vector(127 downto 0);
+  signal AsconDonexS, AsconOutputTagxS                       : std_logic;
+  signal AsconDataInxD, AsconDataOutxD                       : std_logic_vector(ASCON_DATA_BUS_WIDTH-1 downto 0);
+
+  signal CtrlStatexDP, CtrlStatexDN         : std_logic_vector(log2_ceil(ALIGNMENT/8) downto 0);
+  signal AsconSyncxDP, AsconSyncxDN         : std_logic;
+  signal AsconFinishedxDP, AsconFinishedxDN : std_logic;
+
+  signal PrinceKeyxD, PrinceKeyInxD                                                       : std_logic_vector(127 downto 0);
+  signal PrinceKeyxDP, PrinceKeyxDN                                                       : std_logic_vector(127 downto 0);
+  signal PrinceInputxD, PrinceOutputxD, PrinceOutputRegxD                                 : std_logic_vector(63 downto 0);
+  signal PrinceOutputRegInputxD                                                           : std_logic_vector(63 downto 0);
+  signal PrinceOutputRegInputValidxS, PrinceOutputRegInputReadyxS                         : std_logic;
+  signal PrinceInputReadyxS, PrinceInputValidxS, PrinceOutputReadyxS, PrinceOutputValidxS : std_logic;
+  signal PrinceOutputRegValidxS, PrinceOutputRegReadyxS                                   : std_logic;
+  signal PrinceFinishedxDP, PrinceFinishedxDN                                             : std_logic;
+  signal PrinceRunningxDP, PrinceRunningxDN                                               : std_logic;
+
+  signal InputRequestxD, InputRequestRegxD, OutputRequestxD : StreamType;
+  signal InputRequestRegValidxS                             : std_logic;
+
+  signal out_request                                : StreamType;
+  signal virtualAddrRegxDP, virtualAddrRegxDN       : std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+  signal requestProcessedxDBP, requestProcessedxDBN : std_logic;
+  signal inputBlockCounterxDP, inputBlockCounterxDN : std_logic_vector(log2_ceil(128/DATASTREAM_DATA_WIDTH)-1 downto 0);
+
+  signal DataRequestxS, TreeRequestxS : std_logic;
+  signal CtrlLastStatexD              : std_logic_vector(CtrlStatexDP'length-1 downto 0);
+
+  signal BufInputxD, BufOutputxD                                              : StreamType;
+  signal BufInputValidxS, BufOutputValidxS, BufInputReadyxS, BufOutputReadyxS : std_logic;
+
+  signal AuthenticationErrorxSP, AuthenticationErrorxSN : std_logic;
+
+  signal AuthenticationErrorxS                  : std_logic;
+  signal InputConversion128xS                   : std_logic;
+  signal InputConversion64xS                    : std_logic;
+  signal OutputConversion128xS                  : std_logic;
+  signal s_request64_valid, s_request64_ready   : std_logic;
+  signal s_request128_valid, s_request128_ready : std_logic;
+  signal s_requestReg_valid, s_requestReg_ready : std_logic;
+  signal s_request128_last                      : std_logic;
+
+  signal SkipDecryptionxS : std_logic;
+  signal SkipTagxS        : std_logic;
+
+  signal DecryptionDonexDP, DecryptionDonexDN : std_logic;
+
+  signal block_reg_in, block_reg_out : std_logic_vector(block64_len'length+block64_offset'length downto 0);
+begin
+  InputConversion64xS <= not(InputConversion128xS);
+
+  synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 3
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => s_request.valid,
+      in_ready => s_request_ready,
+
+      out_valid(0)  => s_request64_valid,
+      out_valid(1)  => s_request128_valid,
+      out_valid(2)  => s_requestReg_valid,
+      out_active(0) => InputConversion64xS,
+      out_active(1) => InputConversion128xS,
+      out_active(2) => '1',
+      out_ready(0)  => s_request64_ready,
+      out_ready(1)  => s_request128_ready,
+      out_ready(2)  => s_requestReg_ready
+      );
+
+  input_conversion128 : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 128,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => (others => '0'),  --s_request.block_address(TRANSLATION_FACTOR downto 2),
+      in_field_len    => (others => '1'),
+
+      in_last  => s_request128_last,
+      in_data  => s_request.data,
+      in_valid => s_request128_valid,
+      in_ready => s_request128_ready,
+
+      out_data         => block128,
+      out_last         => block128_last,
+      out_field_offset => block128_offset,
+      out_field_len    => block128_len,
+      out_valid        => block128_valid,
+      out_ready        => block128_ready
+      );
+
+  inputBlockCounterxDN <= std_logic_vector(unsigned(inputBlockCounterxDP) + 1) when s_request128_ready = '1'                                          else inputBlockCounterxDP;
+  s_request128_last    <= '1'                                                  when inputBlockCounterxDP = ones(log2_ceil(128/DATASTREAM_DATA_WIDTH)) else '0';
+
+  input_conversion64 : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 64,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => (others => '0'),  --s_request.block_address(TRANSLATION_FACTOR downto 2),
+      in_field_len    => (others => '1'),
+      in_last         => last_block,
+      in_data         => s_request.data,
+      in_valid        => s_request64_valid,
+      in_ready        => s_request64_ready,
+
+      out_data         => block64,
+      out_field_offset => block64_offset,
+      out_field_len    => block64_len,
+      out_valid        => block64_valid,
+      out_ready        => block64_ready,
+      out_last         => block64_last
+      );
+
+  block64_ready <= enc_block_ready;
+
+  last_block <= '1' when (to_integer(unsigned(s_request.block_len)) = 0) else '0';
+
+  InputRequestxD  <= s_request;
+  OutputRequestxD <= InputRequestRegxD;
+
+  request_type : process (OutputRequestxD)
+    variable vTreeRequest, vDataRequest : std_logic;
+    variable vCtrlLastState             : std_logic_vector(CtrlStatexDP'length-1 downto 0);
+  begin
+    vTreeRequest   := '0';
+    vDataRequest   := '0';
+    vCtrlLastState := STATE_CRYPT_LAST;
+    if OutputRequestxD.request_type = REQ_TYPE_DATA then
+      vDataRequest   := '1';
+      vCtrlLastState := STATE_CRYPT_LAST;
+    elsif (OutputRequestxD.request_type = REQ_TYPE_TREE or OutputRequestxD.request_type = REQ_TYPE_TREE_ROOT) then
+      vTreeRequest   := '1';
+      vCtrlLastState := STATE_TREE_CRYPT_LAST;
+    end if;
+
+    DataRequestxS   <= vDataRequest;
+    TreeRequestxS   <= vTreeRequest;
+    CtrlLastStatexD <= vCtrlLastState;
+  end process request_type;
+
+  -- Ascon 128
+  ascon_1 : entity work.ascon_mac
+    generic map (
+      UNROLED_ROUNDS  => 3,                     -- 1,2,3,4 or 6
+      DATA_BLOCK_SIZE => ASCON_DATA_BUS_WIDTH,  -- rate
+      ROUNDS_A        => 12,
+      ROUNDS_B        => 9,
+      DATA_BUS_WIDTH  => ASCON_DATA_BUS_WIDTH)
+    port map (
+      ClkxCI             => clk,
+      RstxRBI            => resetn,
+      KeyxDI             => AsconKeyInputxD,
+      CP_InitxSI         => AsconInitxS,
+      CP_PermutexSI      => AsconPermutexS,
+      CP_FinalPermutexSI => AsconPermuteFinalizexS,
+      CP_OutputTagxSI    => AsconOutputTagxS,
+      DataWritexDI       => change_endianess(AsconDataInxD),
+      IODataxDO          => AsconDataOutxD,
+      CP_DonexSO         => AsconDonexS
+      );
+
+  prince_1 : entity work.prince
+    generic map(
+      DECRYPTION => DECRYPTION,
+      BLOCK_SIZE => 64
+      )
+    port map(
+      ClkxCI        => clk,
+      RstxRBI       => resetn,
+      Key0xDI       => PrinceKeyxD(63 downto 0),
+      Key1xDI       => PrinceKeyxD(127 downto 64),
+      MessagexDI    => PrinceInputxD,
+      CiphertextxDO => PrinceOutputxD,
+      in_ready      => PrinceInputReadyxS,
+      in_valid      => PrinceInputValidxS,
+      out_ready     => PrinceOutputReadyxS,
+      out_valid     => PrinceOutputValidxS
+      );
+
+  prince_key : process(PrinceKeyInxD, PrinceKeyxDP, PrinceInputValidxS, PrinceInputReadyxS) is
+  begin
+    PrinceKeyxDN <= PrinceKeyxDP;
+    PrinceKeyxD  <= PrinceKeyxDP;
+
+    if PrinceInputValidxS = '1' and PrinceInputReadyxS = '1' then
+      PrinceKeyxDN <= PrinceKeyInxD;
+      PrinceKeyxD  <= PrinceKeyInxD;
+    end if;
+  end process prince_key;
+
+  prince_reg : entity work.register_stage
+    generic map(
+      WIDTH      => 64,
+      REGISTERED => false
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => PrinceOutputRegInputxD,
+      in_valid => PrinceOutputRegInputValidxS,
+      in_ready => PrinceOutputRegInputReadyxS,
+
+      out_data  => PrinceOutputRegxD,
+      out_valid => PrinceOutputRegValidxS,
+      out_ready => PrinceOutputRegReadyxS
+      );
+
+  block64reg_v1 : if block64_offset'length = 0 generate
+
+    block64_register : entity work.register_stage
+      generic map(
+        WIDTH => 1
+        )
+      port map(
+        clk    => clk,
+        resetn => resetn,
+
+        in_data(0) => block64_last,
+        in_valid   => block64_valid,
+        in_ready   => open,
+
+        out_data(0) => block64_last_reg,
+        out_valid   => open,
+        out_ready   => block64_reg_ready
+        );
+
+  end generate;
+
+  block64reg_v2 : if block64_offset'length /= 0 generate
+    block_reg_in <= block64_offset & block64_len & block64_last;
+
+    block64_register : entity work.register_stage
+      generic map(
+        WIDTH => block64_len'length+block64_offset'length+1
+        )
+      port map(
+        clk    => clk,
+        resetn => resetn,
+
+        in_data  => block_reg_in,
+        in_valid => block64_valid,
+        in_ready => open,
+
+        out_data  => block_reg_out,
+        out_valid => open,
+        out_ready => block64_reg_ready
+        );
+
+    block64_last_reg   <= block_reg_out(0);
+    block64_len_reg    <= block_reg_out(block64_len'length downto 1);
+    block64_offset_reg <= block_reg_out(2*block64_len'length downto block64_len'length+1);
+  end generate;
+
+  block64_decryption : if DECRYPTION generate
+    block64_data_register : entity work.register_stage
+      generic map(
+        WIDTH => block64'length
+        )
+      port map(
+        clk    => clk,
+        resetn => resetn,
+
+        in_data  => block64,
+        in_valid => block64_valid,
+        in_ready => open,
+
+        out_data  => block64_reg,
+        out_valid => block64_reg_valid,
+        out_ready => block64_reg_ready
+        );
+  end generate;
+
+  block64_encryption : if not(DECRYPTION) generate
+    block64_data_register : entity work.register_stage
+      generic map(
+        WIDTH => block64'length
+        )
+      port map(
+        clk    => clk,
+        resetn => resetn,
+
+        in_data  => PrinceOutputRegxD,
+        in_valid => PrinceOutputRegValidxS,
+        in_ready => open,
+
+        out_data  => block64_reg,
+        out_valid => block64_reg_valid,
+        out_ready => block64_reg_ready
+        );
+  end generate;
+
+  input_fifo : entity work.stream_fifo
+    generic map(
+      ELEMENTS => 128/DATASTREAM_DATA_WIDTH
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => InputRequestxD,
+      in_valid => s_requestReg_valid,
+      in_ready => s_requestReg_ready,
+
+      out_data  => InputRequestRegxD,
+      out_valid => InputRequestRegValidxS,
+      out_ready => out_block_ready
+      );
+
+  output_conversion64 : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 64,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => block64_last_reg,
+      in_data         => dec_block,
+      in_field_offset => block64_offset_reg,
+      in_field_len    => block64_len_reg,
+      in_valid        => dec_block_valid,
+      in_ready        => dec_block_ready,
+
+      out_data         => out_block64,
+      out_field_offset => open,         --out_block_addr,
+      out_field_len    => open,
+      out_last         => out_block64_last,
+      out_valid        => out_block64_valid,
+      out_ready        => out_block64_ready
+      );
+
+  output_conversion128 : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 128,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => true
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => block128_last,
+      in_data         => block128_mod,
+      in_field_offset => block128_offset,
+      in_field_len    => block128_len,
+      in_valid        => block128_mod_valid,
+      in_ready        => block128_mod_ready,
+
+      out_data         => out_block128,
+      out_field_offset => open,         --out_block_addr,
+      out_field_len    => open,
+      out_last         => out_block128_last,
+      out_valid        => out_block128_valid,
+      out_ready        => out_block128_ready
+      );
+
+  out_mux : process (out_block64, out_block64_last, out_block64_valid, OutputConversion128xS,
+                     out_block128, out_block128_last, out_block128_valid, out_block_ready)
+  begin
+    out_block128_ready <= '0';
+    out_block64_ready  <= '0';
+    if OutputConversion128xS = '1' then
+      out_block          <= out_block128;
+      out_block_valid    <= out_block128_valid;
+      out_block_last     <= out_block128_last;
+      out_block128_ready <= out_block_ready;
+    else
+      out_block         <= out_block64;
+      out_block_valid   <= out_block64_valid;
+      out_block_last    <= out_block64_last;
+      out_block64_ready <= out_block_ready;
+    end if;
+  end process out_mux;
+
+  address_filter : process(InputRequestRegxD)
+    variable vSize         : unsigned(s_request.size'length-1 downto 0);
+    variable vTmp          : std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+    variable vStartAddress : unsigned(ADDRESS_WIDTH-1 downto 0);
+    variable vEndAddress   : unsigned(ADDRESS_WIDTH-1 downto 0);
+    variable vLenBytes     : unsigned(s_request.len'length + 1 downto 0);
+    type tASizeToMaskLUT is array (0 to 2**2 - 1) of std_logic_vector(1 downto 0);
+    constant ASIZE_MASKING_LUT : tASizeToMaskLUT := (
+      0 => "11",
+      1 => "10",
+      2 => "00",
+      3 => "00");
+  begin
+    -- Compute start and end address
+    vSize                                   := shift_left((vSize'left downto 1                      => '0') & '1', to_integer(unsigned(InputRequestRegxD.size)));
+    vTmp                                    := InputRequestRegxD.address(ADDRESS_WIDTH - 1 downto 2) & (InputRequestRegxD.address(1 downto 0) and ASIZE_MASKING_LUT(to_integer(unsigned(InputRequestRegxD.size))));
+    vStartAddress                           := unsigned(vTmp);
+    assert(unsigned(InputRequestRegxD.size) <= 2);
+    vTmp                                    := (ADDRESS_WIDTH-1 downto InputRequestRegxD.len'length => '0') & InputRequestRegxD.len;
+    vEndAddress                             := vStartAddress + (unsigned(vTmp) sll to_integer(unsigned(InputRequestRegxD.size)));
+
+    SkipDecryptionxS <= '0';
+    if (InputRequestRegxD.request_type = REQ_TYPE_TREE or InputRequestRegxD.request_type = REQ_TYPE_TREE_ROOT) and
+      InputRequestRegxD.read = '1' and
+      DECRYPTION and
+      InputRequestRegxD.metadata = '0' and
+      (unsigned(InputRequestRegxD.virt_address) < vStartAddress or unsigned(InputRequestRegxD.virt_address) > vEndAddress) then
+      SkipDecryptionxS <= '1';
+    end if;
+
+    SkipTagxS <= '0';
+    if (InputRequestRegxD.request_type = REQ_TYPE_TREE or InputRequestRegxD.request_type = REQ_TYPE_TREE_ROOT) then
+      SkipTagxS <= '1';
+    end if;
+  end process address_filter;
+
+  control : process(enc_block_valid, enc_block, dec_block_ready, CtrlStatexDP, CtrlLastStatexD,
+                    TreeRequestxS, DataRequestxS, s_request.error,
+                    AsconDonexS, AsconDataOutxD, AsconSyncxDP, AsconFinishedxDP, PrinceOutputxD,
+                    PrinceOutputRegInputReadyxS, PrinceOutputValidxS,
+                    PrinceOutputRegxD, PrinceInputReadyxS, PrinceOutputRegValidxS, PrinceFinishedxDP,
+                    InputRequestRegxD, PrinceRunningxDP,
+                    block128, block128_valid, out_block128_ready, block128_mod_ready, AuthenticationErrorxSP,
+                    block64, block64_valid, block64_reg_valid, block64_reg, PrinceOutputxD,
+                    SkipDecryptionxS, SkipTagxS, DecryptionDonexDP, InputRequestRegValidxS)
+    variable vLastBlock      : std_logic;
+    variable vPrinceFinished : std_logic;
+    variable vAsconFinished  : std_logic;
+  begin
+    CtrlStatexDN           <= CtrlStatexDP;
+    AsconSyncxDN           <= AsconSyncxDP;
+    AsconFinishedxDN       <= AsconFinishedxDP;
+    PrinceFinishedxDN      <= PrinceFinishedxDP;
+    PrinceRunningxDN       <= PrinceRunningxDP;
+    AuthenticationErrorxSN <= AuthenticationErrorxSP;
+
+    AsconInitxS                <= '0';
+    AsconPermuteFinalizexS     <= '0';
+    AsconPermutexS             <= '0';
+    AsconOutputTagxS           <= '0';
+    AsconKeyInputxD            <= block128;
+    AsconDataInxD              <= (others => '0');
+    AsconDataInxD(63 downto 0) <= block64_reg;
+
+    PrinceInputxD                                  <= enc_block;
+    PrinceInputValidXS                             <= '0';
+    PrinceOutputRegReadyxS                         <= '0';
+    PrinceKeyInxD                                  <= (others => '0');
+    PrinceKeyInxD(ASCON_DATA_BUS_WIDTH-1 downto 0) <= AsconDataOutxD;
+
+    PrinceOutputRegInputxD      <= PrinceOutputxD;
+    PrinceOutputRegInputValidxS <= PrinceOutputValidxS;
+    PrinceOutputReadyxS         <= PrinceOutputRegInputReadyxS;
+
+    dec_block       <= PrinceOutputRegxD;
+    dec_block_valid <= '0';
+    enc_block       <= block64;
+    enc_block_valid <= block64_valid;
+    enc_block_ready <= '0';
+
+    vLastBlock := '0';
+    if (CtrlStatexDP = CtrlLastStatexD) then
+      vLastBlock := '1';
+    end if;
+
+    InputConversion128xS  <= '0';
+    OutputConversion128xS <= '0';
+    AuthenticationErrorxS <= AuthenticationErrorxSP;
+
+    block128_mod       <= block128;
+    block128_mod_valid <= block128_valid;
+    block128_ready     <= block128_mod_ready;
+
+    block64_reg_ready <= '0';
+
+    DecryptionDonexDN <= DecryptionDonexDP;
+
+    -- State Machine
+    -- STATE IDLE
+    if (CtrlStatexDP = STATE_IDLE) then
+      InputConversion128xS <= '1';
+      block128_mod_valid   <= '0';
+      block64_reg_ready    <= block64_reg_valid;
+      if block128_valid = '1' then
+        AsconInitxS  <= '1';
+        CtrlStatexDN <= STATE_INIT;
+      end if;
+    end if;
+
+    -- STATE INIT
+    if (CtrlStatexDP = STATE_INIT) then
+      InputConversion128xS  <= not(AsconFinishedxDP);
+      OutputConversion128xS <= '1';
+
+      vAsconFinished := AsconFinishedxDP;
+      if vAsconFinished = '0' then
+        AsconInitxS <= '1';
+        if AsconDonexS = '1' then
+          vAsconFinished := '1';
+        end if;
+      end if;
+
+      block128_mod_valid <= '0';
+      if vAsconFinished = '1' then
+        block128_mod_valid <= block128_valid;
+        if out_block128_ready = '1' and out_block128_last = '1' then
+          vAsconFinished := '0';
+          CtrlStatexDN   <= STATE_CRYPT;
+        end if;
+      end if;
+
+      AsconFinishedxDN <= vAsconFinished;
+    end if;
+
+    -- STATE CRYPTO
+    if CtrlStatexDP = STATE_CRYPT then
+      vPrinceFinished := PrinceFinishedxDP;
+      vAsconFinished  := AsconFinishedxDP;
+
+      if SkipDecryptionxS = '1' then
+        PrinceOutputRegInputValidxS <= '1';
+      end if;
+
+      if enc_block_valid = '1' and InputRequestRegValidxS = '1' and PrinceFinishedxDP = '0' and PrinceRunningxDP = '0' then
+        if SkipDecryptionxS = '1' then
+          enc_block_ready             <= '1';
+          PrinceOutputRegInputValidxS <= '1';
+          PrinceInputValidxS          <= '0';
+          PrinceRunningxDN            <= '0';
+          vPrinceFinished             := '1';
+          AsconDataInxD               <= (others => '0');
+          AsconPermutexS              <= '1';
+          AsconSyncxDN                <= '1';
+        else
+          PrinceInputValidxS <= '1';
+          enc_block_ready    <= '1';
+          PrinceRunningxDN   <= '1';
+          PrinceFinishedxDN  <= '0';
+          AsconDataInxD      <= (others => '0');
+
+          AsconPermutexS    <= '1';
+          AsconSyncxDN      <= '1';
+          DecryptionDonexDN <= '1';
+        end if;
+      end if;
+
+      if PrinceOutputRegValidxS = '1' and vPrinceFinished = '0' then
+        PrinceRunningxDN <= '0';
+        vPrinceFinished  := '1';
+      end if;
+
+      if AsconSyncxDP = '1' then
+        AsconPermutexS <= '1';
+        AsconSyncxDN   <= '1';
+        if AsconDonexS = '1' then
+          vAsconFinished := '1';
+          AsconSyncxDN   <= '0';
+        end if;
+      end if;
+
+
+      dec_block_valid <= PrinceOutputRegValidxS and vAsconFinished and vPrinceFinished and block64_reg_valid;
+
+      if dec_block_ready = '1' then
+        vAsconFinished         := '0';
+        vPrinceFinished        := '0';
+        PrinceOutputRegReadyxS <= '1';
+        CtrlStatexDN           <= std_logic_vector(unsigned(CtrlStatexDP) + 1);
+      end if;
+
+      AsconFinishedxDN  <= vAsconFinished;
+      PrinceFinishedxDN <= vPrinceFinished;
+    end if;
+
+    if (CtrlStatexDP > STATE_CRYPT and CtrlStatexDP <= CtrlLastStatexD) then
+      vPrinceFinished := PrinceFinishedxDP;
+      vAsconFinished  := AsconFinishedxDP;
+
+      if not(ENC_ABSORB_CIPHERTEXT) and
+        (InputRequestRegxD.request_type = REQ_TYPE_TREE or InputRequestRegxD.request_type = REQ_TYPE_TREE_ROOT) then
+        AsconDataInxD <= (others => '0');
+      end if;
+
+      if SkipDecryptionxS = '1' then
+        PrinceOutputRegInputValidxS <= '1';
+      end if;
+
+      if enc_block_valid = '1' and InputRequestRegValidxS = '1' and PrinceFinishedxDP = '0' and PrinceRunningxDP = '0' and block64_reg_valid = '1' then
+        if SkipDecryptionxS = '1' then
+          enc_block_ready    <= '1';
+          block64_reg_ready  <= '1';
+          PrinceInputValidxS <= '0';
+          PrinceRunningxDN   <= '0';
+          vPrinceFinished    := '1';
+          AsconPermutexS     <= not(DecryptionDonexDP) and (not(vLastBlock) or not(SkipTagxS));
+          AsconSyncxDN       <= not(DecryptionDonexDP) and (not(vLastBlock) or not(SkipTagxS));
+          vAsconFinished     := DecryptionDonexDP or (vLastBlock and SkipTagxS);
+        else
+          PrinceInputValidxS <= '1';
+          enc_block_ready    <= '1';
+          PrinceRunningxDN   <= '1';
+          block64_reg_ready  <= '1';
+          DecryptionDonexDN  <= '1';
+
+          AsconPermutexS <= not(vLastBlock) or not(SkipTagxS);
+          AsconSyncxDN   <= not(vLastBlock) or not(SkipTagxS);
+          vAsconFinished := vLastBlock and SkipTagxS;
+        end if;
+      end if;
+
+      if PrinceOutputRegValidxS = '1' and vPrinceFinished = '0' then
+        PrinceRunningxDN <= '0';
+        vPrinceFinished  := '1';
+      end if;
+
+      if AsconSyncxDP = '1' then
+        AsconPermutexS <= '1';
+        AsconSyncxDN   <= '1';
+        if AsconDonexS = '1' then
+          vAsconFinished := '1';
+          AsconSyncxDN   <= '0';
+        end if;
+      end if;
+
+      dec_block_valid <= PrinceOutputRegValidxS and vAsconFinished and vPrinceFinished and block64_reg_valid;
+      if dec_block_ready = '1' then
+        vAsconFinished         := '0';
+        vPrinceFinished        := '0';
+        PrinceOutputRegReadyxS <= '1';
+        CtrlStatexDN           <= std_logic_vector(unsigned(CtrlStatexDP) + 1);
+        if vLastBlock = '1' then
+          DecryptionDonexDN <= '0';
+          if DataRequestxS = '1' then
+            CtrlStatexDN <= STATE_VERIFY;
+          else
+            CtrlStatexDN <= STATE_IDLE;
+          end if;
+        end if;
+      end if;
+
+      AsconFinishedxDN  <= vAsconFinished;
+      PrinceFinishedxDN <= vPrinceFinished;
+    end if;
+
+    if TAG_SIZE = 16 then
+
+      -- STATE VERIFY
+      if (CtrlStatexDP = STATE_VERIFY) then
+        vAsconFinished := AsconFinishedxDP;
+
+        if block64_reg_valid = '1' then
+          block64_reg_ready      <= '1';
+          AsconPermuteFinalizexS <= '1';
+          AsconSyncxDN           <= '1';
+        end if;
+
+        if AsconSyncxDP = '1' then
+          AsconPermuteFinalizexS <= '1';
+          AsconSyncxDN           <= '1';
+          if AsconDonexS = '1' then
+            vAsconFinished := '1';
+            AsconSyncxDN   <= '0';
+          end if;
+        end if;
+
+        InputConversion128xS <= '1';
+        block128_mod_valid   <= '0';
+        if vAsconFinished = '1' then
+          AsconOutputTagxS <= '1';
+          if block128_valid = '1' then
+            vAsconFinished                                := '0';
+            block128_mod                                  <= (others => '0');
+            block128_mod(ASCON_DATA_BUS_WIDTH-1 downto 0) <= change_endianess(AsconDataOutxD);
+            block128_mod_valid                            <= '1';
+            CtrlStatexDN                                  <= STATE_VERIFY_2;
+            if change_endianess(AsconDataOutxD) /= block128(ASCON_DATA_BUS_WIDTH-1 downto 0) and DECRYPTION then
+              AuthenticationErrorxSN <= '1';
+            end if;
+          end if;
+        end if;
+        AsconFinishedxDN <= vAsconFinished;
+      end if;
+
+      if (CtrlStatexDP = STATE_VERIFY_2) then
+        OutputConversion128xS <= '1';
+        if (out_block128_ready = '1' and out_block128_last = '1') then
+          AuthenticationErrorxSN <= '0';
+          CtrlStatexDN           <= STATE_IDLE;
+        end if;
+      end if;
+    elsif TAG_SIZE = 8 then
+
+      -- STATE VERIFY
+      if (CtrlStatexDP = STATE_VERIFY) then
+        vAsconFinished := AsconFinishedxDP;
+
+        if block64_reg_valid = '1' then
+          block64_reg_ready      <= '1';
+          AsconPermuteFinalizexS <= '1';
+          AsconSyncxDN           <= '1';
+        end if;
+
+        if AsconSyncxDP = '1' then
+          AsconPermuteFinalizexS <= '1';
+          AsconSyncxDN           <= '1';
+          if AsconDonexS = '1' then
+            vAsconFinished := '1';
+            AsconSyncxDN   <= '0';
+          end if;
+        end if;
+
+        enc_block_valid <= '0';
+        if vAsconFinished = '1' then
+          AsconOutputTagxS       <= '1';
+          vAsconFinished         := '0';
+          dec_block_valid        <= '1';
+          dec_block(63 downto 0) <= change_endianess(AsconDataOutxD(63 downto 0));
+          if change_endianess(AsconDataOutxD(63 downto 0)) /= block64 and DECRYPTION then
+            AuthenticationErrorxS <= '1';
+          end if;
+          if dec_block_ready = '1' then
+            enc_block_ready <= '1';
+            CtrlStatexDN    <= STATE_IDLE;
+          end if;
+        end if;
+
+        AsconFinishedxDN <= vAsconFinished;
+      end if;
+    end if;
+
+  end process control;
+
+  output : process(CtrlStatexDP, enc_block_valid, s_request, out_block, out_block_addr, out_block_valid, AsconSyncxDP,
+                   virtualAddrRegxDP, requestProcessedxDBP, out_block_ready, AuthenticationErrorxS, CtrlLastStatexD, OutputRequestxD) is
+    variable vOutBlockCounter       : std_logic_vector(TRANSLATION_FACTOR_BIT-1 downto 0);
+    variable vPhysicalLen           : std_logic_vector(s_request.block_len'length-1 downto 0);
+    variable vPhysicalAddr          : std_logic_vector(s_request.block_address'length-1 downto 0);
+    variable vBlockCount, vBlockNum : integer;
+    variable vInBlockNum            : integer;
+    variable vVirtAddr              : integer;
+  begin
+    virtualAddrRegxDN    <= virtualAddrRegxDP;
+    requestProcessedxDBN <= requestProcessedxDBP;
+
+    -- Virtual Address Setup
+    vVirtAddr := to_integer(unsigned(virtualAddrRegxDP));
+    if (out_block_valid = '1') then
+      if (requestProcessedxDBP = '0' and OutputRequestxD.metadata = '0') then
+        vVirtAddr            := to_integer(unsigned(OutputRequestxD.virt_address));
+        requestProcessedxDBN <= '1';
+      end if;
+    end if;
+
+    -- Defaults for output
+    vOutBlockCounter := std_logic_vector(MAX_COUNTER_VALUE - unsigned(out_block_addr));
+    vPhysicalLen     := OutputRequestxD.block_len(OutputRequestxD.block_len'length-1 downto TRANSLATION_FACTOR_BIT) & vOutBlockCounter;
+    vPhysicalAddr    := OutputRequestxD.block_address(OutputRequestxD.block_address'length-1 downto TRANSLATION_FACTOR_BIT+2) & out_block_addr & "00";
+
+    out_request               <= OutputRequestxD;
+    out_request.block_len     <= vPhysicalLen;
+    out_request.block_address <= vPhysicalAddr;
+    out_request.virt_address  <= (others => '0');
+
+    -- Output overwrites
+    if (CtrlStatexDP >= STATE_CRYPT and CtrlStatexDP <= CtrlLastStatexD) then
+      out_request.virt_address <= std_logic_vector(to_unsigned(vVirtAddr, s_request.virt_address'length));
+
+      if (out_block_ready = '1') then
+        vVirtAddr := vVirtAddr + (DATASTREAM_DATA_WIDTH/8);
+      end if;
+    else
+      out_request.metadata <= '1';
+      out_request.error    <= OutputRequestxD.error or AuthenticationErrorxS;
+    end if;
+
+    if to_integer(unsigned(vPhysicalLen)) = 0 and out_block_ready = '1' then
+      requestProcessedxDBN <= '0';
+    end if;
+
+    out_request.valid <= out_block_valid;
+
+    if CtrlStatexDP /= STATE_INIT and CtrlStatexDP /= STATE_IDLE then
+      out_request.data <= out_block;
+    end if;
+
+    virtualAddrRegxDN <= std_logic_vector(to_unsigned(vVirtAddr, s_request.virt_address'length));
+  end process output;
+
+  out_reg : if OUTPUT_REGISTER = true generate
+    output_buf : entity work.stream_register_stage_fifo
+      port map(
+        clk    => clk,
+        resetn => resetn,
+
+        in_data  => BufInputxD,
+        in_valid => BufInputValidxS,
+        in_ready => BufInputReadyxS,
+
+        out_data  => BufOutputxD,
+        out_valid => BufOutputValidxS,
+        out_ready => BufOutputReadyxS
+        );
+  end generate out_reg;
+
+  ascon_buffer : process (BufOutputValidxS, BufOutputxD, m_request_ready, out_request, BufInputReadyxS)
+  begin
+    if OUTPUT_REGISTER then
+      BufInputxD       <= out_request;
+      BufInputValidxS  <= out_request.valid;
+      out_block_ready  <= BufInputReadyxS;
+      m_request        <= BufOutputxD;
+      BufOutputReadyxS <= m_request_ready;
+    else
+      m_request       <= out_request;
+      out_block_ready <= m_request_ready;
+    end if;
+  end process ascon_buffer;
+
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        CtrlStatexDP           <= STATE_IDLE;
+        AsconSyncxDP           <= '0';
+        PrinceRunningxDP       <= '0';
+        PrinceFinishedxDP      <= '0';
+        AsconFinishedxDP       <= '0';
+        AuthenticationErrorxSP <= '0';
+        PrinceKeyxDP           <= (others => '0');
+        virtualAddrRegxDP      <= (others => '0');
+        requestProcessedxDBP   <= '0';
+        inputBlockCounterxDP   <= (others => '0');
+        DecryptionDonexDP      <= '0';
+      else
+        CtrlStatexDP           <= CtrlStatexDN;
+        AsconSyncxDP           <= AsconSyncxDN;
+        PrinceRunningxDP       <= PrinceRunningxDN;
+        PrinceFinishedxDP      <= PrinceFinishedxDN;
+        AsconFinishedxDP       <= AsconFinishedxDN;
+        AuthenticationErrorxSP <= AuthenticationErrorxSN;
+        PrinceKeyxDP           <= PrinceKeyxDN;
+        virtualAddrRegxDP      <= virtualAddrRegxDN;
+        requestProcessedxDBP   <= requestProcessedxDBN;
+        inputBlockCounterxDP   <= inputBlockCounterxDN;
+        DecryptionDonexDP      <= DecryptionDonexDN;
+      end if;
+    end if;
+  end process regs;
+
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_lrae_ascon_prince_ecb.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_lrae_ascon_prince_ecb.vhd
new file mode 100644
index 0000000..50a5063
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_lrae_ascon_prince_ecb.vhd
@@ -0,0 +1,990 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Encrypts or decrypts transactions in a leakage resilient AE mode.
+--!
+--! For data nodes, an Ascon-like sponge mode is used for key stream generation
+--! and authentication tag calculation. The key stream is then used in a
+--! block cipher (Prince or Qarma) to perform the real encryption. For tree
+--! nodes, Prince or Qarma is used directly in ECB mode. Details for this mode
+--! of operation can be found in the Journal version of the MEAS paper.
+--! (see MEASv2)
+--!
+--! Regarding memory layout, first the key, second the data, and third the
+--! authentication tag is expected/generated.
+entity stream_lrae_ascon_prince_ecb is
+  generic(
+    DATA_ALIGNMENT  : integer := 64;
+    TREE_ALIGNMENT  : integer := 32;
+    TAG_SIZE        : integer := 8;
+    DECRYPTION      : boolean := false;
+    OUTPUT_REGISTER : boolean := true;
+    QARMA           : boolean := true
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_lrae_ascon_prince_ecb;
+
+architecture Behavioral of stream_lrae_ascon_prince_ecb is
+  constant ASCON_DATA_BUS_WIDTH   : integer                                     := 128;
+  constant ALIGNMENT              : integer                                     := maximum(DATA_ALIGNMENT, TREE_ALIGNMENT);
+  constant METADATA               : integer                                     := 16;
+  constant TRANSLATION_FACTOR     : integer                                     := (64/DATASTREAM_DATA_WIDTH);
+  constant TRANSLATION_FACTOR_BIT : integer                                     := log2_ceil(TRANSLATION_FACTOR);
+  constant MAX_COUNTER_VALUE      : unsigned(TRANSLATION_FACTOR_BIT-1 downto 0) := (others => '1');
+
+  constant STATE_IDLE            : std_logic_vector(log2_ceil(ALIGNMENT/8)+1 downto 0) := (others                                   => '0');
+  constant STATE_INIT            : std_logic_vector(log2_ceil(ALIGNMENT/8)+1 downto 0) := (log2_ceil(ALIGNMENT/8)+1 downto 2        => '0') & "01";
+  constant STATE_CRYPT           : std_logic_vector(log2_ceil(ALIGNMENT/8)+1 downto 0) := "01" & (log2_ceil(ALIGNMENT/8)-1 downto 0 => '0');
+  constant STATE_TREE_CRYPT_LAST : std_logic_vector(log2_ceil(ALIGNMENT/8)+1 downto 0) := "01" & std_logic_vector(to_unsigned(TREE_ALIGNMENT/8-1, log2_ceil(ALIGNMENT/8)));
+  constant STATE_CRYPT_LAST      : std_logic_vector(log2_ceil(ALIGNMENT/8)+1 downto 0) := "01" & std_logic_vector(to_unsigned(DATA_ALIGNMENT/8-1, log2_ceil(ALIGNMENT/8)));
+  constant STATE_VERIFY          : std_logic_vector(log2_ceil(ALIGNMENT/8)+1 downto 0) := (log2_ceil(ALIGNMENT/8)+1 downto 2        => '0') & "10";
+  constant STATE_VERIFY_2        : std_logic_vector(log2_ceil(ALIGNMENT/8)+1 downto 0) := (log2_ceil(ALIGNMENT/8)+1 downto 2        => '0') & "11";
+  constant STATE_ECB             : std_logic_vector(log2_ceil(ALIGNMENT/8)+1 downto 0) := '1' & (log2_ceil(ALIGNMENT/8) downto 0    => '0');
+  constant STATE_ECB_INIT        : std_logic_vector(log2_ceil(ALIGNMENT/8)+1 downto 0) := "11" & (log2_ceil(ALIGNMENT/8)-1 downto 0 => '0');
+  signal last_block              : std_logic;
+
+  signal enc_block                        : std_logic_vector(63 downto 0);
+  signal enc_block_valid, enc_block_ready : std_logic;
+
+  signal block64, block64_reg                       : std_logic_vector(63 downto 0);
+  signal block64_offset, block64_len                : std_logic_vector(offset_width(DATASTREAM_DATA_WIDTH, 64)-1 downto 0);
+  signal block64_offset_reg, block64_len_reg        : std_logic_vector(offset_width(DATASTREAM_DATA_WIDTH, 64)-1 downto 0);
+  signal block64_valid, block64_ready, block64_last : std_logic;
+  signal block64_last_reg                           : std_logic;
+  signal block64_reg_valid, block64_reg_ready       : std_logic;
+
+  signal block128, block128_mod                                                                : std_logic_vector(127 downto 0);
+  signal block128_offset, block128_len                                                         : std_logic_vector(offset_width(DATASTREAM_DATA_WIDTH, 128)-1 downto 0);
+  signal block128_valid, block128_ready, block128_last, block128_mod_valid, block128_mod_ready : std_logic;
+
+  signal dec_block                        : std_logic_vector(63 downto 0);
+  signal dec_block_valid, dec_block_ready : std_logic;
+
+  signal out_block                                        : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal out_block_addr                                   : std_logic_vector(TRANSLATION_FACTOR_BIT-1 downto 0);
+  signal out_block_valid, out_block_ready, out_block_last : std_logic;
+
+  signal out_block64                                            : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal out_block64_valid, out_block64_ready, out_block64_last : std_logic;
+
+  signal out_block128                                              : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal out_block128_valid, out_block128_ready, out_block128_last : std_logic;
+
+  signal AsconInitxS, AsconPermutexS, AsconPermuteFinalizexS : std_logic;
+  signal AsconKeyInputxD                                     : std_logic_vector(127 downto 0);
+  signal AsconDonexS, AsconOutputTagxS                       : std_logic;
+  signal AsconDataInxD, AsconDataOutxD                       : std_logic_vector(ASCON_DATA_BUS_WIDTH-1 downto 0);
+
+  signal CtrlStatexDP, CtrlStatexDN         : std_logic_vector(log2_ceil(ALIGNMENT/8)+1 downto 0);
+  signal AsconSyncxDP, AsconSyncxDN         : std_logic;
+  signal AsconFinishedxDP, AsconFinishedxDN : std_logic;
+
+  signal PrinceKeyxD, PrinceKeyInxD                                                       : std_logic_vector(127 downto 0);
+  signal PrinceKeyxDP, PrinceKeyxDN                                                       : std_logic_vector(127 downto 0);
+  signal PrinceInputxD, PrinceOutputxD, PrinceOutputRegxD                                 : std_logic_vector(63 downto 0);
+  signal PrinceOutputRegInputxD                                                           : std_logic_vector(63 downto 0);
+  signal PrinceOutputRegInputValidxS, PrinceOutputRegInputReadyxS                         : std_logic;
+  signal PrinceInputReadyxS, PrinceInputValidxS, PrinceOutputReadyxS, PrinceOutputValidxS : std_logic;
+  signal PrinceOutputRegValidxS, PrinceOutputRegReadyxS                                   : std_logic;
+  signal PrinceFinishedxDP, PrinceFinishedxDN                                             : std_logic;
+  signal PrinceRunningxDP, PrinceRunningxDN                                               : std_logic;
+  signal PrinceKeyValidxS                                                                 : std_logic;
+
+  signal InputRequestxD, InputRequestRegxD, OutputRequestxD : StreamType;
+
+  signal requestRegxDP, requestRegxDN, out_request  : StreamType;
+  signal virtualAddrRegxDP, virtualAddrRegxDN       : std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+  signal requestProcessedxDBP, requestProcessedxDBN : std_logic;
+  signal inputBlockCounterxDP, inputBlockCounterxDN : std_logic_vector(log2_ceil(128/DATASTREAM_DATA_WIDTH)-1 downto 0);
+
+  signal DataRequestxS   : std_logic;
+  signal CtrlLastStatexD : std_logic_vector(CtrlStatexDP'length-1 downto 0);
+
+  signal BufInputxD, BufOutputxD                                              : StreamType;
+  signal BufInputValidxS, BufOutputValidxS, BufInputReadyxS, BufOutputReadyxS : std_logic;
+
+  signal AuthenticationErrorxSP, AuthenticationErrorxSN : std_logic;
+
+  signal AuthenticationErrorxS                  : std_logic;
+  signal InputConversion128xS                   : std_logic;
+  signal InputConversion64xS                    : std_logic;
+  signal OutputConversion128xS                  : std_logic;
+  signal s_request64_valid, s_request64_ready   : std_logic;
+  signal s_request128_valid, s_request128_ready : std_logic;
+  signal s_requestReg_valid, s_requestReg_ready : std_logic;
+  signal s_request128_last                      : std_logic;
+
+  signal TweakxD, TweakInxD, TweakxDP, TweakxDN : std_logic_vector(63 downto 0);
+
+  signal block_reg_in, block_reg_out : std_logic_vector(block64_len'length+block64_offset'length downto 0);
+begin
+  InputConversion64xS <= not(InputConversion128xS);
+
+  synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 3
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => s_request.valid,
+      in_ready => s_request_ready,
+
+      out_valid(0)  => s_request64_valid,
+      out_valid(1)  => s_request128_valid,
+      out_valid(2)  => s_requestReg_valid,
+      out_active(0) => InputConversion64xS,
+      out_active(1) => InputConversion128xS,
+      out_active(2) => '1',
+      out_ready(0)  => s_request64_ready,
+      out_ready(1)  => s_request128_ready,
+      out_ready(2)  => s_requestReg_ready
+      );
+
+  input_conversion128 : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 128,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+
+      in_last  => s_request128_last,
+      in_data  => s_request.data,
+      in_valid => s_request128_valid,
+      in_ready => s_request128_ready,
+
+      out_data         => block128,
+      out_last         => block128_last,
+      out_field_offset => block128_offset,
+      out_field_len    => block128_len,
+      out_valid        => block128_valid,
+      out_ready        => block128_ready
+      );
+
+  inputBlockCounterxDN <= std_logic_vector(unsigned(inputBlockCounterxDP) + 1) when s_request128_ready = '1'                                          else inputBlockCounterxDP;
+  s_request128_last    <= '1'                                                  when inputBlockCounterxDP = ones(log2_ceil(128/DATASTREAM_DATA_WIDTH)) else '0';
+
+  input_conversion64 : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 64,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+      in_last         => last_block,
+      in_data         => s_request.data,
+      in_valid        => s_request64_valid,
+      in_ready        => s_request64_ready,
+
+      out_data         => block64,
+      out_field_offset => block64_offset,
+      out_field_len    => block64_len,
+      out_valid        => block64_valid,
+      out_ready        => block64_ready,
+      out_last         => block64_last
+      );
+
+  block64_ready <= enc_block_ready;
+
+  last_block <= '1' when (to_integer(unsigned(s_request.block_len)) = 0) else '0';
+
+  input : process(s_request64_valid, s_request128_valid, requestRegxDP, s_request) is
+    variable vRequest : StreamType;
+  begin
+    requestRegxDN <= requestRegxDP;
+    vRequest      := requestRegxDP;
+    if (s_request64_valid = '1' or s_request128_valid = '1') then
+      vRequest := s_request;
+    end if;
+
+    InputRequestxD <= vRequest;
+    requestRegxDN  <= vRequest;
+  end process input;
+
+  OutputRequestxD <= InputRequestRegxD;
+
+  request_type : process (OutputRequestxD)
+    variable vTreeRequest, vDataRequest : std_logic;
+    variable vCtrlLastState             : std_logic_vector(CtrlStatexDP'length-1 downto 0);
+  begin
+    vDataRequest   := '0';
+    vCtrlLastState := STATE_CRYPT_LAST;
+    if OutputRequestxD.request_type = REQ_TYPE_DATA then
+      vDataRequest   := '1';
+      vCtrlLastState := STATE_CRYPT_LAST;
+    elsif (OutputRequestxD.request_type = REQ_TYPE_TREE or OutputRequestxD.request_type = REQ_TYPE_TREE_ROOT) then
+      vCtrlLastState := STATE_TREE_CRYPT_LAST;
+    end if;
+
+    DataRequestxS   <= vDataRequest;
+    CtrlLastStatexD <= vCtrlLastState;
+  end process request_type;
+
+  -- Ascon 128
+  ascon_1 : entity work.ascon_mac
+    generic map (
+      UNROLED_ROUNDS  => 3,                     -- 1,2,3,4 or 6
+      DATA_BLOCK_SIZE => ASCON_DATA_BUS_WIDTH,  -- rate
+      ROUNDS_A        => 12,
+      ROUNDS_B        => 9,
+      DATA_BUS_WIDTH  => ASCON_DATA_BUS_WIDTH)
+    port map (
+      ClkxCI             => clk,
+      RstxRBI            => resetn,
+      KeyxDI             => AsconKeyInputxD,
+      CP_InitxSI         => AsconInitxS,
+      CP_PermutexSI      => AsconPermutexS,
+      CP_FinalPermutexSI => AsconPermuteFinalizexS,
+      CP_OutputTagxSI    => AsconOutputTagxS,
+      DataWritexDI       => change_endianess(AsconDataInxD),
+      IODataxDO          => AsconDataOutxD,
+      CP_DonexSO         => AsconDonexS
+      );
+
+
+  prince_gen : if not(QARMA) generate
+    prince_1 : entity work.prince
+      generic map(
+        DECRYPTION => DECRYPTION,
+        BLOCK_SIZE => 64
+        )
+      port map(
+        ClkxCI        => clk,
+        RstxRBI       => resetn,
+        Key0xDI       => PrinceKeyxD(63 downto 0),
+        Key1xDI       => PrinceKeyxD(127 downto 64),
+        MessagexDI    => PrinceInputxD,
+        CiphertextxDO => PrinceOutputxD,
+        in_ready      => PrinceInputReadyxS,
+        in_valid      => PrinceInputValidxS,
+        out_ready     => PrinceOutputReadyxS,
+        out_valid     => PrinceOutputValidxS
+        );
+  end generate prince_gen;
+
+  qarma_gen : if QARMA generate
+    qarma_1 : entity work.qarma
+      generic map(
+        DECRYPTION => DECRYPTION,
+        ROUNDS     => 6
+        )
+      port map(
+        ClkxCI        => clk,
+        RstxRBI       => resetn,
+        KeyxDI        => PrinceKeyxD,
+        TweakxDI      => TweakxD,
+        MessagexDI    => PrinceInputxD,
+        CiphertextxDO => PrinceOutputxD,
+        in_ready      => PrinceInputReadyxS,
+        in_valid      => PrinceInputValidxS,
+        out_ready     => PrinceOutputReadyxS,
+        out_valid     => PrinceOutputValidxS
+        );
+  end generate qarma_gen;
+
+  TweakInxD(63 downto 32) <= (others => '0');
+  TweakInxD(31 downto 0)  <= set_bits(InputRequestxD.virt_address, block64_offset, DATASTREAM_DATA_WIDTH/8, 64/8) when block64_offset'length /= 0 else
+                            InputRequestxD.virt_address;
+
+  prince_key : process(PrinceKeyInxD, PrinceKeyxDP, PrinceInputValidxS, PrinceInputReadyxS, PrinceKeyValidxS) is
+  begin
+    PrinceKeyxDN <= PrinceKeyxDP;
+    PrinceKeyxD  <= PrinceKeyxDP;
+
+    if PrinceKeyValidxS = '1' then
+      PrinceKeyxDN <= PrinceKeyInxD;
+      PrinceKeyxD  <= PrinceKeyInxD;
+    end if;
+  end process prince_key;
+
+  tweak_stage : process(TweakInxD, TweakxDP, PrinceInputValidxS) is
+  begin
+    TweakxDN <= TweakxDP;
+    TweakxD  <= TweakxDP;
+
+    if PrinceInputValidxS = '1' then
+      TweakxDN <= TweakInxD;
+      TweakxD  <= TweakInxD;
+    end if;
+  end process tweak_stage;
+
+
+  PrinceOutputRegInputxD      <= PrinceOutputxD;
+  PrinceOutputRegInputValidxS <= PrinceOutputValidxS;
+  PrinceOutputReadyxS         <= PrinceOutputRegInputReadyxS;
+
+  prince_reg : entity work.register_stage
+    generic map(
+      WIDTH      => 64,
+      REGISTERED => false
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => PrinceOutputRegInputxD,
+      in_valid => PrinceOutputRegInputValidxS,
+      in_ready => PrinceOutputRegInputReadyxS,
+
+      out_data  => PrinceOutputRegxD,
+      out_valid => PrinceOutputRegValidxS,
+      out_ready => PrinceOutputRegReadyxS
+      );
+
+  block64reg_v1 : if block64_offset'length = 0 generate
+
+    block64_register : entity work.register_stage
+      generic map(
+        WIDTH => 1
+        )
+      port map(
+        clk    => clk,
+        resetn => resetn,
+
+        in_data(0) => block64_last,
+        in_valid   => block64_valid,
+        in_ready   => open,
+
+        out_data(0) => block64_last_reg,
+        out_valid   => open,
+        out_ready   => PrinceOutputRegReadyxS
+        );
+
+  end generate;
+
+  block64reg_v2 : if block64_offset'length /= 0 generate
+    block_reg_in <= block64_offset & block64_len & block64_last;
+
+    block64_register : entity work.register_stage
+      generic map(
+        WIDTH => block64_len'length+block64_offset'length+1
+        )
+      port map(
+        clk    => clk,
+        resetn => resetn,
+
+        in_data  => block_reg_in,
+        in_valid => block64_valid,
+        in_ready => open,
+
+        out_data  => block_reg_out,
+        out_valid => open,
+        out_ready => PrinceOutputRegReadyxS
+        );
+
+    block64_last_reg   <= block_reg_out(0);
+    block64_len_reg    <= block_reg_out(block64_len'length downto 1);
+    block64_offset_reg <= block_reg_out(2*block64_len'length downto block64_len'length+1);
+  end generate;
+
+  block64_decryption : if DECRYPTION generate
+    block64_data_register : entity work.register_stage
+      generic map(
+        WIDTH => block64'length
+        )
+      port map(
+        clk    => clk,
+        resetn => resetn,
+
+        in_data  => block64,
+        in_valid => block64_valid,
+        in_ready => open,
+
+        out_data  => block64_reg,
+        out_valid => block64_reg_valid,
+        out_ready => block64_reg_ready
+        );
+  end generate;
+
+  block64_encryption : if not(DECRYPTION) generate
+    block64_data_register : entity work.register_stage
+      generic map(
+        WIDTH => block64'length
+        )
+      port map(
+        clk    => clk,
+        resetn => resetn,
+
+        in_data  => PrinceOutputRegxD,
+        in_valid => PrinceOutputRegValidxS,
+        in_ready => open,
+
+        out_data  => block64_reg,
+        out_valid => block64_reg_valid,
+        out_ready => block64_reg_ready
+        );
+  end generate;
+
+  input_fifo : entity work.stream_fifo
+    generic map(
+      ELEMENTS => 128/DATASTREAM_DATA_WIDTH
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => InputRequestxD,
+      in_valid => s_requestReg_valid,
+      in_ready => s_requestReg_ready,
+
+      out_data  => InputRequestRegxD,
+      out_valid => open,
+      out_ready => out_block_ready
+      );
+
+  output_conversion64 : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 64,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => block64_last_reg,
+      in_data         => dec_block,
+      in_field_offset => block64_offset_reg,
+      in_field_len    => block64_len_reg,
+      in_valid        => dec_block_valid,
+      in_ready        => dec_block_ready,
+
+      out_data         => out_block64,
+      out_field_offset => open,         --out_block_addr,
+      out_field_len    => open,
+      out_last         => out_block64_last,
+      out_valid        => out_block64_valid,
+      out_ready        => out_block64_ready
+      );
+
+  output_conversion128 : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 128,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => true
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => block128_last,
+      in_data         => block128_mod,
+      in_field_offset => block128_offset,
+      in_field_len    => block128_len,
+      in_valid        => block128_mod_valid,
+      in_ready        => block128_mod_ready,
+
+      out_data         => out_block128,
+      out_field_offset => open,         --out_block_addr,
+      out_field_len    => open,
+      out_last         => out_block128_last,
+      out_valid        => out_block128_valid,
+      out_ready        => out_block128_ready
+      );
+
+  out_mux : process (out_block64, out_block64_last, out_block64_valid, OutputConversion128xS,
+                     out_block128, out_block128_last, out_block128_valid, out_block_ready)
+  begin
+    out_block128_ready <= '0';
+    out_block64_ready  <= '0';
+    if OutputConversion128xS = '1' then
+      out_block          <= out_block128;
+      out_block_valid    <= out_block128_valid;
+      out_block_last     <= out_block128_last;
+      out_block128_ready <= out_block_ready;
+    else
+      out_block         <= out_block64;
+      out_block_valid   <= out_block64_valid;
+      out_block_last    <= out_block64_last;
+      out_block64_ready <= out_block_ready;
+    end if;
+  end process out_mux;
+
+  control : process(enc_block_valid, enc_block, dec_block_ready, CtrlStatexDP, CtrlLastStatexD,
+                    DataRequestxS, s_request.error, AsconDonexS, AsconDataOutxD, AsconSyncxDP, AsconFinishedxDP, PrinceOutputxD,
+                    PrinceOutputValidxS, PrinceOutputRegxD, PrinceInputReadyxS, PrinceOutputRegValidxS, PrinceFinishedxDP,
+                    InputRequestxD, PrinceRunningxDP, block128, block128_valid, out_block128_ready, block128_mod_ready, AuthenticationErrorxSP,
+                    block64, block64_valid, OutputRequestxD, block64_reg_valid, block64_reg, block64_offset_reg,
+                    out_block128_last, PrinceOutputxD)
+    variable vLastBlock      : std_logic;
+    variable vPrinceFinished : std_logic;
+    variable vAsconFinished  : std_logic;
+  begin
+    CtrlStatexDN           <= CtrlStatexDP;
+    AsconSyncxDN           <= AsconSyncxDP;
+    AsconFinishedxDN       <= AsconFinishedxDP;
+    PrinceFinishedxDN      <= PrinceFinishedxDP;
+    PrinceRunningxDN       <= PrinceRunningxDP;
+    AuthenticationErrorxSN <= AuthenticationErrorxSP;
+
+    AsconInitxS                <= '0';
+    AsconPermuteFinalizexS     <= '0';
+    AsconPermutexS             <= '0';
+    AsconOutputTagxS           <= '0';
+    AsconKeyInputxD            <= block128;
+    AsconDataInxD              <= (others => '0');
+    AsconDataInxD(63 downto 0) <= block64_reg;
+
+    PrinceInputxD                                  <= enc_block;
+    PrinceInputValidXS                             <= '0';
+    PrinceOutputRegReadyxS                         <= '0';
+    PrinceKeyInxD                                  <= (others => '0');
+    PrinceKeyInxD(ASCON_DATA_BUS_WIDTH-1 downto 0) <= AsconDataOutxD;
+    PrinceKeyValidxS                               <= '0';
+
+    dec_block       <= PrinceOutputRegxD;
+    dec_block_valid <= '0';
+    enc_block       <= block64;
+    enc_block_valid <= block64_valid;
+    enc_block_ready <= '0';
+
+    vLastBlock := '0';
+    if CtrlStatexDP = CtrlLastStatexD or
+      (CtrlStatexDP = STATE_ECB and to_integer(unsigned(OutputRequestxD.block_len)) = 0 and
+       block64_offset_reg = ones(block64_offset_reg'length)) then
+      vLastBlock := '1';
+    end if;
+
+    InputConversion128xS  <= '0';
+    OutputConversion128xS <= '0';
+    AuthenticationErrorxS <= AuthenticationErrorxSP;
+
+    block128_mod       <= block128;
+    block128_mod_valid <= block128_valid;
+    block128_ready     <= block128_mod_ready;
+
+    block64_reg_ready <= '0';
+
+    -- State Machine
+    -- STATE IDLE
+    if (CtrlStatexDP = STATE_IDLE) then
+      InputConversion128xS <= '1';
+      block128_mod_valid   <= '0';
+      block64_reg_ready    <= block64_reg_valid;
+
+      if block128_valid = '1' then
+        if InputRequestxD.request_type = REQ_TYPE_TREE or
+          InputRequestxD.request_type = REQ_TYPE_TREE_ROOT then
+          CtrlStatexDN       <= STATE_ECB_INIT;
+          PrinceKeyValidxS   <= '1';
+          PrinceKeyInxD      <= block128;
+          block128_mod_valid <= block128_valid;
+        else
+          AsconInitxS  <= '1';
+          CtrlStatexDN <= STATE_INIT;
+        end if;
+      end if;
+    end if;
+
+    -- STATE ECB_INIT
+
+    if (CtrlStatexDP = STATE_ECB_INIT) then
+      OutputConversion128xS <= '1';
+
+      if out_block128_ready = '1' and out_block128_last = '1' then
+        CtrlStatexDN <= STATE_ECB;
+      end if;
+    end if;
+
+    -- STATE INIT
+    if (CtrlStatexDP = STATE_INIT) then
+      InputConversion128xS  <= not(AsconFinishedxDP);
+      OutputConversion128xS <= '1';
+
+      vAsconFinished := AsconFinishedxDP;
+      if vAsconFinished = '0' then
+        AsconInitxS <= '1';
+        if AsconDonexS = '1' then
+          vAsconFinished := '1';
+        end if;
+      end if;
+
+      block128_mod_valid <= '0';
+      if vAsconFinished = '1' then
+        block128_mod_valid <= block128_valid;
+        if out_block128_ready = '1' and out_block128_last = '1' then
+          vAsconFinished := '0';
+          CtrlStatexDN   <= STATE_CRYPT;
+        end if;
+      end if;
+
+      AsconFinishedxDN <= vAsconFinished;
+    end if;
+
+    -- STATE_ECB
+    if (CtrlStatexDP = STATE_ECB) then
+      vPrinceFinished   := PrinceFinishedxDP;
+      block64_reg_ready <= block64_reg_valid;
+
+      if enc_block_valid = '1' and PrinceRunningxDP = '0' and PrinceFinishedxDP = '0' then
+        PrinceInputValidxS <= '1';
+        enc_block_ready    <= '1';
+        PrinceRunningxDN   <= '1';
+      end if;
+
+      if PrinceOutputRegValidxS = '1' and vPrinceFinished = '0' then
+        PrinceRunningxDN <= '0';
+        vPrinceFinished  := '1';
+      end if;
+
+      dec_block_valid <= PrinceOutputRegValidxS and vPrinceFinished;
+
+      if dec_block_ready = '1' then
+        vPrinceFinished        := '0';
+        PrinceOutputRegReadyxS <= '1';
+        if vLastBlock = '1' then
+          CtrlStatexDN <= STATE_IDLE;
+        else
+          CtrlStatexDN <= STATE_ECB;
+        end if;
+      end if;
+
+      PrinceFinishedxDN <= vPrinceFinished;
+    end if;
+
+    -- STATE CRYPTO
+    if CtrlStatexDP = STATE_CRYPT then
+      vPrinceFinished := PrinceFinishedxDP;
+      vAsconFinished  := AsconFinishedxDP;
+
+      if enc_block_valid = '1' and PrinceFinishedxDP = '0' and PrinceRunningxDP = '0' then
+        PrinceInputValidxS <= '1';
+        PrinceKeyValidxS   <= '1';
+        enc_block_ready    <= '1';
+        PrinceRunningxDN   <= '1';
+        PrinceFinishedxDN  <= '0';
+        AsconDataInxD      <= (others => '0');
+        AsconPermutexS     <= '1';
+        AsconSyncxDN       <= '1';
+      end if;
+
+      if PrinceOutputRegValidxS = '1' and vPrinceFinished = '0' then
+        PrinceRunningxDN <= '0';
+        vPrinceFinished  := '1';
+      end if;
+
+      if AsconSyncxDP = '1' then
+        AsconPermutexS <= '1';
+        AsconSyncxDN   <= '1';
+        if AsconDonexS = '1' then
+          vAsconFinished := '1';
+          AsconSyncxDN   <= '0';
+        end if;
+      end if;
+
+      dec_block_valid <= PrinceOutputRegValidxS and vAsconFinished and vPrinceFinished;
+
+      if dec_block_ready = '1' then
+        vAsconFinished         := '0';
+        vPrinceFinished        := '0';
+        PrinceOutputRegReadyxS <= '1';
+        CtrlStatexDN           <= std_logic_vector(unsigned(CtrlStatexDP) + 1);
+      end if;
+
+      AsconFinishedxDN  <= vAsconFinished;
+      PrinceFinishedxDN <= vPrinceFinished;
+    end if;
+
+    if (CtrlStatexDP > STATE_CRYPT and CtrlStatexDP <= CtrlLastStatexD) then
+      vPrinceFinished := PrinceFinishedxDP;
+      vAsconFinished  := AsconFinishedxDP;
+
+      if enc_block_valid = '1' and PrinceFinishedxDP = '0' and PrinceRunningxDP = '0' and block64_reg_valid = '1' then
+        PrinceInputValidxS <= '1';
+        PrinceKeyValidxS   <= '1';
+        enc_block_ready    <= '1';
+        PrinceRunningxDN   <= '1';
+        block64_reg_ready  <= '1';
+
+        AsconPermutexS <= '1';
+        AsconSyncxDN   <= '1';
+      end if;
+
+      if PrinceOutputRegValidxS = '1' and vPrinceFinished = '0' then
+        PrinceRunningxDN <= '0';
+        vPrinceFinished  := '1';
+      end if;
+
+      if AsconSyncxDP = '1' then
+        AsconPermutexS <= '1';
+        AsconSyncxDN   <= '1';
+        if AsconDonexS = '1' then
+          vAsconFinished := '1';
+          AsconSyncxDN   <= '0';
+        end if;
+      end if;
+
+      dec_block_valid <= PrinceOutputRegValidxS and vAsconFinished and vPrinceFinished;
+
+      if dec_block_ready = '1' then
+        vAsconFinished         := '0';
+        vPrinceFinished        := '0';
+        PrinceOutputRegReadyxS <= '1';
+        CtrlStatexDN           <= std_logic_vector(unsigned(CtrlStatexDP) + 1);
+        if vLastBlock = '1' then
+          if DataRequestxS = '1' then
+            CtrlStatexDN <= STATE_VERIFY;
+          else
+            CtrlStatexDN <= STATE_IDLE;
+          end if;
+        end if;
+      end if;
+
+      AsconFinishedxDN  <= vAsconFinished;
+      PrinceFinishedxDN <= vPrinceFinished;
+    end if;
+
+    if TAG_SIZE = 16 then
+
+      -- STATE VERIFY
+      if (CtrlStatexDP = STATE_VERIFY) then
+        vAsconFinished := AsconFinishedxDP;
+
+        if block64_reg_valid = '1' then
+          block64_reg_ready      <= '1';
+          AsconPermuteFinalizexS <= '1';
+          AsconSyncxDN           <= '1';
+        end if;
+
+        if AsconSyncxDP = '1' then
+          AsconPermuteFinalizexS <= '1';
+          AsconSyncxDN           <= '1';
+          if AsconDonexS = '1' then
+            vAsconFinished := '1';
+            AsconSyncxDN   <= '0';
+          end if;
+        end if;
+
+        InputConversion128xS <= '1';
+        block128_mod_valid   <= '0';
+        if vAsconFinished = '1' then
+          AsconOutputTagxS <= '1';
+          if block128_valid = '1' then
+            vAsconFinished                                := '0';
+            block128_mod                                  <= (others => '0');
+            block128_mod(ASCON_DATA_BUS_WIDTH-1 downto 0) <= change_endianess(AsconDataOutxD);
+            block128_mod_valid                            <= '1';
+            CtrlStatexDN                                  <= STATE_VERIFY_2;
+            if change_endianess(AsconDataOutxD) /= block128(ASCON_DATA_BUS_WIDTH-1 downto 0) and DECRYPTION then
+              AuthenticationErrorxSN <= '1';
+            end if;
+          end if;
+        end if;
+        AsconFinishedxDN <= vAsconFinished;
+      end if;
+
+      if (CtrlStatexDP = STATE_VERIFY_2) then
+        OutputConversion128xS <= '1';
+        if (out_block128_ready = '1' and out_block128_last = '1') then
+          AuthenticationErrorxSN <= '0';
+          CtrlStatexDN           <= STATE_IDLE;
+        end if;
+      end if;
+    elsif TAG_SIZE = 8 then
+
+      -- STATE VERIFY
+      if (CtrlStatexDP = STATE_VERIFY) then
+        vAsconFinished := AsconFinishedxDP;
+
+        if block64_reg_valid = '1' then
+          block64_reg_ready      <= '1';
+          AsconPermuteFinalizexS <= '1';
+          AsconSyncxDN           <= '1';
+        end if;
+
+        if AsconSyncxDP = '1' then
+          AsconPermuteFinalizexS <= '1';
+          AsconSyncxDN           <= '1';
+          if AsconDonexS = '1' then
+            vAsconFinished := '1';
+            AsconSyncxDN   <= '0';
+          end if;
+        end if;
+
+        enc_block_valid <= '0';
+        if vAsconFinished = '1' then
+          AsconOutputTagxS       <= '1';
+          vAsconFinished         := '0';
+          dec_block_valid        <= '1';
+          dec_block(63 downto 0) <= change_endianess(AsconDataOutxD(63 downto 0));
+          if change_endianess(AsconDataOutxD(63 downto 0)) /= block64 and DECRYPTION then
+            AuthenticationErrorxS <= '1';
+          end if;
+        end if;
+
+        if dec_block_ready = '1' then
+          enc_block_ready <= '1';
+          CtrlStatexDN    <= STATE_IDLE;
+        end if;
+
+        AsconFinishedxDN <= vAsconFinished;
+      end if;
+    end if;
+
+  end process control;
+
+  output : process(CtrlStatexDP, enc_block_valid, s_request, requestRegxDP, out_block, out_block_addr, out_block_valid, AsconSyncxDP,
+                   virtualAddrRegxDP, requestProcessedxDBP, out_block_ready, AuthenticationErrorxS, CtrlLastStatexD, OutputRequestxD) is
+    variable vOutBlockCounter       : std_logic_vector(TRANSLATION_FACTOR_BIT-1 downto 0);
+    variable vPhysicalLen           : std_logic_vector(s_request.block_len'length-1 downto 0);
+    variable vPhysicalAddr          : std_logic_vector(s_request.block_address'length-1 downto 0);
+    variable vBlockCount, vBlockNum : integer;
+    variable vInBlockNum            : integer;
+    variable vVirtAddr              : integer;
+  begin
+    virtualAddrRegxDN    <= virtualAddrRegxDP;
+    requestProcessedxDBN <= requestProcessedxDBP;
+
+    -- Virtual Address Setup
+    vVirtAddr := to_integer(unsigned(virtualAddrRegxDP));
+    if (out_block_valid = '1') then
+      if (requestProcessedxDBP = '0' and OutputRequestxD.metadata = '0') then
+        vVirtAddr            := to_integer(unsigned(OutputRequestxD.virt_address));
+        requestProcessedxDBN <= '1';
+      end if;
+    end if;
+
+    -- Defaults for output
+    vOutBlockCounter := std_logic_vector(MAX_COUNTER_VALUE - unsigned(out_block_addr));
+    vPhysicalLen     := OutputRequestxD.block_len(OutputRequestxD.block_len'length-1 downto TRANSLATION_FACTOR_BIT) & vOutBlockCounter;
+    vPhysicalAddr    := OutputRequestxD.block_address(OutputRequestxD.block_address'length-1 downto TRANSLATION_FACTOR_BIT+2) & out_block_addr & "00";
+
+    out_request               <= OutputRequestxD;
+    out_request.block_len     <= vPhysicalLen;
+    out_request.block_address <= vPhysicalAddr;
+    out_request.virt_address  <= (others => '0');
+
+    -- Output overwrites
+    if (CtrlStatexDP >= STATE_CRYPT and CtrlStatexDP <= CtrlLastStatexD) or CtrlStatexDP = STATE_ECB then
+      out_request.virt_address <= std_logic_vector(to_unsigned(vVirtAddr, s_request.virt_address'length));
+
+      if (out_block_ready = '1') then
+        vVirtAddr := vVirtAddr + (DATASTREAM_DATA_WIDTH/8);
+      end if;
+    else
+      out_request.metadata <= '1';
+      out_request.error    <= OutputRequestxD.error or AuthenticationErrorxS;
+    end if;
+
+    if to_integer(unsigned(vPhysicalLen)) = 0 and out_block_ready = '1' then
+      requestProcessedxDBN <= '0';
+    end if;
+
+    out_request.valid <= out_block_valid;
+
+    if CtrlStatexDP /= STATE_INIT and CtrlStatexDP /= STATE_IDLE then
+      out_request.data <= out_block;
+    end if;
+
+    virtualAddrRegxDN <= std_logic_vector(to_unsigned(vVirtAddr, s_request.virt_address'length));
+  end process output;
+
+  out_reg : if OUTPUT_REGISTER = true generate
+    output_buf : entity work.stream_register_stage_fifo
+      port map(
+        clk    => clk,
+        resetn => resetn,
+
+        in_data  => BufInputxD,
+        in_valid => BufInputValidxS,
+        in_ready => BufInputReadyxS,
+
+        out_data  => BufOutputxD,
+        out_valid => BufOutputValidxS,
+        out_ready => BufOutputReadyxS
+        );
+  end generate out_reg;
+
+  ascon_buffer : process (BufOutputValidxS, BufOutputxD, m_request_ready, out_request, BufInputReadyxS)
+  begin
+    if OUTPUT_REGISTER then
+      BufInputxD       <= out_request;
+      BufInputValidxS  <= out_request.valid;
+      out_block_ready  <= BufInputReadyxS;
+      m_request        <= BufOutputxD;
+      BufOutputReadyxS <= m_request_ready;
+    else
+      m_request       <= out_request;
+      out_block_ready <= m_request_ready;
+    end if;
+  end process ascon_buffer;
+
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        CtrlStatexDP           <= STATE_IDLE;
+        AsconSyncxDP           <= '0';
+        PrinceRunningxDP       <= '0';
+        PrinceFinishedxDP      <= '0';
+        AsconFinishedxDP       <= '0';
+        AuthenticationErrorxSP <= '0';
+        PrinceKeyxDP           <= (others => '0');
+        requestRegxDP          <= StreamType_default;
+        virtualAddrRegxDP      <= (others => '0');
+        requestProcessedxDBP   <= '0';
+        inputBlockCounterxDP   <= (others => '0');
+        TweakxDP               <= (others => '0');
+      else
+        CtrlStatexDP           <= CtrlStatexDN;
+        AsconSyncxDP           <= AsconSyncxDN;
+        PrinceRunningxDP       <= PrinceRunningxDN;
+        PrinceFinishedxDP      <= PrinceFinishedxDN;
+        AsconFinishedxDP       <= AsconFinishedxDN;
+        AuthenticationErrorxSP <= AuthenticationErrorxSN;
+        PrinceKeyxDP           <= PrinceKeyxDN;
+        requestRegxDP          <= requestRegxDN;
+        virtualAddrRegxDP      <= virtualAddrRegxDN;
+        requestProcessedxDBP   <= requestProcessedxDBN;
+        inputBlockCounterxDP   <= inputBlockCounterxDN;
+        TweakxDP               <= TweakxDN;
+      end if;
+    end if;
+  end process regs;
+
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_cbc_decrypt.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_cbc_decrypt.vhd
new file mode 100644
index 0000000..9700e66
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_cbc_decrypt.vhd
@@ -0,0 +1,383 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Decrypts transactions in Prince CBC mode.
+--!
+--! First, the IV for the decryption is generated by decrypting the sector
+--! address with the IV key. Next, the calculated IV is output on the internal
+--! stream to permit later encryption. Finally, the actual data decryption is
+--! performed. Note that only properly aligned transactions are supported.
+entity stream_prince_cbc_decrypt is
+  generic(
+    BLOCK_INDEX_WIDTH : integer := 2
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    KeyIv0xDI     : in std_logic_vector(63 downto 0);
+    KeyIv1xDI     : in std_logic_vector(63 downto 0);
+    KeyCipher0xDI : in std_logic_vector(63 downto 0);
+    KeyCipher1xDI : in std_logic_vector(63 downto 0)
+    );
+end stream_prince_cbc_decrypt;
+
+architecture Behavioral of stream_prince_cbc_decrypt is
+  constant DATASTREAM_BYTE_FIELD_ADDR_WIDTH : integer                                := log2_ceil(DATASTREAM_DATA_WIDTH/8);
+  constant FIELD_ADDR_WIDTH                 : integer                                := log2_ceil(64/DATASTREAM_DATA_WIDTH);
+  constant MAX_FIELD_COUNTER_VALUE          : unsigned(FIELD_ADDR_WIDTH-1 downto 0)  := (others => '1');
+  constant MAX_BLOCK_INDEX_COUNTER_VALUE    : unsigned(BLOCK_INDEX_WIDTH-1 downto 0) := (others => '1');
+
+  -- signals for the deserialization
+  signal full_in_block                            : std_logic_vector(63 downto 0);
+  signal full_in_block_valid, full_in_block_ready : std_logic;
+  signal full_in_block_masked                     : std_logic_vector(63 downto 0);
+
+  -- signals for the request register stage
+  signal request_reg                                  : StreamType;
+  signal request_reg_full_data                        : std_logic_vector(63 downto 0);
+  signal request_reg_in_valid                         : std_logic;
+  signal request_reg_out_valid, request_reg_out_ready : std_logic;
+
+  -- signals for the crypto unit
+  signal crypto_in, crypto_out              : std_logic_vector(63 downto 0);
+  signal crypto_out_masked                  : std_logic_vector(63 downto 0);
+  signal crypto_key0, crypto_key1           : std_logic_vector(63 downto 0);
+  signal crypto_in_valid, crypto_in_ready   : std_logic;
+  signal crypto_out_valid, crypto_out_ready : std_logic;
+
+  -- signals for the mask management
+  signal mask_in, mask_out              : std_logic_vector(63 downto 0);
+  signal mask_in_valid, mask_in_ready   : std_logic;
+  signal mask_out_valid, mask_out_ready : std_logic;
+
+  -- signals for the deserialization
+  signal out_block                        : std_logic_vector(63 downto 0);
+  signal out_block_valid, out_block_ready : std_logic;
+  signal full_out_block                   : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal full_out_field_addr              : std_logic_vector(FIELD_ADDR_WIDTH-1 downto 0);
+  signal full_out_block_valid             : std_logic;
+
+  signal m_requestxS       : StreamType;
+  signal s_request_validxS : std_logic;
+  signal s_request_readyxS : std_logic;
+
+  -- State machine states and register
+  type StateType is (IDLE, CALC_IV, WAIT_IV, OUTPUT_IV, PROCESS_DATA);
+  signal StatexDP, StatexDN     : StateType;
+  signal blockNrxDP, blockNrxDN : std_logic_vector(BLOCK_INDEX_WIDTH downto 0);
+  signal output_ivxS            : std_logic;
+begin
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 64,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      -- only aligned blocks are expected with multiple of OUT_DATA_WIDTH are expected
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => '0',
+
+      in_data  => s_request.data,
+      in_valid => s_request_validxS,
+      in_ready => s_request_readyxS,
+
+      out_data         => full_in_block,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => full_in_block_valid,
+      out_ready        => full_in_block_ready
+      );
+  full_in_block_masked <= full_in_block xor mask_out;
+  s_request_ready      <= s_request_readyxS;
+
+  reg_stream_data : entity work.register_stage
+    generic map(
+      WIDTH      => 64,
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => full_in_block,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg_full_data,
+      out_valid => open,
+      out_ready => request_reg_out_ready
+      );
+
+  reg_stream : entity work.stream_register_stage
+    generic map(
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg,
+      out_valid => request_reg_out_valid,
+      out_ready => request_reg_out_ready
+      );
+
+  mask_reg : entity work.register_stage
+    generic map(
+      WIDTH      => 64,
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => mask_in,
+      in_valid => mask_in_valid,
+      in_ready => mask_in_ready,
+
+      out_data  => mask_out,
+      out_valid => mask_out_valid,
+      out_ready => mask_out_ready
+      );
+
+  crypto : entity work.prince
+    generic map(
+      DECRYPTION => true,
+      BLOCK_SIZE => 64
+      )
+    port map(
+      ClkxCI        => clk,
+      RstxRBI       => resetn,
+      Key0xDI       => crypto_key0,
+      Key1xDI       => crypto_key1,
+      MessagexDI    => crypto_in,
+      CiphertextxDO => crypto_out,
+      in_ready      => crypto_in_ready,
+      in_valid      => crypto_in_valid,
+      out_ready     => crypto_out_ready,
+      out_valid     => crypto_out_valid
+      );
+  crypto_out_masked <= crypto_out xor mask_out;
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 64,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => '1',
+      in_data         => out_block,
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+      in_valid        => out_block_valid,
+      in_ready        => out_block_ready,
+
+      out_data         => full_out_block,
+      out_field_offset => full_out_field_addr,
+      out_field_len    => open,
+      out_last         => open,
+      out_valid        => full_out_block_valid,
+      out_ready        => m_request_ready
+      );
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        StatexDP   <= IDLE;
+        blockNrxDP <= (others => '0');
+      else
+        StatexDP   <= StatexDN;
+        blockNrxDP <= blockNrxDN;
+      end if;
+    end if;
+  end process regs;
+
+  control : process(KeyCipher0xDI, KeyCipher1xDI, KeyIv0xDI, StatexDP,
+                    blockNrxDP, crypto_in_ready, crypto_out, crypto_out_masked,
+                    crypto_out_ready, crypto_out_valid, full_in_block,
+                    full_in_block_valid, m_request_ready, full_in_block_masked,
+                    m_requestxS.block_len, mask_in_ready, mask_in_valid,
+                    mask_out, mask_out_valid, out_block_ready,
+                    request_reg.block_len, request_reg_full_data,
+                    request_reg_out_valid, s_request.block_address,
+                    s_request.read, s_request.valid) is
+    variable GENERATE_IV_STATE : StateType;
+  begin
+    StatexDN   <= StatexDP;
+    blockNrxDN <= blockNrxDP;
+
+    crypto_key0 <= KeyCipher0xDI;
+    crypto_key1 <= KeyCipher1xDI;
+    crypto_in   <= full_in_block;
+
+    out_block <= crypto_out_masked;
+
+    crypto_in_valid      <= '0';
+    request_reg_in_valid <= '0';
+
+    mask_in          <= request_reg_full_data;
+    mask_in_valid    <= '0';
+    mask_out_ready   <= '0';
+    crypto_out_ready <= '0';
+
+    full_in_block_ready <= '0';
+
+    out_block_valid       <= '0';
+    crypto_out_ready      <= '0';
+    request_reg_in_valid  <= '0';
+    request_reg_out_ready <= '0';
+
+    output_ivxS <= '0';
+
+    s_request_validxS <= s_request.valid;
+
+    case StatexDP is
+      when IDLE =>
+        blockNrxDN <= (others => '0');
+        if full_in_block_valid = '1' then
+          StatexDN <= CALC_IV;
+        end if;
+      when CALC_IV =>
+        -- use the crypto core to calculate the iv
+        crypto_key0     <= KeyIv0xDI;
+        crypto_key1     <= KeyIv0xDI;
+        crypto_in       <= zeros(64-ADDRESS_WIDTH) & (s_request.block_address and not(mask(BLOCK_INDEX_WIDTH+3, ADDRESS_WIDTH)));
+        crypto_in_valid <= '1';
+
+        mask_in_valid    <= crypto_out_valid;
+        crypto_out_ready <= mask_in_ready;
+
+        if crypto_in_ready = '1' then
+          StatexDN <= WAIT_IV;  -- wait in the next state until the tweak is ready
+        end if;
+      when WAIT_IV =>
+        -- wait for the iv to be ready
+        -- the iv keys have to be provided until the end given that prince does not copy them
+        crypto_key0 <= KeyIv0xDI;
+        crypto_key1 <= KeyIv0xDI;
+
+        mask_in          <= crypto_out;
+        mask_in_valid    <= crypto_out_valid;
+        crypto_out_ready <= mask_in_ready;
+
+        if mask_out_valid = '1' and mask_in_valid = '0' then
+          StatexDN <= PROCESS_DATA;
+          if s_request.read = '0' then
+            StatexDN <= OUTPUT_IV;
+          end if;
+        end if;
+      when OUTPUT_IV =>
+        output_ivxS     <= '1';
+        out_block_valid <= mask_out_valid;
+        out_block       <= mask_out;
+        if out_block_ready = '1' then
+          StatexDN <= PROCESS_DATA;
+        end if;
+      when PROCESS_DATA =>
+        -- do not start with the next block in this state
+        if request_reg_out_valid = '1' and to_integer(unsigned(request_reg.block_len)) = 0 then
+          s_request_validxS <= '0';
+        end if;
+
+        -- count the number acknowledged blocks at the cipher input
+        if crypto_in_ready = '1' then
+          blockNrxDN <= std_logic_vector(unsigned(blockNrxDP) + 1);
+        end if;
+
+        -- cipher output signals
+        out_block_valid       <= crypto_out_valid and mask_out_valid;
+        crypto_out_ready      <= out_block_ready;
+        request_reg_out_ready <= out_block_ready;
+        mask_out_ready        <= out_block_ready;
+
+        mask_in   <= request_reg_full_data;
+        out_block <= crypto_out_masked;
+
+
+        if to_integer(unsigned(blockNrxDP)) <= to_integer(MAX_BLOCK_INDEX_COUNTER_VALUE) then
+          -- cipher input signals
+          mask_in_valid        <= request_reg_out_valid;
+          crypto_in_valid      <= full_in_block_valid;
+          request_reg_in_valid <= full_in_block_valid;
+          full_in_block_ready  <= crypto_in_ready;
+
+        elsif full_in_block_valid = '1' and crypto_out_valid = '0' and mask_out_valid = '0' then
+          -- calculate the next iv
+          StatexDN   <= CALC_IV;
+          blockNrxDN <= (others => '0');
+        end if;
+
+        if m_request_ready = '1' and unsigned(m_requestxS.block_len) = 0 then
+          -- request has been handled, wait for the next one
+          StatexDN <= IDLE;
+        end if;
+      when others => assert false report "Invalid state" severity error;
+    end case;
+  end process control;
+
+  -- adapt the length, address and data from the register to the output
+  output : process(full_out_block, full_out_block_valid, full_out_field_addr,
+                   output_ivxS, request_reg, s_request) is
+  begin
+    m_requestxS <= request_reg;
+
+    m_requestxS.virt_address  <= request_reg.virt_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_address <= request_reg.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_len     <= request_reg.block_len(AXI_LEN_WIDTH-1 downto FIELD_ADDR_WIDTH) & std_logic_vector(MAX_FIELD_COUNTER_VALUE - unsigned(full_out_field_addr));
+
+    if output_ivxS = '1' then
+      m_requestxS               <= s_request;
+      m_requestxS.block_address <= s_request.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+      m_requestxS.block_len     <= (others => '1');
+      m_requestxS.metadata      <= '1';
+    end if;
+
+    m_requestxS.data  <= full_out_block;
+    m_requestxS.valid <= full_out_block_valid;
+  end process output;
+  m_request <= m_requestxS;
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_cbc_encrypt.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_cbc_encrypt.vhd
new file mode 100644
index 0000000..43fc9a5
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_cbc_encrypt.vhd
@@ -0,0 +1,387 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Encrypts transactions in Prince CBC mode.
+--!
+--! First, the IV for the encryption is read from the internal stream. Next,
+--! the actual data encryption is performed. Note that only properly aligned
+--! transactions are supported.
+entity stream_prince_cbc_encrypt is
+  generic(
+    BLOCK_INDEX_WIDTH : integer := 2
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    KeyIv0xDI     : in std_logic_vector(63 downto 0);
+    KeyIv1xDI     : in std_logic_vector(63 downto 0);
+    KeyCipher0xDI : in std_logic_vector(63 downto 0);
+    KeyCipher1xDI : in std_logic_vector(63 downto 0)
+    );
+end stream_prince_cbc_encrypt;
+
+architecture Behavioral of stream_prince_cbc_encrypt is
+  constant DATASTREAM_BYTE_FIELD_ADDR_WIDTH : integer                                := log2_ceil(DATASTREAM_DATA_WIDTH/8);
+  constant FIELD_ADDR_WIDTH                 : integer                                := log2_ceil(64/DATASTREAM_DATA_WIDTH);
+  constant MAX_FIELD_COUNTER_VALUE          : unsigned(FIELD_ADDR_WIDTH-1 downto 0)  := (others => '1');
+  constant MAX_BLOCK_INDEX_COUNTER_VALUE    : unsigned(BLOCK_INDEX_WIDTH-1 downto 0) := (others => '1');
+
+  -- signals for the deserialization
+  signal full_in_block                            : std_logic_vector(63 downto 0);
+  signal full_in_block_valid, full_in_block_ready : std_logic;
+  signal full_in_block_masked                     : std_logic_vector(63 downto 0);
+
+  -- signals for the request register stage
+  signal request_reg                                  : StreamType;
+  signal request_reg_full_data                        : std_logic_vector(63 downto 0);
+  signal request_reg_in_valid                         : std_logic;
+  signal request_reg_out_valid, request_reg_out_ready : std_logic;
+
+  -- signals for the crypto unit
+  signal crypto_in, crypto_out              : std_logic_vector(63 downto 0);
+  signal crypto_out_masked                  : std_logic_vector(63 downto 0);
+  signal crypto_key0, crypto_key1           : std_logic_vector(63 downto 0);
+  signal crypto_in_valid, crypto_in_ready   : std_logic;
+  signal crypto_out_valid, crypto_out_ready : std_logic;
+
+  -- signals for the mask management
+  signal mask_in, mask_out              : std_logic_vector(63 downto 0);
+  signal mask_in_valid, mask_in_ready   : std_logic;
+  signal mask_out_valid, mask_out_ready : std_logic;
+
+  -- synchronizer block
+  signal sync_valid_in, sync_ready_in     : std_logic;
+  signal sync_valid_mask, sync_ready_mask : std_logic;
+
+  -- signals for the deserialization
+  signal out_block                        : std_logic_vector(63 downto 0);
+  signal out_block_valid, out_block_ready : std_logic;
+  signal full_out_block                   : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal full_out_field_addr              : std_logic_vector(FIELD_ADDR_WIDTH-1 downto 0);
+  signal full_out_block_valid             : std_logic;
+
+  signal m_requestxS       : StreamType;
+  signal s_request_validxS : std_logic;
+  signal s_request_readyxS : std_logic;
+
+  -- State machine states and register
+  type StateType is (IDLE, READ_IV, WAIT_IV, PROCESS_DATA);
+  signal StatexDP, StatexDN     : StateType;
+  signal blockNrxDP, blockNrxDN : std_logic_vector(BLOCK_INDEX_WIDTH downto 0);
+begin
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 64,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      -- only aligned blocks are expected with multiple of OUT_DATA_WIDTH are expected
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => '0',
+
+      in_data  => s_request.data,
+      in_valid => s_request_validxS,
+      in_ready => s_request_readyxS,
+
+      out_data         => full_in_block,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => full_in_block_valid,
+      out_ready        => full_in_block_ready
+      );
+  full_in_block_masked <= full_in_block xor mask_out;
+  s_request_ready      <= s_request_readyxS;
+
+  reg_stream_data : entity work.register_stage
+    generic map(
+      WIDTH      => 64,
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => full_in_block,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg_full_data,
+      out_valid => open,
+      out_ready => request_reg_out_ready
+      );
+
+  reg_stream : entity work.stream_register_stage
+    generic map(
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg,
+      out_valid => request_reg_out_valid,
+      out_ready => request_reg_out_ready
+      );
+
+  mask_reg : entity work.register_stage
+    generic map(
+      WIDTH        => 64,
+      READY_BYPASS => false,
+      REGISTERED   => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => mask_in,
+      in_valid => mask_in_valid,
+      in_ready => mask_in_ready,
+
+      out_data  => mask_out,
+      out_valid => mask_out_valid,
+      out_ready => mask_out_ready
+      );
+
+  crypto : entity work.prince
+    generic map(
+      DECRYPTION => false,
+      BLOCK_SIZE => 64
+      )
+    port map(
+      ClkxCI        => clk,
+      RstxRBI       => resetn,
+      Key0xDI       => crypto_key0,
+      Key1xDI       => crypto_key1,
+      MessagexDI    => crypto_in,
+      CiphertextxDO => crypto_out,
+      in_ready      => crypto_in_ready,
+      in_valid      => crypto_in_valid,
+      out_ready     => crypto_out_ready,
+      out_valid     => crypto_out_valid
+      );
+  crypto_out_masked <= crypto_out xor mask_out;
+
+  synchronization : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_ready => sync_ready_in,
+      in_valid => sync_valid_in,
+
+      out_ready(0) => out_block_ready,
+      out_ready(1) => sync_ready_mask,
+
+      out_active(0) => '1',
+      out_active(1) => '1',
+
+      out_valid(0) => out_block_valid,
+      out_valid(1) => sync_valid_mask
+      );
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 64,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => '1',
+      in_data         => out_block,
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+      in_valid        => out_block_valid,
+      in_ready        => out_block_ready,
+
+      out_data         => full_out_block,
+      out_field_offset => full_out_field_addr,
+      out_field_len    => open,
+      out_last         => open,
+      out_valid        => full_out_block_valid,
+      out_ready        => m_request_ready
+      );
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        StatexDP   <= IDLE;
+        blockNrxDP <= (others => '0');
+      else
+        StatexDP   <= StatexDN;
+        blockNrxDP <= blockNrxDN;
+      end if;
+    end if;
+  end process regs;
+
+  control : process(KeyCipher0xDI, KeyCipher1xDI, KeyIv0xDI, StatexDP,
+                    blockNrxDP, crypto_in_ready, crypto_out, crypto_out_masked,
+                    crypto_out_valid, full_in_block, full_in_block_masked,
+                    full_in_block_valid, m_request_ready,
+                    m_requestxS.block_len, mask_in_ready, mask_in_valid,
+                    mask_out_valid, out_block_ready, request_reg.block_len,
+                    request_reg_full_data, request_reg_out_valid,
+                    s_request.valid, sync_ready_in, sync_valid_mask) is
+  begin
+    StatexDN   <= StatexDP;
+    blockNrxDN <= blockNrxDP;
+
+    crypto_key0 <= KeyCipher0xDI;
+    crypto_key1 <= KeyCipher1xDI;
+    crypto_in   <= full_in_block;
+
+    out_block <= crypto_out_masked;
+
+    crypto_in_valid      <= '0';
+    request_reg_in_valid <= '0';
+
+    mask_in          <= request_reg_full_data;
+    mask_in_valid    <= '0';
+    mask_out_ready   <= '0';
+    crypto_out_ready <= '0';
+
+    full_in_block_ready <= '0';
+
+    sync_valid_in         <= '0';
+    sync_ready_mask       <= '0';
+    crypto_out_ready      <= '0';
+    request_reg_in_valid  <= '0';
+    request_reg_out_ready <= '0';
+
+    s_request_validxS <= s_request.valid;
+    if request_reg_out_valid = '1' and to_integer(unsigned(request_reg.block_len)) = 0 then
+      s_request_validxS <= '0';
+    end if;
+
+    case StatexDP is
+      when IDLE =>
+        blockNrxDN <= (others => '0');
+        if full_in_block_valid = '1' then
+          StatexDN <= READ_IV;
+        end if;
+      when READ_IV =>
+        mask_in             <= full_in_block;
+        mask_in_valid       <= full_in_block_valid;
+        full_in_block_ready <= mask_in_ready;
+
+        if mask_in_valid = '1' and mask_in_ready = '1' then
+          StatexDN <= WAIT_IV;
+        end if;
+      when WAIT_IV =>
+        -- wait for the iv to be ready
+        -- the iv keys have to be provided until the end given that prince does not copy them
+        crypto_key0 <= KeyIv0xDI;
+        crypto_key1 <= KeyIv0xDI;
+
+        mask_in          <= crypto_out;
+        mask_in_valid    <= crypto_out_valid;
+        crypto_out_ready <= mask_in_ready;
+
+        if mask_out_valid = '1' and mask_in_valid = '0' then
+          StatexDN <= PROCESS_DATA;
+        end if;
+      when PROCESS_DATA =>
+        -- count the number acknowledged blocks at the cipher input
+        if crypto_in_ready = '1' then
+          blockNrxDN <= std_logic_vector(unsigned(blockNrxDP) + 1);
+        end if;
+
+        -- cipher output signals
+        sync_valid_in         <= crypto_out_valid;
+        crypto_out_ready      <= sync_ready_in;
+        request_reg_out_ready <= out_block_ready;
+
+        mask_in   <= crypto_out;
+        out_block <= crypto_out;
+
+        -- ignore the mask output by default (overriden for blockNr < maxValue)
+        sync_ready_mask <= sync_valid_mask;
+
+        if to_integer(unsigned(blockNrxDP)) <= to_integer(MAX_BLOCK_INDEX_COUNTER_VALUE) then
+          -- cipher input signals
+
+          crypto_in_valid      <= full_in_block_valid and mask_out_valid;
+          request_reg_in_valid <= full_in_block_valid and mask_out_valid;
+          full_in_block_ready  <= crypto_in_ready;
+          mask_out_ready       <= crypto_in_ready;
+
+          mask_in_valid   <= sync_valid_mask;
+          sync_ready_mask <= mask_in_ready;
+
+          crypto_in <= full_in_block_masked;
+
+        elsif full_in_block_valid = '1' and crypto_out_valid = '0' and mask_out_valid = '0' then
+          -- calculate the next iv
+          StatexDN   <= READ_IV;
+          blockNrxDN <= (others => '0');
+        end if;
+
+        if m_request_ready = '1' and unsigned(m_requestxS.block_len) = 0 then
+          -- request has been handled, wait for the next one
+          StatexDN <= IDLE;
+        end if;
+      when others => assert false report "Invalid state" severity error;
+    end case;
+  end process control;
+
+  -- adapt the length, address and data from the register to the output
+  output : process(full_out_block, full_out_block_valid, full_out_field_addr,
+                   request_reg) is
+  begin
+    m_requestxS <= request_reg;
+
+    m_requestxS.virt_address  <= request_reg.virt_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_address <= request_reg.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_len     <= request_reg.block_len(AXI_LEN_WIDTH-1 downto FIELD_ADDR_WIDTH) & std_logic_vector(MAX_FIELD_COUNTER_VALUE - unsigned(full_out_field_addr));
+
+    m_requestxS.data  <= full_out_block;
+    m_requestxS.valid <= full_out_block_valid;
+  end process output;
+  m_request <= m_requestxS;
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_ecb.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_ecb.vhd
new file mode 100644
index 0000000..36e3e92
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_ecb.vhd
@@ -0,0 +1,165 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Encrypts or decrypts transactions in Prince ECB mode.
+entity stream_prince_ecb is
+  generic(
+    DECRYPTION : boolean := true
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    Key0xDI : in std_logic_vector(63 downto 0);
+    Key1xDI : in std_logic_vector(63 downto 0)
+    );
+end stream_prince_ecb;
+
+architecture Behavioral of stream_prince_ecb is
+  constant DATASTREAM_BYTE_FIELD_ADDR_WIDTH : integer                               := log2_ceil(DATASTREAM_DATA_WIDTH/8);
+  constant FIELD_ADDR_WIDTH                 : integer                               := log2_ceil(64/DATASTREAM_DATA_WIDTH);
+  constant MAX_FIELD_COUNTER_VALUE          : unsigned(FIELD_ADDR_WIDTH-1 downto 0) := (others => '1');
+
+
+  signal enc_block                        : std_logic_vector(63 downto 0);
+  signal enc_block_valid, enc_block_ready : std_logic;
+
+  signal dec_block                        : std_logic_vector(63 downto 0);
+  signal dec_block_valid, dec_block_ready : std_logic;
+
+  signal out_block_data                   : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal out_field_addr                   : std_logic_vector(FIELD_ADDR_WIDTH-1 downto 0);
+  signal out_block_valid, out_block_ready : std_logic;
+
+  signal request_reg : StreamType;
+begin
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 64,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      -- only aligned blocks with multiple of OUT_DATA_WIDTH are expected
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => '0',
+
+      in_data  => s_request.data,
+      in_valid => s_request.valid,
+      in_ready => s_request_ready,
+
+      out_data         => enc_block,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => enc_block_valid,
+      out_ready        => enc_block_ready
+      );
+
+  reg_stream : entity work.stream_register_stage
+    generic map(
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request,
+      in_valid => enc_block_valid,
+      in_ready => enc_block_ready,
+
+      out_data  => request_reg,
+      out_valid => dec_block_valid,
+      out_ready => dec_block_ready
+      );
+
+  crypto : entity work.prince
+    generic map(
+      DECRYPTION => DECRYPTION,
+      BLOCK_SIZE => 64
+      )
+    port map(
+      ClkxCI        => clk,
+      RstxRBI       => resetn,
+      Key0xDI       => Key0xDI,
+      Key1xDI       => Key1xDI,
+      MessagexDI    => enc_block,
+      CiphertextxDO => dec_block,
+      in_ready      => open,
+      in_valid      => enc_block_valid,
+      out_ready     => dec_block_ready,
+      out_valid     => open
+      );
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 64,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => '1',
+      in_data         => dec_block,
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+      in_valid        => dec_block_valid,
+      in_ready        => dec_block_ready,
+
+      out_data         => out_block_data,
+      out_field_offset => out_field_addr,
+      out_field_len    => open,
+      out_last         => open,
+      out_valid        => out_block_valid,
+      out_ready        => m_request_ready
+      );
+
+  -- adapt the length, address and data from the register to the output
+  output : process(out_block_data, out_block_valid, out_field_addr,
+                   request_reg) is
+  begin
+    m_request <= request_reg;
+
+    m_request.virt_address  <= request_reg.virt_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_request.block_address <= request_reg.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_request.block_len     <= request_reg.block_len(AXI_LEN_WIDTH-1 downto FIELD_ADDR_WIDTH) & std_logic_vector(MAX_FIELD_COUNTER_VALUE - unsigned(out_field_addr));
+    m_request.data          <= out_block_data;
+    m_request.valid         <= out_block_valid;
+  end process output;
+
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_xts.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_xts.vhd
new file mode 100644
index 0000000..a00860d
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_prince_xts.vhd
@@ -0,0 +1,382 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Encrypts or decrypts transactions in Prince XTS mode.
+--!
+--! First, the initial tweak is generated, either by decrypting the sector
+--! address (XTS decryption) or by reading it from the stream (XTS encryption).
+--! Next, in the case of XTS decryption, the calculated tweak is output on the
+--! internal stream to permit later encryption. Finally, the actual data
+--! encryption/decryption is performed.
+entity stream_prince_xts is
+  generic(
+    DECRYPTION        : boolean := true;
+    BLOCK_INDEX_WIDTH : integer := 3
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    KeyTweak0xDI  : in std_logic_vector(63 downto 0);
+    KeyTweak1xDI  : in std_logic_vector(63 downto 0);
+    KeyCipher0xDI : in std_logic_vector(63 downto 0);
+    KeyCipher1xDI : in std_logic_vector(63 downto 0)
+    );
+end stream_prince_xts;
+
+architecture Behavioral of stream_prince_xts is
+  constant DATASTREAM_BYTE_FIELD_ADDR_WIDTH : integer                               := log2_ceil(DATASTREAM_DATA_WIDTH/8);
+  constant FIELD_ADDR_WIDTH                 : integer                               := log2_ceil(64/DATASTREAM_DATA_WIDTH);
+  constant MAX_FIELD_COUNTER_VALUE          : unsigned(FIELD_ADDR_WIDTH-1 downto 0) := (others => '1');
+
+  -- signals for the deserialization
+  signal full_in_block                            : std_logic_vector(63 downto 0);
+  signal full_in_block_valid, full_in_block_ready : std_logic;
+  signal full_in_block_tweaked                    : std_logic_vector(63 downto 0);
+
+  -- signals for the request register stage
+  signal request_reg                                  : StreamType;
+  signal request_reg_in_valid                         : std_logic;
+  signal request_reg_out_valid, request_reg_out_ready : std_logic;
+
+  -- signals for the crypto unit
+  signal crypto_in, crypto_out              : std_logic_vector(63 downto 0);
+  signal crypto_out_tweaked                 : std_logic_vector(63 downto 0);
+  signal crypto_key0, crypto_key1           : std_logic_vector(63 downto 0);
+  signal crypto_in_valid, crypto_in_ready   : std_logic;
+  signal crypto_out_valid, crypto_out_ready : std_logic;
+
+  -- signals for the tweak generation
+  signal tweak_in, tweak_out, tweak_out_delayed : std_logic_vector(63 downto 0);
+  signal tweak_start_block_number               : std_logic_vector(BLOCK_INDEX_WIDTH-1 downto 0);
+  signal tweak_start_mul_number                 : std_logic_vector(BLOCK_INDEX_WIDTH-1 downto 0);
+  signal tweak_in_valid, tweak_in_ready         : std_logic;
+  signal tweak_out_valid, tweak_out_ready       : std_logic;
+
+  -- signals for the deserialization
+  signal out_block                        : std_logic_vector(63 downto 0);
+  signal out_block_valid, out_block_ready : std_logic;
+  signal full_out_block                   : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal full_out_field_addr              : std_logic_vector(FIELD_ADDR_WIDTH-1 downto 0);
+  signal full_out_block_valid             : std_logic;
+
+  signal m_requestxS       : StreamType;
+  signal s_request_validxS : std_logic;
+  signal s_request_readyxS : std_logic;
+
+  -- State machine states and register
+  type StateType is (IDLE, CALC_TWEAK, READ_TWEAK, TWEAK_WAIT, OUTPUT_TWEAK, PROCESS_DATA);
+  signal StatexDP, StatexDN : StateType;
+  signal output_tweakxS     : std_logic;
+begin
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 64,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      -- only aligned blocks are expected with multiple of OUT_DATA_WIDTH are expected
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => '0',
+
+      in_data  => s_request.data,
+      in_valid => s_request_validxS,
+      in_ready => s_request_readyxS,
+
+      out_data         => full_in_block,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => full_in_block_valid,
+      out_ready        => full_in_block_ready
+      );
+  full_in_block_tweaked <= full_in_block xor tweak_out;
+  s_request_ready       <= s_request_readyxS;
+
+  reg_stream : entity work.stream_register_stage
+    generic map(
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg,
+      out_valid => request_reg_out_valid,
+      out_ready => request_reg_out_ready
+      );
+
+  tweak_gen : entity work.xts_tweak_generator
+    generic map(
+      WIDTH             => 64,
+      BLOCK_INDEX_WIDTH => BLOCK_INDEX_WIDTH
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_tweak   => tweak_in,
+      in_blockNr => tweak_start_block_number,
+      in_mulNr   => tweak_start_mul_number,
+      in_valid   => tweak_in_valid,
+      in_ready   => tweak_in_ready,
+
+      out_tweak => tweak_out,
+      out_valid => tweak_out_valid,
+      out_ready => tweak_out_ready
+      );
+
+  last_tweak : entity work.register_stage
+    generic map(
+      WIDTH      => 64,
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => tweak_out,
+      in_valid => tweak_out_valid,
+      in_ready => open,
+
+      out_data  => tweak_out_delayed,
+      out_valid => open,
+      out_ready => tweak_out_ready
+      );
+
+  crypto : entity work.prince
+    generic map(
+      DECRYPTION => DECRYPTION,
+      BLOCK_SIZE => 64
+      )
+    port map(
+      ClkxCI        => clk,
+      RstxRBI       => resetn,
+      Key0xDI       => crypto_key0,
+      Key1xDI       => crypto_key1,
+      MessagexDI    => crypto_in,
+      CiphertextxDO => crypto_out,
+      in_ready      => crypto_in_ready,
+      in_valid      => crypto_in_valid,
+      out_ready     => crypto_out_ready,
+      out_valid     => crypto_out_valid
+      );
+  crypto_out_tweaked <= crypto_out xor tweak_out_delayed;
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 64,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => '1',
+      in_data         => out_block,
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+      in_valid        => out_block_valid,
+      in_ready        => out_block_ready,
+
+      out_data         => full_out_block,
+      out_field_offset => full_out_field_addr,
+      out_field_len    => open,
+      out_last         => open,
+      out_valid        => full_out_block_valid,
+      out_ready        => m_request_ready
+      );
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        StatexDP <= IDLE;
+      else
+        StatexDP <= StatexDN;
+      end if;
+    end if;
+  end process regs;
+
+  control : process(KeyCipher0xDI, KeyCipher1xDI, KeyTweak0xDI, StatexDP,
+                    crypto_in_ready, crypto_out, crypto_out_tweaked, full_in_block,
+                    crypto_out_valid, full_in_block_tweaked, request_reg.block_len,
+                    full_in_block_valid, out_block_ready, s_request.valid,
+                    s_request.block_address, tweak_in_ready, tweak_out_valid,
+                    m_request_ready, m_requestxS.block_len, request_reg_out_valid) is
+    variable GENERATE_TWEAK_STATE : StateType;
+  begin
+    StatexDN <= StatexDP;
+
+    crypto_key0          <= KeyCipher0xDI;
+    crypto_key1          <= KeyCipher1xDI;
+    crypto_in            <= full_in_block_tweaked;
+    crypto_in_valid      <= '0';
+    request_reg_in_valid <= '0';
+
+    tweak_in                 <= crypto_out;
+    tweak_start_block_number <= (others => '0');
+    tweak_start_mul_number   <= s_request.block_address(BLOCK_INDEX_WIDTH+2 downto 3);
+    tweak_in_valid           <= '0';
+    crypto_out_ready         <= '0';
+
+    full_in_block_ready <= '0';
+    tweak_out_ready     <= '0';
+
+    out_block             <= crypto_out_tweaked;
+    out_block_valid       <= '0';
+    crypto_out_ready      <= '0';
+    request_reg_in_valid  <= '0';
+    request_reg_out_ready <= '0';
+
+    output_tweakxS <= '0';
+
+    s_request_validxS <= s_request.valid;
+
+    GENERATE_TWEAK_STATE := CALC_TWEAK;
+    if DECRYPTION = false then
+      GENERATE_TWEAK_STATE := READ_TWEAK;
+
+      tweak_start_block_number <= s_request.block_address(BLOCK_INDEX_WIDTH+2 downto 3);
+      tweak_start_mul_number   <= (others => '0');
+    end if;
+
+    case StatexDP is
+      when IDLE =>
+        if full_in_block_valid = '1' then
+          StatexDN <= GENERATE_TWEAK_STATE;
+        end if;
+      when CALC_TWEAK =>
+        -- use the crypto core to calculate the tweak
+        crypto_key0     <= KeyTweak0xDI;
+        crypto_key1     <= KeyTweak0xDI;
+        crypto_in       <= zeros(64-ADDRESS_WIDTH) & (s_request.block_address and not(mask(BLOCK_INDEX_WIDTH+3, ADDRESS_WIDTH)));
+        crypto_in_valid <= '1';
+
+        tweak_in_valid   <= crypto_out_valid;
+        crypto_out_ready <= tweak_in_ready;
+
+        if crypto_in_ready = '1' then
+          StatexDN <= TWEAK_WAIT;  -- wait in the next state until the tweak is ready
+        end if;
+      when READ_TWEAK =>
+        tweak_in            <= full_in_block;
+        tweak_in_valid      <= full_in_block_valid;
+        full_in_block_ready <= tweak_in_ready;
+
+        if tweak_in_valid = '1' and tweak_in_ready = '1' then
+          StatexDN <= TWEAK_WAIT;
+        end if;
+      when TWEAK_WAIT =>
+        -- wait for the tweak to be ready
+        -- the tweak keys have to be provided until the end given that prince does not copy them
+        crypto_key0 <= KeyTweak0xDI;
+        crypto_key1 <= KeyTweak0xDI;
+
+        tweak_in_valid   <= crypto_out_valid;
+        crypto_out_ready <= tweak_in_ready;
+
+        if tweak_out_valid = '1' and tweak_in_valid = '0' then
+          StatexDN <= PROCESS_DATA;
+          if DECRYPTION and s_request.read = '0' then
+            StatexDN <= OUTPUT_TWEAK;
+          end if;
+        end if;
+      when OUTPUT_TWEAK =>
+        output_tweakxS  <= '1';
+        out_block_valid <= tweak_out_valid;
+        out_block       <= tweak_out;
+        if out_block_ready = '1' then
+          StatexDN <= PROCESS_DATA;
+        end if;
+      when PROCESS_DATA =>
+        -- process the data using the tweak from the tweak generator
+        crypto_in_valid      <= full_in_block_valid and tweak_out_valid;
+        request_reg_in_valid <= full_in_block_valid and tweak_out_valid;
+        full_in_block_ready  <= crypto_in_ready;
+        tweak_out_ready      <= crypto_in_ready;
+
+        out_block_valid       <= crypto_out_valid;
+        crypto_out_ready      <= out_block_ready;
+        request_reg_out_ready <= out_block_ready;
+
+        if request_reg_out_valid = '1' and to_integer(unsigned(request_reg.block_len)) = 0 then
+          s_request_validxS <= '0';
+        end if;
+
+        -- calculate the next tweak when necessary
+        if full_in_block_valid = '1' and tweak_out_valid = '0' and crypto_out_valid = '0' then
+          StatexDN <= GENERATE_TWEAK_STATE;
+        end if;
+
+        if m_request_ready = '1' and unsigned(m_requestxS.block_len) = 0 then
+          StatexDN <= IDLE;
+          if tweak_out_valid = '1' then
+            tweak_out_ready <= '1';
+          end if;
+        end if;
+      when others => assert false report "Invalid state" severity error;
+    end case;
+  end process control;
+
+  -- adapt the length, address and data from the register to the output
+  output : process(full_out_block, full_out_block_valid, full_out_field_addr,
+                   request_reg, output_tweakxS, s_request) is
+  begin
+    m_requestxS <= request_reg;
+
+    m_requestxS.virt_address  <= request_reg.virt_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_address <= request_reg.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_len     <= request_reg.block_len(AXI_LEN_WIDTH-1 downto FIELD_ADDR_WIDTH) & std_logic_vector(MAX_FIELD_COUNTER_VALUE - unsigned(full_out_field_addr));
+
+    if output_tweakxS = '1' then
+      m_requestxS               <= s_request;
+      m_requestxS.block_address <= s_request.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+      m_requestxS.block_len     <= (others => '1');
+      m_requestxS.metadata      <= '1';
+    end if;
+
+    m_requestxS.data  <= full_out_block;
+    m_requestxS.valid <= full_out_block_valid;
+  end process output;
+  m_request <= m_requestxS;
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_qarma_cbc_decrypt.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_qarma_cbc_decrypt.vhd
new file mode 100644
index 0000000..12868c0
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_qarma_cbc_decrypt.vhd
@@ -0,0 +1,386 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Decrypts transactions in QARMA CBC mode.
+--!
+--! First, the IV for the decryption is generated by decrypting the sector
+--! address with the IV key. Next, the calculated IV is output on the internal
+--! stream to permit later encryption. Finally, the actual data decryption is
+--! performed. Note that only properly aligned transactions are supported.
+entity stream_qarma_cbc_decrypt is
+  generic(
+    BLOCK_INDEX_WIDTH : integer := 2
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    KeyIv0xDI     : in std_logic_vector(63 downto 0);
+    KeyIv1xDI     : in std_logic_vector(63 downto 0);
+    KeyCipher0xDI : in std_logic_vector(63 downto 0);
+    KeyCipher1xDI : in std_logic_vector(63 downto 0)
+    );
+end stream_qarma_cbc_decrypt;
+
+architecture Behavioral of stream_qarma_cbc_decrypt is
+  constant DATASTREAM_BYTE_FIELD_ADDR_WIDTH : integer                                := log2_ceil(DATASTREAM_DATA_WIDTH/8);
+  constant FIELD_ADDR_WIDTH                 : integer                                := log2_ceil(64/DATASTREAM_DATA_WIDTH);
+  constant MAX_FIELD_COUNTER_VALUE          : unsigned(FIELD_ADDR_WIDTH-1 downto 0)  := (others => '1');
+  constant MAX_BLOCK_INDEX_COUNTER_VALUE    : unsigned(BLOCK_INDEX_WIDTH-1 downto 0) := (others => '1');
+
+  -- signals for the deserialization
+  signal full_in_block                            : std_logic_vector(63 downto 0);
+  signal full_in_block_valid, full_in_block_ready : std_logic;
+  signal full_in_block_masked                     : std_logic_vector(63 downto 0);
+
+  -- signals for the request register stage
+  signal request_reg                                  : StreamType;
+  signal request_reg_full_data                        : std_logic_vector(63 downto 0);
+  signal request_reg_in_valid                         : std_logic;
+  signal request_reg_out_valid, request_reg_out_ready : std_logic;
+
+  -- signals for the crypto unit
+  signal crypto_in, crypto_out              : std_logic_vector(63 downto 0);
+  signal crypto_out_masked                  : std_logic_vector(63 downto 0);
+  signal crypto_key0, crypto_key1           : std_logic_vector(63 downto 0);
+  signal crypto_in_valid, crypto_in_ready   : std_logic;
+  signal crypto_out_valid, crypto_out_ready : std_logic;
+  signal key                                : std_logic_vector(127 downto 0);
+  signal tweak                              : std_logic_vector(63 downto 0);
+
+  -- signals for the mask management
+  signal mask_in, mask_out              : std_logic_vector(63 downto 0);
+  signal mask_in_valid, mask_in_ready   : std_logic;
+  signal mask_out_valid, mask_out_ready : std_logic;
+
+  -- signals for the deserialization
+  signal out_block                        : std_logic_vector(63 downto 0);
+  signal out_block_valid, out_block_ready : std_logic;
+  signal full_out_block                   : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal full_out_field_addr              : std_logic_vector(FIELD_ADDR_WIDTH-1 downto 0);
+  signal full_out_block_valid             : std_logic;
+
+  signal m_requestxS       : StreamType;
+  signal s_request_validxS : std_logic;
+  signal s_request_readyxS : std_logic;
+
+  -- State machine states and register
+  type StateType is (IDLE, CALC_IV, WAIT_IV, OUTPUT_IV, PROCESS_DATA);
+  signal StatexDP, StatexDN     : StateType;
+  signal blockNrxDP, blockNrxDN : std_logic_vector(BLOCK_INDEX_WIDTH downto 0);
+  signal output_ivxS            : std_logic;
+begin
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 64,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      -- only aligned blocks are expected with multiple of OUT_DATA_WIDTH are expected
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => '0',
+
+      in_data  => s_request.data,
+      in_valid => s_request_validxS,
+      in_ready => s_request_readyxS,
+
+      out_data         => full_in_block,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => full_in_block_valid,
+      out_ready        => full_in_block_ready
+      );
+  full_in_block_masked <= full_in_block xor mask_out;
+  s_request_ready      <= s_request_readyxS;
+
+  reg_stream_data : entity work.register_stage
+    generic map(
+      WIDTH      => 64,
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => full_in_block,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg_full_data,
+      out_valid => open,
+      out_ready => request_reg_out_ready
+      );
+
+  reg_stream : entity work.stream_register_stage
+    generic map(
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg,
+      out_valid => request_reg_out_valid,
+      out_ready => request_reg_out_ready
+      );
+
+  mask_reg : entity work.register_stage
+    generic map(
+      WIDTH      => 64,
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => mask_in,
+      in_valid => mask_in_valid,
+      in_ready => mask_in_ready,
+
+      out_data  => mask_out,
+      out_valid => mask_out_valid,
+      out_ready => mask_out_ready
+      );
+
+  key               <= crypto_key0 & crypto_key1;
+  tweak             <= std_logic_vector(resize(signed(s_request.user), crypto_in'length));
+  crypto : entity work.qarma
+    generic map(
+      DECRYPTION => true
+      )
+    port map(
+      ClkxCI        => clk,
+      RstxRBI       => resetn,
+      KeyxDI        => key,
+      TweakxDI      => tweak,
+      MessagexDI    => crypto_in,
+      CiphertextxDO => crypto_out,
+      in_ready      => crypto_in_ready,
+      in_valid      => crypto_in_valid,
+      out_ready     => crypto_out_ready,
+      out_valid     => crypto_out_valid
+      );
+  crypto_out_masked <= crypto_out xor mask_out;
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 64,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => '1',
+      in_data         => out_block,
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+      in_valid        => out_block_valid,
+      in_ready        => out_block_ready,
+
+      out_data         => full_out_block,
+      out_field_offset => full_out_field_addr,
+      out_field_len    => open,
+      out_last         => open,
+      out_valid        => full_out_block_valid,
+      out_ready        => m_request_ready
+      );
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        StatexDP   <= IDLE;
+        blockNrxDP <= (others => '0');
+      else
+        StatexDP   <= StatexDN;
+        blockNrxDP <= blockNrxDN;
+      end if;
+    end if;
+  end process regs;
+
+  control : process(KeyCipher0xDI, KeyCipher1xDI, KeyIv0xDI, StatexDP,
+                    blockNrxDP, crypto_in_ready, crypto_out, crypto_out_masked,
+                    crypto_out_ready, crypto_out_valid, full_in_block,
+                    full_in_block_valid, m_request_ready, full_in_block_masked,
+                    m_requestxS.block_len, mask_in_ready, mask_in_valid,
+                    mask_out, mask_out_valid, out_block_ready,
+                    request_reg.block_len, request_reg_full_data,
+                    request_reg_out_valid, s_request.block_address,
+                    s_request.read, s_request.valid) is
+    variable GENERATE_IV_STATE : StateType;
+  begin
+    StatexDN   <= StatexDP;
+    blockNrxDN <= blockNrxDP;
+
+    crypto_key0 <= KeyCipher0xDI;
+    crypto_key1 <= KeyCipher1xDI;
+    crypto_in   <= full_in_block;
+
+    out_block <= crypto_out_masked;
+
+    crypto_in_valid      <= '0';
+    request_reg_in_valid <= '0';
+
+    mask_in          <= request_reg_full_data;
+    mask_in_valid    <= '0';
+    mask_out_ready   <= '0';
+    crypto_out_ready <= '0';
+
+    full_in_block_ready <= '0';
+
+    out_block_valid       <= '0';
+    crypto_out_ready      <= '0';
+    request_reg_in_valid  <= '0';
+    request_reg_out_ready <= '0';
+
+    output_ivxS <= '0';
+
+    s_request_validxS <= s_request.valid;
+
+    case StatexDP is
+      when IDLE =>
+        blockNrxDN <= (others => '0');
+        if full_in_block_valid = '1' then
+          StatexDN <= CALC_IV;
+        end if;
+      when CALC_IV =>
+        -- use the crypto core to calculate the iv
+        crypto_key0     <= KeyIv0xDI;
+        crypto_key1     <= KeyIv0xDI;
+        crypto_in       <= zeros(64-ADDRESS_WIDTH) & (s_request.block_address and not(mask(BLOCK_INDEX_WIDTH+3, ADDRESS_WIDTH)));
+        crypto_in_valid <= '1';
+
+        mask_in_valid    <= crypto_out_valid;
+        crypto_out_ready <= mask_in_ready;
+
+        if crypto_in_ready = '1' then
+          StatexDN <= WAIT_IV;  -- wait in the next state until the tweak is ready
+        end if;
+      when WAIT_IV =>
+        -- wait for the iv to be ready
+        -- the iv keys have to be provided until the end given that prince does not copy them
+        crypto_key0 <= KeyIv0xDI;
+        crypto_key1 <= KeyIv0xDI;
+
+        mask_in          <= crypto_out;
+        mask_in_valid    <= crypto_out_valid;
+        crypto_out_ready <= mask_in_ready;
+
+        if mask_out_valid = '1' and mask_in_valid = '0' then
+          StatexDN <= PROCESS_DATA;
+          if s_request.read = '0' then
+            StatexDN <= OUTPUT_IV;
+          end if;
+        end if;
+      when OUTPUT_IV =>
+        output_ivxS     <= '1';
+        out_block_valid <= mask_out_valid;
+        out_block       <= mask_out;
+        if out_block_ready = '1' then
+          StatexDN <= PROCESS_DATA;
+        end if;
+      when PROCESS_DATA =>
+        -- do not start with the next block in this state
+        if request_reg_out_valid = '1' and to_integer(unsigned(request_reg.block_len)) = 0 then
+          s_request_validxS <= '0';
+        end if;
+
+        -- count the number acknowledged blocks at the cipher input
+        if crypto_in_ready = '1' then
+          blockNrxDN <= std_logic_vector(unsigned(blockNrxDP) + 1);
+        end if;
+
+        -- cipher output signals
+        out_block_valid       <= crypto_out_valid and mask_out_valid;
+        crypto_out_ready      <= out_block_ready;
+        request_reg_out_ready <= out_block_ready;
+        mask_out_ready        <= out_block_ready;
+
+        mask_in   <= request_reg_full_data;
+        out_block <= crypto_out_masked;
+
+
+        if to_integer(unsigned(blockNrxDP)) <= to_integer(MAX_BLOCK_INDEX_COUNTER_VALUE) then
+          -- cipher input signals
+          mask_in_valid        <= request_reg_out_valid;
+          crypto_in_valid      <= full_in_block_valid;
+          request_reg_in_valid <= full_in_block_valid;
+          full_in_block_ready  <= crypto_in_ready;
+
+        elsif full_in_block_valid = '1' and crypto_out_valid = '0' and mask_out_valid = '0' then
+          -- calculate the next iv
+          StatexDN   <= CALC_IV;
+          blockNrxDN <= (others => '0');
+        end if;
+
+        if m_request_ready = '1' and unsigned(m_requestxS.block_len) = 0 then
+          -- request has been handled, wait for the next one
+          StatexDN <= IDLE;
+        end if;
+      when others => assert false report "Invalid state" severity error;
+    end case;
+  end process control;
+
+  -- adapt the length, address and data from the register to the output
+  output : process(full_out_block, full_out_block_valid, full_out_field_addr,
+                   output_ivxS, request_reg, s_request) is
+  begin
+    m_requestxS <= request_reg;
+
+    m_requestxS.virt_address  <= request_reg.virt_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_address <= request_reg.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_len     <= request_reg.block_len(AXI_LEN_WIDTH-1 downto FIELD_ADDR_WIDTH) & std_logic_vector(MAX_FIELD_COUNTER_VALUE - unsigned(full_out_field_addr));
+
+    if output_ivxS = '1' then
+      m_requestxS               <= s_request;
+      m_requestxS.block_address <= s_request.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+      m_requestxS.block_len     <= (others => '1');
+      m_requestxS.metadata      <= '1';
+    end if;
+
+    m_requestxS.data  <= full_out_block;
+    m_requestxS.valid <= full_out_block_valid;
+  end process output;
+  m_request <= m_requestxS;
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/crypto/stream_qarma_cbc_encrypt.vhd b/fpga/src/memsec/hdl/framework/stream/crypto/stream_qarma_cbc_encrypt.vhd
new file mode 100644
index 0000000..dd4312a
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/crypto/stream_qarma_cbc_encrypt.vhd
@@ -0,0 +1,390 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Encrypts transactions in QARMA CBC mode.
+--!
+--! First, the IV for the encryption is read from the internal stream. Next,
+--! the actual data encryption is performed. Note that only properly aligned
+--! transactions are supported.
+entity stream_qarma_cbc_encrypt is
+  generic(
+    BLOCK_INDEX_WIDTH : integer := 2
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    KeyIv0xDI     : in std_logic_vector(63 downto 0);
+    KeyIv1xDI     : in std_logic_vector(63 downto 0);
+    KeyCipher0xDI : in std_logic_vector(63 downto 0);
+    KeyCipher1xDI : in std_logic_vector(63 downto 0)
+    );
+end stream_qarma_cbc_encrypt;
+
+architecture Behavioral of stream_qarma_cbc_encrypt is
+  constant DATASTREAM_BYTE_FIELD_ADDR_WIDTH : integer                                := log2_ceil(DATASTREAM_DATA_WIDTH/8);
+  constant FIELD_ADDR_WIDTH                 : integer                                := log2_ceil(64/DATASTREAM_DATA_WIDTH);
+  constant MAX_FIELD_COUNTER_VALUE          : unsigned(FIELD_ADDR_WIDTH-1 downto 0)  := (others => '1');
+  constant MAX_BLOCK_INDEX_COUNTER_VALUE    : unsigned(BLOCK_INDEX_WIDTH-1 downto 0) := (others => '1');
+
+  -- signals for the deserialization
+  signal full_in_block                            : std_logic_vector(63 downto 0);
+  signal full_in_block_valid, full_in_block_ready : std_logic;
+  signal full_in_block_masked                     : std_logic_vector(63 downto 0);
+
+  -- signals for the request register stage
+  signal request_reg                                  : StreamType;
+  signal request_reg_full_data                        : std_logic_vector(63 downto 0);
+  signal request_reg_in_valid                         : std_logic;
+  signal request_reg_out_valid, request_reg_out_ready : std_logic;
+
+  -- signals for the crypto unit
+  signal crypto_in, crypto_out              : std_logic_vector(63 downto 0);
+  signal crypto_out_masked                  : std_logic_vector(63 downto 0);
+  signal crypto_key0, crypto_key1           : std_logic_vector(63 downto 0);
+  signal crypto_in_valid, crypto_in_ready   : std_logic;
+  signal crypto_out_valid, crypto_out_ready : std_logic;
+  signal key                                : std_logic_vector(127 downto 0);
+  signal tweak                              : std_logic_vector(63 downto 0);
+
+  -- signals for the mask management
+  signal mask_in, mask_out              : std_logic_vector(63 downto 0);
+  signal mask_in_valid, mask_in_ready   : std_logic;
+  signal mask_out_valid, mask_out_ready : std_logic;
+
+  -- synchronizer block
+  signal sync_valid_in, sync_ready_in     : std_logic;
+  signal sync_valid_mask, sync_ready_mask : std_logic;
+
+  -- signals for the deserialization
+  signal out_block                        : std_logic_vector(63 downto 0);
+  signal out_block_valid, out_block_ready : std_logic;
+  signal full_out_block                   : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal full_out_field_addr              : std_logic_vector(FIELD_ADDR_WIDTH-1 downto 0);
+  signal full_out_block_valid             : std_logic;
+
+  signal m_requestxS       : StreamType;
+  signal s_request_validxS : std_logic;
+  signal s_request_readyxS : std_logic;
+
+  -- State machine states and register
+  type StateType is (IDLE, READ_IV, WAIT_IV, PROCESS_DATA);
+  signal StatexDP, StatexDN     : StateType;
+  signal blockNrxDP, blockNrxDN : std_logic_vector(BLOCK_INDEX_WIDTH downto 0);
+begin
+
+  data_deserialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => 64,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      -- only aligned blocks are expected with multiple of OUT_DATA_WIDTH are expected
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '0'),
+      in_last         => '0',
+
+      in_data  => s_request.data,
+      in_valid => s_request_validxS,
+      in_ready => s_request_readyxS,
+
+      out_data         => full_in_block,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => full_in_block_valid,
+      out_ready        => full_in_block_ready
+      );
+  full_in_block_masked <= full_in_block xor mask_out;
+  s_request_ready      <= s_request_readyxS;
+
+  reg_stream_data : entity work.register_stage
+    generic map(
+      WIDTH      => 64,
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => full_in_block,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg_full_data,
+      out_valid => open,
+      out_ready => request_reg_out_ready
+      );
+
+  reg_stream : entity work.stream_register_stage
+    generic map(
+      REGISTERED => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request,
+      in_valid => request_reg_in_valid,
+      in_ready => open,
+
+      out_data  => request_reg,
+      out_valid => request_reg_out_valid,
+      out_ready => request_reg_out_ready
+      );
+
+  mask_reg : entity work.register_stage
+    generic map(
+      WIDTH        => 64,
+      READY_BYPASS => false,
+      REGISTERED   => true
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => mask_in,
+      in_valid => mask_in_valid,
+      in_ready => mask_in_ready,
+
+      out_data  => mask_out,
+      out_valid => mask_out_valid,
+      out_ready => mask_out_ready
+      );
+      
+  key               <= crypto_key0 & crypto_key1;
+  tweak             <= std_logic_vector(resize(signed(s_request.user), crypto_in'length));
+  crypto : entity work.qarma
+    generic map(
+      DECRYPTION => false
+      )
+    port map(
+      ClkxCI        => clk,
+      RstxRBI       => resetn,
+      KeyxDI        => key,
+      TweakxDI      => tweak,
+      MessagexDI    => crypto_in,
+      CiphertextxDO => crypto_out,
+      in_ready      => crypto_in_ready,
+      in_valid      => crypto_in_valid,
+      out_ready     => crypto_out_ready,
+      out_valid     => crypto_out_valid
+      );
+  crypto_out_masked <= crypto_out xor mask_out;
+
+  synchronization : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_ready => sync_ready_in,
+      in_valid => sync_valid_in,
+
+      out_ready(0) => out_block_ready,
+      out_ready(1) => sync_ready_mask,
+
+      out_active(0) => '1',
+      out_active(1) => '1',
+
+      out_valid(0) => out_block_valid,
+      out_valid(1) => sync_valid_mask
+      );
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => 64,
+      OUT_DATA_WIDTH => DATASTREAM_DATA_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => '1',
+      in_data         => out_block,
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+      in_valid        => out_block_valid,
+      in_ready        => out_block_ready,
+
+      out_data         => full_out_block,
+      out_field_offset => full_out_field_addr,
+      out_field_len    => open,
+      out_last         => open,
+      out_valid        => full_out_block_valid,
+      out_ready        => m_request_ready
+      );
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        StatexDP   <= IDLE;
+        blockNrxDP <= (others => '0');
+      else
+        StatexDP   <= StatexDN;
+        blockNrxDP <= blockNrxDN;
+      end if;
+    end if;
+  end process regs;
+
+  control : process(KeyCipher0xDI, KeyCipher1xDI, KeyIv0xDI, StatexDP,
+                    blockNrxDP, crypto_in_ready, crypto_out, crypto_out_masked,
+                    crypto_out_valid, full_in_block, full_in_block_masked,
+                    full_in_block_valid, m_request_ready,
+                    m_requestxS.block_len, mask_in_ready, mask_in_valid,
+                    mask_out_valid, out_block_ready, request_reg.block_len,
+                    request_reg_full_data, request_reg_out_valid,
+                    s_request.valid, sync_ready_in, sync_valid_mask) is
+  begin
+    StatexDN   <= StatexDP;
+    blockNrxDN <= blockNrxDP;
+
+    crypto_key0 <= KeyCipher0xDI;
+    crypto_key1 <= KeyCipher1xDI;
+    crypto_in   <= full_in_block;
+
+    out_block <= crypto_out_masked;
+
+    crypto_in_valid      <= '0';
+    request_reg_in_valid <= '0';
+
+    mask_in          <= request_reg_full_data;
+    mask_in_valid    <= '0';
+    mask_out_ready   <= '0';
+    crypto_out_ready <= '0';
+
+    full_in_block_ready <= '0';
+
+    sync_valid_in         <= '0';
+    sync_ready_mask       <= '0';
+    crypto_out_ready      <= '0';
+    request_reg_in_valid  <= '0';
+    request_reg_out_ready <= '0';
+
+    s_request_validxS <= s_request.valid;
+    if request_reg_out_valid = '1' and to_integer(unsigned(request_reg.block_len)) = 0 then
+      s_request_validxS <= '0';
+    end if;
+
+    case StatexDP is
+      when IDLE =>
+        blockNrxDN <= (others => '0');
+        if full_in_block_valid = '1' then
+          StatexDN <= READ_IV;
+        end if;
+      when READ_IV =>
+        mask_in             <= full_in_block;
+        mask_in_valid       <= full_in_block_valid;
+        full_in_block_ready <= mask_in_ready;
+
+        if mask_in_valid = '1' and mask_in_ready = '1' then
+          StatexDN <= WAIT_IV;
+        end if;
+      when WAIT_IV =>
+        -- wait for the iv to be ready
+        -- the iv keys have to be provided until the end given that prince does not copy them
+        crypto_key0 <= KeyIv0xDI;
+        crypto_key1 <= KeyIv0xDI;
+
+        mask_in          <= crypto_out;
+        mask_in_valid    <= crypto_out_valid;
+        crypto_out_ready <= mask_in_ready;
+
+        if mask_out_valid = '1' and mask_in_valid = '0' then
+          StatexDN <= PROCESS_DATA;
+        end if;
+      when PROCESS_DATA =>
+        -- count the number acknowledged blocks at the cipher input
+        if crypto_in_ready = '1' then
+          blockNrxDN <= std_logic_vector(unsigned(blockNrxDP) + 1);
+        end if;
+
+        -- cipher output signals
+        sync_valid_in         <= crypto_out_valid;
+        crypto_out_ready      <= sync_ready_in;
+        request_reg_out_ready <= out_block_ready;
+
+        mask_in   <= crypto_out;
+        out_block <= crypto_out;
+
+        -- ignore the mask output by default (overriden for blockNr < maxValue)
+        sync_ready_mask <= sync_valid_mask;
+
+        if to_integer(unsigned(blockNrxDP)) <= to_integer(MAX_BLOCK_INDEX_COUNTER_VALUE) then
+          -- cipher input signals
+
+          crypto_in_valid      <= full_in_block_valid and mask_out_valid;
+          request_reg_in_valid <= full_in_block_valid and mask_out_valid;
+          full_in_block_ready  <= crypto_in_ready;
+          mask_out_ready       <= crypto_in_ready;
+
+          mask_in_valid   <= sync_valid_mask;
+          sync_ready_mask <= mask_in_ready;
+
+          crypto_in <= full_in_block_masked;
+
+        elsif full_in_block_valid = '1' and crypto_out_valid = '0' and mask_out_valid = '0' then
+          -- calculate the next iv
+          StatexDN   <= READ_IV;
+          blockNrxDN <= (others => '0');
+        end if;
+
+        if m_request_ready = '1' and unsigned(m_requestxS.block_len) = 0 then
+          -- request has been handled, wait for the next one
+          StatexDN <= IDLE;
+        end if;
+      when others => assert false report "Invalid state" severity error;
+    end case;
+  end process control;
+
+  -- adapt the length, address and data from the register to the output
+  output : process(full_out_block, full_out_block_valid, full_out_field_addr,
+                   request_reg) is
+  begin
+    m_requestxS <= request_reg;
+
+    m_requestxS.virt_address  <= request_reg.virt_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_address <= request_reg.block_address(ADDRESS_WIDTH-1 downto FIELD_ADDR_WIDTH+DATASTREAM_BYTE_FIELD_ADDR_WIDTH) & full_out_field_addr & zeros(DATASTREAM_BYTE_FIELD_ADDR_WIDTH);
+    m_requestxS.block_len     <= request_reg.block_len(AXI_LEN_WIDTH-1 downto FIELD_ADDR_WIDTH) & std_logic_vector(MAX_FIELD_COUNTER_VALUE - unsigned(full_out_field_addr));
+
+    m_requestxS.data  <= full_out_block;
+    m_requestxS.valid <= full_out_block_valid;
+  end process output;
+  m_request <= m_requestxS;
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/request_modification/stream_crypto_request_modifier.vhd b/fpga/src/memsec/hdl/framework/stream/request_modification/stream_crypto_request_modifier.vhd
new file mode 100644
index 0000000..f8fb54a
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/request_modification/stream_crypto_request_modifier.vhd
@@ -0,0 +1,195 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Widens requests to a size which is suitable for the cryptographic mode.
+--!
+--! This module widens requests to align them to the cryptographic block size. Furthermore, valid
+--! physical addresses are generated by the module.
+entity stream_crypto_request_modifier is
+  generic(
+    C_M_AXI_DATA_WIDTH : integer := 32;
+
+    DATA_START_ADDRESS         : std_logic_vector := x"40000000";  --! Start address offset for data accesses.
+    DATA_ALIGNMENT             : positive         := 1;            --! Size of one data block in the virtual address space in byte.
+    DATA_METADATA              : natural          := 0;            --! Metadata size in byte for every data block.
+    TREE_START_ADDRESS         : std_logic_vector := x"40000000";  --! Start address offset for tree accesses.
+    TREE_ALIGNMENT             : positive         := 1;            --! Size of one tree block in the virtual address space in byte.
+    TREE_METADATA              : natural          := 0;            --! Metadata size in byte for every tree block.
+    TREE_ENABLE                : boolean          := false;        --! Enable support for tree request.
+    TREE_ALIGNMENT_READ        : positive         := 1;            --! Size of one tree block for reads in the virtual address space in byte.
+    TREE_ALIGNMENT_READ_ENABLE : boolean          := false;        --! Enable special alignment for reads in tree blocks.
+    SIMPLE_ALIGNMENT           : boolean          := true          --! Enable bit slicing based widening. (better critical path)
+    );
+  port(
+    -- Ports of Axi Slave Bus Interface S_AXI
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_crypto_request_modifier;
+
+architecture arch_imp of stream_crypto_request_modifier is
+  constant DATASTREAM_ALIGN_BIT : natural := log2_ceil(DATASTREAM_DATA_BYTES);
+
+  constant DATA_ALIGNMENT_BIT : natural := log2_ceil(DATA_ALIGNMENT);
+  constant DATA_METADATA_BIT  : natural := log2_ceil(DATA_METADATA);
+
+  constant TREE_ALIGNMENT_BIT      : natural := log2_ceil(TREE_ALIGNMENT);
+  constant TREE_ALIGNMENT_READ_BIT : natural := log2_ceil(TREE_ALIGNMENT_READ);
+  constant TREE_METADATA_BIT       : natural := log2_ceil(TREE_METADATA);
+
+  constant TREE_VIRT_OFFSET : UAddressType := unsigned(TREE_START_ADDRESS)-unsigned(DATA_START_ADDRESS);
+  constant TREE_PHYS_OFFSET : UAddressType := TREE_VIRT_OFFSET +
+                                              slice((TREE_VIRT_OFFSET / DATA_ALIGNMENT) * DATA_METADATA, ADDRESS_WIDTH-1, 0);
+
+begin
+  s_request_ready <= m_request_ready;
+
+  translate_request : process(s_request) is
+    -- TODO determine tighter bounds for the types if possible
+    variable vVirtAlign  : UAddressType;
+    variable vPhysAlign  : UAddressType;
+    variable vPhysOffset : UAddressType;
+    variable vVirtOffset : UAddressType;
+    variable vStartAddr  : UAddressType;
+
+    variable vFirstBlock : UAddressType;
+    variable vBlockCount : UAddressType;
+    variable vVirtAddr   : UAddressType;
+    variable vPhysAddr   : UAddressType;
+
+    variable vReqAddr     : UAddressType;
+    variable vReqLenBytes : UByteLenType;
+    variable vPhysLen     : UByteLenType;
+
+    -- variable vVirtLenVec     : UByteLenType;
+    -- variable vTmp : UAddressType;
+  begin
+    m_request         <= s_request;
+    m_request.address <= std_logic_vector(unsigned(s_request.address) - unsigned(DATA_START_ADDRESS));
+
+    -- Setup helper variables for alignment, metadata size, and offsets assuming we handle a data request.
+    vVirtAlign  := to_unsigned(DATA_ALIGNMENT, vVirtAlign'length);
+    vPhysAlign  := to_unsigned(DATA_ALIGNMENT + DATA_METADATA, vPhysAlign'length);
+    vVirtOffset := (others => '0');
+    vPhysOffset := (others => '0');
+    vStartAddr  := unsigned(DATA_START_ADDRESS);
+
+    -- Update helper variables in case it is a tree requests instead.
+    if TREE_ENABLE = true and (s_request.request_type = REQ_TYPE_TREE or s_request.request_type = REQ_TYPE_TREE_ROOT) then
+      if TREE_ALIGNMENT_READ_ENABLE = true and s_request.read = '1' then
+        vVirtAlign := to_unsigned(TREE_ALIGNMENT_READ, vVirtAlign'length);
+        vPhysAlign := to_unsigned(TREE_ALIGNMENT_READ, vPhysAlign'length);
+      else
+        vVirtAlign := to_unsigned(TREE_ALIGNMENT, vVirtAlign'length);
+        vPhysAlign := to_unsigned(TREE_ALIGNMENT + TREE_METADATA, vPhysAlign'length);
+      end if;
+      vVirtOffset := TREE_VIRT_OFFSET;
+      vPhysOffset := TREE_PHYS_OFFSET;
+      vStartAddr  := unsigned(TREE_START_ADDRESS);
+    end if;
+
+    vReqAddr     := unsigned(s_request.block_address) - vStartAddr;
+    vReqLenBytes := uaxi_bytes_len(s_request.block_len, DATASTREAM_ALIGN_BIT, vReqLenBytes'length);
+
+    -- Determine number of crypto blocks to fetch
+    -- if SIMPLE_ALIGNMENT = true and DATA_METADATA /= 0 then  -- hamming_weight(vVirtAlign) = 1 and hamming_weight(vMetadata) = 1 then
+      -- assert false report "Not yet ported to GHDL." severity failure; -- FIXME rewrite for GHDL
+    --   if TREE_ENABLE = true and (s_request.request_type = REQ_TYPE_TREE or s_request.request_type = REQ_TYPE_TREE_ROOT) then
+    --     if TREE_ALIGNMENT_READ_ENABLE and s_request.read = '1' then
+    --       vFirstBlock  := to_integer(vReqAddr srl TREE_ALIGNMENT_READ_BIT);
+    --       vVirtAddr    := vReqAddr(ADDRESS_WIDTH-1 downto TREE_ALIGNMENT_READ_BIT) & (TREE_ALIGNMENT_READ_BIT-1 downto 0 => '0');
+
+    --       vTmp        := vReqAddr - vVirtAddr;
+    --       vBlockCount := to_integer((vTmp(AXI_LEN_WIDTH + 1 downto 0)+unsigned(vReqLenBytes)) srl TREE_ALIGNMENT_READ_BIT);
+    --       vVirtLenVec := to_unsigned(vBlockCount, AXI_LEN_WIDTH + 2);
+    --       vVirtLenVec := vVirtLenVec(vVirtLenVec'length-TREE_ALIGNMENT_READ_BIT-1 downto 0) & (TREE_ALIGNMENT_READ_BIT-1 downto 0 => '1');
+    --     else
+    --       vFirstBlock := to_integer(vReqAddr srl TREE_ALIGNMENT_BIT);
+    --       vVirtAddr   := vReqAddr(ADDRESS_WIDTH-1 downto TREE_ALIGNMENT_BIT) & (TREE_ALIGNMENT_BIT-1 downto 0 => '0');
+
+    --       vTmp        := vReqAddr - vVirtAddr;
+    --       vBlockCount := to_integer((vTmp(AXI_LEN_WIDTH + 1 downto 0)+unsigned(vReqLenBytes)) srl TREE_ALIGNMENT_BIT);
+    --       vVirtLenVec := to_unsigned(vBlockCount, AXI_LEN_WIDTH + 2);
+    --       vVirtLenVec := vVirtLenVec(vVirtLenVec'length-TREE_ALIGNMENT_BIT-1 downto 0) & (TREE_ALIGNMENT_BIT-1 downto 0 => '1');
+    --     end if;
+
+    --     if TREE_METADATA = 0 or (TREE_ALIGNMENT_READ_ENABLE and s_request.read = '1') then
+    --       vPhysAddr    := vVirtAddr;
+    --       vPhysLen := (others => '0');
+    --     else
+    --       vPhysAddr := to_unsigned(vFirstBlock, ADDRESS_WIDTH);
+    --       vPhysAddr := vPhysAddr(ADDRESS_WIDTH-TREE_METADATA_BIT-1 downto 0) & (TREE_METADATA_BIT-1 downto 0    => '0');
+    --       vPhysAddr := vPhysAddr + vVirtAddr;
+    --       vPhysLen  := to_unsigned(vBlockCount+1, AXI_LEN_WIDTH + 2);
+    --       vPhysLen  := vPhysLen(AXI_LEN_WIDTH + 1 - TREE_METADATA_BIT downto 0) & (TREE_METADATA_BIT-1 downto 0 => '0');
+    --     end if;
+
+    --   else
+    --     vFirstBlock  := to_integer(vReqAddr srl DATA_ALIGNMENT_BIT);
+    --     vVirtAddr := vReqAddr(ADDRESS_WIDTH-1 downto DATA_ALIGNMENT_BIT) & (DATA_ALIGNMENT_BIT-1 downto 0 => '0');
+
+    --     vTmp        := vReqAddr - vVirtAddr;
+    --     vBlockCount := to_integer((vTmp(AXI_LEN_WIDTH + 1 downto 0)+unsigned(vReqLenBytes)) srl DATA_ALIGNMENT_BIT);
+    --     vVirtLenVec := to_unsigned(vBlockCount, AXI_LEN_WIDTH + 2);
+    --     vVirtLenVec := vVirtLenVec(vVirtLenVec'length-DATA_ALIGNMENT_BIT-1 downto 0) & (DATA_ALIGNMENT_BIT-1 downto 0 => '1');
+
+    --     vPhysAddr := to_unsigned(vFirstBlock, ADDRESS_WIDTH);
+    --     vPhysAddr := vPhysAddr(ADDRESS_WIDTH-DATA_METADATA_BIT-1 downto 0) & (DATA_METADATA_BIT-1 downto 0    => '0');
+    --     vPhysAddr := vPhysAddr + vVirtAddr;
+    --     vPhysLen  := to_unsigned(vBlockCount+1, AXI_LEN_WIDTH + 2);
+    --     vPhysLen  := vPhysLen(AXI_LEN_WIDTH + 1 - DATA_METADATA_BIT downto 0) & (DATA_METADATA_BIT-1 downto 0 => '0');
+    --   end if;
+
+    --   vPhysLen    := vPhysLen + vVirtLenVec;
+    --   vVirtLenVec := (DATASTREAM_ALIGN_BIT-1 downto 0 => '0') & vVirtLenVec(AXI_LEN_WIDTH + 1 downto DATASTREAM_ALIGN_BIT);
+    --   vPhysLen    := (DATASTREAM_ALIGN_BIT-1 downto 0 => '0') & vPhysLen(AXI_LEN_WIDTH + 1 downto DATASTREAM_ALIGN_BIT);
+
+    -- else
+      -- Calculate the first addressed block as well as its virtual and physical address.
+      -- FIXME report GHDL "bug" when to_unsigned(to_integer(vReqAddr), vFirstBlock'length) is used instead of vReqAddr
+      vFirstBlock := vReqAddr / vVirtAlign;
+      vVirtAddr   := slice(vFirstBlock * vVirtAlign, vVirtAddr'left, 0);
+      vPhysAddr   := slice(vFirstBlock * vPhysAlign, vPhysAddr'left, 0);
+
+      -- Calculate the total number of addressed blocks and derive how many beats of the
+      -- internal datastream are needed to process them.
+      vBlockCount := (vReqAddr + vReqLenBytes - vVirtAddr) / vVirtAlign + 1;
+      vPhysLen    := slice(vBlockCount * vPhysAlign, vPhysLen'left, 0) - 1 srl DATASTREAM_ALIGN_BIT;
+    -- end if;
+
+    m_request.block_address <= std_logic_vector(vPhysAddr + vPhysOffset);
+    m_request.block_len     <= std_logic_vector(vPhysLen(AXI_LEN_WIDTH-1 downto 0));
+    m_request.virt_address  <= std_logic_vector(vVirtAddr + vVirtOffset);
+
+  end process translate_request;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/stream/request_modification/stream_request_extractor.vhd b/fpga/src/memsec/hdl/framework/stream/request_modification/stream_request_extractor.vhd
new file mode 100644
index 0000000..df61f98
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/request_modification/stream_request_extractor.vhd
@@ -0,0 +1,123 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Extracts the original request from the stream.
+--!
+--! The data beats as well as all metadata of all data and tree requests are
+--! discarded such that every data transaction is reported only once.
+entity stream_request_extractor is
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_request_extractor;
+
+architecture arch_imp of stream_request_extractor is
+  signal reqxDP, reqxDN                 : StreamType;
+  signal output_ackxDBP, output_ackxDBN : std_logic;
+  signal input_ackxDBP, input_ackxDBN   : std_logic;
+
+  signal request_ready : std_logic;
+  signal output_req    : StreamType;
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        reqxDP         <= StreamType_default;
+        input_ackxDBP  <= '0';
+        output_ackxDBP <= '0';
+      else
+        reqxDP         <= reqxDN;
+        input_ackxDBP  <= input_ackxDBN;
+        output_ackxDBP <= output_ackxDBN;
+      end if;
+    end if;
+  end process regs;
+
+  work : process(input_ackxDBP, m_request_ready, output_ackxDBP,
+                 output_req.valid, request_ready, reqxDP, s_request) is
+  begin
+    reqxDN         <= reqxDP;
+    input_ackxDBN  <= input_ackxDBP;
+    output_ackxDBN <= output_ackxDBP;
+
+    output_req    <= StreamType_default;
+    request_ready <= '0';
+
+    if reqxDP.valid = '1' and output_ackxDBP = '1' then
+      output_req <= reqxDP;
+    end if;
+
+    -- Register is empty.
+    -- Write the new data into the register and forward the new request
+    -- directly from the input.
+    if s_request.valid = '1' and s_request.request_type = REQ_TYPE_DATA and input_ackxDBP = '0' and output_ackxDBP = '0' then
+      reqxDN         <= s_request;
+      output_req     <= s_request;
+      request_ready  <= '1';
+      output_ackxDBN <= '1';
+      input_ackxDBN  <= '1';
+    elsif s_request.valid = '1' and s_request.request_type /= REQ_TYPE_DATA then
+      request_ready <= '1';
+    end if;
+
+    -- remember if the output request has been acknowledged
+    if output_req.valid = '1' and m_request_ready = '1' then
+      output_ackxDBN <= '0';
+    end if;
+
+    -- remember if the input request has been acknowledged
+    if s_request.valid = '1' and request_ready = '1' and to_integer(unsigned(s_request.block_len)) = 0 and s_request.last_request = '1' then
+      input_ackxDBN <= '0';
+    end if;
+
+    -- acknowledged all requests at the input until the end has been reached
+    if s_request.valid = '1' and reqxDP.valid = '1' and input_ackxDBP = '1' then
+      request_ready <= '1';
+    end if;
+  end process work;
+
+  s_request_ready <= request_ready;
+
+  sanitize : process(output_req) is
+  begin
+    m_request               <= output_req;
+    m_request.virt_address  <= (others => '0');
+    m_request.block_address <= (others => '0');
+    m_request.block_len     <= (others => '0');
+    m_request.data          <= (others => '0');
+    m_request.len           <= (others => '0');  -- the request splitter cuts the original len and it is not used
+    m_request.metadata      <= '0';
+  end process sanitize;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/stream/request_modification/stream_request_splitter.vhd b/fpga/src/memsec/hdl/framework/stream/request_modification/stream_request_splitter.vhd
new file mode 100644
index 0000000..fd49836
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/request_modification/stream_request_splitter.vhd
@@ -0,0 +1,141 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Split a transaction into multiple consecutive requests.
+--!
+--! With the current building blocks, longer requests have to be splitted into smaller consecutive
+--! requests according to the payload size of the cryptographic primitive. This is especially
+--! important for the tree modes given that, for every leaf node that stores data, a corresponding
+--! tree walk/update has to be performed.
+--!
+--! Note that only the fields that deal with the block addresses and metadata are manipulated by
+--! this module. No alignment according to the cryptographic block size is performed yet.
+entity stream_request_splitter is
+  generic(
+    DATA_BLOCK_SIZE : positive := 32 --! Size of one data block in the virtual address space in byte.
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_request_splitter;
+
+architecture behavioral of stream_request_splitter is
+  constant BLOCK_LEN : positive := DATA_BLOCK_SIZE / DATASTREAM_DATA_BYTES;
+  constant ALIGN_BIT : natural  := log2_ceil(DATA_BLOCK_SIZE);
+
+  constant DATASTREAM_ALIGN_BIT : natural := log2_ceil(DATASTREAM_DATA_BYTES);
+
+  signal VBlockCounterxDP, VBlockCounterxDN : ULenType;
+  signal RemainingLenxDP, RemainingLenxDN   : UByteLenType;
+begin
+
+  assert DATASTREAM_DATA_BYTES <= DATA_BLOCK_SIZE and DATA_BLOCK_SIZE mod DATASTREAM_DATA_BYTES = 0
+    report "DATA_BLOCK_SIZE has to be equal or a multiple of DATASTREAM_DATA_BYTES." severity error;
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        RemainingLenxDP  <= (others => '0');
+        VBlockCounterxDP <= (others => '0');
+      else
+        RemainingLenxDP  <= RemainingLenxDN;
+        VBlockCounterxDP <= VBlockCounterxDN;
+      end if;
+    end if;
+  end process regs;
+
+  comb : process(s_request, m_request_ready, VBlockCounterxDP, RemainingLenxDP) is
+    variable base_address  : UAddressType;
+    variable len           : UByteLenType;
+    variable len_bytes     : UByteLenType;
+    variable offset        : UByteLenType;
+    variable remaining_len : UByteLenType;
+  begin
+    VBlockCounterxDN <= VBlockCounterxDP;
+    RemainingLenxDN  <= RemainingLenxDP;
+    remaining_len    := RemainingLenxDP;
+
+    s_request_ready        <= '0';
+    m_request              <= s_request;
+    m_request.last_request <= '0';
+
+    base_address := ualign(s_request.block_address, ALIGN_BIT) + (VBlockCounterxDP & uzeros(DATASTREAM_ALIGN_BIT));
+    offset       := uzextend(s_request.block_address(ALIGN_BIT-1 downto 0), offset'length);
+    len_bytes    := uaxi_bytes_len(s_request.block_len, DATASTREAM_ALIGN_BIT, len_bytes'length);
+    len          := to_unsigned(DATA_BLOCK_SIZE-1, len'length);
+
+    -- Adapt address and length of requests
+    m_request.block_address <= std_logic_vector(base_address);
+    if VBlockCounterxDP = 0 then
+      m_request.block_address <= s_request.block_address;
+      remaining_len           := offset + len_bytes;
+
+      -- First or a single block
+      if remaining_len < DATA_BLOCK_SIZE then
+        -- only 1 subrequest
+        len := len_bytes;
+      else
+        -- the first of several subrequests
+        len := to_unsigned(DATA_BLOCK_SIZE-1, len'length) - offset(len'length-1 downto 0);
+      end if;
+    elsif remaining_len < DATA_BLOCK_SIZE then
+      -- Last block
+      len := remaining_len;
+    end if;
+    m_request.block_len <= std_logic_vector(slice(len srl DATASTREAM_ALIGN_BIT, m_request.block_len'left, 0));
+
+    -- Compute next block counter and remaining length
+    if remaining_len < DATA_BLOCK_SIZE then
+      m_request.last_request <= s_request.last_request;
+      if s_request.valid = '1' then
+        s_request_ready <= m_request_ready;
+        if m_request_ready = '1' then
+          VBlockCounterxDN <= (others => '0');
+          RemainingLenxDN  <= (others => '0');
+        end if;
+      end if;
+    elsif VBlockCounterxDP = 0 then
+      if m_request_ready = '1' then
+        RemainingLenxDN  <= len_bytes - to_unsigned(DATA_BLOCK_SIZE, RemainingLenxDP'length) + offset;
+        VBlockCounterxDN <= VBlockCounterxDP + to_unsigned(BLOCK_LEN, s_request.block_len'length);
+      end if;
+    else
+      if m_request_ready = '1' then
+        RemainingLenxDN  <= RemainingLenxDP - to_unsigned(DATA_BLOCK_SIZE, RemainingLenxDP'length);
+        VBlockCounterxDN <= VBlockCounterxDP + to_unsigned(BLOCK_LEN, s_request.block_len'length);
+      end if;
+    end if;
+  end process comb;
+
+end behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/request_modification/stream_tree_request_generator.vhd b/fpga/src/memsec/hdl/framework/stream/request_modification/stream_tree_request_generator.vhd
new file mode 100644
index 0000000..5d45685
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/request_modification/stream_tree_request_generator.vhd
@@ -0,0 +1,205 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Generate transactions for the full tree from the root to the leaf.
+--!
+--! Note that only the fields that deal with the original request, virtual addresses, and metadata
+--! are manipulated by this module. Neither a alignment according to the cryptographic block size is
+--! performed nor valid physical addresses are generated.
+entity stream_tree_request_generator is
+  generic(
+    MEMORY_START_ADDRESS : AddressType := (others => '0');
+    DATA_MEMORY_SIZE     : positive    := 8192;  --! Size of the protected memory in byte. (virtual address space)
+    DATA_BLOCK_SIZE      : positive    := 32;    --! Size of a tree leaf node in byte. (virtual address space)
+    TREE_DATA_SIZE       : positive    := 8;     --! Size of one element in the tree in byte
+    TREE_ARITY           : positive    := 2;     --! Number of elements in one tree node
+    TREE_ROOTS           : positive    := 1      --! Number of trees which are used to protect the data memory
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    root_number       : out std_logic_vector(log2_ceil(TREE_ROOTS)-1 downto 0);
+    root_update       : out std_logic;
+    root_number_valid : out std_logic;
+    root_number_ready : in  std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_tree_request_generator;
+
+architecture behavioral of stream_tree_request_generator is
+  constant TREE_ARITY_BITS    : natural  := log2_ceil(TREE_ARITY);
+  constant NUM_DATA_BLOCKS    : positive := DATA_MEMORY_SIZE/DATA_BLOCK_SIZE;
+  constant IND_TREE_SIZE      : positive := DATA_MEMORY_SIZE/TREE_ROOTS;
+  constant TREE_OFFSET        : positive := DATA_MEMORY_SIZE;
+  constant TREE_START_ADDRESS : AddressType :=
+    std_logic_vector(to_unsigned(TREE_OFFSET, ADDRESS_WIDTH) + unsigned(MEMORY_START_ADDRESS));
+  constant TREE_LEVELS : natural := (log2_ceil(NUM_DATA_BLOCKS/TREE_ROOTS)+TREE_ARITY_BITS-1)/log2_ceil(TREE_ARITY);
+
+  constant TREE_LEVEL_BITS : natural                              := log2_ceil(TREE_LEVELS+1);
+  constant DATA_NODE_LEVEL : unsigned(TREE_LEVEL_BITS-1 downto 0) := to_unsigned(TREE_LEVELS, TREE_LEVEL_BITS);
+
+  signal TreeLevelxDP, TreeLevelxDN               : unsigned(TREE_LEVEL_BITS-1 downto 0);
+  signal TreeLevelAddressxDP, TreeLevelAddressxDN : AddressType;
+
+  signal request       : StreamType;
+  signal request_ready : std_logic;
+
+  signal sync_master_valid, sync_master_ready : std_logic;
+  signal tree_root_request                    : std_logic;
+
+  type StartAddressArray is array (TREE_ROOTS-1 downto 0) of AddressType;
+  signal tree_start_addresses : StartAddressArray;
+begin
+
+  -- can also be computed as constant ...
+  start_addresses : process(s_request) is
+    variable vTreeSize  : integer;
+    variable vLastStart : AddressType;
+  begin
+    vTreeSize := ((TREE_ARITY**TREE_LEVELS)-1) / (TREE_ARITY-1);  -- number of nodes
+    vTreeSize := vTreeSize * TREE_ARITY * TREE_DATA_SIZE;
+
+    tree_start_addresses(0) <= TREE_START_ADDRESS;
+    vLastStart              := TREE_START_ADDRESS;
+    for I in 1 to TREE_ROOTS-1 loop
+      vLastStart              := std_logic_vector(unsigned(vLastStart) + to_unsigned(vTreeSize, vLastStart'length));
+      tree_start_addresses(I) <= vLastStart;
+    end loop;
+  end process start_addresses;
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        TreeLevelxDP        <= (others => '0');
+        TreeLevelAddressxDP <= (others => '0');
+      else
+        TreeLevelxDP        <= TreeLevelxDN;
+        TreeLevelAddressxDP <= TreeLevelAddressxDN;
+      end if;
+    end if;
+  end process regs;
+
+  comb : process(s_request, request_ready, TreeLevelxDP, TreeLevelAddressxDP, tree_start_addresses) is
+    variable vTreeLevelAddress : UAddressType;
+    variable vDataNodeNum      : UAddressType;
+    variable vTreeNodeOffset   : UAddressType;
+    variable vTreeNodeAddress  : UAddressType;
+    variable vRootNumber       : unsigned(log2_ceil(TREE_ROOTS)-1 downto 0);
+  begin
+    TreeLevelxDN        <= TreeLevelxDP;
+    TreeLevelAddressxDN <= TreeLevelAddressxDP;
+
+    request         <= StreamType_Default;
+    s_request_ready <= '0';
+    root_number     <= (others => '0');
+    root_update     <= '0';
+
+    vTreeLevelAddress := unsigned(TreeLevelAddressxDP);
+
+    if s_request.valid = '1' then
+      vRootNumber := slice((unsigned(s_request.block_address) - unsigned(MEMORY_START_ADDRESS)) / IND_TREE_SIZE, vRootNumber'left, 0);
+
+      if TreeLevelxDP = DATA_NODE_LEVEL then
+        request             <= s_request;
+        TreeLevelAddressxDN <= (others => '0');
+        s_request_ready     <= request_ready;
+
+        if request_ready = '1' then
+          TreeLevelxDN <= (others => '0');
+        end if;
+      else
+        if TreeLevelxDP = 0 then
+          request.request_type <= REQ_TYPE_TREE_ROOT;
+          vTreeLevelAddress    := unsigned(tree_start_addresses(to_integer(vRootNumber)));
+          root_number          <= std_logic_vector(vRootNumber);
+          root_update          <= not(s_request.read);
+        else
+          request.request_type <= REQ_TYPE_TREE;
+        end if;
+
+        vDataNodeNum     := (unsigned(s_request.block_address) - unsigned(MEMORY_START_ADDRESS) - uzextend(vRootNumber * IND_TREE_SIZE, ADDRESS_WIDTH)) / DATA_BLOCK_SIZE;
+        vTreeNodeOffset  := vDataNodeNum srl TREE_ARITY_BITS*(TREE_LEVELS-1-to_integer(TreeLevelxDP));
+        vTreeNodeOffset  := slice(vTreeNodeOffset * TREE_DATA_SIZE, vTreeNodeOffset'left, 0);
+        vTreeNodeAddress := vTreeLevelAddress + vTreeNodeOffset;
+
+        request.block_address <= std_logic_vector(vTreeNodeAddress);
+        request.address       <= std_logic_vector(vTreeNodeAddress);
+        request.id            <= s_request.id;
+        request.len           <= std_logic_vector(to_unsigned(TREE_DATA_SIZE/4-1, request.len'length));
+        request.size          <= "010";
+        request.burst         <= BURST_TYPE_INCREMENTAL;
+        request.cache         <= x"0";
+        request.read          <= s_request.read;
+        request.last_request  <= '0';
+        request.valid         <= '1';
+
+        if (request_ready = '1') then
+          TreeLevelAddressxDN <= std_logic_vector(vTreeLevelAddress + (to_unsigned(TREE_DATA_SIZE, ADDRESS_WIDTH) sll TREE_ARITY_BITS*to_integer(TreeLevelxDP+1)));
+          TreeLevelxDN        <= TreeLevelxDP + 1;
+        end if;
+      end if;
+    end if;
+  end process comb;
+
+
+  synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 2
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => request.valid,
+      in_ready => request_ready,
+
+      out_valid(0)  => sync_master_valid,
+      out_valid(1)  => root_number_valid,
+      out_active(0) => '1',
+      out_active(1) => tree_root_request,
+      out_ready(0)  => m_request_ready,
+      out_ready(1)  => root_number_ready
+      );
+
+  tree_root_request <= '1' when request.request_type = REQ_TYPE_TREE_ROOT else '0';
+
+  output : process(request, sync_master_valid) is
+  begin
+    m_request <= StreamType_Default;
+
+    if sync_master_valid = '1' then
+      m_request <= request;
+    end if;
+  end process output;
+
+end behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/stream_axi_wrap_burst_cache.vhd b/fpga/src/memsec/hdl/framework/stream/stream_axi_wrap_burst_cache.vhd
new file mode 100644
index 0000000..614061d
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/stream_axi_wrap_burst_cache.vhd
@@ -0,0 +1,224 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Reorder buffer to implement AXI wrapping bursts.
+--!
+--! Wrapping bursts are typically issued to speed up cache refills.
+--! Unfortunately, processing data out of order is not possible as soon as
+--! stronger cryptographic modes are used. Reordering data for small bursts
+--! within the pipeline provides a compromise between generality and performance.
+entity stream_axi_wrap_burst_cache is
+  generic(
+    DATASTREAM_WIDTH     : integer := 32;
+    CACHE_SIZE           : integer := 256;
+    NARROW_BURST_SUPPORT : boolean := false
+    );
+  port(
+    -- Ports of Axi Slave Bus Interface S_AXI
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_axi_wrap_burst_cache;
+
+architecture behavioral of stream_axi_wrap_burst_cache is
+  constant CACHE_ELEMENTS         : integer := CACHE_SIZE/DATASTREAM_WIDTH;
+  constant CACHE_ELEMENTS_BITS    : integer := log2_ceil(CACHE_ELEMENTS);
+  constant CACHE_SIZE_BITS        : integer := log2_ceil(CACHE_SIZE/8);
+  constant DATASTREAM_WIDTH_BYTES : integer := DATASTREAM_WIDTH/8;
+  constant DATASTREAM_WIDTH_BITS  : integer := log2_ceil(DATASTREAM_WIDTH_BYTES);
+  type CacheArrayType is array (CACHE_ELEMENTS-1 downto 0) of std_logic_vector(DATASTREAM_WIDTH-1 downto 0);
+  type CacheState is array (CACHE_ELEMENTS-1 downto 0) of std_logic;
+
+  signal CachexDP, CachexDN                   : CacheArrayType;
+  signal CacheStatexDP, CacheStatexDN         : CacheState;
+  signal CachedElementsxDP, CachedElementsxDN : std_logic_vector(CACHE_ELEMENTS_BITS downto 0);
+  signal ReadIndexxDP, ReadIndexxDN           : std_logic_vector(CACHE_ELEMENTS_BITS-1 downto 0);
+  signal CachingActivexDP, CachingActivexDN   : std_logic;
+  signal StreamxDP, StreamxDN                 : StreamType;
+  signal CachedReqLenxDP, CachedReqLenxDN     : std_logic_vector(CACHE_ELEMENTS_BITS downto 0);
+  signal CacheIdxMaskxDP, CacheIdxMaskxDN     : std_logic_vector(CACHE_ELEMENTS_BITS-1 downto 0);
+
+  signal cache_input, cache_output             : StreamType;
+  signal cache_input_ready, cache_output_ready : std_logic;
+  signal cached_req_len                        : std_logic_vector(CACHE_ELEMENTS_BITS downto 0);
+  signal cache_idx_mask                        : std_logic_vector(CACHE_ELEMENTS_BITS-1 downto 0);
+
+  signal caching_active : std_logic;
+
+  signal s_request_len_bytes : unsigned(s_request.len'length+1 downto 0);
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        CachexDP          <= (others => (others => '0'));
+        CacheStatexDP     <= (others => '0');
+        ReadIndexxDP      <= (others => '0');
+        StreamxDP         <= StreamType_default;
+        CachingActivexDP  <= '0';
+        CachedElementsxDP <= (others => '0');
+        CachedReqLenxDP   <= (others => '0');
+        CacheIdxMaskxDP   <= (others => '0');
+      else
+        CachexDP          <= CachexDN;
+        CacheStatexDP     <= CacheStatexDN;
+        ReadIndexxDP      <= ReadIndexxDN;
+        StreamxDP         <= StreamxDN;
+        CachingActivexDP  <= CachingActivexDN;
+        CachedElementsxDP <= CachedElementsxDN;
+        CachedReqLenxDP   <= CachedReqLenxDN;
+        CacheIdxMaskxDP   <= CacheIdxMaskxDN;
+      end if;
+    end if;
+  end process regs;
+
+  s_request_len_bytes <= uaxi_bytes_len(s_request.len, s_request.size, s_request_len_bytes'length);
+
+  caching_state : process (CachingActivexDP, CachedReqLenxDP, CacheIdxMaskxDP, s_request, s_request_len_bytes) is
+    variable v_request_len : unsigned(s_request.len'length+2 downto 0);
+  begin
+    caching_active <= CachingActivexDP;
+    cached_req_len <= CachedReqLenxDP;
+    cache_idx_mask <= CacheIdxMaskxDP;
+    if NARROW_BURST_SUPPORT = true then
+      v_request_len := unsigned('0' & s_request_len_bytes)+1;
+      if CachingActivexDP = '0' then
+        cache_idx_mask <= std_logic_vector(s_request_len_bytes(CACHE_SIZE_BITS-1 downto DATASTREAM_WIDTH_BITS));
+        cached_req_len <= std_logic_vector(v_request_len(CACHE_SIZE_BITS downto DATASTREAM_WIDTH_BITS));
+      end if;
+      if s_request.burst = BURST_TYPE_WRAPPING then
+        -- burst always have length 2^x, no further check considered!
+        caching_active <= '1';
+      end if;
+    else
+      if s_request.burst = BURST_TYPE_WRAPPING and s_request_len_bytes = "000011111" then
+        caching_active <= '1';
+      end if;
+    end if;
+  end process caching_state;
+
+  mux : process(s_request, m_request_ready, cache_input, cache_output, cache_input_ready, cache_output_ready, caching_active) is
+  begin
+    cache_output_ready <= m_request_ready;
+    cache_input        <= s_request;
+    if caching_active = '1' then
+      m_request       <= cache_output;
+      s_request_ready <= cache_input_ready;
+    else
+      m_request       <= s_request;
+      s_request_ready <= m_request_ready;
+    end if;
+  end process mux;
+
+  cache : process (cache_output_ready, cache_input, caching_active, CachexDP, CacheStatexDP, ReadIndexxDP, StreamxDP, CachingActivexDP, CachedElementsxDP,
+                   CachedReqLenxDP, cached_req_len, CacheIdxMaskxDP, cache_idx_mask) is
+    variable cache_index         : integer;
+    variable cache_offset        : unsigned(CACHE_ELEMENTS_BITS-1 downto 0);
+    variable read_index          : integer;
+    variable read_index_unsigned : unsigned(CACHE_ELEMENTS_BITS-1 downto 0);
+    variable virt_address        : integer;
+    variable cache_ready         : std_logic;
+    variable cache_filled        : std_logic;
+  begin
+    ReadIndexxDN      <= ReadIndexxDP;
+    CachexDN          <= CachexDP;
+    CacheStatexDN     <= CacheStatexDP;
+    StreamxDN         <= StreamxDP;
+    CachingActivexDN  <= CachingActivexDP;
+    CachedElementsxDN <= CachedElementsxDP;
+    CachedReqLenxDN   <= CachedReqLenxDP;
+    CacheIdxMaskxDN   <= CacheIdxMaskxDP;
+
+    cache_input_ready  <= '0';
+    cache_output       <= StreamxDP;
+    cache_output.valid <= '0';
+
+    if caching_active = '1' and
+      ((NARROW_BURST_SUPPORT = true and CachedElementsxDP /= cached_req_len) or
+       (NARROW_BURST_SUPPORT = false and to_integer(unsigned(CachedElementsxDP)) /= CACHE_ELEMENTS)) then
+      if cache_input.valid = '1' then
+
+        if NARROW_BURST_SUPPORT = false then
+          cache_index := to_integer(unsigned(cache_input.virt_address(CACHE_SIZE_BITS-1 downto DATASTREAM_WIDTH_BITS)));
+        else
+          cache_index := to_integer(unsigned(cache_input.virt_address(CACHE_SIZE_BITS-1 downto DATASTREAM_WIDTH_BITS) and cache_idx_mask));  -- mod cached_req_len
+        end if;
+
+        CachingActivexDN <= '1';
+        if CachingActivexDP = '0' then
+          CachedReqLenxDN        <= cached_req_len;
+          CacheIdxMaskxDN        <= cache_idx_mask;
+          StreamxDN              <= cache_input;
+          StreamxDN.last_request <= '1';
+        end if;
+        StreamxDN.error <= cache_input.error;
+
+        CachexDN(cache_index)      <= cache_input.data(DATASTREAM_WIDTH-1 downto 0);
+        CacheStatexDN(cache_index) <= '1';
+        CachedElementsxDN          <= std_logic_vector(unsigned(CachedElementsxDP)+1);
+
+        cache_input_ready <= '1';
+      end if;
+    end if;
+
+    if CachingActivexDP = '1' then
+      cache_offset := unsigned(StreamxDP.address(CACHE_SIZE_BITS-1 downto DATASTREAM_WIDTH_BITS));
+      if NARROW_BURST_SUPPORT = false then
+        read_index := to_integer(unsigned(ReadIndexxDP)+cache_offset) mod CACHE_ELEMENTS;
+      else
+        read_index := to_integer(unsigned(std_logic_vector(unsigned(ReadIndexxDP)+cache_offset) and CacheIdxMaskxDP));  -- mod CachedReqLenxDP;        
+      end if;
+
+      if CacheStatexDP(read_index) = '1' then
+        cache_output.data         <= (DATASTREAM_DATA_WIDTH-1 downto DATASTREAM_WIDTH => '0') & CachexDP(read_index);
+        cache_output.virt_address <= (others                                          => '0');
+        cache_output.valid        <= '1';
+        if cache_output_ready = '1' then
+          CacheStatexDN(read_index) <= '0';
+          read_index_unsigned       := unsigned(ReadIndexxDP) + 1;
+          ReadIndexxDN              <= std_logic_vector(read_index_unsigned);
+          if (NARROW_BURST_SUPPORT = false and to_integer(read_index_unsigned) = 0) or
+            (NARROW_BURST_SUPPORT = true and to_integer(read_index_unsigned) = to_integer(unsigned(CachedReqLenxDP(CACHE_ELEMENTS_BITS-1 downto 0)))) then
+            CachingActivexDN  <= '0';
+            ReadIndexxDN      <= (others => '0');
+            CachedElementsxDN <= (others => '0');
+            CachedReqLenxDN   <= (others => '0');
+            CacheIdxMaskxDN   <= (others => '0');
+          end if;
+        end if;
+      end if;
+    end if;
+
+  end process cache;
+
+end behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/stream_beat_remover.vhd b/fpga/src/memsec/hdl/framework/stream/stream_beat_remover.vhd
new file mode 100644
index 0000000..ab58755
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/stream_beat_remover.vhd
@@ -0,0 +1,87 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Drops a configurable amount of beats in each transaction.
+entity stream_beat_remover is
+  generic(
+    DROP_POSITION : integer := 0;
+    DROP_COUNT    : integer := 1
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_beat_remover;
+
+architecture behavioral of stream_beat_remover is
+  signal BlockCounterxDP, BlockCounterxDN : std_logic_vector(s_request.len'length-1 downto 0);
+  signal request_ready                    : std_logic;
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        BlockCounterxDP <= (others => '0');
+      else
+        BlockCounterxDP <= BlockCounterxDN;
+      end if;
+    end if;
+  end process regs;
+
+  comb : process(s_request, m_request_ready, request_ready, BlockCounterxDP) is
+    variable vBlockCounter : integer;
+  begin
+    BlockCounterxDN <= BlockCounterxDP;
+
+    -- forward request by default
+    m_request     <= s_request;
+    request_ready <= m_request_ready;
+
+    vBlockCounter                                       := to_integer(unsigned(BlockCounterxDP));
+    -- drop the input block if the drop position is reached
+    if vBlockCounter >= DROP_POSITION and vBlockCounter <= (DROP_POSITION+DROP_COUNT-1) then
+      m_request     <= StreamType_default;
+      request_ready <= '1';
+    end if;
+
+    if s_request.valid = '1' and request_ready = '1' then
+      if unsigned(s_request.block_len) = 0 then
+        BlockCounterxDN <= (others => '0');
+      else
+        BlockCounterxDN <= std_logic_vector(unsigned(BlockCounterxDP) + 1);
+      end if;
+    end if;
+  end process comb;
+
+  s_request_ready <= request_ready;
+
+end behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/stream_data_block_filter.vhd b/fpga/src/memsec/hdl/framework/stream/stream_data_block_filter.vhd
new file mode 100644
index 0000000..af41ebb
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/stream_data_block_filter.vhd
@@ -0,0 +1,320 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Filters the internal stream according to the original request.
+--!
+--! Only blocks which are necessary to answer the original request get
+--! forwarded. All other data beats are simply dropped.
+entity stream_data_block_filter is
+  generic(
+    DATASTREAM_OUT_WIDTH : integer := 32;
+    REGISTERED           : boolean := false;
+    TREE_FILTER          : boolean := false;  -- passthrough tree nodes
+    DATA_LEAF_FILTER     : boolean := false;  -- passthrough data leaf nodes
+    ERROR_ACCUMULATION   : boolean := false
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_data_block_filter;
+
+architecture behavioral of stream_data_block_filter is
+  constant TRANSLATION_FACTOR_BIT  : integer := log2_ceil(DATASTREAM_DATA_WIDTH/DATASTREAM_OUT_WIDTH);
+  constant DATASTREAM_ADDR_BIT     : integer := log2_ceil(DATASTREAM_DATA_WIDTH/8);
+  constant DATASTREAM_OUT_ADDR_BIT : integer := log2_ceil(DATASTREAM_OUT_WIDTH/8);
+
+  type tASizeToMaskLUT is array (0 to 2**2 - 1) of std_logic_vector(1 downto 0);
+  constant ASIZE_MASKING_LUT : tASizeToMaskLUT := (
+    0 => "11",
+    1 => "10",
+    2 => "00",
+    3 => "00");
+
+  signal out_block                        : std_logic_vector(DATASTREAM_OUT_WIDTH-1 downto 0);
+  signal out_block_addr                   : std_logic_vector(TRANSLATION_FACTOR_BIT-1 downto 0);
+  signal out_block_valid, out_block_ready : std_logic;
+
+  signal in_block                       : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal in_block_valid, in_block_ready : std_logic;
+
+  signal start_address : UAddressType;
+  signal end_address   : UAddressType;
+  signal delayed_start_address : UAddressType;
+  signal delayed_end_address   : UAddressType;
+
+  signal StreamxDP, StreamxDN       : StreamType;
+  signal InitReadxDBP, InitReadxDBN : std_logic;
+  signal ErrorAccxDP, ErrorAccxDN   : std_logic;
+  signal StartAddrxDP, StartAddrxDN : AddressType;
+  signal EndAddrxDP, EndAddrxDN     : AddressType;
+
+  signal delayed_request, filtered_request : StreamType;
+  signal filtered_request_ready            : std_logic;
+  signal address_exceeded                  : std_logic;
+begin
+  assert DATASTREAM_DATA_WIDTH >= DATASTREAM_OUT_WIDTH and DATASTREAM_DATA_WIDTH mod DATASTREAM_OUT_WIDTH = 0
+    report "DATASTREAM_DATA_WIDTH has to be equal or a multiple of DATASTREAM_OUT_WIDTH." severity error;
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        StreamxDP    <= StreamType_default;
+        ErrorAccxDP  <= '0';
+        InitReadxDBP <= '0';
+        StartAddrxDP <= (others => '0');
+        EndAddrxDP   <= (others => '0');
+      else
+        StreamxDP    <= StreamxDN;
+        ErrorAccxDP  <= ErrorAccxDN;
+        InitReadxDBP <= InitReadxDBN;
+        StartAddrxDP <= StartAddrxDN;
+        EndAddrxDP   <= EndAddrxDN;
+      end if;
+    end if;
+  end process regs;
+
+  -- Calculates the start and the end address of the transfer from s_request.
+  address_comp : process (s_request)
+    variable vSize         : USizeType;
+    variable vTmp          : AddressType;
+    variable vStartAddress : UAddressType;
+    variable vEndAddress   : UAddressType;
+    variable vWrapBoundary : UAddressType;
+    variable vLenBytes     : UByteLenType;
+  begin
+    -- Compute start and end address for incremental bursts
+    vSize                           := shift_left((vSize'left downto 1 => '0') & '1', to_integer(unsigned(s_request.size)));
+    vTmp                            := s_request.address(ADDRESS_WIDTH - 1 downto 2) & (s_request.address(1 downto 0) and ASIZE_MASKING_LUT(to_integer(unsigned(s_request.size))));
+    vStartAddress                   := unsigned(vTmp);
+    vTmp                            := (ADDRESS_WIDTH-1 downto s_request.len'length => '0') & s_request.len;
+    vEndAddress                     := vStartAddress + (unsigned(vTmp) sll to_integer(unsigned(s_request.size)));
+    start_address                   <= vStartAddress;
+    end_address                     <= vEndAddress;
+
+    -- Handle wrapping bursts
+    if s_request.burst = BURST_TYPE_WRAPPING then
+      vLenBytes := uaxi_bytes_len(s_request.len, s_request.size, vLenBytes'length);
+
+      vTmp                                    := (others => '1');
+      vTmp(s_request.len'length + 1 downto 0) := not(std_logic_vector(vLenBytes));
+      vWrapBoundary                           := vStartAddress and unsigned(vTmp);
+      vTmp                                    := (ADDRESS_WIDTH-1 downto s_request.len'length => '0') & s_request.len;
+      vEndAddress                             := vWrapBoundary + (unsigned(vTmp) sll to_integer(unsigned(s_request.size)));
+
+      start_address <= vWrapBoundary;
+      end_address   <= vEndAddress;
+    end if;
+  end process address_comp;
+
+  input_filter : process (s_request, filtered_request_ready, end_address, start_address)
+    variable vAddress : UAddressType;
+  begin
+    -- Defaults
+    s_request_ready  <= filtered_request_ready;
+    filtered_request <= s_request;
+    address_exceeded <= '0';
+
+    if (s_request.valid = '1') then
+      -- Metadata filter
+      if s_request.metadata = '1' then
+        if ERROR_ACCUMULATION and to_integer(unsigned(s_request.block_len)) = 0 then
+          s_request_ready <= filtered_request_ready;
+        else
+          filtered_request.valid <= '0';
+          s_request_ready        <= '1';
+        end if;
+      end if;
+      -- Tree Node Filter
+      if TREE_FILTER = true and s_request.request_type = REQ_TYPE_DATA then
+        filtered_request.valid <= '0';
+        s_request_ready        <= '1';
+      end if;
+      -- Data Node Filter
+      if DATA_LEAF_FILTER = true and (s_request.request_type = REQ_TYPE_TREE or
+                                      s_request.request_type = REQ_TYPE_TREE_ROOT) then
+        filtered_request.valid <= '0';
+        s_request_ready        <= '1';
+      end if;
+      -- Address filter
+      if ERROR_ACCUMULATION = false or
+        not(to_integer(unsigned(s_request.block_len)) = 0 and s_request.metadata = '1') then
+        vAddress                                  := unsigned(s_request.virt_address);
+        if (vAddress + (DATASTREAM_DATA_WIDTH/8)) <= start_address then
+          filtered_request.valid <= '0';
+          s_request_ready        <= '1';
+        end if;
+        if vAddress > end_address then
+          filtered_request.valid <= '0';
+          s_request_ready        <= '1';
+          address_exceeded       <= not(s_request.metadata);
+        end if;
+      end if;
+    end if;
+  end process input_filter;
+
+  error_comb : process(filtered_request, delayed_request, s_request, StreamxDP, ErrorAccxDP, StartAddrxDP, EndAddrxDP, InitReadxDBP,
+                       address_exceeded, in_block_ready, start_address, end_address) is
+  begin
+    -- Register defaults
+    StreamxDN    <= StreamxDP;
+    ErrorAccxDN  <= ErrorAccxDP;
+    InitReadxDBN <= InitReadxDBP;
+    EndAddrxDN   <= EndAddrxDP;
+    StartAddrxDN <= StartAddrxDP;
+
+    in_block_valid <= filtered_request.valid;
+    in_block       <= filtered_request.data;
+
+    delayed_start_address  <= unsigned(StartAddrxDP);
+    delayed_end_address    <= unsigned(EndAddrxDP);
+    delayed_request        <= StreamxDP;
+    filtered_request_ready <= in_block_ready;
+
+    if ERROR_ACCUMULATION then
+      if s_request.valid = '1' then
+        ErrorAccxDN <= ErrorAccxDP or s_request.error;  -- errors are accumulated
+      end if;
+    end if;
+
+    -- TODO This code is quite hard to read. Think about rewriting it or,
+    --      at the very least, some comments are needed...
+    if ERROR_ACCUMULATION and filtered_request.request_type = REQ_TYPE_DATA then
+      -- Delay stage
+      if InitReadxDBP = '0' then
+        if filtered_request.valid = '1' then
+          StreamxDN              <= filtered_request;
+          StartAddrxDN           <= std_logic_vector(start_address);
+          EndAddrxDN             <= std_logic_vector(end_address);
+          filtered_request_ready <= '1';
+          InitReadxDBN           <= '1';
+        end if;
+      else
+        if address_exceeded = '1' then
+          delayed_request.valid  <= '0';
+          filtered_request_ready <= '1';
+        else
+          delayed_request.valid <= filtered_request.valid;
+          if in_block_ready = '1' then
+            StreamxDN <= filtered_request;
+            StartAddrxDN <= std_logic_vector(start_address);
+            EndAddrxDN   <= std_logic_vector(end_address);
+          end if;
+        end if;
+      end if;
+      if to_integer(unsigned(s_request.block_len)) = 0 and s_request.metadata = '1' and s_request.valid = '1' then
+        delayed_request.valid <= '1';
+      end if;
+
+      -- Error and Delay Stage reset
+      if to_integer(unsigned(s_request.block_len)) = 0 and s_request.metadata = '1' and s_request.valid = '1' then
+        -- the tag information
+        if s_request.last_request = '1' then
+          if in_block_ready = '1' then
+            ErrorAccxDN <= '0';
+          end if;
+        end if;
+        if in_block_ready = '1' then
+          StreamxDN    <= StreamType_default;
+          StartAddrxDN <= (others => '0');
+          EndAddrxDN   <= (others => '0');
+          InitReadxDBN <= '0';
+        end if;
+      end if;
+
+      in_block       <= delayed_request.data;
+      in_block_valid <= delayed_request.valid;
+    else
+      delayed_start_address  <= start_address;
+      delayed_end_address    <= end_address;
+      delayed_request <= filtered_request;
+      in_block        <= filtered_request.data;
+      in_block_valid  <= filtered_request.valid;
+    end if;
+  end process;
+
+  data_serialization : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => DATASTREAM_OUT_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_last         => '0',
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+
+      in_data         => in_block,
+      in_valid        => in_block_valid,
+      in_ready        => in_block_ready,
+
+      out_data         => out_block,
+      out_field_offset => out_block_addr,
+      out_valid        => out_block_valid,
+      out_ready        => out_block_ready
+      );
+
+  output_filter : process(delayed_request, m_request_ready, out_block, out_block_addr,
+                          out_block_valid, out_block_ready, delayed_start_address, delayed_end_address, ErrorAccxDP)
+    variable vVirtAddress     : UAddressType;
+    variable vVirtAddressSL   : AddressType;
+  begin
+    m_request               <= delayed_request;
+    m_request.block_len     <= (others => '0');
+    m_request.block_address <= (others => '0');
+    m_request.valid         <= out_block_valid;
+    m_request.error         <= s_request.error;
+
+    out_block_ready <= m_request_ready;
+
+    -- Adapt output addresses and lengths
+    vVirtAddressSL         := delayed_request.virt_address(ADDRESS_WIDTH-1 downto DATASTREAM_ADDR_BIT) & out_block_addr & zeros(DATASTREAM_OUT_ADDR_BIT);
+    vVirtAddress           := unsigned(vVirtAddressSL);
+    m_request.virt_address <= vVirtAddressSL;
+
+    -- Write output data
+    m_request.data <= zeros(DATASTREAM_DATA_WIDTH - DATASTREAM_OUT_WIDTH) & out_block;
+
+    -- Filter according to addresses
+    if ((vVirtAddress + (DATASTREAM_OUT_WIDTH/8)) <= delayed_start_address or
+        vVirtAddress > delayed_end_address) then
+      m_request.valid <= '0';
+      out_block_ready <= '1';
+    end if;
+
+  end process output_filter;
+
+end behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/stream_data_filter_to_stdlogic.vhd b/fpga/src/memsec/hdl/framework/stream/stream_data_filter_to_stdlogic.vhd
new file mode 100644
index 0000000..2815b73
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/stream_data_filter_to_stdlogic.vhd
@@ -0,0 +1,141 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Filters the internal stream according to the original request.
+--!
+--! Only blocks which are necessary to answer the original request get
+--! forwarded. All other data beats are simply dropped.
+entity stream_data_filter_to_stdlogic is
+  generic(
+    DATASTREAM_OUT_WIDTH : integer := 64;
+    TREE_FILTER          : boolean := false;
+    DATA_LEAF_FILTER     : boolean := false
+    );
+  port(
+    -- Ports of Axi Slave Bus Interface S_AXI
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request             : out std_logic_vector(DATASTREAM_OUT_WIDTH-1 downto 0);
+    m_request_address     : out std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+    m_request_is_read     : out std_logic;
+    m_request_read_valid  : out std_logic;
+    m_request_read_ready  : in  std_logic;
+    m_request_write_valid : out std_logic;
+    m_request_write_ready : in  std_logic;
+    m_request_cache_valid : out std_logic;
+    m_request_cache_ready : in  std_logic
+    );
+end stream_data_filter_to_stdlogic;
+
+architecture structural of stream_data_filter_to_stdlogic is
+  signal request : StreamType;
+
+  signal m_request_valid, m_request_ready, req_write_active : std_logic;
+  signal request_ready                                      : std_logic;
+
+  signal request_field_offset : std_logic_vector(offset_width(DATASTREAM_DATA_WIDTH, DATASTREAM_OUT_WIDTH)-1 downto 0);
+  signal output_field_offset  : std_logic_vector(offset_width(DATASTREAM_DATA_WIDTH, DATASTREAM_OUT_WIDTH)-1 downto 0);
+  signal last_input           : std_logic;
+begin
+
+  data_filter : entity work.stream_data_block_filter
+    generic map (
+      DATASTREAM_OUT_WIDTH => DATASTREAM_DATA_WIDTH,
+      TREE_FILTER          => TREE_FILTER,
+      DATA_LEAF_FILTER     => DATA_LEAF_FILTER
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      s_request       => s_request,
+      s_request_ready => s_request_ready,
+
+      m_request       => request,
+      m_request_ready => request_ready
+      );
+
+  request_field_offset <= slice_bits(request.virt_address, DATASTREAM_DATA_WIDTH/8, DATASTREAM_OUT_WIDTH/8);
+  last_input           <= '1' when request_field_offset = ones(request_field_offset'length) else '0';
+
+  rate_conversion : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => DATASTREAM_DATA_WIDTH,
+      OUT_DATA_WIDTH => DATASTREAM_OUT_WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => request_field_offset,
+      in_field_len    => (others => '1'),
+
+      in_last  => last_input,
+      in_data  => request.data,
+      in_valid => request.valid,
+      in_ready => request_ready,
+
+      out_data         => m_request,
+      out_last         => open,
+      out_field_offset => output_field_offset,
+      out_field_len    => open,
+      out_valid        => m_request_valid,
+      out_ready        => m_request_ready
+      );
+
+  m_request_address <= set_bits(request.address, output_field_offset, DATASTREAM_DATA_WIDTH/8, DATASTREAM_OUT_WIDTH/8);
+  m_request_is_read <= request.read;
+
+  synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 3
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => m_request_valid,
+      in_ready => m_request_ready,
+
+      out_valid(0)  => m_request_read_valid,
+      out_valid(1)  => m_request_write_valid,
+      out_valid(2)  => m_request_cache_valid,
+      out_active(0) => '1',
+      out_active(1) => req_write_active,
+      out_active(2) => '1',
+      out_ready(0)  => m_request_read_ready,
+      out_ready(1)  => m_request_write_ready,
+      out_ready(2)  => m_request_cache_ready
+      );
+
+  req_write_active <= not(request.read);
+
+end structural;
diff --git a/fpga/src/memsec/hdl/framework/stream/stream_data_modifier.vhd b/fpga/src/memsec/hdl/framework/stream/stream_data_modifier.vhd
new file mode 100644
index 0000000..4c1d77c
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/stream_data_modifier.vhd
@@ -0,0 +1,159 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Replaces data within the stream through externally specified data.
+--!
+--! Provides the foundation for basically all stream modification operations.
+--! Various types of addressing (virtual, physical, beat number) can be used to
+--! match the modification positions. Furthermore, byte strobes are supported.
+entity stream_data_modifier is
+  generic(
+    -- 0 .. virtual address
+    -- 1 .. physical/block address
+    -- 2 .. block number
+    MATCH_TYPE      : integer := 0;
+    IGNORE_METADATA : boolean := true;
+    IGNORE_TREE_REQ : boolean := true;
+    IGNORE_DATA_REQ : boolean := false
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_data               : in  BlockStreamType;
+    s_data_address       : in  AddressType;
+    s_data_address_valid : in  std_logic;
+    s_data_ready         : out std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_data_modifier;
+
+architecture arch_imp of stream_data_modifier is
+  signal data_was_lastxDP, data_was_lastxDN : std_logic;
+  signal block_counterxDP, block_counterxDN : std_logic_vector(AXI_LEN_WIDTH-1 downto 0);
+
+  -- helper signals to make the outputs readable
+  signal data_ready   : std_logic;
+  signal req_ready    : std_logic;
+  signal modified_req : StreamType;
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        data_was_lastxDP <= '0';
+        block_counterxDP <= (others => '0');
+      else
+        data_was_lastxDP <= data_was_lastxDN;
+        block_counterxDP <= block_counterxDN;
+      end if;
+    end if;
+  end process regs;
+
+  block_ctr : process(block_counterxDP, req_ready, s_request.block_len,
+                      s_request.valid) is
+  begin
+    block_counterxDN <= block_counterxDP;
+
+    if s_request.valid = '1' and req_ready = '1' then
+      if unsigned(s_request.block_len) = 0 then
+        block_counterxDN <= (others => '0');
+      else
+        block_counterxDN <= std_logic_vector(unsigned(block_counterxDP) + 1);
+      end if;
+    end if;
+  end process block_ctr;
+
+  work : process(block_counterxDP, data_ready, data_was_lastxDP,
+                 m_request_ready, modified_req, req_ready, s_data, s_request,
+                 s_data_address_valid, s_data_address) is
+    variable current_address : AddressType;
+  begin
+    data_was_lastxDN <= data_was_lastxDP;
+    modified_req     <= StreamType_default;
+    data_ready       <= '0';
+    req_ready        <= '0';
+
+    current_address := (others => '0');
+    case MATCH_TYPE is
+      when 0 =>
+        current_address := s_request.virt_address;
+      when 1 =>
+        current_address := s_request.block_address;
+      when 2 =>
+        current_address := zeros(ADDRESS_WIDTH - AXI_LEN_WIDTH) & block_counterxDP;
+      when others =>
+        assert false report "unhandled generic case" severity failure;
+    end case;
+
+    if s_data.valid = '1' and s_data.last = '1' and data_ready = '1' then
+      data_was_lastxDN <= '1';
+    end if;
+
+    if s_request.valid = '1' then
+      modified_req       <= s_request;
+      modified_req.valid <= '0';
+
+      if req_ready = '1' and unsigned(s_request.block_len) = 0 then
+        data_was_lastxDN <= '0';
+      end if;
+
+      -- check if the data modification can be performed
+      if (IGNORE_METADATA and s_request.metadata = '1') or
+        (IGNORE_TREE_REQ and (s_request.request_type = REQ_TYPE_TREE_ROOT or s_request.request_type = REQ_TYPE_TREE)) or
+        (IGNORE_DATA_REQ and s_request.request_type = REQ_TYPE_DATA) or
+        data_was_lastxDP = '1' or
+        (s_data_address_valid = '1' and unsigned(current_address) < unsigned(s_data_address)) then
+        -- The block from the request is forwarded without modification.
+        -- This happens for data blocks before and after the actual write.
+        modified_req.valid <= '1';
+        req_ready          <= m_request_ready;
+      elsif s_data.valid = '1' and s_data_address_valid = '1' and unsigned(current_address) = unsigned(s_data_address) then
+        -- The addresses of the request matches the address of the data input.
+        for I in 0 to DATASTREAM_DATA_WIDTH/8 - 1 loop
+          if s_data.strobes(I) = '1' then
+            modified_req.data(I*8+7 downto I*8) <= s_data.data(I*8+7 downto I*8);
+          end if;
+        end loop;
+        modified_req.valid <= '1';
+        data_ready         <= m_request_ready;
+        req_ready          <= m_request_ready;
+      end if;
+
+    end if;
+
+    m_request       <= modified_req;
+    s_request_ready <= req_ready;
+    s_data_ready    <= data_ready;
+  end process work;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/stream/stream_fifo.vhd b/fpga/src/memsec/hdl/framework/stream/stream_fifo.vhd
new file mode 100644
index 0000000..4f95b60
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/stream_fifo.vhd
@@ -0,0 +1,97 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! FIFO for the internal stream type.
+entity stream_fifo is
+  generic(
+    WIDTH    : integer := 32;
+    ELEMENTS : integer := 1
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    in_data  : in  StreamType;
+    in_valid : in  std_logic;
+    in_ready : out std_logic;
+
+    out_data  : out StreamType;
+    out_valid : out std_logic;
+    out_ready : in  std_logic
+    );
+end stream_fifo;
+
+architecture arch_imp of stream_fifo is
+  type FifoArray is array(integer range <>) of StreamType;
+  signal FifoxDP, FifoxDN : FifoArray(ELEMENTS-1 downto 0);
+
+  signal IndexxDP, IndexxDN : std_logic_vector(log2_ceil(ELEMENTS) downto 0);
+
+begin
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        FifoxDP  <= (others => StreamType_default);
+        IndexxDP <= (others => '0');
+      else
+        FifoxDP  <= FifoxDN;
+        IndexxDP <= IndexxDN;
+      end if;
+    end if;
+  end process regs;
+
+  comb : process(in_data, in_valid, out_ready, FifoxDP, IndexxDP) is
+    variable vIndex : integer range 0 to ELEMENTS;
+  begin
+    FifoxDN  <= FifoxDP;
+    IndexxDN <= IndexxDP;
+
+    in_ready  <= '0';
+    out_valid <= '0';
+    out_data  <= FifoxDP(0);
+
+    vIndex := to_integer(unsigned(IndexxDP));
+    -- output
+    if vIndex > 0 then
+      out_valid <= '1';
+
+      if out_ready = '1' then
+        vIndex                       := vIndex - 1;
+        FifoxDN(ELEMENTS-2 downto 0) <= FifoxDP(ELEMENTS-1 downto 1);
+        FifoxDN(ELEMENTS-1)          <= StreamType_default;
+      end if;
+    end if;
+
+    if in_valid = '1' and vIndex < ELEMENTS then
+      FifoxDN(vIndex) <= in_data;
+      vIndex          := vIndex + 1;
+      in_ready        <= '1';
+    end if;
+
+    IndexxDN <= std_logic_vector(to_unsigned(vIndex, IndexxDP'length));
+  end process comb;
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/stream/stream_multi_register_stage.vhd b/fpga/src/memsec/hdl/framework/stream/stream_multi_register_stage.vhd
new file mode 100644
index 0000000..22abaf7
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/stream_multi_register_stage.vhd
@@ -0,0 +1,74 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Simple register stage for the internal stream type with configurable register count.
+entity stream_multi_register_stage is
+  generic(
+    REGISTERS : integer := 1
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    in_data  : in  StreamType;
+    in_valid : in  std_logic;
+    in_ready : out std_logic;
+
+    out_data  : out StreamType;
+    out_valid : out std_logic;
+    out_ready : in  std_logic
+    );
+end stream_multi_register_stage;
+
+architecture arch_imp of stream_multi_register_stage is
+  type HandshakeArrayType is array (REGISTERS downto 0) of std_logic;
+
+  signal streams        : StreamArrayType(REGISTERS downto 0);
+  signal readys, valids : HandshakeArrayType;
+begin
+  streams(0) <= in_data;
+  valids(0)  <= in_valid;
+  in_ready   <= readys(0);
+
+  regs : for I in 0 to REGISTERS-1 generate
+    r : entity work.stream_register_stage
+      port map (
+        clk    => clk,
+        resetn => resetn,
+
+        in_data  => streams(I),
+        in_valid => valids(I),
+        in_ready => readys(I),
+
+        out_data  => streams(I+1),
+        out_valid => valids(I+1),
+        out_ready => readys(I+1)
+        );
+  end generate regs;
+
+  out_data          <= streams(REGISTERS);
+  out_valid         <= valids(REGISTERS);
+  readys(REGISTERS) <= out_ready;
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/stream/stream_ready_synchronizer.vhd b/fpga/src/memsec/hdl/framework/stream/stream_ready_synchronizer.vhd
new file mode 100644
index 0000000..ee089e5
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/stream_ready_synchronizer.vhd
@@ -0,0 +1,96 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Synchronization block for the internal stream type.
+--!
+--! This block ensures that all consumers have acknowledged the reception of the
+--! block before the next one is accepted.
+entity stream_ready_synchronizer is
+  generic(
+    OUT_WIDTH : integer := 2;
+    REGISTERS : integer := 0
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_requests        : out StreamArrayType(OUT_WIDTH-1 downto 0);
+    m_requests_active : in  std_logic_vector(OUT_WIDTH-1 downto 0);
+    m_requests_ready  : in  std_logic_vector(OUT_WIDTH-1 downto 0)
+    );
+end stream_ready_synchronizer;
+
+architecture arch_imp of stream_ready_synchronizer is
+  signal reg_stream     : StreamType;
+  signal reg_ready      : std_logic;
+  signal readys, valids : std_logic_vector(OUT_WIDTH-1 downto 0);
+begin
+
+  reg_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => REGISTERS
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => s_request,
+      in_valid => s_request.valid,
+      in_ready => s_request_ready,
+
+      out_data  => reg_stream,
+      out_valid => open,
+      out_ready => reg_ready
+      );
+
+  synchronization : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => OUT_WIDTH
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_ready => reg_ready,
+      in_valid => reg_stream.valid,
+
+      out_ready  => readys,
+      out_active => m_requests_active,
+      out_valid  => valids
+      );
+
+  io : process(reg_stream, valids, m_requests_ready) is
+  begin
+    for I in 0 to OUT_WIDTH-1 loop
+      m_requests(I)       <= reg_stream;
+      m_requests(I).valid <= valids(I);
+      readys(I)           <= m_requests_ready(I);
+    end loop;
+  end process io;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/stream/stream_register_stage.vhd b/fpga/src/memsec/hdl/framework/stream/stream_register_stage.vhd
new file mode 100644
index 0000000..fc8fea3
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/stream_register_stage.vhd
@@ -0,0 +1,97 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Simple register stage for the internal stream type.
+--!
+--! Enabling the READY_BYPASS permits to operate the register without
+--! introducing idle cycles. However, as a consequence, a critical path across
+--! the ready line is not prevented.
+entity stream_register_stage is
+  generic(
+    READY_BYPASS : boolean := true;  --! permit to directly write the register when the output is read
+    REGISTERED   : boolean := true
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    in_data  : in  StreamType;
+    in_valid : in  std_logic;
+    in_ready : out std_logic;
+
+    out_data  : out StreamType;
+    out_valid : out std_logic;
+    out_ready : in  std_logic
+    );
+end stream_register_stage;
+
+architecture arch_imp of stream_register_stage is
+  signal dataxDP, dataxDN   : StreamType;
+  signal validxDP, validxDN : std_logic;
+
+begin
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        dataxDP  <= StreamType_default;
+        validxDP <= '0';
+      else
+        dataxDP  <= dataxDN;
+        validxDP <= validxDN;
+      end if;
+    end if;
+  end process regs;
+
+  control : process(dataxDP, in_data, in_valid, out_ready, validxDP) is
+  begin
+    dataxDN  <= dataxDP;
+    validxDN <= validxDP;
+
+    in_ready  <= out_ready;
+    out_valid <= in_valid;
+    out_data  <= in_data;
+
+    if REGISTERED then
+      in_ready <= '0';
+
+      -- reset the register when it was read
+      if validxDP = '1' and out_ready = '1' then
+        dataxDN  <= StreamType_default;
+        validxDN <= '0';
+      end if;
+
+      -- set the register when it was empty or when it is currently read
+      if in_valid = '1' and (validxDP = '0' or (READY_BYPASS and out_ready = '1')) then
+        dataxDN  <= in_data;
+        validxDN <= '1';
+        in_ready <= '1';
+      end if;
+
+      out_valid <= validxDP;
+      out_data  <= dataxDP;
+    end if;
+  end process control;
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/stream/stream_register_stage_fifo.vhd b/fpga/src/memsec/hdl/framework/stream/stream_register_stage_fifo.vhd
new file mode 100644
index 0000000..0ac4665
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/stream_register_stage_fifo.vhd
@@ -0,0 +1,155 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! FIFO for the internal stream type with two elements.
+--!
+--! The primary purpose of this two element FIFO is to provide an alternative
+--! to the register stage which cuts the critical path in forward and backward
+--! direction without loosing a cycle.
+entity stream_register_stage_fifo is
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    in_data  : in  StreamType;
+    in_valid : in  std_logic;
+    in_ready : out std_logic;
+
+    out_data  : out StreamType;
+    out_valid : out std_logic;
+    out_ready : in  std_logic
+    );
+end stream_register_stage_fifo;
+
+architecture arch_imp of stream_register_stage_fifo is
+  signal left_input, left_output, right_input, right_output                         : StreamType;
+  signal left_input_valid, right_input_valid, left_output_valid, right_output_valid : std_logic;
+  signal left_input_ready, right_input_ready, left_output_ready, right_output_ready : std_logic;
+
+  signal leftInputxDP, leftInputxDN, leftOutputxDP, leftOutputxDN : std_logic;
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        leftInputxDP  <= '0';
+        leftOutputxDP <= '0';
+      else
+        leftInputxDP  <= leftInputxDN;
+        leftOutputxDP <= leftOutputxDN;
+      end if;
+    end if;
+  end process regs;
+
+  comb : process(in_data, in_valid, out_ready, leftInputxDP, leftOutputxDP,
+                 right_output, right_output_valid, left_output, left_output_valid,
+                 left_input_ready, right_input_ready) is
+  begin
+    leftInputxDN  <= leftInputxDP;
+    leftOutputxDN <= leftOutputxDP;
+
+    right_output_ready <= '0';
+    left_output_ready  <= '0';
+
+    -- output
+    if leftOutputxDP = '1' then
+      out_data          <= left_output;
+      out_data.valid    <= left_output_valid;
+      out_valid         <= left_output_valid;
+      left_output_ready <= out_ready;
+      if out_ready = '1' and left_output_valid = '1' then
+        leftOutputxDN <= '0';
+      end if;
+    else
+      out_data           <= right_output;
+      out_data.valid     <= right_output_valid;
+      out_valid          <= right_output_valid;
+      right_output_ready <= out_ready;
+      if out_ready = '1' and right_output_valid = '1' then
+        leftOutputxDN <= '1';
+      end if;
+    end if;
+
+    -- input
+    left_input        <= StreamType_default;
+    right_input       <= StreamType_default;
+    left_input_valid  <= '0';
+    right_input_valid <= '0';
+
+    if leftInputxDP = '1' then
+      left_input       <= in_data;
+      left_input_valid <= in_valid;
+      in_ready         <= left_input_ready;
+      if left_input_ready = '1' then
+        leftInputxDN <= '0';
+      end if;
+    else
+      right_input       <= in_data;
+      right_input_valid <= in_valid;
+      in_ready          <= right_input_ready;
+      if right_input_ready = '1' then
+        leftInputxDN <= '1';
+      end if;
+    end if;
+  end process comb;
+
+
+  left : entity work.stream_register_stage
+    generic map (
+      REGISTERED   => true,
+      READY_BYPASS => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => left_input,
+      in_valid => left_input_valid,
+      in_ready => left_input_ready,
+
+      out_data  => left_output,
+      out_valid => left_output_valid,
+      out_ready => left_output_ready
+      );
+
+  right : entity work.stream_register_stage
+    generic map (
+      REGISTERED   => true,
+      READY_BYPASS => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => right_input,
+      in_valid => right_input_valid,
+      in_ready => right_input_ready,
+
+      out_data  => right_output,
+      out_valid => right_output_valid,
+      out_ready => right_output_ready
+      );
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/stream/stream_request_zero_initializer.vhd b/fpga/src/memsec/hdl/framework/stream/stream_request_zero_initializer.vhd
new file mode 100644
index 0000000..b44d94f
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/stream_request_zero_initializer.vhd
@@ -0,0 +1,93 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Clears the full transaction when the first nonce/key block is zero.
+--!
+--! Using a zero nonce to identify uninitialized memory permits to lazily
+--! bootstrap the AE modes.
+entity stream_request_zero_initializer is
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_request_zero_initializer;
+
+architecture behavioral of stream_request_zero_initializer is
+  signal initRequestxDP, initRequestxDN : std_logic;
+  signal inRequestxDP, inRequestxDN     : std_logic;
+  signal request_ready                  : std_logic;
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        initRequestxDP <= '0';
+        inRequestxDP   <= '0';
+      else
+        initRequestxDP <= initRequestxDN;
+        inRequestxDP   <= inRequestxDN;
+      end if;
+    end if;
+  end process regs;
+
+  comb : process(s_request, m_request_ready, request_ready, initRequestxDP, inRequestxDP) is
+  begin
+    initRequestxDN <= initRequestxDP;
+    inRequestxDN   <= inRequestxDP;
+
+    m_request     <= StreamType_default;
+    request_ready <= '0';
+
+    if s_request.valid = '1' then
+      m_request     <= s_request;
+      request_ready <= m_request_ready;
+
+      if inRequestxDP = '0' then
+        inRequestxDN   <= '1';
+        initRequestxDN <= to_std_logic(unsigned(s_request.data) = 0);
+      end if;
+
+      if request_ready = '1' and unsigned(s_request.block_len) = 0 then
+        inRequestxDN <= '0';
+      end if;
+
+      if inRequestxDP = '1' and initRequestxDP = '1' then
+        m_request.data  <= (others => '0');
+        m_request.error <= '0';
+      end if;
+    end if;
+  end process comb;
+
+  s_request_ready <= request_ready;
+
+end behavioral;
diff --git a/fpga/src/memsec/hdl/framework/stream/stream_scheduler.vhd b/fpga/src/memsec/hdl/framework/stream/stream_scheduler.vhd
new file mode 100644
index 0000000..91d7fe2
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/stream/stream_scheduler.vhd
@@ -0,0 +1,94 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Simple scheduler which forwards the slave ports to the master in a round robin manner.
+entity stream_scheduler is
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request_1       : in  StreamType;
+    s_request_1_ready : out std_logic;
+
+    s_request_2       : in  StreamType;
+    s_request_2_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic
+    );
+end stream_scheduler;
+
+architecture arch_imp of stream_scheduler is
+  signal last_1xDP, last_1xDN : std_logic;
+
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        last_1xDP <= '0';
+      else
+        last_1xDP <= last_1xDN;
+      end if;
+    end if;
+  end process regs;
+
+  work : process(s_request_1, s_request_2, m_request_ready, last_1xDP) is
+    variable request_1 : std_logic;
+  begin
+    m_request         <= StreamType_default;
+    s_request_1_ready <= '0';
+    s_request_2_ready <= '0';
+
+    last_1xDN <= last_1xDP;
+
+    request_1 := '0';
+
+    -- by default, requests 1 is always forwarded when valid
+    if s_request_1.valid = '1' then
+      m_request         <= s_request_1;
+      s_request_1_ready <= m_request_ready;
+      if s_request_1.last_request = '1' then
+        request_1 := '1';
+      end if;
+    end if;
+
+    -- requests 2 is forwarded when it is valid and no request 1 should
+    -- be performed, or when the last request was already a request 1
+    if s_request_2.valid = '1' and
+      (s_request_1.valid = '0' or last_1xDP = '1') then
+      m_request         <= s_request_2;
+      s_request_2_ready <= m_request_ready;
+      s_request_1_ready <= '0';
+      request_1         := '0';
+    end if;
+
+    if m_request_ready = '1' then
+      last_1xDN <= request_1;
+    end if;
+  end process work;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/util/data_dispatcher.vhd b/fpga/src/memsec/hdl/framework/util/data_dispatcher.vhd
new file mode 100644
index 0000000..95f6c01
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/data_dispatcher.vhd
@@ -0,0 +1,103 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Synchronization block which dispatches an input block to one of the available outputs.
+entity data_dispatcher is
+  generic (
+    DISPATCH_WIDTH : integer := 2;
+    DATA_WIDTH     : integer := 128;
+    REGISTERED     : boolean := false
+    );
+  port (
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    in_data  : in  std_logic_vector(DATA_WIDTH-1 downto 0);
+    in_valid : in  std_logic;
+    in_ready : out std_logic;
+
+    out_data    : out std_logic_vector(DATA_WIDTH*DISPATCH_WIDTH-1 downto 0);
+    out_request : in  std_logic_vector(DISPATCH_WIDTH-1 downto 0);
+    out_valid   : out std_logic_vector(DISPATCH_WIDTH-1 downto 0);
+    out_ready   : in  std_logic_vector(DISPATCH_WIDTH-1 downto 0)
+    );
+end data_dispatcher;
+
+architecture Behavioral of data_dispatcher is
+  signal valid_reg   : std_logic_vector(DISPATCH_WIDTH-1 downto 0);
+  signal ready_reg   : std_logic_vector(DISPATCH_WIDTH-1 downto 0);
+  signal request_reg : std_logic_vector(DISPATCH_WIDTH-1 downto 0);
+  signal valid_out   : std_logic_vector(DISPATCH_WIDTH-1 downto 0);
+begin
+
+  valid_dispatch : entity work.valid_dispatcher
+    generic map(
+      WIDTH => DISPATCH_WIDTH
+      )
+    port map(
+      clk    => clk,
+      resetn => resetn,
+
+      in_valid => in_valid,
+      in_ready => in_ready,
+
+      out_request => request_reg,
+      out_valid   => valid_reg,
+      out_ready   => ready_reg
+      );
+
+  registers : for i in 0 to DISPATCH_WIDTH-1 generate
+    reg : entity work.register_stage
+      generic map(
+        WIDTH        => DATA_WIDTH,
+        READY_BYPASS => true,
+        REGISTERED   => REGISTERED
+        )
+      port map(
+        clk    => clk,
+        resetn => resetn,
+
+        in_data  => in_data,
+        in_valid => valid_reg(i),
+        in_ready => ready_reg(i),
+
+        out_data  => out_data((i+1)*DATA_WIDTH-1 downto i*DATA_WIDTH),
+        out_valid => valid_out(i),
+        out_ready => out_ready(i)
+        );
+  end generate registers;
+
+  comb_reg : if REGISTERED generate
+    request_reg <= not(valid_out);
+    out_valid   <= valid_out;
+  end generate comb_reg;
+
+  comb_noreg : if not(REGISTERED) generate
+    request_reg <= out_request;
+    out_valid   <= valid_out;
+  end generate comb_noreg;
+
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/util/deserialization.vhd b/fpga/src/memsec/hdl/framework/util/deserialization.vhd
new file mode 100644
index 0000000..c4580a5
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/deserialization.vhd
@@ -0,0 +1,275 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Deserializes a standard logic vector into a wider vector.
+--!
+--! Address offsets to shift the first block as well as a last signal to
+--! terminate the final block early are supported.
+entity deserialization is
+  generic(
+    IN_DATA_WIDTH  : integer := 32;
+    OUT_DATA_WIDTH : integer := 64;    --! has to be (2,4,8,...) * IN_DATA_WIDTH
+    REGISTERED     : boolean := false  --! option to cut the critical path
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    -- The field offset at which the first in_data block should be placed. All
+    -- subsequent in_data blocks will be placed in the ascending fields. This
+    -- input is only sampled after a reset or if the previous block has ended
+    -- with a last signal.
+    --
+    -- For example, an offset of 1 in a 32 to 64 conversion places the first
+    -- in_data block in the top 32 bits and immediately returns the resulting
+    -- out_data.
+    in_field_start_offset : in std_logic_vector(log2_ceil(OUT_DATA_WIDTH/IN_DATA_WIDTH) - 1 downto 0);
+
+    -- Signals that the current transaction is over and that the output should
+    -- be generated immediately. The output bits which are missing are zero.
+    in_last  : in  std_logic;
+    in_data  : in  std_logic_vector(IN_DATA_WIDTH - 1 downto 0);
+    in_valid : in  std_logic;
+    in_ready : out std_logic;
+
+    -- output with handshake signals
+    out_data         : out std_logic_vector(OUT_DATA_WIDTH - 1 downto 0);
+    out_last         : out std_logic;
+    out_field_offset : out std_logic_vector(log2_ceil(OUT_DATA_WIDTH/IN_DATA_WIDTH) - 1 downto 0);
+    out_field_len    : out std_logic_vector(log2_ceil(OUT_DATA_WIDTH/IN_DATA_WIDTH) - 1 downto 0);
+    out_valid        : out std_logic;
+    out_ready        : in  std_logic
+    );
+end deserialization;
+
+architecture arch_imp of deserialization is
+  constant FIELD_ADDR_WIDTH : integer := log2_ceil(OUT_DATA_WIDTH/IN_DATA_WIDTH);
+  constant LAST_FIELD_ADDR  : integer := OUT_DATA_WIDTH/IN_DATA_WIDTH - 1;
+
+  signal fieldxDP, fieldxDN             : std_logic_vector(FIELD_ADDR_WIDTH - 1 downto 0);
+  signal dataxDP, dataxDN               : std_logic_vector(OUT_DATA_WIDTH - 1 downto 0);
+  signal runningxDP, runningxDN         : std_logic;
+  signal completexDP, completexDN       : std_logic;
+  signal lastxDP, lastxDN               : std_logic;
+  signal fieldOffsetxDP, fieldOffsetxDN : std_logic_vector(FIELD_ADDR_WIDTH - 1 downto 0);
+  signal fieldLenxDP, fieldLenxDN       : std_logic_vector(FIELD_ADDR_WIDTH - 1 downto 0);
+
+  -- datapath signals
+  signal combined_data : std_logic_vector(OUT_DATA_WIDTH - 1 downto 0);
+  signal field_addr    : std_logic_vector(FIELD_ADDR_WIDTH - 1 downto 0);
+  signal in_ack        : std_logic;
+  signal out_ack       : std_logic;
+  signal field_offset  : std_logic_vector(FIELD_ADDR_WIDTH - 1 downto 0);
+  signal field_len     : std_logic_vector(FIELD_ADDR_WIDTH - 1 downto 0);
+  signal field_len_inc : std_logic_vector(FIELD_ADDR_WIDTH - 1 downto 0);
+
+  signal in_readyxS  : std_logic;
+  signal out_validxS : std_logic;
+
+  -- control signals
+  signal use_new_field_addr : std_logic;
+  signal update_data_reg    : std_logic;
+  signal new_block          : std_logic;
+  signal reset_field        : std_logic;
+  signal reset_field_info   : std_logic;
+begin
+  assert OUT_DATA_WIDTH > IN_DATA_WIDTH and OUT_DATA_WIDTH mod IN_DATA_WIDTH = 0
+    report "OUT_DATA_WIDTH has to be a multiple of IN_DATA_WIDTH." severity error;
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        fieldxDP       <= (others => '0');
+        dataxDP        <= (others => '0');
+        runningxDP     <= '0';
+        completexDP    <= '0';
+        lastxDP        <= '0';
+        fieldOffsetxDP <= (others => '0');
+        fieldLenxDP    <= (others => '0');
+      else
+        fieldxDP       <= fieldxDN;
+        dataxDP        <= dataxDN;
+        runningxDP     <= runningxDN;
+        completexDP    <= completexDN;
+        lastxDP        <= lastxDN;
+        fieldOffsetxDP <= fieldOffsetxDN;
+        fieldLenxDP    <= fieldLenxDN;
+      end if;
+    end if;
+  end process regs;
+
+  field_addr    <= fieldxDP       when use_new_field_addr = '0' else in_field_start_offset;
+  field_offset  <= fieldOffsetxDP when use_new_field_addr = '0' else in_field_start_offset;
+  field_len     <= fieldLenxDP;
+  field_len_inc <= std_logic_vector(unsigned(fieldLenxDP)+1);
+  in_ack        <= in_readyxS and in_valid;
+  out_ack       <= out_validxS and out_ready;
+
+  p_combine_data : process(dataxDP, field_addr, in_data, new_block) is
+    variable field        : integer range 0 to LAST_FIELD_ADDR;
+    variable shifted_data : std_logic_vector(OUT_DATA_WIDTH - 1 downto 0);
+  begin
+    combined_data <= (others => '0');
+
+    field        := to_integer(unsigned(field_addr));
+    shifted_data := zeros(OUT_DATA_WIDTH - IN_DATA_WIDTH) & in_data;
+    shifted_data := std_logic_vector(unsigned(shifted_data) sll (field*IN_DATA_WIDTH));
+
+    combined_data <= dataxDP or shifted_data;
+    if new_block = '1' then
+      combined_data <= shifted_data;
+    end if;
+  end process p_combine_data;
+
+  p_update_data_reg : process(combined_data, dataxDP, field_addr, lastxDP, in_last,
+                              use_new_field_addr, in_field_start_offset, reset_field_info,
+                              update_data_reg, reset_field, fieldOffsetxDP, fieldLenxDP,
+                              field_len, field_len_inc) is
+  begin
+    fieldxDN       <= field_addr;
+    dataxDN        <= dataxDP;
+    lastxDN        <= lastxDP;
+    fieldOffsetxDN <= fieldOffsetxDP;
+    fieldLenxDN    <= fieldLenxDP;
+    if reset_field = '1' then
+      fieldxDN    <= (others => '0');
+      fieldLenxDN <= (others => '0');
+    end if;
+    if update_data_reg = '1' then
+      dataxDN     <= combined_data;
+      fieldxDN    <= std_logic_vector(unsigned(field_addr)+1);
+      fieldLenxDN <= field_len_inc;
+      lastxDN     <= in_last;
+    end if;
+    if reset_field_info = '1' then
+      fieldOffsetxDN <= (others => '0');
+      fieldLenxDN    <= (others => '0');
+    end if;
+    if use_new_field_addr = '1' then
+      fieldOffsetxDN <= std_logic_vector(in_field_start_offset);
+    end if;
+  end process p_update_data_reg;
+
+  control : process(combined_data, completexDP, dataxDP, field_addr, in_last, out_ack, in_ack,
+                    in_readyxS, in_valid, out_ready, out_validxS, runningxDP, lastxDP,
+                    fieldOffsetxDP, fieldLenxDP, field_len, field_offset) is
+    variable field          : integer range 0 to LAST_FIELD_ADDR;
+    variable block_complete : boolean;
+  begin
+    runningxDN  <= runningxDP;
+    completexDN <= completexDP;
+
+    out_data         <= (others => '0');
+    in_readyxS       <= '0';
+    out_validxS      <= '0';
+    out_last         <= '0';
+    out_field_offset <= (others => '0');
+    out_field_len    <= (others => '0');
+
+    new_block          <= '0';
+    use_new_field_addr <= '0';
+    update_data_reg    <= '0';
+    reset_field        <= '0';
+    reset_field_info   <= '0';
+
+    field          := 0;
+    block_complete := false;
+
+    -- start new block when the output has been acknowledged
+    if REGISTERED and out_ack = '1' then
+      completexDN      <= '0';
+      reset_field_info <= '1';
+    end if;
+
+    -- end current transaction when the input has been acknowledged with in_last
+    if in_ack = '1' and in_last = '1' then
+      runningxDN <= '0';
+    end if;
+
+    -- start a new transaction if none is running
+    if in_valid = '1' and runningxDP = '0' then
+      use_new_field_addr <= '1';
+      new_block          <= '1';
+      if in_last = '0' then
+        runningxDN <= '1';
+      end if;
+    end if;
+
+    -- process new data from the input
+    if in_valid = '1' and (completexDP = '0' or out_ack = '1') then
+      -- evaluate if the block is complete
+
+      field          := to_integer(unsigned(field_addr));
+      block_complete := field = LAST_FIELD_ADDR or in_last = '1';
+
+      if field = 0 then
+        new_block <= '1';
+      end if;
+
+      -- process the combined data depending on REGISTERED
+      -- if REGISTERED is true : everything has to be placed into the register
+      -- if REGISTERED is false: everything but the last block has to be registered
+      if REGISTERED then
+        update_data_reg <= '1';
+        in_readyxS      <= '1';
+
+        if block_complete then
+          completexDN <= '1';
+        end if;
+      else
+        if not(block_complete) then
+          update_data_reg <= '1';
+          in_readyxS      <= '1';
+        end if;
+      end if;
+    end if;
+
+    -- output data directly from the register in REGISTERED mode
+    if REGISTERED then
+      out_data         <= dataxDP;
+      out_validxS      <= completexDP;
+      out_last         <= lastxDP;
+      out_field_offset <= fieldOffsetxDP;
+      out_field_len    <= fieldLenxDP;
+    elsif REGISTERED = false and block_complete then
+      out_data         <= combined_data;
+      out_validxS      <= '1';
+      out_last         <= in_last;
+      out_field_offset <= field_offset;
+      out_field_len    <= field_len;
+      -- if output is not REGISTERED it has to be acknowledged to the input
+      if out_ack = '1' then
+        in_readyxS  <= '1';
+        reset_field <= '1';
+      end if;
+    end if;
+  end process control;
+
+  in_ready  <= in_readyxS;
+  out_valid <= out_validxS;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/util/fifo.vhd b/fpga/src/memsec/hdl/framework/util/fifo.vhd
new file mode 100644
index 0000000..e47ca4d
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/fifo.vhd
@@ -0,0 +1,104 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! FIFO for standard logic vectors.
+entity fifo is
+  generic(
+    WIDTH    : integer := 32;
+    ELEMENTS : integer := 1
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    in_data  : in  std_logic_vector(WIDTH - 1 downto 0);
+    in_valid : in  std_logic;
+    in_ready : out std_logic;
+    in_full  : out std_logic;
+
+    out_data  : out std_logic_vector(WIDTH - 1 downto 0);
+    out_valid : out std_logic;
+    out_ready : in  std_logic
+    );
+end fifo;
+
+architecture arch_imp of fifo is
+  type FifoArray is array(integer range <>) of std_logic_vector(WIDTH-1 downto 0);
+  signal FifoxDP, FifoxDN : FifoArray(ELEMENTS-1 downto 0);
+
+  signal IndexxDP, IndexxDN : std_logic_vector(log2_ceil(ELEMENTS) downto 0);
+
+begin
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        FifoxDP  <= (others => (others => '0'));
+        IndexxDP <= (others => '0');
+      else
+        FifoxDP  <= FifoxDN;
+        IndexxDP <= IndexxDN;
+      end if;
+    end if;
+  end process regs;
+
+  comb : process(in_data, in_valid, out_ready, FifoxDP, IndexxDP) is
+    variable vIndex : integer range 0 to ELEMENTS;
+  begin
+    FifoxDN  <= FifoxDP;
+    IndexxDN <= IndexxDP;
+
+    in_ready  <= '0';
+    out_valid <= '0';
+    out_data  <= FifoxDP(0);
+
+    vIndex := to_integer(unsigned(IndexxDP));
+
+    in_full <= '0';
+    if vIndex = ELEMENTS then
+      in_full <= '1';
+    end if;
+
+    -- output
+    if vIndex > 0 then
+      out_valid <= '1';
+
+      if out_ready = '1' then
+        vIndex                       := vIndex - 1;
+        FifoxDN(ELEMENTS-2 downto 0) <= FifoxDP(ELEMENTS-1 downto 1);
+        FifoxDN(ELEMENTS-1)          <= (others => '0');
+      end if;
+    end if;
+
+    if in_valid = '1' and vIndex < ELEMENTS then
+      FifoxDN(vIndex) <= in_data;
+      vIndex          := vIndex + 1;
+      in_ready        <= '1';
+    end if;
+
+    IndexxDN <= std_logic_vector(to_unsigned(vIndex, IndexxDP'length));
+  end process comb;
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/util/pipeline_guard.vhd b/fpga/src/memsec/hdl/framework/util/pipeline_guard.vhd
new file mode 100644
index 0000000..d3f6450
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/pipeline_guard.vhd
@@ -0,0 +1,147 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Guard which ensures that at most one write request for every block is in the pipeline.
+entity pipeline_guard is
+  generic(
+    BLOCK_SIZE         : integer := 64;    --! Size of one block in the virtual address space in byte.
+    FIFO_SIZE          : integer := 4;     --! Maximum number of writes within the pipeline
+    RELEASE_REGISTERED : boolean := false
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    s_request       : in  StreamType;
+    s_request_ready : out std_logic;
+
+    m_request       : out StreamType;
+    m_request_ready : in  std_logic;
+
+    release       : in  std_logic;
+    release_ready : out std_logic
+    );
+end pipeline_guard;
+
+architecture behavioral of pipeline_guard is
+  constant FIFO_SIZE_BITS  : integer                                     := log2_ceil(FIFO_SIZE);
+  constant BLOCK_SIZE_BITS : integer                                     := log2_ceil(BLOCK_SIZE);
+  type FifoArrayType is array(natural range <>) of std_logic_vector(ADDRESS_WIDTH-BLOCK_SIZE_BITS-1 downto 0);
+  constant FIFO_MAX_IDX    : std_logic_vector(FIFO_SIZE_BITS-1 downto 0) := std_logic_vector(to_unsigned(FIFO_SIZE-1, FIFO_SIZE_BITS));
+
+  signal FifoxDP, FifoxDN             : FifoArrayType(FIFO_SIZE-1 downto 0);
+  signal FifoInIdxxDP, FifoInIdxxDN   : std_logic_vector(FIFO_SIZE_BITS-1 downto 0);
+  signal FifoOutIdxxDP, FifoOutIdxxDN : std_logic_vector(FIFO_SIZE_BITS-1 downto 0);
+  signal FifoValidxDP, FifoValidxDN   : std_logic_vector(FIFO_SIZE-1 downto 0);
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        FifoxDP       <= (others => (others => '0'));
+        FifoValidxDP  <= (others => '0');
+        FifoInIdxxDP  <= (others => '0');
+        FifoOutIdxxDP <= (others => '0');
+      else
+        FifoxDP       <= FifoxDN;
+        FifoValidxDP  <= FifoValidxDN;
+        FifoInIdxxDP  <= FifoInIdxxDN;
+        FifoOutIdxxDP <= FifoOutIdxxDN;
+      end if;
+    end if;
+  end process regs;
+
+  comb_fifo : process(release, s_request, m_request_ready,
+                      FifoxDP, FifoValidxDP, FifoInIdxxDP, FifoOutIdxxDP) is
+    variable idx               : integer;
+    variable block_in_pipeline : std_logic;
+    variable fifo_valid        : std_logic_vector(FIFO_SIZE-1 downto 0);
+  begin
+    FifoxDN       <= FifoxDP;
+    FifoValidxDN  <= FifoValidxDP;
+    FifoInIdxxDN  <= FifoInIdxxDP;
+    FifoOutIdxxDN <= FifoOutIdxxDP;
+
+    m_request       <= s_request;
+    m_request.valid <= '0';
+
+    s_request_ready <= '0';
+    release_ready   <= '0';
+
+    fifo_valid := FifoValidxDP;
+
+    -- remove from fifo
+    idx := 0;
+    if release = '1' then
+      -- remove top element from FIFO
+      idx               := to_integer(unsigned(FifoOutIdxxDP));
+      FifoValidxDN(idx) <= '0';
+      if RELEASE_REGISTERED = false then
+        fifo_valid(idx) := '0';
+      end if;
+      release_ready <= '1';
+      FifoOutIdxxDN <= std_logic_vector(unsigned(FifoOutIdxxDP)+1);
+      if FifoOutIdxxDP = FIFO_MAX_IDX then
+        FifoOutIdxxDN <= (others => '0');
+      end if;
+    end if;
+
+    -- check if request is currently in write pipeline
+    block_in_pipeline := '0';
+    for i in 0 to FIFO_SIZE-1 loop
+      if fifo_valid(i) = '1' and
+        FifoxDP(i) = s_request.block_address(ADDRESS_WIDTH-1 downto BLOCK_SIZE_BITS) then
+        block_in_pipeline := '1';
+      end if;
+    end loop;
+
+    -- insert into fifo and forward data
+    idx := 0;
+    if block_in_pipeline = '0' then
+      if s_request.read = '1' then      -- read access
+        m_request.valid <= s_request.valid;
+        s_request_ready <= m_request_ready;
+      else                              -- write access
+        idx := to_integer(unsigned(FifoInIdxxDP));
+        if s_request.valid = '1' and FifoValidxDP(idx) = '0' then  -- FIFO must not be full
+          m_request.valid <= s_request.valid;
+          s_request_ready <= m_request_ready;
+          if m_request_ready = '1' then
+            FifoxDN(idx)      <= s_request.block_address(ADDRESS_WIDTH-1 downto BLOCK_SIZE_BITS);
+            FifoValidxDN(idx) <= '1';
+            FifoInIdxxDN      <= std_logic_vector(unsigned(FifoInIdxxDP)+1);
+            if FifoInIdxxDP = FIFO_MAX_IDX then
+              FifoInIdxxDN <= (others => '0');
+            end if;
+          end if;
+        end if;
+      end if;
+    end if;
+
+  end process;
+
+end behavioral;
diff --git a/fpga/src/memsec/hdl/framework/util/prng.vhd b/fpga/src/memsec/hdl/framework/util/prng.vhd
new file mode 100644
index 0000000..b6d425e
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/prng.vhd
@@ -0,0 +1,153 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+use work.keccak_package.all;
+
+--! Simple PRNG based on the Keccak permutation.
+entity prng is
+  generic (
+    WIDTH : integer := 128
+    );
+  port (
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    random       : out std_logic_vector(WIDTH-1 downto 0);
+    random_valid : out std_logic;
+    random_ready : in  std_logic;
+
+    random_init : in std_logic_vector(LANE_BITWIDTH*25-1 downto 0)
+    );
+end prng;
+
+architecture Behavioral of prng is
+  constant RATE          : integer                      := (8*LANE_BITWIDTH)*(LANE_BITWIDTH/8);
+  constant STATE_INIT    : std_logic_vector(1 downto 0) := "00";
+  constant STATE_PERMUTE : std_logic_vector(1 downto 0) := "01";
+  constant STATE_VALID   : std_logic_vector(1 downto 0) := "11";
+
+  signal StatexDP, StatexDN : std_logic_vector(1 downto 0);
+
+  signal KeccakOutxD                                     : std_logic_vector(RATE-1 downto 0);
+  signal KeccakInitxS, KeccakSqueezexS, KeccakFinishedxS : std_logic;
+  signal KeccakZeroxS                                    : std_logic;
+
+  signal random_internal                              : std_logic_vector(RATE-1 downto 0);
+  signal random_internal_valid, random_internal_ready : std_logic;
+begin
+
+  keccak : entity work.keccak_parallel
+    generic map (
+      UNROLLED_ROUNDS => 16/LANE_BITWIDTH,
+      RATE            => RATE,
+      ROUNDS          => 2*log2ceil(LANE_BITWIDTH)+12
+      )
+    port map (
+      ClkxCI   => clk,
+      RstxRBI  => resetn,
+      BlockxDO => KeccakOutxD,
+      BlockxDI => (others => '0'),
+      IVxDI    => random_init,
+
+      StartInitxSI     => KeccakInitxS,
+      StartAbsorbxSI   => '0',
+      StartSqueezexSI  => KeccakSqueezexS,
+      PermutateDonexSO => KeccakFinishedxS
+      );
+
+  random_internal <= KeccakOutxD;
+  KeccakZeroxS    <= '1' when KeccakOutxD = zeros(KeccakOutxD'length) else '0';
+
+  comb : process(KeccakFinishedxS, random_internal_ready, StatexDP, KeccakZeroxS)
+  begin
+    StatexDN <= StatexDP;
+
+    KeccakInitxS    <= '0';
+    KeccakSqueezexS <= '0';
+
+    random_internal_valid <= '0';
+
+    case StatexDP is
+      when STATE_INIT =>
+        KeccakInitxS <= '1';
+        StatexDN     <= STATE_PERMUTE;
+      when STATE_PERMUTE =>
+        random_internal_valid <= KeccakFinishedxS and not(KeccakZeroxS);
+        KeccakSqueezexS       <= random_internal_ready;
+        if KeccakFinishedxS = '1' then
+          if random_internal_ready = '1' or KeccakZeroxS = '1' then
+            KeccakSqueezexS <= '1';
+          else
+            StatexDN <= STATE_VALID;
+          end if;
+        end if;
+      when STATE_VALID =>
+        random_internal_valid <= '1';
+        if random_internal_ready = '1' then
+          StatexDN        <= STATE_PERMUTE;
+          KeccakSqueezexS <= '1';
+        end if;
+      when others =>
+    end case;
+
+  end process comb;
+
+  output_conversion : entity work.rate_converter
+    generic map(
+      IN_DATA_WIDTH  => RATE,
+      OUT_DATA_WIDTH => WIDTH,
+      REGISTERED     => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_field_offset => (others => '0'),
+      in_field_len    => (others => '1'),
+
+      in_last  => '0',
+      in_data  => random_internal,
+      in_valid => random_internal_valid,
+      in_ready => random_internal_ready,
+
+      out_data         => random,
+      out_last         => open,
+      out_field_offset => open,
+      out_field_len    => open,
+      out_valid        => random_valid,
+      out_ready        => random_ready
+      );
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        StatexDP <= STATE_INIT;
+      else
+        StatexDP <= StatexDN;
+      end if;
+    end if;
+  end process regs;
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/util/rate_converter.vhd b/fpga/src/memsec/hdl/framework/util/rate_converter.vhd
new file mode 100644
index 0000000..b860951
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/rate_converter.vhd
@@ -0,0 +1,143 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Data rate converter which supports both, serialization and deserialization.
+entity rate_converter is
+  generic(
+    IN_DATA_WIDTH    : integer := 32;
+    OUT_DATA_WIDTH   : integer := 64;
+    REGISTERED       : boolean := false  -- option to cut the critical path
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    -- Signals that the current transaction is over and that the output should
+    -- be generated immediately. The output bits which are missing are zero.
+    in_last         : in  std_logic;
+    in_data         : in  std_logic_vector(IN_DATA_WIDTH - 1 downto 0);
+    in_field_offset : in  std_logic_vector(offset_width(IN_DATA_WIDTH, OUT_DATA_WIDTH)-1 downto 0);
+    in_field_len    : in  std_logic_vector(offset_width(IN_DATA_WIDTH, OUT_DATA_WIDTH)-1 downto 0);
+    in_valid        : in  std_logic;
+    in_ready        : out std_logic;
+
+    -- output with handshake signals
+    out_data         : out std_logic_vector(OUT_DATA_WIDTH - 1 downto 0);
+    out_field_offset : out std_logic_vector(offset_width(IN_DATA_WIDTH, OUT_DATA_WIDTH)-1 downto 0);
+    out_field_len    : out std_logic_vector(offset_width(IN_DATA_WIDTH, OUT_DATA_WIDTH)-1 downto 0);
+    out_last         : out std_logic;
+    out_valid        : out std_logic;
+    out_ready        : in  std_logic
+    );
+end rate_converter;
+
+architecture Behavioral of rate_converter is
+  signal reg_in, reg_out : std_logic_vector(IN_DATA_WIDTH downto 0);
+begin
+  deserializer : if OUT_DATA_WIDTH > IN_DATA_WIDTH generate
+    data_deserialization : entity work.deserialization
+      generic map(
+        IN_DATA_WIDTH  => IN_DATA_WIDTH,
+        OUT_DATA_WIDTH => OUT_DATA_WIDTH,
+        REGISTERED     => REGISTERED
+        )
+      port map (
+        clk    => clk,
+        resetn => resetn,
+
+        in_field_start_offset => in_field_offset,
+
+        in_last  => in_last,
+        in_data  => in_data,
+        in_valid => in_valid,
+        in_ready => in_ready,
+
+        out_last         => out_last,
+        out_data         => out_data,
+        out_field_offset => out_field_offset,
+        out_field_len    => out_field_len,
+        out_valid        => out_valid,
+        out_ready        => out_ready
+        );
+
+  end generate deserializer;
+
+  serializer : if IN_DATA_WIDTH > OUT_DATA_WIDTH generate
+    data_serialization : entity work.serialization
+      generic map(
+        IN_DATA_WIDTH  => IN_DATA_WIDTH,
+        OUT_DATA_WIDTH => OUT_DATA_WIDTH,
+        REGISTERED     => REGISTERED
+        )
+      port map (
+        clk    => clk,
+        resetn => resetn,
+
+        in_last         => in_last,
+        in_data         => in_data,
+        in_field_offset => in_field_offset,
+        in_field_len    => in_field_len,
+        in_valid        => in_valid,
+        in_ready        => in_ready,
+
+        out_last         => out_last,
+        out_data         => out_data,
+        out_field_offset => out_field_offset,
+        out_valid        => out_valid,
+        out_ready        => out_ready
+        );
+
+    out_field_len <= (others => '0');
+  end generate serializer;
+
+  identity : if IN_DATA_WIDTH = OUT_DATA_WIDTH generate
+    reg_in <= in_last & in_data;
+
+    data_reg : entity work.register_stage
+      generic map(
+        WIDTH      => (1+IN_DATA_WIDTH),
+        REGISTERED => REGISTERED
+        )
+      port map (
+        clk    => clk,
+        resetn => resetn,
+
+        in_data  => reg_in,
+        in_valid => in_valid,
+        in_ready => in_ready,
+
+        out_data  => reg_out,
+        out_valid => out_valid,
+        out_ready => out_ready
+        );
+
+    out_data         <= reg_out(IN_DATA_WIDTH-1 downto 0);
+    out_last         <= reg_out(IN_DATA_WIDTH);
+    out_field_offset <= (others => '0');
+    out_field_len    <= (others => '0');
+  end generate;
+
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/util/ready_synchronizer.vhd b/fpga/src/memsec/hdl/framework/util/ready_synchronizer.vhd
new file mode 100644
index 0000000..b3f0520
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/ready_synchronizer.vhd
@@ -0,0 +1,112 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Synchronization block for the standard valid and ready handshake signals.
+--!
+--! This block ensures that all consumers have acknowledged the reception of the
+--! block before the next one is accepted.
+entity ready_synchronizer is
+  generic(
+    OUT_WIDTH : integer := 1
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    in_valid : in  std_logic;
+    in_ready : out std_logic;
+
+    out_valid  : out std_logic_vector(OUT_WIDTH-1 downto 0);
+    out_active : in  std_logic_vector(OUT_WIDTH-1 downto 0);
+    out_ready  : in  std_logic_vector(OUT_WIDTH-1 downto 0)
+    );
+end ready_synchronizer;
+
+architecture arch_imp of ready_synchronizer is
+  signal ackxDP, ackxDN               : std_logic_vector(OUT_WIDTH-1 downto 0);
+  signal out_activexSP, out_activexSN : std_logic_vector(OUT_WIDTH-1 downto 0);
+
+  signal in_readyxS  : std_logic;
+  signal out_validxS : std_logic_vector(OUT_WIDTH-1 downto 0);
+  signal out_readyxS : std_logic_vector(OUT_WIDTH-1 downto 0);
+begin
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        out_activexSP <= (others => '0');
+        ackxDP        <= (others => '0');
+      else
+        out_activexSP <= out_activexSN;
+        ackxDP        <= ackxDN;
+      end if;
+    end if;
+  end process regs;
+
+  control : process(ackxDP, in_valid, out_validxS, out_readyxS, out_activexSP, out_active) is
+    variable out_ack : std_logic_vector(OUT_WIDTH-1 downto 0);
+
+    variable ackxV : std_logic_vector(OUT_WIDTH-1 downto 0);
+  begin
+    ackxV := ackxDP;
+
+    if out_active /= out_activexSP then
+      --ackxV := (others => '0');
+      ackxV := ackxV and out_active and out_activexSP;
+    end if;
+
+    in_readyxS  <= '0';
+    out_validxS <= (others => '0');
+
+    -- helper signals 
+    out_ack := out_validxS and out_readyxS;
+
+    -- generate the valid outputs
+    if in_valid = '1' then
+      out_validxS <= not(ackxV);
+    end if;
+
+    -- process ack signals from the output
+    for I in 0 to OUT_WIDTH - 1 loop
+      if out_ack(I) = '1' then
+        ackxV(I) := '1';
+      end if;
+    end loop;
+
+    -- send ack to the input when all outputs have been acknowledged
+    if ackxV = ones(OUT_WIDTH) then
+      in_readyxS <= '1';
+      ackxV      := (others => '0');
+    end if;
+
+    ackxDN        <= ackxV;
+    out_activexSN <= out_active;
+  end process control;
+
+  in_ready    <= in_readyxS;
+  out_valid   <= out_active and out_validxS;
+  out_readyxS <= not(out_active) or out_ready;
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/util/register_stage.vhd b/fpga/src/memsec/hdl/framework/util/register_stage.vhd
new file mode 100644
index 0000000..1b9de3e
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/register_stage.vhd
@@ -0,0 +1,98 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Simple register stage for a standard logic vector.
+--!
+--! Enabling the READY_BYPASS permits to operate the register without
+--! introducing idle cycles. However, as a consequence, a critical path across
+--! the ready line is not prevented.
+entity register_stage is
+  generic(
+    WIDTH        : integer := 32;
+    READY_BYPASS : boolean := true;  --! permit to directly write the register when the output is read
+    REGISTERED   : boolean := true
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    in_data  : in  std_logic_vector(WIDTH - 1 downto 0);
+    in_valid : in  std_logic;
+    in_ready : out std_logic;
+
+    out_data  : out std_logic_vector(WIDTH - 1 downto 0);
+    out_valid : out std_logic;
+    out_ready : in  std_logic
+    );
+end register_stage;
+
+architecture arch_imp of register_stage is
+  signal dataxDP, dataxDN   : std_logic_vector(WIDTH - 1 downto 0);
+  signal validxDP, validxDN : std_logic;
+
+begin
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        dataxDP  <= (others => '0');
+        validxDP <= '0';
+      else
+        dataxDP  <= dataxDN;
+        validxDP <= validxDN;
+      end if;
+    end if;
+  end process regs;
+
+  control : process(dataxDP, in_data, in_valid, out_ready, validxDP) is
+  begin
+    dataxDN  <= dataxDP;
+    validxDN <= validxDP;
+
+    in_ready  <= out_ready;
+    out_valid <= in_valid;
+    out_data  <= in_data;
+
+    if REGISTERED then
+      in_ready <= '0';
+
+      -- reset the register when it was read
+      if validxDP = '1' and out_ready = '1' then
+        dataxDN  <= (others => '0');
+        validxDN <= '0';
+      end if;
+
+      -- set the register when it was empty or when it is currently read
+      if in_valid = '1' and (validxDP = '0' or (READY_BYPASS and out_ready = '1')) then
+        dataxDN  <= in_data;
+        validxDN <= '1';
+        in_ready <= '1';
+      end if;
+
+      out_valid <= validxDP;
+      out_data  <= dataxDP;
+    end if;
+  end process control;
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/util/register_stage_fifo.vhd b/fpga/src/memsec/hdl/framework/util/register_stage_fifo.vhd
new file mode 100644
index 0000000..38ef3e6
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/register_stage_fifo.vhd
@@ -0,0 +1,158 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! FIFO for standard logic vectors with two elements.
+--!
+--! The primary purpose of this two element FIFO is to provide an alternative
+--! two the register stage which cuts the critical path in forward and backward
+--! direction without loosing a cycle.
+entity register_stage_fifo is
+  generic(
+    WIDTH : integer := 32
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    in_data  : in  std_logic_vector(WIDTH - 1 downto 0);
+    in_valid : in  std_logic;
+    in_ready : out std_logic;
+
+    out_data  : out std_logic_vector(WIDTH - 1 downto 0);
+    out_valid : out std_logic;
+    out_ready : in  std_logic
+    );
+end register_stage_fifo;
+
+architecture behavioral of register_stage_fifo is
+  signal left_input, left_output, right_input, right_output                         : std_logic_vector(WIDTH-1 downto 0);
+  signal left_input_valid, right_input_valid, left_output_valid, right_output_valid : std_logic;
+  signal left_input_ready, right_input_ready, left_output_ready, right_output_ready : std_logic;
+
+  signal leftInputxDP, leftInputxDN, leftOutputxDP, leftOutputxDN : std_logic;
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        leftInputxDP  <= '0';
+        leftOutputxDP <= '0';
+      else
+        leftInputxDP  <= leftInputxDN;
+        leftOutputxDP <= leftOutputxDN;
+      end if;
+    end if;
+  end process regs;
+
+  comb : process(in_data, in_valid, out_ready, leftInputxDP, leftOutputxDP,
+                 right_output, right_output_valid, left_output, left_output_valid,
+                 left_input_ready, right_input_ready) is
+  begin
+    leftInputxDN  <= leftInputxDP;
+    leftOutputxDN <= leftOutputxDP;
+
+    right_output_ready <= '0';
+    left_output_ready  <= '0';
+
+    -- output
+    if leftOutputxDP = '1' then
+      out_data          <= left_output;
+      out_valid         <= left_output_valid;
+      left_output_ready <= out_ready;
+      if out_ready = '1' and left_output_valid = '1' then
+        leftOutputxDN <= '0';
+      end if;
+    else
+      out_data           <= right_output;
+      out_valid          <= right_output_valid;
+      right_output_ready <= out_ready;
+      if out_ready = '1' and right_output_valid = '1' then
+        leftOutputxDN <= '1';
+      end if;
+    end if;
+
+    -- input
+    left_input        <= (others => '0');
+    right_input       <= (others => '0');
+    left_input_valid  <= '0';
+    right_input_valid <= '0';
+
+    if leftInputxDP = '1' then
+      left_input       <= in_data;
+      left_input_valid <= in_valid;
+      in_ready         <= left_input_ready;
+      if left_input_ready = '1' then
+        leftInputxDN <= '0';
+      end if;
+    else
+      right_input       <= in_data;
+      right_input_valid <= in_valid;
+      in_ready          <= right_input_ready;
+      if right_input_ready = '1' then
+        leftInputxDN <= '1';
+      end if;
+    end if;
+  end process comb;
+
+  left : entity work.register_stage
+    generic map (
+      WIDTH        => WIDTH,
+      REGISTERED   => true,
+      READY_BYPASS => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => left_input,
+      in_valid => left_input_valid,
+      in_ready => left_input_ready,
+
+      out_data  => left_output,
+      out_valid => left_output_valid,
+      out_ready => left_output_ready
+      );
+
+  right : entity work.register_stage
+    generic map (
+      WIDTH        => WIDTH,
+      REGISTERED   => true,
+      READY_BYPASS => false
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => right_input,
+      in_valid => right_input_valid,
+      in_ready => right_input_ready,
+
+      out_data  => right_output,
+      out_valid => right_output_valid,
+      out_ready => right_output_ready
+      );
+
+end behavioral;
diff --git a/fpga/src/memsec/hdl/framework/util/serialization.vhd b/fpga/src/memsec/hdl/framework/util/serialization.vhd
new file mode 100644
index 0000000..3fdc1b2
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/serialization.vhd
@@ -0,0 +1,199 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Serializes a standard logic vector into smaller vectors.
+--!
+--! Address offsets to shift the first block as well as a last signal to
+--! terminate the final block early are supported.
+entity serialization is
+  generic(
+    IN_DATA_WIDTH  : integer := 64;  --! has to be (2,4,8,...) * OUT_DATA_WIDTH
+    OUT_DATA_WIDTH : integer := 32;
+    REGISTERED     : boolean := false
+    );
+  port(
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    in_last         : in  std_logic;
+    in_data         : in  std_logic_vector(IN_DATA_WIDTH - 1 downto 0);
+    in_field_offset : in  std_logic_vector(log2_ceil(IN_DATA_WIDTH/OUT_DATA_WIDTH)-1 downto 0);
+    in_field_len    : in  std_logic_vector(log2_ceil(IN_DATA_WIDTH/OUT_DATA_WIDTH)-1 downto 0);
+    in_valid        : in  std_logic;
+    in_ready        : out std_logic;
+
+    -- output with handshake signals
+    out_data         : out std_logic_vector(OUT_DATA_WIDTH - 1 downto 0);
+    out_field_offset : out std_logic_vector(log2_ceil(IN_DATA_WIDTH/OUT_DATA_WIDTH)-1 downto 0);
+    out_last         : out std_logic;
+    out_valid        : out std_logic;
+    out_ready        : in  std_logic
+    );
+end serialization;
+
+architecture arch_imp of serialization is
+  constant FIELD_ADDR_WIDTH : integer := log2_ceil(IN_DATA_WIDTH/OUT_DATA_WIDTH);
+  constant LAST_FIELD_ADDR  : integer := IN_DATA_WIDTH/OUT_DATA_WIDTH - 1;
+
+  -- potentially registered input signals
+  signal last         : std_logic;
+  signal data         : std_logic_vector(IN_DATA_WIDTH - 1 downto 0);
+  signal valid        : std_logic;
+  signal ready        : std_logic;
+  signal field_addr   : std_logic_vector(in_field_offset'length-1 downto 0);
+  signal field_offset : std_logic_vector(in_field_offset'length-1 downto 0);
+  signal field_len    : std_logic_vector(in_field_len'length-1 downto 0);
+
+  -- internal registers
+  signal fieldxDP, fieldxDN : std_logic_vector(FIELD_ADDR_WIDTH - 1 downto 0);
+
+  -- datapath signals
+  signal last_block : std_logic;
+
+begin
+  assert OUT_DATA_WIDTH < IN_DATA_WIDTH and IN_DATA_WIDTH mod OUT_DATA_WIDTH = 0
+    report "IN_DATA_WIDTH has to be a multiple of OUT_DATA_WIDTH." severity error;
+
+  data_reg : entity work.register_stage
+    generic map(
+      WIDTH      => IN_DATA_WIDTH,
+      REGISTERED => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => in_data,
+      in_valid => in_valid,
+      in_ready => in_ready,
+
+      out_data  => data,
+      out_valid => valid,
+      out_ready => ready
+      );
+
+  offset_reg : entity work.register_stage
+    generic map(
+      WIDTH      => in_field_offset'length,
+      REGISTERED => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => in_field_offset,
+      in_valid => in_valid,
+      in_ready => open,                 -- data_reg handles the synchronization
+
+      out_data  => field_offset,
+      out_valid => open,                -- data_reg handles the synchronization
+      out_ready => ready
+      );
+
+  len_reg : entity work.register_stage
+    generic map(
+      WIDTH      => in_field_len'length,
+      REGISTERED => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data  => in_field_len,
+      in_valid => in_valid,
+      in_ready => open,                 -- data_reg handles the synchronization
+
+      out_data  => field_len,
+      out_valid => open,                -- data_reg handles the synchronization
+      out_ready => ready
+      );
+
+
+  last_reg : entity work.register_stage
+    generic map(
+      WIDTH      => 1,
+      REGISTERED => REGISTERED
+      )
+    port map (
+      clk    => clk,
+      resetn => resetn,
+
+      in_data(0) => in_last,
+      in_valid   => in_valid,
+      in_ready   => open,               -- data_reg handles the synchronization
+
+      out_data(0) => last,
+      out_valid   => open,              -- data_reg handles the synchronization
+      out_ready   => ready
+      );
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        fieldxDP <= (others => '0');
+      else
+        fieldxDP <= fieldxDN;
+      end if;
+    end if;
+  end process regs;
+
+  p_slice_data : process(valid, fieldxDP, data, field_offset) is
+    variable field_addr_u : unsigned(field_addr'length-1 downto 0);
+    variable field        : integer range 0 to LAST_FIELD_ADDR;
+    variable shifted_data : std_logic_vector(IN_DATA_WIDTH - 1 downto 0);
+  begin
+    field_addr <= (others => '0');
+    out_data   <= (others => '0');
+
+    if valid = '1' then
+      field_addr_u := unsigned(fieldxDP) + unsigned(field_offset);
+      field_addr   <= std_logic_vector(field_addr_u);
+      field        := to_integer(field_addr_u);
+      shifted_data := std_logic_vector(unsigned(data) srl (field*OUT_DATA_WIDTH));
+      out_data     <= shifted_data(OUT_DATA_WIDTH-1 downto 0);
+    end if;
+  end process p_slice_data;
+
+  last_block <= '1' when fieldxDP = field_len else '0';
+
+  p_update_field_reg : process(fieldxDP, valid, out_ready, fieldxDP, last_block) is
+  begin
+    fieldxDN <= fieldxDP;
+    ready    <= '0';
+
+    if valid = '1' and out_ready = '1' then
+      fieldxDN <= std_logic_vector(unsigned(fieldxDP)+1);
+      if last_block = '1' then
+        ready <= '1';
+      end if;
+    end if;
+  end process p_update_field_reg;
+
+  out_valid        <= valid;
+  out_field_offset <= field_addr;
+  out_last         <= last and last_block;
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/util/valid_dispatcher.vhd b/fpga/src/memsec/hdl/framework/util/valid_dispatcher.vhd
new file mode 100644
index 0000000..a6149c3
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/valid_dispatcher.vhd
@@ -0,0 +1,101 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+--! Synchronization block which dispatches an input to one of the available outputs.
+entity valid_dispatcher is
+  generic (
+    WIDTH : integer := 2
+    );
+  port (
+    clk    : in std_logic;
+    resetn : in std_logic;
+
+    in_valid : in  std_logic;
+    in_ready : out std_logic;
+
+    out_request : in  std_logic_vector(WIDTH-1 downto 0);
+    out_valid   : out std_logic_vector(WIDTH-1 downto 0);
+    out_ready   : in  std_logic_vector(WIDTH-1 downto 0)
+    );
+end valid_dispatcher;
+
+architecture Behavioral of valid_dispatcher is
+  signal ActiveSignalxDP, ActiveSignalxDN : std_logic_vector(log2_ceil(WIDTH)-1 downto 0);
+begin
+
+  comb : process(out_request, out_ready, in_valid, ActiveSignalxDP)
+    variable vRequest       : std_logic;
+    variable vRequestNo     : integer;
+    variable vActiveRequest : integer;
+    variable i              : integer;
+    variable vOutRequests   : std_logic_vector(out_request'range);
+  begin
+    ActiveSignalxDN <= ActiveSignalxDP;
+
+    in_ready  <= '0';
+    out_valid <= (others => '0');
+
+    vActiveRequest := to_integer(unsigned(ActiveSignalxDP));
+    vOutRequests   := std_logic_vector(unsigned(out_request) rol vActiveRequest);
+    vRequest       := '0';
+    vRequestNo     := 0;
+    for i in 0 to WIDTH-1 loop
+      if vOutRequests(i) = '1' then
+        vRequest   := '1';
+        vRequestNo := i;
+      end if;
+    end loop;
+    vRequestNo := vRequestNo + vActiveRequest;
+    if vRequestNo >= WIDTH then
+      vRequestNo := vRequestNo-WIDTH;
+    end if;
+
+    if vRequest = '1' then
+      out_valid(vRequestNo) <= in_valid;
+      in_ready              <= out_ready(vRequestNo);
+      if out_ready(vRequestNo) = '1' then
+        if vRequestNo = WIDTH-1 then
+          ActiveSignalxDN <= (others => '0');
+        else
+          ActiveSignalxDN <= std_logic_vector(to_unsigned(vRequestNo+1, log2_ceil(WIDTH)));
+        end if;
+      end if;
+    end if;
+
+  end process comb;
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        ActiveSignalxDP <= (others => '0');
+      else
+        ActiveSignalxDP <= ActiveSignalxDN;
+      end if;
+    end if;
+  end process regs;
+
+end Behavioral;
diff --git a/fpga/src/memsec/hdl/framework/util/xilinx_TDP_RAM.vhd b/fpga/src/memsec/hdl/framework/util/xilinx_TDP_RAM.vhd
new file mode 100644
index 0000000..8fb339c
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/xilinx_TDP_RAM.vhd
@@ -0,0 +1,86 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Dual port RAM for Xilinx FPGAs.
+entity xilinx_TDP_RAM is
+  generic(
+    ADDR_WIDTH : integer := 32;
+    DATA_WIDTH : integer := 64;
+    ENTRIES    : integer := 32  -- number of entries  (should be a power of 2)
+    );
+  port(
+    clk : in std_logic;  -- clock
+
+    addra : in std_logic_vector(ADDR_WIDTH-1 downto 0);  -- Port A Address bus, width determined from RAM_DEPTH
+    addrb : in std_logic_vector(ADDR_WIDTH-1 downto 0);  -- Port B Address bus, width determined from RAM_DEPTH
+    dina  : in std_logic_vector(DATA_WIDTH-1 downto 0);  -- Port A RAM input data
+    dinb  : in std_logic_vector(DATA_WIDTH-1 downto 0);  -- Port B RAM input data
+
+    wea : in std_logic;  -- Port A Write enable
+    web : in std_logic;  -- Port B Write enable
+    ena : in std_logic;  -- Port A RAM Enable, for additional power savings, disable port when not in use
+    enb : in std_logic;  -- Port B RAM Enable, for additional power savings, disable port when not in use
+
+    douta : out std_logic_vector(DATA_WIDTH-1 downto 0);  -- Port A RAM output data
+    doutb : out std_logic_vector(DATA_WIDTH-1 downto 0)   -- Port B RAM output data
+    );
+end xilinx_TDP_RAM;
+
+architecture arch_imp of xilinx_TDP_RAM is
+  type ram_type is array (ENTRIES-1 downto 0) of std_logic_vector (DATA_WIDTH-1 downto 0);  -- 2D Array Declaration for RAM signal
+  signal ram_data_a : std_logic_vector(DATA_WIDTH-1 downto 0);
+  signal ram_data_b : std_logic_vector(DATA_WIDTH-1 downto 0);
+
+  shared variable ram : ram_type := (others => (others => '0'));
+begin
+
+  process(clk)
+  begin
+    if(clk'event and clk = '1') then
+      if(ena = '1') then
+        ram_data_a <= ram(to_integer(unsigned(addra)));
+        if(wea = '1') then
+          ram(to_integer(unsigned(addra))) := dina;
+        end if;
+      end if;
+    end if;
+  end process;
+
+  process(clk)
+  begin
+    if(clk'event and clk = '1') then
+      if(enb = '1') then
+        ram_data_b <= ram(to_integer(unsigned(addrb)));
+        if(web = '1') then
+          ram(to_integer(unsigned(addrb))) := dinb;
+        end if;
+      end if;
+    end if;
+  end process;
+
+  douta <= ram_data_a;
+  doutb <= ram_data_b;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/framework/util/xilinx_TDP_RAM_synchronized.vhd b/fpga/src/memsec/hdl/framework/util/xilinx_TDP_RAM_synchronized.vhd
new file mode 100644
index 0000000..3004ee0
--- /dev/null
+++ b/fpga/src/memsec/hdl/framework/util/xilinx_TDP_RAM_synchronized.vhd
@@ -0,0 +1,173 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+--! Dual port RAM where each channel is fully synchronized with handshake signals.
+entity xilinx_TDP_RAM_synchronized is
+  generic(
+    ADDR_WIDTH : integer := 32;
+    DATA_WIDTH : integer := 64;
+    ENTRIES    : integer := 32  -- number of entries  (should be a power of 2)
+    );
+  port(
+    clk    : in std_logic;  -- clock
+    resetn : in std_logic;  -- reset for the internal registers, the RAM is not reset
+
+    addra : in  std_logic_vector(ADDR_WIDTH-1 downto 0);  -- Port A Address bus, width determined from RAM_DEPTH
+    dina  : in  std_logic_vector(DATA_WIDTH-1 downto 0);  -- Port A RAM input data
+    wea   : in  std_logic;                                -- Port A Write enable
+    vina  : in  std_logic;                                -- Port A Input data is valid
+    rina  : out std_logic;                                -- Port A Input data has been processed (=ready)
+
+    douta : out std_logic_vector(DATA_WIDTH-1 downto 0);  -- Port A RAM output data
+    vouta : out std_logic;                                -- Port A Output data is valid
+    routa : in  std_logic;                                -- Port A Output data has been processed (=ready)
+
+    addrb : in  std_logic_vector(ADDR_WIDTH-1 downto 0);  -- Port B Address bus, width determined from RAM_DEPTH
+    dinb  : in  std_logic_vector(DATA_WIDTH-1 downto 0);  -- Port B RAM input data
+    web   : in  std_logic;                                -- Port B Write enable
+    vinb  : in  std_logic;                                -- Port B Input data is valid
+    rinb  : out std_logic;                                -- Port B Input data has been processed (=ready)
+
+    doutb : out std_logic_vector(DATA_WIDTH-1 downto 0);  -- Port B RAM output data
+    voutb : out std_logic;                                -- Port B Output data is valid
+    routb : in  std_logic                                 -- Port B Output data has been processed (=ready)
+    );
+end xilinx_TDP_RAM_synchronized;
+
+architecture arch_imp of xilinx_TDP_RAM_synchronized is
+  signal out_reg_axDP, out_reg_axDN     : std_logic_vector(DATA_WIDTH-1 downto 0);
+  signal out_reg_bxDP, out_reg_bxDN     : std_logic_vector(DATA_WIDTH-1 downto 0);
+  signal reg_a_validxDP, reg_a_validxDN : std_logic;
+  signal reg_b_validxDP, reg_b_validxDN : std_logic;
+  signal ram_data_a_validxDP            : std_logic;
+  signal ram_data_b_validxDP            : std_logic;
+
+  signal enable_a, enable_b     : std_logic;
+  signal ram_data_a, ram_data_b : std_logic_vector(DATA_WIDTH-1 downto 0);
+begin
+
+  regs : process(clk) is
+  begin
+    if rising_edge(clk) then
+      if resetn = '0' then
+        out_reg_axDP        <= (others => '0');
+        out_reg_bxDP        <= (others => '0');
+        reg_a_validxDP      <= '0';
+        reg_b_validxDP      <= '0';
+        ram_data_a_validxDP <= '0';
+        ram_data_b_validxDP <= '0';
+      else
+        out_reg_axDP        <= out_reg_axDN;
+        out_reg_bxDP        <= out_reg_bxDN;
+        reg_a_validxDP      <= reg_a_validxDN;
+        reg_b_validxDP      <= reg_b_validxDN;
+        ram_data_a_validxDP <= enable_a;
+        ram_data_b_validxDP <= enable_b;
+      end if;
+    end if;
+  end process regs;
+
+  comb : process(out_reg_axDP, out_reg_bxDP, ram_data_a, ram_data_a_validxDP,
+                 ram_data_b, ram_data_b_validxDP, reg_a_validxDP,
+                 reg_b_validxDP, routa, routb, vina, vinb)
+  begin
+    out_reg_axDN   <= out_reg_axDP;
+    out_reg_bxDN   <= out_reg_bxDP;
+    reg_a_validxDN <= reg_a_validxDP;
+    reg_b_validxDN <= reg_b_validxDP;
+    enable_a       <= '0';
+    enable_b       <= '0';
+    rina           <= '0';
+    rinb           <= '0';
+
+    -- By default the data from the RAM is directly output.
+    -- But if data is in the output registers, this data is returned instead.
+    douta <= ram_data_a;
+    doutb <= ram_data_b;
+    vouta <= ram_data_a_validxDP;
+    voutb <= ram_data_b_validxDP;
+    if reg_a_validxDP = '1' then
+      douta <= out_reg_axDP;
+      vouta <= '1';
+      if routa = '1' then
+        reg_a_validxDN <= '0';
+      end if;
+    end if;
+    if reg_b_validxDP = '1' then
+      doutb <= out_reg_bxDP;
+      voutb <= '1';
+      if routb = '1' then
+        reg_b_validxDN <= '0';
+      end if;
+    end if;
+
+    -- Write the output data from the RAM into the output registers when it is
+    -- not read from the output.
+    if ram_data_a_validxDP = '1' and routa = '0' then
+      out_reg_axDN   <= ram_data_a;
+      reg_a_validxDN <= '1';
+    end if;
+    if ram_data_b_validxDP = '1' and routb = '0' then
+      out_reg_bxDN   <= ram_data_b;
+      reg_b_validxDN <= '1';
+    end if;
+
+    -- Perform the actual RAM operation given that the result can always be
+    -- stored in the output register.
+    if vina = '1' and reg_a_validxDP = '0' and (ram_data_a_validxDP = '0' or routa = '1') then
+      enable_a <= '1';
+      rina     <= '1';
+    end if;
+    if vinb = '1' and reg_b_validxDP = '0' and (ram_data_b_validxDP = '0' or routb = '1') then
+      enable_b <= '1';
+      rinb     <= '1';
+    end if;
+
+  end process comb;
+
+  ram : entity work.xilinx_TDP_RAM
+    generic map(
+      ADDR_WIDTH => ADDR_WIDTH,
+      DATA_WIDTH => DATA_WIDTH,
+      ENTRIES    => ENTRIES
+      )
+    port map (
+      clk => clk,
+
+      addra => addra,
+      addrb => addrb,
+      dina  => dina,
+      dinb  => dinb,
+
+      wea => wea,
+      web => web,
+      ena => enable_a,
+      enb => enable_b,
+
+      douta => ram_data_a,
+      doutb => ram_data_b
+      );
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/memsec_config.vhd b/fpga/src/memsec/hdl/memsec_config.vhd
new file mode 100644
index 0000000..334c928
--- /dev/null
+++ b/fpga/src/memsec/hdl/memsec_config.vhd
@@ -0,0 +1,23 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+package memsec_config is
+  constant DATASTREAM_DATA_WIDTH : integer := 64;
+end package;
diff --git a/fpga/src/memsec/hdl/memsec_functions.vhd b/fpga/src/memsec/hdl/memsec_functions.vhd
new file mode 100644
index 0000000..09069e4
--- /dev/null
+++ b/fpga/src/memsec/hdl/memsec_functions.vhd
@@ -0,0 +1,310 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+package memsec_functions is
+  function zeros (constant WIDTH      : natural) return std_logic_vector;
+  function uzeros (constant WIDTH     : natural) return unsigned;
+  function ones (constant WIDTH       : natural) return std_logic_vector;
+  function mask (constant ONES_WIDTH  : natural; constant WIDTH : natural) return std_logic_vector;
+  function dynamic_mask (ONES_WIDTH   : natural; constant WIDTH : natural) return std_logic_vector;
+  function to_std_logic (constant val : boolean) return std_logic;
+
+  function log2_ceil(constant value : natural) return natural;
+  function maximum(constant left    : integer; constant right : integer) return integer;
+  function minimum(constant left    : integer; constant right : integer) return integer;
+  function reverse_bit_order (a     : std_logic_vector) return std_logic_vector;
+  function change_endianess(vec     : std_logic_vector) return std_logic_vector;
+
+  function hamming_weight(a : natural) return integer;
+  function offset_width(a   : natural; b : natural) return integer;
+
+  -- Slices the given vector from high downto low.
+  function slice(data : std_logic_vector; constant high : integer; constant low : integer) return std_logic_vector;
+  function slice(data : unsigned; constant high : integer; constant low : integer) return unsigned;
+  function slice(data : signed; constant high : integer; constant low : integer) return signed;
+
+  -- Zero extends the given vector to the specified length.
+  function uzextend(data : unsigned; constant len : natural) return unsigned;
+  function uzextend(data : std_logic_vector; constant len : natural) return unsigned;
+
+  -- Aligns a data value by zeroing out the lowest x bits.
+  function ualign(data : unsigned; constant x : natural) return unsigned;
+  function ualign(data : std_logic_vector; constant x : natural) return unsigned;
+  function ualign_dynamic(data : unsigned; x : unsigned) return unsigned;
+  function ualign_dynamic(data : std_logic_vector; x : std_logic_vector) return unsigned;
+
+  -- Calculate length of an AXI request in bytes. Note that the length fields on the AXI bus are
+  -- -1 encoded and the size fields are logarithmic encoded.
+  function uaxi_bytes_len(axi_len : unsigned; axi_size : unsigned; constant ulen : natural) return unsigned;
+  function uaxi_bytes_len(axi_len : std_logic_vector; axi_size : std_logic_vector; constant ulen : natural) return unsigned;
+  function uaxi_bytes_len(axi_len : std_logic_vector; constant axi_size : natural; constant ulen : natural) return unsigned;
+
+  function slice_bits(data : std_logic_vector; width_a : natural; width_b : natural) return std_logic_vector;
+  function set_bits(data   : std_logic_vector; bits : std_logic_vector; width_a : natural; width_b : natural) return std_logic_vector;
+end package;
+
+package body memsec_functions is
+
+  function maximum(constant left  : integer;
+                   constant right : integer)
+    return integer is
+  begin
+    if right > left then
+      return right;
+    end if;
+    return left;
+  end maximum;
+
+  function minimum(constant left  : integer;
+                   constant right : integer)
+    return integer is
+  begin
+    if right < left then
+      return right;
+    end if;
+    return left;
+  end minimum;
+
+  function zeros (
+    constant WIDTH : natural)
+    return std_logic_vector is
+    variable x : std_logic_vector(WIDTH-1 downto 0);
+  begin
+    x := (others => '0');
+    return x;
+  end zeros;
+
+  function uzeros (
+    constant WIDTH : natural)
+    return unsigned is
+    variable x : unsigned(WIDTH-1 downto 0);
+  begin
+    x := (others => '0');
+    return x;
+  end uzeros;
+
+  function ones (
+    constant WIDTH : natural)
+    return std_logic_vector is
+  begin
+    return not(zeros(WIDTH));
+  end ones;
+
+  function mask (
+    constant ONES_WIDTH : natural;
+    constant WIDTH      : natural)
+    return std_logic_vector is
+  begin
+    return zeros(WIDTH-ONES_WIDTH) & ones(ONES_WIDTH);
+  end mask;
+
+  function dynamic_mask (
+    ONES_WIDTH     : natural;
+    constant WIDTH : natural)
+    return std_logic_vector is
+    variable x : std_logic_vector(WIDTH-1 downto 0);
+  begin
+    x := std_logic_vector(to_unsigned(2**ONES_WIDTH - 1, WIDTH));
+    return x;
+  end dynamic_mask;
+
+  function to_std_logic(
+    constant val : boolean)
+    return std_logic is
+  begin
+    if val then
+      return '1';
+    else
+      return '0';
+    end if;
+  end to_std_logic;
+
+  function log2_ceil(
+    constant value : natural)
+    return natural is
+  begin
+    if (value <= 1) then
+      return 0;
+    elsif (value = 2) then
+      return 1;
+    elsif (value mod 2 = 0) then
+      return 1 + log2_ceil(value/2);
+    else
+      return 1 + log2_ceil((value+1)/2);
+    end if;
+  end log2_ceil;
+
+  function reverse_bit_order (a : std_logic_vector)
+    return std_logic_vector is
+    variable result : std_logic_vector(a'range);
+    alias aa        : std_logic_vector(a'reverse_range) is a;
+  begin
+    for i in aa'range loop
+      result(i) := aa(i);
+    end loop;
+    return result;
+  end reverse_bit_order;
+
+  function change_endianess(vec : std_logic_vector) return std_logic_vector is
+    variable vRet      : std_logic_vector(vec'range);
+    constant cNumBytes : natural := vec'length / 8;
+  begin
+    for i in 0 to cNumBytes-1 loop
+      for j in 7 downto 0 loop
+        vRet(8*i + j) := vec(8*(cNumBytes-1-i) + j);
+      end loop;  -- j
+    end loop;  -- i
+    return vRet;
+  end change_endianess;
+
+  function hamming_weight(a : natural) return integer is
+    variable vector : std_logic_vector(log2_ceil(a)-1 downto 0);
+    variable hw     : integer;
+  begin
+    hw     := 0;
+    vector := std_logic_vector(to_unsigned(a, log2_ceil(a)));
+    for i in 0 to log2_ceil(a)-1 loop
+      if vector(i) = '1' then
+        hw := hw + 1;
+      end if;
+    end loop;
+    return hw;
+  end hamming_weight;
+
+  function offset_width(a : natural; b : natural) return integer is
+  begin
+    if a > b then
+      return log2_ceil(a/b);
+    elsif a = b then
+      return 0;
+    else
+      return log2_ceil(b/a);
+    end if;
+  end offset_width;
+
+  function slice(data : std_logic_vector; constant high : integer; constant low : integer) return std_logic_vector is
+    variable bits : std_logic_vector(high-low downto 0);
+  begin
+    bits := data(high downto low);
+    return bits;
+  end slice;
+
+  function slice(data : unsigned; constant high : integer; constant low : integer) return unsigned is
+    variable bits : unsigned(high-low downto 0);
+  begin
+    bits := data(high downto low);
+    return bits;
+  end slice;
+
+  function slice(data : signed; constant high : integer; constant low : integer) return signed is
+    variable bits : signed(high-low downto 0);
+  begin
+    bits := data(high downto low);
+    return bits;
+  end slice;
+
+  function uzextend(data : unsigned; constant len : natural) return unsigned is
+    variable bits : unsigned(len-1 downto 0);
+  begin
+    assert data'length <= len;
+    bits := (others => '0');
+    bits(data'length-1 downto 0) := data;
+    return bits;
+  end uzextend;
+
+  function uzextend(data : std_logic_vector; constant len : natural) return unsigned is
+    variable bits : unsigned(len-1 downto 0);
+  begin
+    assert data'length <= len;
+    bits := (others => '0');
+    bits(data'length-1 downto 0) := unsigned(data);
+    return bits;
+  end uzextend;
+
+  function ualign(data : unsigned; constant x : natural) return unsigned is
+  begin
+    return data and not unsigned(mask(x, data'length));
+  end ualign;
+
+  function ualign(data : std_logic_vector; constant x : natural) return unsigned is
+  begin
+    return ualign(unsigned(data), x);
+  end ualign;
+
+  function ualign_dynamic(data : unsigned; x : unsigned) return unsigned is
+  begin
+    return data and not unsigned(dynamic_mask(to_integer(x), data'length));
+  end ualign_dynamic;
+
+  function ualign_dynamic(data : std_logic_vector; x : std_logic_vector) return unsigned is
+  begin
+    return ualign_dynamic(unsigned(data), unsigned(x));
+  end ualign_dynamic;
+
+  function uaxi_bytes_len(axi_len : unsigned; axi_size : unsigned; constant ulen : natural) return unsigned is
+    variable result : unsigned(ulen-1 downto 0);
+  begin
+    result := uzextend(axi_len, ulen);
+    result := (result sll to_integer(axi_size)) or unsigned(dynamic_mask(to_integer(axi_size), ulen));
+    return result;
+  end uaxi_bytes_len;
+
+  function uaxi_bytes_len(axi_len : std_logic_vector; axi_size : std_logic_vector; constant ulen : natural) return unsigned is
+  begin
+    return uaxi_bytes_len(unsigned(axi_len), unsigned(axi_size), ulen);
+  end uaxi_bytes_len;
+
+  function uaxi_bytes_len(axi_len : std_logic_vector; constant axi_size : natural; constant ulen : natural) return unsigned is
+    variable result : unsigned(ulen-1 downto 0);
+  begin
+    result := uzextend(axi_len, ulen);
+    result := (result sll axi_size) or unsigned(mask(axi_size, ulen));
+    return result;
+  end uaxi_bytes_len;
+
+  function slice_bits(data : std_logic_vector; width_a : natural; width_b : natural) return std_logic_vector is
+    variable bits : std_logic_vector(offset_width(width_a, width_b)-1 downto 0);
+  begin
+    bits := (others => '0');
+    if width_a > width_b then
+      bits := data(log2_ceil(width_a)-1 downto log2_ceil(width_b));
+    elsif width_b > width_a then
+      bits := data(log2_ceil(width_b)-1 downto log2_ceil(width_a));
+    end if;
+    return bits;
+  end slice_bits;
+
+  function set_bits(data : std_logic_vector; bits : std_logic_vector; width_a : natural; width_b : natural) return std_logic_vector is
+    variable output : std_logic_vector(data'length-1 downto 0);
+  begin
+    output := data;
+    if width_a > width_b then
+      output(log2_ceil(width_a)-1 downto log2_ceil(width_b)) := bits;
+    elsif width_b > width_a then
+      output(log2_ceil(width_b)-1 downto log2_ceil(width_a)) := bits;
+    end if;
+    return output;
+  end set_bits;
+end package body;
diff --git a/fpga/src/memsec/hdl/memsec_pkg.vhd b/fpga/src/memsec/hdl/memsec_pkg.vhd
new file mode 100644
index 0000000..c5147b9
--- /dev/null
+++ b/fpga/src/memsec/hdl/memsec_pkg.vhd
@@ -0,0 +1,138 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_config.all;
+
+package memsec_pkg is
+  -- Crypto configs
+  type CryptoConfig is (CRYPTO_PLAIN, CRYPTO_AES_ECB, CRYPTO_AES_CBC, CRYPTO_AES_XTS,
+                        CRYPTO_PRINCE_ECB, CRYPTO_PRINCE_CBC, CRYPTO_PRINCE_XTS, CRYPTO_QARMA_CBC);
+
+  -- constants for the master interface
+  constant ADDRESS_WIDTH : integer := 64;
+  constant ID_WIDTH      : integer := 4;
+  constant USER_WIDTH    : integer := 128;
+
+  -- constants for the slave interface
+  constant DATASTREAM_DATA_WIDTH : integer := work.memsec_config.DATASTREAM_DATA_WIDTH;
+  constant DATASTREAM_DATA_BYTES : integer := DATASTREAM_DATA_WIDTH/8;
+  constant AXI_LEN_WIDTH         : integer := 8;   -- always 8 in AXI4
+  constant AXI_DATA_WIDTH        : integer := 64;  -- always 32 on Zynq
+
+  subtype LenType is std_logic_vector(AXI_LEN_WIDTH-1 downto 0);
+  subtype ULenType is unsigned(AXI_LEN_WIDTH-1 downto 0);
+  subtype ByteLenType is std_logic_vector(AXI_LEN_WIDTH+1 downto 0);
+  subtype UByteLenType is unsigned(AXI_LEN_WIDTH+1 downto 0);
+  subtype SizeType is std_logic_vector(2 downto 0);
+  subtype USizeType is unsigned(2 downto 0);
+  subtype AddressType is std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+  subtype UAddressType is unsigned(ADDRESS_WIDTH-1 downto 0);
+
+  subtype DataBlockType is std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+
+  -- constants for burst types
+  constant BURST_TYPE_INCREMENTAL : std_logic_vector(1 downto 0) := "01";
+  constant BURST_TYPE_WRAPPING    : std_logic_vector(1 downto 0) := "10";
+
+  -- constants for request types
+  constant REQ_TYPE_DATA      : std_logic_vector(1 downto 0) := "00";
+  constant REQ_TYPE_TREE      : std_logic_vector(1 downto 0) := "10";
+  constant REQ_TYPE_TREE_ROOT : std_logic_vector(1 downto 0) := "11";
+
+  --! Stream type for the main internal data stream.
+  --!
+  --! The stream models transactions which can consists of multiple requests.
+  --! The last request in a transaction is marked with the respective flag.
+  --! Additionally, every request can again consist of multiple data beats.
+  --! The number of remaining beats in a request is communicated via the
+  --! block_len field.
+  type StreamType is record
+    request_type  : std_logic_vector(1 downto 0);               --! Distinguish data from tree and tree root requests.
+    virt_address  : AddressType;                                --! Virtual address of the beat. Only available after
+                                                                --! the fetcher.
+    block_address : AddressType;                                --! Block address of the beat. Before the crypto
+                                                                --! request modification addresses are virtual and
+                                                                --! afterwards physical.
+    block_len     : std_logic_vector(AXI_LEN_WIDTH-1 downto 0); --! Remaining beats in the request.
+                                                                --! (0...last beat, 0xFF unkown)
+    address       : AddressType;                                --! Originally requested virtual address from the bus.
+    id            : std_logic_vector(ID_WIDTH-1 downto 0);      --! Originally requested id from the bus.
+    len           : LenType;                                    --! Originally requested length from the bus.
+    size          : SizeType;                                   --! Originally requested size from the bus.
+    burst         : std_logic_vector(1 downto 0);               --! Originally requested burst type from the bus.
+    cache         : std_logic_vector(3 downto 0);               --! Originally requested cache config from the bus.
+    prot          : std_logic_vector(2 downto 0);               --! Originally requested protection config from the bus.
+    user          : std_logic_vector(USER_WIDTH-1 downto 0);    --! Originally requested usersignal from the bus.
+    lock          : std_logic;                                  --! Originally requested locking config from the bus.
+    qos           : std_logic_vector(3 downto 0);               --! Originally requested qos config from the bus.
+    region        : std_logic_vector(3 downto 0);               --! Originally requested region specifier from the bus.
+    read          : std_logic;                                  --! Mark transaction as data read.
+    last_request  : std_logic;                                  --! Mark transaction as last within a request.
+    data          : DataBlockType;                              --! Actual data which is transfered during one beat.
+    valid         : std_logic;                                  --! Mark beat (and all its config flags) as valid.
+    metadata      : std_logic;                                  --! Mark beat as metadata.
+    error         : std_logic;                                  --! Signal an error in the transaction.
+  end record;
+
+  constant StreamType_default : StreamType := (
+    request_type  => REQ_TYPE_DATA,
+    virt_address  => (others => '0'),
+    block_address => (others => '0'),
+    block_len     => (others => '0'),
+    address       => (others => '0'),
+    id            => (others => '0'),
+    len           => (others => '0'),
+    size          => (others => '0'),
+    burst         => (others => '0'),
+    cache         => (others => '0'),
+    prot          => (others => '0'),
+    user          => (others => '0'),
+    lock          => '0',
+    qos           => (others => '0'),
+    region        => (others => '0'),
+    read          => '0',
+    last_request  => '0',
+    data          => (others => '0'),
+    valid         => '0',
+    metadata      => '0',
+    error         => '0'
+    );
+
+  type StreamArrayType is array(natural range <>) of StreamType;
+
+  --! Data stream type with support for transactions and strobes
+  type BlockStreamType is record
+    data    : DataBlockType;                                        --! data bits of the beat
+    strobes : std_logic_vector(DATASTREAM_DATA_BYTES - 1 downto 0); --! byte strobes, one bit marks 8 data bits as
+                                                                    --! valid if set to true
+    last    : std_logic;                                            --! marks the last beat in transaction
+    valid   : std_logic;                                            --! marks the beat as valid
+  end record;
+
+  constant BlockStreamType_default : BlockStreamType := (
+    data    => (others => '0'),
+    strobes => (others => '0'),
+    last    => '0',
+    valid   => '0'
+    );
+end package;
diff --git a/fpga/src/memsec/hdl/top/memsec.vhd b/fpga/src/memsec/hdl/top/memsec.vhd
new file mode 100644
index 0000000..103c2cb
--- /dev/null
+++ b/fpga/src/memsec/hdl/top/memsec.vhd
@@ -0,0 +1,1674 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+entity memsec is
+  generic(
+    -- Parameters of Axi Slave Bus Interface S_AXI
+    C_S_AXI_TARGET_SLAVE_BASE_ADDR : std_logic_vector := x"40000000";
+    C_S_AXI_ID_WIDTH               : integer          := 4;
+    C_S_AXI_DATA_WIDTH             : integer          := 32;
+    C_S_AXI_ADDR_WIDTH             : integer          := 32;
+    C_S_AXI_AWUSER_WIDTH           : integer          := 0;
+    C_S_AXI_ARUSER_WIDTH           : integer          := 0;
+    C_S_AXI_WUSER_WIDTH            : integer          := 0;
+    C_S_AXI_RUSER_WIDTH            : integer          := 0;
+    C_S_AXI_BUSER_WIDTH            : integer          := 0;
+
+    -- Parameters of Axi Master Bus Interface M_AXI
+    C_M_AXI_BURST_LEN    : integer := 16;
+    C_M_AXI_ID_WIDTH     : integer := 4;
+    C_M_AXI_ADDR_WIDTH   : integer := 32;
+    C_M_AXI_DATA_WIDTH   : integer := 64;
+    C_M_AXI_AWUSER_WIDTH : integer := 0;
+    C_M_AXI_ARUSER_WIDTH : integer := 0;
+    C_M_AXI_WUSER_WIDTH  : integer := 0;
+    C_M_AXI_RUSER_WIDTH  : integer := 0;
+    C_M_AXI_BUSER_WIDTH  : integer := 0;
+
+    -- Generic module config
+    CRYPTO_CONFIG : integer := 1; -- 0 plain, 1 Ascon, 2 TEC Tree Ascon,
+                                  -- 3 Prince ECB, 4 AES ECB,
+                                  -- 5 Prince CBC, 6 AES CBC,
+                                  -- 7 Prince XTS, 8 AES XTS
+                                  -- 9 MEAS, 10 MEAS ECB
+                                  -- 11 QARMA CBC
+
+    -- Tree specific parameters
+    DATA_MEMORY_SIZE     : integer := 256*1024*1024;  --! Size of the protected memory in byte. (virtual address space)
+    TREE_ARITY           : integer := 4;              --! Number of elements in one tree node.
+    TREE_ROOTS           : integer := 1024;           --! Number of trees which are used to protect the data memory.
+    TREE_NODE_CACHE_SIZE : integer := 1024;           --! Number of entries which can be stored in the tree node cache.
+
+    -- Ascon specific parameters
+    DATA_BLOCK_SIZE : integer := 64;   --! Size of one block in the virtual address space in byte.
+
+    -- XTS/CBC specific parameters
+    BLOCKS_PER_SECTOR : integer := 2;  --! Number of blocks which form a sector in XTS or CBC mode. (req. power of 2)
+    DATA_TAG_SIZE     : integer := 16  --! Size of the data tags (for MEAS modes)
+    );
+  port(
+    -- Ports of Axi Slave Bus Interface S_AXI
+    s_axi_aclk    : in std_logic;
+    s_axi_aresetn : in std_logic;
+
+    s_axi_awid     : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_awaddr   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_awlen    : in  std_logic_vector(7 downto 0);
+    s_axi_awsize   : in  std_logic_vector(2 downto 0);
+    s_axi_awburst  : in  std_logic_vector(1 downto 0);
+    s_axi_awlock   : in  std_logic;
+    s_axi_awcache  : in  std_logic_vector(3 downto 0);
+    s_axi_awprot   : in  std_logic_vector(2 downto 0);
+    s_axi_awqos    : in  std_logic_vector(3 downto 0);
+    s_axi_awregion : in  std_logic_vector(3 downto 0);
+    s_axi_awuser   : in  std_logic_vector(C_S_AXI_AWUSER_WIDTH - 1 downto 0);
+    s_axi_awvalid  : in  std_logic;
+    s_axi_awready  : out std_logic;
+    s_axi_wdata    : in  std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_wstrb    : in  std_logic_vector((C_S_AXI_DATA_WIDTH / 8) - 1 downto 0);
+    s_axi_wlast    : in  std_logic;
+    s_axi_wuser    : in  std_logic_vector(C_S_AXI_WUSER_WIDTH - 1 downto 0);
+    s_axi_wvalid   : in  std_logic;
+    s_axi_wready   : out std_logic;
+    s_axi_bid      : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_bresp    : out std_logic_vector(1 downto 0);
+    s_axi_buser    : out std_logic_vector(C_S_AXI_BUSER_WIDTH - 1 downto 0);
+    s_axi_bvalid   : out std_logic;
+    s_axi_bready   : in  std_logic;
+
+    s_axi_arid     : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_araddr   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_arlen    : in  std_logic_vector(7 downto 0);
+    s_axi_arsize   : in  std_logic_vector(2 downto 0);
+    s_axi_arburst  : in  std_logic_vector(1 downto 0);
+    s_axi_arlock   : in  std_logic;
+    s_axi_arcache  : in  std_logic_vector(3 downto 0);
+    s_axi_arprot   : in  std_logic_vector(2 downto 0);
+    s_axi_arqos    : in  std_logic_vector(3 downto 0);
+    s_axi_arregion : in  std_logic_vector(3 downto 0);
+    s_axi_aruser   : in  std_logic_vector(C_S_AXI_ARUSER_WIDTH - 1 downto 0);
+    s_axi_arvalid  : in  std_logic;
+    s_axi_arready  : out std_logic;
+    s_axi_rid      : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_rdata    : out std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_rresp    : out std_logic_vector(1 downto 0);
+    s_axi_rlast    : out std_logic;
+    s_axi_ruser    : out std_logic_vector(C_S_AXI_RUSER_WIDTH - 1 downto 0);
+    s_axi_rvalid   : out std_logic;
+    s_axi_rready   : in  std_logic;
+
+    -- Ports of Axi Master Bus Interface M_AXI
+    m_axi_aclk    : in std_logic;
+    m_axi_aresetn : in std_logic;
+
+    m_axi_awid     : out std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_awaddr   : out std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+    m_axi_awlen    : out std_logic_vector(7 downto 0);
+    m_axi_awsize   : out std_logic_vector(2 downto 0);
+    m_axi_awburst  : out std_logic_vector(1 downto 0);
+    m_axi_awlock   : out std_logic;
+    m_axi_awcache  : out std_logic_vector(3 downto 0);
+    m_axi_awprot   : out std_logic_vector(2 downto 0);
+    m_axi_awqos    : out std_logic_vector(3 downto 0);
+    m_axi_awregion : out std_logic_vector(3 downto 0);
+    m_axi_awuser   : out std_logic_vector(C_M_AXI_AWUSER_WIDTH - 1 downto 0);
+    m_axi_awvalid  : out std_logic;
+    m_axi_awready  : in  std_logic;
+    m_axi_wdata    : out std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+    m_axi_wstrb    : out std_logic_vector(C_M_AXI_DATA_WIDTH / 8 - 1 downto 0);
+    m_axi_wlast    : out std_logic;
+    m_axi_wuser    : out std_logic_vector(C_M_AXI_WUSER_WIDTH - 1 downto 0);
+    m_axi_wvalid   : out std_logic;
+    m_axi_wready   : in  std_logic;
+    m_axi_bid      : in  std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_bresp    : in  std_logic_vector(1 downto 0);
+    m_axi_buser    : in  std_logic_vector(C_M_AXI_BUSER_WIDTH - 1 downto 0);
+    m_axi_bvalid   : in  std_logic;
+    m_axi_bready   : out std_logic;
+
+    m_axi_arid     : out std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_araddr   : out std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+    m_axi_arlen    : out std_logic_vector(7 downto 0);
+    m_axi_arsize   : out std_logic_vector(2 downto 0);
+    m_axi_arburst  : out std_logic_vector(1 downto 0);
+    m_axi_arlock   : out std_logic;
+    m_axi_arcache  : out std_logic_vector(3 downto 0);
+    m_axi_arprot   : out std_logic_vector(2 downto 0);
+    m_axi_arqos    : out std_logic_vector(3 downto 0);
+    m_axi_arregion : out std_logic_vector(3 downto 0);
+    m_axi_aruser   : out std_logic_vector(C_M_AXI_ARUSER_WIDTH - 1 downto 0);
+    m_axi_arvalid  : out std_logic;
+    m_axi_arready  : in  std_logic;
+    m_axi_rid      : in  std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_rdata    : in  std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+    m_axi_rresp    : in  std_logic_vector(1 downto 0);
+    m_axi_rlast    : in  std_logic;
+    m_axi_ruser    : in  std_logic_vector(C_M_AXI_RUSER_WIDTH - 1 downto 0);
+    m_axi_rvalid   : in  std_logic;
+    m_axi_rready   : out std_logic
+    );
+end memsec;
+
+architecture arch_imp of memsec is
+
+begin
+
+  plain : if CRYPTO_CONFIG = 0 generate
+    memsec : entity work.memsec_block_encryption
+      generic map(
+        C_S_AXI_TARGET_SLAVE_BASE_ADDR => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+
+        C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+        C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+        C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+        C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+        C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+        C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+        C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+        C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+        C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+        C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+        C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+        C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+        C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+        C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+        C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+        DATA_BLOCK_SIZE      => DATASTREAM_DATA_WIDTH/8,
+        CRYPTO_CONFIG        => CRYPTO_PLAIN,
+        BLOCKS_PER_SECTOR    => BLOCKS_PER_SECTOR
+        )
+      port map(
+        s_axi_aclk     => s_axi_aclk,
+        s_axi_aresetn  => s_axi_aresetn,
+        s_axi_awid     => s_axi_awid,
+        s_axi_awaddr   => s_axi_awaddr,
+        s_axi_awlen    => s_axi_awlen,
+        s_axi_awsize   => s_axi_awsize,
+        s_axi_awburst  => s_axi_awburst,
+        s_axi_awlock   => s_axi_awlock,
+        s_axi_awcache  => s_axi_awcache,
+        s_axi_awprot   => s_axi_awprot,
+        s_axi_awqos    => s_axi_awqos,
+        s_axi_awregion => s_axi_awregion,
+        s_axi_awuser   => s_axi_awuser,
+        s_axi_awvalid  => s_axi_awvalid,
+        s_axi_awready  => s_axi_awready,
+        s_axi_wdata    => s_axi_wdata,
+        s_axi_wstrb    => s_axi_wstrb,
+        s_axi_wlast    => s_axi_wlast,
+        s_axi_wuser    => s_axi_wuser,
+        s_axi_wvalid   => s_axi_wvalid,
+        s_axi_wready   => s_axi_wready,
+        s_axi_bid      => s_axi_bid,
+        s_axi_bresp    => s_axi_bresp,
+        s_axi_buser    => s_axi_buser,
+        s_axi_bvalid   => s_axi_bvalid,
+        s_axi_bready   => s_axi_bready,
+
+        s_axi_arid     => s_axi_arid,
+        s_axi_araddr   => s_axi_araddr,
+        s_axi_arlen    => s_axi_arlen,
+        s_axi_arsize   => s_axi_arsize,
+        s_axi_arburst  => s_axi_arburst,
+        s_axi_arlock   => s_axi_arlock,
+        s_axi_arcache  => s_axi_arcache,
+        s_axi_arprot   => s_axi_arprot,
+        s_axi_arqos    => s_axi_arqos,
+        s_axi_arregion => s_axi_arregion,
+        s_axi_aruser   => s_axi_aruser,
+        s_axi_arvalid  => s_axi_arvalid,
+        s_axi_arready  => s_axi_arready,
+        s_axi_rid      => s_axi_rid,
+        s_axi_rdata    => s_axi_rdata,
+        s_axi_rresp    => s_axi_rresp,
+        s_axi_rlast    => s_axi_rlast,
+        s_axi_ruser    => s_axi_ruser,
+        s_axi_rvalid   => s_axi_rvalid,
+        s_axi_rready   => s_axi_rready,
+
+        m_axi_aclk    => m_axi_aclk,
+        m_axi_aresetn => m_axi_aresetn,
+        m_axi_awid    => m_axi_awid,
+        m_axi_awaddr  => m_axi_awaddr,
+        m_axi_awlen   => m_axi_awlen,
+        m_axi_awsize  => m_axi_awsize,
+        m_axi_awburst => m_axi_awburst,
+        m_axi_awlock  => m_axi_awlock,
+        m_axi_awcache => m_axi_awcache,
+        m_axi_awprot  => m_axi_awprot,
+        m_axi_awqos   => m_axi_awqos,
+        m_axi_awuser  => m_axi_awuser,
+        m_axi_awvalid => m_axi_awvalid,
+        m_axi_awready => m_axi_awready,
+        m_axi_wdata   => m_axi_wdata,
+        m_axi_wstrb   => m_axi_wstrb,
+        m_axi_wlast   => m_axi_wlast,
+        m_axi_wuser   => m_axi_wuser,
+        m_axi_wvalid  => m_axi_wvalid,
+        m_axi_wready  => m_axi_wready,
+        m_axi_bid     => m_axi_bid,
+        m_axi_bresp   => m_axi_bresp,
+        m_axi_buser   => m_axi_buser,
+        m_axi_bvalid  => m_axi_bvalid,
+        m_axi_bready  => m_axi_bready,
+
+        m_axi_arid    => m_axi_arid,
+        m_axi_araddr  => m_axi_araddr,
+        m_axi_arlen   => m_axi_arlen,
+        m_axi_arsize  => m_axi_arsize,
+        m_axi_arburst => m_axi_arburst,
+        m_axi_arlock  => m_axi_arlock,
+        m_axi_arcache => m_axi_arcache,
+        m_axi_arprot  => m_axi_arprot,
+        m_axi_arqos   => m_axi_arqos,
+        m_axi_aruser  => m_axi_aruser,
+        m_axi_arvalid => m_axi_arvalid,
+        m_axi_arready => m_axi_arready,
+        m_axi_rid     => m_axi_rid,
+        m_axi_rdata   => m_axi_rdata,
+        m_axi_rresp   => m_axi_rresp,
+        m_axi_rlast   => m_axi_rlast,
+        m_axi_ruser   => m_axi_ruser,
+        m_axi_rvalid  => m_axi_rvalid,
+        m_axi_rready  => m_axi_rready
+        );
+  end generate plain;
+
+  ascon : if CRYPTO_CONFIG = 1 generate
+    memsec : entity work.memsec_ascon
+      generic map(
+        C_S_AXI_TARGET_SLAVE_BASE_ADDR => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+
+        C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+        C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+        C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+        C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+        C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+        C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+        C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+        C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+        C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+        C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+        C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+        C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+        C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+        C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+        C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+
+        DATA_BLOCK_SIZE => DATA_BLOCK_SIZE
+        )
+      port map(
+        s_axi_aclk     => s_axi_aclk,
+        s_axi_aresetn  => s_axi_aresetn,
+        s_axi_awid     => s_axi_awid,
+        s_axi_awaddr   => s_axi_awaddr,
+        s_axi_awlen    => s_axi_awlen,
+        s_axi_awsize   => s_axi_awsize,
+        s_axi_awburst  => s_axi_awburst,
+        s_axi_awlock   => s_axi_awlock,
+        s_axi_awcache  => s_axi_awcache,
+        s_axi_awprot   => s_axi_awprot,
+        s_axi_awqos    => s_axi_awqos,
+        s_axi_awregion => s_axi_awregion,
+        s_axi_awuser   => s_axi_awuser,
+        s_axi_awvalid  => s_axi_awvalid,
+        s_axi_awready  => s_axi_awready,
+        s_axi_wdata    => s_axi_wdata,
+        s_axi_wstrb    => s_axi_wstrb,
+        s_axi_wlast    => s_axi_wlast,
+        s_axi_wuser    => s_axi_wuser,
+        s_axi_wvalid   => s_axi_wvalid,
+        s_axi_wready   => s_axi_wready,
+        s_axi_bid      => s_axi_bid,
+        s_axi_bresp    => s_axi_bresp,
+        s_axi_buser    => s_axi_buser,
+        s_axi_bvalid   => s_axi_bvalid,
+        s_axi_bready   => s_axi_bready,
+
+        s_axi_arid     => s_axi_arid,
+        s_axi_araddr   => s_axi_araddr,
+        s_axi_arlen    => s_axi_arlen,
+        s_axi_arsize   => s_axi_arsize,
+        s_axi_arburst  => s_axi_arburst,
+        s_axi_arlock   => s_axi_arlock,
+        s_axi_arcache  => s_axi_arcache,
+        s_axi_arprot   => s_axi_arprot,
+        s_axi_arqos    => s_axi_arqos,
+        s_axi_arregion => s_axi_arregion,
+        s_axi_aruser   => s_axi_aruser,
+        s_axi_arvalid  => s_axi_arvalid,
+        s_axi_arready  => s_axi_arready,
+        s_axi_rid      => s_axi_rid,
+        s_axi_rdata    => s_axi_rdata,
+        s_axi_rresp    => s_axi_rresp,
+        s_axi_rlast    => s_axi_rlast,
+        s_axi_ruser    => s_axi_ruser,
+        s_axi_rvalid   => s_axi_rvalid,
+        s_axi_rready   => s_axi_rready,
+
+        m_axi_aclk    => m_axi_aclk,
+        m_axi_aresetn => m_axi_aresetn,
+        m_axi_awid    => m_axi_awid,
+        m_axi_awaddr  => m_axi_awaddr,
+        m_axi_awlen   => m_axi_awlen,
+        m_axi_awsize  => m_axi_awsize,
+        m_axi_awburst => m_axi_awburst,
+        m_axi_awlock  => m_axi_awlock,
+        m_axi_awcache => m_axi_awcache,
+        m_axi_awprot  => m_axi_awprot,
+        m_axi_awqos   => m_axi_awqos,
+        m_axi_awuser  => m_axi_awuser,
+        m_axi_awvalid => m_axi_awvalid,
+        m_axi_awready => m_axi_awready,
+        m_axi_wdata   => m_axi_wdata,
+        m_axi_wstrb   => m_axi_wstrb,
+        m_axi_wlast   => m_axi_wlast,
+        m_axi_wuser   => m_axi_wuser,
+        m_axi_wvalid  => m_axi_wvalid,
+        m_axi_wready  => m_axi_wready,
+        m_axi_bid     => m_axi_bid,
+        m_axi_bresp   => m_axi_bresp,
+        m_axi_buser   => m_axi_buser,
+        m_axi_bvalid  => m_axi_bvalid,
+        m_axi_bready  => m_axi_bready,
+
+        m_axi_arid    => m_axi_arid,
+        m_axi_araddr  => m_axi_araddr,
+        m_axi_arlen   => m_axi_arlen,
+        m_axi_arsize  => m_axi_arsize,
+        m_axi_arburst => m_axi_arburst,
+        m_axi_arlock  => m_axi_arlock,
+        m_axi_arcache => m_axi_arcache,
+        m_axi_arprot  => m_axi_arprot,
+        m_axi_arqos   => m_axi_arqos,
+        m_axi_aruser  => m_axi_aruser,
+        m_axi_arvalid => m_axi_arvalid,
+        m_axi_arready => m_axi_arready,
+        m_axi_rid     => m_axi_rid,
+        m_axi_rdata   => m_axi_rdata,
+        m_axi_rresp   => m_axi_rresp,
+        m_axi_rlast   => m_axi_rlast,
+        m_axi_ruser   => m_axi_ruser,
+        m_axi_rvalid  => m_axi_rvalid,
+        m_axi_rready  => m_axi_rready
+        );
+  end generate ascon;
+
+  tectree_ascon : if CRYPTO_CONFIG = 2 generate
+    memsec : entity work.memsec_tectree_ascon
+      generic map(
+        C_S_AXI_TARGET_SLAVE_BASE_ADDR => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+
+        C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+        C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+        C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+        C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+        C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+        C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+        C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+        C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+        C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+        C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+        C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+        C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+        C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+        C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+        C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+
+        DATA_BLOCK_SIZE      => DATA_BLOCK_SIZE,
+        DATA_MEMORY_SIZE     => DATA_MEMORY_SIZE,
+        TREE_ARITY           => TREE_ARITY,
+        TREE_ROOTS           => TREE_ROOTS,
+        TREE_NODE_CACHE_SIZE => TREE_NODE_CACHE_SIZE
+        )
+      port map(
+        s_axi_aclk     => s_axi_aclk,
+        s_axi_aresetn  => s_axi_aresetn,
+        s_axi_awid     => s_axi_awid,
+        s_axi_awaddr   => s_axi_awaddr,
+        s_axi_awlen    => s_axi_awlen,
+        s_axi_awsize   => s_axi_awsize,
+        s_axi_awburst  => s_axi_awburst,
+        s_axi_awlock   => s_axi_awlock,
+        s_axi_awcache  => s_axi_awcache,
+        s_axi_awprot   => s_axi_awprot,
+        s_axi_awqos    => s_axi_awqos,
+        s_axi_awregion => s_axi_awregion,
+        s_axi_awuser   => s_axi_awuser,
+        s_axi_awvalid  => s_axi_awvalid,
+        s_axi_awready  => s_axi_awready,
+        s_axi_wdata    => s_axi_wdata,
+        s_axi_wstrb    => s_axi_wstrb,
+        s_axi_wlast    => s_axi_wlast,
+        s_axi_wuser    => s_axi_wuser,
+        s_axi_wvalid   => s_axi_wvalid,
+        s_axi_wready   => s_axi_wready,
+        s_axi_bid      => s_axi_bid,
+        s_axi_bresp    => s_axi_bresp,
+        s_axi_buser    => s_axi_buser,
+        s_axi_bvalid   => s_axi_bvalid,
+        s_axi_bready   => s_axi_bready,
+
+        s_axi_arid     => s_axi_arid,
+        s_axi_araddr   => s_axi_araddr,
+        s_axi_arlen    => s_axi_arlen,
+        s_axi_arsize   => s_axi_arsize,
+        s_axi_arburst  => s_axi_arburst,
+        s_axi_arlock   => s_axi_arlock,
+        s_axi_arcache  => s_axi_arcache,
+        s_axi_arprot   => s_axi_arprot,
+        s_axi_arqos    => s_axi_arqos,
+        s_axi_arregion => s_axi_arregion,
+        s_axi_aruser   => s_axi_aruser,
+        s_axi_arvalid  => s_axi_arvalid,
+        s_axi_arready  => s_axi_arready,
+        s_axi_rid      => s_axi_rid,
+        s_axi_rdata    => s_axi_rdata,
+        s_axi_rresp    => s_axi_rresp,
+        s_axi_rlast    => s_axi_rlast,
+        s_axi_ruser    => s_axi_ruser,
+        s_axi_rvalid   => s_axi_rvalid,
+        s_axi_rready   => s_axi_rready,
+
+        m_axi_aclk    => m_axi_aclk,
+        m_axi_aresetn => m_axi_aresetn,
+        m_axi_awid    => m_axi_awid,
+        m_axi_awaddr  => m_axi_awaddr,
+        m_axi_awlen   => m_axi_awlen,
+        m_axi_awsize  => m_axi_awsize,
+        m_axi_awburst => m_axi_awburst,
+        m_axi_awlock  => m_axi_awlock,
+        m_axi_awcache => m_axi_awcache,
+        m_axi_awprot  => m_axi_awprot,
+        m_axi_awqos   => m_axi_awqos,
+        m_axi_awuser  => m_axi_awuser,
+        m_axi_awvalid => m_axi_awvalid,
+        m_axi_awready => m_axi_awready,
+        m_axi_wdata   => m_axi_wdata,
+        m_axi_wstrb   => m_axi_wstrb,
+        m_axi_wlast   => m_axi_wlast,
+        m_axi_wuser   => m_axi_wuser,
+        m_axi_wvalid  => m_axi_wvalid,
+        m_axi_wready  => m_axi_wready,
+        m_axi_bid     => m_axi_bid,
+        m_axi_bresp   => m_axi_bresp,
+        m_axi_buser   => m_axi_buser,
+        m_axi_bvalid  => m_axi_bvalid,
+        m_axi_bready  => m_axi_bready,
+
+        m_axi_arid    => m_axi_arid,
+        m_axi_araddr  => m_axi_araddr,
+        m_axi_arlen   => m_axi_arlen,
+        m_axi_arsize  => m_axi_arsize,
+        m_axi_arburst => m_axi_arburst,
+        m_axi_arlock  => m_axi_arlock,
+        m_axi_arcache => m_axi_arcache,
+        m_axi_arprot  => m_axi_arprot,
+        m_axi_arqos   => m_axi_arqos,
+        m_axi_aruser  => m_axi_aruser,
+        m_axi_arvalid => m_axi_arvalid,
+        m_axi_arready => m_axi_arready,
+        m_axi_rid     => m_axi_rid,
+        m_axi_rdata   => m_axi_rdata,
+        m_axi_rresp   => m_axi_rresp,
+        m_axi_rlast   => m_axi_rlast,
+        m_axi_ruser   => m_axi_ruser,
+        m_axi_rvalid  => m_axi_rvalid,
+        m_axi_rready  => m_axi_rready
+        );
+  end generate tectree_ascon;
+
+  prince_ecb : if CRYPTO_CONFIG = 3 generate
+    memsec : entity work.memsec_block_encryption
+      generic map(
+        C_S_AXI_TARGET_SLAVE_BASE_ADDR => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+
+        C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+        C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+        C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+        C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+        C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+        C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+        C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+        C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+        C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+        C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+        C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+        C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+        C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+        C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+        C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+
+        CRYPTO_CONFIG     => CRYPTO_PRINCE_ECB,
+        DATA_BLOCK_SIZE   => maximum(8, DATASTREAM_DATA_WIDTH/8),
+        BLOCKS_PER_SECTOR => BLOCKS_PER_SECTOR
+        )
+      port map(
+        s_axi_aclk     => s_axi_aclk,
+        s_axi_aresetn  => s_axi_aresetn,
+        s_axi_awid     => s_axi_awid,
+        s_axi_awaddr   => s_axi_awaddr,
+        s_axi_awlen    => s_axi_awlen,
+        s_axi_awsize   => s_axi_awsize,
+        s_axi_awburst  => s_axi_awburst,
+        s_axi_awlock   => s_axi_awlock,
+        s_axi_awcache  => s_axi_awcache,
+        s_axi_awprot   => s_axi_awprot,
+        s_axi_awqos    => s_axi_awqos,
+        s_axi_awregion => s_axi_awregion,
+        s_axi_awuser   => s_axi_awuser,
+        s_axi_awvalid  => s_axi_awvalid,
+        s_axi_awready  => s_axi_awready,
+        s_axi_wdata    => s_axi_wdata,
+        s_axi_wstrb    => s_axi_wstrb,
+        s_axi_wlast    => s_axi_wlast,
+        s_axi_wuser    => s_axi_wuser,
+        s_axi_wvalid   => s_axi_wvalid,
+        s_axi_wready   => s_axi_wready,
+        s_axi_bid      => s_axi_bid,
+        s_axi_bresp    => s_axi_bresp,
+        s_axi_buser    => s_axi_buser,
+        s_axi_bvalid   => s_axi_bvalid,
+        s_axi_bready   => s_axi_bready,
+
+        s_axi_arid     => s_axi_arid,
+        s_axi_araddr   => s_axi_araddr,
+        s_axi_arlen    => s_axi_arlen,
+        s_axi_arsize   => s_axi_arsize,
+        s_axi_arburst  => s_axi_arburst,
+        s_axi_arlock   => s_axi_arlock,
+        s_axi_arcache  => s_axi_arcache,
+        s_axi_arprot   => s_axi_arprot,
+        s_axi_arqos    => s_axi_arqos,
+        s_axi_arregion => s_axi_arregion,
+        s_axi_aruser   => s_axi_aruser,
+        s_axi_arvalid  => s_axi_arvalid,
+        s_axi_arready  => s_axi_arready,
+        s_axi_rid      => s_axi_rid,
+        s_axi_rdata    => s_axi_rdata,
+        s_axi_rresp    => s_axi_rresp,
+        s_axi_rlast    => s_axi_rlast,
+        s_axi_ruser    => s_axi_ruser,
+        s_axi_rvalid   => s_axi_rvalid,
+        s_axi_rready   => s_axi_rready,
+
+        m_axi_aclk    => m_axi_aclk,
+        m_axi_aresetn => m_axi_aresetn,
+        m_axi_awid    => m_axi_awid,
+        m_axi_awaddr  => m_axi_awaddr,
+        m_axi_awlen   => m_axi_awlen,
+        m_axi_awsize  => m_axi_awsize,
+        m_axi_awburst => m_axi_awburst,
+        m_axi_awlock  => m_axi_awlock,
+        m_axi_awcache => m_axi_awcache,
+        m_axi_awprot  => m_axi_awprot,
+        m_axi_awqos   => m_axi_awqos,
+        m_axi_awuser  => m_axi_awuser,
+        m_axi_awvalid => m_axi_awvalid,
+        m_axi_awready => m_axi_awready,
+        m_axi_wdata   => m_axi_wdata,
+        m_axi_wstrb   => m_axi_wstrb,
+        m_axi_wlast   => m_axi_wlast,
+        m_axi_wuser   => m_axi_wuser,
+        m_axi_wvalid  => m_axi_wvalid,
+        m_axi_wready  => m_axi_wready,
+        m_axi_bid     => m_axi_bid,
+        m_axi_bresp   => m_axi_bresp,
+        m_axi_buser   => m_axi_buser,
+        m_axi_bvalid  => m_axi_bvalid,
+        m_axi_bready  => m_axi_bready,
+
+        m_axi_arid    => m_axi_arid,
+        m_axi_araddr  => m_axi_araddr,
+        m_axi_arlen   => m_axi_arlen,
+        m_axi_arsize  => m_axi_arsize,
+        m_axi_arburst => m_axi_arburst,
+        m_axi_arlock  => m_axi_arlock,
+        m_axi_arcache => m_axi_arcache,
+        m_axi_arprot  => m_axi_arprot,
+        m_axi_arqos   => m_axi_arqos,
+        m_axi_aruser  => m_axi_aruser,
+        m_axi_arvalid => m_axi_arvalid,
+        m_axi_arready => m_axi_arready,
+        m_axi_rid     => m_axi_rid,
+        m_axi_rdata   => m_axi_rdata,
+        m_axi_rresp   => m_axi_rresp,
+        m_axi_rlast   => m_axi_rlast,
+        m_axi_ruser   => m_axi_ruser,
+        m_axi_rvalid  => m_axi_rvalid,
+        m_axi_rready  => m_axi_rready
+        );
+  end generate prince_ecb;
+
+  aes_ecb : if CRYPTO_CONFIG = 4 generate
+    memsec : entity work.memsec_block_encryption
+      generic map(
+        C_S_AXI_TARGET_SLAVE_BASE_ADDR => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+
+        C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+        C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+        C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+        C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+        C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+        C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+        C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+        C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+        C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+        C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+        C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+        C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+        C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+        C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+        C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+
+        CRYPTO_CONFIG     => CRYPTO_AES_ECB,
+        DATA_BLOCK_SIZE   => maximum(16, DATASTREAM_DATA_WIDTH/8),
+        BLOCKS_PER_SECTOR => BLOCKS_PER_SECTOR
+        )
+      port map(
+        s_axi_aclk     => s_axi_aclk,
+        s_axi_aresetn  => s_axi_aresetn,
+        s_axi_awid     => s_axi_awid,
+        s_axi_awaddr   => s_axi_awaddr,
+        s_axi_awlen    => s_axi_awlen,
+        s_axi_awsize   => s_axi_awsize,
+        s_axi_awburst  => s_axi_awburst,
+        s_axi_awlock   => s_axi_awlock,
+        s_axi_awcache  => s_axi_awcache,
+        s_axi_awprot   => s_axi_awprot,
+        s_axi_awqos    => s_axi_awqos,
+        s_axi_awregion => s_axi_awregion,
+        s_axi_awuser   => s_axi_awuser,
+        s_axi_awvalid  => s_axi_awvalid,
+        s_axi_awready  => s_axi_awready,
+        s_axi_wdata    => s_axi_wdata,
+        s_axi_wstrb    => s_axi_wstrb,
+        s_axi_wlast    => s_axi_wlast,
+        s_axi_wuser    => s_axi_wuser,
+        s_axi_wvalid   => s_axi_wvalid,
+        s_axi_wready   => s_axi_wready,
+        s_axi_bid      => s_axi_bid,
+        s_axi_bresp    => s_axi_bresp,
+        s_axi_buser    => s_axi_buser,
+        s_axi_bvalid   => s_axi_bvalid,
+        s_axi_bready   => s_axi_bready,
+
+        s_axi_arid     => s_axi_arid,
+        s_axi_araddr   => s_axi_araddr,
+        s_axi_arlen    => s_axi_arlen,
+        s_axi_arsize   => s_axi_arsize,
+        s_axi_arburst  => s_axi_arburst,
+        s_axi_arlock   => s_axi_arlock,
+        s_axi_arcache  => s_axi_arcache,
+        s_axi_arprot   => s_axi_arprot,
+        s_axi_arqos    => s_axi_arqos,
+        s_axi_arregion => s_axi_arregion,
+        s_axi_aruser   => s_axi_aruser,
+        s_axi_arvalid  => s_axi_arvalid,
+        s_axi_arready  => s_axi_arready,
+        s_axi_rid      => s_axi_rid,
+        s_axi_rdata    => s_axi_rdata,
+        s_axi_rresp    => s_axi_rresp,
+        s_axi_rlast    => s_axi_rlast,
+        s_axi_ruser    => s_axi_ruser,
+        s_axi_rvalid   => s_axi_rvalid,
+        s_axi_rready   => s_axi_rready,
+
+        m_axi_aclk    => m_axi_aclk,
+        m_axi_aresetn => m_axi_aresetn,
+        m_axi_awid    => m_axi_awid,
+        m_axi_awaddr  => m_axi_awaddr,
+        m_axi_awlen   => m_axi_awlen,
+        m_axi_awsize  => m_axi_awsize,
+        m_axi_awburst => m_axi_awburst,
+        m_axi_awlock  => m_axi_awlock,
+        m_axi_awcache => m_axi_awcache,
+        m_axi_awprot  => m_axi_awprot,
+        m_axi_awqos   => m_axi_awqos,
+        m_axi_awuser  => m_axi_awuser,
+        m_axi_awvalid => m_axi_awvalid,
+        m_axi_awready => m_axi_awready,
+        m_axi_wdata   => m_axi_wdata,
+        m_axi_wstrb   => m_axi_wstrb,
+        m_axi_wlast   => m_axi_wlast,
+        m_axi_wuser   => m_axi_wuser,
+        m_axi_wvalid  => m_axi_wvalid,
+        m_axi_wready  => m_axi_wready,
+        m_axi_bid     => m_axi_bid,
+        m_axi_bresp   => m_axi_bresp,
+        m_axi_buser   => m_axi_buser,
+        m_axi_bvalid  => m_axi_bvalid,
+        m_axi_bready  => m_axi_bready,
+
+        m_axi_arid    => m_axi_arid,
+        m_axi_araddr  => m_axi_araddr,
+        m_axi_arlen   => m_axi_arlen,
+        m_axi_arsize  => m_axi_arsize,
+        m_axi_arburst => m_axi_arburst,
+        m_axi_arlock  => m_axi_arlock,
+        m_axi_arcache => m_axi_arcache,
+        m_axi_arprot  => m_axi_arprot,
+        m_axi_arqos   => m_axi_arqos,
+        m_axi_aruser  => m_axi_aruser,
+        m_axi_arvalid => m_axi_arvalid,
+        m_axi_arready => m_axi_arready,
+        m_axi_rid     => m_axi_rid,
+        m_axi_rdata   => m_axi_rdata,
+        m_axi_rresp   => m_axi_rresp,
+        m_axi_rlast   => m_axi_rlast,
+        m_axi_ruser   => m_axi_ruser,
+        m_axi_rvalid  => m_axi_rvalid,
+        m_axi_rready  => m_axi_rready
+        );
+  end generate aes_ecb;
+
+  prince_cbc : if CRYPTO_CONFIG = 5 generate
+    memsec : entity work.memsec_block_encryption
+      generic map(
+        C_S_AXI_TARGET_SLAVE_BASE_ADDR => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+
+        C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+        C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+        C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+        C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+        C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+        C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+        C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+        C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+        C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+        C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+        C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+        C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+        C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+        C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+        C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+
+        CRYPTO_CONFIG     => CRYPTO_PRINCE_CBC,
+        DATA_BLOCK_SIZE   => 8*BLOCKS_PER_SECTOR,
+        BLOCKS_PER_SECTOR => BLOCKS_PER_SECTOR
+        )
+      port map(
+        s_axi_aclk     => s_axi_aclk,
+        s_axi_aresetn  => s_axi_aresetn,
+        s_axi_awid     => s_axi_awid,
+        s_axi_awaddr   => s_axi_awaddr,
+        s_axi_awlen    => s_axi_awlen,
+        s_axi_awsize   => s_axi_awsize,
+        s_axi_awburst  => s_axi_awburst,
+        s_axi_awlock   => s_axi_awlock,
+        s_axi_awcache  => s_axi_awcache,
+        s_axi_awprot   => s_axi_awprot,
+        s_axi_awqos    => s_axi_awqos,
+        s_axi_awregion => s_axi_awregion,
+        s_axi_awuser   => s_axi_awuser,
+        s_axi_awvalid  => s_axi_awvalid,
+        s_axi_awready  => s_axi_awready,
+        s_axi_wdata    => s_axi_wdata,
+        s_axi_wstrb    => s_axi_wstrb,
+        s_axi_wlast    => s_axi_wlast,
+        s_axi_wuser    => s_axi_wuser,
+        s_axi_wvalid   => s_axi_wvalid,
+        s_axi_wready   => s_axi_wready,
+        s_axi_bid      => s_axi_bid,
+        s_axi_bresp    => s_axi_bresp,
+        s_axi_buser    => s_axi_buser,
+        s_axi_bvalid   => s_axi_bvalid,
+        s_axi_bready   => s_axi_bready,
+
+        s_axi_arid     => s_axi_arid,
+        s_axi_araddr   => s_axi_araddr,
+        s_axi_arlen    => s_axi_arlen,
+        s_axi_arsize   => s_axi_arsize,
+        s_axi_arburst  => s_axi_arburst,
+        s_axi_arlock   => s_axi_arlock,
+        s_axi_arcache  => s_axi_arcache,
+        s_axi_arprot   => s_axi_arprot,
+        s_axi_arqos    => s_axi_arqos,
+        s_axi_arregion => s_axi_arregion,
+        s_axi_aruser   => s_axi_aruser,
+        s_axi_arvalid  => s_axi_arvalid,
+        s_axi_arready  => s_axi_arready,
+        s_axi_rid      => s_axi_rid,
+        s_axi_rdata    => s_axi_rdata,
+        s_axi_rresp    => s_axi_rresp,
+        s_axi_rlast    => s_axi_rlast,
+        s_axi_ruser    => s_axi_ruser,
+        s_axi_rvalid   => s_axi_rvalid,
+        s_axi_rready   => s_axi_rready,
+
+        m_axi_aclk    => m_axi_aclk,
+        m_axi_aresetn => m_axi_aresetn,
+        m_axi_awid    => m_axi_awid,
+        m_axi_awaddr  => m_axi_awaddr,
+        m_axi_awlen   => m_axi_awlen,
+        m_axi_awsize  => m_axi_awsize,
+        m_axi_awburst => m_axi_awburst,
+        m_axi_awlock  => m_axi_awlock,
+        m_axi_awcache => m_axi_awcache,
+        m_axi_awprot  => m_axi_awprot,
+        m_axi_awqos   => m_axi_awqos,
+        m_axi_awuser  => m_axi_awuser,
+        m_axi_awvalid => m_axi_awvalid,
+        m_axi_awready => m_axi_awready,
+        m_axi_wdata   => m_axi_wdata,
+        m_axi_wstrb   => m_axi_wstrb,
+        m_axi_wlast   => m_axi_wlast,
+        m_axi_wuser   => m_axi_wuser,
+        m_axi_wvalid  => m_axi_wvalid,
+        m_axi_wready  => m_axi_wready,
+        m_axi_bid     => m_axi_bid,
+        m_axi_bresp   => m_axi_bresp,
+        m_axi_buser   => m_axi_buser,
+        m_axi_bvalid  => m_axi_bvalid,
+        m_axi_bready  => m_axi_bready,
+
+        m_axi_arid    => m_axi_arid,
+        m_axi_araddr  => m_axi_araddr,
+        m_axi_arlen   => m_axi_arlen,
+        m_axi_arsize  => m_axi_arsize,
+        m_axi_arburst => m_axi_arburst,
+        m_axi_arlock  => m_axi_arlock,
+        m_axi_arcache => m_axi_arcache,
+        m_axi_arprot  => m_axi_arprot,
+        m_axi_arqos   => m_axi_arqos,
+        m_axi_aruser  => m_axi_aruser,
+        m_axi_arvalid => m_axi_arvalid,
+        m_axi_arready => m_axi_arready,
+        m_axi_rid     => m_axi_rid,
+        m_axi_rdata   => m_axi_rdata,
+        m_axi_rresp   => m_axi_rresp,
+        m_axi_rlast   => m_axi_rlast,
+        m_axi_ruser   => m_axi_ruser,
+        m_axi_rvalid  => m_axi_rvalid,
+        m_axi_rready  => m_axi_rready
+        );
+  end generate prince_cbc;
+
+  aes_cbc : if CRYPTO_CONFIG = 6 generate
+    memsec : entity work.memsec_block_encryption
+      generic map(
+        C_S_AXI_TARGET_SLAVE_BASE_ADDR => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+
+        C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+        C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+        C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+        C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+        C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+        C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+        C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+        C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+        C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+        C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+        C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+        C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+        C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+        C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+        C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+
+        CRYPTO_CONFIG     => CRYPTO_AES_CBC,
+        DATA_BLOCK_SIZE   => 16*BLOCKS_PER_SECTOR,
+        BLOCKS_PER_SECTOR => BLOCKS_PER_SECTOR
+        )
+      port map(
+        s_axi_aclk     => s_axi_aclk,
+        s_axi_aresetn  => s_axi_aresetn,
+        s_axi_awid     => s_axi_awid,
+        s_axi_awaddr   => s_axi_awaddr,
+        s_axi_awlen    => s_axi_awlen,
+        s_axi_awsize   => s_axi_awsize,
+        s_axi_awburst  => s_axi_awburst,
+        s_axi_awlock   => s_axi_awlock,
+        s_axi_awcache  => s_axi_awcache,
+        s_axi_awprot   => s_axi_awprot,
+        s_axi_awqos    => s_axi_awqos,
+        s_axi_awregion => s_axi_awregion,
+        s_axi_awuser   => s_axi_awuser,
+        s_axi_awvalid  => s_axi_awvalid,
+        s_axi_awready  => s_axi_awready,
+        s_axi_wdata    => s_axi_wdata,
+        s_axi_wstrb    => s_axi_wstrb,
+        s_axi_wlast    => s_axi_wlast,
+        s_axi_wuser    => s_axi_wuser,
+        s_axi_wvalid   => s_axi_wvalid,
+        s_axi_wready   => s_axi_wready,
+        s_axi_bid      => s_axi_bid,
+        s_axi_bresp    => s_axi_bresp,
+        s_axi_buser    => s_axi_buser,
+        s_axi_bvalid   => s_axi_bvalid,
+        s_axi_bready   => s_axi_bready,
+
+        s_axi_arid     => s_axi_arid,
+        s_axi_araddr   => s_axi_araddr,
+        s_axi_arlen    => s_axi_arlen,
+        s_axi_arsize   => s_axi_arsize,
+        s_axi_arburst  => s_axi_arburst,
+        s_axi_arlock   => s_axi_arlock,
+        s_axi_arcache  => s_axi_arcache,
+        s_axi_arprot   => s_axi_arprot,
+        s_axi_arqos    => s_axi_arqos,
+        s_axi_arregion => s_axi_arregion,
+        s_axi_aruser   => s_axi_aruser,
+        s_axi_arvalid  => s_axi_arvalid,
+        s_axi_arready  => s_axi_arready,
+        s_axi_rid      => s_axi_rid,
+        s_axi_rdata    => s_axi_rdata,
+        s_axi_rresp    => s_axi_rresp,
+        s_axi_rlast    => s_axi_rlast,
+        s_axi_ruser    => s_axi_ruser,
+        s_axi_rvalid   => s_axi_rvalid,
+        s_axi_rready   => s_axi_rready,
+
+        m_axi_aclk    => m_axi_aclk,
+        m_axi_aresetn => m_axi_aresetn,
+        m_axi_awid    => m_axi_awid,
+        m_axi_awaddr  => m_axi_awaddr,
+        m_axi_awlen   => m_axi_awlen,
+        m_axi_awsize  => m_axi_awsize,
+        m_axi_awburst => m_axi_awburst,
+        m_axi_awlock  => m_axi_awlock,
+        m_axi_awcache => m_axi_awcache,
+        m_axi_awprot  => m_axi_awprot,
+        m_axi_awqos   => m_axi_awqos,
+        m_axi_awuser  => m_axi_awuser,
+        m_axi_awvalid => m_axi_awvalid,
+        m_axi_awready => m_axi_awready,
+        m_axi_wdata   => m_axi_wdata,
+        m_axi_wstrb   => m_axi_wstrb,
+        m_axi_wlast   => m_axi_wlast,
+        m_axi_wuser   => m_axi_wuser,
+        m_axi_wvalid  => m_axi_wvalid,
+        m_axi_wready  => m_axi_wready,
+        m_axi_bid     => m_axi_bid,
+        m_axi_bresp   => m_axi_bresp,
+        m_axi_buser   => m_axi_buser,
+        m_axi_bvalid  => m_axi_bvalid,
+        m_axi_bready  => m_axi_bready,
+
+        m_axi_arid    => m_axi_arid,
+        m_axi_araddr  => m_axi_araddr,
+        m_axi_arlen   => m_axi_arlen,
+        m_axi_arsize  => m_axi_arsize,
+        m_axi_arburst => m_axi_arburst,
+        m_axi_arlock  => m_axi_arlock,
+        m_axi_arcache => m_axi_arcache,
+        m_axi_arprot  => m_axi_arprot,
+        m_axi_arqos   => m_axi_arqos,
+        m_axi_aruser  => m_axi_aruser,
+        m_axi_arvalid => m_axi_arvalid,
+        m_axi_arready => m_axi_arready,
+        m_axi_rid     => m_axi_rid,
+        m_axi_rdata   => m_axi_rdata,
+        m_axi_rresp   => m_axi_rresp,
+        m_axi_rlast   => m_axi_rlast,
+        m_axi_ruser   => m_axi_ruser,
+        m_axi_rvalid  => m_axi_rvalid,
+        m_axi_rready  => m_axi_rready
+        );
+  end generate aes_cbc;
+
+  prince_xts : if CRYPTO_CONFIG = 7 generate
+    memsec : entity work.memsec_block_encryption
+      generic map(
+        C_S_AXI_TARGET_SLAVE_BASE_ADDR => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+
+        C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+        C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+        C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+        C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+        C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+        C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+        C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+        C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+        C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+        C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+        C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+        C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+        C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+        C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+        C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+
+        CRYPTO_CONFIG     => CRYPTO_PRINCE_XTS,
+        DATA_BLOCK_SIZE   => 8,
+        BLOCKS_PER_SECTOR => BLOCKS_PER_SECTOR
+        )
+      port map(
+        s_axi_aclk     => s_axi_aclk,
+        s_axi_aresetn  => s_axi_aresetn,
+        s_axi_awid     => s_axi_awid,
+        s_axi_awaddr   => s_axi_awaddr,
+        s_axi_awlen    => s_axi_awlen,
+        s_axi_awsize   => s_axi_awsize,
+        s_axi_awburst  => s_axi_awburst,
+        s_axi_awlock   => s_axi_awlock,
+        s_axi_awcache  => s_axi_awcache,
+        s_axi_awprot   => s_axi_awprot,
+        s_axi_awqos    => s_axi_awqos,
+        s_axi_awregion => s_axi_awregion,
+        s_axi_awuser   => s_axi_awuser,
+        s_axi_awvalid  => s_axi_awvalid,
+        s_axi_awready  => s_axi_awready,
+        s_axi_wdata    => s_axi_wdata,
+        s_axi_wstrb    => s_axi_wstrb,
+        s_axi_wlast    => s_axi_wlast,
+        s_axi_wuser    => s_axi_wuser,
+        s_axi_wvalid   => s_axi_wvalid,
+        s_axi_wready   => s_axi_wready,
+        s_axi_bid      => s_axi_bid,
+        s_axi_bresp    => s_axi_bresp,
+        s_axi_buser    => s_axi_buser,
+        s_axi_bvalid   => s_axi_bvalid,
+        s_axi_bready   => s_axi_bready,
+
+        s_axi_arid     => s_axi_arid,
+        s_axi_araddr   => s_axi_araddr,
+        s_axi_arlen    => s_axi_arlen,
+        s_axi_arsize   => s_axi_arsize,
+        s_axi_arburst  => s_axi_arburst,
+        s_axi_arlock   => s_axi_arlock,
+        s_axi_arcache  => s_axi_arcache,
+        s_axi_arprot   => s_axi_arprot,
+        s_axi_arqos    => s_axi_arqos,
+        s_axi_arregion => s_axi_arregion,
+        s_axi_aruser   => s_axi_aruser,
+        s_axi_arvalid  => s_axi_arvalid,
+        s_axi_arready  => s_axi_arready,
+        s_axi_rid      => s_axi_rid,
+        s_axi_rdata    => s_axi_rdata,
+        s_axi_rresp    => s_axi_rresp,
+        s_axi_rlast    => s_axi_rlast,
+        s_axi_ruser    => s_axi_ruser,
+        s_axi_rvalid   => s_axi_rvalid,
+        s_axi_rready   => s_axi_rready,
+
+        m_axi_aclk    => m_axi_aclk,
+        m_axi_aresetn => m_axi_aresetn,
+        m_axi_awid    => m_axi_awid,
+        m_axi_awaddr  => m_axi_awaddr,
+        m_axi_awlen   => m_axi_awlen,
+        m_axi_awsize  => m_axi_awsize,
+        m_axi_awburst => m_axi_awburst,
+        m_axi_awlock  => m_axi_awlock,
+        m_axi_awcache => m_axi_awcache,
+        m_axi_awprot  => m_axi_awprot,
+        m_axi_awqos   => m_axi_awqos,
+        m_axi_awuser  => m_axi_awuser,
+        m_axi_awvalid => m_axi_awvalid,
+        m_axi_awready => m_axi_awready,
+        m_axi_wdata   => m_axi_wdata,
+        m_axi_wstrb   => m_axi_wstrb,
+        m_axi_wlast   => m_axi_wlast,
+        m_axi_wuser   => m_axi_wuser,
+        m_axi_wvalid  => m_axi_wvalid,
+        m_axi_wready  => m_axi_wready,
+        m_axi_bid     => m_axi_bid,
+        m_axi_bresp   => m_axi_bresp,
+        m_axi_buser   => m_axi_buser,
+        m_axi_bvalid  => m_axi_bvalid,
+        m_axi_bready  => m_axi_bready,
+
+        m_axi_arid    => m_axi_arid,
+        m_axi_araddr  => m_axi_araddr,
+        m_axi_arlen   => m_axi_arlen,
+        m_axi_arsize  => m_axi_arsize,
+        m_axi_arburst => m_axi_arburst,
+        m_axi_arlock  => m_axi_arlock,
+        m_axi_arcache => m_axi_arcache,
+        m_axi_arprot  => m_axi_arprot,
+        m_axi_arqos   => m_axi_arqos,
+        m_axi_aruser  => m_axi_aruser,
+        m_axi_arvalid => m_axi_arvalid,
+        m_axi_arready => m_axi_arready,
+        m_axi_rid     => m_axi_rid,
+        m_axi_rdata   => m_axi_rdata,
+        m_axi_rresp   => m_axi_rresp,
+        m_axi_rlast   => m_axi_rlast,
+        m_axi_ruser   => m_axi_ruser,
+        m_axi_rvalid  => m_axi_rvalid,
+        m_axi_rready  => m_axi_rready
+        );
+  end generate prince_xts;
+
+  aes_xts : if CRYPTO_CONFIG = 8 generate
+    memsec : entity work.memsec_block_encryption
+      generic map(
+        C_S_AXI_TARGET_SLAVE_BASE_ADDR => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+
+        C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+        C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+        C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+        C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+        C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+        C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+        C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+        C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+        C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+        C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+        C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+        C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+        C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+        C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+        C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+
+        CRYPTO_CONFIG     => CRYPTO_AES_XTS,
+        DATA_BLOCK_SIZE   => 16,
+        BLOCKS_PER_SECTOR => BLOCKS_PER_SECTOR
+        )
+      port map(
+        s_axi_aclk     => s_axi_aclk,
+        s_axi_aresetn  => s_axi_aresetn,
+        s_axi_awid     => s_axi_awid,
+        s_axi_awaddr   => s_axi_awaddr,
+        s_axi_awlen    => s_axi_awlen,
+        s_axi_awsize   => s_axi_awsize,
+        s_axi_awburst  => s_axi_awburst,
+        s_axi_awlock   => s_axi_awlock,
+        s_axi_awcache  => s_axi_awcache,
+        s_axi_awprot   => s_axi_awprot,
+        s_axi_awqos    => s_axi_awqos,
+        s_axi_awregion => s_axi_awregion,
+        s_axi_awuser   => s_axi_awuser,
+        s_axi_awvalid  => s_axi_awvalid,
+        s_axi_awready  => s_axi_awready,
+        s_axi_wdata    => s_axi_wdata,
+        s_axi_wstrb    => s_axi_wstrb,
+        s_axi_wlast    => s_axi_wlast,
+        s_axi_wuser    => s_axi_wuser,
+        s_axi_wvalid   => s_axi_wvalid,
+        s_axi_wready   => s_axi_wready,
+        s_axi_bid      => s_axi_bid,
+        s_axi_bresp    => s_axi_bresp,
+        s_axi_buser    => s_axi_buser,
+        s_axi_bvalid   => s_axi_bvalid,
+        s_axi_bready   => s_axi_bready,
+
+        s_axi_arid     => s_axi_arid,
+        s_axi_araddr   => s_axi_araddr,
+        s_axi_arlen    => s_axi_arlen,
+        s_axi_arsize   => s_axi_arsize,
+        s_axi_arburst  => s_axi_arburst,
+        s_axi_arlock   => s_axi_arlock,
+        s_axi_arcache  => s_axi_arcache,
+        s_axi_arprot   => s_axi_arprot,
+        s_axi_arqos    => s_axi_arqos,
+        s_axi_arregion => s_axi_arregion,
+        s_axi_aruser   => s_axi_aruser,
+        s_axi_arvalid  => s_axi_arvalid,
+        s_axi_arready  => s_axi_arready,
+        s_axi_rid      => s_axi_rid,
+        s_axi_rdata    => s_axi_rdata,
+        s_axi_rresp    => s_axi_rresp,
+        s_axi_rlast    => s_axi_rlast,
+        s_axi_ruser    => s_axi_ruser,
+        s_axi_rvalid   => s_axi_rvalid,
+        s_axi_rready   => s_axi_rready,
+
+        m_axi_aclk    => m_axi_aclk,
+        m_axi_aresetn => m_axi_aresetn,
+        m_axi_awid    => m_axi_awid,
+        m_axi_awaddr  => m_axi_awaddr,
+        m_axi_awlen   => m_axi_awlen,
+        m_axi_awsize  => m_axi_awsize,
+        m_axi_awburst => m_axi_awburst,
+        m_axi_awlock  => m_axi_awlock,
+        m_axi_awcache => m_axi_awcache,
+        m_axi_awprot  => m_axi_awprot,
+        m_axi_awqos   => m_axi_awqos,
+        m_axi_awuser  => m_axi_awuser,
+        m_axi_awvalid => m_axi_awvalid,
+        m_axi_awready => m_axi_awready,
+        m_axi_wdata   => m_axi_wdata,
+        m_axi_wstrb   => m_axi_wstrb,
+        m_axi_wlast   => m_axi_wlast,
+        m_axi_wuser   => m_axi_wuser,
+        m_axi_wvalid  => m_axi_wvalid,
+        m_axi_wready  => m_axi_wready,
+        m_axi_bid     => m_axi_bid,
+        m_axi_bresp   => m_axi_bresp,
+        m_axi_buser   => m_axi_buser,
+        m_axi_bvalid  => m_axi_bvalid,
+        m_axi_bready  => m_axi_bready,
+
+        m_axi_arid    => m_axi_arid,
+        m_axi_araddr  => m_axi_araddr,
+        m_axi_arlen   => m_axi_arlen,
+        m_axi_arsize  => m_axi_arsize,
+        m_axi_arburst => m_axi_arburst,
+        m_axi_arlock  => m_axi_arlock,
+        m_axi_arcache => m_axi_arcache,
+        m_axi_arprot  => m_axi_arprot,
+        m_axi_arqos   => m_axi_arqos,
+        m_axi_aruser  => m_axi_aruser,
+        m_axi_arvalid => m_axi_arvalid,
+        m_axi_arready => m_axi_arready,
+        m_axi_rid     => m_axi_rid,
+        m_axi_rdata   => m_axi_rdata,
+        m_axi_rresp   => m_axi_rresp,
+        m_axi_rlast   => m_axi_rlast,
+        m_axi_ruser   => m_axi_ruser,
+        m_axi_rvalid  => m_axi_rvalid,
+        m_axi_rready  => m_axi_rready
+        );
+  end generate aes_xts;
+
+  meas : if CRYPTO_CONFIG = 9 generate
+    memsec : entity work.memsec_meas
+      generic map(
+        C_S_AXI_TARGET_SLAVE_BASE_ADDR => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+
+        C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+        C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+        C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+        C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+        C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+        C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+        C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+        C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+        C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+        C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+        C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+        C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+        C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+        C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+        C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+
+        DATA_BLOCK_SIZE      => DATA_BLOCK_SIZE,
+        DATA_MEMORY_SIZE     => DATA_MEMORY_SIZE,
+        DATA_TAGSIZE         => DATA_TAG_SIZE,
+        TREE_ARITY           => TREE_ARITY,
+        TREE_ROOTS           => TREE_ROOTS,
+        TREE_NODE_CACHE_SIZE => TREE_NODE_CACHE_SIZE,
+        TREE_ECB             => false
+        )
+      port map(
+        s_axi_aclk     => s_axi_aclk,
+        s_axi_aresetn  => s_axi_aresetn,
+        s_axi_awid     => s_axi_awid,
+        s_axi_awaddr   => s_axi_awaddr,
+        s_axi_awlen    => s_axi_awlen,
+        s_axi_awsize   => s_axi_awsize,
+        s_axi_awburst  => s_axi_awburst,
+        s_axi_awlock   => s_axi_awlock,
+        s_axi_awcache  => s_axi_awcache,
+        s_axi_awprot   => s_axi_awprot,
+        s_axi_awqos    => s_axi_awqos,
+        s_axi_awregion => s_axi_awregion,
+        s_axi_awuser   => s_axi_awuser,
+        s_axi_awvalid  => s_axi_awvalid,
+        s_axi_awready  => s_axi_awready,
+        s_axi_wdata    => s_axi_wdata,
+        s_axi_wstrb    => s_axi_wstrb,
+        s_axi_wlast    => s_axi_wlast,
+        s_axi_wuser    => s_axi_wuser,
+        s_axi_wvalid   => s_axi_wvalid,
+        s_axi_wready   => s_axi_wready,
+        s_axi_bid      => s_axi_bid,
+        s_axi_bresp    => s_axi_bresp,
+        s_axi_buser    => s_axi_buser,
+        s_axi_bvalid   => s_axi_bvalid,
+        s_axi_bready   => s_axi_bready,
+
+        s_axi_arid     => s_axi_arid,
+        s_axi_araddr   => s_axi_araddr,
+        s_axi_arlen    => s_axi_arlen,
+        s_axi_arsize   => s_axi_arsize,
+        s_axi_arburst  => s_axi_arburst,
+        s_axi_arlock   => s_axi_arlock,
+        s_axi_arcache  => s_axi_arcache,
+        s_axi_arprot   => s_axi_arprot,
+        s_axi_arqos    => s_axi_arqos,
+        s_axi_arregion => s_axi_arregion,
+        s_axi_aruser   => s_axi_aruser,
+        s_axi_arvalid  => s_axi_arvalid,
+        s_axi_arready  => s_axi_arready,
+        s_axi_rid      => s_axi_rid,
+        s_axi_rdata    => s_axi_rdata,
+        s_axi_rresp    => s_axi_rresp,
+        s_axi_rlast    => s_axi_rlast,
+        s_axi_ruser    => s_axi_ruser,
+        s_axi_rvalid   => s_axi_rvalid,
+        s_axi_rready   => s_axi_rready,
+
+        m_axi_aclk    => m_axi_aclk,
+        m_axi_aresetn => m_axi_aresetn,
+        m_axi_awid    => m_axi_awid,
+        m_axi_awaddr  => m_axi_awaddr,
+        m_axi_awlen   => m_axi_awlen,
+        m_axi_awsize  => m_axi_awsize,
+        m_axi_awburst => m_axi_awburst,
+        m_axi_awlock  => m_axi_awlock,
+        m_axi_awcache => m_axi_awcache,
+        m_axi_awprot  => m_axi_awprot,
+        m_axi_awqos   => m_axi_awqos,
+        m_axi_awuser  => m_axi_awuser,
+        m_axi_awvalid => m_axi_awvalid,
+        m_axi_awready => m_axi_awready,
+        m_axi_wdata   => m_axi_wdata,
+        m_axi_wstrb   => m_axi_wstrb,
+        m_axi_wlast   => m_axi_wlast,
+        m_axi_wuser   => m_axi_wuser,
+        m_axi_wvalid  => m_axi_wvalid,
+        m_axi_wready  => m_axi_wready,
+        m_axi_bid     => m_axi_bid,
+        m_axi_bresp   => m_axi_bresp,
+        m_axi_buser   => m_axi_buser,
+        m_axi_bvalid  => m_axi_bvalid,
+        m_axi_bready  => m_axi_bready,
+
+        m_axi_arid    => m_axi_arid,
+        m_axi_araddr  => m_axi_araddr,
+        m_axi_arlen   => m_axi_arlen,
+        m_axi_arsize  => m_axi_arsize,
+        m_axi_arburst => m_axi_arburst,
+        m_axi_arlock  => m_axi_arlock,
+        m_axi_arcache => m_axi_arcache,
+        m_axi_arprot  => m_axi_arprot,
+        m_axi_arqos   => m_axi_arqos,
+        m_axi_aruser  => m_axi_aruser,
+        m_axi_arvalid => m_axi_arvalid,
+        m_axi_arready => m_axi_arready,
+        m_axi_rid     => m_axi_rid,
+        m_axi_rdata   => m_axi_rdata,
+        m_axi_rresp   => m_axi_rresp,
+        m_axi_rlast   => m_axi_rlast,
+        m_axi_ruser   => m_axi_ruser,
+        m_axi_rvalid  => m_axi_rvalid,
+        m_axi_rready  => m_axi_rready
+        );
+  end generate meas;
+
+  meas_ecb : if CRYPTO_CONFIG = 10 generate
+    memsec : entity work.memsec_meas
+      generic map(
+        C_S_AXI_TARGET_SLAVE_BASE_ADDR => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+
+        C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+        C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+        C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+        C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+        C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+        C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+        C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+        C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+        C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+        C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+        C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+        C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+        C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+        C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+        C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+
+        DATA_BLOCK_SIZE      => DATA_BLOCK_SIZE,
+        DATA_MEMORY_SIZE     => DATA_MEMORY_SIZE,
+        DATA_TAGSIZE         => DATA_TAG_SIZE,
+        TREE_ARITY           => TREE_ARITY,
+        TREE_ROOTS           => TREE_ROOTS,
+        TREE_NODE_CACHE_SIZE => TREE_NODE_CACHE_SIZE,
+        TREE_ECB             => true
+        )
+      port map(
+        s_axi_aclk     => s_axi_aclk,
+        s_axi_aresetn  => s_axi_aresetn,
+        s_axi_awid     => s_axi_awid,
+        s_axi_awaddr   => s_axi_awaddr,
+        s_axi_awlen    => s_axi_awlen,
+        s_axi_awsize   => s_axi_awsize,
+        s_axi_awburst  => s_axi_awburst,
+        s_axi_awlock   => s_axi_awlock,
+        s_axi_awcache  => s_axi_awcache,
+        s_axi_awprot   => s_axi_awprot,
+        s_axi_awqos    => s_axi_awqos,
+        s_axi_awregion => s_axi_awregion,
+        s_axi_awuser   => s_axi_awuser,
+        s_axi_awvalid  => s_axi_awvalid,
+        s_axi_awready  => s_axi_awready,
+        s_axi_wdata    => s_axi_wdata,
+        s_axi_wstrb    => s_axi_wstrb,
+        s_axi_wlast    => s_axi_wlast,
+        s_axi_wuser    => s_axi_wuser,
+        s_axi_wvalid   => s_axi_wvalid,
+        s_axi_wready   => s_axi_wready,
+        s_axi_bid      => s_axi_bid,
+        s_axi_bresp    => s_axi_bresp,
+        s_axi_buser    => s_axi_buser,
+        s_axi_bvalid   => s_axi_bvalid,
+        s_axi_bready   => s_axi_bready,
+
+        s_axi_arid     => s_axi_arid,
+        s_axi_araddr   => s_axi_araddr,
+        s_axi_arlen    => s_axi_arlen,
+        s_axi_arsize   => s_axi_arsize,
+        s_axi_arburst  => s_axi_arburst,
+        s_axi_arlock   => s_axi_arlock,
+        s_axi_arcache  => s_axi_arcache,
+        s_axi_arprot   => s_axi_arprot,
+        s_axi_arqos    => s_axi_arqos,
+        s_axi_arregion => s_axi_arregion,
+        s_axi_aruser   => s_axi_aruser,
+        s_axi_arvalid  => s_axi_arvalid,
+        s_axi_arready  => s_axi_arready,
+        s_axi_rid      => s_axi_rid,
+        s_axi_rdata    => s_axi_rdata,
+        s_axi_rresp    => s_axi_rresp,
+        s_axi_rlast    => s_axi_rlast,
+        s_axi_ruser    => s_axi_ruser,
+        s_axi_rvalid   => s_axi_rvalid,
+        s_axi_rready   => s_axi_rready,
+
+        m_axi_aclk    => m_axi_aclk,
+        m_axi_aresetn => m_axi_aresetn,
+        m_axi_awid    => m_axi_awid,
+        m_axi_awaddr  => m_axi_awaddr,
+        m_axi_awlen   => m_axi_awlen,
+        m_axi_awsize  => m_axi_awsize,
+        m_axi_awburst => m_axi_awburst,
+        m_axi_awlock  => m_axi_awlock,
+        m_axi_awcache => m_axi_awcache,
+        m_axi_awprot  => m_axi_awprot,
+        m_axi_awqos   => m_axi_awqos,
+        m_axi_awuser  => m_axi_awuser,
+        m_axi_awvalid => m_axi_awvalid,
+        m_axi_awready => m_axi_awready,
+        m_axi_wdata   => m_axi_wdata,
+        m_axi_wstrb   => m_axi_wstrb,
+        m_axi_wlast   => m_axi_wlast,
+        m_axi_wuser   => m_axi_wuser,
+        m_axi_wvalid  => m_axi_wvalid,
+        m_axi_wready  => m_axi_wready,
+        m_axi_bid     => m_axi_bid,
+        m_axi_bresp   => m_axi_bresp,
+        m_axi_buser   => m_axi_buser,
+        m_axi_bvalid  => m_axi_bvalid,
+        m_axi_bready  => m_axi_bready,
+
+        m_axi_arid    => m_axi_arid,
+        m_axi_araddr  => m_axi_araddr,
+        m_axi_arlen   => m_axi_arlen,
+        m_axi_arsize  => m_axi_arsize,
+        m_axi_arburst => m_axi_arburst,
+        m_axi_arlock  => m_axi_arlock,
+        m_axi_arcache => m_axi_arcache,
+        m_axi_arprot  => m_axi_arprot,
+        m_axi_arqos   => m_axi_arqos,
+        m_axi_aruser  => m_axi_aruser,
+        m_axi_arvalid => m_axi_arvalid,
+        m_axi_arready => m_axi_arready,
+        m_axi_rid     => m_axi_rid,
+        m_axi_rdata   => m_axi_rdata,
+        m_axi_rresp   => m_axi_rresp,
+        m_axi_rlast   => m_axi_rlast,
+        m_axi_ruser   => m_axi_ruser,
+        m_axi_rvalid  => m_axi_rvalid,
+        m_axi_rready  => m_axi_rready
+        );
+  end generate meas_ecb;
+  
+  qarma_cbc : if CRYPTO_CONFIG = 11 generate
+  memsec : entity work.memsec_block_encryption
+    generic map(
+      C_S_AXI_TARGET_SLAVE_BASE_ADDR => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+
+      C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+      C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+      C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+      C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+      C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+      C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+      C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+      C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+      C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+      C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+      C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+      C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+      C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+      C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+
+      CRYPTO_CONFIG     => CRYPTO_QARMA_CBC,
+      DATA_BLOCK_SIZE   => 8*BLOCKS_PER_SECTOR,
+      BLOCKS_PER_SECTOR => BLOCKS_PER_SECTOR
+      )
+    port map(
+      s_axi_aclk     => s_axi_aclk,
+      s_axi_aresetn  => s_axi_aresetn,
+      s_axi_awid     => s_axi_awid,
+      s_axi_awaddr   => s_axi_awaddr,
+      s_axi_awlen    => s_axi_awlen,
+      s_axi_awsize   => s_axi_awsize,
+      s_axi_awburst  => s_axi_awburst,
+      s_axi_awlock   => s_axi_awlock,
+      s_axi_awcache  => s_axi_awcache,
+      s_axi_awprot   => s_axi_awprot,
+      s_axi_awqos    => s_axi_awqos,
+      s_axi_awregion => s_axi_awregion,
+      s_axi_awuser   => s_axi_awuser,
+      s_axi_awvalid  => s_axi_awvalid,
+      s_axi_awready  => s_axi_awready,
+      s_axi_wdata    => s_axi_wdata,
+      s_axi_wstrb    => s_axi_wstrb,
+      s_axi_wlast    => s_axi_wlast,
+      s_axi_wuser    => s_axi_wuser,
+      s_axi_wvalid   => s_axi_wvalid,
+      s_axi_wready   => s_axi_wready,
+      s_axi_bid      => s_axi_bid,
+      s_axi_bresp    => s_axi_bresp,
+      s_axi_buser    => s_axi_buser,
+      s_axi_bvalid   => s_axi_bvalid,
+      s_axi_bready   => s_axi_bready,
+
+      s_axi_arid     => s_axi_arid,
+      s_axi_araddr   => s_axi_araddr,
+      s_axi_arlen    => s_axi_arlen,
+      s_axi_arsize   => s_axi_arsize,
+      s_axi_arburst  => s_axi_arburst,
+      s_axi_arlock   => s_axi_arlock,
+      s_axi_arcache  => s_axi_arcache,
+      s_axi_arprot   => s_axi_arprot,
+      s_axi_arqos    => s_axi_arqos,
+      s_axi_arregion => s_axi_arregion,
+      s_axi_aruser   => s_axi_aruser,
+      s_axi_arvalid  => s_axi_arvalid,
+      s_axi_arready  => s_axi_arready,
+      s_axi_rid      => s_axi_rid,
+      s_axi_rdata    => s_axi_rdata,
+      s_axi_rresp    => s_axi_rresp,
+      s_axi_rlast    => s_axi_rlast,
+      s_axi_ruser    => s_axi_ruser,
+      s_axi_rvalid   => s_axi_rvalid,
+      s_axi_rready   => s_axi_rready,
+
+      m_axi_aclk    => m_axi_aclk,
+      m_axi_aresetn => m_axi_aresetn,
+      m_axi_awid    => m_axi_awid,
+      m_axi_awaddr  => m_axi_awaddr,
+      m_axi_awlen   => m_axi_awlen,
+      m_axi_awsize  => m_axi_awsize,
+      m_axi_awburst => m_axi_awburst,
+      m_axi_awlock  => m_axi_awlock,
+      m_axi_awcache => m_axi_awcache,
+      m_axi_awprot  => m_axi_awprot,
+      m_axi_awqos   => m_axi_awqos,
+      m_axi_awuser  => m_axi_awuser,
+      m_axi_awvalid => m_axi_awvalid,
+      m_axi_awready => m_axi_awready,
+      m_axi_wdata   => m_axi_wdata,
+      m_axi_wstrb   => m_axi_wstrb,
+      m_axi_wlast   => m_axi_wlast,
+      m_axi_wuser   => m_axi_wuser,
+      m_axi_wvalid  => m_axi_wvalid,
+      m_axi_wready  => m_axi_wready,
+      m_axi_bid     => m_axi_bid,
+      m_axi_bresp   => m_axi_bresp,
+      m_axi_buser   => m_axi_buser,
+      m_axi_bvalid  => m_axi_bvalid,
+      m_axi_bready  => m_axi_bready,
+
+      m_axi_arid    => m_axi_arid,
+      m_axi_araddr  => m_axi_araddr,
+      m_axi_arlen   => m_axi_arlen,
+      m_axi_arsize  => m_axi_arsize,
+      m_axi_arburst => m_axi_arburst,
+      m_axi_arlock  => m_axi_arlock,
+      m_axi_arcache => m_axi_arcache,
+      m_axi_arprot  => m_axi_arprot,
+      m_axi_arqos   => m_axi_arqos,
+      m_axi_aruser  => m_axi_aruser,
+      m_axi_arvalid => m_axi_arvalid,
+      m_axi_arready => m_axi_arready,
+      m_axi_rid     => m_axi_rid,
+      m_axi_rdata   => m_axi_rdata,
+      m_axi_rresp   => m_axi_rresp,
+      m_axi_rlast   => m_axi_rlast,
+      m_axi_ruser   => m_axi_ruser,
+      m_axi_rvalid  => m_axi_rvalid,
+      m_axi_rready  => m_axi_rready
+      );
+end generate qarma_cbc;
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/top/memsec_ascon.vhd b/fpga/src/memsec/hdl/top/memsec_ascon.vhd
new file mode 100644
index 0000000..e3fa803
--- /dev/null
+++ b/fpga/src/memsec/hdl/top/memsec_ascon.vhd
@@ -0,0 +1,694 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+
+entity memsec_ascon is
+  generic(
+    -- Parameters of Axi Slave Bus Interface S_AXI
+    C_S_AXI_TARGET_SLAVE_BASE_ADDR : std_logic_vector := x"40000000";
+    C_S_AXI_ID_WIDTH               : integer          := 12;
+    C_S_AXI_DATA_WIDTH             : integer          := 32;
+    C_S_AXI_ADDR_WIDTH             : integer          := 32;
+    C_S_AXI_AWUSER_WIDTH           : integer          := 0;
+    C_S_AXI_ARUSER_WIDTH           : integer          := 0;
+    C_S_AXI_WUSER_WIDTH            : integer          := 0;
+    C_S_AXI_RUSER_WIDTH            : integer          := 0;
+    C_S_AXI_BUSER_WIDTH            : integer          := 0;
+
+    -- Parameters of Axi Master Bus Interface M_AXI
+    C_M_AXI_BURST_LEN    : integer := 16;
+    C_M_AXI_ID_WIDTH     : integer := 6;
+    C_M_AXI_ADDR_WIDTH   : integer := 32;
+    C_M_AXI_DATA_WIDTH   : integer := 64;
+    C_M_AXI_AWUSER_WIDTH : integer := 0;
+    C_M_AXI_ARUSER_WIDTH : integer := 0;
+    C_M_AXI_WUSER_WIDTH  : integer := 0;
+    C_M_AXI_RUSER_WIDTH  : integer := 0;
+    C_M_AXI_BUSER_WIDTH  : integer := 0;
+
+    DATA_BLOCK_SIZE : integer := 64  -- Size of one block in the virtual address space in byte.
+    );
+  port(
+    -- Ports of Axi Slave Bus Interface S_AXI
+    s_axi_aclk    : in std_logic;
+    s_axi_aresetn : in std_logic;
+
+    s_axi_awid     : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_awaddr   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_awlen    : in  std_logic_vector(7 downto 0);
+    s_axi_awsize   : in  std_logic_vector(2 downto 0);
+    s_axi_awburst  : in  std_logic_vector(1 downto 0);
+    s_axi_awlock   : in  std_logic;
+    s_axi_awcache  : in  std_logic_vector(3 downto 0);
+    s_axi_awprot   : in  std_logic_vector(2 downto 0);
+    s_axi_awqos    : in  std_logic_vector(3 downto 0);
+    s_axi_awregion : in  std_logic_vector(3 downto 0);
+    s_axi_awuser   : in  std_logic_vector(C_S_AXI_AWUSER_WIDTH - 1 downto 0);
+    s_axi_awvalid  : in  std_logic;
+    s_axi_awready  : out std_logic;
+    s_axi_wdata    : in  std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_wstrb    : in  std_logic_vector((C_S_AXI_DATA_WIDTH / 8) - 1 downto 0);
+    s_axi_wlast    : in  std_logic;
+    s_axi_wuser    : in  std_logic_vector(C_S_AXI_WUSER_WIDTH - 1 downto 0);
+    s_axi_wvalid   : in  std_logic;
+    s_axi_wready   : out std_logic;
+    s_axi_bid      : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_bresp    : out std_logic_vector(1 downto 0);
+    s_axi_buser    : out std_logic_vector(C_S_AXI_BUSER_WIDTH - 1 downto 0);
+    s_axi_bvalid   : out std_logic;
+    s_axi_bready   : in  std_logic;
+
+    s_axi_arid     : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_araddr   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_arlen    : in  std_logic_vector(7 downto 0);
+    s_axi_arsize   : in  std_logic_vector(2 downto 0);
+    s_axi_arburst  : in  std_logic_vector(1 downto 0);
+    s_axi_arlock   : in  std_logic;
+    s_axi_arcache  : in  std_logic_vector(3 downto 0);
+    s_axi_arprot   : in  std_logic_vector(2 downto 0);
+    s_axi_arqos    : in  std_logic_vector(3 downto 0);
+    s_axi_arregion : in  std_logic_vector(3 downto 0);
+    s_axi_aruser   : in  std_logic_vector(C_S_AXI_ARUSER_WIDTH - 1 downto 0);
+    s_axi_arvalid  : in  std_logic;
+    s_axi_arready  : out std_logic;
+    s_axi_rid      : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_rdata    : out std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_rresp    : out std_logic_vector(1 downto 0);
+    s_axi_rlast    : out std_logic;
+    s_axi_ruser    : out std_logic_vector(C_S_AXI_RUSER_WIDTH - 1 downto 0);
+    s_axi_rvalid   : out std_logic;
+    s_axi_rready   : in  std_logic;
+
+    -- Ports of Axi Master Bus Interface M_AXI
+    m_axi_aclk    : in std_logic;
+    m_axi_aresetn : in std_logic;
+
+    m_axi_awid     : out std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_awaddr   : out std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+    m_axi_awlen    : out std_logic_vector(7 downto 0);
+    m_axi_awsize   : out std_logic_vector(2 downto 0);
+    m_axi_awburst  : out std_logic_vector(1 downto 0);
+    m_axi_awlock   : out std_logic;
+    m_axi_awcache  : out std_logic_vector(3 downto 0);
+    m_axi_awprot   : out std_logic_vector(2 downto 0);
+    m_axi_awqos    : out std_logic_vector(3 downto 0);
+    m_axi_awregion : out std_logic_vector(3 downto 0);
+    m_axi_awuser   : out std_logic_vector(C_M_AXI_AWUSER_WIDTH - 1 downto 0);
+    m_axi_awvalid  : out std_logic;
+    m_axi_awready  : in  std_logic;
+    m_axi_wdata    : out std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+    m_axi_wstrb    : out std_logic_vector(C_M_AXI_DATA_WIDTH / 8 - 1 downto 0);
+    m_axi_wlast    : out std_logic;
+    m_axi_wuser    : out std_logic_vector(C_M_AXI_WUSER_WIDTH - 1 downto 0);
+    m_axi_wvalid   : out std_logic;
+    m_axi_wready   : in  std_logic;
+    m_axi_bid      : in  std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_bresp    : in  std_logic_vector(1 downto 0);
+    m_axi_buser    : in  std_logic_vector(C_M_AXI_BUSER_WIDTH - 1 downto 0);
+    m_axi_bvalid   : in  std_logic;
+    m_axi_bready   : out std_logic;
+
+    m_axi_arid     : out std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_araddr   : out std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+    m_axi_arlen    : out std_logic_vector(7 downto 0);
+    m_axi_arsize   : out std_logic_vector(2 downto 0);
+    m_axi_arburst  : out std_logic_vector(1 downto 0);
+    m_axi_arlock   : out std_logic;
+    m_axi_arcache  : out std_logic_vector(3 downto 0);
+    m_axi_arprot   : out std_logic_vector(2 downto 0);
+    m_axi_arqos    : out std_logic_vector(3 downto 0);
+    m_axi_arregion : out std_logic_vector(3 downto 0);
+    m_axi_aruser   : out std_logic_vector(C_M_AXI_ARUSER_WIDTH - 1 downto 0);
+    m_axi_arvalid  : out std_logic;
+    m_axi_arready  : in  std_logic;
+    m_axi_rid      : in  std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_rdata    : in  std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+    m_axi_rresp    : in  std_logic_vector(1 downto 0);
+    m_axi_rlast    : in  std_logic;
+    m_axi_ruser    : in  std_logic_vector(C_M_AXI_RUSER_WIDTH - 1 downto 0);
+    m_axi_rvalid   : in  std_logic;
+    m_axi_rready   : out std_logic
+    );
+end memsec_ascon;
+
+architecture arch_imp of memsec_ascon is
+  constant SPLIT_REQUESTS : boolean := true;
+  constant METADATA       : integer := 16;  -- Meta data size in byte
+
+  -- request modifier to issuer over scheduler
+  signal read_request, write_request, request                   : StreamType;
+  signal read_request_ready, write_request_ready, request_ready : std_logic;
+
+  -- to register and issuer
+  signal registered_request, crypto_request, issuer_request, request_locker                         : StreamType;
+  signal registered_request_ready, crypto_request_ready, issuer_request_ready, request_locker_ready : std_logic;
+
+  -- issuer to register stage
+  signal issue_to_reg       : StreamType;
+  signal issue_to_reg_ready : std_logic;
+
+  -- register stage to fetcher
+  signal reg_to_fetch       : StreamType;
+  signal reg_to_fetch_ready : std_logic;
+
+  -- request fetcher to decryption
+  signal fetch_to_dec       : StreamType;
+  signal fetch_to_dec_ready : std_logic;
+
+  -- request fetcher to decryption
+  signal dec_to_init       : StreamType;
+  signal dec_to_init_ready : std_logic;
+
+  -- decryption to read responder and data modifier
+  signal plain_request, plain_request_read, plain_request_write                   : StreamType;
+  signal plain_request_ready, plain_request_read_ready, plain_request_write_ready : std_logic;
+
+  -- filtered read
+  signal filtered_read_request       : StreamType;
+  signal filtered_read_request_ready : std_logic;
+
+  -- wrap burst cached read
+  signal cached_read_request       : StreamType;
+  signal cached_read_request_ready : std_logic;
+
+  -- data modifier to nonce incrementer
+  signal data_to_nonce_inc       : StreamType;
+  signal data_to_nonce_inc_ready : std_logic;
+
+  -- nonce incrementer to reg
+  signal nonce_inc_to_write_issue       : StreamType;
+  signal nonce_inc_to_write_issue_ready : std_logic;
+
+  -- data register stage to encryption
+  signal reg_to_enc       : StreamType;
+  signal reg_to_enc_ready : std_logic;
+
+  -- encryption to writer
+  signal enc_to_write_data        : StreamType;
+  signal enc_to_write_data_ready  : std_logic;
+  signal write_issue_to_reg       : StreamType;
+  signal write_issue_to_reg_ready : std_logic;
+  signal data_to_responder        : StreamType;
+  signal data_to_responder_ready  : std_logic;
+
+  -- lock the pipeline
+  signal release_lock, release_lock_ready : std_logic;
+begin
+  m_axi_arregion <= (others => '0');
+  m_axi_awregion <= (others => '0');
+
+  req_mod_read : entity work.cpu_request_modifier
+    generic map(
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_ADDR_WIDTH  => C_S_AXI_ADDR_WIDTH,
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_AUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+      READ                => '1',
+      DOUBLE_LINEFILL     => (DATA_BLOCK_SIZE = 64)
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_aid     => s_axi_arid,
+      s_axi_aaddr   => s_axi_araddr,
+      s_axi_alen    => s_axi_arlen,
+      s_axi_asize   => s_axi_arsize,
+      s_axi_aburst  => s_axi_arburst,
+      s_axi_alock   => s_axi_arlock,
+      s_axi_acache  => s_axi_arcache,
+      s_axi_aprot   => s_axi_arprot,
+      s_axi_aqos    => s_axi_arqos,
+      s_axi_aregion => s_axi_arregion,
+      s_axi_auser   => s_axi_aruser,
+      s_axi_avalid  => s_axi_arvalid,
+      s_axi_aready  => s_axi_arready,
+
+      m_request       => read_request,
+      m_request_ready => read_request_ready);
+
+  req_mod_write : entity work.cpu_request_modifier
+    generic map(
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_ADDR_WIDTH  => C_S_AXI_ADDR_WIDTH,
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_AUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+      READ                => '0',
+      DOUBLE_LINEFILL     => (DATA_BLOCK_SIZE = 64)
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_aid     => s_axi_awid,
+      s_axi_aaddr   => s_axi_awaddr,
+      s_axi_alen    => s_axi_awlen,
+      s_axi_asize   => s_axi_awsize,
+      s_axi_aburst  => s_axi_awburst,
+      s_axi_alock   => s_axi_awlock,
+      s_axi_acache  => s_axi_awcache,
+      s_axi_aprot   => s_axi_awprot,
+      s_axi_aqos    => s_axi_awqos,
+      s_axi_aregion => s_axi_awregion,
+      s_axi_auser   => s_axi_awuser,
+      s_axi_avalid  => s_axi_awvalid,
+      s_axi_aready  => s_axi_awready,
+
+      m_request       => write_request,
+      m_request_ready => write_request_ready);
+
+  scheduler : entity work.stream_scheduler
+    port map (
+      clk               => s_axi_aclk,
+      resetn            => s_axi_aresetn,
+      s_request_1       => read_request,
+      s_request_1_ready => read_request_ready,
+      s_request_2       => write_request,
+      s_request_2_ready => write_request_ready,
+      m_request         => request,
+      m_request_ready   => request_ready);
+
+  request_splitter : if SPLIT_REQUESTS = true generate
+    scheduler_register_stage : entity work.stream_multi_register_stage
+      generic map(
+        REGISTERS => 1
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        in_data  => request,
+        in_valid => request.valid,
+        in_ready => request_ready,
+
+        out_data  => registered_request,
+        out_valid => open,
+        out_ready => registered_request_ready
+        );
+
+    request_splitter : entity work.stream_request_splitter
+      generic map(
+        DATA_BLOCK_SIZE => DATA_BLOCK_SIZE
+        )
+      port map(
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => registered_request,
+        s_request_ready => registered_request_ready,
+
+        m_request       => crypto_request,
+        m_request_ready => crypto_request_ready
+        );
+  end generate;
+
+  no_splitter : if SPLIT_REQUESTS = false generate
+    crypto_request <= request;
+    request_ready  <= crypto_request_ready;
+  end generate;
+
+  crypto_req_mod : entity work.stream_crypto_request_modifier
+    generic map(
+      C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_WIDTH,
+      DATA_START_ADDRESS => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+      DATA_ALIGNMENT     => DATA_BLOCK_SIZE,
+      DATA_METADATA      => METADATA
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => crypto_request,
+      s_request_ready => crypto_request_ready,
+
+      m_request       => request_locker,
+      m_request_ready => request_locker_ready);
+
+  pipeline_guard : entity work.pipeline_guard
+    generic map (
+      BLOCK_SIZE => DATA_BLOCK_SIZE,
+      FIFO_SIZE  => 4
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => request_locker,
+      s_request_ready => request_locker_ready,
+
+      m_request       => issuer_request,
+      m_request_ready => issuer_request_ready,
+
+      release       => release_lock,
+      release_ready => release_lock_ready
+      );
+
+  read_request_issuer : entity work.memory_read_issuer
+    generic map(
+      C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+      C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+      C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_arid    => m_axi_arid,
+      m_axi_araddr  => m_axi_araddr,
+      m_axi_arlen   => m_axi_arlen,
+      m_axi_arsize  => m_axi_arsize,
+      m_axi_arburst => m_axi_arburst,
+      m_axi_arlock  => m_axi_arlock,
+      m_axi_arcache => m_axi_arcache,
+      m_axi_arprot  => m_axi_arprot,
+      m_axi_arqos   => m_axi_arqos,
+      m_axi_aruser  => m_axi_aruser,
+      m_axi_arvalid => m_axi_arvalid,
+      m_axi_arready => m_axi_arready,
+
+      s_request       => issuer_request,
+      s_request_ready => issuer_request_ready,
+
+      m_request       => issue_to_reg,
+      m_request_ready => issue_to_reg_ready
+      );
+
+  issuer_reg_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 10
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => issue_to_reg,
+      in_valid => issue_to_reg.valid,
+      in_ready => issue_to_reg_ready,
+
+      out_data  => reg_to_fetch,
+      out_valid => open,
+      out_ready => reg_to_fetch_ready
+      );
+
+  fetcher : entity work.memory_read_fetcher
+    generic map(
+      C_M_AXI_ID_WIDTH    => C_M_AXI_ID_WIDTH,
+      C_M_AXI_DATA_WIDTH  => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_RUSER_WIDTH => C_M_AXI_RUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_rid    => m_axi_rid,
+      m_axi_rdata  => m_axi_rdata,
+      m_axi_rresp  => m_axi_rresp,
+      m_axi_rlast  => m_axi_rlast,
+      m_axi_ruser  => m_axi_ruser,
+      m_axi_rvalid => m_axi_rvalid,
+      m_axi_rready => m_axi_rready,
+
+      s_request       => reg_to_fetch,
+      s_request_ready => reg_to_fetch_ready,
+
+      m_request       => fetch_to_dec,
+      m_request_ready => fetch_to_dec_ready
+      );
+
+  decryption : entity work.stream_ascon
+    generic map (
+      DATA_ALIGNMENT => DATA_BLOCK_SIZE
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => fetch_to_dec,
+      s_request_ready => fetch_to_dec_ready,
+
+      m_request       => dec_to_init,
+      m_request_ready => dec_to_init_ready,
+
+      KeyxDI    => (others => '0'),
+      DecryptxS => '1'
+      );
+
+  zero_initializer : entity work.stream_request_zero_initializer
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => dec_to_init,
+      s_request_ready => dec_to_init_ready,
+
+      m_request       => plain_request,
+      m_request_ready => plain_request_ready
+      );
+
+  -- forward reads to the read responder and writes to the data modifier
+  switch_plain_data : process(plain_request, plain_request_read_ready, plain_request_write_ready) is
+    variable address_req_availablexDV : std_logic;
+  begin
+    plain_request_read  <= StreamType_default;
+    plain_request_write <= StreamType_default;
+    plain_request_ready <= '0';
+
+    if plain_request.valid = '1' and plain_request.read = '1' then
+      plain_request_read  <= plain_request;
+      plain_request_ready <= plain_request_read_ready;
+    elsif plain_request.valid = '1' and plain_request.read = '0' then
+      plain_request_write <= plain_request;
+      plain_request_ready <= plain_request_write_ready;
+    end if;
+  end process switch_plain_data;
+
+  data_filter : entity work.stream_data_block_filter
+    generic map (
+      DATASTREAM_OUT_WIDTH => C_S_AXI_DATA_WIDTH,
+      ERROR_ACCUMULATION   => true
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => plain_request_read,
+      s_request_ready => plain_request_read_ready,
+
+      m_request       => filtered_read_request,
+      m_request_ready => filtered_read_request_ready
+      );
+
+  wrap_burst_cache : entity work.stream_axi_wrap_burst_cache
+    generic map (
+      DATASTREAM_WIDTH     => C_S_AXI_DATA_WIDTH,
+      CACHE_SIZE           => DATA_BLOCK_SIZE*8,
+      NARROW_BURST_SUPPORT => (DATA_BLOCK_SIZE = 64)
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => filtered_read_request,
+      s_request_ready => filtered_read_request_ready,
+
+      m_request       => cached_read_request,
+      m_request_ready => cached_read_request_ready
+      );
+
+  read_responder : entity work.cpu_read_responder
+    generic map(
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_RUSER_WIDTH => C_S_AXI_RUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_rid    => s_axi_rid,
+      s_axi_rdata  => s_axi_rdata,
+      s_axi_rresp  => s_axi_rresp,
+      s_axi_rlast  => s_axi_rlast,
+      s_axi_ruser  => s_axi_ruser,
+      s_axi_rvalid => s_axi_rvalid,
+      s_axi_rready => s_axi_rready,
+
+      s_request       => cached_read_request,
+      s_request_ready => cached_read_request_ready
+      );
+
+  data_modifier : entity work.cpu_write_data
+    generic map(
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_WUSER_WIDTH => C_S_AXI_WUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_wdata  => s_axi_wdata,
+      s_axi_wstrb  => s_axi_wstrb,
+      s_axi_wlast  => s_axi_wlast,
+      s_axi_wuser  => s_axi_wuser,
+      s_axi_wvalid => s_axi_wvalid,
+      s_axi_wready => s_axi_wready,
+
+      s_request       => plain_request_write,
+      s_request_ready => plain_request_write_ready,
+
+      m_request       => data_to_nonce_inc,
+      m_request_ready => data_to_nonce_inc_ready
+      );
+
+  nonce_incrementer : entity work.stream_nonce_incrementer
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => data_to_nonce_inc,
+      s_request_ready => data_to_nonce_inc_ready,
+
+      m_request       => nonce_inc_to_write_issue,
+      m_request_ready => nonce_inc_to_write_issue_ready
+      );
+
+  write_issuer : entity work.memory_write_issuer
+    generic map(
+      C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+      C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+      C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+      IGNORE_METADATA      => false
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_awid    => m_axi_awid,
+      m_axi_awaddr  => m_axi_awaddr,
+      m_axi_awlen   => m_axi_awlen,
+      m_axi_awsize  => m_axi_awsize,
+      m_axi_awburst => m_axi_awburst,
+      m_axi_awlock  => m_axi_awlock,
+      m_axi_awcache => m_axi_awcache,
+      m_axi_awprot  => m_axi_awprot,
+      m_axi_awqos   => m_axi_awqos,
+      m_axi_awuser  => m_axi_awuser,
+      m_axi_awvalid => m_axi_awvalid,
+      m_axi_awready => m_axi_awready,
+
+      s_request       => nonce_inc_to_write_issue,
+      s_request_ready => nonce_inc_to_write_issue_ready,
+
+      m_request       => write_issue_to_reg,
+      m_request_ready => write_issue_to_reg_ready
+      );
+
+  reg_stage : entity work.stream_register_stage
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => write_issue_to_reg,
+      in_valid => write_issue_to_reg.valid,
+      in_ready => write_issue_to_reg_ready,
+
+      out_data  => reg_to_enc,
+      out_valid => open,
+      out_ready => reg_to_enc_ready
+      );
+
+  encryption : entity work.stream_ascon
+    generic map (
+      DATA_ALIGNMENT => DATA_BLOCK_SIZE
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => reg_to_enc,
+      s_request_ready => reg_to_enc_ready,
+
+      m_request       => enc_to_write_data,
+      m_request_ready => enc_to_write_data_ready,
+
+      KeyxDI    => (others => '0'),
+      DecryptxS => '0'
+      );
+
+  write_data : entity work.memory_write_data
+    generic map(
+      C_M_AXI_DATA_WIDTH  => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_WUSER_WIDTH => C_M_AXI_WUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_wdata  => m_axi_wdata,
+      m_axi_wstrb  => m_axi_wstrb,
+      m_axi_wlast  => m_axi_wlast,
+      m_axi_wuser  => m_axi_wuser,
+      m_axi_wvalid => m_axi_wvalid,
+      m_axi_wready => m_axi_wready,
+
+      s_request       => enc_to_write_data,
+      s_request_ready => enc_to_write_data_ready,
+
+      m_request       => data_to_responder,
+      m_request_ready => data_to_responder_ready
+      );
+
+  write_responder : entity work.memory_to_cpu_write_responder
+    generic map(
+      C_M_AXI_ID_WIDTH    => C_M_AXI_ID_WIDTH,
+      C_M_AXI_BUSER_WIDTH => C_M_AXI_BUSER_WIDTH,
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_BUSER_WIDTH => C_S_AXI_BUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_bid    => m_axi_bid,
+      m_axi_bresp  => m_axi_bresp,
+      m_axi_buser  => m_axi_buser,
+      m_axi_bvalid => m_axi_bvalid,
+      m_axi_bready => m_axi_bready,
+
+      s_axi_bid    => s_axi_bid,
+      s_axi_bresp  => s_axi_bresp,
+      s_axi_buser  => s_axi_buser,
+      s_axi_bvalid => s_axi_bvalid,
+      s_axi_bready => s_axi_bready,
+
+      s_request       => data_to_responder,
+      s_request_ready => data_to_responder_ready,
+
+      release_lock       => release_lock,
+      release_lock_ready => release_lock_ready
+      );
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/top/memsec_block_encryption.vhd b/fpga/src/memsec/hdl/top/memsec_block_encryption.vhd
new file mode 100644
index 0000000..8269ba4
--- /dev/null
+++ b/fpga/src/memsec/hdl/top/memsec_block_encryption.vhd
@@ -0,0 +1,990 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+entity memsec_block_encryption is
+  generic(
+    -- Parameters of Axi Slave Bus Interface S_AXI
+    C_S_AXI_TARGET_SLAVE_BASE_ADDR : std_logic_vector := x"40000000";
+    C_S_AXI_ID_WIDTH               : integer          := 12;
+    C_S_AXI_DATA_WIDTH             : integer          := 32;
+    C_S_AXI_ADDR_WIDTH             : integer          := 32;
+    C_S_AXI_AWUSER_WIDTH           : integer          := 0;
+    C_S_AXI_ARUSER_WIDTH           : integer          := 0;
+    C_S_AXI_WUSER_WIDTH            : integer          := 0;
+    C_S_AXI_RUSER_WIDTH            : integer          := 0;
+    C_S_AXI_BUSER_WIDTH            : integer          := 0;
+
+    -- Parameters of Axi Master Bus Interface M_AXI
+    C_M_AXI_BURST_LEN    : integer := 16;
+    C_M_AXI_ID_WIDTH     : integer := 6;
+    C_M_AXI_ADDR_WIDTH   : integer := 32;
+    C_M_AXI_DATA_WIDTH   : integer := 64;
+    C_M_AXI_AWUSER_WIDTH : integer := 0;
+    C_M_AXI_ARUSER_WIDTH : integer := 0;
+    C_M_AXI_WUSER_WIDTH  : integer := 0;
+    C_M_AXI_RUSER_WIDTH  : integer := 0;
+    C_M_AXI_BUSER_WIDTH  : integer := 0;
+
+    DATA_BLOCK_SIZE   : integer      := 64;          -- Size of one block in the virtual address space in byte.
+    BLOCKS_PER_SECTOR : integer      := 4;           -- Number of blocks which form a sector in XTS or CBC mode. (req. power of 2)
+    CRYPTO_CONFIG     : CryptoConfig := CRYPTO_PLAIN -- Cipher and mode configuration.
+    );
+  port(
+    -- Ports of Axi Slave Bus Interface S_AXI
+    s_axi_aclk    : in std_logic;
+    s_axi_aresetn : in std_logic;
+
+    s_axi_awid     : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_awaddr   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_awlen    : in  std_logic_vector(7 downto 0);
+    s_axi_awsize   : in  std_logic_vector(2 downto 0);
+    s_axi_awburst  : in  std_logic_vector(1 downto 0);
+    s_axi_awlock   : in  std_logic;
+    s_axi_awcache  : in  std_logic_vector(3 downto 0);
+    s_axi_awprot   : in  std_logic_vector(2 downto 0);
+    s_axi_awqos    : in  std_logic_vector(3 downto 0);
+    s_axi_awregion : in  std_logic_vector(3 downto 0);
+    s_axi_awuser   : in  std_logic_vector(C_S_AXI_AWUSER_WIDTH - 1 downto 0);
+    s_axi_awvalid  : in  std_logic;
+    s_axi_awready  : out std_logic;
+    s_axi_wdata    : in  std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_wstrb    : in  std_logic_vector((C_S_AXI_DATA_WIDTH / 8) - 1 downto 0);
+    s_axi_wlast    : in  std_logic;
+    s_axi_wuser    : in  std_logic_vector(C_S_AXI_WUSER_WIDTH - 1 downto 0);
+    s_axi_wvalid   : in  std_logic;
+    s_axi_wready   : out std_logic;
+    s_axi_bid      : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_bresp    : out std_logic_vector(1 downto 0);
+    s_axi_buser    : out std_logic_vector(C_S_AXI_BUSER_WIDTH - 1 downto 0);
+    s_axi_bvalid   : out std_logic;
+    s_axi_bready   : in  std_logic;
+
+    s_axi_arid     : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_araddr   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_arlen    : in  std_logic_vector(7 downto 0);
+    s_axi_arsize   : in  std_logic_vector(2 downto 0);
+    s_axi_arburst  : in  std_logic_vector(1 downto 0);
+    s_axi_arlock   : in  std_logic;
+    s_axi_arcache  : in  std_logic_vector(3 downto 0);
+    s_axi_arprot   : in  std_logic_vector(2 downto 0);
+    s_axi_arqos    : in  std_logic_vector(3 downto 0);
+    s_axi_arregion : in  std_logic_vector(3 downto 0);
+    s_axi_aruser   : in  std_logic_vector(C_S_AXI_ARUSER_WIDTH - 1 downto 0);
+    s_axi_arvalid  : in  std_logic;
+    s_axi_arready  : out std_logic;
+    s_axi_rid      : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_rdata    : out std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_rresp    : out std_logic_vector(1 downto 0);
+    s_axi_rlast    : out std_logic;
+    s_axi_ruser    : out std_logic_vector(C_S_AXI_RUSER_WIDTH - 1 downto 0);
+    s_axi_rvalid   : out std_logic;
+    s_axi_rready   : in  std_logic;
+
+    -- Ports of Axi Master Bus Interface M_AXI
+    m_axi_aclk    : in std_logic;
+    m_axi_aresetn : in std_logic;
+
+    m_axi_awid     : out std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_awaddr   : out std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+    m_axi_awlen    : out std_logic_vector(7 downto 0);
+    m_axi_awsize   : out std_logic_vector(2 downto 0);
+    m_axi_awburst  : out std_logic_vector(1 downto 0);
+    m_axi_awlock   : out std_logic;
+    m_axi_awcache  : out std_logic_vector(3 downto 0);
+    m_axi_awprot   : out std_logic_vector(2 downto 0);
+    m_axi_awqos    : out std_logic_vector(3 downto 0);
+    m_axi_awregion : out std_logic_vector(3 downto 0);
+    m_axi_awuser   : out std_logic_vector(C_M_AXI_AWUSER_WIDTH - 1 downto 0);
+    m_axi_awvalid  : out std_logic;
+    m_axi_awready  : in  std_logic;
+    m_axi_wdata    : out std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+    m_axi_wstrb    : out std_logic_vector(C_M_AXI_DATA_WIDTH / 8 - 1 downto 0);
+    m_axi_wlast    : out std_logic;
+    m_axi_wuser    : out std_logic_vector(C_M_AXI_WUSER_WIDTH - 1 downto 0);
+    m_axi_wvalid   : out std_logic;
+    m_axi_wready   : in  std_logic;
+    m_axi_bid      : in  std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_bresp    : in  std_logic_vector(1 downto 0);
+    m_axi_buser    : in  std_logic_vector(C_M_AXI_BUSER_WIDTH - 1 downto 0);
+    m_axi_bvalid   : in  std_logic;
+    m_axi_bready   : out std_logic;
+
+    m_axi_arid     : out std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_araddr   : out std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+    m_axi_arlen    : out std_logic_vector(7 downto 0);
+    m_axi_arsize   : out std_logic_vector(2 downto 0);
+    m_axi_arburst  : out std_logic_vector(1 downto 0);
+    m_axi_arlock   : out std_logic;
+    m_axi_arcache  : out std_logic_vector(3 downto 0);
+    m_axi_arprot   : out std_logic_vector(2 downto 0);
+    m_axi_arqos    : out std_logic_vector(3 downto 0);
+    m_axi_arregion : out std_logic_vector(3 downto 0);
+    m_axi_aruser   : out std_logic_vector(C_M_AXI_ARUSER_WIDTH - 1 downto 0);
+    m_axi_arvalid  : out std_logic;
+    m_axi_arready  : in  std_logic;
+    m_axi_rid      : in  std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_rdata    : in  std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+    m_axi_rresp    : in  std_logic_vector(1 downto 0);
+    m_axi_rlast    : in  std_logic;
+    m_axi_ruser    : in  std_logic_vector(C_M_AXI_RUSER_WIDTH - 1 downto 0);
+    m_axi_rvalid   : in  std_logic;
+    m_axi_rready   : out std_logic
+    );
+end memsec_block_encryption;
+
+architecture arch_imp of memsec_block_encryption is
+  constant SPLIT_REQUESTS    : boolean := true;
+  constant BLOCK_INDEX_WIDTH : integer := log2_ceil(BLOCKS_PER_SECTOR);
+
+  -- request modifier to issuer over scheduler
+  signal read_request, write_request, request, request_reg, request_crypto, request_locker, request_split : StreamType;
+  signal read_request_ready, write_request_ready, request_reg_ready, request_ready                        : std_logic;
+  signal request_crypto_ready, request_locker_ready, request_split_ready                                  : std_logic;
+
+  -- issuer to register stage
+  signal issue_to_reg       : StreamType;
+  signal issue_to_reg_ready : std_logic;
+
+  -- register stage to fetcher
+  signal reg_to_fetch       : StreamType;
+  signal reg_to_fetch_ready : std_logic;
+
+  -- request fetcher to decryption
+  signal fetch_to_dec       : StreamType;
+  signal fetch_to_dec_ready : std_logic;
+
+  -- decryption to data block filter and data modifier
+  signal plain_request, plain_request_reg, plain_request_read, plain_request_write                         : StreamType;
+  signal plain_request_ready, plain_request_reg_ready, plain_request_read_ready, plain_request_write_ready : std_logic;
+
+  -- filtered read
+  signal filtered_read_request       : StreamType;
+  signal filtered_read_request_ready : std_logic;
+
+  -- wrap burst cached read
+  signal cached_read_request       : StreamType;
+  signal cached_read_request_ready : std_logic;
+
+  -- write pipeline part
+  signal datamod_to_issue, reg_to_enc             : StreamType;
+  signal datamod_to_issue_ready, reg_to_enc_ready : std_logic;
+
+  -- encryption to writer
+  signal enc_to_write_data        : StreamType;
+  signal enc_to_write_data_ready  : std_logic;
+  signal write_issue_to_reg       : StreamType;
+  signal write_issue_to_reg_ready : std_logic;
+  signal data_to_responder        : StreamType;
+  signal data_to_responder_ready  : std_logic;
+
+  -- lock the pipeline
+  signal release_lock, release_lock_ready : std_logic;
+
+  function get_split_block_size (
+    constant config            : CryptoConfig;
+    constant blocks_per_sector : integer
+    )
+    return integer is
+  begin  -- get_split_block_size
+    case config is
+      when CRYPTO_PLAIN      => return 8*blocks_per_sector;
+      when CRYPTO_AES_ECB    => return 16*blocks_per_sector;
+      when CRYPTO_AES_CBC    => return 16*blocks_per_sector;
+      when CRYPTO_AES_XTS    => return 16*blocks_per_sector;
+      when CRYPTO_PRINCE_ECB => return 8*blocks_per_sector;
+      when CRYPTO_PRINCE_CBC => return 8*blocks_per_sector;
+      when CRYPTO_QARMA_CBC  => return 8*blocks_per_sector;
+      when CRYPTO_PRINCE_XTS => return 8*blocks_per_sector;
+      when others            => assert false report "Unknown config" severity error;
+    end case;
+    return DATASTREAM_DATA_WIDTH/8;
+  end get_split_block_size;
+begin
+  m_axi_arregion <= (others => '0');
+  m_axi_awregion <= (others => '0');
+
+  req_mod_read : entity work.cpu_request_modifier
+    generic map(
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_ADDR_WIDTH  => C_S_AXI_ADDR_WIDTH,
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_AUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+      READ                => '1',
+      DOUBLE_LINEFILL     => (DATA_BLOCK_SIZE = 64)
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_aid     => s_axi_arid,
+      s_axi_aaddr   => s_axi_araddr,
+      s_axi_alen    => s_axi_arlen,
+      s_axi_asize   => s_axi_arsize,
+      s_axi_aburst  => s_axi_arburst,
+      s_axi_alock   => s_axi_arlock,
+      s_axi_acache  => s_axi_arcache,
+      s_axi_aprot   => s_axi_arprot,
+      s_axi_aqos    => s_axi_arqos,
+      s_axi_aregion => s_axi_arregion,
+      s_axi_auser   => s_axi_aruser,
+      s_axi_avalid  => s_axi_arvalid,
+      s_axi_aready  => s_axi_arready,
+
+      m_request       => read_request,
+      m_request_ready => read_request_ready);
+
+  req_mod_write : entity work.cpu_request_modifier
+    generic map(
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_ADDR_WIDTH  => C_S_AXI_ADDR_WIDTH,
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_AUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+      READ                => '0',
+      DOUBLE_LINEFILL     => (DATA_BLOCK_SIZE = 64)
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_aid     => s_axi_awid,
+      s_axi_aaddr   => s_axi_awaddr,
+      s_axi_alen    => s_axi_awlen,
+      s_axi_asize   => s_axi_awsize,
+      s_axi_aburst  => s_axi_awburst,
+      s_axi_alock   => s_axi_awlock,
+      s_axi_acache  => s_axi_awcache,
+      s_axi_aprot   => s_axi_awprot,
+      s_axi_aqos    => s_axi_awqos,
+      s_axi_aregion => s_axi_awregion,
+      s_axi_auser   => s_axi_awuser,
+      s_axi_avalid  => s_axi_awvalid,
+      s_axi_aready  => s_axi_awready,
+
+      m_request       => write_request,
+      m_request_ready => write_request_ready);
+
+  scheduler : entity work.stream_scheduler
+    port map (
+      clk               => s_axi_aclk,
+      resetn            => s_axi_aresetn,
+      s_request_1       => read_request,
+      s_request_1_ready => read_request_ready,
+      s_request_2       => write_request,
+      s_request_2_ready => write_request_ready,
+      m_request         => request,
+      m_request_ready   => request_ready);
+
+  scheduler_reg_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 1
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => request,
+      in_valid => request.valid,
+      in_ready => request_ready,
+
+      out_data  => request_reg,
+      out_valid => open,
+      out_ready => request_reg_ready
+      );
+
+  request_splitter : if SPLIT_REQUESTS = true generate
+    request_splitter : entity work.stream_request_splitter
+      generic map(
+        DATA_BLOCK_SIZE => get_split_block_size(CRYPTO_CONFIG, BLOCKS_PER_SECTOR)
+        )
+      port map(
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => request_reg,
+        s_request_ready => request_reg_ready,
+
+        m_request       => request_split,
+        m_request_ready => request_split_ready
+        );
+  end generate;
+
+  no_splitter : if SPLIT_REQUESTS = false generate
+    request_split     <= request_reg;
+    request_reg_ready <= request_split_ready;
+  end generate;
+
+  crypto_mod : entity work.stream_crypto_request_modifier
+    generic map(
+      C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_WIDTH,
+      DATA_START_ADDRESS => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+      DATA_ALIGNMENT     => DATA_BLOCK_SIZE
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => request_split,
+      s_request_ready => request_split_ready,
+
+      m_request       => request_crypto,
+      m_request_ready => request_crypto_ready
+      );
+
+  pipeline_guard : entity work.pipeline_guard
+    generic map (
+      BLOCK_SIZE => get_split_block_size(CRYPTO_CONFIG, BLOCKS_PER_SECTOR),
+      FIFO_SIZE  => 4
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => request_crypto,
+      s_request_ready => request_crypto_ready,
+
+      m_request       => request_locker,
+      m_request_ready => request_locker_ready,
+
+      release       => release_lock,
+      release_ready => release_lock_ready
+      );
+
+  read_request_issuer : entity work.memory_read_issuer
+    generic map(
+      C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+      C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+      C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_arid    => m_axi_arid,
+      m_axi_araddr  => m_axi_araddr,
+      m_axi_arlen   => m_axi_arlen,
+      m_axi_arsize  => m_axi_arsize,
+      m_axi_arburst => m_axi_arburst,
+      m_axi_arlock  => m_axi_arlock,
+      m_axi_arcache => m_axi_arcache,
+      m_axi_arprot  => m_axi_arprot,
+      m_axi_arqos   => m_axi_arqos,
+      m_axi_aruser  => m_axi_aruser,
+      m_axi_arvalid => m_axi_arvalid,
+      m_axi_arready => m_axi_arready,
+
+      s_request       => request_locker,
+      s_request_ready => request_locker_ready,
+
+      m_request       => issue_to_reg,
+      m_request_ready => issue_to_reg_ready
+      );
+
+  issuer_reg_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 1
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => issue_to_reg,
+      in_valid => issue_to_reg.valid,
+      in_ready => issue_to_reg_ready,
+
+      out_data  => reg_to_fetch,
+      out_valid => open,
+      out_ready => reg_to_fetch_ready
+      );
+
+  fetcher : entity work.memory_read_fetcher
+    generic map(
+      C_M_AXI_ID_WIDTH    => C_M_AXI_ID_WIDTH,
+      C_M_AXI_DATA_WIDTH  => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_RUSER_WIDTH => C_M_AXI_RUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_rid    => m_axi_rid,
+      m_axi_rdata  => m_axi_rdata,
+      m_axi_rresp  => m_axi_rresp,
+      m_axi_rlast  => m_axi_rlast,
+      m_axi_ruser  => m_axi_ruser,
+      m_axi_rvalid => m_axi_rvalid,
+      m_axi_rready => m_axi_rready,
+
+      s_request       => reg_to_fetch,
+      s_request_ready => reg_to_fetch_ready,
+
+      m_request       => fetch_to_dec,
+      m_request_ready => fetch_to_dec_ready
+      );
+
+  dec_plain : if CRYPTO_CONFIG = CRYPTO_PLAIN generate
+
+    plain_dec_reg : entity work.stream_multi_register_stage
+      generic map(
+        REGISTERS => 1
+        )
+      port map(
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        in_data  => fetch_to_dec,
+        in_valid => fetch_to_dec.valid,
+        in_ready => fetch_to_dec_ready,
+
+        out_data  => plain_request,
+        out_valid => open,
+        out_ready => plain_request_ready
+        );
+
+  end generate dec_plain;
+
+  dec_prince_ecb : if CRYPTO_CONFIG = CRYPTO_PRINCE_ECB generate
+    decryption : entity work.stream_prince_ecb
+      generic map (
+        DECRYPTION => true
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => fetch_to_dec,
+        s_request_ready => fetch_to_dec_ready,
+
+        m_request       => plain_request,
+        m_request_ready => plain_request_ready,
+
+        Key0xDI => (others => '0'),
+        Key1xDI => (others => '0')
+        );
+  end generate dec_prince_ecb;
+
+  dec_aes_ecb : if CRYPTO_CONFIG = CRYPTO_AES_ECB generate
+    decryption : entity work.stream_aes_ecb
+      generic map (
+        DECRYPTION => true
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => fetch_to_dec,
+        s_request_ready => fetch_to_dec_ready,
+
+        m_request       => plain_request,
+        m_request_ready => plain_request_ready,
+
+        KeyxDI => x"b4ef5bcb3e92e21123e951cf6f8f188e"
+        );
+  end generate dec_aes_ecb;
+
+  dec_prince_xts : if CRYPTO_CONFIG = CRYPTO_PRINCE_XTS generate
+    decryption : entity work.stream_prince_xts
+      generic map (
+        DECRYPTION        => true,
+        BLOCK_INDEX_WIDTH => BLOCK_INDEX_WIDTH
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => fetch_to_dec,
+        s_request_ready => fetch_to_dec_ready,
+
+        m_request       => plain_request,
+        m_request_ready => plain_request_ready,
+
+        KeyTweak0xDI  => (others => '0'),
+        KeyTweak1xDI  => (others => '0'),
+        KeyCipher0xDI => (others => '0'),
+        KeyCipher1xDI => (others => '0')
+        );
+  end generate dec_prince_xts;
+
+  dec_aes_xts : if CRYPTO_CONFIG = CRYPTO_AES_XTS generate
+    decryption : entity work.stream_aes_xts
+      generic map (
+        DECRYPTION        => true,
+        BLOCK_INDEX_WIDTH => BLOCK_INDEX_WIDTH
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => fetch_to_dec,
+        s_request_ready => fetch_to_dec_ready,
+
+        m_request       => plain_request,
+        m_request_ready => plain_request_ready,
+
+        KeyTweakxDI  => (others => '0'),
+        KeyCipherxDI => x"b4ef5bcb3e92e21123e951cf6f8f188e"
+        );
+  end generate dec_aes_xts;
+
+  dec_prince_cbc : if CRYPTO_CONFIG = CRYPTO_PRINCE_CBC generate
+    decryption : entity work.stream_prince_cbc_decrypt
+      generic map (
+        BLOCK_INDEX_WIDTH => BLOCK_INDEX_WIDTH
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => fetch_to_dec,
+        s_request_ready => fetch_to_dec_ready,
+
+        m_request       => plain_request,
+        m_request_ready => plain_request_ready,
+
+        KeyIv0xDI     => (others => '0'),
+        KeyIv1xDI     => (others => '0'),
+        KeyCipher0xDI => (others => '0'),
+        KeyCipher1xDI => (others => '0')
+        );
+  end generate dec_prince_cbc;
+
+  dec_qarma_cbc : if CRYPTO_CONFIG = CRYPTO_QARMA_CBC generate
+    decryption : entity work.stream_qarma_cbc_decrypt
+      generic map (
+        BLOCK_INDEX_WIDTH => BLOCK_INDEX_WIDTH
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => fetch_to_dec,
+        s_request_ready => fetch_to_dec_ready,
+
+        m_request       => plain_request,
+        m_request_ready => plain_request_ready,
+
+        KeyIv0xDI     => (others => '0'),
+        KeyIv1xDI     => (others => '0'),
+        KeyCipher0xDI => (others => '0'),
+        KeyCipher1xDI => (others => '0')
+        );
+  end generate dec_qarma_cbc;
+
+  dec_aes_cbc : if CRYPTO_CONFIG = CRYPTO_AES_CBC generate
+    decryption : entity work.stream_aes_cbc_decrypt
+      generic map (
+        BLOCK_INDEX_WIDTH => BLOCK_INDEX_WIDTH
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => fetch_to_dec,
+        s_request_ready => fetch_to_dec_ready,
+
+        m_request       => plain_request,
+        m_request_ready => plain_request_ready,
+
+        KeyCipherxDI => x"b4ef5bcb3e92e21123e951cf6f8f188e",
+        KeyIvxDI     => (others => '0')
+        );
+  end generate dec_aes_cbc;
+
+  plain_request_reg_stage : entity work.stream_register_stage_fifo
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => plain_request,
+      in_valid => plain_request.valid,
+      in_ready => plain_request_ready,
+
+      out_data  => plain_request_reg,
+      out_valid => open,
+      out_ready => plain_request_reg_ready
+      );
+
+  -- forward reads to the read responder and writes to the data modifier
+  switch_plain_data : process(plain_request_reg, plain_request_read_ready, plain_request_write_ready) is
+    variable address_req_availablexDV : std_logic;
+  begin
+    plain_request_read      <= StreamType_default;
+    plain_request_write     <= StreamType_default;
+    plain_request_reg_ready <= '0';
+
+    if plain_request_reg.valid = '1' and plain_request_reg.read = '1' then
+      plain_request_read      <= plain_request_reg;
+      plain_request_reg_ready <= plain_request_read_ready;
+    elsif plain_request_reg.valid = '1' and plain_request_reg.read = '0' then
+      plain_request_write     <= plain_request_reg;
+      plain_request_reg_ready <= plain_request_write_ready;
+    end if;
+  end process switch_plain_data;
+
+  data_filter : entity work.stream_data_block_filter
+    generic map (
+      DATASTREAM_OUT_WIDTH => C_S_AXI_DATA_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => plain_request_read,
+      s_request_ready => plain_request_read_ready,
+
+      m_request       => filtered_read_request,
+      m_request_ready => filtered_read_request_ready
+      );
+
+  wrap_burst_cache : entity work.stream_axi_wrap_burst_cache
+    generic map (
+      DATASTREAM_WIDTH     => C_S_AXI_DATA_WIDTH,
+      CACHE_SIZE           => minimum(64, maximum(DATA_BLOCK_SIZE, 32))*8,
+      NARROW_BURST_SUPPORT => (DATA_BLOCK_SIZE >= 64)
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => filtered_read_request,
+      s_request_ready => filtered_read_request_ready,
+
+      m_request       => cached_read_request,
+      m_request_ready => cached_read_request_ready
+      );
+
+  read_responder : entity work.cpu_read_responder
+    generic map(
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_RUSER_WIDTH => C_S_AXI_RUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_rid    => s_axi_rid,
+      s_axi_rdata  => s_axi_rdata,
+      s_axi_rresp  => s_axi_rresp,
+      s_axi_rlast  => s_axi_rlast,
+      s_axi_ruser  => s_axi_ruser,
+      s_axi_rvalid => s_axi_rvalid,
+      s_axi_rready => s_axi_rready,
+
+      s_request       => cached_read_request,
+      s_request_ready => cached_read_request_ready
+      );
+
+  data_modifier : entity work.cpu_write_data
+    generic map(
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_WUSER_WIDTH => C_S_AXI_WUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_wdata  => s_axi_wdata,
+      s_axi_wstrb  => s_axi_wstrb,
+      s_axi_wlast  => s_axi_wlast,
+      s_axi_wuser  => s_axi_wuser,
+      s_axi_wvalid => s_axi_wvalid,
+      s_axi_wready => s_axi_wready,
+
+      s_request       => plain_request_write,
+      s_request_ready => plain_request_write_ready,
+
+      m_request       => datamod_to_issue,
+      m_request_ready => datamod_to_issue_ready
+      );
+
+  write_issuer : entity work.memory_write_issuer
+    generic map(
+      C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+      C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+      C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_awid    => m_axi_awid,
+      m_axi_awaddr  => m_axi_awaddr,
+      m_axi_awlen   => m_axi_awlen,
+      m_axi_awsize  => m_axi_awsize,
+      m_axi_awburst => m_axi_awburst,
+      m_axi_awlock  => m_axi_awlock,
+      m_axi_awcache => m_axi_awcache,
+      m_axi_awprot  => m_axi_awprot,
+      m_axi_awqos   => m_axi_awqos,
+      m_axi_awuser  => m_axi_awuser,
+      m_axi_awvalid => m_axi_awvalid,
+      m_axi_awready => m_axi_awready,
+
+      s_request       => datamod_to_issue,
+      s_request_ready => datamod_to_issue_ready,
+
+      m_request       => write_issue_to_reg,
+      m_request_ready => write_issue_to_reg_ready
+      );
+
+  reg_stage : entity work.stream_register_stage
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => write_issue_to_reg,
+      in_valid => write_issue_to_reg.valid,
+      in_ready => write_issue_to_reg_ready,
+
+      out_data  => reg_to_enc,
+      out_valid => open,
+      out_ready => reg_to_enc_ready
+      );
+
+  enc_plain : if CRYPTO_CONFIG = CRYPTO_PLAIN generate
+
+    plain_enc_reg : entity work.stream_multi_register_stage
+      generic map(
+        REGISTERS => 1
+        )
+      port map(
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        in_data  => reg_to_enc,
+        in_valid => reg_to_enc.valid,
+        in_ready => reg_to_enc_ready,
+
+        out_data  => enc_to_write_data,
+        out_valid => open,
+        out_ready => enc_to_write_data_ready
+        );
+
+  end generate enc_plain;
+
+  enc_prince_ecb : if CRYPTO_CONFIG = CRYPTO_PRINCE_ECB generate
+    encryption : entity work.stream_prince_ecb
+      generic map (
+        DECRYPTION => false
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => reg_to_enc,
+        s_request_ready => reg_to_enc_ready,
+
+        m_request       => enc_to_write_data,
+        m_request_ready => enc_to_write_data_ready,
+
+        Key0xDI => (others => '0'),
+        Key1xDI => (others => '0')
+        );
+  end generate enc_prince_ecb;
+
+  enc_aes_ecb : if CRYPTO_CONFIG = CRYPTO_AES_ECB generate
+    encryption : entity work.stream_aes_ecb
+      generic map (
+        DECRYPTION => false
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => reg_to_enc,
+        s_request_ready => reg_to_enc_ready,
+
+        m_request       => enc_to_write_data,
+        m_request_ready => enc_to_write_data_ready,
+
+        KeyxDI => (others => '0')
+        );
+  end generate enc_aes_ecb;
+
+  enc_prince_xts : if CRYPTO_CONFIG = CRYPTO_PRINCE_XTS generate
+    encryption : entity work.stream_prince_xts
+      generic map (
+        DECRYPTION        => false,
+        BLOCK_INDEX_WIDTH => BLOCK_INDEX_WIDTH
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => reg_to_enc,
+        s_request_ready => reg_to_enc_ready,
+
+        m_request       => enc_to_write_data,
+        m_request_ready => enc_to_write_data_ready,
+
+        KeyTweak0xDI  => (others => '0'),
+        KeyTweak1xDI  => (others => '0'),
+        KeyCipher0xDI => (others => '0'),
+        KeyCipher1xDI => (others => '0')
+        );
+  end generate enc_prince_xts;
+
+  enc_aes_xts : if CRYPTO_CONFIG = CRYPTO_AES_XTS generate
+    encryption : entity work.stream_aes_xts
+      generic map (
+        DECRYPTION        => false,
+        BLOCK_INDEX_WIDTH => BLOCK_INDEX_WIDTH
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => reg_to_enc,
+        s_request_ready => reg_to_enc_ready,
+
+        m_request       => enc_to_write_data,
+        m_request_ready => enc_to_write_data_ready,
+
+        KeyTweakxDI  => (others => '0'),
+        KeyCipherxDI => (others => '0')
+        );
+  end generate enc_aes_xts;
+
+  enc_prince_cbc : if CRYPTO_CONFIG = CRYPTO_PRINCE_CBC generate
+    encryption : entity work.stream_prince_cbc_encrypt
+      generic map (
+        BLOCK_INDEX_WIDTH => BLOCK_INDEX_WIDTH
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => reg_to_enc,
+        s_request_ready => reg_to_enc_ready,
+
+        m_request       => enc_to_write_data,
+        m_request_ready => enc_to_write_data_ready,
+
+        KeyIv0xDI     => (others => '0'),
+        KeyIv1xDI     => (others => '0'),
+        KeyCipher0xDI => (others => '0'),
+        KeyCipher1xDI => (others => '0')
+        );
+  end generate enc_prince_cbc;
+
+  enc_qarma_cbc : if CRYPTO_CONFIG = CRYPTO_QARMA_CBC generate
+    encryption : entity work.stream_qarma_cbc_encrypt
+      generic map (
+        BLOCK_INDEX_WIDTH => BLOCK_INDEX_WIDTH
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => reg_to_enc,
+        s_request_ready => reg_to_enc_ready,
+
+        m_request       => enc_to_write_data,
+        m_request_ready => enc_to_write_data_ready,
+
+        KeyIv0xDI     => (others => '0'),
+        KeyIv1xDI     => (others => '0'),
+        KeyCipher0xDI => (others => '0'),
+        KeyCipher1xDI => (others => '0')
+        );
+  end generate enc_qarma_cbc;
+
+  enc_aes_cbc : if CRYPTO_CONFIG = CRYPTO_AES_CBC generate
+    encryption : entity work.stream_aes_cbc_encrypt
+      generic map (
+        BLOCK_INDEX_WIDTH => BLOCK_INDEX_WIDTH
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => reg_to_enc,
+        s_request_ready => reg_to_enc_ready,
+
+        m_request       => enc_to_write_data,
+        m_request_ready => enc_to_write_data_ready,
+
+        KeyCipherxDI => (others => '0'),
+        KeyIvxDI     => (others => '0')
+        );
+  end generate enc_aes_cbc;
+
+  write_data : entity work.memory_write_data
+    generic map(
+      C_M_AXI_DATA_WIDTH  => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_WUSER_WIDTH => C_M_AXI_WUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_wdata  => m_axi_wdata,
+      m_axi_wstrb  => m_axi_wstrb,
+      m_axi_wlast  => m_axi_wlast,
+      m_axi_wuser  => m_axi_wuser,
+      m_axi_wvalid => m_axi_wvalid,
+      m_axi_wready => m_axi_wready,
+
+      s_request       => enc_to_write_data,
+      s_request_ready => enc_to_write_data_ready,
+
+      m_request       => data_to_responder,
+      m_request_ready => data_to_responder_ready
+      );
+
+  write_responder : entity work.memory_to_cpu_write_responder
+    generic map(
+      C_M_AXI_ID_WIDTH    => C_M_AXI_ID_WIDTH,
+      C_M_AXI_BUSER_WIDTH => C_M_AXI_BUSER_WIDTH,
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_BUSER_WIDTH => C_S_AXI_BUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_bid    => m_axi_bid,
+      m_axi_bresp  => m_axi_bresp,
+      m_axi_buser  => m_axi_buser,
+      m_axi_bvalid => m_axi_bvalid,
+      m_axi_bready => m_axi_bready,
+
+      s_axi_bid    => s_axi_bid,
+      s_axi_bresp  => s_axi_bresp,
+      s_axi_buser  => s_axi_buser,
+      s_axi_bvalid => s_axi_bvalid,
+      s_axi_bready => s_axi_bready,
+
+      s_request       => data_to_responder,
+      s_request_ready => data_to_responder_ready,
+
+      release_lock       => release_lock,
+      release_lock_ready => release_lock_ready
+      );
+
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/top/memsec_meas.vhd b/fpga/src/memsec/hdl/top/memsec_meas.vhd
new file mode 100644
index 0000000..9a08532
--- /dev/null
+++ b/fpga/src/memsec/hdl/top/memsec_meas.vhd
@@ -0,0 +1,1234 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+entity memsec_meas is
+  generic(
+    -- Parameters of Axi Slave Bus Interface S_AXI
+    C_S_AXI_TARGET_SLAVE_BASE_ADDR : std_logic_vector := x"40000000";
+    C_S_AXI_ID_WIDTH               : integer          := 12;
+    C_S_AXI_DATA_WIDTH             : integer          := 32;
+    C_S_AXI_ADDR_WIDTH             : integer          := 32;
+    C_S_AXI_AWUSER_WIDTH           : integer          := 0;
+    C_S_AXI_ARUSER_WIDTH           : integer          := 0;
+    C_S_AXI_WUSER_WIDTH            : integer          := 0;
+    C_S_AXI_RUSER_WIDTH            : integer          := 0;
+    C_S_AXI_BUSER_WIDTH            : integer          := 0;
+
+    -- Parameters of Axi Master Bus Interface M_AXI
+    C_M_AXI_BURST_LEN    : integer := 16;
+    C_M_AXI_ID_WIDTH     : integer := 6;
+    C_M_AXI_ADDR_WIDTH   : integer := 32;
+    C_M_AXI_DATA_WIDTH   : integer := 64;
+    C_M_AXI_AWUSER_WIDTH : integer := 0;
+    C_M_AXI_ARUSER_WIDTH : integer := 0;
+    C_M_AXI_WUSER_WIDTH  : integer := 0;
+    C_M_AXI_RUSER_WIDTH  : integer := 0;
+    C_M_AXI_BUSER_WIDTH  : integer := 0;
+
+    DATA_BLOCK_SIZE      : integer := 64;            -- Size of one block in the virtual address space in byte.
+    DATA_MEMORY_SIZE     : integer := 256*1024*1024; -- Size of the protected memory in byte. (virtual address space)
+    TREE_ARITY           : integer := 4;             -- Number of elements in one tree node.
+    TREE_ROOTS           : integer := 1024;          -- Number of trees which are used to protect the data memory.
+    TREE_NODE_CACHE_SIZE : integer := 1024;          -- Number of entries which can be stored in the tree node cache.
+    TREE_KEYSIZE         : integer := 16;            -- Size of keys stored in tree
+    DATA_TAGSIZE         : integer := 16;            -- Size of tags in data nodes
+    TREE_ECB             : boolean := false          -- ECB mode for Tree Intermdiate Nodes
+    );
+  port(
+    -- Ports of Axi Slave Bus Interface S_AXI
+    s_axi_aclk    : in std_logic;
+    s_axi_aresetn : in std_logic;
+
+    s_axi_awid     : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_awaddr   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_awlen    : in  std_logic_vector(7 downto 0);
+    s_axi_awsize   : in  std_logic_vector(2 downto 0);
+    s_axi_awburst  : in  std_logic_vector(1 downto 0);
+    s_axi_awlock   : in  std_logic;
+    s_axi_awcache  : in  std_logic_vector(3 downto 0);
+    s_axi_awprot   : in  std_logic_vector(2 downto 0);
+    s_axi_awqos    : in  std_logic_vector(3 downto 0);
+    s_axi_awregion : in  std_logic_vector(3 downto 0);
+    s_axi_awuser   : in  std_logic_vector(C_S_AXI_AWUSER_WIDTH - 1 downto 0);
+    s_axi_awvalid  : in  std_logic;
+    s_axi_awready  : out std_logic;
+    s_axi_wdata    : in  std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_wstrb    : in  std_logic_vector((C_S_AXI_DATA_WIDTH / 8) - 1 downto 0);
+    s_axi_wlast    : in  std_logic;
+    s_axi_wuser    : in  std_logic_vector(C_S_AXI_WUSER_WIDTH - 1 downto 0);
+    s_axi_wvalid   : in  std_logic;
+    s_axi_wready   : out std_logic;
+    s_axi_bid      : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_bresp    : out std_logic_vector(1 downto 0);
+    s_axi_buser    : out std_logic_vector(C_S_AXI_BUSER_WIDTH - 1 downto 0);
+    s_axi_bvalid   : out std_logic;
+    s_axi_bready   : in  std_logic;
+
+    s_axi_arid     : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_araddr   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_arlen    : in  std_logic_vector(7 downto 0);
+    s_axi_arsize   : in  std_logic_vector(2 downto 0);
+    s_axi_arburst  : in  std_logic_vector(1 downto 0);
+    s_axi_arlock   : in  std_logic;
+    s_axi_arcache  : in  std_logic_vector(3 downto 0);
+    s_axi_arprot   : in  std_logic_vector(2 downto 0);
+    s_axi_arqos    : in  std_logic_vector(3 downto 0);
+    s_axi_arregion : in  std_logic_vector(3 downto 0);
+    s_axi_aruser   : in  std_logic_vector(C_S_AXI_ARUSER_WIDTH - 1 downto 0);
+    s_axi_arvalid  : in  std_logic;
+    s_axi_arready  : out std_logic;
+    s_axi_rid      : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_rdata    : out std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_rresp    : out std_logic_vector(1 downto 0);
+    s_axi_rlast    : out std_logic;
+    s_axi_ruser    : out std_logic_vector(C_S_AXI_RUSER_WIDTH - 1 downto 0);
+    s_axi_rvalid   : out std_logic;
+    s_axi_rready   : in  std_logic;
+
+    -- Ports of Axi Master Bus Interface M_AXI
+    m_axi_aclk    : in std_logic;
+    m_axi_aresetn : in std_logic;
+
+    m_axi_awid     : out std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_awaddr   : out std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+    m_axi_awlen    : out std_logic_vector(7 downto 0);
+    m_axi_awsize   : out std_logic_vector(2 downto 0);
+    m_axi_awburst  : out std_logic_vector(1 downto 0);
+    m_axi_awlock   : out std_logic;
+    m_axi_awcache  : out std_logic_vector(3 downto 0);
+    m_axi_awprot   : out std_logic_vector(2 downto 0);
+    m_axi_awqos    : out std_logic_vector(3 downto 0);
+    m_axi_awregion : out std_logic_vector(3 downto 0);
+    m_axi_awuser   : out std_logic_vector(C_M_AXI_AWUSER_WIDTH - 1 downto 0);
+    m_axi_awvalid  : out std_logic;
+    m_axi_awready  : in  std_logic;
+    m_axi_wdata    : out std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+    m_axi_wstrb    : out std_logic_vector(C_M_AXI_DATA_WIDTH / 8 - 1 downto 0);
+    m_axi_wlast    : out std_logic;
+    m_axi_wuser    : out std_logic_vector(C_M_AXI_WUSER_WIDTH - 1 downto 0);
+    m_axi_wvalid   : out std_logic;
+    m_axi_wready   : in  std_logic;
+    m_axi_bid      : in  std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_bresp    : in  std_logic_vector(1 downto 0);
+    m_axi_buser    : in  std_logic_vector(C_M_AXI_BUSER_WIDTH - 1 downto 0);
+    m_axi_bvalid   : in  std_logic;
+    m_axi_bready   : out std_logic;
+
+    m_axi_arid     : out std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_araddr   : out std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+    m_axi_arlen    : out std_logic_vector(7 downto 0);
+    m_axi_arsize   : out std_logic_vector(2 downto 0);
+    m_axi_arburst  : out std_logic_vector(1 downto 0);
+    m_axi_arlock   : out std_logic;
+    m_axi_arcache  : out std_logic_vector(3 downto 0);
+    m_axi_arprot   : out std_logic_vector(2 downto 0);
+    m_axi_arqos    : out std_logic_vector(3 downto 0);
+    m_axi_arregion : out std_logic_vector(3 downto 0);
+    m_axi_aruser   : out std_logic_vector(C_M_AXI_ARUSER_WIDTH - 1 downto 0);
+    m_axi_arvalid  : out std_logic;
+    m_axi_arready  : in  std_logic;
+    m_axi_rid      : in  std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_rdata    : in  std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+    m_axi_rresp    : in  std_logic_vector(1 downto 0);
+    m_axi_rlast    : in  std_logic;
+    m_axi_ruser    : in  std_logic_vector(C_M_AXI_RUSER_WIDTH - 1 downto 0);
+    m_axi_rvalid   : in  std_logic;
+    m_axi_rready   : out std_logic
+    );
+end memsec_meas;
+
+architecture arch_imp of memsec_meas is
+  constant TREE_KEYSIZE_BITS  : integer := 8*TREE_KEYSIZE;
+  constant TREE_METADATA      : integer := 0;  -- Meta data size in byte
+  constant DATA_METADATA      : integer := DATA_TAGSIZE;
+  constant CACHE_ADDR_WIDTH   : integer := 26;
+  constant CACHE_DATA_WIDTH   : integer := TREE_KEYSIZE_BITS;
+  constant ROOT_NUMBER_WIDTH  : integer := log2_ceil(TREE_ROOTS);
+  constant TREE_START_ADDRESS : std_logic_vector(ADDRESS_WIDTH-1 downto 0) :=
+    std_logic_vector(to_unsigned(DATA_MEMORY_SIZE, ADDRESS_WIDTH) + unsigned(C_S_AXI_TARGET_SLAVE_BASE_ADDR));
+  -- request modifier to issuer over scheduler
+  signal read_request, read_request_crypto, write_request, write_request_crypto, request                               : StreamType;
+  signal read_request_ready, read_request_crypto_ready, write_request_ready, write_request_crypto_ready, request_ready : std_logic;
+
+  -- tree requests
+  signal registered_request, tree_request             : StreamType;
+  signal registered_request_ready, tree_request_ready : std_logic;
+
+  -- Request splitter
+  signal split_request       : StreamType;
+  signal split_request_ready : std_logic;
+
+  -- tree request modifier
+  signal aligned_tree_request       : StreamType;
+  signal aligned_tree_request_ready : std_logic;
+
+  -- tree node cache lookup
+  signal cache_request_issued           : StreamType;
+  signal cache_request_issued_ready     : std_logic;
+  signal cache_request_issued_reg       : StreamType;
+  signal cache_request_issued_reg_ready : std_logic;
+  signal cache_request_fetched          : StreamType;
+  signal cache_request_fetched_ready    : std_logic;
+
+  -- pre pipeline guard register
+  signal pre_guard_reg       : StreamType;
+  signal pre_guard_reg_ready : std_logic;
+
+  -- pipeline locker
+  signal request_locker       : StreamType;
+  signal request_locker_ready : std_logic;
+
+  -- issuer to register stage
+  signal issue_to_reg       : StreamType;
+  signal issue_to_reg_ready : std_logic;
+
+  -- register stage to fetcher
+  signal reg_to_fetch       : StreamType;
+  signal reg_to_fetch_ready : std_logic;
+
+  -- request fetcher to injector
+  signal fetch_to_inj       : StreamType;
+  signal fetch_to_inj_ready : std_logic;
+
+  -- request from injector to decryption
+  signal inj_to_dec       : StreamType;
+  signal inj_to_dec_ready : std_logic;
+
+  -- request from decryption to initializer
+  signal dec_to_init       : StreamType;
+  signal dec_to_init_ready : std_logic;
+
+  -- decryption to read responder and data modifier
+  signal plain_request, plain_request_read, plain_request_write                   : StreamType;
+  signal plain_request_ready, plain_request_read_ready, plain_request_write_ready : std_logic;
+  signal plain_request_nonce                                                      : StreamType;
+  signal plain_request_nonce_ready                                                : std_logic;
+  signal plain_request_write_access                                               : std_logic;
+
+  -- filtered read
+  signal filtered_read_request       : StreamType;
+  signal filtered_read_request_ready : std_logic;
+
+  -- wrap burst cached read
+  signal cached_read_request       : StreamType;
+  signal cached_read_request_ready : std_logic;
+
+  -- data modifiers to register stage
+  signal modified_request, data_to_treemod, treemod_to_metamod, metamod_to_write_issue : StreamType;
+  signal data_to_treemod_ready, treemod_to_metamod_ready, metamod_to_write_issue_ready : std_logic;
+  signal modified_request_ready                                                        : std_logic;
+  signal nonce_treemod_valid, nonce_metamod_valid                                      : std_logic;
+  signal nonce_treemod_ready, nonce_metamod_ready                                      : std_logic;
+
+  signal write_issue_to_reg       : StreamType;
+  signal write_issue_to_reg_ready : std_logic;
+
+  -- data register stage to encryption
+  signal reg_to_enc       : StreamType;
+  signal reg_to_enc_ready : std_logic;
+
+  -- encryption to writer
+  signal enc_to_remover              : StreamType;
+  signal enc_to_remover_ready        : std_logic;
+  signal remover_to_write_data       : StreamType;
+  signal remover_to_write_data_ready : std_logic;
+  signal data_to_responder           : StreamType;
+  signal data_to_responder_ready     : std_logic;
+
+
+  -- tree node cache
+  signal cache_araddr   : std_logic_vector(CACHE_ADDR_WIDTH - 1 downto 0);
+  signal cache_ardelete : std_logic;
+  signal cache_arvalid  : std_logic;
+  signal cache_arready  : std_logic;
+  signal cache_rdata    : std_logic_vector(CACHE_DATA_WIDTH - 1 downto 0);
+  signal cache_rhit     : std_logic;
+  signal cache_rvalid   : std_logic;
+  signal cache_rready   : std_logic;
+  signal cache_waddr    : std_logic_vector(CACHE_ADDR_WIDTH - 1 downto 0);
+  signal cache_wdata    : std_logic_vector(CACHE_DATA_WIDTH - 1 downto 0);
+  signal cache_wvalid   : std_logic;
+  signal cache_wready   : std_logic;
+
+  -- root node signals
+  signal root_number                                       : std_logic_vector(ROOT_NUMBER_WIDTH-1 downto 0);
+  signal root_update, root_number_valid, root_number_ready : std_logic;
+  signal root_nonce, root_next_nonce                       : std_logic_vector(TREE_KEYSIZE_BITS-1 downto 0);
+  signal root_nonce_valid, root_nonce_ready                : std_logic;
+  signal root_next_nonce_valid, root_next_nonce_ready      : std_logic;
+
+  -- nonce read feedback and forward signals
+  signal nonce_fb, nonce_fb_reg, nonce_update                                     : std_logic_vector(TREE_KEYSIZE_BITS-1 downto 0);
+  signal nonce_address, nonce_update_address                                      : std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+  signal nonce_is_read                                                            : std_logic;
+  signal nonce_update_cache_writer_valid, nonce_cache_writer_valid                : std_logic;
+  signal nonce_update_cache_writer_ready, nonce_cache_writer_ready                : std_logic;
+  signal nonce_fb_reg_valid, nonce_update_valid, to_fb_reg_valid, to_update_valid : std_logic;
+  signal nonce_fb_reg_ready, nonce_update_ready, to_fb_reg_ready, to_update_ready : std_logic;
+
+  -- randomness for new key
+  signal random_key                                                            : std_logic_vector(TREE_KEYSIZE_BITS-1 downto 0);
+  signal random_key_valid, random_key_ready                                    : std_logic;
+  signal random_key_updt                                                       : std_logic_vector(TREE_KEYSIZE_BITS-1 downto 0);
+  signal random_key_root                                                       : std_logic_vector(TREE_KEYSIZE_BITS-1 downto 0);
+  signal random_key_updt_valid, random_key_updt_ready, random_key_updt_request : std_logic;
+  signal random_key_root_valid, random_key_root_ready, random_key_root_request : std_logic;
+
+  -- lock the pipeline
+  signal release_lock, release_lock_ready : std_logic;
+begin
+  m_axi_arregion <= (others => '0');
+  m_axi_awregion <= (others => '0');
+
+  req_mod_read : entity work.cpu_request_modifier
+    generic map(
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_ADDR_WIDTH  => C_S_AXI_ADDR_WIDTH,
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_AUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+      READ                => '1',
+      DOUBLE_LINEFILL     => (DATA_BLOCK_SIZE = 64)
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_aid     => s_axi_arid,
+      s_axi_aaddr   => s_axi_araddr,
+      s_axi_alen    => s_axi_arlen,
+      s_axi_asize   => s_axi_arsize,
+      s_axi_aburst  => s_axi_arburst,
+      s_axi_alock   => s_axi_arlock,
+      s_axi_acache  => s_axi_arcache,
+      s_axi_aprot   => s_axi_arprot,
+      s_axi_aqos    => s_axi_arqos,
+      s_axi_aregion => s_axi_arregion,
+      s_axi_auser   => s_axi_aruser,
+      s_axi_avalid  => s_axi_arvalid,
+      s_axi_aready  => s_axi_arready,
+
+      m_request       => read_request,
+      m_request_ready => read_request_ready);
+
+  req_mod_write : entity work.cpu_request_modifier
+    generic map(
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_ADDR_WIDTH  => C_S_AXI_ADDR_WIDTH,
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_AUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+      READ                => '0',
+      DOUBLE_LINEFILL     => (DATA_BLOCK_SIZE = 64)
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_aid     => s_axi_awid,
+      s_axi_aaddr   => s_axi_awaddr,
+      s_axi_alen    => s_axi_awlen,
+      s_axi_asize   => s_axi_awsize,
+      s_axi_aburst  => s_axi_awburst,
+      s_axi_alock   => s_axi_awlock,
+      s_axi_acache  => s_axi_awcache,
+      s_axi_aprot   => s_axi_awprot,
+      s_axi_aqos    => s_axi_awqos,
+      s_axi_aregion => s_axi_awregion,
+      s_axi_auser   => s_axi_awuser,
+      s_axi_avalid  => s_axi_awvalid,
+      s_axi_aready  => s_axi_awready,
+
+      m_request       => write_request,
+      m_request_ready => write_request_ready);
+
+  scheduler : entity work.stream_scheduler
+    port map (
+      clk               => s_axi_aclk,
+      resetn            => s_axi_aresetn,
+      s_request_1       => read_request,
+      s_request_1_ready => read_request_ready,
+      s_request_2       => write_request,
+      s_request_2_ready => write_request_ready,
+      m_request         => request,
+      m_request_ready   => request_ready);
+
+  scheduler_register_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 1
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => request,
+      in_valid => request.valid,
+      in_ready => request_ready,
+
+      out_data  => registered_request,
+      out_valid => open,
+      out_ready => registered_request_ready
+      );
+
+  request_splitter : entity work.stream_request_splitter
+    generic map(
+      DATA_BLOCK_SIZE => DATA_BLOCK_SIZE
+      )
+    port map(
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => registered_request,
+      s_request_ready => registered_request_ready,
+
+      m_request       => split_request,
+      m_request_ready => split_request_ready
+      );
+
+  tree_generator : entity work.stream_tree_request_generator
+    generic map(
+      MEMORY_START_ADDRESS => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+      DATA_MEMORY_SIZE     => DATA_MEMORY_SIZE,
+      DATA_BLOCK_SIZE      => DATA_BLOCK_SIZE,
+      TREE_DATA_SIZE       => TREE_KEYSIZE,
+      TREE_ARITY           => TREE_ARITY,
+      TREE_ROOTS           => TREE_ROOTS
+      )
+    port map(
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      root_number       => root_number,
+      root_update       => root_update,
+      root_number_valid => root_number_valid,
+      root_number_ready => root_number_ready,
+
+      s_request       => split_request,
+      s_request_ready => split_request_ready,
+
+      m_request       => tree_request,
+      m_request_ready => tree_request_ready
+      );
+
+  crypto_mod : entity work.stream_crypto_request_modifier
+    generic map(
+      C_M_AXI_DATA_WIDTH         => C_M_AXI_DATA_WIDTH,
+      DATA_START_ADDRESS         => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+      DATA_ALIGNMENT             => DATA_BLOCK_SIZE,
+      DATA_METADATA              => DATA_METADATA,
+      TREE_START_ADDRESS         => TREE_START_ADDRESS,
+      TREE_ALIGNMENT_READ        => TREE_KEYSIZE,
+      TREE_ALIGNMENT_READ_ENABLE => TREE_ECB,
+      TREE_ALIGNMENT             => TREE_ARITY*TREE_KEYSIZE,
+      TREE_METADATA              => TREE_METADATA,
+      TREE_ENABLE                => true
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => tree_request,
+      s_request_ready => tree_request_ready,
+
+      m_request       => aligned_tree_request,
+      m_request_ready => aligned_tree_request_ready
+      );
+
+  pre_guard_register_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 1
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => aligned_tree_request,
+      in_valid => aligned_tree_request.valid,
+      in_ready => aligned_tree_request_ready,
+
+      out_data  => pre_guard_reg,
+      out_valid => open,
+      out_ready => pre_guard_reg_ready
+      );
+
+  pipeline_guard : entity work.pipeline_guard
+    generic map (
+      BLOCK_SIZE         => minimum(DATA_BLOCK_SIZE, TREE_ARITY*TREE_KEYSIZE),
+      FIFO_SIZE          => 4,
+      RELEASE_REGISTERED => true
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => pre_guard_reg,
+      s_request_ready => pre_guard_reg_ready,
+
+      m_request       => request_locker,
+      m_request_ready => request_locker_ready,
+
+      release       => release_lock,
+      release_ready => release_lock_ready
+      );
+
+  cache_request_issuer : entity work.node_cache_read_issuer
+    generic map(
+      CACHE_ADDR_WIDTH => CACHE_ADDR_WIDTH,
+      DATA_MEMORY_SIZE => DATA_MEMORY_SIZE,
+      CACHE_DATA_WIDTH => CACHE_DATA_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      araddr   => cache_araddr,
+      ardelete => cache_ardelete,
+      arvalid  => cache_arvalid,
+      arready  => cache_arready,
+
+      s_request       => request_locker,
+      s_request_ready => request_locker_ready,
+
+      m_request       => cache_request_issued,
+      m_request_ready => cache_request_issued_ready
+      );
+
+  cache_register_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 1
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => cache_request_issued,
+      in_valid => cache_request_issued.valid,
+      in_ready => cache_request_issued_ready,
+
+      out_data  => cache_request_issued_reg,
+      out_valid => open,
+      out_ready => cache_request_issued_reg_ready
+      );
+
+  cache_request_fetcher : entity work.node_cache_read_fetcher
+    generic map(
+      CACHE_DATA_WIDTH => CACHE_DATA_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      rdata  => cache_rdata,
+      rhit   => cache_rhit,
+      rvalid => cache_rvalid,
+      rready => cache_rready,
+
+      s_request       => cache_request_issued_reg,
+      s_request_ready => cache_request_issued_reg_ready,
+
+      m_request       => cache_request_fetched,
+      m_request_ready => cache_request_fetched_ready
+      );
+
+  read_request_issuer : entity work.memory_read_issuer
+    generic map(
+      C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+      C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+      C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_arid    => m_axi_arid,
+      m_axi_araddr  => m_axi_araddr,
+      m_axi_arlen   => m_axi_arlen,
+      m_axi_arsize  => m_axi_arsize,
+      m_axi_arburst => m_axi_arburst,
+      m_axi_arlock  => m_axi_arlock,
+      m_axi_arcache => m_axi_arcache,
+      m_axi_arprot  => m_axi_arprot,
+      m_axi_arqos   => m_axi_arqos,
+      m_axi_aruser  => m_axi_aruser,
+      m_axi_arvalid => m_axi_arvalid,
+      m_axi_arready => m_axi_arready,
+
+      s_request       => cache_request_fetched,
+      s_request_ready => cache_request_fetched_ready,
+
+      m_request       => issue_to_reg,
+      m_request_ready => issue_to_reg_ready
+      );
+
+  issuer_reg_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 2
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => issue_to_reg,
+      in_valid => issue_to_reg.valid,
+      in_ready => issue_to_reg_ready,
+
+      out_data  => reg_to_fetch,
+      out_valid => open,
+      out_ready => reg_to_fetch_ready
+      );
+
+  fetcher : entity work.memory_read_fetcher
+    generic map(
+      C_M_AXI_ID_WIDTH    => C_M_AXI_ID_WIDTH,
+      C_M_AXI_DATA_WIDTH  => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_RUSER_WIDTH => C_M_AXI_RUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_rid    => m_axi_rid,
+      m_axi_rdata  => m_axi_rdata,
+      m_axi_rresp  => m_axi_rresp,
+      m_axi_rlast  => m_axi_rlast,
+      m_axi_ruser  => m_axi_ruser,
+      m_axi_rvalid => m_axi_rvalid,
+      m_axi_rready => m_axi_rready,
+
+      s_request       => reg_to_fetch,
+      s_request_ready => reg_to_fetch_ready,
+
+      m_request       => fetch_to_inj,
+      m_request_ready => fetch_to_inj_ready
+      );
+
+  secure_root : entity work.secure_root
+    generic map(
+      ROOT_WIDTH  => TREE_KEYSIZE_BITS,
+      TREE_ROOTS  => TREE_ROOTS,
+      USE_COUNTER => false
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      root_number       => root_number,
+      root_update       => root_update,
+      root_number_valid => root_number_valid,
+      root_number_ready => root_number_ready,
+
+      root       => root_nonce,
+      root_valid => root_nonce_valid,
+      root_ready => root_nonce_ready,
+
+      root_next       => root_next_nonce,
+      root_next_valid => root_next_nonce_valid,
+      root_next_ready => root_next_nonce_ready,
+
+      random         => random_key_root,
+      random_valid   => random_key_root_valid,
+      random_request => random_key_root_request,
+      random_ready   => random_key_root_ready
+      );
+
+  metadata_injector : entity work.stream_metadata_injector
+    generic map(
+      METADATA_WIDTH  => TREE_KEYSIZE_BITS,
+      INJECT_POSITION => 0
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => fetch_to_inj,
+      s_request_ready => fetch_to_inj_ready,
+
+      m_request       => inj_to_dec,
+      m_request_ready => inj_to_dec_ready,
+
+      metadata       => nonce_fb_reg,
+      metadata_ready => nonce_fb_reg_ready,
+      metadata_valid => nonce_fb_reg_valid,
+
+      root_metadata => root_nonce,
+      root_valid    => root_nonce_valid,
+      root_ready    => root_nonce_ready
+      );
+
+  decryption_ecb : if TREE_ECB generate
+    decryption : entity work.stream_lrae_ascon_prince_ecb
+      generic map (
+        DATA_ALIGNMENT => DATA_BLOCK_SIZE,
+        TREE_ALIGNMENT => TREE_ARITY*TREE_KEYSIZE,
+        TAG_SIZE       => DATA_TAGSIZE,
+        DECRYPTION     => true
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => inj_to_dec,
+        s_request_ready => inj_to_dec_ready,
+
+        m_request       => dec_to_init,
+        m_request_ready => dec_to_init_ready
+        );
+  end generate;
+
+  decryption_std : if not(TREE_ECB) generate
+    decryption : entity work.stream_lrae_ascon_prince_delay
+      generic map (
+        DATA_ALIGNMENT => DATA_BLOCK_SIZE,
+        TREE_ALIGNMENT => TREE_ARITY*TREE_KEYSIZE,
+        TAG_SIZE       => DATA_TAGSIZE,
+        DECRYPTION     => true
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => inj_to_dec,
+        s_request_ready => inj_to_dec_ready,
+
+        m_request       => dec_to_init,
+        m_request_ready => dec_to_init_ready
+        );
+  end generate;
+
+  zero_initializer : entity work.stream_request_zero_initializer
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => dec_to_init,
+      s_request_ready => dec_to_init_ready,
+
+      m_request       => plain_request,
+      m_request_ready => plain_request_ready
+      );
+
+  key_filter : entity work.stream_data_filter_to_stdlogic
+    generic map (
+      DATASTREAM_OUT_WIDTH => TREE_KEYSIZE_BITS,
+      TREE_FILTER          => true,
+      DATA_LEAF_FILTER     => false
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => plain_request_nonce,
+      s_request_ready => plain_request_nonce_ready,
+
+      m_request            => nonce_fb,
+      m_request_address    => nonce_address,
+      m_request_is_read    => nonce_is_read,
+      m_request_read_valid => to_fb_reg_valid,
+      m_request_read_ready => to_fb_reg_ready,
+
+      m_request_write_valid => to_update_valid,
+      m_request_write_ready => to_update_ready,
+
+      m_request_cache_valid => nonce_cache_writer_valid,
+      m_request_cache_ready => nonce_cache_writer_ready
+      );
+
+  key_fb_register : entity work.register_stage
+    generic map(
+      WIDTH        => TREE_KEYSIZE_BITS,
+      READY_BYPASS => false,
+      REGISTERED   => true
+      )
+    port map(
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => nonce_fb,
+      in_valid => to_fb_reg_valid,
+      in_ready => to_fb_reg_ready,
+
+      out_data  => nonce_fb_reg,
+      out_valid => nonce_fb_reg_valid,
+      out_ready => nonce_fb_reg_ready
+      );
+
+  key_fb_synchronizer_stream : entity work.stream_ready_synchronizer
+    generic map(
+      OUT_WIDTH => 3,
+      REGISTERS => 0
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => plain_request,
+      s_request_ready => plain_request_ready,
+
+      m_requests(0)        => plain_request_nonce,
+      m_requests(1)        => plain_request_read,
+      m_requests(2)        => plain_request_write,
+      m_requests_active(0) => '1',
+      m_requests_active(1) => plain_request.read,
+      m_requests_active(2) => plain_request_write_access,
+      m_requests_ready(0)  => plain_request_nonce_ready,
+      m_requests_ready(1)  => plain_request_read_ready,
+      m_requests_ready(2)  => plain_request_write_ready
+      );
+
+  plain_request_write_access <= not(plain_request.read);
+
+  data_filter : entity work.stream_data_block_filter
+    generic map (
+      DATASTREAM_OUT_WIDTH => C_S_AXI_DATA_WIDTH,
+      TREE_FILTER          => false,
+      DATA_LEAF_FILTER     => true,
+      ERROR_ACCUMULATION   => true
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => plain_request_read,
+      s_request_ready => plain_request_read_ready,
+
+      m_request       => filtered_read_request,
+      m_request_ready => filtered_read_request_ready
+      );
+
+  wrap_burst_cache : entity work.stream_axi_wrap_burst_cache
+    generic map (
+      DATASTREAM_WIDTH     => C_S_AXI_DATA_WIDTH,
+      CACHE_SIZE           => DATA_BLOCK_SIZE*8,
+      NARROW_BURST_SUPPORT => (DATA_BLOCK_SIZE = 64)
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => filtered_read_request,
+      s_request_ready => filtered_read_request_ready,
+
+      m_request       => cached_read_request,
+      m_request_ready => cached_read_request_ready
+      );
+
+  read_responder : entity work.cpu_read_responder
+    generic map(
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_RUSER_WIDTH => C_S_AXI_RUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_rid    => s_axi_rid,
+      s_axi_rdata  => s_axi_rdata,
+      s_axi_rresp  => s_axi_rresp,
+      s_axi_rlast  => s_axi_rlast,
+      s_axi_ruser  => s_axi_ruser,
+      s_axi_rvalid => s_axi_rvalid,
+      s_axi_rready => s_axi_rready,
+
+      s_request       => cached_read_request,
+      s_request_ready => cached_read_request_ready
+      );
+
+  data_modifier : entity work.cpu_write_data
+    generic map(
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_WUSER_WIDTH => C_S_AXI_WUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_wdata  => s_axi_wdata,
+      s_axi_wstrb  => s_axi_wstrb,
+      s_axi_wlast  => s_axi_wlast,
+      s_axi_wuser  => s_axi_wuser,
+      s_axi_wvalid => s_axi_wvalid,
+      s_axi_wready => s_axi_wready,
+
+      s_request       => plain_request_write,
+      s_request_ready => plain_request_write_ready,
+
+      m_request       => modified_request,
+      m_request_ready => modified_request_ready
+      );
+
+  delay_register_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 2
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => modified_request,
+      in_valid => modified_request.valid,
+      in_ready => modified_request_ready,
+
+      out_data  => data_to_treemod,
+      out_valid => open,
+      out_ready => data_to_treemod_ready
+      );
+
+  key_updater : entity work.key_updater
+    generic map(
+      KEY_WIDTH  => TREE_KEYSIZE_BITS,
+      REGISTERED => true
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request         => nonce_fb,
+      s_request_address => nonce_address,
+      s_request_valid   => to_update_valid,
+      s_request_ready   => to_update_ready,
+
+      m_request         => nonce_update,
+      m_request_address => nonce_update_address,
+      m_request_valid   => nonce_update_valid,
+      m_request_ready   => nonce_update_ready,
+
+      random         => random_key_updt,
+      random_valid   => random_key_updt_valid,
+      random_ready   => random_key_updt_ready,
+      random_request => random_key_updt_request
+      );
+
+  data_dispatch : entity work.data_dispatcher
+    generic map(
+      DATA_WIDTH     => TREE_KEYSIZE_BITS,
+      DISPATCH_WIDTH => 2,
+      REGISTERED     => true
+      )
+    port map(
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => random_key,
+      in_valid => random_key_valid,
+      in_ready => random_key_ready,
+
+      out_data(127 downto 0)   => random_key_updt,
+      out_data(255 downto 128) => random_key_root,
+      out_request(0)           => random_key_updt_request,
+      out_request(1)           => random_key_root_request,
+      out_valid(0)             => random_key_updt_valid,
+      out_valid(1)             => random_key_root_valid,
+      out_ready(0)             => random_key_updt_ready,
+      out_ready(1)             => random_key_root_ready
+      );
+
+  randomness : entity work.prng
+    generic map(
+      WIDTH => TREE_KEYSIZE_BITS
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      random       => random_key,
+      random_valid => random_key_valid,
+      random_ready => random_key_ready,
+
+      random_init => (others => '0')
+      );
+
+  key_update_synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 3
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_valid => nonce_update_valid,
+      in_ready => nonce_update_ready,
+
+      out_valid(0)  => nonce_treemod_valid,
+      out_valid(1)  => nonce_metamod_valid,
+      out_valid(2)  => nonce_update_cache_writer_valid,
+      out_active(0) => '1',
+      out_active(1) => '1',
+      out_active(2) => '1',
+      out_ready(0)  => nonce_treemod_ready,
+      out_ready(1)  => nonce_metamod_ready,
+      out_ready(2)  => nonce_update_cache_writer_ready
+      );
+
+  treedata_modifier : entity work.stream_treedata_modifier
+    generic map(
+      METADATA_WIDTH => TREE_KEYSIZE_BITS
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      metadata       => nonce_update,
+      metadata_valid => nonce_treemod_valid,
+      metadata_ready => nonce_treemod_ready,
+
+      s_request       => data_to_treemod,
+      s_request_ready => data_to_treemod_ready,
+
+      m_request       => treemod_to_metamod,
+      m_request_ready => treemod_to_metamod_ready
+      );
+
+  metadata_modifier : entity work.stream_metadata_modifier
+    generic map(
+      METADATA_WIDTH => TREE_KEYSIZE_BITS
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      metadata       => nonce_update,
+      metadata_valid => nonce_metamod_valid,
+      metadata_ready => nonce_metamod_ready,
+
+      root       => root_next_nonce,
+      root_valid => root_next_nonce_valid,
+      root_ready => root_next_nonce_ready,
+
+      s_request       => treemod_to_metamod,
+      s_request_ready => treemod_to_metamod_ready,
+
+      m_request       => metamod_to_write_issue,
+      m_request_ready => metamod_to_write_issue_ready
+      );
+
+  cache_request_writer : entity work.node_cache_writer
+    generic map(
+      CACHE_ADDR_WIDTH => CACHE_ADDR_WIDTH,
+      DATA_MEMORY_SIZE => DATA_MEMORY_SIZE,
+      CACHE_DATA_WIDTH => CACHE_DATA_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      waddr  => cache_waddr,
+      wdata  => cache_wdata,
+      wvalid => cache_wvalid,
+      wready => cache_wready,
+
+      s_old_entry   => nonce_fb,
+      s_old_address => nonce_address,
+      s_old_is_read => nonce_is_read,
+      s_old_valid   => nonce_cache_writer_valid,
+      s_old_ready   => nonce_cache_writer_ready,
+
+      s_new_entry   => nonce_update,
+      s_new_address => nonce_update_address,
+      s_new_valid   => nonce_update_cache_writer_valid,
+      s_new_ready   => nonce_update_cache_writer_ready
+      );
+
+  write_issuer : entity work.memory_write_issuer
+    generic map(
+      C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+      C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+      C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_awid    => m_axi_awid,
+      m_axi_awaddr  => m_axi_awaddr,
+      m_axi_awlen   => m_axi_awlen,
+      m_axi_awsize  => m_axi_awsize,
+      m_axi_awburst => m_axi_awburst,
+      m_axi_awlock  => m_axi_awlock,
+      m_axi_awcache => m_axi_awcache,
+      m_axi_awprot  => m_axi_awprot,
+      m_axi_awqos   => m_axi_awqos,
+      m_axi_awuser  => m_axi_awuser,
+      m_axi_awvalid => m_axi_awvalid,
+      m_axi_awready => m_axi_awready,
+
+      s_request       => metamod_to_write_issue,
+      s_request_ready => metamod_to_write_issue_ready,
+
+      m_request       => write_issue_to_reg,
+      m_request_ready => write_issue_to_reg_ready
+      );
+
+  reg_stage : entity work.stream_register_stage
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => write_issue_to_reg,
+      in_valid => write_issue_to_reg.valid,
+      in_ready => write_issue_to_reg_ready,
+
+      out_data  => reg_to_enc,
+      out_valid => open,
+      out_ready => reg_to_enc_ready
+      );
+
+
+  encryption_ecb : if TREE_ECB generate
+    encryption : entity work.stream_lrae_ascon_prince_ecb
+      generic map (
+        DATA_ALIGNMENT => DATA_BLOCK_SIZE,
+        TREE_ALIGNMENT => TREE_ARITY*TREE_KEYSIZE,
+        TAG_SIZE       => DATA_TAGSIZE,
+        DECRYPTION     => false
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => reg_to_enc,
+        s_request_ready => reg_to_enc_ready,
+
+        m_request       => enc_to_remover,
+        m_request_ready => enc_to_remover_ready
+        );
+  end generate;
+
+  encryption_std : if not(TREE_ECB) generate
+    encryption : entity work.stream_lrae_ascon_prince_delay
+      generic map (
+        DATA_ALIGNMENT => DATA_BLOCK_SIZE,
+        TREE_ALIGNMENT => TREE_ARITY*TREE_KEYSIZE,
+        TAG_SIZE       => DATA_TAGSIZE,
+        DECRYPTION     => false
+        )
+      port map (
+        clk    => s_axi_aclk,
+        resetn => s_axi_aresetn,
+
+        s_request       => reg_to_enc,
+        s_request_ready => reg_to_enc_ready,
+
+        m_request       => enc_to_remover,
+        m_request_ready => enc_to_remover_ready
+        );
+  end generate;
+
+  beat_remover : entity work.stream_beat_remover
+    generic map (
+      DROP_POSITION => 0,
+      DROP_COUNT    => TREE_KEYSIZE_BITS/DATASTREAM_DATA_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => enc_to_remover,
+      s_request_ready => enc_to_remover_ready,
+
+      m_request       => remover_to_write_data,
+      m_request_ready => remover_to_write_data_ready
+      );
+
+  write_data : entity work.memory_write_data
+    generic map(
+      C_M_AXI_DATA_WIDTH  => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_WUSER_WIDTH => C_M_AXI_WUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_wdata  => m_axi_wdata,
+      m_axi_wstrb  => m_axi_wstrb,
+      m_axi_wlast  => m_axi_wlast,
+      m_axi_wuser  => m_axi_wuser,
+      m_axi_wvalid => m_axi_wvalid,
+      m_axi_wready => m_axi_wready,
+
+      s_request       => remover_to_write_data,
+      s_request_ready => remover_to_write_data_ready,
+
+      m_request       => data_to_responder,
+      m_request_ready => data_to_responder_ready
+      );
+
+  write_responder : entity work.memory_to_cpu_write_responder
+    generic map(
+      C_M_AXI_ID_WIDTH    => C_M_AXI_ID_WIDTH,
+      C_M_AXI_BUSER_WIDTH => C_M_AXI_BUSER_WIDTH,
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_BUSER_WIDTH => C_S_AXI_BUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_bid    => m_axi_bid,
+      m_axi_bresp  => m_axi_bresp,
+      m_axi_buser  => m_axi_buser,
+      m_axi_bvalid => m_axi_bvalid,
+      m_axi_bready => m_axi_bready,
+
+      s_axi_bid    => s_axi_bid,
+      s_axi_bresp  => s_axi_bresp,
+      s_axi_buser  => s_axi_buser,
+      s_axi_bvalid => s_axi_bvalid,
+      s_axi_bready => s_axi_bready,
+
+      s_request       => data_to_responder,
+      s_request_ready => data_to_responder_ready,
+
+      release_lock       => release_lock,
+      release_lock_ready => release_lock_ready
+      );
+
+  cache : entity work.node_cache
+    generic map(
+      ADDR_WIDTH => CACHE_ADDR_WIDTH,
+      DATA_WIDTH => CACHE_DATA_WIDTH,
+      CACHE_SIZE => TREE_NODE_CACHE_SIZE
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      araddr   => cache_araddr,
+      ardelete => cache_ardelete,
+      arvalid  => cache_arvalid,
+      arready  => cache_arready,
+
+      rdata  => cache_rdata,
+      rhit   => cache_rhit,
+      rvalid => cache_rvalid,
+      rready => cache_rready,
+
+      waddr  => cache_waddr,
+      wdata  => cache_wdata,
+      wvalid => cache_wvalid,
+      wready => cache_wready
+      );
+end arch_imp;
diff --git a/fpga/src/memsec/hdl/top/memsec_tectree_ascon.vhd b/fpga/src/memsec/hdl/top/memsec_tectree_ascon.vhd
new file mode 100644
index 0000000..861f982
--- /dev/null
+++ b/fpga/src/memsec/hdl/top/memsec_tectree_ascon.vhd
@@ -0,0 +1,1118 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+entity memsec_tectree_ascon is
+  generic(
+    -- Parameters of Axi Slave Bus Interface S_AXI
+    C_S_AXI_TARGET_SLAVE_BASE_ADDR : std_logic_vector := x"40000000";
+    C_S_AXI_ID_WIDTH               : integer          := 12;
+    C_S_AXI_DATA_WIDTH             : integer          := 32;
+    C_S_AXI_ADDR_WIDTH             : integer          := 32;
+    C_S_AXI_AWUSER_WIDTH           : integer          := 0;
+    C_S_AXI_ARUSER_WIDTH           : integer          := 0;
+    C_S_AXI_WUSER_WIDTH            : integer          := 0;
+    C_S_AXI_RUSER_WIDTH            : integer          := 0;
+    C_S_AXI_BUSER_WIDTH            : integer          := 0;
+
+    -- Parameters of Axi Master Bus Interface M_AXI
+    C_M_AXI_BURST_LEN    : integer := 16;
+    C_M_AXI_ID_WIDTH     : integer := 6;
+    C_M_AXI_ADDR_WIDTH   : integer := 32;
+    C_M_AXI_DATA_WIDTH   : integer := 64;
+    C_M_AXI_AWUSER_WIDTH : integer := 0;
+    C_M_AXI_ARUSER_WIDTH : integer := 0;
+    C_M_AXI_WUSER_WIDTH  : integer := 0;
+    C_M_AXI_RUSER_WIDTH  : integer := 0;
+    C_M_AXI_BUSER_WIDTH  : integer := 0;
+
+    DATA_BLOCK_SIZE      : integer := 64;            -- Size of one block in the virtual address space in byte.
+    DATA_MEMORY_SIZE     : integer := 256*1024*1024; -- Size of the protected memory in byte. (virtual address space)
+    TREE_ARITY           : integer := 4;             -- Number of elements in one tree node.
+    TREE_ROOTS           : integer := 1024;          -- Number of trees which are used to protect the data memory.
+    TREE_NODE_CACHE_SIZE : integer := 1024           -- Number of entries which can be stored in the tree node cache.
+    );
+  port(
+    -- Ports of Axi Slave Bus Interface S_AXI
+    s_axi_aclk    : in std_logic;
+    s_axi_aresetn : in std_logic;
+
+    s_axi_awid     : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_awaddr   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_awlen    : in  std_logic_vector(7 downto 0);
+    s_axi_awsize   : in  std_logic_vector(2 downto 0);
+    s_axi_awburst  : in  std_logic_vector(1 downto 0);
+    s_axi_awlock   : in  std_logic;
+    s_axi_awcache  : in  std_logic_vector(3 downto 0);
+    s_axi_awprot   : in  std_logic_vector(2 downto 0);
+    s_axi_awqos    : in  std_logic_vector(3 downto 0);
+    s_axi_awregion : in  std_logic_vector(3 downto 0);
+    s_axi_awuser   : in  std_logic_vector(C_S_AXI_AWUSER_WIDTH - 1 downto 0);
+    s_axi_awvalid  : in  std_logic;
+    s_axi_awready  : out std_logic;
+    s_axi_wdata    : in  std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_wstrb    : in  std_logic_vector((C_S_AXI_DATA_WIDTH / 8) - 1 downto 0);
+    s_axi_wlast    : in  std_logic;
+    s_axi_wuser    : in  std_logic_vector(C_S_AXI_WUSER_WIDTH - 1 downto 0);
+    s_axi_wvalid   : in  std_logic;
+    s_axi_wready   : out std_logic;
+    s_axi_bid      : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_bresp    : out std_logic_vector(1 downto 0);
+    s_axi_buser    : out std_logic_vector(C_S_AXI_BUSER_WIDTH - 1 downto 0);
+    s_axi_bvalid   : out std_logic;
+    s_axi_bready   : in  std_logic;
+
+    s_axi_arid     : in  std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_araddr   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0);
+    s_axi_arlen    : in  std_logic_vector(7 downto 0);
+    s_axi_arsize   : in  std_logic_vector(2 downto 0);
+    s_axi_arburst  : in  std_logic_vector(1 downto 0);
+    s_axi_arlock   : in  std_logic;
+    s_axi_arcache  : in  std_logic_vector(3 downto 0);
+    s_axi_arprot   : in  std_logic_vector(2 downto 0);
+    s_axi_arqos    : in  std_logic_vector(3 downto 0);
+    s_axi_arregion : in  std_logic_vector(3 downto 0);
+    s_axi_aruser   : in  std_logic_vector(C_S_AXI_ARUSER_WIDTH - 1 downto 0);
+    s_axi_arvalid  : in  std_logic;
+    s_axi_arready  : out std_logic;
+    s_axi_rid      : out std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+    s_axi_rdata    : out std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+    s_axi_rresp    : out std_logic_vector(1 downto 0);
+    s_axi_rlast    : out std_logic;
+    s_axi_ruser    : out std_logic_vector(C_S_AXI_RUSER_WIDTH - 1 downto 0);
+    s_axi_rvalid   : out std_logic;
+    s_axi_rready   : in  std_logic;
+
+    -- Ports of Axi Master Bus Interface M_AXI
+    m_axi_aclk    : in std_logic;
+    m_axi_aresetn : in std_logic;
+
+    m_axi_awid     : out std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_awaddr   : out std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+    m_axi_awlen    : out std_logic_vector(7 downto 0);
+    m_axi_awsize   : out std_logic_vector(2 downto 0);
+    m_axi_awburst  : out std_logic_vector(1 downto 0);
+    m_axi_awlock   : out std_logic;
+    m_axi_awcache  : out std_logic_vector(3 downto 0);
+    m_axi_awprot   : out std_logic_vector(2 downto 0);
+    m_axi_awqos    : out std_logic_vector(3 downto 0);
+    m_axi_awregion : out std_logic_vector(3 downto 0);
+    m_axi_awuser   : out std_logic_vector(C_M_AXI_AWUSER_WIDTH - 1 downto 0);
+    m_axi_awvalid  : out std_logic;
+    m_axi_awready  : in  std_logic;
+    m_axi_wdata    : out std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+    m_axi_wstrb    : out std_logic_vector(C_M_AXI_DATA_WIDTH / 8 - 1 downto 0);
+    m_axi_wlast    : out std_logic;
+    m_axi_wuser    : out std_logic_vector(C_M_AXI_WUSER_WIDTH - 1 downto 0);
+    m_axi_wvalid   : out std_logic;
+    m_axi_wready   : in  std_logic;
+    m_axi_bid      : in  std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_bresp    : in  std_logic_vector(1 downto 0);
+    m_axi_buser    : in  std_logic_vector(C_M_AXI_BUSER_WIDTH - 1 downto 0);
+    m_axi_bvalid   : in  std_logic;
+    m_axi_bready   : out std_logic;
+
+    m_axi_arid     : out std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_araddr   : out std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+    m_axi_arlen    : out std_logic_vector(7 downto 0);
+    m_axi_arsize   : out std_logic_vector(2 downto 0);
+    m_axi_arburst  : out std_logic_vector(1 downto 0);
+    m_axi_arlock   : out std_logic;
+    m_axi_arcache  : out std_logic_vector(3 downto 0);
+    m_axi_arprot   : out std_logic_vector(2 downto 0);
+    m_axi_arqos    : out std_logic_vector(3 downto 0);
+    m_axi_arregion : out std_logic_vector(3 downto 0);
+    m_axi_aruser   : out std_logic_vector(C_M_AXI_ARUSER_WIDTH - 1 downto 0);
+    m_axi_arvalid  : out std_logic;
+    m_axi_arready  : in  std_logic;
+    m_axi_rid      : in  std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+    m_axi_rdata    : in  std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+    m_axi_rresp    : in  std_logic_vector(1 downto 0);
+    m_axi_rlast    : in  std_logic;
+    m_axi_ruser    : in  std_logic_vector(C_M_AXI_RUSER_WIDTH - 1 downto 0);
+    m_axi_rvalid   : in  std_logic;
+    m_axi_rready   : out std_logic
+    );
+end memsec_tectree_ascon;
+
+architecture arch_imp of memsec_tectree_ascon is
+  constant METADATA           : integer := 8;  -- Meta data size in byte
+  constant CACHE_ADDR_WIDTH   : integer := 26;
+  constant CACHE_DATA_WIDTH   : integer := DATASTREAM_DATA_WIDTH;
+  constant ROOT_NUMBER_WIDTH  : integer := log2_ceil(TREE_ROOTS);
+  constant TREE_START_ADDRESS : std_logic_vector(ADDRESS_WIDTH-1 downto 0) :=
+    std_logic_vector(to_unsigned(DATA_MEMORY_SIZE, ADDRESS_WIDTH) + unsigned(C_S_AXI_TARGET_SLAVE_BASE_ADDR));
+  -- request modifier to issuer over scheduler
+  signal read_request, read_request_crypto, write_request, write_request_crypto, request                               : StreamType;
+  signal read_request_ready, read_request_crypto_ready, write_request_ready, write_request_crypto_ready, request_ready : std_logic;
+
+  -- tree requests
+  signal registered_request, tree_request             : StreamType;
+  signal registered_request_ready, tree_request_ready : std_logic;
+
+  -- Request splitter
+  signal split_request       : StreamType;
+  signal split_request_ready : std_logic;
+
+  -- tree request modifier
+  signal aligned_tree_request       : StreamType;
+  signal aligned_tree_request_ready : std_logic;
+
+  -- tree node cache lookup
+  signal cache_request_issued           : StreamType;
+  signal cache_request_issued_ready     : std_logic;
+  signal cache_request_issued_reg       : StreamType;
+  signal cache_request_issued_reg_ready : std_logic;
+  signal cache_request_fetched          : StreamType;
+  signal cache_request_fetched_ready    : std_logic;
+
+  -- pre pipeline guard register
+  signal pre_guard_reg       : StreamType;
+  signal pre_guard_reg_ready : std_logic;
+
+  -- pipeline locker
+  signal request_locker       : StreamType;
+  signal request_locker_ready : std_logic;
+
+  -- issuer to register stage
+  signal issue_to_reg       : StreamType;
+  signal issue_to_reg_ready : std_logic;
+
+  -- register stage to fetcher
+  signal reg_to_fetch       : StreamType;
+  signal reg_to_fetch_ready : std_logic;
+
+  -- request fetcher to injector
+  signal fetch_to_inj       : StreamType;
+  signal fetch_to_inj_ready : std_logic;
+
+  -- request from injector to decryption
+  signal inj_to_dec       : StreamType;
+  signal inj_to_dec_ready : std_logic;
+
+  -- request from decryption to initializer
+  signal dec_to_init       : StreamType;
+  signal dec_to_init_ready : std_logic;
+
+  -- decryption to read responder and data modifier
+  signal plain_request, plain_request_read, plain_request_write                   : StreamType;
+  signal plain_request_ready, plain_request_read_ready, plain_request_write_ready : std_logic;
+  signal plain_request_nonce                                                      : StreamType;
+  signal plain_request_nonce_ready                                                : std_logic;
+  signal plain_request_write_access                                               : std_logic;
+
+  -- filtered read
+  signal filtered_read_request       : StreamType;
+  signal filtered_read_request_ready : std_logic;
+
+  -- wrap burst cached read
+  signal cached_read_request       : StreamType;
+  signal cached_read_request_ready : std_logic;
+
+  -- data modifiers to register stage
+  signal modified_request, data_to_treemod, treemod_to_metamod, metamod_to_write_issue : StreamType;
+  signal data_to_treemod_ready, treemod_to_metamod_ready, metamod_to_write_issue_ready : std_logic;
+  signal modified_request_ready                                                        : std_logic;
+  signal nonce_treemod_valid, nonce_metamod_valid                                      : std_logic;
+  signal nonce_treemod_ready, nonce_metamod_ready                                      : std_logic;
+
+  signal write_issue_to_reg       : StreamType;
+  signal write_issue_to_reg_ready : std_logic;
+
+  -- data register stage to encryption
+  signal reg_to_enc       : StreamType;
+  signal reg_to_enc_ready : std_logic;
+
+  -- encryption to writer
+  signal enc_to_remover              : StreamType;
+  signal enc_to_remover_ready        : std_logic;
+  signal remover_to_write_data       : StreamType;
+  signal remover_to_write_data_ready : std_logic;
+  signal data_to_responder           : StreamType;
+  signal data_to_responder_ready     : std_logic;
+
+
+  -- tree node cache
+  signal cache_araddr   : std_logic_vector(CACHE_ADDR_WIDTH - 1 downto 0);
+  signal cache_ardelete : std_logic;
+  signal cache_arvalid  : std_logic;
+  signal cache_arready  : std_logic;
+  signal cache_rdata    : std_logic_vector(CACHE_DATA_WIDTH - 1 downto 0);
+  signal cache_rhit     : std_logic;
+  signal cache_rvalid   : std_logic;
+  signal cache_rready   : std_logic;
+  signal cache_waddr    : std_logic_vector(CACHE_ADDR_WIDTH - 1 downto 0);
+  signal cache_wdata    : std_logic_vector(CACHE_DATA_WIDTH - 1 downto 0);
+  signal cache_wvalid   : std_logic;
+  signal cache_wready   : std_logic;
+
+  -- root node signals
+  signal root_number                                       : std_logic_vector(ROOT_NUMBER_WIDTH-1 downto 0);
+  signal root_update, root_number_valid, root_number_ready : std_logic;
+  signal root_nonce, root_next_nonce                       : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal root_nonce_valid, root_nonce_ready                : std_logic;
+  signal root_next_nonce_valid, root_next_nonce_ready      : std_logic;
+
+  -- nonce read feedback and forward signals
+  signal nonce_fb, nonce_fb_reg, nonce_update                                     : std_logic_vector(DATASTREAM_DATA_WIDTH-1 downto 0);
+  signal nonce_address, nonce_update_address                                      : std_logic_vector(ADDRESS_WIDTH-1 downto 0);
+  signal nonce_is_read                                                            : std_logic;
+  signal nonce_update_cache_writer_valid, nonce_cache_writer_valid                : std_logic;
+  signal nonce_update_cache_writer_ready, nonce_cache_writer_ready                : std_logic;
+  signal nonce_fb_reg_valid, nonce_update_valid, to_fb_reg_valid, to_update_valid : std_logic;
+  signal nonce_fb_reg_ready, nonce_update_ready, to_fb_reg_ready, to_update_ready : std_logic;
+
+  -- lock the pipeline
+  signal release_lock, release_lock_ready : std_logic;
+begin
+  m_axi_arregion <= (others => '0');
+  m_axi_awregion <= (others => '0');
+
+  req_mod_read : entity work.cpu_request_modifier
+    generic map(
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_ADDR_WIDTH  => C_S_AXI_ADDR_WIDTH,
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_AUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+      READ                => '1',
+      DOUBLE_LINEFILL     => (DATA_BLOCK_SIZE = 64)
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_aid     => s_axi_arid,
+      s_axi_aaddr   => s_axi_araddr,
+      s_axi_alen    => s_axi_arlen,
+      s_axi_asize   => s_axi_arsize,
+      s_axi_aburst  => s_axi_arburst,
+      s_axi_alock   => s_axi_arlock,
+      s_axi_acache  => s_axi_arcache,
+      s_axi_aprot   => s_axi_arprot,
+      s_axi_aqos    => s_axi_arqos,
+      s_axi_aregion => s_axi_arregion,
+      s_axi_auser   => s_axi_aruser,
+      s_axi_avalid  => s_axi_arvalid,
+      s_axi_aready  => s_axi_arready,
+
+      m_request       => read_request,
+      m_request_ready => read_request_ready);
+
+  req_mod_write : entity work.cpu_request_modifier
+    generic map(
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_ADDR_WIDTH  => C_S_AXI_ADDR_WIDTH,
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_AUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+      READ                => '0',
+      DOUBLE_LINEFILL     => (DATA_BLOCK_SIZE = 64)
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_aid     => s_axi_awid,
+      s_axi_aaddr   => s_axi_awaddr,
+      s_axi_alen    => s_axi_awlen,
+      s_axi_asize   => s_axi_awsize,
+      s_axi_aburst  => s_axi_awburst,
+      s_axi_alock   => s_axi_awlock,
+      s_axi_acache  => s_axi_awcache,
+      s_axi_aprot   => s_axi_awprot,
+      s_axi_aqos    => s_axi_awqos,
+      s_axi_aregion => s_axi_awregion,
+      s_axi_auser   => s_axi_awuser,
+      s_axi_avalid  => s_axi_awvalid,
+      s_axi_aready  => s_axi_awready,
+
+      m_request       => write_request,
+      m_request_ready => write_request_ready);
+
+  scheduler : entity work.stream_scheduler
+    port map (
+      clk               => s_axi_aclk,
+      resetn            => s_axi_aresetn,
+      s_request_1       => read_request,
+      s_request_1_ready => read_request_ready,
+      s_request_2       => write_request,
+      s_request_2_ready => write_request_ready,
+      m_request         => request,
+      m_request_ready   => request_ready);
+
+  scheduler_register_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 1
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => request,
+      in_valid => request.valid,
+      in_ready => request_ready,
+
+      out_data  => registered_request,
+      out_valid => open,
+      out_ready => registered_request_ready
+      );
+
+  request_splitter : entity work.stream_request_splitter
+    generic map(
+      DATA_BLOCK_SIZE => DATA_BLOCK_SIZE
+      )
+    port map(
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => registered_request,
+      s_request_ready => registered_request_ready,
+
+      m_request       => split_request,
+      m_request_ready => split_request_ready
+      );
+
+  tree_generator : entity work.stream_tree_request_generator
+    generic map(
+      MEMORY_START_ADDRESS => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+      DATA_MEMORY_SIZE     => DATA_MEMORY_SIZE,
+      DATA_BLOCK_SIZE      => DATA_BLOCK_SIZE,
+      TREE_DATA_SIZE       => METADATA,
+      TREE_ARITY           => TREE_ARITY,
+      TREE_ROOTS           => TREE_ROOTS
+      )
+    port map(
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      root_number       => root_number,
+      root_update       => root_update,
+      root_number_valid => root_number_valid,
+      root_number_ready => root_number_ready,
+
+      s_request       => split_request,
+      s_request_ready => split_request_ready,
+
+      m_request       => tree_request,
+      m_request_ready => tree_request_ready
+      );
+
+  crypto_mod : entity work.stream_crypto_request_modifier
+    generic map(
+      C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_WIDTH,
+      DATA_START_ADDRESS => C_S_AXI_TARGET_SLAVE_BASE_ADDR,
+      DATA_ALIGNMENT     => DATA_BLOCK_SIZE,
+      DATA_METADATA      => METADATA,
+      TREE_START_ADDRESS => TREE_START_ADDRESS,
+      TREE_ALIGNMENT     => TREE_ARITY*METADATA,
+      TREE_METADATA      => METADATA,
+      TREE_ENABLE        => true
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => tree_request,
+      s_request_ready => tree_request_ready,
+
+      m_request       => aligned_tree_request,
+      m_request_ready => aligned_tree_request_ready
+      );
+
+  pre_guard_register_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 1
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => aligned_tree_request,
+      in_valid => aligned_tree_request.valid,
+      in_ready => aligned_tree_request_ready,
+
+      out_data  => pre_guard_reg,
+      out_valid => open,
+      out_ready => pre_guard_reg_ready
+      );
+
+  pipeline_guard : entity work.pipeline_guard
+    generic map (
+      BLOCK_SIZE         => minimum(DATA_BLOCK_SIZE, TREE_ARITY*METADATA),
+      FIFO_SIZE          => 4,
+      RELEASE_REGISTERED => true
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => pre_guard_reg,
+      s_request_ready => pre_guard_reg_ready,
+
+      m_request       => request_locker,
+      m_request_ready => request_locker_ready,
+
+      release       => release_lock,
+      release_ready => release_lock_ready
+      );
+
+  cache_request_issuer : entity work.node_cache_read_issuer
+    generic map(
+      CACHE_ADDR_WIDTH => CACHE_ADDR_WIDTH,
+      DATA_MEMORY_SIZE => DATA_MEMORY_SIZE,
+      CACHE_DATA_WIDTH => CACHE_DATA_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      araddr   => cache_araddr,
+      ardelete => cache_ardelete,
+      arvalid  => cache_arvalid,
+      arready  => cache_arready,
+
+      s_request       => request_locker,
+      s_request_ready => request_locker_ready,
+
+      m_request       => cache_request_issued,
+      m_request_ready => cache_request_issued_ready
+      );
+
+  cache_register_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 1
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => cache_request_issued,
+      in_valid => cache_request_issued.valid,
+      in_ready => cache_request_issued_ready,
+
+      out_data  => cache_request_issued_reg,
+      out_valid => open,
+      out_ready => cache_request_issued_reg_ready
+      );
+
+  cache_request_fetcher : entity work.node_cache_read_fetcher
+    generic map(
+      CACHE_DATA_WIDTH => CACHE_DATA_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      rdata  => cache_rdata,
+      rhit   => cache_rhit,
+      rvalid => cache_rvalid,
+      rready => cache_rready,
+
+      s_request       => cache_request_issued_reg,
+      s_request_ready => cache_request_issued_reg_ready,
+
+      m_request       => cache_request_fetched,
+      m_request_ready => cache_request_fetched_ready
+      );
+
+  read_request_issuer : entity work.memory_read_issuer
+    generic map(
+      C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+      C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+      C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_arid    => m_axi_arid,
+      m_axi_araddr  => m_axi_araddr,
+      m_axi_arlen   => m_axi_arlen,
+      m_axi_arsize  => m_axi_arsize,
+      m_axi_arburst => m_axi_arburst,
+      m_axi_arlock  => m_axi_arlock,
+      m_axi_arcache => m_axi_arcache,
+      m_axi_arprot  => m_axi_arprot,
+      m_axi_arqos   => m_axi_arqos,
+      m_axi_aruser  => m_axi_aruser,
+      m_axi_arvalid => m_axi_arvalid,
+      m_axi_arready => m_axi_arready,
+
+      s_request       => cache_request_fetched,
+      s_request_ready => cache_request_fetched_ready,
+
+      m_request       => issue_to_reg,
+      m_request_ready => issue_to_reg_ready
+      );
+
+  issuer_reg_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 2
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => issue_to_reg,
+      in_valid => issue_to_reg.valid,
+      in_ready => issue_to_reg_ready,
+
+      out_data  => reg_to_fetch,
+      out_valid => open,
+      out_ready => reg_to_fetch_ready
+      );
+
+  fetcher : entity work.memory_read_fetcher
+    generic map(
+      C_M_AXI_ID_WIDTH    => C_M_AXI_ID_WIDTH,
+      C_M_AXI_DATA_WIDTH  => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_RUSER_WIDTH => C_M_AXI_RUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_rid    => m_axi_rid,
+      m_axi_rdata  => m_axi_rdata,
+      m_axi_rresp  => m_axi_rresp,
+      m_axi_rlast  => m_axi_rlast,
+      m_axi_ruser  => m_axi_ruser,
+      m_axi_rvalid => m_axi_rvalid,
+      m_axi_rready => m_axi_rready,
+
+      s_request       => reg_to_fetch,
+      s_request_ready => reg_to_fetch_ready,
+
+      m_request       => fetch_to_inj,
+      m_request_ready => fetch_to_inj_ready
+      );
+
+  secure_root : entity work.secure_root
+    generic map(
+      TREE_ROOTS => TREE_ROOTS
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      root_number       => root_number,
+      root_update       => root_update,
+      root_number_valid => root_number_valid,
+      root_number_ready => root_number_ready,
+
+      root       => root_nonce,
+      root_valid => root_nonce_valid,
+      root_ready => root_nonce_ready,
+
+      root_next       => root_next_nonce,
+      root_next_valid => root_next_nonce_valid,
+      root_next_ready => root_next_nonce_ready,
+
+      random         => (others => '0'),
+      random_valid   => '0',
+      random_ready   => open,
+      random_request => open
+      );
+
+  metadata_injector : entity work.stream_metadata_injector
+    generic map(
+      INJECT_POSITION => 0
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => fetch_to_inj,
+      s_request_ready => fetch_to_inj_ready,
+
+      m_request       => inj_to_dec,
+      m_request_ready => inj_to_dec_ready,
+
+      metadata       => nonce_fb_reg,
+      metadata_ready => nonce_fb_reg_ready,
+      metadata_valid => nonce_fb_reg_valid,
+
+      root_metadata => root_nonce,
+      root_valid    => root_nonce_valid,
+      root_ready    => root_nonce_ready
+      );
+
+  decryption : entity work.stream_ascon
+    generic map (
+      DATA_ALIGNMENT => DATA_BLOCK_SIZE,
+      TREE_ALIGNMENT => TREE_ARITY*8
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => inj_to_dec,
+      s_request_ready => inj_to_dec_ready,
+
+      m_request       => dec_to_init,
+      m_request_ready => dec_to_init_ready,
+
+      KeyxDI    => (others => '0'),
+      DecryptxS => '1'
+      );
+
+  zero_initializer : entity work.stream_request_zero_initializer
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => dec_to_init,
+      s_request_ready => dec_to_init_ready,
+
+      m_request       => plain_request,
+      m_request_ready => plain_request_ready
+      );
+
+  nonce_filter : entity work.stream_data_filter_to_stdlogic
+    generic map (
+      DATASTREAM_OUT_WIDTH => DATASTREAM_DATA_WIDTH,
+      TREE_FILTER          => true,
+      DATA_LEAF_FILTER     => false
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => plain_request_nonce,
+      s_request_ready => plain_request_nonce_ready,
+
+      m_request            => nonce_fb,
+      m_request_address    => nonce_address,
+      m_request_is_read    => nonce_is_read,
+      m_request_read_valid => to_fb_reg_valid,
+      m_request_read_ready => to_fb_reg_ready,
+
+      m_request_write_valid => to_update_valid,
+      m_request_write_ready => to_update_ready,
+
+      m_request_cache_valid => nonce_cache_writer_valid,
+      m_request_cache_ready => nonce_cache_writer_ready
+      );
+
+  nonce_fb_register : entity work.register_stage
+    generic map(
+      WIDTH        => DATASTREAM_DATA_WIDTH,
+      READY_BYPASS => false,
+      REGISTERED   => true
+      )
+    port map(
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => nonce_fb,
+      in_valid => to_fb_reg_valid,
+      in_ready => to_fb_reg_ready,
+
+      out_data  => nonce_fb_reg,
+      out_valid => nonce_fb_reg_valid,
+      out_ready => nonce_fb_reg_ready
+      );
+
+  nonce_fb_synchronizer_stream : entity work.stream_ready_synchronizer
+    generic map(
+      OUT_WIDTH => 3,
+      REGISTERS => 0
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => plain_request,
+      s_request_ready => plain_request_ready,
+
+      m_requests(0)        => plain_request_nonce,
+      m_requests(1)        => plain_request_read,
+      m_requests(2)        => plain_request_write,
+      m_requests_active(0) => '1',
+      m_requests_active(1) => plain_request.read,
+      m_requests_active(2) => plain_request_write_access,
+      m_requests_ready(0)  => plain_request_nonce_ready,
+      m_requests_ready(1)  => plain_request_read_ready,
+      m_requests_ready(2)  => plain_request_write_ready
+      );
+
+  plain_request_write_access <= not(plain_request.read);
+
+  data_filter : entity work.stream_data_block_filter
+    generic map (
+      DATASTREAM_OUT_WIDTH => C_S_AXI_DATA_WIDTH,
+      TREE_FILTER          => false,
+      DATA_LEAF_FILTER     => true,
+      ERROR_ACCUMULATION   => true
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => plain_request_read,
+      s_request_ready => plain_request_read_ready,
+
+      m_request       => filtered_read_request,
+      m_request_ready => filtered_read_request_ready
+      );
+
+  wrap_burst_cache : entity work.stream_axi_wrap_burst_cache
+    generic map (
+      DATASTREAM_WIDTH     => C_S_AXI_DATA_WIDTH,
+      CACHE_SIZE           => DATA_BLOCK_SIZE*8,
+      NARROW_BURST_SUPPORT => (DATA_BLOCK_SIZE = 64)
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => filtered_read_request,
+      s_request_ready => filtered_read_request_ready,
+
+      m_request       => cached_read_request,
+      m_request_ready => cached_read_request_ready
+      );
+
+  read_responder : entity work.cpu_read_responder
+    generic map(
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_RUSER_WIDTH => C_S_AXI_RUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_rid    => s_axi_rid,
+      s_axi_rdata  => s_axi_rdata,
+      s_axi_rresp  => s_axi_rresp,
+      s_axi_rlast  => s_axi_rlast,
+      s_axi_ruser  => s_axi_ruser,
+      s_axi_rvalid => s_axi_rvalid,
+      s_axi_rready => s_axi_rready,
+
+      s_request       => cached_read_request,
+      s_request_ready => cached_read_request_ready
+      );
+
+  data_modifier : entity work.cpu_write_data
+    generic map(
+      C_S_AXI_DATA_WIDTH  => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_WUSER_WIDTH => C_S_AXI_WUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_axi_wdata  => s_axi_wdata,
+      s_axi_wstrb  => s_axi_wstrb,
+      s_axi_wlast  => s_axi_wlast,
+      s_axi_wuser  => s_axi_wuser,
+      s_axi_wvalid => s_axi_wvalid,
+      s_axi_wready => s_axi_wready,
+
+      s_request       => plain_request_write,
+      s_request_ready => plain_request_write_ready,
+
+      m_request       => modified_request,
+      m_request_ready => modified_request_ready
+      );
+
+  delay_register_stage : entity work.stream_multi_register_stage
+    generic map(
+      REGISTERS => 0
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => modified_request,
+      in_valid => modified_request.valid,
+      in_ready => modified_request_ready,
+
+      out_data  => data_to_treemod,
+      out_valid => open,
+      out_ready => data_to_treemod_ready
+      );
+
+  nonce_increment : entity work.nonce_increment
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request         => nonce_fb,
+      s_request_address => nonce_address,
+      s_request_valid   => to_update_valid,
+      s_request_ready   => to_update_ready,
+
+      m_request         => nonce_update,
+      m_request_address => nonce_update_address,
+      m_request_valid   => nonce_update_valid,
+      m_request_ready   => nonce_update_ready
+      );
+
+  nonce_update_synchronizer : entity work.ready_synchronizer
+    generic map(
+      OUT_WIDTH => 3
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_valid => nonce_update_valid,
+      in_ready => nonce_update_ready,
+
+      out_valid(0)  => nonce_treemod_valid,
+      out_valid(1)  => nonce_metamod_valid,
+      out_valid(2)  => nonce_update_cache_writer_valid,
+      out_active(0) => '1',
+      out_active(1) => '1',
+      out_active(2) => '1',
+      out_ready(0)  => nonce_treemod_ready,
+      out_ready(1)  => nonce_metamod_ready,
+      out_ready(2)  => nonce_update_cache_writer_ready
+      );
+
+  treedata_modifier : entity work.stream_treedata_modifier
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      metadata       => nonce_update,
+      metadata_valid => nonce_treemod_valid,
+      metadata_ready => nonce_treemod_ready,
+
+      s_request       => data_to_treemod,
+      s_request_ready => data_to_treemod_ready,
+
+      m_request       => treemod_to_metamod,
+      m_request_ready => treemod_to_metamod_ready
+      );
+
+  metadata_modifier : entity work.stream_metadata_modifier
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      metadata       => nonce_update,
+      metadata_valid => nonce_metamod_valid,
+      metadata_ready => nonce_metamod_ready,
+
+      root       => root_next_nonce,
+      root_valid => root_next_nonce_valid,
+      root_ready => root_next_nonce_ready,
+
+      s_request       => treemod_to_metamod,
+      s_request_ready => treemod_to_metamod_ready,
+
+      m_request       => metamod_to_write_issue,
+      m_request_ready => metamod_to_write_issue_ready
+      );
+
+  cache_request_writer : entity work.node_cache_writer
+    generic map(
+      CACHE_ADDR_WIDTH => CACHE_ADDR_WIDTH,
+      DATA_MEMORY_SIZE => DATA_MEMORY_SIZE,
+      CACHE_DATA_WIDTH => CACHE_DATA_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      waddr  => cache_waddr,
+      wdata  => cache_wdata,
+      wvalid => cache_wvalid,
+      wready => cache_wready,
+
+      s_old_entry   => nonce_fb,
+      s_old_address => nonce_address,
+      s_old_is_read => nonce_is_read,
+      s_old_valid   => nonce_cache_writer_valid,
+      s_old_ready   => nonce_cache_writer_ready,
+
+      s_new_entry   => nonce_update,
+      s_new_address => nonce_update_address,
+      s_new_valid   => nonce_update_cache_writer_valid,
+      s_new_ready   => nonce_update_cache_writer_ready
+      );
+
+  write_issuer : entity work.memory_write_issuer
+    generic map(
+      C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+      C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+      C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_awid    => m_axi_awid,
+      m_axi_awaddr  => m_axi_awaddr,
+      m_axi_awlen   => m_axi_awlen,
+      m_axi_awsize  => m_axi_awsize,
+      m_axi_awburst => m_axi_awburst,
+      m_axi_awlock  => m_axi_awlock,
+      m_axi_awcache => m_axi_awcache,
+      m_axi_awprot  => m_axi_awprot,
+      m_axi_awqos   => m_axi_awqos,
+      m_axi_awuser  => m_axi_awuser,
+      m_axi_awvalid => m_axi_awvalid,
+      m_axi_awready => m_axi_awready,
+
+      s_request       => metamod_to_write_issue,
+      s_request_ready => metamod_to_write_issue_ready,
+
+      m_request       => write_issue_to_reg,
+      m_request_ready => write_issue_to_reg_ready
+      );
+
+  reg_stage : entity work.stream_register_stage
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      in_data  => write_issue_to_reg,
+      in_valid => write_issue_to_reg.valid,
+      in_ready => write_issue_to_reg_ready,
+
+      out_data  => reg_to_enc,
+      out_valid => open,
+      out_ready => reg_to_enc_ready
+      );
+
+  encryption : entity work.stream_ascon
+    generic map (
+      DATA_ALIGNMENT => DATA_BLOCK_SIZE,
+      TREE_ALIGNMENT => TREE_ARITY*8
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => reg_to_enc,
+      s_request_ready => reg_to_enc_ready,
+
+      m_request       => enc_to_remover,
+      m_request_ready => enc_to_remover_ready,
+
+      KeyxDI    => (others => '0'),
+      DecryptxS => '0'
+      );
+
+  beat_remover : entity work.stream_beat_remover
+    generic map (
+      DROP_POSITION => 0
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      s_request       => enc_to_remover,
+      s_request_ready => enc_to_remover_ready,
+
+      m_request       => remover_to_write_data,
+      m_request_ready => remover_to_write_data_ready
+      );
+
+  write_data : entity work.memory_write_data
+    generic map(
+      C_M_AXI_DATA_WIDTH  => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_WUSER_WIDTH => C_M_AXI_WUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_wdata  => m_axi_wdata,
+      m_axi_wstrb  => m_axi_wstrb,
+      m_axi_wlast  => m_axi_wlast,
+      m_axi_wuser  => m_axi_wuser,
+      m_axi_wvalid => m_axi_wvalid,
+      m_axi_wready => m_axi_wready,
+
+      s_request       => remover_to_write_data,
+      s_request_ready => remover_to_write_data_ready,
+
+      m_request       => data_to_responder,
+      m_request_ready => data_to_responder_ready
+      );
+
+  write_responder : entity work.memory_to_cpu_write_responder
+    generic map(
+      C_M_AXI_ID_WIDTH    => C_M_AXI_ID_WIDTH,
+      C_M_AXI_BUSER_WIDTH => C_M_AXI_BUSER_WIDTH,
+      C_S_AXI_ID_WIDTH    => C_S_AXI_ID_WIDTH,
+      C_S_AXI_BUSER_WIDTH => C_S_AXI_BUSER_WIDTH
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      m_axi_bid    => m_axi_bid,
+      m_axi_bresp  => m_axi_bresp,
+      m_axi_buser  => m_axi_buser,
+      m_axi_bvalid => m_axi_bvalid,
+      m_axi_bready => m_axi_bready,
+
+      s_axi_bid    => s_axi_bid,
+      s_axi_bresp  => s_axi_bresp,
+      s_axi_buser  => s_axi_buser,
+      s_axi_bvalid => s_axi_bvalid,
+      s_axi_bready => s_axi_bready,
+
+      s_request       => data_to_responder,
+      s_request_ready => data_to_responder_ready,
+
+      release_lock       => release_lock,
+      release_lock_ready => release_lock_ready
+      );
+
+  cache : entity work.node_cache
+    generic map(
+      ADDR_WIDTH => CACHE_ADDR_WIDTH,
+      DATA_WIDTH => CACHE_DATA_WIDTH,
+      CACHE_SIZE => TREE_NODE_CACHE_SIZE
+      )
+    port map (
+      clk    => s_axi_aclk,
+      resetn => s_axi_aresetn,
+
+      araddr   => cache_araddr,
+      ardelete => cache_ardelete,
+      arvalid  => cache_arvalid,
+      arready  => cache_arready,
+
+      rdata  => cache_rdata,
+      rhit   => cache_rhit,
+      rvalid => cache_rvalid,
+      rready => cache_rready,
+
+      waddr  => cache_waddr,
+      wdata  => cache_wdata,
+      wvalid => cache_wvalid,
+      wready => cache_wready
+      );
+end arch_imp;
diff --git a/fpga/src/memsec/python/.gitignore b/fpga/src/memsec/python/.gitignore
new file mode 100644
index 0000000..894a44c
--- /dev/null
+++ b/fpga/src/memsec/python/.gitignore
@@ -0,0 +1,104 @@
+# Byte-compiled / optimized / DLL files
+__pycache__/
+*.py[cod]
+*$py.class
+
+# C extensions
+*.so
+
+# Distribution / packaging
+.Python
+build/
+develop-eggs/
+dist/
+downloads/
+eggs/
+.eggs/
+lib/
+lib64/
+parts/
+sdist/
+var/
+wheels/
+*.egg-info/
+.installed.cfg
+*.egg
+MANIFEST
+
+# PyInstaller
+#  Usually these files are written by a python script from a template
+#  before PyInstaller builds the exe, so as to inject date/other infos into it.
+*.manifest
+*.spec
+
+# Installer logs
+pip-log.txt
+pip-delete-this-directory.txt
+
+# Unit test / coverage reports
+htmlcov/
+.tox/
+.coverage
+.coverage.*
+.cache
+nosetests.xml
+coverage.xml
+*.cover
+.hypothesis/
+.pytest_cache/
+
+# Translations
+*.mo
+*.pot
+
+# Django stuff:
+*.log
+local_settings.py
+db.sqlite3
+
+# Flask stuff:
+instance/
+.webassets-cache
+
+# Scrapy stuff:
+.scrapy
+
+# Sphinx documentation
+docs/_build/
+
+# PyBuilder
+target/
+
+# Jupyter Notebook
+.ipynb_checkpoints
+
+# pyenv
+.python-version
+
+# celery beat schedule file
+celerybeat-schedule
+
+# SageMath parsed files
+*.sage.py
+
+# Environments
+.env
+.venv
+env/
+venv/
+ENV/
+env.bak/
+venv.bak/
+
+# Spyder project settings
+.spyderproject
+.spyproject
+
+# Rope project settings
+.ropeproject
+
+# mkdocs documentation
+/site
+
+# mypy
+.mypy_cache/
diff --git a/fpga/src/memsec/python/MANIFEST.in b/fpga/src/memsec/python/MANIFEST.in
new file mode 100644
index 0000000..9561fb1
--- /dev/null
+++ b/fpga/src/memsec/python/MANIFEST.in
@@ -0,0 +1 @@
+include README.rst
diff --git a/fpga/src/memsec/python/README.rst b/fpga/src/memsec/python/README.rst
new file mode 100644
index 0000000..c9faa67
--- /dev/null
+++ b/fpga/src/memsec/python/README.rst
@@ -0,0 +1,22 @@
+This python package provides abstractions to build and test the HDL code of the the MEMSEC memory
+encryption framework.
+
+Installing the package
+~~~~~~~~~~~~~~~~~~~~~~
+
+.. code-block:: bash
+
+    $ pip3 install .
+
+When changes to the package have to be made, installing the package as editable by adding the `-e`
+command line flag considerably simplifies the process.
+
+Building Sphinx documentation
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+.. code-block:: bash
+
+    $ python3 ./setup.py build_sphinx
+
+This command automatically generates the API documentation by executing `sphinx-apidoc` and
+generates the html output into the `_build/html` directory.
diff --git a/fpga/src/memsec/python/doc/conf.py b/fpga/src/memsec/python/doc/conf.py
new file mode 100644
index 0000000..b8f5b57
--- /dev/null
+++ b/fpga/src/memsec/python/doc/conf.py
@@ -0,0 +1,95 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+
+import sys
+import os
+
+# Add root directory to the python path to enable import of the package
+# via autodoc.
+sys.path.insert(0, os.path.abspath('../..'))
+
+
+# Fully automatically generating the API documentation for a package including all submodules and
+# subpackages is apparently not really simple with sphinx. Two approaches exist in the stock sphinx
+# package to address this need, i.e., `autosummary` with the `sphinx-autogen` tool and
+# `sphinx-apidoc`. However, both fail to some extend. The `autosummary` extension has nice template
+# support but requires to manually manage a list of all modules [1]. The `sphinx-apidoc` tool, on
+# the other hand, generates stubs for the full documentation but is designed to be executed only
+# once. Afterwards, manual modifications of the generated files is intended. Furthermore, executing
+# `sphinx-apidoc` as part of the build is not really supported and a workaround [2] is needed.
+# Still, the apidoc solution seems to be currently the most promissing approach and is therefore
+# used for now. Note that, as an alternative, there is also `better-apidoc` [3] which is a fork of
+# `sphinx-apidoc` that adds template support. Unfortunately, at least for the current code base
+# which uses implicit namespace packages, using it does not yield the desired results [4].
+#
+# [1] https://stackoverflow.com/questions/2701998/sphinx-autodoc-is-not-automatic-enough#comment76402071_21665947
+# [2] https://github.com/sphinx-doc/sphinx/issues/1861#issuecomment-354083328
+# [3] https://github.com/goerz/better-apidoc
+# [4] https://github.com/goerz/better-apidoc/issues/11
+#
+def setup(app):
+    import sphinx.apidoc
+    sphinx.apidoc.main(['<arg...>', '-f', '-T', '-M', '-e', '--implicit-namespaces',
+                        '-o', 'doc/_generated', 'memsec'])
+    # import better_apidoc
+    # better_apidoc.main(['<arg...>', '-f', '-T', '-M', '-e', '--implicit-namespaces',
+    #                     '-t', 'doc/templates',
+    #                     '-o', 'doc/_generated', 'memsec'])
+
+# -- General configuration ------------------------------------------------
+
+extensions = [
+    'sphinx.ext.autodoc',        # extracts docstrings from python code
+    'sphinx_autodoc_typehints',  # extracts type hints
+    # 'sphinx.ext.autosummary',
+    # 'sphinx.ext.doctest',
+    # 'sphinx.ext.todo',
+    # 'sphinx.ext.mathjax',
+    'sphinx.ext.viewcode',  # include source code into the documentation
+]
+
+autoclass_content = "both"  # include both class docstring and __init__
+autodoc_default_flags = [
+    "members",
+    "inherited-members",
+    "private-members",
+    "show-inheritance"
+]
+# autosummary_generate = True
+
+# Add any paths that contain templates here, relative to this directory.
+templates_path = ['templates']
+
+# The suffix(es) of source filenames.
+# You can specify multiple suffix as a list of string:
+source_suffix = ['.rst', '.md']
+
+# The encoding of source files.
+# source_encoding = 'utf-8-sig'
+
+# The master toctree document.
+master_doc = 'index'
+
+# General information about the project. (set from setup.py if possible)
+# project = 'memsec'
+# copyright = '2018, IAIK'
+# author = 'IAIK'
+# version = '1.2.3'  # The short X.Y version.
+# release = '1.2.3'  # The full version, including alpha/beta/rc tags.
+
+# If true, `todo` and `todoList` produce output, else they produce nothing.
+todo_include_todos = True
+
+
+# -- Options for HTML output ----------------------------------------------
+
+html_theme = 'nature'
+
+# If true, links to the reST sources are added to the pages.
+html_show_sourcelink = False
+
+# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
+html_show_sphinx = False
+
+# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
+html_show_copyright = False
diff --git a/fpga/src/memsec/python/doc/index.rst b/fpga/src/memsec/python/doc/index.rst
new file mode 100644
index 0000000..101a55b
--- /dev/null
+++ b/fpga/src/memsec/python/doc/index.rst
@@ -0,0 +1,12 @@
+MEMSEC - Build and Test Helper Package
+======================================
+
+.. include:: ../README.rst
+
+API Documentation
+=================
+
+.. toctree::
+
+    MEMSEC Package Reference <_generated/memsec>
+
diff --git a/fpga/src/memsec/python/memsec/__init__.py b/fpga/src/memsec/python/memsec/__init__.py
new file mode 100644
index 0000000..0521a10
--- /dev/null
+++ b/fpga/src/memsec/python/memsec/__init__.py
@@ -0,0 +1,26 @@
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+
+"""
+This python package provides abstractions to build and test the HDL code of the the MEMSEC memory
+encryption framework.
+"""
+
+from .utils.dict import merge_dicts, extract_common_values, remove_common_values
+from .flow.abstraction import implement_bd_module, test_module
+from .helpers import configure_datastream_data_width, mangle_config, print_summary
diff --git a/fpga/src/memsec/python/memsec/flow/abstraction.py b/fpga/src/memsec/python/memsec/flow/abstraction.py
new file mode 100644
index 0000000..ec929e7
--- /dev/null
+++ b/fpga/src/memsec/python/memsec/flow/abstraction.py
@@ -0,0 +1,128 @@
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+
+from memsec.utils.dict import merge_dicts
+
+import os
+import subprocess
+import timeit
+from typing import List, Optional, Callable, Union
+
+# Takes the modulename, generics, and options and returns possibly a name
+NameCallback = Callable[[str, dict, dict], Optional[str]]
+
+
+def _run_target(module: str, targets: List[str], vars: List[str]=[],
+                binary_root_dir: Optional[str]=None,
+                source_root_dir: Optional[str]=None) -> dict:
+    """Execute targets for a specific module.
+
+    :param module: The module that should be built or simulated.
+    :param targets: The target names that should be executed.
+    :param vars: A list of variables in the form of ("key=value") that have to be applied.
+    :param binary_root_dir: The target directory where the build artifacts should be placed.
+    :param source_root_dir: The source directory where the Makefile for the project resides.
+    :returns: A dictionary with, e.g., the command, the module, the result, and the execution time.
+    """
+    if source_root_dir is None:
+        source_root_dir = os.getcwd()
+    if binary_root_dir:
+        vars += ["FLOW_BINARY_ROOT_DIR=\"{}\"".format(binary_root_dir)]
+    vars += ["FLOW_MODULE=\"{}\"".format(module)]
+    command = ' '.join(['make'] + targets + vars)
+
+    print("Running \"" + command + "\"...", flush=True)
+    start = timeit.default_timer()
+    returncode = subprocess.call(command, shell=True, cwd=source_root_dir)
+    end = timeit.default_timer()
+
+    if returncode != 0:
+        print("Running \"{}\"... FAILED! (Return code = {}) {} s".format(command, returncode,
+                                                                         end-start), flush=True)
+    else:
+        print("Running \"{}\"... OK! {} s".format(command, end-start),
+              flush=True)
+    return {'MODULE': module,
+            'COMMAND': command,
+            'RETURN_CODE': returncode,
+            'EXECUTION_TIME': end-start,
+            'ERROR': True if returncode != 0 else False,
+            'BINARY_DIR': binary_root_dir,
+            'SOURCE_DIR': source_root_dir}
+
+
+def _bd_generic_name(module: str, generic: str, bd_cell: str = 'memsec_0') -> str:
+    """Derive the variable name for specifying a generic in the block design.
+
+    .. note:: This function assumes that a Zynq processing system named `processing_system7_0` is
+       used to configure the clock frequency and source.
+
+    :param module: The top module that is built or simulated.
+    :param generic: The name of the generic that has to be modified.
+    :param bd_cell: The name of the cell in the block design which has to be manipulated.
+    :returns: The variable name which addresses the respective cell and generic.
+    """
+    if generic in ['PCW_FPGA0_PERIPHERAL_FREQMHZ', 'PCW_FCLK0_PERIPHERAL_CLKSRC']:
+        bd_cell = 'processing_system7_0'
+    return '{}FLOW_VIVADO_BD_GENERIC_{}_AT_{}'.format(module, generic, bd_cell)
+
+
+def test_module(module: str, generics: dict={}, options: dict={},
+                binary_root_dir: Union[None, str, NameCallback]=None,
+                source_root_dir: Optional[str]=None,
+                targets: List[str]=['hdlsb']) -> dict:
+    """Simulate a certain module in batch mode.
+
+    :param module: The top module that is simulated.
+    :param generics: Dictionary with generics that should be applied to the module.
+    :param options: Dictionary with options that should provided to the HDL flow.
+    :param binary_root_dir: The target directory where the build artifacts should be placed.
+    :param source_root_dir: The source directory where the Makefile for the project resides.
+    :param targets: List of targets used when calling make.
+    :returns: A dictionary with execution information incl. command, result, and execution time.
+    """
+    vars = ["{}GENERIC_{}=\"{}\"".format(module, k, v) for k, v in generics.items()]
+    vars += ["{}{}=\"{}\"".format(module, k, v) for k, v in options.items()]
+    if binary_root_dir is not None and callable(binary_root_dir):
+        binary_root_dir = binary_root_dir(module, generics, options)
+    res = _run_target(module, targets, vars, binary_root_dir, source_root_dir)
+    return merge_dicts(res, {'GENERICS': generics,
+                             'OPTIONS': options})
+
+
+def implement_bd_module(module: str, generics: dict={}, options: dict={},
+                        binary_root_dir: Union[None, str, NameCallback]=None,
+                        source_root_dir: Optional[str]=None,
+                        targets: List[str]=['implcb']) -> dict:
+    """Implement a block design module in batch mode.
+
+    :param module: The top module that is implemented.
+    :param generics: Dictionary with generics that should be applied to the module.
+    :param options: Dictionary with options that should provided to the HDL flow.
+    :param binary_root_dir: The target directory where the build artifacts should be placed.
+    :param source_root_dir: The source directory where the Makefile for the project resides.
+    :param targets: List of targets used when calling make.
+    :returns: A dictionary with execution information incl. command, result, and execution time.
+    """
+    vars = ["{}={}".format(_bd_generic_name(module, k), v) for k, v in generics.items()]
+    vars += ["{}{}=\"{}\"".format(module, k, v) for k, v in options.items()]
+    if binary_root_dir is not None and callable(binary_root_dir):
+        binary_root_dir = binary_root_dir(module, generics, options)
+    res = _run_target(module, targets, vars, binary_root_dir, source_root_dir)
+    return merge_dicts(res, {'GENERICS': generics,
+                             'OPTIONS': options})
diff --git a/fpga/src/memsec/python/memsec/helpers.py b/fpga/src/memsec/python/memsec/helpers.py
new file mode 100644
index 0000000..0664bcd
--- /dev/null
+++ b/fpga/src/memsec/python/memsec/helpers.py
@@ -0,0 +1,144 @@
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+
+import os
+import shutil
+import tempfile
+from typing import List, Optional
+
+
+def configure_datastream_data_width(width: int=64, source_root_dir: Optional[str]=None):
+    """Rewrites `memsec_config.vhd` and updates the DATASTREAM_DATA_WIDTH constant.
+
+    .. caution:: The file rewriting is performed in a very naive line-based way.
+
+    :param width: The new width that should be written into the vhdl file.
+    :param source_root_dir: The source directory where the Makefile for the project resides.
+    """
+    if source_root_dir is None:
+        source_root_dir = os.getcwd()
+    config_file = os.path.join(source_root_dir, 'hdl', 'memsec_config.vhd')
+    assert(os.path.exists(config_file))
+
+    temp_file = tempfile.NamedTemporaryFile('w+', delete=False)
+    print("Configuring DATASTREAM_DATA_WIDTH={}.".format(width))
+    with open(config_file, 'r') as input_file:
+        for line in input_file:
+            if 'DATASTREAM_DATA_WIDTH' in line:
+                temp_file.write("  constant DATASTREAM_DATA_WIDTH : integer := {};\n".format(width))
+            else:
+                temp_file.write(line)
+    temp_file.close()
+    shutil.move(temp_file.name, config_file)
+
+
+def _abbreviate_synth_strategy(name: str) -> Optional[str]:
+    """Abbreviates Vivado synthesis strategies.
+
+    :param name: The full name that should be abbreviated.
+    :returns: The abbreviated name if available, the input name if no abbreviation is known,
+              or *None* if the default name is given.
+    """
+    return {
+          'Vivado Synthesis Defaults': None,
+          'Flow_AlternateRoutability': 'FAR',
+          'Flow_AreaOptimized_medium': 'FAOm',
+          'Flow_AreaOptimized_high': 'FAOh',
+          'Flow_PerfOptimized_high': 'FPOh',
+          'Flow_PerfThresholdCarry': 'FPTC',
+          'Flow_RuntimeOptimized': 'FRO'
+    }.get(name, name)
+
+
+def _abbreviate_impl_strategy(name: str) -> Optional[str]:
+    """Abbreviates Vivado implementation strategies.
+
+    :param name: The full name that should be abbreviated.
+    :returns: The abbreviated name if available, the input name if no abbreviation is known,
+              or *None* if the default name is given.
+    """
+    return {
+          'Vivado Implementation Defaults': None,
+          'Flow_RunPostRoutePhysOpt': 'FRPRPO',
+          'Performance_Explore': 'PE',
+          'Performance_NetDelay_high': 'PNDh',
+          'Performance_NetDelay_low': 'PNDl'
+    }.get(name, name)
+
+
+def mangle_config(module: str, generics: dict, options: dict) -> Optional[str]:
+    """Performs name mangling for the provided generics and options.
+
+    This function is intended to be used as *binary_root_dir* callback in functions like
+    :py:func:`.flow.abstraction.test_module` and :py:func:`.flow.abstraction.implement_bd_module`.
+
+    :param module: The module that is built or simulated.
+    :param generics: Dictionary with generics that are applied to the module.
+    :param options: Dictionary with options that are provided to the HDL flow.
+    :returns: The mangled name or *None* if no mangling could be computed.
+    """
+    name = []
+    if 'CRYPTO_CONFIG' in generics:
+        name += ['CONFIG{}'.format(generics['CRYPTO_CONFIG'])]
+    if 'PCW_FPGA0_PERIPHERAL_FREQMHZ' in generics:
+        name += ['{}MHZ'.format(generics['PCW_FPGA0_PERIPHERAL_FREQMHZ'])]
+    if 'TREE_ROOTS' in generics:
+        name += ['R{}'.format(generics['TREE_ROOTS'])]
+    if 'TREE_ARITY' in generics:
+        name += ['A{}'.format(generics['TREE_ARITY'])]
+    if 'BLOCKS_PER_SECTOR' in generics:
+        name += ['BPS{}'.format(generics['BLOCKS_PER_SECTOR'])]
+    if 'DATA_BLOCK_SIZE' in generics:
+        name += ['B{}'.format(generics['DATA_BLOCK_SIZE'])]
+    if 'FLOW_VIVADO_SYNTH_STRATEGY' in options and \
+            _abbreviate_synth_strategy(options['FLOW_VIVADO_SYNTH_STRATEGY']):
+        name += ['S{}'.format(_abbreviate_synth_strategy(options['FLOW_VIVADO_SYNTH_STRATEGY']))]
+    if 'FLOW_VIVADO_IMPL_STRATEGY' in options and \
+            _abbreviate_impl_strategy(options['FLOW_VIVADO_IMPL_STRATEGY']):
+        name += ['I{}'.format(_abbreviate_impl_strategy(options['FLOW_VIVADO_IMPL_STRATEGY']))]
+    if 'DATASTREAM_DATA_WIDTH' in options:
+        name += ['W{}'.format(options['DATASTREAM_DATA_WIDTH'])]
+    if len(name) == 0:
+        return None
+    return "_"+"_".join(name)
+
+
+def print_summary(results: List[dict]):
+    """Prints a summary of performed build and simulation runs.
+
+    :param results: The list with the result dictionaries.
+    """
+    print("")
+    print("------------------------------------------------------------------------------")
+    print("Summary:")
+    print("------------------------------------------------------------------------------")
+    failed = 0
+    for res in results:
+        args = (res['EXECUTION_TIME'], res['RETURN_CODE'], res['MODULE'],
+                res['BINARY_DIR'], res['OPTIONS'])
+        if res['ERROR']:
+            failed = failed + 1
+            print("ERROR! {:8.3f}s (Return code = {}) {}: {} {}".format(*args))
+        else:
+            print("OK!    {:8.3f}s (Return code = {}) {}: {} {}".format(*args))
+    print("")
+    if len(results) > 0:
+        percentage = 100*failed/len(results)
+        print("{} out of {} failed. ({:.1f}%)".format(failed, len(results), percentage))
+    print("------------------------------------------------------------------------------")
+    return failed
diff --git a/fpga/src/memsec/python/memsec/utils/dict.py b/fpga/src/memsec/python/memsec/utils/dict.py
new file mode 100644
index 0000000..f738779
--- /dev/null
+++ b/fpga/src/memsec/python/memsec/utils/dict.py
@@ -0,0 +1,112 @@
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+
+from typing import Any, List, Optional, TypeVar
+
+T = TypeVar('T')
+
+
+def merge_dicts(*args: dict) -> dict:
+    """Merge multiple dictionaries into one.
+
+    Merging is performed from the first to the last argument and that existing keys get overwritten
+    in this process (i.e., only the last value for a particular key is preserved).
+
+    :param args: Dictionaries that should be merged.
+    :returns: The merged dictionary.
+    """
+    result = {}
+    for dictionary in args:
+        result.update(dictionary)
+    return result
+
+
+def extract_common_values(elements: List[T]) -> Optional[T]:
+    """Extracts the values which are identical in all input elements.
+
+    This function can be used in combination with :py:func:`remove_common_values` to generate diffs
+    between two data structures (e.g., dictionaries).
+
+    :param elements: List of elements that should be processed.
+    :returns: Common elements in the list or *None* if no common elements exist.
+    """
+    if isinstance(elements[0], list):
+        common_values = set(elements[0])
+        for x in elements[1:]:
+            common_values &= set(x)
+        if len(common_values) == 0:
+            return None
+        return list(common_values)
+    elif isinstance(elements[0], dict):
+        return _extract_common_values_dicts(elements)
+    else:
+        exp_value = elements[0]
+        for value in elements[1:]:
+            if exp_value != value:
+                return None
+        return exp_value
+
+
+def _extract_common_values_dicts(elements: List[dict]) -> Optional[dict]:
+    """Extracts the values which are identical in all input dictionaries.
+
+    :param elements: List of dictionaries that should be processed.
+    :returns: Dictionary with the common elements or *None* if no common elements exist.
+    """
+    # determine what keys are in every dict
+    common_keys = set(elements[0].keys())
+    for x in elements[1:]:
+        common_keys &= set(x.keys())
+
+    common_values = {key: elements[0][key] for key in common_keys}
+    for key in common_keys:
+        common_values[key] = extract_common_values([x[key] for x in elements])
+        if common_values[key] is None:
+            common_values.pop(key)
+    if len(common_values) == 0:
+        return None
+    return common_values
+
+
+def remove_common_values(data: T, common: T) -> Optional[T]:
+    """Removes common values from data.
+
+    This function can be used in combination with :py:func:`extract_common_values` to generate diffs
+    between two data structures (e.g., dictionaries).
+
+    :param data: The data structure where elements should be removed from.
+    :param common: The data structure with the elements that should be removed.
+    :returns: Resulting data structure without common elements or *None* if no
+              elements remain.
+    """
+    if isinstance(data, list):
+        return [x for x in data if x not in common]
+    elif isinstance(data, dict):
+        cpy = data.copy()
+        for key, value in data.items():
+            if key in common:
+                cpy[key] = remove_common_values(value, common[key])
+                if cpy[key] is None:
+                    cpy.pop(key)
+        if len(cpy) == 0:
+            return None
+        return cpy
+    else:
+        if data == common:
+            return None
+        return data
diff --git a/fpga/src/memsec/python/setup.cfg b/fpga/src/memsec/python/setup.cfg
new file mode 100644
index 0000000..8bc46ff
--- /dev/null
+++ b/fpga/src/memsec/python/setup.cfg
@@ -0,0 +1,5 @@
+[aliases]
+test=pytest
+
+[pep8]
+max-line-length=100
diff --git a/fpga/src/memsec/python/setup.py b/fpga/src/memsec/python/setup.py
new file mode 100644
index 0000000..c0127f6
--- /dev/null
+++ b/fpga/src/memsec/python/setup.py
@@ -0,0 +1,56 @@
+import sys
+from setuptools import setup
+
+
+def readme():
+    with open('README.rst') as f:
+        return f.read()
+
+author = 'Mario Werner'
+author_email = 'mario.werner@iaik.tugraz.at'
+name = 'memsec'
+version = '0.1'
+
+# make build_sphinx command available
+try:
+    from sphinx.setup_command import BuildDoc
+    cmdclass = {'build_sphinx': BuildDoc}
+except ImportError:
+    cmdclass = {}
+
+setup(name=name,
+      version=version,
+      description='Supports building and testing of the memsec memory encryption framework.',
+      long_description=readme(),
+      classifiers=[
+        'Development Status :: 2 - Pre-Alpha',
+        'Intended Audience :: Developers',
+        'Intended Audience :: Science/Research',
+        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
+        'Operating System :: OS Independent',
+        'Programming Language :: Python :: 3.5',
+        'Topic :: Scientific/Engineering',
+        'Topic :: Security :: Cryptography',
+        'Topic :: Software Development :: Build Tools',
+        'Topic :: Utilities',
+      ],
+      keywords='memory encryption vhdl fpga',
+      url='https://github.com/IAIK/memsec',
+      author=author,
+      author_email=author_email,
+      license='GPLv3',
+      packages=["memsec", "memsec.flow", "memsec.utils"],
+      cmdclass=cmdclass,
+      command_options={
+        'build_sphinx': {
+            'build_dir': ('setup.py', '_build'),
+            'project': ('setup.py', name),
+            'release': ('setup.py', version),
+            'source_dir': ('setup.py', 'doc'),
+            'version': ('setup.py', version)}},
+      python_requires='>=3.5',
+      install_requires=['pyyaml', 'pytest', 'pytest-runner'],
+      extras_requires=['sphinx', 'sphinx-autodoc-typehints'],
+      # include_package_data=True,
+      zip_safe=False
+      )
diff --git a/fpga/src/memsec/run_tests.py b/fpga/src/memsec/run_tests.py
new file mode 100644
index 0000000..9f85869
--- /dev/null
+++ b/fpga/src/memsec/run_tests.py
@@ -0,0 +1,101 @@
+#!/usr/bin/env python3
+
+# MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+# Copyright (C) 2017-2018 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+#
+# This file is part of MEMSEC.
+#
+# MEMSEC is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# MEMSEC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+
+import os
+import sys
+
+try:
+    from memsec import *
+except ImportError:
+    sys.path.append(os.path.join(os.path.dirname(__file__), "python"))
+    from memsec import *
+
+res = []
+configure_datastream_data_width()
+
+# Test the cryptographic primitives alone
+for r in [5,6,7]:
+    res.append(test_module("crypto.qarma", {'ROUNDS': r}))
+res.append(test_module("crypto.prince"))
+res.append(test_module("crypto.aes"))
+res[-1]['ERROR'] = not res[-1]['ERROR'] # the AES test is currently expected to fail
+for r in [1,2,3,6]:
+    res.append(test_module("crypto.ascon", {'UNROLED_ROUNDS': r}))
+
+# Test the different pipelines
+module ='memsec'
+options = {'FLOW_SIM_TOP': 'tb_memsec'}
+
+# run tests that compare the read/written memory to our software golden model
+res.append(test_module(module, {'CRYPTO_CONFIG': 3}, merge_dicts(options, {'TEST_FILE_DIRECTORY': 'prince/ecb'})))
+res.append(test_module(module, {'CRYPTO_CONFIG': 5}, merge_dicts(options, {'TEST_FILE_DIRECTORY': 'prince/cbc'})))
+res.append(test_module(module, {'CRYPTO_CONFIG': 7}, merge_dicts(options, {'TEST_FILE_DIRECTORY': 'prince/xts'})))
+
+# run a generic read+write test without reference data
+generics = {'SIMULATION_ITERATIONS': 50}
+options = {'FLOW_SIM_TOP': 'tb_rw_blockram'}
+
+# PLAIN
+res.append(test_module(module, merge_dicts(generics, {'CRYPTO_CONFIG': 0, 'BLOCKS_PER_SECTOR': 1}), options))
+
+# ASCON
+res.append(test_module(module, merge_dicts(generics, {'CRYPTO_CONFIG': 1, 'DATA_BLOCK_SIZE': 32}), options))
+
+# ASCON TREE
+res.append(test_module(module, merge_dicts(generics, {'CRYPTO_CONFIG': 2, 'TREE_ROOTS': 1, 'TREE_ARITY': 8, 'DATA_BLOCK_SIZE': 64}), options))
+
+# Prince ECB
+res.append(test_module(module, merge_dicts(generics, {'CRYPTO_CONFIG': 3, 'BLOCKS_PER_SECTOR': 4}), options))
+
+# AES ECB
+res.append(test_module(module, merge_dicts(generics, {'CRYPTO_CONFIG': 4, 'BLOCKS_PER_SECTOR': 2}), options))
+
+# Prince CBC
+res.append(test_module(module, merge_dicts(generics, {'CRYPTO_CONFIG': 5, 'BLOCKS_PER_SECTOR': 4}), options))
+
+# AES CBC
+res.append(test_module(module, merge_dicts(generics, {'CRYPTO_CONFIG': 6, 'BLOCKS_PER_SECTOR': 2}), options))
+
+# Prince XTS
+res.append(test_module(module, merge_dicts(generics, {'CRYPTO_CONFIG': 7, 'BLOCKS_PER_SECTOR': 4}), options))
+
+# AES XTS
+res.append(test_module(module, merge_dicts(generics, {'CRYPTO_CONFIG': 8, 'BLOCKS_PER_SECTOR': 2}), options))
+
+# CVA6 MEMORY ASCON
+options = {'FLOW_SIM_TOP': 'tb_cva_ascon_tec'}
+res.append(test_module(module, merge_dicts(generics, {'CRYPTO_CONFIG': 2, 'TREE_ROOTS': 1, 'TREE_ARITY': 8, 'DATA_BLOCK_SIZE': 64}), options))
+
+# MEAS
+localGenerics = merge_dicts(generics, {'CRYPTO_CONFIG': 9, 'TREE_ROOTS': 1, 'TREE_ARITY': 4, 'DATA_BLOCK_SIZE': 64})
+res.append(test_module(module, localGenerics, options))
+configure_datastream_data_width(128)
+res.append(test_module(module, localGenerics, merge_dicts(options, {'DATASTREAM_DATA_WIDTH': 128})))
+configure_datastream_data_width()
+
+# MEAS ECB
+localGenerics = merge_dicts(generics, {'CRYPTO_CONFIG': 10, 'TREE_ROOTS': 1, 'TREE_ARITY': 4, 'DATA_BLOCK_SIZE': 64})
+res.append(test_module(module, localGenerics, options))
+
+configure_datastream_data_width(128)
+res.append(test_module(module, localGenerics, merge_dicts(options, {'DATASTREAM_DATA_WIDTH': 128})))
+configure_datastream_data_width()
+
+sys.exit(print_summary(res))
diff --git a/fpga/src/memsec/tb/conftest.py b/fpga/src/memsec/tb/conftest.py
new file mode 100644
index 0000000..9dc535a
--- /dev/null
+++ b/fpga/src/memsec/tb/conftest.py
@@ -0,0 +1,140 @@
+from collections import OrderedDict
+import json
+import os
+import pprint
+import pytest
+import re
+import shutil
+import subprocess
+import sys
+import tempfile
+import yaml
+
+# TODO Think about better scheduling and how to reuse the build aritifacts by default.
+# see https://gist.github.com/wronglink/12e51408431098167b588a64b4e86936
+
+try:
+    import memsec
+except ImportError:
+    sys.path.append(os.path.join(os.path.dirname(__file__), "..", "python"))
+    import memsec
+
+
+def pytest_addoption(parser):
+    parser.addoption(
+        "--binary_root_dir",
+        dest="binary_root_dir",
+        help="Root directory for running the tests. Uses a temporary folder if none is specified.",
+        default=None,
+    )
+
+
+def pytest_collect_file(parent, path):
+    if path.ext == ".vhd" and path.basename.startswith("tb_"):
+        return TestFile(path, parent)
+
+
+def to_ordered_dict(input):
+    if isinstance(input, OrderedDict):
+        return input
+    if isinstance(input, list):
+        res = []
+        for element in input:
+            res.append(to_ordered_dict(element))
+        return res
+    if isinstance(input, dict):
+        res = OrderedDict()
+        keys = sorted(input.keys())
+        for key in keys:
+            res[key] = to_ordered_dict(input[key])
+        return res
+    return input
+
+
+def config_to_str(module, config):
+    if config is None:
+        return module
+    config = to_ordered_dict(config)
+    return "%s: %s" % (module, json.dumps(config))
+
+
+class TestFile(pytest.File):
+    def collect(self):
+        assert self.fspath.ext == ".vhd"
+
+        file_tests = []
+
+        # scan the comment block at the start for test configurations
+        for line in self.fspath.open():
+            # abort scanning after the initial comment block
+            line = line.strip()
+            if not line.startswith("--") and line != '':
+                break
+
+            isTest = False
+            isInverted = False
+            split = line.split("-- TEST:")
+            if len(split) == 2 and split[0] == '':
+                isTest = True
+                yamlLine = split[1]
+            split = line.split("-- TEST FAIL:")
+            if len(split) == 2 and split[0] == '':
+                isTest = True
+                isInverted = True
+                yamlLine = split[1]
+
+            if isTest:
+                config = yaml.safe_load(yamlLine)
+
+                # ensure that the module is defined
+                config.setdefault('module', self.fspath.purebasename.split("tb_")[1])
+
+                config.setdefault('expected_failure', isInverted)
+
+                # ensure that the file is in SIM_HDL_FILES and the top module for simulation
+                options = config.setdefault('options', dict())
+                options['SIM_HDL_FILES'] = str(self.fspath)
+                options['FLOW_SIM_TOP']  = self.fspath.purebasename
+
+                file_tests.append(config)
+
+        # schedule the extracted tests
+        if len(file_tests):
+            common = memsec.extract_common_values(file_tests)
+            for config in file_tests:
+                reduced_config = memsec.remove_common_values(config, common)
+                yield TestItem(config_to_str(config['module'], reduced_config), self, config)
+
+
+class TestItem(pytest.Item):
+    def __init__(self, name, parent, test_config):
+        super(TestItem, self).__init__(name, parent)
+        self.test_config = test_config
+
+        self.binary_root_dir = self.config.getoption("binary_root_dir")
+        self.delete_binary_root_dir = False
+        if self.binary_root_dir is None:
+            self.binary_root_dir = tempfile.mkdtemp(prefix=test_config['module'])
+            self.delete_binary_root_dir = True
+
+    def __del__(self):
+        if self.delete_binary_root_dir:
+            shutil.rmtree(self.binary_root_dir)
+
+    def runtest(self):
+        res = memsec.test_module(module=self.test_config['module'],
+                                 generics=self.test_config.get('generics', {}),
+                                 options=self.test_config.get('options', {}),
+                                 binary_root_dir=self.binary_root_dir,
+                                 source_root_dir=os.path.join(os.path.dirname(__file__), ".."))
+        if self.test_config['expected_failure'] and res['RETURN_CODE'] == 0:
+            raise Exception("Simulation succeeded unexpectedly (RETURN_CODE = {})".format(res['RETURN_CODE']))
+        elif self.test_config['expected_failure'] == False and res['RETURN_CODE'] != 0:
+            raise Exception("Simulation failed unexpectedly (RETURN_CODE = {})".format(res['RETURN_CODE']))
+
+    def repr_failure(self, excinfo):
+        """ called when self.runtest() raises an exception. """
+        return str(excinfo.value)
+
+    def reportinfo(self):
+        return self.fspath, 0, "{}:{}".format(self.fspath, self.name)
diff --git a/fpga/src/memsec/tb/tb_aes.vhd b/fpga/src/memsec/tb/tb_aes.vhd
new file mode 100644
index 0000000..b501dea
--- /dev/null
+++ b/fpga/src/memsec/tb/tb_aes.vhd
@@ -0,0 +1,125 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+-- TEST FAIL: {'module': 'crypto.aes'}
+
+library IEEE;
+use IEEE.STD_LOGIC_1164.all;
+use work.tb_utils_pkg.all;
+
+entity tb_aes is
+  generic(
+    ENTITY_NAME : string := "tb_aes";
+    CLK_PERIOD  : time   := 5.0 ns
+    );
+end tb_aes;
+
+architecture Behavioral of tb_aes is
+  signal ClkxC  : std_logic := '0';
+  signal RstxRB : std_logic;
+
+  signal KeyxD, KeyInvxD : std_logic_vector(127 downto 0);
+  signal MessagexD       : std_logic_vector(127 downto 0);
+  signal MessageVerifyxD : std_logic_vector(127 downto 0);
+  signal CiphertextxD    : std_logic_vector(127 downto 0);
+  signal ExpCiphertextxD : std_logic_vector(127 downto 0);
+
+  signal PlainValidxS, PlainReadyxS           : std_logic;
+  signal EncryptionValidxS, EncryptionReadyxS : std_logic;
+  signal DecryptionValidxS, DecryptionReadyxS : std_logic;
+begin
+  -- Generate clock and reset
+  ClkxC  <= not ClkxC after CLK_PERIOD;
+  RstxRB <= '0', '1'  after 20 ns;
+
+  inst_enc_aes : entity work.aes128_hs
+    port map(
+      ClkxCI     => ClkxC,
+      RstxRBI    => RstxRB,
+      KeyxDI     => KeyxD,
+      DataxDI    => MessagexD,
+      DataxDO    => CiphertextxD,
+      EncryptxSI => '1',
+      in_ready   => PlainReadyxS,
+      in_valid   => PlainValidxS,
+      out_ready  => EncryptionReadyxS,
+      out_valid  => EncryptionValidxS
+      );
+
+  inst_dec_aes : entity work.aes128_hs
+    port map(
+      ClkxCI     => ClkxC,
+      RstxRBI    => RstxRB,
+      KeyxDI     => KeyInvxD,
+      DataxDI    => CiphertextxD,
+      DataxDO    => MessageVerifyxD,
+      EncryptxSI => '0',
+      in_ready   => EncryptionReadyxS,
+      in_valid   => EncryptionValidxS,
+      out_ready  => DecryptionReadyxS,
+      out_valid  => DecryptionValidxS
+      );
+
+  rw_testcase : process
+    variable error_occured : boolean      := false;
+    type testvector_t is array (0 to 3) of std_logic_vector(127 downto 0);
+    variable message_v     : testvector_t := (x"80000000000000000000000000000000", x"ffffffffffffffffffffffffffffffff", x"00000000000000000000000000000000", x"00000000000000000000000000000000");
+    variable key_v         : testvector_t := (x"00000000000000000000000000000000", x"00000000000000000000000000000000", x"80000000000000000000000000000000", x"ffffffffffffffffffffffffffffffff");
+    variable keyInv_v      : testvector_t := (x"b4ef5bcb3e92e21123e951cf6f8f188e", x"b4ef5bcb3e92e21123e951cf6f8f188e", x"b5b125173ecce2cd22e951136f8f1852", x"d60a3588e472f07b82d2d7858cd7c326");
+    variable cipher_v      : testvector_t := (x"3ad78e726c1ec02b7ebfe92b23d9ec34", x"3f5b8cc9ea855a0afa7347d23e8d664e", x"0edd33d3c621e546455bd8ba1418bec8", x"a1f6258c877d5fcd8964484538bfc92c");
+  begin
+    wait until rising_edge(RstxRB);
+    DecryptionReadyxS <= '0';
+    for I in 0 to message_v'length-1 loop
+      KeyxD           <= key_v(I);
+      KeyInvxD        <= keyInv_v(I);
+      MessagexD       <= message_v(I);
+      ExpCiphertextxD <= cipher_v(I);
+      PlainValidxS    <= '1';
+
+      wait until PlainReadyxS = '1' and rising_edge(ClkxC);
+      PlainValidxS <= '0';
+
+      wait until EncryptionValidxS = '1' and falling_edge(ClkxC);
+      if CiphertextxD /= ExpCiphertextxD then
+        report "ERROR: Encryption failed. Ciphertext mismatch.";
+        error_occured := true;
+      end if;
+
+      wait until DecryptionValidxS = '1' and falling_edge(ClkxC);
+      if MessageVerifyxD /= MessagexD then
+        report "ERROR: Decryption failed. Plaintext mismatch.";
+        error_occured := true;
+      end if;
+      DecryptionReadyxS <= '1';
+
+      wait until DecryptionValidxS = '0' and falling_edge(ClkxC);
+      DecryptionReadyxS <= '0';
+    end loop;
+
+    if error_occured then
+      write_tb_fail(ENTITY_NAME);
+      report "Simulation failed" severity failure;
+    else
+      write_tb_success(ENTITY_NAME);
+      report "Simulation succeeded" severity failure;
+    end if;
+  end process;
+end Behavioral;
diff --git a/fpga/src/memsec/tb/tb_ascon.vhd b/fpga/src/memsec/tb/tb_ascon.vhd
new file mode 100644
index 0000000..24f514f
--- /dev/null
+++ b/fpga/src/memsec/tb/tb_ascon.vhd
@@ -0,0 +1,183 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+-- TEST: {'module': 'crypto.ascon', 'generics': {'UNROLED_ROUNDS': 1}}
+-- TEST: {'module': 'crypto.ascon', 'generics': {'UNROLED_ROUNDS': 2}}
+-- TEST: {'module': 'crypto.ascon', 'generics': {'UNROLED_ROUNDS': 3}}
+-- TEST: {'module': 'crypto.ascon', 'generics': {'UNROLED_ROUNDS': 6}}
+
+library IEEE;
+use IEEE.STD_LOGIC_1164.all;
+use work.tb_utils_pkg.all;
+
+entity tb_ascon is
+  generic(
+    ENTITY_NAME    : string  := "tb_ascon";
+    CLK_PERIOD     : time    := 5.0 ns;
+    UNROLED_ROUNDS : integer := 1       -- 1,2,3 or 6 for Ascon-128
+    );
+end tb_ascon;
+
+architecture Behavioral of tb_ascon is
+  signal ClkxC  : std_logic := '0';
+  signal RstxRB : std_logic;
+
+  signal KeyxD           : std_logic_vector(127 downto 0);
+  signal NoncexD         : std_logic_vector(127 downto 0);
+  signal ADxD            : std_logic_vector(63 downto 0);
+  signal MessagexD       : std_logic_vector(63 downto 0);
+  signal CiphertextxD    : std_logic_vector(63 downto 0);
+  signal TagxD           : std_logic_vector(127 downto 0);
+  signal ExpCiphertextxD : std_logic_vector(63 downto 0);
+  signal ExpTagxD        : std_logic_vector(127 downto 0);
+
+  signal DataOutxD                                                                 : std_logic_vector(63 downto 0);
+  signal DataInxD                                                                  : std_logic_vector(127 downto 0);
+  signal AsconTagxD                                                                : std_logic_vector(127 downto 0);
+  signal InitxS, AssociatexS, EncryptxS, DecryptxS, FinalEncryptxS, FinalDecryptxS : std_logic;
+  signal DonexS                                                                    : std_logic;
+begin
+  -- Generate clock and reset
+  ClkxC  <= not ClkxC after CLK_PERIOD;
+  RstxRB <= '0', '1'  after 20 ns;
+
+  -- Ascon 128
+  ascon : entity work.ascon
+    generic map (
+      UNROLED_ROUNDS  => UNROLED_ROUNDS,  -- 1,2,3 or 6 for Ascon-128
+      DATA_BLOCK_SIZE => 64,              -- select Ascon-128
+      ROUNDS_A        => 12,
+      ROUNDS_B        => 6,
+      DATA_BUS_WIDTH  => 128)             -- 128 bit nonces
+    port map (
+      ClkxCI             => ClkxC,
+      RstxRBI            => RstxRB,
+      KeyxDI             => KeyxD,
+      CP_InitxSI         => InitxS,
+      CP_AssociatexSI    => AssociatexS,
+      CP_EncryptxSI      => EncryptxS,
+      CP_DecryptxSI      => DecryptxS,
+      CP_FinalEncryptxSI => FinalEncryptxS,
+      CP_FinalDecryptxSI => FinalDecryptxS,
+      DataWritexDI       => DataInxD,
+      IODataxDO          => DataOutxD,
+      CP_DonexSO         => DonexS,
+      TagxDO             => AsconTagxD
+      );
+
+  rw_testcase : process
+    variable error_occured : boolean         := false;
+    type testvector128_t is array (0 to 5) of std_logic_vector(127 downto 0);
+    type testvector64_t is array (0 to 5) of std_logic_vector(63 downto 0);
+    variable message_v     : testvector64_t  := (x"0000000000000080", x"FFFFFFFFFFFFFF80", x"0000000000000080", x"0000000000000080", x"0000000000000080", x"8e75dbc06af19480");
+    variable ad_v          : testvector64_t  := (x"0000000000000080", x"0000000000000080", x"FFFFFFFFFFFFFF80", x"0000000000000080", x"0000000000000080", x"2aa76532c281ec80");
+    variable key_v         : testvector128_t := (x"00000000000000000000000000000000", x"00000000000000000000000000000000", x"00000000000000000000000000000000", x"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", x"00000000000000000000000000000000", x"857ad7a4fb7b83364c817d011b8ea261");
+    variable nonce_v       : testvector128_t := (x"00000000000000000000000000000000", x"00000000000000000000000000000000", x"00000000000000000000000000000000", x"00000000000000000000000000000000", x"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", x"e722702b7b568c9786a8b975e7c04a48");
+    variable cipher_v      : testvector64_t  := (x"44d7bff2549e8637", x"bb28400dab617937", x"046692d6c5161b41", x"de303af2de242294", x"5d1feaad4eb19ddb", x"19b4dc8720914f7d");
+    variable tag_v         : testvector128_t := (x"313e35b92cb72503b2557c9a0d57a881", x"33b88367855720ba7ec8eb26bad56298", x"0fe2eeacd55836cf85d61cc06b6f0c9d", x"60401b4323ed0bf2412c564f15140a87", x"4b8a46cc110826f8e562013cc05a166b", x"4bdc08b3379383c2cb6141b1c3a2b592");
+  begin
+    InitxS         <= '0';
+    AssociatexS    <= '0';
+    EncryptxS      <= '0';
+    DecryptxS      <= '0';
+    FinalEncryptxS <= '0';
+    FinalDecryptxS <= '0';
+
+    wait until rising_edge(RstxRB);
+    for I in 0 to message_v'length-1 loop
+      ExpCiphertextxD <= cipher_v(I);
+      ExpTagxD        <= tag_v(I);
+      NoncexD         <= nonce_v(I);
+      KeyxD           <= key_v(I);
+      ADxD            <= ad_v(I);
+      MessagexD       <= message_v(I);
+      wait until rising_edge(ClkxC);
+
+      DataInxD <= NoncexD;
+      InitxS   <= '1';
+
+      wait until DonexS = '1' and rising_edge(ClkxC);
+      InitxS                <= '0';
+      DataInxD(63 downto 0) <= ADxD;
+      AssociatexS           <= '1';
+
+      wait until DonexS = '1' and rising_edge(ClkxC);
+      AssociatexS           <= '0';
+      DataInxD(63 downto 0) <= MessagexD;
+
+      -- wait one clock cycle to make sure that DataOutxD has stabilized
+      wait until rising_edge(ClkxC);
+      CiphertextxD <= DataOutxD;
+      if DataOutxD /= ExpCiphertextxD then
+        report "ERROR: Encryption failed. Ciphertext mismatch.";
+        error_occured := true;
+      end if;
+      FinalEncryptxS <= '1';
+
+      wait until DonexS = '1' and rising_edge(ClkxC);
+      FinalEncryptxS <= '0';
+
+      wait until falling_edge(ClkxC);
+      TagxD <= AsconTagxD;
+      if AsconTagxD /= ExpTagxD then
+        report "ERROR: Encryption failed. Tag mismatch.";
+        error_occured := true;
+      end if;
+
+      wait until falling_edge(ClkxC);
+      DataInxD <= NoncexD;
+      InitxS   <= '1';
+
+      wait until DonexS = '1' and rising_edge(ClkxC);
+      InitxS                <= '0';
+      DataInxD(63 downto 0) <= ADxD;
+      AssociatexS           <= '1';
+
+      wait until DonexS = '1' and rising_edge(ClkxC);
+      AssociatexS           <= '0';
+      DataInxD(63 downto 0) <= CiphertextxD;
+
+      -- wait one clock cycle to make sure that DataOutxD has stabilized
+      wait until rising_edge(ClkxC);
+      if DataOutxD /= MessagexD then
+        report "ERROR: Decryption failed. Plaintext mismatch.";
+        error_occured := true;
+      end if;
+      FinalDecryptxS <= '1';
+
+      wait until DonexS = '1' and rising_edge(ClkxC);
+      FinalDecryptxS <= '0';
+
+      wait until falling_edge(ClkxC);
+      if AsconTagxD /= TagxD then
+        report "ERROR: Decryption failed. Tag mismatch.";
+        error_occured := true;
+      end if;
+    end loop;
+
+    if error_occured then
+      write_tb_fail(ENTITY_NAME);
+      report "Simulation failed" severity failure;
+    else
+      write_tb_success(ENTITY_NAME);
+      report "Simulation succeeded" severity failure;
+    end if;
+  end process;
+end Behavioral;
diff --git a/fpga/src/memsec/tb/tb_cva_ascon_tec.vhd b/fpga/src/memsec/tb/tb_cva_ascon_tec.vhd
new file mode 100644
index 0000000..90bd670
--- /dev/null
+++ b/fpga/src/memsec/tb/tb_cva_ascon_tec.vhd
@@ -0,0 +1,591 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+-- ASCON TREE
+-- TEST: {'module': 'memsec', generics: {CRYPTO_CONFIG: 2, TREE_ROOTS: 1, TREE_ARITY: 8, DATA_BLOCK_SIZE: 64}}
+
+library IEEE;
+use IEEE.STD_LOGIC_1164.all;
+use IEEE.NUMERIC_STD.all;
+use work.tb_utils_pkg.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+library std;
+use std.textio.all;
+
+entity tb_cva_ascon_tec is
+  generic(
+    ENTITY_NAME : string := "tb_cva_ascon_tec";
+    CLK_PERIOD  : time   := 5.0 ns;
+
+    -- Parameters of Axi Slave Bus Interface S_AXI
+    C_S_AXI_ID_WIDTH     : integer := 4;
+    C_S_AXI_DATA_WIDTH   : integer := 64;
+    C_S_AXI_ADDR_WIDTH   : integer := 64;
+    C_S_AXI_AWUSER_WIDTH : integer := 128;
+    C_S_AXI_ARUSER_WIDTH : integer := 128;
+    C_S_AXI_WUSER_WIDTH  : integer := 128;
+    C_S_AXI_RUSER_WIDTH  : integer := 128;
+    C_S_AXI_BUSER_WIDTH  : integer := 128;
+
+    -- Parameters of Axi Master Bus Interface M_AXI
+    C_M_AXI_ID_WIDTH     : integer := 4;
+    C_M_AXI_ADDR_WIDTH   : integer := 64;
+    C_M_AXI_DATA_WIDTH   : integer := 64;
+    C_M_AXI_AWUSER_WIDTH : integer := 0;
+    C_M_AXI_ARUSER_WIDTH : integer := 0;
+    C_M_AXI_WUSER_WIDTH  : integer := 0;
+    C_M_AXI_RUSER_WIDTH  : integer := 0;
+    C_M_AXI_BUSER_WIDTH  : integer := 0;
+
+    -- Crypto parameters
+    CRYPTO_CONFIG : integer := 2;
+
+    DATA_MEMORY_SIZE     : integer := 8192;
+    TREE_ARITY           : integer := 4;
+    TREE_ROOTS           : integer := 4;
+    TREE_NODE_CACHE_SIZE : integer := 1024;
+    DATA_BLOCK_SIZE      : integer := 64;
+
+    BLOCKS_PER_SECTOR : integer := 4;
+
+    -- Testbench parameters
+    SIMULATION_ITERATIONS : integer := 5
+    );
+end tb_cva_ascon_tec;
+
+architecture Behavioral of tb_cva_ascon_tec is
+  signal ClkxC  : std_logic := '0';
+  signal RstxRB : std_logic := '0';
+
+  type mem_t is array (0 to 255) of std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
+
+  signal s_axi_awid     : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0)         := (others => '0');
+  signal s_axi_awaddr   : std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0)       := (others => '0');
+  signal s_axi_awlen    : std_logic_vector(7 downto 0)                            := (others => '0');
+  signal s_axi_awsize   : std_logic_vector(2 downto 0)                            := (others => '0');
+  signal s_axi_awburst  : std_logic_vector(1 downto 0)                            := (others => '0');
+  signal s_axi_awlock   : std_logic                                               := '0';
+  signal s_axi_awcache  : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal s_axi_awprot   : std_logic_vector(2 downto 0)                            := (others => '0');
+  signal s_axi_awqos    : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal s_axi_awregion : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal s_axi_awuser   : std_logic_vector(C_S_AXI_AWUSER_WIDTH - 1 downto 0)     := (others => '0');
+  signal s_axi_awvalid  : std_logic                                               := '0';
+  signal s_axi_awready  : std_logic;
+  signal s_axi_wdata    : std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0)       := (others => '0');
+  signal s_axi_wstrb    : std_logic_vector((C_S_AXI_DATA_WIDTH / 8) - 1 downto 0) := (others => '0');
+  signal s_axi_wlast    : std_logic                                               := '0';
+  signal s_axi_wuser    : std_logic_vector(C_S_AXI_WUSER_WIDTH - 1 downto 0)      := (others => '0');
+  signal s_axi_wvalid   : std_logic                                               := '0';
+  signal s_axi_wready   : std_logic;
+  signal s_axi_bid      : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+  signal s_axi_bresp    : std_logic_vector(1 downto 0);
+  signal s_axi_buser    : std_logic_vector(C_S_AXI_BUSER_WIDTH - 1 downto 0);
+  signal s_axi_bvalid   : std_logic;
+  signal s_axi_bready   : std_logic                                               := '1';
+  signal s_axi_arid     : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0)         := (others => '0');
+  signal s_axi_araddr   : std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0)       := (others => '0');
+  signal s_axi_arlen    : std_logic_vector(7 downto 0)                            := (others => '0');
+  signal s_axi_arsize   : std_logic_vector(2 downto 0)                            := (others => '0');
+  signal s_axi_arburst  : std_logic_vector(1 downto 0)                            := (others => '0');
+  signal s_axi_arlock   : std_logic                                               := '0';
+  signal s_axi_arcache  : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal s_axi_arprot   : std_logic_vector(2 downto 0)                            := (others => '0');
+  signal s_axi_arqos    : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal s_axi_arregion : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal s_axi_aruser   : std_logic_vector(C_S_AXI_ARUSER_WIDTH - 1 downto 0)     := (others => '0');
+  signal s_axi_arvalid  : std_logic                                               := '0';
+  signal s_axi_arready  : std_logic;
+  signal s_axi_rid      : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+  signal s_axi_rdata    : std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+  signal s_axi_rresp    : std_logic_vector(1 downto 0);
+  signal s_axi_rlast    : std_logic;
+  signal s_axi_ruser    : std_logic_vector(C_S_AXI_RUSER_WIDTH - 1 downto 0);
+  signal s_axi_rvalid   : std_logic;
+  signal s_axi_rready   : std_logic                                               := '1';
+
+  signal m_axi_awid     : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal m_axi_awaddr   : std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+  signal m_axi_awregion : std_logic_vector(3 downto 0);
+  signal m_axi_awlen    : std_logic_vector(7 downto 0);
+  signal m_axi_awsize   : std_logic_vector(2 downto 0);
+  signal m_axi_awburst  : std_logic_vector(1 downto 0);
+  signal m_axi_awlock   : std_logic;
+  signal m_axi_awcache  : std_logic_vector(3 downto 0);
+  signal m_axi_awprot   : std_logic_vector(2 downto 0);
+  signal m_axi_awqos    : std_logic_vector(3 downto 0);
+  signal m_axi_awuser   : std_logic_vector(C_M_AXI_AWUSER_WIDTH - 1 downto 0);
+  signal m_axi_awvalid  : std_logic;
+  signal m_axi_awready  : std_logic;
+  signal m_axi_wdata    : std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+  signal m_axi_wstrb    : std_logic_vector(C_M_AXI_DATA_WIDTH / 8 - 1 downto 0);
+  signal m_axi_wlast    : std_logic;
+  signal m_axi_wuser    : std_logic_vector(C_M_AXI_WUSER_WIDTH - 1 downto 0);
+  signal m_axi_wvalid   : std_logic;
+  signal m_axi_wready   : std_logic;
+  signal m_axi_bid      : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal m_axi_bresp    : std_logic_vector(1 downto 0);
+  signal m_axi_buser    : std_logic_vector(C_M_AXI_BUSER_WIDTH - 1 downto 0);
+  signal m_axi_bvalid   : std_logic;
+  signal m_axi_bready   : std_logic;
+  signal m_axi_arid     : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal m_axi_araddr   : std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+  signal m_axi_arlen    : std_logic_vector(7 downto 0);
+  signal m_axi_arsize   : std_logic_vector(2 downto 0);
+  signal m_axi_arburst  : std_logic_vector(1 downto 0);
+  signal m_axi_arlock   : std_logic;
+  signal m_axi_arcache  : std_logic_vector(3 downto 0);
+  signal m_axi_arprot   : std_logic_vector(2 downto 0);
+  signal m_axi_arqos    : std_logic_vector(3 downto 0);
+  signal m_axi_arregion : std_logic_vector(3 downto 0);
+  signal m_axi_aruser   : std_logic_vector(C_M_AXI_ARUSER_WIDTH - 1 downto 0);
+  signal m_axi_arvalid  : std_logic;
+  signal m_axi_arready  : std_logic;
+  signal m_axi_rid      : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal m_axi_rdata    : std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+  signal m_axi_rresp    : std_logic_vector(1 downto 0);
+  signal m_axi_rlast    : std_logic;
+  signal m_axi_ruser    : std_logic_vector(C_M_AXI_RUSER_WIDTH - 1 downto 0);
+  signal m_axi_rvalid   : std_logic;
+  signal m_axi_rready   : std_logic;
+
+begin
+  -- Generate clock and reset
+  ClkxC  <= not ClkxC after CLK_PERIOD;
+  RstxRB <= '0', '1'  after 20 ns;
+
+  m_axi_awregion <= (others => '0');
+  m_axi_arregion <= (others => '0');
+
+  -- Memory implementation
+  memory : entity work.simple_RAM
+    generic map(
+      ENTRIES            => 2*DATA_MEMORY_SIZE/(C_S_AXI_DATA_WIDTH/8),
+      C_S_AXI_ID_WIDTH   => C_M_AXI_ID_WIDTH,
+      C_S_AXI_DATA_WIDTH => C_M_AXI_DATA_WIDTH,
+      C_S_AXI_ADDR_WIDTH => C_M_AXI_ADDR_WIDTH
+    )
+    port map (
+      s_aclk        => ClkxC,
+      s_aresetn     => RstxRB,
+      s_axi_awid    => m_axi_awid,
+      s_axi_awaddr  => m_axi_awaddr,
+      s_axi_awlen   => m_axi_awlen,
+      s_axi_awsize  => m_axi_awsize,
+      s_axi_awburst => m_axi_awburst,
+      s_axi_awvalid => m_axi_awvalid,
+      s_axi_awready => m_axi_awready,
+      s_axi_wdata   => m_axi_wdata,
+      s_axi_wstrb   => m_axi_wstrb,
+      s_axi_wlast   => m_axi_wlast,
+      s_axi_wvalid  => m_axi_wvalid,
+      s_axi_wready  => m_axi_wready,
+      s_axi_bid     => m_axi_bid,
+      s_axi_bresp   => m_axi_bresp,
+      s_axi_bvalid  => m_axi_bvalid,
+      s_axi_bready  => m_axi_bready,
+      s_axi_arid    => m_axi_arid,
+      s_axi_araddr  => m_axi_araddr,
+      s_axi_arlen   => m_axi_arlen,
+      s_axi_arsize  => m_axi_arsize,
+      s_axi_arburst => m_axi_arburst,
+      s_axi_arvalid => m_axi_arvalid,
+      s_axi_arready => m_axi_arready,
+      s_axi_rid     => m_axi_rid,
+      s_axi_rdata   => m_axi_rdata,
+      s_axi_rresp   => m_axi_rresp,
+      s_axi_rlast   => m_axi_rlast,
+      s_axi_rvalid  => m_axi_rvalid,
+      s_axi_rready  => m_axi_rready
+      );
+
+  MEMSEC : entity work.memsec
+    generic map(
+      C_S_AXI_TARGET_SLAVE_BASE_ADDR => x"0000000040000000",
+      C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+      C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+      C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+      C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+      C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+      C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+      C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+      C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+      C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+      C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+      C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+      C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+      C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+      C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+      CRYPTO_CONFIG        => CRYPTO_CONFIG,
+      DATA_MEMORY_SIZE     => DATA_MEMORY_SIZE,
+      TREE_ROOTS           => TREE_ROOTS,
+      TREE_ARITY           => TREE_ARITY,
+      TREE_NODE_CACHE_SIZE => TREE_NODE_CACHE_SIZE,
+      DATA_BLOCK_SIZE      => DATA_BLOCK_SIZE,
+      BLOCKS_PER_SECTOR    => BLOCKS_PER_SECTOR
+      )
+    port map(
+      s_axi_aclk     => ClkxC,
+      s_axi_aresetn  => RstxRB,
+      s_axi_awid     => s_axi_awid,
+      s_axi_awaddr   => s_axi_awaddr,
+      s_axi_awlen    => s_axi_awlen,
+      s_axi_awsize   => s_axi_awsize,
+      s_axi_awburst  => s_axi_awburst,
+      s_axi_awlock   => s_axi_awlock,
+      s_axi_awcache  => s_axi_awcache,
+      s_axi_awprot   => s_axi_awprot,
+      s_axi_awqos    => s_axi_awqos,
+      s_axi_awregion => s_axi_awregion,
+      s_axi_awuser   => s_axi_awuser,
+      s_axi_awvalid  => s_axi_awvalid,
+      s_axi_awready  => s_axi_awready,
+      s_axi_wdata    => s_axi_wdata,
+      s_axi_wstrb    => s_axi_wstrb,
+      s_axi_wlast    => s_axi_wlast,
+      s_axi_wuser    => s_axi_wuser,
+      s_axi_wvalid   => s_axi_wvalid,
+      s_axi_wready   => s_axi_wready,
+      s_axi_bid      => s_axi_bid,
+      s_axi_bresp    => s_axi_bresp,
+      s_axi_buser    => s_axi_buser,
+      s_axi_bvalid   => s_axi_bvalid,
+      s_axi_bready   => s_axi_bready,
+
+      s_axi_arid     => s_axi_arid,
+      s_axi_araddr   => s_axi_araddr,
+      s_axi_arlen    => s_axi_arlen,
+      s_axi_arsize   => s_axi_arsize,
+      s_axi_arburst  => s_axi_arburst,
+      s_axi_arlock   => s_axi_arlock,
+      s_axi_arcache  => s_axi_arcache,
+      s_axi_arprot   => s_axi_arprot,
+      s_axi_arqos    => s_axi_arqos,
+      s_axi_arregion => s_axi_arregion,
+      s_axi_aruser   => s_axi_aruser,
+      s_axi_arvalid  => s_axi_arvalid,
+      s_axi_arready  => s_axi_arready,
+      s_axi_rid      => s_axi_rid,
+      s_axi_rdata    => s_axi_rdata,
+      s_axi_rresp    => s_axi_rresp,
+      s_axi_rlast    => s_axi_rlast,
+      s_axi_ruser    => s_axi_ruser,
+      s_axi_rvalid   => s_axi_rvalid,
+      s_axi_rready   => s_axi_rready,
+
+      m_axi_aclk    => ClkxC,
+      m_axi_aresetn => RstxRB,
+      m_axi_awid    => m_axi_awid,
+      m_axi_awaddr  => m_axi_awaddr,
+      m_axi_awlen   => m_axi_awlen,
+      m_axi_awsize  => m_axi_awsize,
+      m_axi_awburst => m_axi_awburst,
+      m_axi_awlock  => m_axi_awlock,
+      m_axi_awcache => m_axi_awcache,
+      m_axi_awprot  => m_axi_awprot,
+      m_axi_awqos   => m_axi_awqos,
+      m_axi_awuser  => m_axi_awuser,
+      m_axi_awvalid => m_axi_awvalid,
+      m_axi_awready => m_axi_awready,
+      m_axi_wdata   => m_axi_wdata,
+      m_axi_wstrb   => m_axi_wstrb,
+      m_axi_wlast   => m_axi_wlast,
+      m_axi_wuser   => m_axi_wuser,
+      m_axi_wvalid  => m_axi_wvalid,
+      m_axi_wready  => m_axi_wready,
+      m_axi_bid     => m_axi_bid,
+      m_axi_bresp   => m_axi_bresp,
+      m_axi_buser   => m_axi_buser,
+      m_axi_bvalid  => m_axi_bvalid,
+      m_axi_bready  => m_axi_bready,
+
+      m_axi_arid    => m_axi_arid,
+      m_axi_araddr  => m_axi_araddr,
+      m_axi_arlen   => m_axi_arlen,
+      m_axi_arsize  => m_axi_arsize,
+      m_axi_arburst => m_axi_arburst,
+      m_axi_arlock  => m_axi_arlock,
+      m_axi_arcache => m_axi_arcache,
+      m_axi_arprot  => m_axi_arprot,
+      m_axi_arqos   => m_axi_arqos,
+      m_axi_aruser  => m_axi_aruser,
+      m_axi_arvalid => m_axi_arvalid,
+      m_axi_arready => m_axi_arready,
+      m_axi_rid     => m_axi_rid,
+      m_axi_rdata   => m_axi_rdata,
+      m_axi_rresp   => m_axi_rresp,
+      m_axi_rlast   => m_axi_rlast,
+      m_axi_ruser   => m_axi_ruser,
+      m_axi_rvalid  => m_axi_rvalid,
+      m_axi_rready  => m_axi_rready
+      );
+
+  rw_testcase : process
+    variable line_number        : integer := 0;
+    variable space              : character;
+    variable v_burst_type       : std_logic_vector(1 downto 0);
+    variable v_addr             : std_logic_vector(C_M_AXI_ADDR_WIDTH-1 downto 0);
+    variable v_arsize           : std_logic_vector(2 downto 0);
+    variable v_arlen            : std_logic_vector(7 downto 0);
+    variable v_wlen             : std_logic_vector(7 downto 0);
+    variable data               : std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
+    variable v_passed_testcases : integer := 0;
+    variable error_occured      : boolean := false;
+
+    variable iteration : integer;
+    variable address   : integer;
+
+    variable v_usersignal          : std_logic_vector(C_S_AXI_AWUSER_WIDTH-1 downto 0);
+    variable v_usersignal_f        : std_logic_vector(C_S_AXI_AWUSER_WIDTH-1 downto 0);
+    variable v_count_expected_data : integer;
+    variable v_expected_data       : mem_t;
+    variable v_count_read_data     : integer;
+    variable v_read_data           : mem_t;
+    variable v_count_read_data_f   : integer;
+    variable v_read_data_f         : mem_t;
+
+    variable value          : std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
+    variable value_expected : std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
+  begin
+
+    s_axi_arsize  <= (others => '0');
+    s_axi_arlen   <= (others => '0');
+    s_axi_araddr  <= (others => '0');
+    s_axi_arburst <= (others => '0');
+    s_axi_arvalid <= '0';
+    s_axi_awaddr  <= (others => '0');
+    s_axi_awsize  <= (others => '0');
+    s_axi_awlen   <= (others => '0');
+    s_axi_awid    <= (others => '0');
+    s_axi_awvalid <= '0';
+
+    -- Wait until reset done
+    wait until rising_edge(RstxRB);
+
+    iteration := 0;
+    
+    v_usersignal   := (others => '1');
+    v_usersignal_f := (others => '0');
+    v_burst_type   := BURST_TYPE_WRAPPING;
+    v_addr         := x"0000000040000080";
+    v_arsize       := std_logic_vector(to_unsigned(log2_ceil(C_S_AXI_DATA_WIDTH/8), 3));
+    v_arlen        := x"07";
+
+    while iteration <= SIMULATION_ITERATIONS loop
+      iteration := iteration + 1;
+      wait until falling_edge(ClkxC);
+
+      -- Apply read information stimuli
+      s_axi_arburst <= v_burst_type;
+      s_axi_araddr  <= v_addr;
+      s_axi_arsize  <= v_arsize;
+      s_axi_arlen   <= v_arlen;
+      s_axi_arid    <= x"0";
+      s_axi_aruser  <= v_usersignal;
+
+      s_axi_arlock   <= '0';
+      s_axi_arcache  <= (others => '0');
+      s_axi_arprot   <= (others => '0');
+      s_axi_arqos    <= (others => '0');
+      s_axi_arregion <= (others => '0');
+
+      -- Start transfer
+      s_axi_arvalid <= '1';
+      loop
+        wait until rising_edge(ClkxC);
+        exit when s_axi_arready = '1';
+      end loop;
+      s_axi_arvalid <= '0';
+
+      v_count_expected_data := 0;
+      -- Wait for valid data
+      loop
+        loop
+          wait until falling_edge(ClkxC);
+          exit when s_axi_rvalid = '1';
+        end loop;
+
+        -- Save data to buffer
+        v_expected_data(v_count_expected_data) := s_axi_rdata;
+        v_count_expected_data                  := v_count_expected_data + 1;
+
+        if unsigned(s_axi_rresp) /= 0 then
+          report "ERROR: Read Response1";
+          error_occured := true;
+        end if;
+
+        exit when s_axi_rlast = '1';
+      end loop;
+
+      -- Transmission finished
+      wait until s_axi_rlast = '0';
+      wait for 2*CLK_PERIOD;
+
+      -- Start Write
+      v_expected_data(0) := x"DEADBEEFCAFEBABE";
+      v_wlen             := x"0f";
+      s_axi_awburst      <= BURST_TYPE_INCREMENTAL;
+      s_axi_awaddr       <= v_addr;
+      s_axi_awsize       <= v_arsize;
+      s_axi_awlen        <= v_wlen;
+      s_axi_awid         <= x"0";
+      s_axi_awuser       <= v_usersignal;
+
+      -- Start transfer
+      s_axi_awvalid <= '1';
+
+      loop
+        wait until rising_edge(ClkxC);
+        exit when s_axi_awready = '1';
+      end loop;
+
+      wait until falling_edge(ClkxC);
+      s_axi_awvalid <= '0';
+
+      s_axi_wdata  <= v_expected_data(0);
+      s_axi_wstrb  <= (others => '1'); -- all bytes are active
+      s_axi_wvalid <= '1';
+      s_axi_wuser  <= v_usersignal;
+      loop
+        if unsigned(v_wlen) = 0 then
+          s_axi_wlast <= '1';
+        end if;
+        wait until rising_edge(ClkxC) and s_axi_wready = '1';
+        s_axi_wstrb <= (others => '0'); -- all bytes unset
+        exit when unsigned(v_wlen) = 0;
+        v_wlen      := std_logic_vector(unsigned(v_wlen) - 1);
+      end loop;
+
+      s_axi_wvalid <= '0';
+      s_axi_wlast  <= '0';
+
+      if s_axi_bvalid = '0' then
+        loop
+          wait until rising_edge(ClkxC);
+          exit when s_axi_bvalid = '1';
+        end loop;
+      end if;
+
+      if unsigned(s_axi_bresp) /= 0 then
+        report "ERROR: Write Response";
+        error_occured := true;
+      end if;
+
+      -- Start transfer
+      s_axi_arvalid <= '1';
+      s_axi_aruser  <= v_usersignal;
+      loop
+        wait until rising_edge(ClkxC);
+        exit when s_axi_arready = '1';
+      end loop;
+      s_axi_arvalid <= '0';
+
+      -- Wait for valid data
+      v_count_read_data := 0;
+      loop
+        loop
+          wait until falling_edge(ClkxC);
+          exit when s_axi_rvalid = '1';
+        end loop;
+
+        -- Save data to buffer
+        v_read_data(v_count_read_data) := s_axi_rdata;
+        v_count_read_data              := v_count_read_data + 1;
+
+        if unsigned(s_axi_rresp) /= 0 then
+          report "ERROR: Read Response2";
+          error_occured := true;
+        end if;
+
+        exit when s_axi_rlast = '1';
+      end loop;
+
+      -- Start transfer with faulty USER signal
+      s_axi_arvalid <= '1';
+      s_axi_aruser  <= v_usersignal_f;
+      loop
+        wait until rising_edge(ClkxC);
+        exit when s_axi_arready = '1';
+      end loop;
+      s_axi_arvalid <= '0';
+
+      -- Wait for valid data
+      v_count_read_data := 0;
+      loop
+        loop
+          wait until falling_edge(ClkxC);
+          exit when s_axi_rvalid = '1';
+        end loop;
+
+        -- Save data to buffer
+        v_read_data_f(v_count_read_data) := s_axi_rdata;
+        v_count_read_data                := v_count_read_data + 1;
+
+        exit when s_axi_rlast = '1';
+      end loop;
+     
+
+      -- Check data
+
+      for i in 0 to v_count_read_data-1 loop
+        if v_expected_data(i) /= v_read_data(i) then
+          report "Expected " & to_hstring(v_expected_data(i));
+          report "Got      " & to_hstring(v_read_data(i));
+          error_occured := true;
+        end if;
+
+        if v_expected_data(i) = v_read_data_f(i) then
+          report "Expected1 " & to_hstring(v_expected_data(i));
+          report "Got1      " & to_hstring(v_read_data_f(i));
+          error_occured := true;
+        end if;
+
+        if v_count_expected_data /= v_count_read_data then
+          report "Expected length " & integer'image(v_count_expected_data);
+          report "Got length      " & integer'image(v_count_read_data);
+          report "ERROR: Data length mismatch";
+          error_occured := true;
+        end if;
+
+        if error_occured then
+          write_tb_fail(ENTITY_NAME);
+          report "ERROR" severity failure;
+        end if;
+
+        v_passed_testcases := v_passed_testcases + 1;
+      end loop;
+
+      v_addr := std_logic_vector(unsigned(v_addr)+4);
+      if v_addr = x"40002000" then
+        v_addr := x"40000000";
+      end if;
+    end loop;
+
+    write_tb_success(ENTITY_NAME);
+    report integer'image(v_passed_testcases) & " testcases passed";
+    report "Simulation complete" severity failure;
+  end process;
+
+end Behavioral;
diff --git a/fpga/src/memsec/tb/tb_memsec.vhd b/fpga/src/memsec/tb/tb_memsec.vhd
new file mode 100644
index 0000000..a82860f
--- /dev/null
+++ b/fpga/src/memsec/tb/tb_memsec.vhd
@@ -0,0 +1,956 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library IEEE;
+use IEEE.STD_LOGIC_1164.all;
+use IEEE.NUMERIC_STD.all;
+use IEEE.std_logic_textio.all; -- synopsys extension
+use work.tb_utils_pkg.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+library std;
+use std.textio.all;
+
+entity tb_memsec is
+  generic(
+  ENTITY_NAME : string := "tb_memsec";
+  CLK_PERIOD  : time   := 5.0 ns;
+
+  -- Parameters of Axi Slave Bus Interface S_AXI
+  C_S_AXI_ID_WIDTH     : integer := 12;
+  C_S_AXI_DATA_WIDTH   : integer := 32;
+  C_S_AXI_ADDR_WIDTH   : integer := 32;
+  C_S_AXI_AWUSER_WIDTH : integer := 128;
+  C_S_AXI_ARUSER_WIDTH : integer := 128;
+  C_S_AXI_WUSER_WIDTH  : integer := 0;
+  C_S_AXI_RUSER_WIDTH  : integer := 0;
+  C_S_AXI_BUSER_WIDTH  : integer := 0;
+
+  -- Parameters of Axi Master Bus Interface M_AXI
+  C_M_AXI_ID_WIDTH     : integer := 6;
+  C_M_AXI_ADDR_WIDTH   : integer := 32;
+  C_M_AXI_DATA_WIDTH   : integer := 64;
+  C_M_AXI_AWUSER_WIDTH : integer := 0;
+  C_M_AXI_ARUSER_WIDTH : integer := 0;
+  C_M_AXI_WUSER_WIDTH  : integer := 0;
+  C_M_AXI_RUSER_WIDTH  : integer := 0;
+  C_M_AXI_BUSER_WIDTH  : integer := 0;
+
+  -- Crypto parameters
+  CRYPTO_CONFIG : integer := 3;
+
+  DATA_MEMORY_SIZE     : integer := 8192;
+  TREE_ARITY           : integer := 4;
+  TREE_ROOTS           : integer := 4;
+  TREE_NODE_CACHE_SIZE : integer := 1024;
+  DATA_BLOCK_SIZE      : integer := 32;
+
+  BLOCKS_PER_SECTOR : integer := 2;
+
+  INITIAL_MEMORY_FILE : string := "initial_memory.txt";
+  TESTCASE_FILE       : string := "test_cases.txt"
+  );
+end tb_memsec;
+
+architecture Behavioral of tb_memsec is
+  signal ClkxC  : std_logic := '0';
+  signal RstxRB : std_logic;
+
+  type strobe_t is array (0 to 255) of std_logic_vector(C_S_AXI_DATA_WIDTH/8-1 downto 0);
+  type mem_t is array (0 to 255) of std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
+
+  -- AXI Memory Bus
+  signal axi_mem_awid     : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_mem_awaddr   : std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+  signal axi_mem_awregion : std_logic_vector(3 downto 0);
+  signal axi_mem_awlen    : std_logic_vector(7 downto 0);
+  signal axi_mem_awsize   : std_logic_vector(2 downto 0);
+  signal axi_mem_awburst  : std_logic_vector(1 downto 0);
+  signal axi_mem_awlock   : std_logic;
+  signal axi_mem_awcache  : std_logic_vector(3 downto 0);
+  signal axi_mem_awprot   : std_logic_vector(2 downto 0);
+  signal axi_mem_awqos    : std_logic_vector(3 downto 0);
+  signal axi_mem_awuser   : std_logic_vector(C_M_AXI_AWUSER_WIDTH - 1 downto 0);
+  signal axi_mem_awvalid  : std_logic;
+  signal axi_mem_awready  : std_logic;
+  signal axi_mem_wdata    : std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+  signal axi_mem_wstrb    : std_logic_vector(C_M_AXI_DATA_WIDTH / 8 - 1 downto 0);
+  signal axi_mem_wlast    : std_logic;
+  signal axi_mem_wuser    : std_logic_vector(C_M_AXI_WUSER_WIDTH - 1 downto 0);
+  signal axi_mem_wvalid   : std_logic;
+  signal axi_mem_wready   : std_logic;
+  signal axi_mem_bid      : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_mem_bresp    : std_logic_vector(1 downto 0);
+  signal axi_mem_buser    : std_logic_vector(C_M_AXI_BUSER_WIDTH - 1 downto 0);
+  signal axi_mem_bvalid   : std_logic;
+  signal axi_mem_bready   : std_logic;
+  signal axi_mem_arid     : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_mem_araddr   : std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+  signal axi_mem_arlen    : std_logic_vector(7 downto 0);
+  signal axi_mem_arsize   : std_logic_vector(2 downto 0);
+  signal axi_mem_arburst  : std_logic_vector(1 downto 0);
+  signal axi_mem_arlock   : std_logic;
+  signal axi_mem_arcache  : std_logic_vector(3 downto 0);
+  signal axi_mem_arprot   : std_logic_vector(2 downto 0);
+  signal axi_mem_arqos    : std_logic_vector(3 downto 0);
+  signal axi_mem_arregion : std_logic_vector(3 downto 0);
+  signal axi_mem_aruser   : std_logic_vector(C_M_AXI_ARUSER_WIDTH - 1 downto 0);
+  signal axi_mem_arvalid  : std_logic;
+  signal axi_mem_arready  : std_logic;
+  signal axi_mem_rid      : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_mem_rdata    : std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+  signal axi_mem_rresp    : std_logic_vector(1 downto 0);
+  signal axi_mem_rlast    : std_logic;
+  signal axi_mem_ruser    : std_logic_vector(C_M_AXI_RUSER_WIDTH - 1 downto 0);
+  signal axi_mem_rvalid   : std_logic;
+  signal axi_mem_rready   : std_logic;
+
+  -- AXI Memory Initialization Bus
+  signal axi_mem_init_awid     : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_mem_init_awaddr   : std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+  signal axi_mem_init_awregion : std_logic_vector(3 downto 0);
+  signal axi_mem_init_awlen    : std_logic_vector(7 downto 0);
+  signal axi_mem_init_awsize   : std_logic_vector(2 downto 0);
+  signal axi_mem_init_awburst  : std_logic_vector(1 downto 0);
+  signal axi_mem_init_awlock   : std_logic;
+  signal axi_mem_init_awcache  : std_logic_vector(3 downto 0);
+  signal axi_mem_init_awprot   : std_logic_vector(2 downto 0);
+  signal axi_mem_init_awqos    : std_logic_vector(3 downto 0);
+  signal axi_mem_init_awuser   : std_logic_vector(C_M_AXI_AWUSER_WIDTH - 1 downto 0);
+  signal axi_mem_init_awvalid  : std_logic;
+  signal axi_mem_init_awready  : std_logic;
+  signal axi_mem_init_wdata    : std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+  signal axi_mem_init_wstrb    : std_logic_vector(C_M_AXI_DATA_WIDTH / 8 - 1 downto 0);
+  signal axi_mem_init_wlast    : std_logic;
+  signal axi_mem_init_wuser    : std_logic_vector(C_M_AXI_WUSER_WIDTH - 1 downto 0);
+  signal axi_mem_init_wvalid   : std_logic;
+  signal axi_mem_init_wready   : std_logic;
+  signal axi_mem_init_bid      : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_mem_init_bresp    : std_logic_vector(1 downto 0);
+  signal axi_mem_init_buser    : std_logic_vector(C_M_AXI_BUSER_WIDTH - 1 downto 0);
+  signal axi_mem_init_bvalid   : std_logic;
+  signal axi_mem_init_bready   : std_logic;
+  signal axi_mem_init_arid     : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_mem_init_araddr   : std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+  signal axi_mem_init_arlen    : std_logic_vector(7 downto 0);
+  signal axi_mem_init_arsize   : std_logic_vector(2 downto 0);
+  signal axi_mem_init_arburst  : std_logic_vector(1 downto 0);
+  signal axi_mem_init_arlock   : std_logic;
+  signal axi_mem_init_arcache  : std_logic_vector(3 downto 0);
+  signal axi_mem_init_arprot   : std_logic_vector(2 downto 0);
+  signal axi_mem_init_arqos    : std_logic_vector(3 downto 0);
+  signal axi_mem_init_arregion : std_logic_vector(3 downto 0);
+  signal axi_mem_init_aruser   : std_logic_vector(C_M_AXI_ARUSER_WIDTH - 1 downto 0);
+  signal axi_mem_init_arvalid  : std_logic;
+  signal axi_mem_init_arready  : std_logic;
+  signal axi_mem_init_rid      : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_mem_init_rdata    : std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+  signal axi_mem_init_rresp    : std_logic_vector(1 downto 0);
+  signal axi_mem_init_rlast    : std_logic;
+  signal axi_mem_init_ruser    : std_logic_vector(C_M_AXI_RUSER_WIDTH - 1 downto 0);
+  signal axi_mem_init_rvalid   : std_logic;
+  signal axi_mem_init_rready   : std_logic;
+
+  -- AXI Memory Crypto Unit Bus
+  signal axi_mem_memsec_awid     : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_awaddr   : std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_awregion : std_logic_vector(3 downto 0);
+  signal axi_mem_memsec_awlen    : std_logic_vector(7 downto 0);
+  signal axi_mem_memsec_awsize   : std_logic_vector(2 downto 0);
+  signal axi_mem_memsec_awburst  : std_logic_vector(1 downto 0);
+  signal axi_mem_memsec_awlock   : std_logic;
+  signal axi_mem_memsec_awcache  : std_logic_vector(3 downto 0);
+  signal axi_mem_memsec_awprot   : std_logic_vector(2 downto 0);
+  signal axi_mem_memsec_awqos    : std_logic_vector(3 downto 0);
+  signal axi_mem_memsec_awuser   : std_logic_vector(C_M_AXI_AWUSER_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_awvalid  : std_logic;
+  signal axi_mem_memsec_awready  : std_logic;
+  signal axi_mem_memsec_wdata    : std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_wstrb    : std_logic_vector(C_M_AXI_DATA_WIDTH / 8 - 1 downto 0);
+  signal axi_mem_memsec_wlast    : std_logic;
+  signal axi_mem_memsec_wuser    : std_logic_vector(C_M_AXI_WUSER_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_wvalid   : std_logic;
+  signal axi_mem_memsec_wready   : std_logic;
+  signal axi_mem_memsec_bid      : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_bresp    : std_logic_vector(1 downto 0);
+  signal axi_mem_memsec_buser    : std_logic_vector(C_M_AXI_BUSER_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_bvalid   : std_logic;
+  signal axi_mem_memsec_bready   : std_logic;
+  signal axi_mem_memsec_arid     : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_araddr   : std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_arlen    : std_logic_vector(7 downto 0);
+  signal axi_mem_memsec_arsize   : std_logic_vector(2 downto 0);
+  signal axi_mem_memsec_arburst  : std_logic_vector(1 downto 0);
+  signal axi_mem_memsec_arlock   : std_logic;
+  signal axi_mem_memsec_arcache  : std_logic_vector(3 downto 0);
+  signal axi_mem_memsec_arprot   : std_logic_vector(2 downto 0);
+  signal axi_mem_memsec_arqos    : std_logic_vector(3 downto 0);
+  signal axi_mem_memsec_arregion : std_logic_vector(3 downto 0);
+  signal axi_mem_memsec_aruser   : std_logic_vector(C_M_AXI_ARUSER_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_arvalid  : std_logic;
+  signal axi_mem_memsec_arready  : std_logic;
+  signal axi_mem_memsec_rid      : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_rdata    : std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_rresp    : std_logic_vector(1 downto 0);
+  signal axi_mem_memsec_rlast    : std_logic;
+  signal axi_mem_memsec_ruser    : std_logic_vector(C_M_AXI_RUSER_WIDTH - 1 downto 0);
+  signal axi_mem_memsec_rvalid   : std_logic;
+  signal axi_mem_memsec_rready   : std_logic;
+
+  signal axi_memsec_awid     : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0)         := (others => '0');
+  signal axi_memsec_awaddr   : std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0)       := (others => '0');
+  signal axi_memsec_awlen    : std_logic_vector(7 downto 0)                            := (others => '0');
+  signal axi_memsec_awsize   : std_logic_vector(2 downto 0)                            := (others => '0');
+  signal axi_memsec_awburst  : std_logic_vector(1 downto 0)                            := (others => '0');
+  signal axi_memsec_awlock   : std_logic                                               := '0';
+  signal axi_memsec_awcache  : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal axi_memsec_awprot   : std_logic_vector(2 downto 0)                            := (others => '0');
+  signal axi_memsec_awqos    : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal axi_memsec_awregion : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal axi_memsec_awuser   : std_logic_vector(C_S_AXI_AWUSER_WIDTH - 1 downto 0)     := (others => '0');
+  signal axi_memsec_awvalid  : std_logic                                               := '0';
+  signal axi_memsec_awready  : std_logic;
+  signal axi_memsec_wdata    : std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0)       := (others => '0');
+  signal axi_memsec_wstrb    : std_logic_vector((C_S_AXI_DATA_WIDTH / 8) - 1 downto 0) := (others => '0');
+  signal axi_memsec_wlast    : std_logic                                               := '0';
+  signal axi_memsec_wuser    : std_logic_vector(C_S_AXI_WUSER_WIDTH - 1 downto 0)      := (others => '0');
+  signal axi_memsec_wvalid   : std_logic                                               := '0';
+  signal axi_memsec_wready   : std_logic;
+  signal axi_memsec_bid      : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_memsec_bresp    : std_logic_vector(1 downto 0);
+  signal axi_memsec_buser    : std_logic_vector(C_S_AXI_BUSER_WIDTH - 1 downto 0);
+  signal axi_memsec_bvalid   : std_logic;
+  signal axi_memsec_bready   : std_logic                                               := '1';
+  signal axi_memsec_arid     : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0)         := (others => '0');
+  signal axi_memsec_araddr   : std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0)       := (others => '0');
+  signal axi_memsec_arlen    : std_logic_vector(7 downto 0)                            := (others => '0');
+  signal axi_memsec_arsize   : std_logic_vector(2 downto 0)                            := (others => '0');
+  signal axi_memsec_arburst  : std_logic_vector(1 downto 0)                            := (others => '0');
+  signal axi_memsec_arlock   : std_logic                                               := '0';
+  signal axi_memsec_arcache  : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal axi_memsec_arprot   : std_logic_vector(2 downto 0)                            := (others => '0');
+  signal axi_memsec_arqos    : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal axi_memsec_arregion : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal axi_memsec_aruser   : std_logic_vector(C_S_AXI_ARUSER_WIDTH - 1 downto 0)     := (others => '0');
+  signal axi_memsec_arvalid  : std_logic                                               := '0';
+  signal axi_memsec_arready  : std_logic;
+  signal axi_memsec_rid      : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+  signal axi_memsec_rdata    : std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+  signal axi_memsec_rresp    : std_logic_vector(1 downto 0);
+  signal axi_memsec_rlast    : std_logic;
+  signal axi_memsec_ruser    : std_logic_vector(C_S_AXI_RUSER_WIDTH - 1 downto 0);
+  signal axi_memsec_rvalid   : std_logic;
+  signal axi_memsec_rready   : std_logic;
+
+  file memory_initialization_file : text open read_mode is INITIAL_MEMORY_FILE;
+  file test_case_file             : text open read_mode is TESTCASE_FILE;
+
+  signal memory_bypass : std_logic;
+begin
+
+  -- Generate clock and reset
+  ClkxC  <= not ClkxC after CLK_PERIOD;
+  RstxRB <= '0', '1'  after 20 ns;
+
+    -- Memory implementation
+  memory : entity work.simple_RAM
+    generic map(
+      ENTRIES            => DATA_MEMORY_SIZE/(C_S_AXI_DATA_WIDTH/8),
+      C_S_AXI_ID_WIDTH   => C_M_AXI_ID_WIDTH,
+      C_S_AXI_DATA_WIDTH => C_M_AXI_DATA_WIDTH,
+      C_S_AXI_ADDR_WIDTH => C_M_AXI_ADDR_WIDTH
+    )
+    port map (
+      s_aclk        => ClkxC,
+      s_aresetn     => RstxRB,
+      s_axi_awid    => axi_mem_awid,
+      s_axi_awaddr  => axi_mem_awaddr,
+      s_axi_awlen   => axi_mem_awlen,
+      s_axi_awsize  => axi_mem_awsize,
+      s_axi_awburst => axi_mem_awburst,
+      s_axi_awvalid => axi_mem_awvalid,
+      s_axi_awready => axi_mem_awready,
+      s_axi_wdata   => axi_mem_wdata,
+      s_axi_wstrb   => axi_mem_wstrb,
+      s_axi_wlast   => axi_mem_wlast,
+      s_axi_wvalid  => axi_mem_wvalid,
+      s_axi_wready  => axi_mem_wready,
+      s_axi_bid     => axi_mem_bid,
+      s_axi_bresp   => axi_mem_bresp,
+      s_axi_bvalid  => axi_mem_bvalid,
+      s_axi_bready  => axi_mem_bready,
+      s_axi_arid    => axi_mem_arid,
+      s_axi_araddr  => axi_mem_araddr,
+      s_axi_arlen   => axi_mem_arlen,
+      s_axi_arsize  => axi_mem_arsize,
+      s_axi_arburst => axi_mem_arburst,
+      s_axi_arvalid => axi_mem_arvalid,
+      s_axi_arready => axi_mem_arready,
+      s_axi_rid     => axi_mem_rid,
+      s_axi_rdata   => axi_mem_rdata,
+      s_axi_rresp   => axi_mem_rresp,
+      s_axi_rlast   => axi_mem_rlast,
+      s_axi_rvalid  => axi_mem_rvalid,
+      s_axi_rready  => axi_mem_rready
+      );
+
+  -- Multiplexer for memory bus to allow memory initialization
+  multiplex_memory_bus : process(axi_mem_arready, axi_mem_awready, axi_mem_bid,
+                                 axi_mem_bresp, axi_mem_buser, axi_mem_bvalid,
+                                 axi_mem_init_araddr, axi_mem_init_arburst,
+                                 axi_mem_init_arcache, axi_mem_init_arid,
+                                 axi_mem_init_arlen, axi_mem_init_arlock,
+                                 axi_mem_init_arprot, axi_mem_init_arqos,
+                                 axi_mem_init_arregion, axi_mem_init_arsize,
+                                 axi_mem_init_aruser, axi_mem_init_arvalid,
+                                 axi_mem_init_awaddr, axi_mem_init_awburst,
+                                 axi_mem_init_awcache, axi_mem_init_awid,
+                                 axi_mem_init_awlen, axi_mem_init_awlock,
+                                 axi_mem_init_awprot, axi_mem_init_awqos,
+                                 axi_mem_init_awregion, axi_mem_init_awsize,
+                                 axi_mem_init_awuser, axi_mem_init_awvalid,
+                                 axi_mem_init_bready, axi_mem_init_rready,
+                                 axi_mem_init_wdata, axi_mem_init_wlast,
+                                 axi_mem_init_wstrb, axi_mem_init_wuser,
+                                 axi_mem_init_wvalid, axi_mem_memsec_araddr,
+                                 axi_mem_memsec_arburst,
+                                 axi_mem_memsec_arcache, axi_mem_memsec_arid,
+                                 axi_mem_memsec_arlen, axi_mem_memsec_arlock,
+                                 axi_mem_memsec_arprot, axi_mem_memsec_arqos,
+                                 axi_mem_memsec_arregion,
+                                 axi_mem_memsec_arsize, axi_mem_memsec_aruser,
+                                 axi_mem_memsec_arvalid, axi_mem_memsec_awaddr,
+                                 axi_mem_memsec_awburst,
+                                 axi_mem_memsec_awcache, axi_mem_memsec_awid,
+                                 axi_mem_memsec_awlen, axi_mem_memsec_awlock,
+                                 axi_mem_memsec_awprot, axi_mem_memsec_awqos,
+                                 axi_mem_memsec_awregion,
+                                 axi_mem_memsec_awsize, axi_mem_memsec_awuser,
+                                 axi_mem_memsec_awvalid, axi_mem_memsec_bready,
+                                 axi_mem_memsec_rready, axi_mem_memsec_wdata,
+                                 axi_mem_memsec_wlast, axi_mem_memsec_wstrb,
+                                 axi_mem_memsec_wuser, axi_mem_memsec_wvalid,
+                                 axi_mem_rdata, axi_mem_rid, axi_mem_rlast,
+                                 axi_mem_rresp, axi_mem_ruser, axi_mem_rvalid,
+                                 axi_mem_wready, memory_bypass)
+  begin
+    if memory_bypass = '1' then
+      axi_mem_awid         <= axi_mem_init_awid;
+      axi_mem_awaddr       <= axi_mem_init_awaddr;
+      axi_mem_awregion     <= axi_mem_init_awregion;
+      axi_mem_awlen        <= axi_mem_init_awlen;
+      axi_mem_awsize       <= axi_mem_init_awsize;
+      axi_mem_awburst      <= axi_mem_init_awburst;
+      axi_mem_awlock       <= axi_mem_init_awlock;
+      axi_mem_awcache      <= axi_mem_init_awcache;
+      axi_mem_awprot       <= axi_mem_init_awprot;
+      axi_mem_awqos        <= axi_mem_init_awqos;
+      axi_mem_awuser       <= axi_mem_init_awuser;
+      axi_mem_awvalid      <= axi_mem_init_awvalid;
+      axi_mem_init_awready <= axi_mem_awready;
+
+      axi_mem_arid         <= axi_mem_init_arid;
+      axi_mem_araddr       <= axi_mem_init_araddr;
+      axi_mem_arregion     <= axi_mem_init_arregion;
+      axi_mem_arlen        <= axi_mem_init_arlen;
+      axi_mem_arsize       <= axi_mem_init_arsize;
+      axi_mem_arburst      <= axi_mem_init_arburst;
+      axi_mem_arlock       <= axi_mem_init_arlock;
+      axi_mem_arcache      <= axi_mem_init_arcache;
+      axi_mem_arprot       <= axi_mem_init_arprot;
+      axi_mem_arqos        <= axi_mem_init_arqos;
+      axi_mem_aruser       <= axi_mem_init_aruser;
+      axi_mem_arvalid      <= axi_mem_init_arvalid;
+      axi_mem_init_arready <= axi_mem_arready;
+
+      axi_mem_wdata        <= axi_mem_init_wdata;
+      axi_mem_wstrb        <= axi_mem_init_wstrb;
+      axi_mem_wlast        <= axi_mem_init_wlast;
+      axi_mem_wuser        <= axi_mem_init_wuser;
+      axi_mem_wvalid       <= axi_mem_init_wvalid;
+      axi_mem_init_wready  <= axi_mem_wready;
+
+      axi_mem_init_bid    <= axi_mem_bid;
+      axi_mem_init_bresp  <= axi_mem_bresp;
+      axi_mem_init_buser  <= axi_mem_buser;
+      axi_mem_init_bvalid <= axi_mem_bvalid;
+      axi_mem_bready      <= axi_mem_init_bready;
+
+      axi_mem_init_rid    <= axi_mem_rid;
+      axi_mem_init_rdata  <= axi_mem_rdata;
+      axi_mem_init_rresp  <= axi_mem_rresp;
+      axi_mem_init_rlast  <= axi_mem_rlast;
+      axi_mem_init_ruser  <= axi_mem_ruser;
+      axi_mem_init_rvalid <= axi_mem_rvalid;
+      axi_mem_rready      <= axi_mem_init_rready;
+    else
+      axi_mem_awid           <= axi_mem_memsec_awid;
+      axi_mem_awaddr         <= axi_mem_memsec_awaddr;
+      axi_mem_awregion       <= axi_mem_memsec_awregion;
+      axi_mem_awlen          <= axi_mem_memsec_awlen;
+      axi_mem_awsize         <= axi_mem_memsec_awsize;
+      axi_mem_awburst        <= axi_mem_memsec_awburst;
+      axi_mem_awlock         <= axi_mem_memsec_awlock;
+      axi_mem_awcache        <= axi_mem_memsec_awcache;
+      axi_mem_awprot         <= axi_mem_memsec_awprot;
+      axi_mem_awqos          <= axi_mem_memsec_awqos;
+      axi_mem_awuser         <= axi_mem_memsec_awuser;
+      axi_mem_awvalid        <= axi_mem_memsec_awvalid;
+      axi_mem_memsec_awready <= axi_mem_awready;
+
+      axi_mem_arid           <= axi_mem_memsec_arid;
+      axi_mem_araddr         <= axi_mem_memsec_araddr;
+      axi_mem_arregion       <= axi_mem_memsec_arregion;
+      axi_mem_arlen          <= axi_mem_memsec_arlen;
+      axi_mem_arsize         <= axi_mem_memsec_arsize;
+      axi_mem_arburst        <= axi_mem_memsec_arburst;
+      axi_mem_arlock         <= axi_mem_memsec_arlock;
+      axi_mem_arcache        <= axi_mem_memsec_arcache;
+      axi_mem_arprot         <= axi_mem_memsec_arprot;
+      axi_mem_arqos          <= axi_mem_memsec_arqos;
+      axi_mem_aruser         <= axi_mem_memsec_aruser;
+      axi_mem_arvalid        <= axi_mem_memsec_arvalid;
+      axi_mem_memsec_arready <= axi_mem_arready;
+
+      axi_mem_wdata          <= axi_mem_memsec_wdata;
+      axi_mem_wstrb          <= axi_mem_memsec_wstrb;
+      axi_mem_wlast          <= axi_mem_memsec_wlast;
+      axi_mem_wuser          <= axi_mem_memsec_wuser;
+      axi_mem_wvalid         <= axi_mem_memsec_wvalid;
+      axi_mem_memsec_wready  <= axi_mem_wready;
+
+      axi_mem_memsec_bid    <= axi_mem_bid;
+      axi_mem_memsec_bresp  <= axi_mem_bresp;
+      axi_mem_memsec_buser  <= axi_mem_buser;
+      axi_mem_memsec_bvalid <= axi_mem_bvalid;
+      axi_mem_bready        <= axi_mem_memsec_bready;
+
+      axi_mem_memsec_rid    <= axi_mem_rid;
+      axi_mem_memsec_rdata  <= axi_mem_rdata;
+      axi_mem_memsec_rresp  <= axi_mem_rresp;
+      axi_mem_memsec_rlast  <= axi_mem_rlast;
+      axi_mem_memsec_ruser  <= axi_mem_ruser;
+      axi_mem_memsec_rvalid <= axi_mem_rvalid;
+      axi_mem_rready        <= axi_mem_memsec_rready;
+    end if;
+  end process;
+
+  -- Instantiation of memsec
+  MEMSEC : entity work.memsec
+    generic map(
+      C_S_AXI_TARGET_SLAVE_BASE_ADDR => x"40000000",
+      C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+      C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+      C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+      C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+      C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+      C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+      C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+      C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+      C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+      C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+      C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+      C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+      C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+      C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+      CRYPTO_CONFIG        => CRYPTO_CONFIG,
+      DATA_MEMORY_SIZE     => DATA_MEMORY_SIZE,
+      TREE_ROOTS           => TREE_ROOTS,
+      TREE_ARITY           => TREE_ARITY,
+      TREE_NODE_CACHE_SIZE => TREE_NODE_CACHE_SIZE,
+      DATA_BLOCK_SIZE      => DATA_BLOCK_SIZE,
+      BLOCKS_PER_SECTOR    => BLOCKS_PER_SECTOR
+      )
+    port map(
+      s_axi_aclk     => ClkxC,
+      s_axi_aresetn  => RstxRB,
+      s_axi_awid     => axi_memsec_awid,
+      s_axi_awaddr   => axi_memsec_awaddr,
+      s_axi_awlen    => axi_memsec_awlen,
+      s_axi_awsize   => axi_memsec_awsize,
+      s_axi_awburst  => axi_memsec_awburst,
+      s_axi_awlock   => axi_memsec_awlock,
+      s_axi_awcache  => axi_memsec_awcache,
+      s_axi_awprot   => axi_memsec_awprot,
+      s_axi_awqos    => axi_memsec_awqos,
+      s_axi_awregion => axi_memsec_awregion,
+      s_axi_awuser   => axi_memsec_awuser,
+      s_axi_awvalid  => axi_memsec_awvalid,
+      s_axi_awready  => axi_memsec_awready,
+      s_axi_wdata    => axi_memsec_wdata,
+      s_axi_wstrb    => axi_memsec_wstrb,
+      s_axi_wlast    => axi_memsec_wlast,
+      s_axi_wuser    => axi_memsec_wuser,
+      s_axi_wvalid   => axi_memsec_wvalid,
+      s_axi_wready   => axi_memsec_wready,
+      s_axi_bid      => axi_memsec_bid,
+      s_axi_bresp    => axi_memsec_bresp,
+      s_axi_buser    => axi_memsec_buser,
+      s_axi_bvalid   => axi_memsec_bvalid,
+      s_axi_bready   => axi_memsec_bready,
+
+      s_axi_arid     => axi_memsec_arid,
+      s_axi_araddr   => axi_memsec_araddr,
+      s_axi_arlen    => axi_memsec_arlen,
+      s_axi_arsize   => axi_memsec_arsize,
+      s_axi_arburst  => axi_memsec_arburst,
+      s_axi_arlock   => axi_memsec_arlock,
+      s_axi_arcache  => axi_memsec_arcache,
+      s_axi_arprot   => axi_memsec_arprot,
+      s_axi_arqos    => axi_memsec_arqos,
+      s_axi_arregion => axi_memsec_arregion,
+      s_axi_aruser   => axi_memsec_aruser,
+      s_axi_arvalid  => axi_memsec_arvalid,
+      s_axi_arready  => axi_memsec_arready,
+      s_axi_rid      => axi_memsec_rid,
+      s_axi_rdata    => axi_memsec_rdata,
+      s_axi_rresp    => axi_memsec_rresp,
+      s_axi_rlast    => axi_memsec_rlast,
+      s_axi_ruser    => axi_memsec_ruser,
+      s_axi_rvalid   => axi_memsec_rvalid,
+      s_axi_rready   => axi_memsec_rready,
+
+      m_axi_aclk    => ClkxC,
+      m_axi_aresetn => RstxRB,
+      m_axi_awid    => axi_mem_memsec_awid,
+      m_axi_awaddr  => axi_mem_memsec_awaddr,
+      m_axi_awlen   => axi_mem_memsec_awlen,
+      m_axi_awsize  => axi_mem_memsec_awsize,
+      m_axi_awburst => axi_mem_memsec_awburst,
+      m_axi_awlock  => axi_mem_memsec_awlock,
+      m_axi_awcache => axi_mem_memsec_awcache,
+      m_axi_awprot  => axi_mem_memsec_awprot,
+      m_axi_awqos   => axi_mem_memsec_awqos,
+      m_axi_awuser  => axi_mem_memsec_awuser,
+      m_axi_awvalid => axi_mem_memsec_awvalid,
+      m_axi_awready => axi_mem_memsec_awready,
+      m_axi_wdata   => axi_mem_memsec_wdata,
+      m_axi_wstrb   => axi_mem_memsec_wstrb,
+      m_axi_wlast   => axi_mem_memsec_wlast,
+      m_axi_wuser   => axi_mem_memsec_wuser,
+      m_axi_wvalid  => axi_mem_memsec_wvalid,
+      m_axi_wready  => axi_mem_memsec_wready,
+      m_axi_bid     => axi_mem_memsec_bid,
+      m_axi_bresp   => axi_mem_memsec_bresp,
+      m_axi_buser   => axi_mem_memsec_buser,
+      m_axi_bvalid  => axi_mem_memsec_bvalid,
+      m_axi_bready  => axi_mem_memsec_bready,
+
+      m_axi_arid    => axi_mem_memsec_arid,
+      m_axi_araddr  => axi_mem_memsec_araddr,
+      m_axi_arlen   => axi_mem_memsec_arlen,
+      m_axi_arsize  => axi_mem_memsec_arsize,
+      m_axi_arburst => axi_mem_memsec_arburst,
+      m_axi_arlock  => axi_mem_memsec_arlock,
+      m_axi_arcache => axi_mem_memsec_arcache,
+      m_axi_arprot  => axi_mem_memsec_arprot,
+      m_axi_arqos   => axi_mem_memsec_arqos,
+      m_axi_aruser  => axi_mem_memsec_aruser,
+      m_axi_arvalid => axi_mem_memsec_arvalid,
+      m_axi_arready => axi_mem_memsec_arready,
+      m_axi_rid     => axi_mem_memsec_rid,
+      m_axi_rdata   => axi_mem_memsec_rdata,
+      m_axi_rresp   => axi_mem_memsec_rresp,
+      m_axi_rlast   => axi_mem_memsec_rlast,
+      m_axi_ruser   => axi_mem_memsec_ruser,
+      m_axi_rvalid  => axi_mem_memsec_rvalid,
+      m_axi_rready  => axi_mem_memsec_rready
+    );
+
+
+  run_testcases : process
+      variable v_memory_line    : line;
+      variable v_test_vector    : line;
+      variable v_test_vec_num   : integer;
+      variable v_line_valid     : boolean;
+      variable v_memory_word    : std_logic_vector(C_M_AXI_DATA_WIDTH-1 downto 0);
+      variable v_memory_address : std_logic_vector(31 downto 0);
+      variable v_space          : character;
+      variable v_write_access   : std_logic;
+
+      variable v_axi_burst      : std_logic_vector(1 downto 0);
+      variable v_axi_size       : std_logic_vector(2 downto 0);
+      variable v_axi_len        : std_logic_vector(7 downto 0);
+      variable v_axi_address    : std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
+
+      variable v_data           : std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
+      variable v_strobe         : std_logic_vector(C_S_AXI_DATA_WIDTH/8-1 downto 0);
+      variable v_address_expected : std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
+      variable v_data16         : std_logic_vector(15 downto 0);
+      variable v_data_expected  : mem_t;
+      variable v_data_read      : mem_t;
+      variable v_data_write     : mem_t;
+      variable v_data_strobe    : strobe_t;
+      variable v_cnt_expected   : integer;
+      variable v_cnt_read       : integer;
+      variable v_cnt_write      : integer;
+
+      variable v_error          : boolean;
+  begin
+    -- #############################################
+    -- ########## INITIALIZATION OF MEMORY #########
+    -- #############################################
+    memory_bypass <= '1';
+
+    axi_mem_init_awid    <= (others => '0');
+    axi_mem_init_awaddr  <= (others => '0');
+    axi_mem_init_awlen   <= (others => '0');
+    axi_mem_init_awsize  <= (others => '0');
+    axi_mem_init_awburst <= (others => '0');
+    axi_mem_init_awvalid <= '0';
+
+    axi_mem_init_wdata   <= (others => '0');
+    axi_mem_init_wstrb   <= (others => '0');
+    axi_mem_init_wlast   <= '0';
+    axi_mem_init_wvalid  <= '0';
+
+    axi_mem_init_arid    <= (others => '0');
+    axi_mem_init_araddr  <= (others => '0');
+    axi_mem_init_arlen   <= (others => '0');
+    axi_mem_init_arsize  <= (others => '0');
+    axi_mem_init_arburst <= (others => '0');
+    axi_mem_init_arvalid <= '0';
+
+    axi_mem_init_bready  <= '1';
+    axi_mem_init_rready  <= '0';
+
+    -- Wait until reset done
+    wait until rising_edge(RstxRB);
+
+    v_memory_address := (others => '0');
+
+    while not endfile(memory_initialization_file) loop
+      wait until falling_edge(ClkxC);
+
+      for i in 0 to C_M_AXI_DATA_WIDTH/32-1 loop
+        readline(memory_initialization_file, v_memory_line);
+        hread(v_memory_line, v_memory_word(32*i+31 downto 32*i), v_line_valid);
+        assert v_line_valid report "file size has to be a multiple of C_M_AXI_DATA_WIDTH" severity failure;
+      end loop;
+      next when not v_line_valid;
+
+      -- Apply write address to bus and start transfer
+      axi_mem_init_awburst <= BURST_TYPE_INCREMENTAL;
+      axi_mem_init_awsize  <= std_logic_vector(to_unsigned(log2_ceil(C_M_AXI_DATA_WIDTH/8), axi_mem_init_awsize'length));
+      axi_mem_init_awaddr  <= v_memory_address;
+      axi_mem_init_awvalid <= '1';
+
+      loop
+        wait until rising_edge(ClkxC);
+        exit when axi_mem_init_awready = '1';
+      end loop;
+
+      axi_mem_init_awvalid  <= '0';
+      axi_mem_init_awburst  <= "00";
+      axi_mem_init_awsize   <= "000";
+      axi_mem_init_awaddr   <= (others => '0');
+
+      wait until falling_edge(ClkxC);
+
+      axi_mem_init_wdata   <= v_memory_word;
+      axi_mem_init_wstrb   <= (others => '1');
+      axi_mem_init_wvalid  <= '1';
+      axi_mem_init_wlast   <= '1';
+
+      loop
+        wait until rising_edge(ClkxC);
+        exit when axi_mem_init_wready = '1';
+      end loop;
+
+      axi_mem_init_wvalid  <= '0';
+      axi_mem_init_wlast   <= '0';
+
+      if axi_mem_init_bvalid = '0' then
+        loop
+          wait until rising_edge(ClkxC);
+          exit when axi_mem_init_bvalid = '1';
+        end loop;
+      end if;
+
+      v_memory_address := std_logic_vector(unsigned(v_memory_address) + 8);
+    end loop;
+
+    -- #############################################
+    -- ########### RUNNING THE TESTCASES ###########
+    -- #############################################
+    memory_bypass <= '0';
+
+    axi_memsec_awid    <= (others => '0');
+    axi_memsec_awaddr  <= (others => '0');
+    axi_memsec_awlen   <= (others => '0');
+    axi_memsec_awsize  <= (others => '0');
+    axi_memsec_awburst <= (others => '0');
+    axi_memsec_awvalid <= '0';
+
+    axi_memsec_wdata   <= (others => '0');
+    axi_memsec_wstrb   <= (others => '0');
+    axi_memsec_wlast   <= '0';
+    axi_memsec_wvalid  <= '0';
+
+    axi_memsec_arid    <= (others => '0');
+    axi_memsec_araddr  <= (others => '0');
+    axi_memsec_arlen   <= (others => '0');
+    axi_memsec_arsize  <= (others => '0');
+    axi_memsec_arburst <= (others => '0');
+    axi_memsec_arvalid <= '0';
+
+    axi_memsec_bready  <= '1';
+    axi_memsec_rready  <= '0';
+
+    v_test_vec_num := 0;
+
+    while not endfile(test_case_file) loop
+      wait until falling_edge(ClkxC);
+
+      v_test_vec_num := v_test_vec_num + 1;
+
+      readline(test_case_file, v_test_vector);
+      read(v_test_vector, v_write_access, v_line_valid);
+      next when not v_line_valid;
+
+      read(v_test_vector, v_space);
+      read(v_test_vector, v_axi_burst);
+      read(v_test_vector, v_space);
+      hread(v_test_vector, v_axi_address);
+      read(v_test_vector, v_space);
+      read(v_test_vector, v_axi_size);
+      read(v_test_vector, v_space);
+      read(v_test_vector, v_axi_len);
+
+      if v_write_access = '0' then
+        -----------------
+        -- read access --
+        -----------------
+
+        v_cnt_expected := 0;
+        v_cnt_read     := 0;
+
+        -- Read expected data from file
+        while v_line_valid loop
+          read(v_test_vector, v_space, v_line_valid);
+          next when not v_line_valid;
+          hread(v_test_vector, v_data);
+          v_data_expected(v_cnt_expected) := v_data;
+          v_cnt_expected                  := v_cnt_expected + 1;
+        end loop;
+
+        -- Start read transfer
+        axi_memsec_arburst <= v_axi_burst;
+        axi_memsec_arsize  <= v_axi_size;
+        axi_memsec_arlen   <= v_axi_len;
+        axi_memsec_araddr  <= v_axi_address;
+        axi_memsec_arvalid <= '1';
+
+        loop
+          wait until rising_edge(ClkxC);
+          exit when axi_memsec_arready = '1';
+        end loop;
+
+        axi_memsec_arvalid  <= '0';
+        axi_memsec_arburst  <= "00";
+        axi_memsec_arsize   <= "000";
+        axi_memsec_arlen    <= (others => '0');
+        axi_memsec_araddr   <= (others => '0');
+
+        axi_memsec_rready   <= '1';
+        loop
+          -- Wait for valid data
+          loop
+            wait until falling_edge(ClkxC);
+            exit when axi_memsec_rvalid = '1' or axi_memsec_rlast = '1';
+          end loop;
+
+          -- Save data to buffer
+          v_data_read(v_cnt_read) := axi_memsec_rdata;
+          v_cnt_read              := v_cnt_read + 1;
+
+          exit when axi_memsec_rlast = '1';
+        end loop;
+
+        -- Transmission finished
+        wait until axi_memsec_rlast = '0';
+        wait for 2*CLK_PERIOD;
+
+        axi_memsec_rready <= '0';
+      else
+        ------------------
+        -- write access --
+        ------------------
+
+        v_cnt_write    := 0;
+
+        -- Read data to be written from file
+        for i in 0 to to_integer(unsigned(v_axi_len)) loop
+          read(v_test_vector, v_space, v_line_valid);
+          next when not v_line_valid;
+          hread(v_test_vector, v_data);
+          read(v_test_vector, v_space);
+          read(v_test_vector, v_strobe);
+
+          v_data_write(v_cnt_write)  := v_data;
+          v_data_strobe(v_cnt_write) := v_strobe;
+          v_cnt_write                := v_cnt_write + 1;
+        end loop;
+
+        read(v_test_vector, v_space);
+        hread(v_test_vector, v_address_expected);
+        read(v_test_vector, v_space);
+        hread(v_test_vector, v_data16);
+
+        v_cnt_expected := to_integer(unsigned(v_data16))/4;
+
+        for i in 0 to (v_cnt_expected-1) loop
+          read(v_test_vector, v_space);
+          hread(v_test_vector, v_data);
+          v_data_expected(i) := v_data;
+        end loop;
+
+        axi_memsec_awburst <= v_axi_burst;
+        axi_memsec_awsize  <= v_axi_size;
+        axi_memsec_awlen   <= v_axi_len;
+        axi_memsec_awaddr  <= v_axi_address;
+        axi_memsec_awvalid <= '1';
+
+        loop
+          wait until rising_edge(ClkxC);
+          exit when axi_memsec_awready = '1';
+        end loop;
+
+        axi_memsec_awvalid  <= '0';
+        axi_memsec_awburst  <= "00";
+        axi_memsec_awsize   <= "000";
+        axi_memsec_awaddr   <= (others => '0');
+
+        wait until falling_edge(ClkxC);
+
+        for i in 0 to v_cnt_write-1 loop
+          -- Write data to bus
+          axi_memsec_wdata   <= v_data_write(i);
+          axi_memsec_wstrb   <= v_data_strobe(i);
+          axi_memsec_wvalid  <= '1';
+          axi_memsec_wlast   <= '0';
+          if i = (v_cnt_write-1) then
+            axi_memsec_wlast   <= '1';
+          end if;
+
+          loop
+            wait until rising_edge(ClkxC);
+            exit when axi_memsec_wready = '1';
+          end loop;
+        end loop;
+
+        axi_memsec_wvalid <= '0';
+        axi_memsec_wlast  <= '0';
+
+        if axi_memsec_bvalid = '0' then
+          loop
+            wait until rising_edge(ClkxC);
+            exit when axi_memsec_bvalid = '1';
+          end loop;
+        end if;
+
+        wait for 2*CLK_PERIOD;
+
+        -- Check result in memory (read directly!)
+        memory_bypass <= '1';
+
+        axi_mem_init_arid    <= (others => '0');
+        axi_mem_init_araddr  <= v_address_expected;
+        axi_mem_init_arlen   <= std_logic_vector(to_unsigned(v_cnt_expected-1, 8));
+        axi_mem_init_arsize  <= "010";
+        axi_mem_init_arburst <= BURST_TYPE_INCREMENTAL;
+        axi_mem_init_arvalid <= '1';
+
+        loop
+          wait until rising_edge(ClkxC);
+          exit when axi_mem_init_arready = '1';
+        end loop;
+
+        axi_mem_init_arvalid <= '0';
+        axi_mem_init_arburst <= "00";
+        axi_mem_init_arsize  <= "000";
+        axi_mem_init_arlen   <= (others => '0');
+        axi_mem_init_araddr  <= (others => '0');
+
+        axi_mem_init_rready   <= '1';
+
+        v_cnt_read := 0;
+        loop
+          -- Wait for valid data
+          loop
+            wait until falling_edge(ClkxC);
+            exit when axi_mem_init_rvalid = '1' or axi_mem_init_rlast = '1';
+          end loop;
+
+          -- Save data to buffer
+          if ((v_cnt_read mod 2) = 0 and v_address_expected(2) = '0') or
+             ((v_cnt_read mod 2) = 1 and v_address_expected(2) = '1') then 
+            v_data_read(v_cnt_read) := axi_mem_init_rdata(31 downto 0);
+          else
+            v_data_read(v_cnt_read) := axi_mem_init_rdata(63 downto 32);
+          end if;
+
+          v_cnt_read              := v_cnt_read + 1;
+
+          exit when axi_mem_init_rlast = '1';
+        end loop;
+
+        -- Transmission finished
+        wait until axi_mem_init_rlast = '0';
+        wait for 2*CLK_PERIOD;
+
+        axi_mem_init_rready   <= '0';
+
+        memory_bypass <= '0';
+      end if;
+
+      -- Check data
+        for i in 0 to v_cnt_read-1 loop
+          if v_data_expected(i) /= v_data_read(i) then
+            report "Test Vector in line " & integer'image(v_test_vec_num);
+            report "Expected " & to_hstring(v_data_expected(i));
+            report "Got      " & to_hstring(v_data_read(i));
+            report "ERROR: Data mismatch at index " & integer'image(i);
+            v_error := true;
+          end if;
+        end loop;
+
+        if v_cnt_expected /= v_cnt_read then
+          report "Expected length " & integer'image(v_cnt_expected);
+          report "Got length      " & integer'image(v_cnt_read);
+          report "ERROR: Data length mismatch";
+          v_error := true;
+        end if;
+
+        if v_error then
+          write_tb_fail(ENTITY_NAME);
+          report "ERROR" severity failure;
+        end if;
+    end loop;
+
+    write_tb_success(ENTITY_NAME);
+    report "Simulation complete" severity failure;
+
+  end process;
+end Behavioral;
diff --git a/fpga/src/memsec/tb/tb_prince.vhd b/fpga/src/memsec/tb/tb_prince.vhd
new file mode 100644
index 0000000..9faf323
--- /dev/null
+++ b/fpga/src/memsec/tb/tb_prince.vhd
@@ -0,0 +1,131 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+-- TEST: {'module': 'crypto.prince'}
+
+library IEEE;
+use IEEE.STD_LOGIC_1164.all;
+use work.tb_utils_pkg.all;
+
+entity tb_prince is
+  generic(
+    ENTITY_NAME : string := "tb_prince";
+    CLK_PERIOD  : time   := 5.0 ns
+    );
+end tb_prince;
+
+architecture Behavioral of tb_prince is
+  signal ClkxC  : std_logic := '0';
+  signal RstxRB : std_logic;
+
+  signal Key0xD, Key1xD  : std_logic_vector(63 downto 0);
+  signal MessagexD       : std_logic_vector(63 downto 0);
+  signal MessageVerifyxD : std_logic_vector(63 downto 0);
+  signal CiphertextxD    : std_logic_vector(63 downto 0);
+  signal ExpCiphertextxD : std_logic_vector(63 downto 0);
+
+  signal PlainValidxS, PlainReadyxS           : std_logic;
+  signal EncryptionValidxS, EncryptionReadyxS : std_logic;
+  signal DecryptionValidxS, DecryptionReadyxS : std_logic;
+begin
+  -- Generate clock and reset
+  ClkxC  <= not ClkxC after CLK_PERIOD;
+  RstxRB <= '0', '1'  after 20 ns;
+
+  inst_enc_prince : entity work.prince
+    generic map(
+      DECRYPTION => false
+      )
+    port map(
+      ClkxCI        => ClkxC,
+      RstxRBI       => RstxRB,
+      Key0xDI       => Key0xD,
+      Key1xDI       => Key1xD,
+      MessagexDI    => MessagexD,
+      CiphertextxDO => CiphertextxD,
+      in_ready      => PlainReadyxS,
+      in_valid      => PlainValidxS,
+      out_ready     => EncryptionReadyxS,
+      out_valid     => EncryptionValidxS
+      );
+
+  inst_dec_prince : entity work.prince
+    generic map(
+      DECRYPTION => true
+      )
+    port map(
+      ClkxCI        => ClkxC,
+      RstxRBI       => RstxRB,
+      Key0xDI       => Key0xD,
+      Key1xDI       => Key1xD,
+      MessagexDI    => CiphertextxD,
+      CiphertextxDO => MessageVerifyxD,
+      in_ready      => EncryptionReadyxS,
+      in_valid      => EncryptionValidxS,
+      out_ready     => DecryptionReadyxS,
+      out_valid     => DecryptionValidxS
+      );
+
+  rw_testcase : process
+    variable error_occured : boolean      := false;
+    type testvector_t is array (0 to 4) of std_logic_vector(63 downto 0);
+    variable message_v     : testvector_t := (x"0000000000000000", x"ffffffffffffffff", x"0000000000000000", x"0000000000000000", x"0123456789abcdef");
+    variable key0_v        : testvector_t := (x"0000000000000000", x"0000000000000000", x"ffffffffffffffff", x"0000000000000000", x"0000000000000000");
+    variable key1_v        : testvector_t := (x"0000000000000000", x"0000000000000000", x"0000000000000000", x"ffffffffffffffff", x"fedcba9876543210");
+    variable cipher_v      : testvector_t := (x"818665aa0d02dfda", x"604ae6ca03c20ada", x"9fb51935fc3df524", x"78a54cbe737bb7ef", x"ae25ad3ca8fa9ccf");
+  begin
+    wait until rising_edge(RstxRB);
+    DecryptionReadyxS <= '0';
+    for I in 0 to message_v'length-1 loop
+      Key0xD          <= key0_v(I);
+      Key1xD          <= key1_v(I);
+      MessagexD       <= message_v(I);
+      ExpCiphertextxD <= cipher_v(I);
+      PlainValidxS    <= '1';
+
+      wait until PlainReadyxS = '1' and rising_edge(ClkxC);
+      PlainValidxS <= '0';
+
+      wait until EncryptionValidxS = '1' and falling_edge(ClkxC);
+      if CiphertextxD /= ExpCiphertextxD then
+        report "ERROR: Encryption failed. Ciphertext mismatch.";
+        error_occured := true;
+      end if;
+
+      wait until DecryptionValidxS = '1' and falling_edge(ClkxC);
+      if MessageVerifyxD /= MessagexD then
+        report "ERROR: Decryption failed. Plaintext mismatch.";
+        error_occured := true;
+      end if;
+      DecryptionReadyxS <= '1';
+
+      wait until DecryptionValidxS = '0' and falling_edge(ClkxC);
+      DecryptionReadyxS <= '0';
+    end loop;
+
+    if error_occured then
+      write_tb_fail(ENTITY_NAME);
+      report "Simulation failed" severity failure;
+    else
+      write_tb_success(ENTITY_NAME);
+      report "Simulation succeeded" severity failure;
+    end if;
+  end process;
+end Behavioral;
diff --git a/fpga/src/memsec/tb/tb_qarma.vhd b/fpga/src/memsec/tb/tb_qarma.vhd
new file mode 100644
index 0000000..c1c940d
--- /dev/null
+++ b/fpga/src/memsec/tb/tb_qarma.vhd
@@ -0,0 +1,132 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+-- TEST: {'module': 'crypto.qarma', 'generics': {'ROUNDS': 5}}
+-- TEST: {'module': 'crypto.qarma', 'generics': {'ROUNDS': 6}}
+-- TEST: {'module': 'crypto.qarma', 'generics': {'ROUNDS': 7}}
+
+library IEEE;
+use IEEE.STD_LOGIC_1164.all;
+use work.tb_utils_pkg.all;
+
+entity tb_qarma is
+  generic(
+    ENTITY_NAME : string  := "tb_qarma";
+    CLK_PERIOD  : time    := 5.0 ns;
+    ROUNDS      : integer := 6
+    );
+end tb_qarma;
+
+architecture Behavioral of tb_qarma is
+  signal ClkxC  : std_logic := '0';
+  signal RstxRB : std_logic;
+
+  signal KeyxD           : std_logic_vector(127 downto 0);
+  signal TweakxD         : std_logic_vector(63 downto 0);
+  signal MessagexD       : std_logic_vector(63 downto 0);
+  signal MessageVerifyxD : std_logic_vector(63 downto 0);
+  signal CiphertextxD    : std_logic_vector(63 downto 0);
+  signal ExpCiphertextxD : std_logic_vector(63 downto 0);
+
+  signal EnryptionValidxS, EnryptionReadyxS : std_logic;
+  signal DecryptionValidxS                  : std_logic;
+begin
+  -- Generate clock and reset
+  ClkxC  <= not ClkxC after CLK_PERIOD;
+  RstxRB <= '0', '1'  after 20 ns;
+
+  inst_enc_qarma : entity work.qarma
+    generic map(
+      DECRYPTION => false,
+      ROUNDS     => ROUNDS
+      )
+    port map(
+      ClkxCI        => ClkxC,
+      RstxRBI       => RstxRB,
+      KeyxDI        => KeyxD,
+      TweakxDI      => TweakxD,
+      MessagexDI    => MessagexD,
+      CiphertextxDO => CiphertextxD,
+
+      in_ready  => open,
+      in_valid  => '1',
+      out_ready => EnryptionReadyxS,
+      out_valid => EnryptionValidxS
+      );
+
+
+  inst_dec_qarma : entity work.qarma
+    generic map(
+      DECRYPTION => true,
+      ROUNDS     => ROUNDS
+      )
+    port map(
+      ClkxCI        => ClkxC,
+      RstxRBI       => RstxRB,
+      KeyxDI        => KeyxD,
+      TweakxDI      => TweakxD,
+      MessagexDI    => CiphertextxD,
+      CiphertextxDO => MessageVerifyxD,
+
+      in_ready  => EnryptionReadyxS,
+      in_valid  => EnryptionValidxS,
+      out_ready => '1',
+      out_valid => DecryptionValidxS
+      );
+
+  rw_testcase : process
+    variable error_occured : boolean := false;
+  begin
+    wait until rising_edge(RstxRB);
+
+    KeyxD     <= x"84be85ce9804e94bec2802d4e0a488e9";
+    MessagexD <= x"fb623599da6e8127";
+    TweakxD   <= x"477d469dec0b8762";
+
+    case ROUNDS is
+      when 5 => ExpCiphertextxD <= x"544b0ab95bda7c3a";
+      when 6 => ExpCiphertextxD <= x"a512dd1e4e3ec582";
+      when 7 => ExpCiphertextxD <= x"edf67ff370a483f2";
+      when others =>
+        write_tb_fail(ENTITY_NAME);
+        report "Test Vector is unknown" severity failure;
+    end case;
+
+    wait until EnryptionValidxS = '1' and falling_edge(ClkxC);
+    if CiphertextxD /= ExpCiphertextxD then
+      report "ERROR: Encryption failed. Ciphertext mismatch.";
+      error_occured := true;
+    end if;
+
+    wait until DecryptionValidxS = '1' and falling_edge(ClkxC);
+    if MessageVerifyxD /= MessagexD then
+      report "ERROR: Decryption failed. Plaintext mismatch.";
+      error_occured := true;
+    end if;
+
+    if error_occured then
+      write_tb_fail(ENTITY_NAME);
+      report "Simulation failed" severity failure;
+    else
+      write_tb_success(ENTITY_NAME);
+      report "Simulation succeeded" severity failure;
+    end if;
+  end process;
+end Behavioral;
diff --git a/fpga/src/memsec/tb/tb_rw_blockram.vhd b/fpga/src/memsec/tb/tb_rw_blockram.vhd
new file mode 100644
index 0000000..9e9a856
--- /dev/null
+++ b/fpga/src/memsec/tb/tb_rw_blockram.vhd
@@ -0,0 +1,546 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library IEEE;
+use IEEE.STD_LOGIC_1164.all;
+use IEEE.NUMERIC_STD.all;
+use work.tb_utils_pkg.all;
+use work.memsec_pkg.all;
+use work.memsec_functions.all;
+
+library std;
+use std.textio.all;
+
+entity tb_rw_blockram is
+  generic(
+    ENTITY_NAME : string := "tb_rw_blockram";
+    CLK_PERIOD  : time   := 5.0 ns;
+
+    -- Parameters of Axi Slave Bus Interface S_AXI
+    C_S_AXI_ID_WIDTH     : integer := 12;
+    C_S_AXI_DATA_WIDTH   : integer := 64;
+    C_S_AXI_ADDR_WIDTH   : integer := 32;
+    C_S_AXI_AWUSER_WIDTH : integer := 128;
+    C_S_AXI_ARUSER_WIDTH : integer := 128;
+    C_S_AXI_WUSER_WIDTH  : integer := 0;
+    C_S_AXI_RUSER_WIDTH  : integer := 0;
+    C_S_AXI_BUSER_WIDTH  : integer := 0;
+
+    -- Parameters of Axi Master Bus Interface M_AXI
+    C_M_AXI_ID_WIDTH     : integer := 6;
+    C_M_AXI_ADDR_WIDTH   : integer := 32;
+    C_M_AXI_DATA_WIDTH   : integer := 64;
+    C_M_AXI_AWUSER_WIDTH : integer := 0;
+    C_M_AXI_ARUSER_WIDTH : integer := 0;
+    C_M_AXI_WUSER_WIDTH  : integer := 0;
+    C_M_AXI_RUSER_WIDTH  : integer := 0;
+    C_M_AXI_BUSER_WIDTH  : integer := 0;
+
+    -- Crypto parameters
+    CRYPTO_CONFIG : integer := 1;
+
+    DATA_MEMORY_SIZE     : integer := 8192;
+    TREE_ARITY           : integer := 4;
+    TREE_ROOTS           : integer := 4;
+    TREE_NODE_CACHE_SIZE : integer := 1024;
+    DATA_BLOCK_SIZE      : integer := 32;
+
+    BLOCKS_PER_SECTOR : integer := 4;
+
+    -- Testbench parameters
+    SIMULATION_ITERATIONS : integer := 50
+    );
+end tb_rw_blockram;
+
+architecture Behavioral of tb_rw_blockram is
+  signal ClkxC  : std_logic := '0';
+  signal RstxRB : std_logic := '0';
+
+  type mem_t is array (0 to 255) of std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
+
+  signal s_axi_awid     : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0)         := (others => '0');
+  signal s_axi_awaddr   : std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0)       := (others => '0');
+  signal s_axi_awlen    : std_logic_vector(7 downto 0)                            := (others => '0');
+  signal s_axi_awsize   : std_logic_vector(2 downto 0)                            := (others => '0');
+  signal s_axi_awburst  : std_logic_vector(1 downto 0)                            := (others => '0');
+  signal s_axi_awlock   : std_logic                                               := '0';
+  signal s_axi_awcache  : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal s_axi_awprot   : std_logic_vector(2 downto 0)                            := (others => '0');
+  signal s_axi_awqos    : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal s_axi_awregion : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal s_axi_awuser   : std_logic_vector(C_S_AXI_AWUSER_WIDTH - 1 downto 0)     := (others => '0');
+  signal s_axi_awvalid  : std_logic                                               := '0';
+  signal s_axi_awready  : std_logic;
+  signal s_axi_wdata    : std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0)       := (others => '0');
+  signal s_axi_wstrb    : std_logic_vector((C_S_AXI_DATA_WIDTH / 8) - 1 downto 0) := (others => '0');
+  signal s_axi_wlast    : std_logic                                               := '0';
+  signal s_axi_wuser    : std_logic_vector(C_S_AXI_WUSER_WIDTH - 1 downto 0)      := (others => '0');
+  signal s_axi_wvalid   : std_logic                                               := '0';
+  signal s_axi_wready   : std_logic;
+  signal s_axi_bid      : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+  signal s_axi_bresp    : std_logic_vector(1 downto 0);
+  signal s_axi_buser    : std_logic_vector(C_S_AXI_BUSER_WIDTH - 1 downto 0);
+  signal s_axi_bvalid   : std_logic;
+  signal s_axi_bready   : std_logic                                               := '1';
+  signal s_axi_arid     : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0)         := (others => '0');
+  signal s_axi_araddr   : std_logic_vector(C_S_AXI_ADDR_WIDTH - 1 downto 0)       := (others => '0');
+  signal s_axi_arlen    : std_logic_vector(7 downto 0)                            := (others => '0');
+  signal s_axi_arsize   : std_logic_vector(2 downto 0)                            := (others => '0');
+  signal s_axi_arburst  : std_logic_vector(1 downto 0)                            := (others => '0');
+  signal s_axi_arlock   : std_logic                                               := '0';
+  signal s_axi_arcache  : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal s_axi_arprot   : std_logic_vector(2 downto 0)                            := (others => '0');
+  signal s_axi_arqos    : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal s_axi_arregion : std_logic_vector(3 downto 0)                            := (others => '0');
+  signal s_axi_aruser   : std_logic_vector(C_S_AXI_ARUSER_WIDTH - 1 downto 0)     := (others => '0');
+  signal s_axi_arvalid  : std_logic                                               := '0';
+  signal s_axi_arready  : std_logic;
+  signal s_axi_rid      : std_logic_vector(C_S_AXI_ID_WIDTH - 1 downto 0);
+  signal s_axi_rdata    : std_logic_vector(C_S_AXI_DATA_WIDTH - 1 downto 0);
+  signal s_axi_rresp    : std_logic_vector(1 downto 0);
+  signal s_axi_rlast    : std_logic;
+  signal s_axi_ruser    : std_logic_vector(C_S_AXI_RUSER_WIDTH - 1 downto 0);
+  signal s_axi_rvalid   : std_logic;
+  signal s_axi_rready   : std_logic                                               := '1';
+
+  signal m_axi_awid     : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal m_axi_awaddr   : std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+  signal m_axi_awregion : std_logic_vector(3 downto 0);
+  signal m_axi_awlen    : std_logic_vector(7 downto 0);
+  signal m_axi_awsize   : std_logic_vector(2 downto 0);
+  signal m_axi_awburst  : std_logic_vector(1 downto 0);
+  signal m_axi_awlock   : std_logic;
+  signal m_axi_awcache  : std_logic_vector(3 downto 0);
+  signal m_axi_awprot   : std_logic_vector(2 downto 0);
+  signal m_axi_awqos    : std_logic_vector(3 downto 0);
+  signal m_axi_awuser   : std_logic_vector(C_M_AXI_AWUSER_WIDTH - 1 downto 0);
+  signal m_axi_awvalid  : std_logic;
+  signal m_axi_awready  : std_logic;
+  signal m_axi_wdata    : std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+  signal m_axi_wstrb    : std_logic_vector(C_M_AXI_DATA_WIDTH / 8 - 1 downto 0);
+  signal m_axi_wlast    : std_logic;
+  signal m_axi_wuser    : std_logic_vector(C_M_AXI_WUSER_WIDTH - 1 downto 0);
+  signal m_axi_wvalid   : std_logic;
+  signal m_axi_wready   : std_logic;
+  signal m_axi_bid      : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal m_axi_bresp    : std_logic_vector(1 downto 0);
+  signal m_axi_buser    : std_logic_vector(C_M_AXI_BUSER_WIDTH - 1 downto 0);
+  signal m_axi_bvalid   : std_logic;
+  signal m_axi_bready   : std_logic;
+  signal m_axi_arid     : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal m_axi_araddr   : std_logic_vector(C_M_AXI_ADDR_WIDTH - 1 downto 0);
+  signal m_axi_arlen    : std_logic_vector(7 downto 0);
+  signal m_axi_arsize   : std_logic_vector(2 downto 0);
+  signal m_axi_arburst  : std_logic_vector(1 downto 0);
+  signal m_axi_arlock   : std_logic;
+  signal m_axi_arcache  : std_logic_vector(3 downto 0);
+  signal m_axi_arprot   : std_logic_vector(2 downto 0);
+  signal m_axi_arqos    : std_logic_vector(3 downto 0);
+  signal m_axi_arregion : std_logic_vector(3 downto 0);
+  signal m_axi_aruser   : std_logic_vector(C_M_AXI_ARUSER_WIDTH - 1 downto 0);
+  signal m_axi_arvalid  : std_logic;
+  signal m_axi_arready  : std_logic;
+  signal m_axi_rid      : std_logic_vector(C_M_AXI_ID_WIDTH - 1 downto 0);
+  signal m_axi_rdata    : std_logic_vector(C_M_AXI_DATA_WIDTH - 1 downto 0);
+  signal m_axi_rresp    : std_logic_vector(1 downto 0);
+  signal m_axi_rlast    : std_logic;
+  signal m_axi_ruser    : std_logic_vector(C_M_AXI_RUSER_WIDTH - 1 downto 0);
+  signal m_axi_rvalid   : std_logic;
+  signal m_axi_rready   : std_logic;
+
+begin
+  -- Generate clock and reset
+  ClkxC  <= not ClkxC after CLK_PERIOD;
+  RstxRB <= '0', '1'  after 20 ns;
+
+  m_axi_awregion <= (others => '0');
+  m_axi_arregion <= (others => '0');
+
+  -- Memory implementation
+  memory : entity work.simple_RAM
+    generic map(
+      ENTRIES            => 2*DATA_MEMORY_SIZE/(C_S_AXI_DATA_WIDTH/8),
+      C_S_AXI_ID_WIDTH   => C_M_AXI_ID_WIDTH,
+      C_S_AXI_DATA_WIDTH => C_M_AXI_DATA_WIDTH,
+      C_S_AXI_ADDR_WIDTH => C_M_AXI_ADDR_WIDTH
+    )
+    port map (
+      s_aclk        => ClkxC,
+      s_aresetn     => RstxRB,
+      s_axi_awid    => m_axi_awid,
+      s_axi_awaddr  => m_axi_awaddr,
+      s_axi_awlen   => m_axi_awlen,
+      s_axi_awsize  => m_axi_awsize,
+      s_axi_awburst => m_axi_awburst,
+      s_axi_awvalid => m_axi_awvalid,
+      s_axi_awready => m_axi_awready,
+      s_axi_wdata   => m_axi_wdata,
+      s_axi_wstrb   => m_axi_wstrb,
+      s_axi_wlast   => m_axi_wlast,
+      s_axi_wvalid  => m_axi_wvalid,
+      s_axi_wready  => m_axi_wready,
+      s_axi_bid     => m_axi_bid,
+      s_axi_bresp   => m_axi_bresp,
+      s_axi_bvalid  => m_axi_bvalid,
+      s_axi_bready  => m_axi_bready,
+      s_axi_arid    => m_axi_arid,
+      s_axi_araddr  => m_axi_araddr,
+      s_axi_arlen   => m_axi_arlen,
+      s_axi_arsize  => m_axi_arsize,
+      s_axi_arburst => m_axi_arburst,
+      s_axi_arvalid => m_axi_arvalid,
+      s_axi_arready => m_axi_arready,
+      s_axi_rid     => m_axi_rid,
+      s_axi_rdata   => m_axi_rdata,
+      s_axi_rresp   => m_axi_rresp,
+      s_axi_rlast   => m_axi_rlast,
+      s_axi_rvalid  => m_axi_rvalid,
+      s_axi_rready  => m_axi_rready
+      );
+
+  MEMSEC : entity work.memsec
+    generic map(
+      C_S_AXI_ID_WIDTH     => C_S_AXI_ID_WIDTH,
+      C_S_AXI_DATA_WIDTH   => C_S_AXI_DATA_WIDTH,
+      C_S_AXI_ADDR_WIDTH   => C_S_AXI_ADDR_WIDTH,
+      C_S_AXI_ARUSER_WIDTH => C_S_AXI_ARUSER_WIDTH,
+      C_S_AXI_AWUSER_WIDTH => C_S_AXI_AWUSER_WIDTH,
+      C_S_AXI_WUSER_WIDTH  => C_S_AXI_WUSER_WIDTH,
+      C_S_AXI_RUSER_WIDTH  => C_S_AXI_RUSER_WIDTH,
+      C_S_AXI_BUSER_WIDTH  => C_S_AXI_BUSER_WIDTH,
+
+      C_M_AXI_ID_WIDTH     => C_M_AXI_ID_WIDTH,
+      C_M_AXI_DATA_WIDTH   => C_M_AXI_DATA_WIDTH,
+      C_M_AXI_ADDR_WIDTH   => C_M_AXI_ADDR_WIDTH,
+      C_M_AXI_ARUSER_WIDTH => C_M_AXI_ARUSER_WIDTH,
+      C_M_AXI_AWUSER_WIDTH => C_M_AXI_AWUSER_WIDTH,
+      C_M_AXI_WUSER_WIDTH  => C_M_AXI_WUSER_WIDTH,
+      C_M_AXI_RUSER_WIDTH  => C_M_AXI_RUSER_WIDTH,
+      C_M_AXI_BUSER_WIDTH  => C_M_AXI_BUSER_WIDTH,
+      CRYPTO_CONFIG        => CRYPTO_CONFIG,
+      DATA_MEMORY_SIZE     => DATA_MEMORY_SIZE,
+      TREE_ROOTS           => TREE_ROOTS,
+      TREE_ARITY           => TREE_ARITY,
+      TREE_NODE_CACHE_SIZE => TREE_NODE_CACHE_SIZE,
+      DATA_BLOCK_SIZE      => DATA_BLOCK_SIZE,
+      BLOCKS_PER_SECTOR    => BLOCKS_PER_SECTOR
+      )
+    port map(
+      s_axi_aclk     => ClkxC,
+      s_axi_aresetn  => RstxRB,
+      s_axi_awid     => s_axi_awid,
+      s_axi_awaddr   => s_axi_awaddr,
+      s_axi_awlen    => s_axi_awlen,
+      s_axi_awsize   => s_axi_awsize,
+      s_axi_awburst  => s_axi_awburst,
+      s_axi_awlock   => s_axi_awlock,
+      s_axi_awcache  => s_axi_awcache,
+      s_axi_awprot   => s_axi_awprot,
+      s_axi_awqos    => s_axi_awqos,
+      s_axi_awregion => s_axi_awregion,
+      s_axi_awuser   => s_axi_awuser,
+      s_axi_awvalid  => s_axi_awvalid,
+      s_axi_awready  => s_axi_awready,
+      s_axi_wdata    => s_axi_wdata,
+      s_axi_wstrb    => s_axi_wstrb,
+      s_axi_wlast    => s_axi_wlast,
+      s_axi_wuser    => s_axi_wuser,
+      s_axi_wvalid   => s_axi_wvalid,
+      s_axi_wready   => s_axi_wready,
+      s_axi_bid      => s_axi_bid,
+      s_axi_bresp    => s_axi_bresp,
+      s_axi_buser    => s_axi_buser,
+      s_axi_bvalid   => s_axi_bvalid,
+      s_axi_bready   => s_axi_bready,
+
+      s_axi_arid     => s_axi_arid,
+      s_axi_araddr   => s_axi_araddr,
+      s_axi_arlen    => s_axi_arlen,
+      s_axi_arsize   => s_axi_arsize,
+      s_axi_arburst  => s_axi_arburst,
+      s_axi_arlock   => s_axi_arlock,
+      s_axi_arcache  => s_axi_arcache,
+      s_axi_arprot   => s_axi_arprot,
+      s_axi_arqos    => s_axi_arqos,
+      s_axi_arregion => s_axi_arregion,
+      s_axi_aruser   => s_axi_aruser,
+      s_axi_arvalid  => s_axi_arvalid,
+      s_axi_arready  => s_axi_arready,
+      s_axi_rid      => s_axi_rid,
+      s_axi_rdata    => s_axi_rdata,
+      s_axi_rresp    => s_axi_rresp,
+      s_axi_rlast    => s_axi_rlast,
+      s_axi_ruser    => s_axi_ruser,
+      s_axi_rvalid   => s_axi_rvalid,
+      s_axi_rready   => s_axi_rready,
+
+      m_axi_aclk    => ClkxC,
+      m_axi_aresetn => RstxRB,
+      m_axi_awid    => m_axi_awid,
+      m_axi_awaddr  => m_axi_awaddr,
+      m_axi_awlen   => m_axi_awlen,
+      m_axi_awsize  => m_axi_awsize,
+      m_axi_awburst => m_axi_awburst,
+      m_axi_awlock  => m_axi_awlock,
+      m_axi_awcache => m_axi_awcache,
+      m_axi_awprot  => m_axi_awprot,
+      m_axi_awqos   => m_axi_awqos,
+      m_axi_awuser  => m_axi_awuser,
+      m_axi_awvalid => m_axi_awvalid,
+      m_axi_awready => m_axi_awready,
+      m_axi_wdata   => m_axi_wdata,
+      m_axi_wstrb   => m_axi_wstrb,
+      m_axi_wlast   => m_axi_wlast,
+      m_axi_wuser   => m_axi_wuser,
+      m_axi_wvalid  => m_axi_wvalid,
+      m_axi_wready  => m_axi_wready,
+      m_axi_bid     => m_axi_bid,
+      m_axi_bresp   => m_axi_bresp,
+      m_axi_buser   => m_axi_buser,
+      m_axi_bvalid  => m_axi_bvalid,
+      m_axi_bready  => m_axi_bready,
+
+      m_axi_arid    => m_axi_arid,
+      m_axi_araddr  => m_axi_araddr,
+      m_axi_arlen   => m_axi_arlen,
+      m_axi_arsize  => m_axi_arsize,
+      m_axi_arburst => m_axi_arburst,
+      m_axi_arlock  => m_axi_arlock,
+      m_axi_arcache => m_axi_arcache,
+      m_axi_arprot  => m_axi_arprot,
+      m_axi_arqos   => m_axi_arqos,
+      m_axi_aruser  => m_axi_aruser,
+      m_axi_arvalid => m_axi_arvalid,
+      m_axi_arready => m_axi_arready,
+      m_axi_rid     => m_axi_rid,
+      m_axi_rdata   => m_axi_rdata,
+      m_axi_rresp   => m_axi_rresp,
+      m_axi_rlast   => m_axi_rlast,
+      m_axi_ruser   => m_axi_ruser,
+      m_axi_rvalid  => m_axi_rvalid,
+      m_axi_rready  => m_axi_rready
+      );
+
+  rw_testcase : process
+    variable line_number        : integer := 0;
+    variable space              : character;
+    variable v_burst_type       : std_logic_vector(1 downto 0);
+    variable v_addr             : std_logic_vector(C_M_AXI_ADDR_WIDTH-1 downto 0);
+    variable v_arsize           : std_logic_vector(2 downto 0);
+    variable v_arlen            : std_logic_vector(7 downto 0);
+    variable v_wlen             : std_logic_vector(7 downto 0);
+    variable data               : std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
+    variable v_passed_testcases : integer := 0;
+    variable error_occured      : boolean := false;
+
+    variable iteration : integer;
+    variable address   : integer;
+
+    variable v_count_expected_data : integer;
+    variable v_expected_data       : mem_t;
+    variable v_count_read_data     : integer;
+    variable v_read_data           : mem_t;
+
+    variable value          : std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
+    variable value_expected : std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
+  begin
+
+    s_axi_arsize  <= (others => '0');
+    s_axi_arlen   <= (others => '0');
+    s_axi_araddr  <= (others => '0');
+    s_axi_arburst <= (others => '0');
+    s_axi_arvalid <= '0';
+    s_axi_awaddr  <= (others => '0');
+    s_axi_awsize  <= (others => '0');
+    s_axi_awlen   <= (others => '0');
+    s_axi_awid    <= (others => '0');
+    s_axi_awvalid <= '0';
+
+    -- Wait until reset done
+    wait until rising_edge(RstxRB);
+
+    iteration := 0;
+
+    v_burst_type := BURST_TYPE_WRAPPING;
+    v_addr       := x"40000080";
+    v_arsize     := std_logic_vector(to_unsigned(log2_ceil(C_S_AXI_DATA_WIDTH/8), 3));
+    v_arlen      := x"07";
+
+    while iteration <= SIMULATION_ITERATIONS loop
+      iteration := iteration + 1;
+      wait until falling_edge(ClkxC);
+
+      -- Apply read information stimuli
+      s_axi_arburst <= v_burst_type;
+      s_axi_araddr  <= v_addr;
+      s_axi_arsize  <= v_arsize;
+      s_axi_arlen   <= v_arlen;
+      s_axi_arid    <= x"000";
+
+      s_axi_arlock   <= '0';
+      s_axi_arcache  <= (others => '0');
+      s_axi_arprot   <= (others => '0');
+      s_axi_arqos    <= (others => '0');
+      s_axi_arregion <= (others => '0');
+
+      -- Start transfer
+      s_axi_arvalid <= '1';
+      loop
+        wait until rising_edge(ClkxC);
+        exit when s_axi_arready = '1';
+      end loop;
+      s_axi_arvalid <= '0';
+
+      v_count_expected_data := 0;
+      -- Wait for valid data
+      loop
+        loop
+          wait until falling_edge(ClkxC);
+          exit when s_axi_rvalid = '1';
+        end loop;
+
+        -- Save data to buffer
+        v_expected_data(v_count_expected_data) := s_axi_rdata;
+        v_count_expected_data                  := v_count_expected_data + 1;
+
+        if unsigned(s_axi_rresp) /= 0 then
+          report "ERROR: Read Response";
+          error_occured := true;
+        end if;
+
+        exit when s_axi_rlast = '1';
+      end loop;
+
+      -- Transmission finished
+      wait until s_axi_rlast = '0';
+      wait for 2*CLK_PERIOD;
+
+      -- Start Write
+      v_expected_data(0) := not(v_expected_data(0));
+      v_wlen             := x"0f";
+      s_axi_awburst      <= BURST_TYPE_INCREMENTAL;
+      s_axi_awaddr       <= v_addr;
+      s_axi_awsize       <= v_arsize;
+      s_axi_awlen        <= v_wlen;
+      s_axi_awid         <= x"000";
+
+      -- Start transfer
+      s_axi_awvalid <= '1';
+
+      loop
+        wait until rising_edge(ClkxC);
+        exit when s_axi_awready = '1';
+      end loop;
+
+      wait until falling_edge(ClkxC);
+      s_axi_awvalid <= '0';
+
+      s_axi_wdata  <= v_expected_data(0);
+      s_axi_wstrb  <= (others => '1'); -- all bytes are active
+      s_axi_wvalid <= '1';
+      loop
+        if unsigned(v_wlen) = 0 then
+          s_axi_wlast <= '1';
+        end if;
+        wait until rising_edge(ClkxC) and s_axi_wready = '1';
+        s_axi_wstrb <= (others => '0'); -- all bytes unset
+        exit when unsigned(v_wlen) = 0;
+        v_wlen      := std_logic_vector(unsigned(v_wlen) - 1);
+      end loop;
+
+      s_axi_wvalid <= '0';
+      s_axi_wlast  <= '0';
+
+      if s_axi_bvalid = '0' then
+        loop
+          wait until rising_edge(ClkxC);
+          exit when s_axi_bvalid = '1';
+        end loop;
+      end if;
+
+      if unsigned(s_axi_bresp) /= 0 then
+        report "ERROR: Write Response";
+        error_occured := true;
+      end if;
+
+      -- Start transfer
+      s_axi_arvalid <= '1';
+      loop
+        wait until rising_edge(ClkxC);
+        exit when s_axi_arready = '1';
+      end loop;
+      s_axi_arvalid <= '0';
+
+      -- Wait for valid data
+      v_count_read_data := 0;
+      loop
+        loop
+          wait until falling_edge(ClkxC);
+          exit when s_axi_rvalid = '1';
+        end loop;
+
+        -- Save data to buffer
+        v_read_data(v_count_read_data) := s_axi_rdata;
+        v_count_read_data              := v_count_read_data + 1;
+
+        if unsigned(s_axi_rresp) /= 0 then
+          report "ERROR: Read Response";
+          error_occured := true;
+        end if;
+
+        exit when s_axi_rlast = '1';
+      end loop;
+
+      -- Check data
+
+      for i in 0 to v_count_read_data-1 loop
+        if v_expected_data(i) /= v_read_data(i) then
+          report "Expected " & to_hstring(v_expected_data(i));
+          report "Got      " & to_hstring(v_read_data(i));
+          error_occured := true;
+        end if;
+
+        if v_count_expected_data /= v_count_read_data then
+          report "Expected length " & integer'image(v_count_expected_data);
+          report "Got length      " & integer'image(v_count_read_data);
+          report "ERROR: Data length mismatch";
+          error_occured := true;
+        end if;
+
+        if error_occured then
+          write_tb_fail(ENTITY_NAME);
+          report "ERROR" severity failure;
+        end if;
+
+        v_passed_testcases := v_passed_testcases + 1;
+      end loop;
+
+      v_addr := std_logic_vector(unsigned(v_addr)+4);
+      if v_addr = x"40002000" then
+        v_addr := x"40000000";
+      end if;
+    end loop;
+
+    write_tb_success(ENTITY_NAME);
+    report integer'image(v_passed_testcases) & " testcases passed";
+    report "Simulation complete" severity failure;
+  end process;
+
+end Behavioral;
diff --git a/fpga/src/memsec/tb/tb_utils_pkg.vhd b/fpga/src/memsec/tb/tb_utils_pkg.vhd
new file mode 100644
index 0000000..257c8ad
--- /dev/null
+++ b/fpga/src/memsec/tb/tb_utils_pkg.vhd
@@ -0,0 +1,102 @@
+--
+-- MEMSEC - Framework for building transparent memory encryption and authentication solutions.
+-- Copyright (C) 2017 Graz University of Technology, IAIK <mario.werner@iaik.tugraz.at>
+--
+-- This file is part of MEMSEC.
+--
+-- MEMSEC is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU General Public License as published by
+-- the Free Software Foundation, either version 3 of the License, or
+-- (at your option) any later version.
+--
+-- MEMSEC is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU General Public License for more details.
+--
+-- You should have received a copy of the GNU General Public License
+-- along with MEMSEC.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+library ieee;
+use ieee.std_logic_1164.all;
+use ieee.numeric_std.all;
+
+library std;
+use std.textio.all;
+
+
+package tb_utils_pkg is
+  type AxiMemoryType is array (0 to 511) of std_logic_vector(32-1 downto 0);
+  -- Converts std_logic_vector to hex string
+  function to_hstring (value          :    std_logic_vector) return string;
+  -- Writes  success message that testbench succeeds
+  procedure write_tb_success(filename : in string);
+  -- Writes  error message that testbench failed
+  procedure write_tb_fail(filename    : in string);
+end package;
+
+package body tb_utils_pkg is
+
+  function to_hstring (value : std_logic_vector) return string is
+    constant ne     : integer := (value'length+3)/4;
+    variable pad    : std_logic_vector(0 to (ne*4 - value'length) - 1);
+    variable ivalue : std_logic_vector(0 to ne*4 - 1);
+    variable result : string(1 to ne);
+    variable quad   : std_logic_vector(0 to 3);
+  begin
+    if value'length < 1 then
+      return "Error";
+    else
+      if value (value'left) = 'Z' then
+        pad := (others => 'Z');
+      else
+        pad := (others => '0');
+      end if;
+      ivalue := pad & value;
+      for i in 0 to ne-1 loop
+        quad := To_X01Z(ivalue(4*i to 4*i+3));
+        case quad is
+          when x"0"   => result(i+1) := '0';
+          when x"1"   => result(i+1) := '1';
+          when x"2"   => result(i+1) := '2';
+          when x"3"   => result(i+1) := '3';
+          when x"4"   => result(i+1) := '4';
+          when x"5"   => result(i+1) := '5';
+          when x"6"   => result(i+1) := '6';
+          when x"7"   => result(i+1) := '7';
+          when x"8"   => result(i+1) := '8';
+          when x"9"   => result(i+1) := '9';
+          when x"A"   => result(i+1) := 'A';
+          when x"B"   => result(i+1) := 'B';
+          when x"C"   => result(i+1) := 'C';
+          when x"D"   => result(i+1) := 'D';
+          when x"E"   => result(i+1) := 'E';
+          when x"F"   => result(i+1) := 'F';
+          when "ZZZZ" => result(i+1) := 'Z';
+          when others => result(i+1) := 'X';
+        end case;
+      end loop;
+      return result;
+    end if;
+  end function to_hstring;
+
+
+  procedure write_tb_success(filename : in string) is
+    file outfile     : text is out filename & "_log.txt";
+    variable outline : line;
+  begin
+    write(outline, 1);
+    writeline(outfile, outline);
+  end procedure;
+
+
+  procedure write_tb_fail(filename : in string) is
+    file outfile     : text is out filename & "_log.txt";
+    variable outline : line;
+  begin
+    write(outline, 0);
+    writeline(outfile, outline);
+  end procedure;
+
+end package body;
diff --git a/fpga/src/memsec/tb/testdata/prince/cbc/initial_memory.txt b/fpga/src/memsec/tb/testdata/prince/cbc/initial_memory.txt
new file mode 100644
index 0000000..d655682
--- /dev/null
+++ b/fpga/src/memsec/tb/testdata/prince/cbc/initial_memory.txt
@@ -0,0 +1,512 @@
+b3b1cd3e
+a0b3abef
+68244579
+83b84373
+d7f1c71c
+42c3aa22
+80ca5316
+6ef89469
+d43193a4
+e725e216
+9dfe127c
+dac56c41
+3917030a
+fe028322
+02d4e3b7
+c6f22268
+1cf82288
+64174d5f
+a99a0432
+8773201c
+354b824b
+4247b214
+3d2922a9
+08bf4726
+60c09cc9
+8fdbc5a2
+3b9ed782
+f1ef33c2
+34f38268
+f53d4da5
+97fc7a06
+b984cd35
+a6a9355e
+9b942167
+f8e0ec6f
+d3a1315f
+b40cdbc5
+a58fb367
+90594ee1
+5df18ec5
+778c4d67
+d876525a
+9517779c
+4c3f2762
+99c0b61d
+1426cd3e
+e36ad01d
+658468c7
+783ef623
+e4ce5be5
+4a50192a
+97df8273
+3570d7e5
+0ffbd15d
+00c4039d
+e4a121a6
+dd116770
+79e3c1dd
+647da50f
+e273930e
+51397bd2
+a62fe109
+9715354d
+dca2bc62
+1a21d852
+aad7f4fd
+6edda6ae
+1be09389
+2a2b568a
+a7e8e351
+2b49764f
+42bce3b5
+07e3f80c
+8ac0c162
+bd09723e
+3c877369
+c066bbf4
+cac5d1a4
+118e44e4
+409a542f
+586e6432
+373a295f
+4aff2736
+dfdc7f5f
+eef9ee51
+7ce1a598
+813b3e35
+c1fdf648
+b795ec98
+0d99f5e7
+98f0ef26
+76ed752c
+a38c196e
+412a73e4
+13962e51
+771a399f
+2fb9f30f
+f09742c7
+2dc9b91d
+958b46c6
+11a9d9db
+030ccd2c
+bc4826d2
+3dfad353
+b6ac2fce
+6e3ae54b
+3bca84ee
+8aab5241
+0a1e2f87
+c1313cdc
+04a3125d
+25af9116
+ebcb900b
+63bbad72
+d3440ca3
+ccefb8f1
+a2ab694f
+757949f0
+25b75cad
+3a7d8ac4
+6a716693
+655d2f86
+ca51b4f7
+bba2420a
+a3f0ce8d
+be9c9723
+ac57eb51
+21749c5f
+80c15f29
+5a9fb538
+4a76131d
+a0de1702
+4a031c09
+c633b8e9
+abc9a6ee
+1f7200af
+7b2dca1e
+62691a6c
+9b5befd8
+685b1d10
+70801e85
+bc9bd613
+ed430a1c
+cdb8e014
+9534b715
+309e0772
+47974f6c
+c89e5123
+fef50743
+c1dacd33
+18cf673b
+c4e56afd
+29720387
+f30efe04
+ee8298a1
+038e2065
+74f04d58
+6139a25e
+8a717f2c
+4d3a3915
+57cfbacb
+46dd8882
+a78276dd
+4b499155
+28cc2157
+10327ba0
+cd9b9943
+dee4dd29
+a1c57c0c
+3023403c
+51077dd3
+8d1a14cf
+ba51669c
+12b1f541
+faa79a1f
+181ae1aa
+f57e2b3c
+6da8bbb1
+cd43fd0d
+7936b717
+5edbc098
+1219bc46
+4e4121ae
+2d7b1f49
+28bc2ac7
+d83da9c3
+72ff6f50
+e00e46ce
+4039a0d2
+90691e19
+c0cedf61
+bdcc2447
+026f70ee
+cff6aca5
+ee5a5035
+7fecb9e9
+28a37416
+fd3015de
+61312a27
+6315892b
+5db89481
+b424b821
+32f2f271
+dc8ec66a
+0295bc5d
+83466cfe
+6347b492
+0d2ef8cd
+b09e19bc
+4b1661b0
+da678a15
+f3a2eddf
+98255be4
+af4e3d7e
+e5793da7
+74f00b0b
+c07171d3
+80d2081e
+f4025f4d
+7182d75d
+9fe1054a
+5308f66f
+36524c95
+e20a2b04
+e838545e
+f52a2376
+92dcff03
+89bb1db3
+a297d797
+6d92134d
+70c8feeb
+eabdb82a
+f4f06709
+6f27af63
+b219ba56
+15337f11
+05e929d1
+ceb27049
+078512dd
+cc16426c
+af0fa35c
+d82d52da
+be8ebef1
+c98a55e0
+f006f4c1
+31f85915
+dc9a5a88
+ab813c35
+10d2ecc0
+9ede532f
+a4c11ae2
+5c1f5d20
+e1cdd8fe
+5c86f370
+a7b23585
+8bf336c0
+87ff5581
+38d844fd
+c4f889fb
+6248c035
+48832971
+ac941998
+8c304b3f
+b913e526
+8ad3763b
+cd188d2f
+17d6e510
+999743cf
+b69cd988
+f9d42c04
+a7fe166a
+a6a77b92
+52efe8a3
+55c6b7bc
+73c69a5b
+3b5c98f3
+751ab730
+da64d704
+93fa4ebd
+6d129b9d
+ee3b5a5b
+0712e24e
+dedb4bb6
+28fb83ed
+46031cd2
+1ab5e48a
+1ebdf450
+11f540be
+440acca8
+af5dfece
+4c65c7b3
+d170fc2b
+5aaa9056
+6e7aa704
+470a962c
+0647d164
+b7dea491
+555de784
+03648fd1
+4eb46c8b
+4236053c
+c0e54674
+f5e4e9bb
+67ed46f4
+44a52ef6
+c54aa1ee
+849572bd
+bbf2c8c5
+9a15b8f3
+5840d821
+06b7a7a8
+49754424
+f8f5a808
+7e21dbca
+b2bc9e25
+2cf27bf8
+57e3196b
+b031764b
+d7c3adf2
+98c6eb97
+5d7bab7a
+4a27d100
+b084dbd1
+e3588171
+692a1035
+c92cd6bc
+e9c60d3c
+0ff85d38
+88145091
+7bb3bcd0
+3a4ed772
+fb3517c4
+f6f56add
+651eb810
+a205c4de
+aa8da317
+61fd091f
+169f0ae6
+dfa43568
+6657bfa4
+24f05b48
+b8fce8da
+68996e59
+28ff01be
+369669db
+f78808b0
+344fcc8a
+36f95c2a
+da7f248d
+288aae44
+da42ff0b
+9f5032ba
+489937d8
+9b1e8409
+64c2ada8
+37380267
+152b0007
+042f8af1
+2c369721
+52e57dec
+6dc7c403
+1eed1d50
+1881c9a2
+307400c9
+b4c04bee
+93d1972a
+4081e954
+1eb200d0
+43eb48bc
+0f77e582
+006efbdf
+7f8e19dc
+43fe3e9b
+b8399ac7
+03f0e91e
+c347768b
+6ec45333
+abb4d463
+4ce08aab
+4322c854
+b78f57f9
+e21d49a0
+9265bccb
+55e1e824
+55b15ba7
+bca46e17
+3c1adfa5
+e869efd3
+6279db1d
+258a4e79
+237879c5
+716f03fe
+e0cf9458
+fd312d0f
+57645d07
+a4ecefae
+6e10ab25
+241d16d3
+eea0b86f
+0ea10bbc
+19f4122d
+b2e0054e
+80a1edac
+84170648
+068f68c0
+85612363
+a2d0563a
+35ee77da
+916e051b
+0269753d
+c32a20c0
+5744115c
+994e8d26
+d1d3d902
+6925aaad
+c56841cb
+c8babe30
+d26b82bd
+ebb9a905
+36f7c7ed
+faf22022
+0e865dfe
+fa2e2ca2
+6b6ca810
+f811483d
+e3bf92f1
+c1dec8c0
+574083ca
+ee071d92
+397d2767
+e73bcc30
+3fa1ac05
+3b79ca9f
+3853784f
+4c99e6c2
+281e2a62
+2a8e854d
+ed927150
+fa5eed6b
+af8b9f0f
+fb026e1b
+17094bd6
+c6d826f4
+2cc84982
+24cc8b35
+5f7433d9
+42fba282
+90ec64f5
+44ef39fe
+53997d35
+54d9795a
+7248b399
+d945210f
+7e773d7e
+0c872f67
+ee077760
+aac010e6
+e45fc7ab
+7815d35d
+fe0c4071
+4fdef225
+7059e96c
+168fd14a
+7539f4ce
+387e47a0
+5d28769a
+12f64ae1
+4f2cc1e0
+32c2c867
+cca001ca
+3b78322a
+107fe6a9
+22dd2d04
+c3ebf580
+226cff7d
+962230fc
+8e0d4000
+5f0c68cb
+d2ffba2f
+cf51a5bd
+662c2c3d
+2876bcc4
+ac85fca0
+2ed789c2
+317328c6
+87415941
+e7129924
+c3ca3aec
+1aefbfef
+0f435b87
+e748f2b4
+6a71ffb1
+c0aada94
+6a796f35
+f021caf1
+06c7287c
+df53de12
+0e343c60
+a7dc822c
+a4c72315
+5c628933
+12f9c645
+37329353
+7dbc532e
+3b6f9412
+da9904a6
+9fb59626
+5c6e9024
+8b994365
+665a617a
+0c6385d0
+76607187
diff --git a/fpga/src/memsec/tb/testdata/prince/cbc/test_cases.txt b/fpga/src/memsec/tb/testdata/prince/cbc/test_cases.txt
new file mode 100644
index 0000000..6b89be0
--- /dev/null
+++ b/fpga/src/memsec/tb/testdata/prince/cbc/test_cases.txt
@@ -0,0 +1,2245 @@
+0 01 40000000 000 00000000 abccf000
+0 01 40000000 000 00000001 abccf000 abccf000
+0 01 40000000 000 00000010 abccf000 abccf000 abccf000
+0 01 40000000 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 01 40000000 000 00000100 abccf000 abccf000 abccf000 abccf000 daeef001
+0 01 40000000 000 00000101 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001
+0 01 40000001 000 00000000 abccf000
+0 01 40000001 000 00000001 abccf000 abccf000
+0 01 40000001 000 00000010 abccf000 abccf000 abccf000
+0 01 40000001 000 00000011 abccf000 abccf000 abccf000 daeef001
+0 01 40000002 000 00000000 abccf000
+0 01 40000002 000 00000001 abccf000 abccf000
+0 01 40000002 000 00000010 abccf000 abccf000 daeef001
+0 01 40000003 000 00000000 abccf000
+0 01 40000003 000 00000001 abccf000 daeef001
+0 01 40000003 000 00000010 abccf000 daeef001 daeef001
+0 01 40000003 000 00000011 abccf000 daeef001 daeef001 daeef001
+0 01 40000004 000 00000000 daeef001
+0 01 40000004 000 00000001 daeef001 daeef001
+0 01 40000004 000 00000010 daeef001 daeef001 daeef001
+0 01 40000004 000 00000011 daeef001 daeef001 daeef001 daeef001
+0 01 40000004 000 00000100 daeef001 daeef001 daeef001 daeef001 abccf002
+0 01 40000004 000 00000101 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002
+0 01 40000000 001 00000000 abccf000
+0 01 40000000 001 00000001 abccf000 abccf000
+0 01 40000000 001 00000010 abccf000 abccf000 daeef001
+0 01 40000000 001 00000011 abccf000 abccf000 daeef001 daeef001
+0 01 40000000 001 00000100 abccf000 abccf000 daeef001 daeef001 abccf002
+0 01 40000000 001 00000000 abccf000
+0 01 40000000 001 00000001 abccf000 abccf000
+0 01 40000000 001 00000010 abccf000 abccf000 daeef001
+0 01 40000000 001 00000011 abccf000 abccf000 daeef001 daeef001
+0 01 40000000 001 00000100 abccf000 abccf000 daeef001 daeef001 abccf002
+0 01 40000002 001 00000000 abccf000
+0 01 40000002 001 00000001 abccf000 daeef001
+0 01 40000002 001 00000010 abccf000 daeef001 daeef001
+0 01 40000002 001 00000011 abccf000 daeef001 daeef001 abccf002
+0 01 40000002 001 00000100 abccf000 daeef001 daeef001 abccf002 abccf002
+0 01 40000002 001 00000000 abccf000
+0 01 40000002 001 00000001 abccf000 daeef001
+0 01 40000002 001 00000010 abccf000 daeef001 daeef001
+0 01 40000002 001 00000011 abccf000 daeef001 daeef001 abccf002
+0 01 40000002 001 00000100 abccf000 daeef001 daeef001 abccf002 abccf002
+0 01 40000000 010 00000000 abccf000
+0 01 40000000 010 00000001 abccf000 daeef001
+0 01 40000000 010 00000010 abccf000 daeef001 abccf002
+0 01 40000004 010 00000000 daeef001
+0 01 40000004 010 00000001 daeef001 abccf002
+0 01 40000004 010 00000010 daeef001 abccf002 daeef003
+0 01 40000004 010 00001111 daeef001 abccf002 daeef003 abccf004 daeef005 abccf006 daeef007 abccf008 daeef009 abccf00a daeef00b abccf00c daeef00d abccf00e daeef00f abccf010
+0 10 40000000 000 00000001 abccf000 abccf000
+0 10 40000000 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000000 000 00000111 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001
+0 10 40000000 000 00001111 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003
+0 10 40000001 000 00000001 abccf000 abccf000
+0 10 40000001 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000002 000 00000001 abccf000 abccf000
+0 10 40000002 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000004 000 00000001 daeef001 daeef001
+0 10 40000004 000 00000011 daeef001 daeef001 daeef001 daeef001
+0 10 40000004 000 00000111 daeef001 daeef001 daeef001 daeef001 abccf000 abccf000 abccf000 abccf000
+0 10 40000000 000 00001111 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003
+0 10 40000004 000 00001111 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003 abccf000 abccf000 abccf000 abccf000
+0 10 40000008 000 00001111 abccf002 abccf002 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001
+0 10 4000000c 000 00001111 daeef003 daeef003 daeef003 daeef003 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002 abccf002 abccf002
+0 10 40000010 000 00001111 abccf004 abccf004 abccf004 abccf004 daeef005 daeef005 daeef005 daeef005 abccf006 abccf006 abccf006 abccf006 daeef007 daeef007 daeef007 daeef007
+0 10 40000014 000 00001111 daeef005 daeef005 daeef005 daeef005 abccf006 abccf006 abccf006 abccf006 daeef007 daeef007 daeef007 daeef007 abccf004 abccf004 abccf004 abccf004
+0 10 40000018 000 00001111 abccf006 abccf006 abccf006 abccf006 daeef007 daeef007 daeef007 daeef007 abccf004 abccf004 abccf004 abccf004 daeef005 daeef005 daeef005 daeef005
+0 10 4000001c 000 00001111 daeef007 daeef007 daeef007 daeef007 abccf004 abccf004 abccf004 abccf004 daeef005 daeef005 daeef005 daeef005 abccf006 abccf006 abccf006 abccf006
+0 10 40000020 000 00001111 abccf008 abccf008 abccf008 abccf008 daeef009 daeef009 daeef009 daeef009 abccf00a abccf00a abccf00a abccf00a daeef00b daeef00b daeef00b daeef00b
+0 10 40000024 000 00001111 daeef009 daeef009 daeef009 daeef009 abccf00a abccf00a abccf00a abccf00a daeef00b daeef00b daeef00b daeef00b abccf008 abccf008 abccf008 abccf008
+0 10 40000028 000 00001111 abccf00a abccf00a abccf00a abccf00a daeef00b daeef00b daeef00b daeef00b abccf008 abccf008 abccf008 abccf008 daeef009 daeef009 daeef009 daeef009
+0 10 4000002c 000 00001111 daeef00b daeef00b daeef00b daeef00b abccf008 abccf008 abccf008 abccf008 daeef009 daeef009 daeef009 daeef009 abccf00a abccf00a abccf00a abccf00a
+0 10 40000030 000 00001111 abccf00c abccf00c abccf00c abccf00c daeef00d daeef00d daeef00d daeef00d abccf00e abccf00e abccf00e abccf00e daeef00f daeef00f daeef00f daeef00f
+0 10 40000034 000 00001111 daeef00d daeef00d daeef00d daeef00d abccf00e abccf00e abccf00e abccf00e daeef00f daeef00f daeef00f daeef00f abccf00c abccf00c abccf00c abccf00c
+0 10 40000038 000 00001111 abccf00e abccf00e abccf00e abccf00e daeef00f daeef00f daeef00f daeef00f abccf00c abccf00c abccf00c abccf00c daeef00d daeef00d daeef00d daeef00d
+0 10 4000003c 000 00001111 daeef00f daeef00f daeef00f daeef00f abccf00c abccf00c abccf00c abccf00c daeef00d daeef00d daeef00d daeef00d abccf00e abccf00e abccf00e abccf00e
+0 10 4000003d 000 00001111 daeef00f daeef00f daeef00f abccf00c abccf00c abccf00c abccf00c daeef00d daeef00d daeef00d daeef00d abccf00e abccf00e abccf00e abccf00e daeef00f
+0 10 4000005d 000 00001111 daeef017 daeef017 daeef017 abccf014 abccf014 abccf014 abccf014 daeef015 daeef015 daeef015 daeef015 abccf016 abccf016 abccf016 abccf016 daeef017
+0 10 4000007d 000 00001111 daeef01f daeef01f daeef01f abccf01c abccf01c abccf01c abccf01c daeef01d daeef01d daeef01d daeef01d abccf01e abccf01e abccf01e abccf01e daeef01f
+0 10 40000000 010 00000001 abccf000 daeef001
+0 10 40000000 010 00000011 abccf000 daeef001 abccf002 daeef003
+0 10 40000004 010 00000001 daeef001 abccf000
+0 10 40000004 010 00000011 daeef001 abccf002 daeef003 abccf000
+0 10 40000000 001 00000001 abccf000 abccf000
+0 10 40000000 001 00000011 abccf000 abccf000 daeef001 daeef001
+0 10 40000002 001 00000001 abccf000 abccf000
+0 10 40000002 001 00000011 abccf000 daeef001 daeef001 abccf000
+0 10 40000002 001 00000001 abccf000 abccf000
+0 10 40000002 001 00000011 abccf000 daeef001 daeef001 abccf000
+0 10 40000000 000 00000001 abccf000 abccf000
+0 10 40000000 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000001 000 00000001 abccf000 abccf000
+0 10 40000001 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000002 000 00000001 abccf000 abccf000
+0 10 40000002 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000002 000 00000111 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001 abccf000 abccf000
+0 10 40000003 000 00000001 abccf000 abccf000
+0 10 40000003 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000008 010 00000001 abccf002 daeef003
+0 10 40000010 010 00000011 abccf004 daeef005 abccf006 daeef007
+0 10 4000000c 010 00000001 daeef003 abccf002
+0 10 40000014 010 00000011 daeef005 abccf006 daeef007 abccf004
+0 10 40000008 001 00000001 abccf002 abccf002
+0 10 40000008 001 00000011 abccf002 abccf002 daeef003 daeef003
+0 10 4000000a 001 00000001 abccf002 abccf002
+0 10 4000000a 001 00000011 abccf002 daeef003 daeef003 abccf002
+0 10 4000000a 001 00000001 abccf002 abccf002
+0 10 4000000a 001 00000011 abccf002 daeef003 daeef003 abccf002
+0 10 40000009 000 00000001 abccf002 abccf002
+0 10 40000009 000 00000011 abccf002 abccf002 abccf002 abccf002
+0 10 4000000a 000 00000001 abccf002 abccf002
+0 10 4000000a 000 00000011 abccf002 abccf002 abccf002 abccf002
+0 10 4000000a 000 00000111 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003 abccf002 abccf002
+0 01 40000001 000 00000011 abccf000 abccf000 abccf000 daeef001
+0 01 40000001 000 00000011 abccf000 abccf000 abccf000 daeef001
+1 01 40000000 000 00000011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 00000000 0010 17dfcdf1 4b6435f5 39dffd4c 8f2190f8
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 00000000 0010 38715b9e e0036edd 1dd89349 f359d38e
+1 01 40000000 000 00001011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 00000000 0010 38715b9e e0036edd 444c7bb7 a50b2cb4
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 38715b9e e0036edd 6e616086 e7d7d40b
+1 01 40000004 000 00000011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 00000000 0010 443e227d d09113eb e8d64acd acc67931
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 00000000 0010 443e227d d09113eb b6e81cb0 827b116d
+1 01 40000004 000 00001011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 00000000 0010 443e227d d09113eb 16289bd2 e78c3739
+1 01 40000004 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 aaccaacc 0001 aaccaacc 0010 aaccaacc 0100 aaccaacc 1000 00000000 0020 443e227d d09113eb 16289bd2 e78c3739 89c998d2 a7a6b298 48d562e4 88e95ad6
+1 01 40000008 000 00000011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 00000000 0010 443e227d d09113eb 44eed731 3ec7e8f5
+1 01 40000008 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 00000000 0010 443e227d d09113eb f6c8c8f1 0b801eac
+1 01 40000008 000 00001011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 00000000 0020 443e227d d09113eb f6c8c8f1 0b801eac 562d93ad 278fcc82 dcb4076d 5b38c004
+1 01 40000008 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 aaccaacc 0001 aaccaacc 0010 aaccaacc 0100 aaccaacc 1000 00000000 0020 443e227d d09113eb f6c8c8f1 0b801eac a95a689a eb66806f 170bbfba 3f3f1840
+1 01 4000000c 000 00000011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 00000000 0010 443e227d d09113eb 4688b29f 51d84edc
+1 01 40000008 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 78563412 0001 78563412 0010 78563412 0100 78563412 1000 00000000 0010 443e227d d09113eb 2f6a287a 0d21a797
+1 01 40000008 000 00001011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 78563412 0001 78563412 0010 78563412 0100 78563412 1000 bc7af3ef 0001 bc7af3ef 0010 bc7af3ef 0100 bc7af3ef 1000 00000000 0020 443e227d d09113eb 2f6a287a 0d21a797 17ccb566 52c4f42e c7b7f8a4 9c0a1948
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0000 cccccccc 0000 cccccccc 0000 00000000 0010 443e227d d09113eb 2f6a287a 0d21a797
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0000 cccccccc 0000 cccccccc 1000 00000000 0010 8921b79f e761f72e 061b985f bccd6734
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0000 cccccccc 0100 cccccccc 0000 00000000 0010 06c6c91a 6ea3a6ae f0e2234e 39dd3aa2
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0010 cccccccc 0000 cccccccc 0000 00000000 0010 267de49e 79121c2b e6f16223 0577a368
+1 01 40000000 000 00000011 cccccccc 0001 cccccccc 0000 cccccccc 0000 cccccccc 0000 00000000 0010 1ee65ae0 d5054251 00293724 cec7ea52
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0000 cccccccc 0100 cccccccc 1000 00000000 0010 1ee65ae0 d5054251 00293724 cec7ea52
+1 01 40000000 000 00000011 cccccccc 0001 cccccccc 0010 cccccccc 0000 cccccccc 0000 00000000 0010 1ee65ae0 d5054251 00293724 cec7ea52
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0010 cccccccc 0000 cccccccc 1000 00000000 0010 1ee65ae0 d5054251 00293724 cec7ea52
+1 01 40000000 000 00000011 cccccccc 0001 cccccccc 0000 cccccccc 0100 cccccccc 0000 00000000 0010 1ee65ae0 d5054251 00293724 cec7ea52
+1 01 40000000 000 00000011 cccccccc 0001 cccccccc 0000 cccccccc 0000 cccccccc 1000 00000000 0010 1ee65ae0 d5054251 00293724 cec7ea52
+1 01 40000001 000 00000011 cccccc00 0010 cccccc00 0100 cccccc00 1000 000000ff 0000 00000000 0010 1ee65ae0 d5054251 00293724 cec7ea52
+1 01 40000002 000 00000011 cccc0000 0100 cccc0000 1000 0000ffcc 0000 0000ffcc 0000 00000000 0010 1ee65ae0 d5054251 00293724 cec7ea52
+1 01 40000003 000 00000011 cc000000 1000 00ffcccc 0000 00ffcccc 0000 00ffcccc 0000 00000000 0010 1ee65ae0 d5054251 00293724 cec7ea52
+1 01 40000009 000 00000011 cccccc00 0010 cccccc00 0100 cccccc00 1000 000000ff 0000 00000000 0010 1ee65ae0 d5054251 3115660f a305e94a
+1 01 4000000a 000 00000011 cccc0000 0100 cccc0000 1000 0000ffcc 0000 0000ffcc 0000 00000000 0010 1ee65ae0 d5054251 3115660f a305e94a
+1 01 4000000b 000 00000011 cc000000 1000 00ffcccc 0000 00ffcccc 0000 00ffcccc 0000 00000000 0010 1ee65ae0 d5054251 3115660f a305e94a
+1 01 40000000 000 00000011 33000000 0000 33000000 0000 33000000 0000 33000000 1000 00000000 0010 46e08734 f843a17b eb54640e f2d98a27
+1 01 40000000 000 00000011 00330000 0000 00330000 0000 00330000 0000 00330000 0000 00000000 0010 46e08734 f843a17b eb54640e f2d98a27
+1 01 40000000 000 00000011 00003300 0000 00003300 0000 00003300 0000 00003300 0000 00000000 0010 46e08734 f843a17b eb54640e f2d98a27
+1 01 40000000 000 00000011 00000033 0000 00000033 0000 00000033 0000 00000033 0000 00000000 0010 46e08734 f843a17b eb54640e f2d98a27
+1 01 40000000 000 00000011 33333333 0000 33333333 0000 33333333 0000 33333333 0000 00000000 0010 46e08734 f843a17b eb54640e f2d98a27
+1 01 40000004 000 00000011 33000000 0000 33000000 0000 33000000 0000 33000000 1000 00000000 0010 c855c512 e01391e8 440ca21f 47ff7e2d
+1 01 40000004 000 00000011 00330000 0000 00330000 0000 00330000 0000 00330000 0000 00000000 0010 c855c512 e01391e8 440ca21f 47ff7e2d
+1 01 40000004 000 00000011 00003300 0000 00003300 0000 00003300 0000 00003300 0000 00000000 0010 c855c512 e01391e8 440ca21f 47ff7e2d
+1 01 40000004 000 00000011 00000033 0000 00000033 0000 00000033 0000 00000033 0000 00000000 0010 c855c512 e01391e8 440ca21f 47ff7e2d
+1 01 40000004 000 00000011 33333333 0000 33333333 0000 33333333 0000 33333333 0000 00000000 0010 c855c512 e01391e8 440ca21f 47ff7e2d
+1 01 40000008 000 00000011 33000000 0000 33000000 0000 33000000 0000 33000000 1000 00000000 0010 c855c512 e01391e8 b9f6e8b2 549ae479
+1 01 40000008 000 00000011 00330000 0000 00330000 0000 00330000 0000 00330000 0000 00000000 0010 c855c512 e01391e8 b9f6e8b2 549ae479
+1 01 40000008 000 00000011 00003300 0000 00003300 0000 00003300 0000 00003300 0000 00000000 0010 c855c512 e01391e8 b9f6e8b2 549ae479
+1 01 40000008 000 00000011 00000033 0000 00000033 0000 00000033 0000 00000033 0000 00000000 0010 c855c512 e01391e8 b9f6e8b2 549ae479
+1 01 40000008 000 00000011 33333333 0000 33333333 0000 33333333 0000 33333333 0000 00000000 0010 c855c512 e01391e8 b9f6e8b2 549ae479
+1 01 40000009 000 00000011 33000000 0000 33000000 0000 33000000 1000 00000000 0000 00000000 0010 c855c512 e01391e8 b9f6e8b2 549ae479
+1 01 40000009 000 00000011 00220000 0000 00220000 0000 00220000 0000 00000000 0000 00000000 0010 c855c512 e01391e8 b9f6e8b2 549ae479
+1 01 40000009 000 00000011 00003300 0000 00003300 0000 00003300 0000 00000000 0000 00000000 0010 c855c512 e01391e8 b9f6e8b2 549ae479
+1 01 40000009 000 00000011 33333300 0000 33333300 0000 33333300 0000 00000033 0000 00000000 0010 c855c512 e01391e8 b9f6e8b2 549ae479
+1 01 4000000a 000 00000011 55000000 0000 55000000 1000 00000000 0000 00000000 0000 00000000 0010 c855c512 e01391e8 fcf76961 48e9f3f1
+1 01 4000000a 000 00000011 00330000 0000 00330000 0000 00000000 0000 00000000 0000 00000000 0010 c855c512 e01391e8 fcf76961 48e9f3f1
+1 01 4000000a 000 00000011 33330000 0000 33330000 0000 00003333 0000 00003333 0000 00000000 0010 c855c512 e01391e8 fcf76961 48e9f3f1
+1 01 40000000 000 00000011 cccc0000 0000 cccc0000 0000 cccc0000 0100 cccc0000 1000 00000000 0010 9c7d2632 0a0d822f 5b7556fe a1b84829
+1 01 40000000 000 00000011 cccc0000 0000 cccc0000 0000 cccc0000 0100 cccc0000 0000 00000000 0010 9c7d2632 0a0d822f 5b7556fe a1b84829
+1 01 40000000 000 00000011 cccc0000 0000 cccc0000 0000 cccc0000 0000 cccc0000 1000 00000000 0010 9c7d2632 0a0d822f 5b7556fe a1b84829
+1 01 40000000 000 00000011 cccc0000 0000 cccc0000 0000 cccc0000 0000 cccc0000 0000 00000000 0010 9c7d2632 0a0d822f 5b7556fe a1b84829
+1 01 40000000 000 00000011 77aa3355 0000 77aa3355 0000 77aa3355 0100 77aa3355 1000 00000000 0010 0dc7f9c5 50656524 7f2afc2c a9566d68
+1 01 40000002 000 00000011 00000000 0100 00000000 1000 0000cccc 0000 0000cccc 0000 00000000 0010 074b9a73 1fc4f002 a1aaccc0 d374a57d
+1 01 40000002 000 00000011 11110000 0100 11110000 0000 0000aaaa 0000 0000aaaa 0000 00000000 0010 80e204fb 52f9c0d7 f3973b18 7bbd8ab0
+1 01 40000002 000 00000011 cccc0000 0000 cccc0000 1000 0000aaaa 0000 0000aaaa 0000 00000000 0010 73fb4d4c 55285200 0d2e167f 903e0433
+1 01 40000002 000 00000011 33550000 0000 33550000 0000 000077aa 0000 000077aa 0000 00000000 0010 73fb4d4c 55285200 0d2e167f 903e0433
+1 01 40000005 000 00000011 cc000000 0000 cc000000 0000 cc000000 1000 000000cc 0000 00000000 0010 3a8a6a6f 12883df5 cf855702 9ae6713d
+1 01 40000005 000 00000011 aa111100 0000 aa111100 0000 aa111100 0000 000000aa 0000 00000000 0010 3a8a6a6f 12883df5 cf855702 9ae6713d
+1 01 40000007 000 00000011 00000000 1000 00cccc00 0000 00cccc00 0000 00cccc00 0000 00000000 0010 e995e1c1 698c35ff 2cff082b ba8e5fb6
+1 01 40000007 000 00000011 cc000000 0000 00aaaacc 0000 00aaaacc 0000 00aaaacc 0000 00000000 0010 e995e1c1 698c35ff 2cff082b ba8e5fb6
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 adece763 3fa85f0b 97faebdd 75399fe8
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 324c80dd 6f264a31 482ffc2f 1d969f36
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 7863411c d0d16996 86a68267 849cf7c7
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 d295bc26 9ae56f3e 5a38f1de 8115ff4d
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 00000000 0010 abfd6517 a45fb80f 850b0019 c17e28af
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 1000 00000000 0010 abfd6517 a45fb80f 850b0019 c17e28af
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0100 88776655 1000 00000000 0010 abfd6517 a45fb80f 850b0019 c17e28af
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 00000000 0010 abfd6517 a45fb80f 850b0019 c17e28af
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 00000000 0010 abfd6517 a45fb80f 850b0019 c17e28af
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 00000000 0010 abfd6517 a45fb80f 850b0019 c17e28af
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0100 88776655 1000 00000000 0010 abfd6517 a45fb80f 850b0019 c17e28af
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 1000 00000000 0010 abfd6517 a45fb80f 850b0019 c17e28af
+1 01 40000001 000 00000111 f0f0f000 0010 f0f0f000 0100 f0f0f000 1000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 dbf94320 f8b72fc2 9489b421 ad6b4909
+1 01 40000001 000 00000111 f0f0f000 0010 f0f0f000 0100 f0f0f000 0000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 dbf94320 f8b72fc2 9489b421 ad6b4909
+1 01 40000001 000 00000111 f0f0f000 0010 f0f0f000 0000 f0f0f000 1000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 dbf94320 f8b72fc2 9489b421 ad6b4909
+1 01 40000001 000 00000111 f0f0f000 0010 f0f0f000 0000 f0f0f000 0000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 dbf94320 f8b72fc2 9489b421 ad6b4909
+1 01 40000001 000 00000111 f0f0f000 0000 f0f0f000 0100 f0f0f000 1000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 dbf94320 f8b72fc2 9489b421 ad6b4909
+1 01 40000001 000 00000111 f0f0f000 0000 f0f0f000 0100 f0f0f000 0000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 dbf94320 f8b72fc2 9489b421 ad6b4909
+1 01 40000001 000 00000111 f0f0f000 0000 f0f0f000 0000 f0f0f000 0000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 dbf94320 f8b72fc2 9489b421 ad6b4909
+1 01 40000002 000 00000111 f0f00000 0100 f0f00000 1000 6655f0f0 0000 6655f0f0 0000 6655f0f0 0100 6655f0f0 1000 00008877 0001 00008877 0010 00000000 0010 6378c396 028b6475 530ace24 7088da76
+1 01 40000002 000 00000111 f0f00000 0100 f0f00000 0000 6655f0f0 0000 6655f0f0 0000 6655f0f0 0100 6655f0f0 1000 00008877 0001 00008877 0010 00000000 0010 6378c396 028b6475 530ace24 7088da76
+1 01 40000002 000 00000111 f0f00000 0000 f0f00000 1000 6655f0f0 0000 6655f0f0 0000 6655f0f0 0100 6655f0f0 1000 00008877 0001 00008877 0010 00000000 0010 6378c396 028b6475 530ace24 7088da76
+1 01 40000002 000 00000111 f0f00000 0000 f0f00000 0000 6655f0f0 0000 6655f0f0 0000 6655f0f0 0100 6655f0f0 1000 00008877 0001 00008877 0010 00000000 0010 6378c396 028b6475 530ace24 7088da76
+1 01 40000003 000 00000111 f0000000 1000 55f0f0f0 0000 55f0f0f0 0000 55f0f0f0 0000 55f0f0f0 1000 00887766 0001 00887766 0010 00887766 0100 00000000 0010 e48e8150 de0cb73a 6b9e6f4b d8f06226
+1 01 40000003 000 00000111 f0000000 0000 55f0f0f0 0000 55f0f0f0 0000 55f0f0f0 0000 55f0f0f0 1000 00887766 0001 00887766 0010 00887766 0100 00000000 0010 e48e8150 de0cb73a 6b9e6f4b d8f06226
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 00000000 0010 443e227d d09113eb ceb6b1bf d947dc42
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 1000 00000000 0010 443e227d d09113eb faad21c9 6acc5b2c
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0100 88776655 1000 00000000 0010 443e227d d09113eb f0ad0389 87bc51ea
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 00000000 0010 443e227d d09113eb 9ee274e8 7af8d138
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 443e227d d09113eb b8280994 320de29b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 443e227d d09113eb b8280994 320de29b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 443e227d d09113eb b8280994 320de29b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 443e227d d09113eb b8280994 320de29b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 00000000 0010 443e227d d09113eb b8280994 320de29b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 00000000 0010 443e227d d09113eb b8280994 320de29b
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0100 88776655 1000 00000000 0010 443e227d d09113eb b8280994 320de29b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 1000 00000000 0010 443e227d d09113eb b8280994 320de29b
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 443e227d d09113eb a1dfbd7f 2b6cbe05
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0000 3333cccc 0010 3333cccc 0000 3333cccc 1000 00000000 0010 443e227d d09113eb a1dfbd7f 2b6cbe05
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0010 88776655 0000 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 443e227d d09113eb a1dfbd7f 2b6cbe05
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0010 88776655 0000 88776655 1000 3333cccc 0000 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 443e227d d09113eb a1dfbd7f 2b6cbe05
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 443e227d d09113eb a1dfbd7f 2b6cbe05
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 b32b864b 98214199 7f414eec d7145fb6
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 abfd6517 a45fb80f 48350c4e 58ff0991
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0001 88776655 0010 88776655 0000 88776655 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 abfd6517 a45fb80f 48350c4e 58ff0991
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 abfd6517 a45fb80f 48350c4e 58ff0991
+1 01 40000000 001 00001101 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 00000000 0020 5029abde 53575a91 87487c57 020516df 9504f1da 321a8bf8 c3d8c85c 17f04109
+1 01 40000000 001 00001111 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 00000000 0020 5029abde 53575a91 87487c57 020516df 9504f1da 321a8bf8 4a0bc39f 221a88f9
+1 01 40000000 001 00001011 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 00000000 0020 3390463c e130a6b6 17b04255 1081fd56 58b682db 155728c0 6c15568e ef8a85f7
+1 01 40000000 001 00001101 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 00000000 0020 3390463c e130a6b6 17b04255 1081fd56 58b682db 155728c0 13d0b04d 1d8e8c8e
+1 01 40000000 001 00001111 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 00000000 0020 3390463c e130a6b6 17b04255 1081fd56 58b682db 155728c0 362aeda4 fd8ca4fe
+1 01 40000007 000 00000011 55000000 1000 00887766 0000 00887766 0000 00887766 0000 00000000 0010 8c01d3ed 833d1e8f aa80e0fa d2a8cf3d
+1 01 40000006 000 00000011 66550000 0100 66550000 0000 00008877 0000 00008877 0000 00000000 0010 d1b4606e dc599c50 8a2e4f77 aa06f8bc
+1 01 40000005 000 00000011 77665500 0010 77665500 0000 77665500 0000 00000088 0000 00000000 0010 6044e6ab 24e57127 b803c6b4 25a28e9f
+1 01 40000004 000 00000011 88776655 0001 88776655 0000 88776655 0000 88776655 0000 00000000 0010 6044e6ab 24e57127 b803c6b4 25a28e9f
+1 01 40000003 000 00000011 55000000 1000 00887766 0000 00887766 0000 00887766 0000 00000000 0010 308958f2 8ddf632a e7ce8e89 ab66f426
+1 01 40000002 000 00000011 66550000 0100 66550000 0000 00008877 0000 00008877 0000 00000000 0010 2bca9146 e1574505 c8ce8712 3a5e2709
+1 01 40000001 000 00000011 77665500 0010 77665500 0000 77665500 0000 00000088 0000 00000000 0010 86f588a0 6eceb58c 3c2f786f aefb0c5e
+1 01 40000000 000 00000011 88776655 0001 88776655 0000 88776655 0000 88776655 0000 00000000 0010 38731084 960ca486 2b7e1a18 85d7d534
+1 01 40000006 000 00000011 66550000 0000 66550000 0000 00008877 0000 00008877 0000 00000000 0010 38731084 960ca486 2b7e1a18 85d7d534
+1 01 40000006 000 00000011 66550000 0000 66550000 1000 00008877 0000 00008877 0000 00000000 0010 cc19014e 53fe4238 dac01fff 9daef0a5
+1 01 40000007 000 00000011 55000000 0000 00887766 0000 00887766 0000 00887766 0000 00000000 0010 cc19014e 53fe4238 dac01fff 9daef0a5
+1 01 40000007 000 00000011 55000000 1000 00887766 0000 00887766 0000 00887766 0000 00000000 0010 38731084 960ca486 2b7e1a18 85d7d534
+0 01 400000ba 001 00000001 abccf02e daeef02f
+1 01 4000046c 000 00000111 637f5766 0001 637f5766 0000 637f5766 0100 637f5766 1000 1eee12ae 0000 1eee12ae 0010 1eee12ae 0100 1eee12ae 1000 00000460 0020 ee3b5a5b 0712e24e daf876d4 5893ceaa 58a057c1 c6bd3f9b 4ef8a650 e477e0ef
+0 10 4000060c 010 00000011 daeef183 abccf180 daeef181 abccf182
+0 01 40000560 000 00000001 abccf158 abccf158
+0 10 40000198 000 00000111 abccf066 abccf066 abccf066 abccf066 daeef067 daeef067 daeef067 daeef067
+1 01 40000127 000 00000001 9c000000 1000 00000083 0001 00000120 0010 4c8f9c8f 9392e751 e28f2dd9 7c31cd72
+0 10 40000118 010 00000111 abccf046 daeef047 abccf040 daeef041 abccf042 daeef043 abccf044 daeef045
+0 01 40000312 001 00001010 abccf0c4 daeef0c5 daeef0c5 abccf0c6 abccf0c6 daeef0c7 daeef0c7 abccf0c8 abccf0c8 daeef0c9 daeef0c9
+1 01 4000001c 001 00001001 ca9f3249 0000 ca9f3249 1100 9d2be4ae 0011 9d2be4ae 0000 f5142cca 0011 f5142cca 1100 1181330c 0010 1181330c 1100 e719d2af 0011 e719d2af 1100 00000010 0020 58b682db 155728c0 5619d769 cddafb61 de1b1fe7 9a06051c 77dfd929 97abc5ef
+1 01 40000450 010 00000110 fd4e9725 1010 273c0051 1100 63f81808 1111 d1b3f00c 0100 01d1a6c2 0110 e5f5124c 1111 88b21ec8 1111 00000450 0020 41dcfcf8 99b4805d 3813482e 245435b1 dac26419 e8469a33 ba53b4e1 244642ab
+1 01 400006f7 000 00000010 20000000 1000 000049ca 0001 000049ca 0010 000006f0 0010 706c50a4 ebc32373 4be69500 ff05b8d4
+0 10 400007c0 000 00000011 abccf1f0 abccf1f0 abccf1f0 abccf1f0
+1 01 40000084 000 00000101 5f2c53b4 0001 5f2c53b4 0010 5f2c53b4 0100 5f2c53b4 1000 00004340 0001 00004340 0010 00000080 0010 532391c2 5f274952 d5547b45 e7f57541
+1 01 400003e1 000 00000101 9ae37200 0000 9ae37200 0100 9ae37200 1000 00102ad7 0000 00102ad7 0010 00102ad7 0100 000003e0 0010 541874d5 a1847134 0caafe0e 39d67edb
+0 01 40000200 001 00000011 abccf080 abccf080 daeef081 daeef081
+0 10 40000407 000 00000011 daeef101 daeef101 daeef101 daeef101
+1 01 40000356 001 00001100 60460000 1000 9a01918d 0011 9a01918d 0100 4ebb41de 0010 4ebb41de 0100 3ccfcec1 0011 3ccfcec1 1100 1cb2e469 0011 1cb2e469 0100 87b3e23b 0010 87b3e23b 0100 039faca6 0011 039faca6 1000 00000350 0020 e8f33576 b3652853 39233319 a282dd4c 8ec92a3c 08321de1 b4ceb377 3b63bc4c
+1 01 400005f4 000 00000100 f42da3b8 0001 f42da3b8 0010 f42da3b8 0100 f42da3b8 0000 000000e8 0001 000005f0 0010 344023be bc47aba3 fb76104b 1ca26d44
+1 01 4000052b 000 00001101 bd000000 1000 a15b3740 0000 a15b3740 0010 a15b3740 0100 a15b3740 1000 5d7f648b 0001 5d7f648b 0000 5d7f648b 0100 5d7f648b 1000 7d008204 0001 7d008204 0010 7d008204 0100 7d008204 1000 00000052 0001 00000520 0020 88145091 7bb3bcd0 f5403b35 acb2ad09 7dc99ae9 8966ea60 65876565 52956db5
+1 01 40000206 001 00001110 ed530000 1000 fcff4afa 0011 fcff4afa 1000 3e1db7e5 0010 3e1db7e5 1100 b91cc733 0011 b91cc733 1100 0410d9e8 0011 0410d9e8 1000 5f811c7a 0011 5f811c7a 1100 21351050 0011 21351050 1100 f64652f0 0001 f64652f0 1100 00000200 0030 4adf07fc 397b5725 57bfeb39 37df2b11 cf21dda5 dc0e5c52 9b00fb88 0d161ce9 24dae70e 671ac08f 76c76909 7fe06167
+0 10 40000126 001 00001111 9ceef049 abccf083 abccf083 daeef04b daeef04b abccf04c abccf04c daeef04d daeef04d abccf04e abccf04e daeef04f daeef04f abccf048 abccf048 9ceef049
+0 01 400002cc 001 00000111 daeef0b3 daeef0b3 abccf0b4 abccf0b4 daeef0b5 daeef0b5 abccf0b6 abccf0b6
+1 01 4000038e 001 00000000 15e10000 1100 00000380 0010 e838545e f52a2376 fc8d319c 1bfcf46b
+0 10 40000444 001 00000011 daeef111 daeef111 abccf110 abccf110
+0 10 40000210 010 00000011 b91cc733 04eed9e8 5f811c7a 21351050
+1 01 400001cf 000 00001001 db000000 0000 2fa0321b 0001 2fa0321b 0000 2fa0321b 0100 2fa0321b 1000 ddb1bb0d 0001 ddb1bb0d 0010 ddb1bb0d 0100 ddb1bb0d 1000 000000dd 0001 000001c0 0020 ebcb900b 63bbad72 d3440ca3 ccefb8f1 bc4b2bb4 c5c8512b d7388d17 68707e60
+0 10 400000c4 001 00000111 daeef031 daeef031 abccf032 abccf032 daeef033 daeef033 abccf030 abccf030
+1 01 4000063c 001 00000101 2597a5ca 0011 2597a5ca 1100 c3be89a0 0011 c3be89a0 1100 5d9b2b5e 0010 5d9b2b5e 1100 00000630 0020 6e10ab25 241d16d3 89431e52 5aa9b215 c2b6c3c7 5add0c5a d184163b 5b9a6d07
+0 01 400000b8 001 00001100 abccf02e abccf02e daeef02f daeef02f abccf030 abccf030 daeef031 daeef031 abccf032 abccf032 daeef033 daeef033 abccf034
+1 01 40000378 001 00000000 0000c4bf 0001 00000370 0010 9fe1054a 5308f66f 32acb56f a658b941
+0 01 400004f4 010 00000001 daeef13d abccf13e
+0 01 40000578 010 00000111 abccf15e daeef15f abccf160 daeef161 abccf162 daeef163 abccf164 daeef165
+1 01 40000734 010 00000010 69c4fab6 1011 70bd1d78 1111 9220d5cf 1111 00000730 0010 406a326a 849ffab4 82405fb6 b9af10d4
+0 10 400000fd 000 00000011 daeef03f daeef03f daeef03f daeef03f
+0 10 400003b4 010 00000111 daeef0ed abccf0ee daeef0ef abccf0e8 daeef0e9 abccf0ea daeef0eb abccf0ec
+0 01 400006d0 001 00000100 abccf1b4 abccf1b4 daeef1b5 daeef1b5 abccf1b6
+0 10 400003fc 010 00000001 daeef0ff abccf0fe
+0 10 4000007a 001 00000011 abccf01e daeef01f daeef01f abccf01e
+1 01 40000552 001 00000111 a2bb0000 1100 21bd4600 0001 21bd4600 1000 81eda02f 0010 81eda02f 1100 f302dba2 0011 f302dba2 1100 000078a9 0010 00000550 0020 596e669a b5beab1b 8a4e135b 550fb2bd 6c787f0b e36f20d6 4d051452 a9ea0d14
+1 01 40000078 010 00000001 4c9ed76a 1111 62005ca0 0001 00000070 0010 34f38268 f53d4da5 719d084a 3e16c574
+1 01 4000008e 001 00001100 95760000 1100 181889b1 0010 181889b1 1100 e83ef391 0001 e83ef391 0000 2b4006aa 0010 2b4006aa 1100 951bfcec 0011 951bfcec 0100 8444f861 0001 8444f861 1100 351b6879 0011 351b6879 0100 00000080 0030 532391c2 5f274952 9d6263b5 69cbb14b 20fe00f2 934e5c71 478063bf b7e2ece5 2b43da2f 7f5ab2d7 ddc62b3d bde8f207
+0 01 400003e0 001 00000010 9ae3f0f8 9ae3f0f8 da102af9
+0 10 40000134 010 00000011 daeef04d abccf04e daeef04f abccf04c
+1 01 40000014 010 00001000 e47e1f0d 0111 4705d8bc 1001 368a65b6 1111 b53a52ba 1110 dc8de458 0111 aa2a04f2 1111 9e842c47 1101 d2e222b1 1111 cfdf0151 1111 00000010 0030 a2f28036 2687888e 494a74a7 f50605cc 36ff2699 d399c240 08d6d487 d0a2596f 3cdca3d2 441d03ab 307292be ec823664
+0 10 40000756 000 00001111 daeef1d5 daeef1d5 abccf1d6 abccf1d6 abccf1d6 abccf1d6 daeef1d7 daeef1d7 daeef1d7 daeef1d7 abccf1d4 abccf1d4 abccf1d4 abccf1d4 daeef1d5 daeef1d5
+0 01 400003fc 001 00000111 daeef0ff daeef0ff abccf100 abccf100 daeef101 daeef101 abccf102 abccf102
+1 01 400002c0 010 00001011 6c2f60e7 0111 d88e94b6 1101 ec973371 1111 aae5622a 1110 3d0d5f8c 0111 b25f0d99 1111 f8347427 1110 35ec2912 1100 4901fd5e 1111 73e18f56 1101 ce3b011a 1111 10055c4f 1101 000002c0 0030 ce9fe8a3 ea2c81aa 5c6bd971 fb529bc5 46e9e4e3 d6ca0e7f 575142bd 34eb435d 7b1edffc bcfbc325 49baaaaa 5da01668
+0 10 40000734 010 00000001 69eefab6 abccf1cc
+1 01 4000049d 000 00001101 c5cbbb00 0010 c5cbbb00 0100 c5cbbb00 1000 60624320 0001 60624320 0000 60624320 0100 60624320 1000 29cde020 0001 29cde020 0000 29cde020 0100 29cde020 1000 00c7ea9e 0001 00c7ea9e 0000 00c7ea9e 0100 00000490 0020 5aaa9056 6e7aa704 03bc9fd0 e73fbc7a 8ee34b34 183d4379 8f000f8b 0e725ed6
+1 01 400007c8 010 00000001 fcd84e95 1111 9f35835d 1110 000007c0 0010 df53de12 0e343c60 8ac89fd4 cb5665f5
+1 01 40000015 000 00001010 d3ced500 0010 d3ced500 0100 d3ced500 0000 6e26da44 0001 6e26da44 0010 6e26da44 0100 6e26da44 1000 e8d984bb 0000 e8d984bb 0010 e8d984bb 0100 e8d984bb 1000 00000010 0010 2a8c9d0d ffdc95c8 20af468c 2ef989a8
+1 01 40000034 010 00001001 ed89cf04 1111 34d5458e 1011 ca72a06a 1101 531e0e69 1111 10e793dc 1111 641176cb 0111 a02596b4 0011 d991fbcd 1011 a5064940 1110 46b965c5 1111 00000030 0030 e57cff24 a5aa6cd3 c918b233 1f9cb24a 6f3b22c3 fd3a689d 226d33ab e7282a9d 1329d5d5 605c0366 5d5f0f9e 511b1b38
+1 01 40000286 001 00000101 eb4c0000 0100 69d37525 0011 69d37525 1000 bddbdf50 0010 bddbdf50 0100 0000e868 0011 00000280 0020 39fcde19 77a4a86d 26b2db95 cdca8f32 1fa0c873 96de4750 9cbe274e 21de7d2c
+1 01 4000045d 000 00000110 a34e0f00 0000 a34e0f00 0100 a34e0f00 1000 1518d5fa 0001 1518d5fa 0000 1518d5fa 0100 1518d5fa 0000 00000450 0020 41dcfcf8 99b4805d e80c8703 e8b7d1ac 0c7080a0 934055a9 8ba2ab73 09154a08
+0 01 400003b0 000 00000100 abccf0ec abccf0ec abccf0ec abccf0ec daeef0ed
+1 01 40000550 010 00000011 00595ffe 1100 d2dccd72 1011 dde0a046 0111 c3821d62 1111 00000550 0010 0c04cac6 eec5f6ab ee043f83 fdd5d34b
+0 10 40000600 010 00000001 abccf180 daeef181
+1 01 4000022e 001 00001111 5f230000 1000 8f82047b 0011 8f82047b 1100 3a53c644 0011 3a53c644 1100 789c09fe 0001 789c09fe 1100 97446d2c 0001 97446d2c 1100 7dbcacff 0000 7dbcacff 1100 9e235eb4 0010 9e235eb4 1000 6bf56993 0010 6bf56993 1100 0000093d 0011 00000220 0030 24dae70e 671ac08f eb168793 bb82457b e93a063f 1dbd7375 148dcd09 9fc3b987 51ce8316 da3f5c95 1798011f a7ced0f6
+1 01 40000394 001 00001010 71d67cde 0001 71d67cde 1000 d217b4ba 0011 d217b4ba 1000 561223cf 0011 561223cf 1000 8cde5ff5 0011 8cde5ff5 1100 50f3912c 0010 50f3912c 0100 00004de9 0011 00000390 0020 0e116ca3 a7b021bd f5e54cfb e8f0b564 df114ffd 9969def9 d2a304ce 2990f002
+0 10 400000bc 000 00001111 daeef02f daeef02f daeef02f daeef02f abccf02c abccf02c abccf02c abccf02c daeef02d daeef02d daeef02d daeef02d abccf02e abccf02e abccf02e abccf02e
+0 01 400000e4 010 00001101 daeef039 abccf03a daeef03b abccf03c daeef03d abccf03e daeef03f abccf040 daeef041 abccf042 daeef043 abccf044 daeef045 abccf046
+1 01 400000ff 000 00001010 17000000 1000 00a40929 0001 00a40929 0010 00a40929 0100 00a40929 1000 91e01d16 0001 91e01d16 0010 91e01d16 0100 91e01d16 0000 0000d166 0001 0000d166 0010 000000f0 0020 51397bd2 a62fe109 24ffd073 3b951fac d58de923 c982dd68 d3c77d8d 343b1ed9
+0 10 40000158 001 00001111 abccf056 abccf056 daeef057 daeef057 abccf050 abccf050 daeef051 daeef051 abccf052 abccf052 daeef053 daeef053 abccf054 abccf054 daeef055 daeef055
+0 01 4000002c 010 00001001 9e84d247 d2e222b1 ed89cf04 34cc458e ca72f06a 531e0e69 10e793dc ab1176cb daee96b4 d9ccfbcd
+0 10 4000020a 001 00000011 fccc4afa 3e1db783 3e1db783 fccc4afa
+0 01 40000547 000 00000100 daeef151 abccf152 abccf152 abccf152 abccf152
+1 01 400004a2 001 00000101 1adf0000 1100 3cf66eb0 0011 3cf66eb0 0100 e3874543 0010 e3874543 1100 000097b0 0010 000004a0 0010 5eb090a3 ef34e881 edaca7f0 08118f36
+0 10 40000652 001 00001111 abccf194 daeef195 daeef195 abccf196 abccf196 daeef197 daeef197 c3be89a0 c3be89a0 5d9b2b91 5d9b2b91 abccf192 abccf192 daeef193 daeef193 abccf194
+0 01 4000005c 001 00001011 daeef017 daeef017 abccf018 abccf018 daeef019 daeef019 abccf01a abccf01a daeef01b daeef01b abccf01c abccf01c
+0 10 400005f0 001 00001111 abccf17c abccf17c da2da3b8 da2da3b8 abccf1e8 abccf1e8 daeef17f daeef17f abccf178 abccf178 daeef179 daeef179 abccf17a abccf17a daeef17b daeef17b
+0 01 400006bc 010 00001011 daeef1af abccf1b0 daeef1b1 abccf1b2 daeef1b3 abccf1b4 daeef1b5 abccf1b6 daeef1b7 abccf1b8 daeef1b9 abccf1ba
+0 01 400002fa 001 00001010 abccf0be daeef0bf daeef0bf abccf0c0 abccf0c0 daeef0c1 daeef0c1 abccf0c2 abccf0c2 daeef0c3 daeef0c3
+0 01 4000037c 010 00000110 daeef0df abccf0e0 daeef0e1 abccf0e2 15e1f0e3 abccf0e4 71eef0de
+0 01 40000420 010 00001110 abccf108 daeef109 abccf10a daeef10b abccf10c daeef10d abccf10e daeef10f abccf110 daeef111 abccf112 daeef113 fdcc9714 273cf115 63f81808
+0 01 400004fc 010 00000001 daeef13f abccf140
+0 01 4000077e 000 00001101 daeef1df daeef1df abccf1e0 abccf1e0 abccf1e0 abccf1e0 daeef1e1 daeef1e1 daeef1e1 daeef1e1 abccf1e2 abccf1e2 abccf1e2 abccf1e2
+1 01 4000006a 000 00001010 bc6f0000 0100 bc6f0000 1000 398b9af3 0001 398b9af3 0000 398b9af3 0100 398b9af3 0000 6f39db10 0001 6f39db10 0010 6f39db10 0000 6f39db10 0000 000000b6 0001 00000060 0020 60c09cc9 8fdbc5a2 1e59a40c a5e569a9 1000b3ea 41df8809 0c2a448d 523e9439
+1 01 4000070a 001 00000111 4e240000 1100 7568021f 0011 7568021f 1100 cacbb192 0011 cacbb192 1100 174a6594 0011 174a6594 0100 000019fb 0011 00000700 0020 44ef39fe 53997d35 d6b9da68 ad2c0369 37d652f0 e1c50a4f 12441722 6e5a6a41
+1 01 40000252 000 00000100 1baa0000 0100 1baa0000 1000 00823776 0001 00823776 0010 00823776 0100 00000250 0010 78a5f6aa 08c0ef83 bc634d25 e2b40e85
+0 10 400006a4 001 00000111 daeef1a9 daeef1a9 abccf1aa abccf1aa daeef1ab daeef1ab abccf1a8 abccf1a8
+1 01 4000056c 010 00000001 aef269e9 1111 9379179f 1111 00000560 0020 6c787f0b e36f20d6 21056a55 8d75e2c4 3d14bc1d 4cc4a564 2a70d80d 3c48ee45
+0 10 40000474 000 00001111 daeef11d daeef11d daeef11d daeef11d abccf11e abccf11e abccf11e abccf11e daeef11f daeef11f daeef11f daeef11f 1eee121c 1eee121c 1eee121c 1eee121c
+0 10 400006a2 000 00001111 abccf1a8 abccf1a8 daeef1a9 daeef1a9 daeef1a9 daeef1a9 abccf1aa abccf1aa abccf1aa abccf1aa daeef1ab daeef1ab daeef1ab daeef1ab abccf1a8 abccf1a8
+0 10 400003b1 000 00001111 abccf0ec abccf0ec abccf0ec daeef0ed daeef0ed daeef0ed daeef0ed abccf0ee abccf0ee abccf0ee abccf0ee daeef0ef daeef0ef daeef0ef daeef0ef abccf0ec
+0 01 40000398 010 00000011 d2ccb4ba 56ee23cf 8cde5ff5 daf391e9
+0 01 4000064e 001 00000110 daeef193 abccf194 abccf194 daeef195 daeef195 abccf196 abccf196
+0 10 4000043d 000 00001111 daeef10f daeef10f daeef10f abccf10c abccf10c abccf10c abccf10c daeef10d daeef10d daeef10d daeef10d abccf10e abccf10e abccf10e abccf10e daeef10f
+1 01 4000038c 010 00001110 e065f308 1011 a54e03b7 1001 db480f95 1101 e75dc2ac 0101 4aae86f7 1111 7277c7b0 1111 1b8fc9d0 1110 2f1d9551 0111 6b07ed30 0010 50ea0121 1110 f9b8d598 1111 0d6a5006 1111 2ef96383 1011 18dcdb12 1010 d551676b 1010 00000380 0050 e838545e f52a2376 00fcb6f8 09125f22 ef75cda3 57889767 7f9250d5 1ef5312e c6028d83 2cbe131f 6c01242e 4e3a1690 918cdf09 12d2e1ba 75548924 f9bb99e5 9d40da36 db1d10fb f99ed51d 26690e97
+0 10 40000493 000 00000111 abccf124 daeef125 daeef125 daeef125 daeef125 abccf124 abccf124 abccf124
+0 10 40000758 001 00000011 abccf1d6 abccf1d6 daeef1d7 daeef1d7
+0 10 400001b8 010 00000111 abccf06e daeef06f abccf068 daeef069 abccf06a daeef06b abccf06c daeef06d
+0 10 40000488 010 00000011 abccf122 daeef123 abccf120 daeef121
+0 01 400006f8 010 00001110 abcc49ca daeef1bf abccf1c0 daeef1c1 4e24f1c2 7568021f cacbb192 da4a6594 abcc19fb daeef1c7 abccf1c8 daeef1c9 abccf1ca daeef1cb abccf1cc
+0 10 40000710 010 00001111 cacbb192 da4a6594 abcc19fb daeef1c7 abccf1c8 daeef1c9 abccf1ca daeef1cb abccf1cc 69eefab6 70bd1d78 9220d5cf abccf1c0 daeef1c1 4e24f1c2 7568021f
+1 01 40000420 010 00000011 13ac57ec 1110 8a53ed5a 1011 67ee7895 1111 9d89da8d 1100 00000420 0010 6177d8ab b014a223 4766a4df 7358e31e
+1 01 40000440 001 00001110 1be5c2f0 0000 1be5c2f0 1000 68334839 0010 68334839 0100 015714b3 0011 015714b3 1100 f06798eb 0011 f06798eb 1100 6f07ec2f 0001 6f07ec2f 1000 7ef46a68 0011 7ef46a68 1100 f63bb887 0010 f63bb887 1100 00007b56 0000 00000440 0020 5324d854 40464056 722b0f51 97740bdd c0e66099 fe333d89 5d4457d0 55bec0f6
+0 10 40000094 010 00001111 daeef091 2b400626 da1bfcec 8444f061 da1b6879 abccf02a daeef02b abccf02c daeef02d abccf02e daeef02f abccf020 5f2c53b4 abcc4340 9576f023 18188924
+1 01 400003dc 010 00001001 20f5704c 0011 209a7da7 1111 fe2006f0 1011 09b8ac70 1111 a1708ec0 0101 13f167f1 1101 268d66b1 0110 4073abbb 1111 746b8945 0101 3c68fe08 0111 000003d0 0040 f006f4c1 31f85915 bdce0421 8fe9a552 e434f4d2 3655a7a3 e702860c 5113cb4b 820a0ee8 4f855742 89ef3f00 31ccd45c db1618b0 557d4f7c 6561352a 46a37e1c
+0 10 40000698 010 00000111 abccf1a6 daeef1a7 abccf1a0 daeef1a1 abccf1a2 daeef1a3 abccf1a4 daeef1a5
+0 01 40000314 000 00000011 daeef0c5 daeef0c5 daeef0c5 daeef0c5
+1 01 40000398 000 00001110 871e3379 0001 871e3379 0010 871e3379 0100 871e3379 1000 568a042e 0001 568a042e 0010 568a042e 0000 568a042e 1000 d7035277 0000 d7035277 0000 d7035277 0000 d7035277 1000 003b0624 0001 003b0624 0000 003b0624 0000 00000390 0020 ef75cda3 57889767 d280305e 3d4f84ec 2a5e895b a6d1c620 f8cbc771 f8b50c6f
+1 01 400002f0 000 00001110 f28802d0 0001 f28802d0 0010 f28802d0 0100 f28802d0 0000 aa5b8b6a 0001 aa5b8b6a 0010 aa5b8b6a 0100 aa5b8b6a 0000 b9619fe4 0001 b9619fe4 0010 b9619fe4 0100 b9619fe4 0000 009f968f 0001 009f968f 0010 009f968f 0100 000002f0 0010 56dd7315 7a68f1b7 c06bb3f2 e3796e17
+0 10 400001c6 000 00001111 daeef071 daeef071 abccf072 abccf072 abccf072 abccf072 daeef073 daeef073 daeef073 daeef073 abccf070 abccf070 abccf070 abccf070 daeef071 daeef071
+0 10 40000438 010 00001111 abccf10e daeef10f ab68fe08 daeef101 abccf102 daeef103 abccf104 daeef105 abccf106 daeef107 13ac5708 8aeeed5a 67ee7895 9d89f10b abccf10c daeef10d
+0 10 40000025 000 00000001 f58de458 f58de458
+0 01 40000769 000 00000010 abccf1da abccf1da abccf1da
+0 01 40000714 010 00000010 da4a6594 abcc19fb daeef1c7
+0 10 40000680 010 00000001 abccf1a0 daeef1a1
+1 01 40000028 010 00000100 42b18394 1011 46ac663a 1111 671a0425 1101 674ca603 0110 35dc42b7 1111 00000020 0020 36ff2699 d399c240 9d13bb99 510f6401 c7da9df6 bcbfb6cc a5ce07c4 020cdd50
+1 01 4000026f 000 00001001 48000000 0000 e5be4e74 0000 e5be4e74 0010 e5be4e74 0100 e5be4e74 0000 91446ef6 0001 91446ef6 0010 91446ef6 0100 91446ef6 1000 000000b8 0001 00000260 0020 29720387 f30efe04 ee8298a1 038e2065 b08f98db bd16b131 8659f1b2 cd296dfb
+1 01 400007b3 000 00001101 a2000000 0000 40f00e0f 0001 40f00e0f 0000 40f00e0f 0100 40f00e0f 0000 886e2c3a 0001 886e2c3a 0010 886e2c3a 0100 886e2c3a 1000 b658ba2b 0001 b658ba2b 0000 b658ba2b 0100 b658ba2b 1000 000000f6 0000 000007b0 0020 2b5115ad f4075433 07836863 f6f1fba3 df53de12 0e343c60 8ac89fd4 cb5665f5
+0 01 40000478 010 00001110 abccf11e daeef11f abccf120 daeef121 abccf122 daeef123 abccf124 daeef125 abccf126 c5cbbb27 1adff120 29f66eb0 e387459e daee972b abccf12c
+0 01 40000300 000 00001011 abccf0c0 abccf0c0 abccf0c0 abccf0c0 daeef0c1 daeef0c1 daeef0c1 daeef0c1 abccf0c2 abccf0c2 abccf0c2 abccf0c2
+1 01 40000440 001 00000110 7616d6e4 0010 7616d6e4 1100 affeedd4 0001 affeedd4 1100 449c029c 0011 449c029c 0100 0000d104 0011 00000440 0010 f9c59496 f7326e44 51501eff fd04058b
+0 01 4000004c 010 00000111 daee96b4 d9ccfbcd a5064915 46b965c5 daeef017 abccf018 daeef019 bc6ff01a
+0 01 40000711 000 00001011 cacbb192 cacbb192 cacbb192 da4a6594 da4a6594 da4a6594 da4a6594 abcc19fb abcc19fb abcc19fb abcc19fb daeef1c7
+1 01 40000658 001 00001000 5a084ae6 0011 5a084ae6 1100 44134579 0011 44134579 0100 fe297dbd 0011 fe297dbd 1100 1425d0a9 0001 1425d0a9 0100 00001b78 0011 00000650 0020 068f68c0 85612363 db88ff5e 930e13ae 7ff46f5b b92119f0 01b6ace8 a7073f94
+1 01 400007ea 000 00001100 a34b0000 0100 a34b0000 0000 54a77c0a 0001 54a77c0a 0010 54a77c0a 0100 54a77c0a 1000 688b48b9 0000 688b48b9 0010 688b48b9 0000 688b48b9 0000 00c1e506 0001 00c1e506 0000 00c1e506 0000 000007e0 0020 3b6f9412 da9904a6 4e655fa0 4c243206 03b9c061 9d33cf56 be033d89 04e5ee61
+0 01 4000062c 010 00001111 daeef18b abccf18c daeef18d abccf18e 2597a5ca c3be89a0 5d9b2b91 abccf192 daeef193 abccf194 daeef195 5a084ae6 da134579 fe297dbd da25f1a9 abcc1b78
+1 01 40000254 010 00001001 c1547b9c 1101 4a009214 1110 d46f33f4 1011 12b6a96b 1111 24440898 0111 a1076b47 1100 8e3e9b8e 0111 625ab402 1111 006e1184 1011 1211f13e 0111 00000250 0030 a59e63d9 2400f80a d84c7d8e fe16cf41 9edbd433 caf01626 c3d5f2a7 8de617a0 63f867cb d71f2c7d 5ade85e1 69f64449
+0 01 400005c4 001 00001001 daeef171 daeef171 abccf172 abccf172 daeef173 daeef173 abccf174 abccf174 daeef175 daeef175
+0 01 40000428 010 00001111 67ee7895 9d89f10b abccf10c daeef10d abccf10e daeef10f 7616d610 affe48d4 019c029c f067d104 6fcc972f 7ef46a68 f63bb808 a34ef117 ab18a6fa e5f5124c
+0 10 4000068c 010 00001111 daeef1a3 abccf1a4 daeef1a5 abccf1a6 daeef1a7 abccf1a8 daeef1a9 abccf1aa daeef1ab abccf1ac daeef1ad abccf1ae daeef1af abccf1a0 daeef1a1 abccf1a2
+1 01 40000574 000 00001001 64d6d47b 0001 64d6d47b 0010 64d6d47b 0100 64d6d47b 1000 16451912 0001 16451912 0010 16451912 0000 16451912 1000 0000fc7a 0001 0000fc7a 0000 00000570 0010 a019ecb8 b39e98bc ba054193 7c7841ea
+1 01 40000194 001 00000000 0000ab48 0010 00000190 0010 e2e41b56 1c87947a c9843108 d1f43958
+1 01 4000018d 000 00000111 c4dbe300 0010 c4dbe300 0100 c4dbe300 0000 633611f5 0000 633611f5 0010 633611f5 0100 633611f5 0000 000000ca 0001 00000180 0020 2fb9f30f f09742c7 bd29a9f9 a6afac2e 6560f470 3a54e0fa 010f2d26 76befa5f
+0 01 400006d9 000 00001010 abccf1b6 abccf1b6 abccf1b6 daeef1b7 daeef1b7 daeef1b7 daeef1b7 abccf1b8 abccf1b8 abccf1b8 abccf1b8
+0 10 400000d1 000 00000001 abccf034 abccf034
+1 01 40000746 000 00001111 5c1d0000 0100 5c1d0000 1000 e03e0dc9 0001 e03e0dc9 0000 e03e0dc9 0100 e03e0dc9 1000 e66e3d14 0001 e66e3d14 0010 e66e3d14 0000 e66e3d14 0000 0361fc49 0001 0361fc49 0010 0361fc49 0100 0361fc49 1000 0000c9a7 0001 0000c9a7 0010 00000740 0020 01300aa2 ec0765ea de4d172b e383fa2d 2b606f3e b6e4deb0 0b0eb531 792e1d1b
+1 01 40000730 010 00000100 fb23c11f 0111 66cb67b1 1111 734a82f2 0011 91b6f13d 1111 db1d03a4 0110 00000730 0020 a7a275ca ecfe3220 cc5ebd3f cd3e5477 82edda18 3cb5354f 7d8df9d9 4237f96e
+0 10 40000787 000 00000111 daeef1e1 abccf1e0 abccf1e0 abccf1e0 abccf1e0 daeef1e1 daeef1e1 daeef1e1
+0 01 4000047c 001 00000111 daeef11f daeef11f abccf120 abccf120 daeef121 daeef121 abccf122 abccf122
+1 01 40000750 010 00000110 4f9f956f 1111 bc7b8273 0101 51a79e6a 1100 7036a465 0111 ee6eccfd 1011 6dfbfc0a 1111 8882bfe5 1101 00000750 0020 e0b967d9 88804d0a 387610c5 3b93ad44 cbf7b60d 0251de47 a3195d8d 9ec39ed8
+1 01 4000049a 001 00000001 4a040000 1100 0000304a 0011 00000490 0010 5aaa9056 6e7aa704 7cb0e34e b94d580d
+0 10 40000240 010 00001111 7dbcf090 9eee5e91 6bf56992 daee093d 1baaf094 c154379c 4a009296 d4ee33f4 12b6a96b da440898 a107f09a da3e9b8e 625ab402 00441184 ab11f13e daeef09f
+0 10 4000000e 001 00000111 8833cc55 55555555 55555555 55555555 55555555 88776655 88776655 8833cc55
+0 10 400003dc 000 00000001 daee704c daee704c
+1 01 400002b2 001 00000011 e0660000 1100 8bb96eef 0011 8bb96eef 1100 00009eb8 0011 000002b0 0010 7b444e9a 783455c8 d712084a 34eb3715
+1 01 4000026c 010 00000101 0aa438a9 1011 3a46a3a8 1111 39b61aa8 1001 c0093f6b 0100 8afd10bf 0101 18ba068c 0111 00000260 0030 9edbd433 caf01626 a4167a59 806f0c72 56b2a963 3f05c9e8 88d7786a 347ac43a e9b86d3a 4bb5ded7 b5c2cd73 f125a244
+0 01 4000069c 010 00001111 daeef1a7 abccf1a8 daeef1a9 abccf1aa daeef1ab abccf1ac daeef1ad abccf1ae daeef1af abccf1b0 daeef1b1 abccf1b2 daeef1b3 abccf1b4 daeef1b5 abccf1b6
+0 01 40000174 010 00001000 daeef05d abccf05e daeef05f abccf060 daeef061 abccf062 dadbe363 ab361164 daeeabca
+1 01 4000024e 001 00001110 f97c0000 1100 7e9f08f7 0001 7e9f08f7 1000 d3ff0cc0 0011 d3ff0cc0 1000 efe8ba69 0001 efe8ba69 1000 352388dc 0011 352388dc 0100 8233bab9 0011 8233bab9 1100 f1e9af7c 0011 f1e9af7c 1100 6d366d93 0000 6d366d93 1100 00000240 0030 51ce8316 da3f5c95 8ef72618 08ec6490 ef77f0bc c5229b9e 04bbe71c a74797f0 c35f8748 dbaf0b9a 3d1226fd a9d10710
+1 01 40000566 000 00001001 31d10000 0100 31d10000 1000 0cfca1b0 0001 0cfca1b0 0010 0cfca1b0 0000 0cfca1b0 1000 ba37d4e5 0001 ba37d4e5 0010 ba37d4e5 0100 ba37d4e5 0000 00000560 0010 93e97c37 e4132316 f165199d 532b5249
+0 10 4000030e 001 00001111 daeef0c3 abccf0c4 abccf0c4 daeef0c5 daeef0c5 abccf0c6 abccf0c6 daeef0c7 daeef0c7 abccf0c0 abccf0c0 daeef0c1 daeef0c1 abccf0c2 abccf0c2 daeef0c3
+0 01 400006a6 001 00000011 daeef1a9 abccf1aa abccf1aa daeef1ab
+0 01 40000251 000 00001010 7eaaf0f7 7eaaf0f7 7eaaf0f7 d3540cc0 d3540cc0 d3540cc0 d3540cc0 ef009269 ef009269 ef009269 ef009269
+0 10 4000009c 001 00001111 da1bfcec da1bfcec abccf020 abccf020 5f2c53b4 5f2c53b4 abcc4340 abcc4340 9576f023 9576f023 18188924 18188924 daeef091 daeef091 2b400626 2b400626
+0 10 400000e6 000 00000001 daeef039 daeef039
+1 01 4000015c 001 00001010 83b2ad46 0010 83b2ad46 0000 67ef3e66 0011 67ef3e66 1100 1e9ca22e 0010 1e9ca22e 0100 ff5d0331 0011 ff5d0331 1100 9b6b11e8 0001 9b6b11e8 1100 000013b8 0011 00000150 0030 eef9ee51 7ce1a598 31ed39e5 8a3d29a0 78ac77c6 ae534de2 4bcc3c66 52c22398 1b798057 79f7a48c df605faa cae5aa6d
+0 10 400000f0 010 00000001 abccf03c daeef03d
+1 01 4000028e 001 00001011 3a1a0000 1100 b2ae6684 0011 b2ae6684 1100 a7b1c0a1 0011 a7b1c0a1 0100 85273cc6 0001 85273cc6 1100 1fb8bfdc 0010 1fb8bfdc 1100 99ff0c56 0011 99ff0c56 1100 0000889f 0011 00000280 0030 e9b86d3a 4bb5ded7 4a8ce20e ad2fd30f 8e2b0edf 584ec53e 0163e43e 90c6aef2 6d0b6dd3 23845059 9e5394b4 42d176e5
+0 10 4000075b 000 00001111 51a7f1d6 da36a465 da36a465 da36a465 da36a465 4f9f956f 4f9f956f 4f9f956f 4f9f956f da7bc973 da7bc973 da7bc973 da7bc973 51a7f1d6 51a7f1d6 51a7f1d6
+0 01 40000030 010 00000010 671a2225 ed4ca604 35dc42b7
+1 01 400003a8 010 00001000 3362707b 1111 c17bd1e5 0111 b943e08a 0111 07bf5bd5 1010 b154b209 1111 18eab88b 1111 da880ee2 1011 183f81d2 1001 5d887c93 1110 000003a0 0030 2a5e895b a6d1c620 1a0a48a3 3c910250 e98f9732 f699ba95 a119c457 a8df9f3e df8ae8db 71c60d07 ff9cfde7 1680c397
+0 10 4000033c 001 00000111 daeef0cf daeef0cf abccf0cc abccf0cc daeef0cd daeef0cd abccf0ce abccf0ce
+0 01 400007d0 010 00000001 abccf1f4 daeef1f5
+0 01 400000b0 010 00001011 abccf02c daeef02d abccf02e daeef02f abccf030 daeef031 abccf032 daeef033 abccf034 daeef035 abccf036 daeef037
+0 01 400007b2 000 00000100 abccf1ec abccf1ec daf0f10f daf0f10f daf0f10f
+0 10 400000af 000 00000001 daeef02b daeef02b
+1 01 400007ea 001 00000000 8dc80000 0100 000007e0 0010 3b6f9412 da9904a6 09b87de1 4bff43cf
+1 01 40000760 010 00000000 99a38553 1101 00000760 0010 a8088ad3 575ea8f9 caed0734 50834374
+0 01 40000560 000 00001100 abcc7858 abcc7858 abcc7858 abcc7858 31d1f159 31d1f159 31d1f159 31d1f159 0ccca1b0 0ccca1b0 0ccca1b0 0ccca1b0 ae37d4e5
+1 01 40000404 010 00001111 376cf59a 0111 d3ed94f0 0011 c0341692 0011 fc3d91f9 0111 d25d75f2 1100 27ed6294 1101 afe8bed4 1010 5ac0a46a 1100 d01970f0 1111 d9a120e0 1111 b483e17f 0001 a3eac7c5 1111 8b2fc664 1011 48fb7b2f 0111 529fb33c 1011 d9b701be 1101 00000400 0050 93cb2f9b db010f64 fb18a958 aeb2255a dd067076 991b5542 a69878c2 451a9dd5 6c43cba6 2151a47e 8c11ccfc a2eb96ac a8252fd3 916b61ed a59f8230 25ec573b 1df86f58 c4637204 328517b0 09365bdf
+1 01 40000334 010 00000011 1ff13e86 1111 baf4fba4 1110 33506e21 1111 f380c89e 0010 00000330 0020 5dcbaa1f 1aaf8125 3d521004 bd0c500b 4444b7a9 11398fea ff83bd91 d4cb2470
+0 01 40000788 010 00000110 abccf1e2 daeef1e3 abccf1e4 daeef1e5 abccf1e6 daeef1e7 abccf1e8
+0 01 4000028f 000 00001010 3a1adfa3 b2ae6684 b2ae6684 b2ae6684 b2ae6684 dab1c0a1 dab1c0a1 dab1c0a1 dab1c0a1 8527f0c6 8527f0c6
+1 01 400005ce 001 00000101 860a0000 1100 c9d44de7 0011 c9d44de7 0100 7135af43 0011 7135af43 0100 00001449 0001 000005c0 0020 43eb48bc 0f77e582 c367ae63 86c41df4 3406d404 77ec1d74 95907975 d7139e90
+0 01 4000002f 000 00001000 46ac663a 671a2225 671a2225 671a2225 671a2225 ed4ca604 ed4ca604 ed4ca604 ed4ca604
+1 01 400006b7 000 00000001 fc000000 1000 0000005e 0001 000006b0 0010 b6490e99 494fcee6 3e7233ba 0da6e457
+0 01 40000402 001 00001100 ab68fe08 da6cf59a da6cf59a abcc94f0 abcc94f0 daee1692 daee1692 ab3d91f9 ab3d91f9 d25df105 d25df105 27edf194 27edf194
+0 10 40000592 001 00000001 abccf164 abccf164
+1 01 40000276 001 00001101 5b840000 0100 0ae424a5 0010 0ae424a5 1100 fd424f5d 0011 fd424f5d 1000 75230b8b 0011 75230b8b 1000 01e7bd86 0010 01e7bd86 1100 811366f9 0011 811366f9 1100 1baf526f 0010 1baf526f 0000 00007a4a 0010 00000270 0030 edd8dd65 978c94ad 30a93c3b 64b2b9b6 dff8c2e3 86e0f836 b2de2008 0fc3a4b1 fb83a268 b3c265d5 019d9521 a64c6f3e
+1 01 40000782 001 00001100 52730000 1100 5c9b993f 0001 5c9b993f 1100 165c9828 0011 165c9828 1100 f675ed23 0011 f675ed23 0000 bd81155b 0011 bd81155b 0100 add3e767 0001 add3e767 1100 6c7bb336 0011 6c7bb336 1100 00000780 0020 e21ec455 7ab66994 5da1181a 3789fa6d d807a0b4 9f211883 879b401e 13ec3c3b
+1 01 400002b8 010 00000100 b0344981 1101 0dcffb1a 1000 414ebda1 1111 a4e87ff8 0101 11238b6f 1111 000002b0 0020 7b444e9a 783455c8 3e6153f7 aff46a2c 8fdbf47a 881263e5 e392a6fb 857d8c0f
+0 01 40000200 000 00001010 abccf080 abccf080 abccf080 abccf080 edeef081 edeef081 edeef081 edeef081 fccc4afa fccc4afa fccc4afa
+0 10 40000468 010 00000001 88b21ec8 637ff166
+0 01 40000564 001 00001101 31d1f159 31d1f159 0ccca1b0 0ccca1b0 ae37d4e5 ae37d4e5 9379179f 9379179f 64d6d47b 64d6d47b 16cc1912 16cc1912 daeef17a daeef17a
+0 10 40000094 001 00001111 daeef091 daeef091 2b400626 2b400626 da1bfcec da1bfcec abccf020 abccf020 5f2c53b4 5f2c53b4 abcc4340 abcc4340 9576f023 9576f023 18188924 18188924
+0 10 4000075e 001 00001111 da36a465 ab1d03d0 ab1d03d0 5c1df1d1 5c1df1d1 e03ef1c9 e03ef1c9 daee3d14 daee3d14 4f9f956f 4f9f956f da7bc973 da7bc973 51a7f1d6 51a7f1d6 da36a465
+1 01 40000545 000 00001101 cf550500 0010 cf550500 0100 cf550500 1000 39f1ffa2 0001 39f1ffa2 0000 39f1ffa2 0100 39f1ffa2 1000 185624bf 0001 185624bf 0010 185624bf 0100 185624bf 0000 000663af 0001 000663af 0000 000663af 0100 00000540 0020 d3fde448 cb7a4397 531a12c7 61417626 af8f0c87 cf2d5372 7c2a2d1f 517f3824
+0 10 4000052e 001 00001111 a15b374b 5d7ff18b 5d7ff18b 7d008204 7d008204 abccf152 abccf152 daeef14f daeef14f abccf148 abccf148 daeef149 daeef149 bdccf14a bdccf14a a15b374b
+1 01 400007b4 010 00001010 86f298f3 1110 329aa626 0011 8facbc8c 1011 8f65f2a1 0011 52628844 0001 653a9605 1011 1d4b2d74 0011 c8b38a5c 1000 f6b27c32 1111 4d37f503 0100 fb83cac8 1101 000007b0 0030 252cf9e9 b571c8ce 41613666 40a0444f bae966d4 4fc7e072 cea7d56f 77b8cb62 a0c34d5d 793fbd9b 397bab5f c94454c0
+0 01 400005c4 000 00001110 daeef171 daeef171 daeef171 daeef171 abccf172 abccf172 abccf172 abccf172 860af173 860af173 860af173 860af173 abd44de7 abd44de7 abd44de7
+0 10 40000666 001 00001111 da25f1a9 abcc1b78 abcc1b78 daeef19b daeef19b abccf19c abccf19c daeef19d daeef19d abccf19e abccf19e daeef19f daeef19f fe297dbd fe297dbd da25f1a9
+1 01 400004f3 000 00000110 b3000000 0000 0fa29173 0001 0fa29173 0000 0fa29173 0100 0fa29173 1000 0000b69a 0000 0000b69a 0010 000004f0 0010 b79ea79b 89a0fca5 fb6c1d30 63bc795f
+0 01 4000064c 010 00001001 daeef193 abccf194 daeef195 5a084ae6 da134579 fe297dbd da25f1a9 abcc1b78 daeef19b abccf19c
+1 01 40000300 010 00000001 bbdc28ac 1110 5d20dab0 0111 00000300 0010 8e5f6ed5 a54d378f 64a3a35d 5461f5e9
+0 01 400007e9 000 00000110 abc8f1fa abc8f1fa abc8f1fa 54a77c0a 54a77c0a 54a77c0a 54a77c0a
+0 10 400006f8 010 00000011 abcc49ca daeef1bf abccf1bc 20eef1bd
+1 01 40000054 010 00000101 cd2eff2d 1111 0dd29aa2 1101 d6e0d6e0 0110 f31ed353 1111 b649d7ba 1101 7f2ce45d 1110 00000050 0020 d7917e46 92a0d7d3 4f0dfdbb 694e57c9 1ce8ccbd 21d7d94f 24a523a4 fc1283b4
+1 01 400000d0 001 00000111 243f15e0 0001 243f15e0 1100 c13b6a88 0010 c13b6a88 0100 3a1976ba 0001 3a1976ba 1000 e71935de 0011 e71935de 1100 000000d0 0010 e32424b9 46a55807 e191cf99 b28d5918
+1 01 400000c2 001 00000110 4d940000 1100 df579986 0010 df579986 1100 8e3c936d 0010 8e3c936d 1100 2c081694 0011 2c081694 1100 000000c0 0010 e6f983eb 7f5e72d9 1c59c616 bbfea938
+0 01 4000057e 000 00000110 daeef17a daeef17a abccf160 abccf160 abccf160 abccf160 daeef161
+0 01 40000429 000 00000111 d9a120e0 d9a120e0 d9a120e0 9d89f17f 9d89f17f 9d89f17f 9d89f17f a3eac7c5
+1 01 400002dc 010 00001100 eb97c3e4 0011 b4f3a61f 1100 deeb4248 1001 653ac3e2 1111 99426ab2 1110 178b929e 1011 db697387 1111 7a28fdf1 1011 62001d94 0111 f6b7d3dc 1101 bdbc5874 1011 8b58e711 0010 884aea07 1111 000002d0 0040 46e9e4e3 d6ca0e7f 86ec748b 4b8ed63c b3722368 05978633 df2ebe5f 6b4569ef ec1311c9 ce7a18fb 195b6831 89997521 8abb187c 2035918c f80e8680 f9b574e3
+1 01 40000086 000 00001011 cadb0000 0100 cadb0000 1000 a73947e3 0000 a73947e3 0010 a73947e3 0000 a73947e3 1000 fb2e4b77 0000 fb2e4b77 0010 fb2e4b77 0100 fb2e4b77 1000 00009a0c 0001 00009a0c 0010 00000080 0020 9c2fef3a b5deb327 2629463f d33b4bca 4349741e 81056fb5 40eb4621 1c2970b6
+0 10 40000493 000 00000001 abccf124 abccf124
+1 01 400005ec 010 00000010 b5db4d90 1101 6fef386d 1011 2af0bb25 1111 000005e0 0020 6ec45333 abb4d463 85dff1ee 3a203716 50664579 c877d849 f4613f4d fd5f7897
+0 01 4000045e 001 00000101 a34ef117 ab18a6fa ab18a6fa e5f5124c e5f5124c 88b21ec8
+1 01 4000048c 000 00001011 f058da8c 0001 f058da8c 0010 f058da8c 0100 f058da8c 1000 a3e2bf88 0000 a3e2bf88 0010 a3e2bf88 0100 a3e2bf88 1000 bf331c82 0001 bf331c82 0010 bf331c82 0100 bf331c82 1000 00000480 0020 440acca8 af5dfece 695e098e 90df4a5f 0a92e009 4ca7e240 0ecaecda 295f2867
+1 01 40000792 000 00000100 3e940000 0100 3e940000 1000 0022d1dd 0000 0022d1dd 0000 0022d1dd 0000 00000790 0010 77038fbb a5169f32 5e18351e 66377393
+0 10 400007ea 001 00000011 abc8f1fa 54a77c0a 54a77c0a abc8f1fa
+1 01 400007e6 000 00000110 2aa50000 0000 2aa50000 1000 afb4d14e 0000 afb4d14e 0010 afb4d14e 0100 afb4d14e 0000 000000a3 0001 000007e0 0010 70eedacc 8be3fdc0 2fbb3ed2 2232d81b
+1 01 4000020a 000 00000001 0c130000 0100 0c130000 1000 00000200 0010 4adf07fc 397b5725 cafa3d86 77591128
+0 01 40000200 010 00001011 abccf080 edeef081 0c134afa 3e1db783 b91cc733 04eed9e8 5f811c7a 21351050 f646f0f0 daeef089 abccf08a 5feef08b
+1 01 40000273 000 00000001 13000000 1000 00000035 0001 00000270 0010 02f77c57 33081aac ed2c6520 84a3fe30
+0 10 400006c2 000 00000011 abccf1b0 abccf1b0 abccf1b0 abccf1b0
+1 01 40000774 000 00000101 44a0f142 0001 44a0f142 0000 44a0f142 0000 44a0f142 1000 0000b21f 0001 0000b21f 0000 00000770 0010 b4ca84ec f654b1c3 aa35c026 d2dfe0d6
+0 01 40000128 010 00000101 abccf083 daeef04b abccf04c daeef04d abccf04e daeef04f
+0 10 400003ca 000 00000011 5d887cf2 5d887cf2 5d887cf2 5d887cf2
+0 10 400004d4 010 00000011 daeef135 abccf136 daeef137 abccf134
+1 01 4000068c 001 00001100 511fc788 0010 511fc788 0100 4af84ef9 0010 4af84ef9 0100 48658f72 0011 48658f72 1100 e08236ef 0011 e08236ef 0100 c254e1d7 0011 c254e1d7 1100 69a41865 0000 69a41865 1000 000097ec 0010 00000680 0030 c8babe30 d26b82bd 00b5dd0f 59afa53f a643082c da00bcbf e5775efc 8abfcc84 61572cf3 0b1e21a5 06fb8e47 acb861a1
+0 10 40000050 010 00000001 d9ccfbcd cd2eff2d
+0 01 400003bc 010 00000100 18eab88b dacc0ee2 18ee67d2 5d887cf2 daeef0f3
+1 01 4000009c 001 00001000 160cd395 0011 160cd395 1100 0bd16ace 0011 0bd16ace 1100 b1c40d42 0011 b1c40d42 1000 cd3c2605 0011 cd3c2605 1100 0000fb98 0001 00000090 0020 4349741e 81056fb5 5fa1c954 642e009f 48e46630 9f41c956 1aab2f26 4beb1231
+1 01 4000028e 001 00001110 69a00000 0100 253e69f5 0010 253e69f5 1100 69dd6c9f 0011 69dd6c9f 0100 2635ba37 0010 2635ba37 1100 bc083c07 0011 bc083c07 1000 78b504c0 0010 78b504c0 1100 c7a86e8c 0011 c7a86e8c 1100 67eb15fb 0011 67eb15fb 1100 00000280 0030 dff8c2e3 86e0f836 aad978f2 005e2b8b 8f579bd3 67fc323a 3d44d58a 1dac4986 ee4a7583 da063dde d513dbca 3c664625
+1 01 40000430 001 00000011 9eb1f26e 0011 9eb1f26e 1100 30dc5e12 0011 30dc5e12 1000 00000430 0010 ed9c0a4f f382e93d 3b33c503 08436039
+1 01 400002e9 000 00000100 80cdf400 0010 80cdf400 0100 80cdf400 1000 000053b6 0000 000053b6 0010 000002e0 0010 b3722368 05978633 63f18e09 9848442d
+0 01 400005a2 001 00001111 abccf168 daeef169 daeef169 abccf16a abccf16a daeef16b daeef16b abccf16c abccf16c daeef16d daeef16d abccf16e abccf16e daeef16f daeef16f abccf170
+1 01 40000434 000 00001010 a29d6bb3 0001 a29d6bb3 0010 a29d6bb3 0000 a29d6bb3 1000 7f071f53 0000 7f071f53 0010 7f071f53 0100 7f071f53 1000 006cd189 0001 006cd189 0010 006cd189 0100 00000430 0010 ca4b0aba 6756e691 bd86f515 b6d3dacb
+0 10 400006f7 000 00000011 20eef1bd 20eef1bd 20eef1bd 20eef1bd
+1 01 40000774 010 00001011 ede1ede8 1110 c3398662 1101 473caa09 0111 f48e29dd 0111 c4c6f32b 1101 a80de6a4 0000 6576f6a2 1011 5b152085 1101 8a89c55a 1001 6fbe8702 0111 3a61871c 1111 ff97d903 1101 00000770 0040 3857ad1c 494dd04e 40fa1572 87c5180d ea49de8f 2f2d91b8 ac4ee5cd b070cf23 44e46557 ab2526e0 829ce50c a68b830a e7630e53 d07b3793 8e27cc9f d0ec07e5
+1 01 400002d7 000 00000100 6e000000 1000 85188872 0001 85188872 0010 85188872 0100 85188872 1000 000002d0 0010 6178204b fc4ca506 bff7f388 a4fa0594
+0 10 400002fc 010 00000111 da001d94 b4f3fd5e dee1f048 80cdf4e2 9942534f 1788929e db697387 7a61fdf1
+1 01 400002c0 000 00001010 ca6fc8dd 0001 ca6fc8dd 0010 ca6fc8dd 0100 ca6fc8dd 1000 e4787ccd 0000 e4787ccd 0010 e4787ccd 0000 e4787ccd 1000 0031d02f 0001 0031d02f 0010 0031d02f 0000 000002c0 0010 c9b4737c 2628347d 5468fffa 58e1b17c
+0 10 40000622 001 00000011 abccf188 daeef189 daeef189 abccf188
+1 01 400006ce 001 00000001 63b70000 0100 00000071 0010 000006c0 0020 3b79ca9f 3853784f 9ac41068 d6785fbe 9aeef096 567ab46d e0755050 005cbcfb
+0 10 400003f0 010 00000001 13f1f0f1 da8d66fd
+0 10 40000630 010 00000111 abccf18c daeef18d abccf18e 2597a5ca abccf188 daeef189 abccf18a daeef18b
+0 01 400000e8 010 00001101 abccf03a daeef03b abccf03c daeef03d abccf03e 17eef03f 00a40929 dae01d16 abccd166 daeef043 abccf044 daeef045 abccf046 daeef047
+0 10 40000526 001 00000111 daeef149 bdccf14a bdccf14a a15b374b a15b374b abccf148 abccf148 daeef149
+0 10 40000058 001 00000111 0dd265a2 0dd265a2 dae0d617 dae0d617 d9ccfbcd d9ccfbcd cd2eff2d cd2eff2d
+1 01 400004a3 000 00000100 30000000 1000 702a65a5 0001 702a65a5 0010 702a65a5 0100 702a65a5 1000 000004a0 0010 0e7e6638 13262f79 b9211451 ece8c3d3
+0 01 40000650 010 00001000 abccf194 daeef195 5a084ae6 da134579 fe297dbd da25f1a9 abcc1b78 daeef19b abccf19c
+1 01 4000060a 001 00001111 707a0000 1100 7ada4bb1 0011 7ada4bb1 0100 653f7d17 0001 653f7d17 1000 af4304ed 0011 af4304ed 1000 48dceb45 0001 48dceb45 1100 2b311ca8 0011 2b311ca8 0100 3b371fe2 0011 3b371fe2 1100 efc8a02e 0011 efc8a02e 1100 0000aae0 0011 00000600 0030 55b15ba7 bca46e17 3558999c e9e4d62a bdaef845 26fe8611 2f864162 6507219c 4d827257 008da3ae f1eb3e3f 71d01dad
+0 01 4000027c 010 00000101 fdfd4f5d 75ba0b8b 01e7bda1 811366f9 3aa052a3 253e6984
+0 10 400002c8 010 00000111 1123d02f aae562b3 ab0d5f8c 6e5f0d99 85188872 35ecc3e4 ca6fc8dd e4e87cf8
+0 10 4000023c 001 00000011 9744f02c 9744f02c 789cf0fe 789cf0fe
+1 01 40000554 010 00001111 94cbe16c 1001 932d3224 0010 8a7ae991 0000 ebaeb845 1111 01028914 1110 6382fa9e 1111 b744c8ec 1111 04cf5407 0111 de52a436 1000 8fb1c827 1011 80891251 0111 5553f613 1111 e10c4ed6 0111 e5251698 1110 894a1d62 0001 03ab818b 1111 00000550 0050 02d7a8ba f907f04a 07e2a0c8 85ba3d57 a71be8c3 f9c6eeec f76754a9 ec50aa4d bc4fb9f4 dc622a7d df0d2613 175d4dfa 7ecfc0eb e76aaaf6 eb09bd43 f221f2d9 c8899f39 42d6a6c7 b1205cf8 969c7174
+0 10 4000052b 000 00000011 bdccf14a bdccf14a bdccf14a bdccf14a
+1 01 400001d8 010 00001100 4a23b588 1101 17210ff9 0111 0c1c158c 1111 762e7ca7 1000 44c0832a 1011 38fc58fb 1011 72086593 1011 7d7678c4 1111 c68cbea9 1111 eef31c96 1101 454e3fd8 0101 8902d5e8 1111 65e1ec01 0111 000001d0 0040 bc4b2bb4 c5c8512b bea98cc4 f917cc57 21414f86 830a5975 7a047b5a ce64afd7 6266b28a 1677ca81 b51e039f 05fc4ec6 a17f6f65 f3b5d5fd d326160b 595d1c8b
+0 01 400004a2 001 00001100 30dff120 702a65a5 702a65a5 e387459e e387459e daee972b daee972b abccf12c abccf12c daeef12d daeef12d abccf12e abccf12e
+1 01 40000638 000 00001111 9c82a020 0001 9c82a020 0010 9c82a020 0100 9c82a020 1000 d3c29635 0001 d3c29635 0000 d3c29635 0100 d3c29635 1000 b6b5c973 0001 b6b5c973 0010 b6b5c973 0100 b6b5c973 1000 3c6a9cf8 0001 3c6a9cf8 0010 3c6a9cf8 0100 3c6a9cf8 1000 00000630 0020 6e10ab25 241d16d3 381fb1a9 dc244432 488cae73 209c2124 f56c919c 7bd49c30
+1 01 4000041b 000 00000011 2e000000 0000 00304f0d 0001 00304f0d 0010 00304f0d 0100 00000410 0010 dd067076 991b5542 a0ec7744 3c42a28f
+0 01 40000764 010 00001001 6dfbfc0a 8882f1e5 daeef1db abccf1dc ede1ed42 c339f162 da3caa09 528e29dd c4c6f12b 165c9828
+0 10 40000770 010 00000111 abccf1dc ede1ed42 c339f162 da3caa09 99a3cc53 6dfbfc0a 8882f1e5 daeef1db
+1 01 4000051c 010 00001000 9c32e473 0101 23c5f36b 1001 a9008b65 1111 8d9b73ab 1110 99bb0ba9 1111 6a2bf7eb 1111 c26c2b88 1010 48c91e63 0111 1c0ac9a4 1111 00000510 0030 692a1035 c92cd6bc 189888ba fa9b797c 5d30cd20 4863ca20 480b50cd b0060593 1f865f3a 5181ef47 03eb923b f29125d9
+0 10 40000128 010 00000011 abccf083 daeef04b abccf048 9ceef049
+0 01 400006c0 000 00000010 abccf1b0 abccf1b0 abccf1b0
+0 01 40000394 010 00001101 db48f095 871e3379 56ae042e d777c7b0 1b8fc924 3362707b da7bd1e5 5043e08a 07b85b98 b154b209 18eab88b dacc0ee2 18ee67d2 5d887cf2
+0 10 4000053c 010 00000001 1c0ac9a4 abc91e63
+0 10 40000131 000 00000001 abccf04c abccf04c
+0 10 40000758 010 00001111 51a7f1d6 da36a465 99a3cc53 6dfbfc0a 8882f1e5 daeef1db abccf1dc ede1ed42 c339f162 da3caa09 ab1d03d0 5c1df1d1 e03ef1c9 daee3d14 4f9f956f da7bc973
+1 01 400005ca 000 00000001 ab470000 0100 ab470000 1000 000005c0 0010 43eb48bc 0f77e582 4aa6677d e5cd66d9
+0 10 400002b2 001 00000111 e066f0ac 8bb96eef 8bb96eef b0349e81 b0349e81 0deef0af 0deef0af e066f0ac
+0 10 4000002c 010 00000011 46ac663a b53a52ae f58de458 422a8394
+0 01 4000020c 000 00001011 3e1db783 3e1db783 3e1db783 3e1db783 b91cc733 b91cc733 b91cc733 b91cc733 04eed9e8 04eed9e8 04eed9e8 04eed9e8
+0 10 40000650 001 00000001 abccf194 abccf194
+1 01 4000012c 010 00001001 3a011779 1100 a9400b72 1111 51a04878 1111 334244f0 0111 caa9117d 1011 7a3d215c 1111 edfe1077 0111 648ee8b1 1111 026bbfcf 1111 83d02326 1111 00000120 0040 4c8f9c8f 9392e751 06c93d20 d4f233ee a803dec0 a8483a9d 2f37f871 fe0fdec2 823073a3 1c962a9b 1ca2a230 248166b9 d254fe8b f1ac1809 5a8326a6 c3e1b476
+1 01 400004c0 000 00000111 9a123c13 0000 9a123c13 0010 9a123c13 0100 9a123c13 1000 0d7d76a3 0001 0d7d76a3 0010 0d7d76a3 0100 0d7d76a3 0000 000004c0 0010 a7eeba26 9fd16336 a495d1a1 273fb6e8
+1 01 400002d3 000 00001101 a8000000 1000 52f507e1 0001 52f507e1 0010 52f507e1 0100 52f507e1 0000 19a47b92 0001 19a47b92 0000 19a47b92 0100 19a47b92 1000 b81b2b29 0000 b81b2b29 0010 b81b2b29 0100 b81b2b29 1000 00000099 0001 000002d0 0020 e5b121ad 9d8990e9 4591edb9 53d30a39 0bd6c083 dc685afe cd721ffc 9e7ec4f1
+1 01 4000003c 001 00001000 b13992c6 0011 b13992c6 1000 5be8efff 0011 5be8efff 1000 1cf081f0 0011 1cf081f0 0100 ccb0be96 0011 ccb0be96 1100 00004b43 0010 00000030 0020 c7da9df6 bcbfb6cc 921fd95b b72c5f1b c2f1e4ef 8a27800a 782513b6 302a3112
+1 01 400001c4 010 00001000 9d006437 1111 8fefca92 0111 640f6294 1011 4eb34c54 0110 551d3c6b 1111 48b6a77e 1011 f4dd8692 1101 3db06897 1010 b3a80204 1101 000001c0 0030 ce68be1a 3991ddb3 68a53118 4ae40ea1 d25915b1 54e62dad c3747a92 ec117e78 0d0dcb5c f65185d9 411157bd c787f150
+1 01 40000420 001 00001000 dbf9185a 0011 dbf9185a 0100 5ddd9d35 0001 5ddd9d35 1100 1b348e4f 0011 1b348e4f 1100 ac4facb2 0011 ac4facb2 0100 000067e1 0011 00000420 0020 2a364162 d1701003 0ec51e30 f1637e7e fd93c57f 695ca4dd 0f9d2d12 55cc7f9b
+1 01 40000680 010 00000011 01d5e0e6 0111 27a5f0bf 1011 4ea5c3c8 0111 2e3b8ea1 1111 00000680 0010 363d2133 d8cbca0c 76d38d77 096cddae
+1 01 40000664 001 00001100 42fb84e1 0001 42fb84e1 0100 a847ab78 0001 a847ab78 0100 5aadc744 0011 5aadc744 0100 f64c2cf4 0001 f64c2cf4 1100 2abaeaca 0001 2abaeaca 1100 69838fce 0011 69838fce 1100 0000feb6 0011 00000660 0020 357d95c1 583a0f14 181e8e56 8204aba6 3a9edc24 93db3c48 5c6c6cf0 c940550e
+0 01 4000015c 010 00000010 daeead57 67ef3e66 da9ca259
+0 01 400002a2 000 00000010 78b50456 78b50456 c7a86e8c
+1 01 4000046c 000 00000101 7075f2f3 0001 7075f2f3 0000 7075f2f3 0100 7075f2f3 0000 00005348 0001 00005348 0010 00000460 0020 0c7080a0 934055a9 4e939ab6 727dc719 30931964 7850f5ff 69a8fdb0 14a6ff87
+0 01 400004dc 010 00001110 daeef137 abccf138 daeef139 abccf13a daeef13b abccf13c 0fa2f173 abccb63e daeef13f abccf140 daeef141 abccf142 daeef143 abccf144 daeef145
+1 01 40000706 000 00000010 91120000 0100 91120000 1000 0000002e 0001 00000700 0010 dd8fe909 7969eaf4 d7056c1a c201169d
+0 10 400001d2 001 00000111 2fb34c1b 551d3c6b 551d3c6b 4823a77e 4823a77e f4dd0f92 f4dd0f92 2fb34c1b
+0 10 40000208 000 00001111 0ce1ec01 0ce1ec01 0ce1ec01 0ce1ec01 3e1db783 3e1db783 3e1db783 3e1db783 ab4ef0d8 ab4ef0d8 ab4ef0d8 ab4ef0d8 8902d5e8 8902d5e8 8902d5e8 8902d5e8
+0 10 40000518 000 00000111 abccf146 abccf146 abccf146 abccf146 da32f173 da32f173 da32f173 da32f173
+1 01 400007d4 010 00000011 a7c605a3 1111 a2de1520 1111 76bc8b94 1111 a7ebd904 1010 000007d0 0020 e8bdeca8 c3d490e5 d1a9a026 f6046a51 15db4e61 65894ea4 4310f7bd 21194f18
+1 01 400000f8 010 00001101 ee9ebd41 1110 8727a015 1100 e46f6e42 1111 8c7aaf16 1111 a4541fa2 1011 2d1a2ffb 0111 9a1c5eb4 1101 c8896fde 1010 ab2cf262 1101 40699e86 1111 f8d4aa2f 1111 6b811826 1111 f2ab8a53 1101 2537859b 1010 000000f0 0040 51397bd2 a62fe109 a812f5e1 5b775f00 c111e48d b258caa3 cb42e8a4 9c3bf725 7eacdfa2 441c11b2 7d1fe982 121c059e 21f645c9 a2e63b8a be3e907f a7c7671a
+0 10 40000494 010 00000001 bf331c82 a3e2bf24
+1 01 400005cc 001 00000110 713f1a2a 0011 713f1a2a 1100 98038724 0010 98038724 1100 73bf9646 0010 73bf9646 0100 00002029 0000 000005c0 0020 43eb48bc 0f77e582 1460ad6f 0e1eefb4 dddb6dd6 be9a0bf8 a63739d5 684c1e00
+0 10 400002fc 000 00000111 da001d94 da001d94 da001d94 da001d94 7a61fdf1 7a61fdf1 7a61fdf1 7a61fdf1
+0 10 400004a8 000 00000001 e387459e e387459e
+1 01 400004dd 000 00000011 cfc42500 0000 cfc42500 0100 cfc42500 1000 000000c7 0000 000004d0 0020 9a15b8f3 5840d821 aefccc3e 1af81c35 f8f5a808 7e21dbca b2bc9e25 2cf27bf8
+1 01 4000078c 010 00000000 be3faca7 1111 00000780 0010 ea49de8f 2f2d91b8 5e77ab43 a44fdceb
+0 01 40000440 001 00000101 d9b7d6be d9b7d6be affe48d4 affe48d4 019c029c 019c029c
+1 01 40000100 010 00001011 1bfa1fbe 1110 eed07381 1011 cbb5dac7 1111 5f69791d 1111 fcd6e356 1011 7e315a1d 0111 abf832f1 1111 56469d0d 1001 c999df31 1011 43e3a999 1110 272349d1 0011 11132520 1001 00000100 0030 da1a907a 9523163f 5099c342 c47d941d 3bd30015 2b14881e 2f2f8b79 2fc1553b e6e69739 0e2fba4c 7f7fb68d fd7f9ec5
+0 10 40000488 010 00000111 abccf122 f058da8c a3e2bf24 bf331c82 4a04f126 c5cb304a abccf120 daeef121
+1 01 4000038c 010 00000011 b462b946 1111 c837fb91 1011 21d7f47d 0011 8995995f 1101 00000380 0020 e838545e f52a2376 549fe88f c28c423b 342fb6a9 5fdbad43 ed739f01 aac58a77
+1 01 40000490 001 00000000 00001661 0011 00000490 0010 da3d06e8 1f2427e2 65be04d7 8fa28837
+0 10 40000326 001 00001111 daeef0c9 abccf0ca abccf0ca daeef0cb daeef0cb abccf0cc abccf0cc 1ff13e86 1ff13e86 baf4fbce baf4fbce 33506e21 33506e21 abccf0c8 abccf0c8 daeef0c9
+1 01 40000766 001 00000100 0d120000 0000 9d630c75 0010 9d630c75 1100 22c2025f 0011 22c2025f 1100 00000760 0010 a8088ad3 575ea8f9 26dc50e1 a93107cb
+1 01 40000603 000 00000000 bb000000 1000 00000600 0010 147900f1 3ccfa770 7f8bec47 bfaf18bf
+0 10 400004f4 001 00000111 0fa2f173 0fa2f173 abccb63e abccb63e daeef13f daeef13f abccf13c abccf13c
+1 01 4000029c 010 00001111 0d6ecc5e 1011 6ecb3888 0110 ea9b40df 1111 569b90a5 1111 da21408f 1110 20863584 1010 6f328888 1111 e288ab86 0101 1e3ff3b2 1100 9902a139 1111 7b3f2e93 1111 88b52857 1001 a47ca5dd 1110 a2a433eb 0111 ffde28af 1010 89a6f8d0 1111 00000290 0050 8f579bd3 67fc323a fa166d23 be1ef248 7c67dbbb 77d42ae3 edaa3c3f 88a18267 589da774 fd2ef4c0 5e3b9b5a 545bfc6f e80cd2f7 42568283 ee426351 d8bc3eb8 6d50eae6 c3bebdbd 0c31a267 564195a4
+0 01 40000048 001 00000011 ccb0be96 ccb0be96 daee4bb4 daee4bb4
+0 10 400000a0 010 00000111 0bd16ace b11b0d42 cd3c2605 daeef098 abccf02c daeef02d abccf02e daeef02f
+0 01 4000028f 000 00000101 3aa052a3 253e6984 253e6984 253e6984 253e6984 dadd6c9f
+0 01 400002e8 010 00001101 80cdf4e2 9942534f 1788929e db697387 7a61fdf1 da001d94 f6b728dc bd205874 abcce7c2 884aea07 abccf0c4 daeef0c5 abccf0c6 daeef0c7
+0 01 400002ba 001 00001100 b0889e86 1e3ff0af 1e3ff0af 9902a139 9902a139 7b3f2e93 7b3f2e93 8823d057 8823d057 a47ca5b3 a47ca5b3 a8a433eb a8a433eb
+0 10 4000002a 001 00001111 422a8394 46ac663a 46ac663a 671a2225 671a2225 ed4ca604 ed4ca604 35dc42b7 35dc42b7 b17292c6 b17292c6 b53a52ae b53a52ae f58de458 f58de458 422a8394
+0 10 400001e0 001 00000001 3d1c688c 3d1c688c
+0 01 40000680 010 00000111 abd5e0e6 27eef0bf aba5c3c8 2e3b8ea1 abf84ea4 48658f72 ab8236ef c254e1d7
+1 01 400003af 000 00001110 e0000000 1000 1f23eddc 0001 1f23eddc 0010 1f23eddc 0000 1f23eddc 1000 3dcc920b 0001 3dcc920b 0010 3dcc920b 0100 3dcc920b 1000 dd360611 0000 dd360611 0010 dd360611 0100 dd360611 1000 0000b2eb 0001 0000b2eb 0000 000003a0 0020 2a5e895b a6d1c620 1503f0e5 20abb380 97a29095 c1acbe29 911f4988 a6263558
+1 01 4000030f 000 00001111 a3000000 1000 1c76d41b 0001 1c76d41b 0000 1c76d41b 0000 1c76d41b 0000 7d99a89b 0001 7d99a89b 0010 7d99a89b 0100 7d99a89b 1000 d7f63832 0000 d7f63832 0010 d7f63832 0100 d7f63832 0000 009dc921 0001 009dc921 0010 009dc921 0100 00000300 0020 8abb187c 2035918c b12813b0 44b7f79b 652de7ab f8f58612 ff99fbb5 0ab7e7f8
+0 01 4000035c 000 00001100 dabb41d7 dabb41d7 dabb41d7 dabb41d7 3ccfcec1 3ccfcec1 3ccfcec1 3ccfcec1 dab2e469 dab2e469 dab2e469 dab2e469 abb3e2da
+0 01 400002ea 001 00001101 80cdf4e2 9942534f 9942534f 1788929e 1788929e db697387 db697387 7a61fdf1 7a61fdf1 da001d94 da001d94 f6b728dc f6b728dc bd205874
+1 01 400006b1 000 00001110 069c6000 0010 069c6000 0000 069c6000 1000 a746ddc9 0001 a746ddc9 0000 a746ddc9 0100 a746ddc9 1000 a13d4654 0001 a13d4654 0010 a13d4654 0100 a13d4654 1000 9fb1c040 0001 9fb1c040 0010 9fb1c040 0100 9fb1c040 1000 000006b0 0010 06729da9 011f6fee 136180a7 284e7c37
+0 01 4000054c 010 00001101 da5624bf 0006f1af 94eecd6c 81e03246 c3821d62 ebaeb845 01028959 6382fa9e b744c8ec 93cf5407 ded6d47b 8fccc827 da891251 5553f613
+1 01 40000168 010 00001111 de2cc109 1100 6b6f9361 0011 0b886ff8 0101 a8340c42 1100 7ebe37d9 1111 970a91bc 1111 19189dc7 1111 cb1550a9 1011 599b8a57 1101 f92f4cab 1011 60f10618 1111 b3409f6d 1111 dd370944 1001 e43bda6b 0111 2b43bd96 1111 2f6a1078 1111 00000160 0050 78ac77c6 ae534de2 ff4224f2 5be9ab82 010698a3 a61a4a4f a60f63c8 0a98f920 7cba9273 2f38fefa d34ceb59 00803439 1d890143 a0424c3a 8ad23488 199245a2 22b16110 d00f258f fcf9bc5b a61fc51d
+0 01 400004d6 000 00001101 daeef135 daeef135 abccf136 abccf136 abccf136 abccf136 cfc4f137 cfc4f137 cfc4f137 cfc4f137 abccf138 abccf138 abccf138 abccf138
+0 10 40000253 000 00000111 7eaaf0f7 d3540cc0 d3540cc0 d3540cc0 d3540cc0 7eaaf0f7 7eaaf0f7 7eaaf0f7
+0 10 400003b0 010 00000001 1f43eddc 3dcc920b
+0 01 400002ff 000 00001001 da001d94 f6b728dc f6b728dc f6b728dc f6b728dc bd205874 bd205874 bd205874 bd205874 abcce7c2
+0 01 40000393 000 00001101 c8ccfb91 db48f47d db48f47d db48f47d db48f47d 8995335f 8995335f 8995335f 8995335f 56ae042e 56ae042e 56ae042e 56ae042e d777c7b0
+1 01 40000301 000 00000011 974ade00 0000 974ade00 0000 974ade00 0000 000000c5 0001 00000300 0010 73b02e69 a49f920c 974e4949 fb8b3b6c
+0 10 40000370 010 00000111 abccf0dc daeef0dd abccf0bf daeef0df 3ccfcec1 dab2e469 abb3e2da 03eeaca6
+1 01 400004cc 000 00000100 5f701ba0 0001 5f701ba0 0010 5f701ba0 0100 5f701ba0 1000 0000007e 0001 000004c0 0020 a7eeba26 9fd16336 02e3bd02 effa55c4 7d2a6adf e3056a44 7443a397 50338eb3
+1 01 400006bd 000 00000110 96ee8e00 0010 96ee8e00 0100 96ee8e00 1000 64948c12 0000 64948c12 0000 64948c12 0100 64948c12 1000 000006b0 0020 06729da9 011f6fee 283352b9 6136bed1 2ec26ab6 5520e2b2 7573e78e 8afc6732
+1 01 400002a8 010 00000001 7ad421c8 0111 2a96eb84 1111 000002a0 0010 7c67dbbb 77d42ae3 42358eb6 da3781fd
+1 01 40000726 001 00000111 f7ee0000 1100 1faa823a 0011 1faa823a 1100 623b242b 0001 623b242b 1100 f2014589 0011 f2014589 1100 00001618 0011 00000720 0020 384b526a b61e61ae 8a0c593e 4b9551a6 9ee6fbf9 cd617b01 88bd83b9 a0ca2a20
+0 10 400003e7 000 00000001 fe1006f0 fe1006f0
+1 01 400002ea 000 00001001 d1ff0000 0100 d1ff0000 1000 e91e6945 0001 e91e6945 0010 e91e6945 0000 e91e6945 1000 3361d07a 0001 3361d07a 0000 3361d07a 0100 3361d07a 1000 000002e0 0020 0bd6c083 dc685afe 520b6e54 dce05fd4 b8dcfc65 f059c2ad 45e3d84c f68ed9ed
+0 10 40000487 000 00001111 daeef121 abccf122 abccf122 abccf122 abccf122 f058da8c f058da8c f058da8c f058da8c abccf120 abccf120 abccf120 abccf120 daeef121 daeef121 daeef121
+1 01 40000514 010 00001010 ed50878b 1111 afa28784 0111 3294bc86 1111 b619ba75 0110 0cbd3ded 1111 19afa273 0111 702e481c 1101 52f6bfed 1001 efe413ce 0100 871ec37d 1011 7cc08f8b 1111 00000510 0030 d78a551e e7ddf4d5 a75dd603 b6eaaa67 f8c3e938 7c56eb50 e5632c4f d3c6e49a c8ec7e79 d2cd84bd 7e7d6a91 0af741a3
+1 01 40000012 000 00000011 642c0000 0100 642c0000 1000 0000ceb0 0001 0000ceb0 0000 00000010 0010 b96d184d ce383a6c 44d5c21c 29c556c0
+1 01 400003d4 010 00001100 4074184c 0111 5a4b4bf8 1110 4f4e8129 0011 7419e67a 1111 7740e6bb 1110 acb24d5e 1111 7d70942e 0011 225c12f0 0111 e218dacf 1010 3f837dc4 1110 59b45390 0111 3d48fe6c 1111 05ed1fe4 0001 000003d0 0040 67824285 60a07723 9ba539da 35a86017 f35521bd e874d1c0 899d7158 cc0cd960 0e8607fa 53cef734 830b9448 a5bcc461 278dd17a 7ef30d2c 1a9c9b80 15a54cff
+0 01 4000077e 001 00001110 da3caa09 528e29dd 528e29dd c4c6f12b c4c6f12b 165c9828 165c9828 be3faca7 be3faca7 5b151585 5b151585 8ad3f15a 8ad3f15a 6cbe8702 6cbe8702
+1 01 40000770 001 00000001 0f0c944a 0010 0f0c944a 1100 00000770 0010 0ebded3a 30c59d5f 0b239b6a 121dbdb6
+1 01 40000066 001 00001101 e1eb0000 1100 7676ee98 0010 7676ee98 1100 d3850ff8 0001 d3850ff8 1100 72ff6544 0010 72ff6544 0100 7e510736 0011 7e510736 0000 c761dd1c 0011 c761dd1c 0000 de314df7 0011 de314df7 1100 0000dff2 0001 00000060 0030 89e251e3 5c16db75 e3578460 d513f287 00d40800 54fb290f e0f92efc 730f23ef 83c6855a a1bceffd 9dc2598f e1c49ca3
+0 10 4000052c 010 00001111 702e0b1c 522bf7ed c2e42b04 87c9c37d 7cc08f8b abccf140 daeef141 abccf142 daeef143 abccf144 ed50878b aba28784 3294bc86 2319ba6b 0cbd3ded 8dafa273
+1 01 400005da 001 00000100 9fc90000 1100 ad61707f 0010 ad61707f 1100 f1b21679 0011 f1b21679 1000 000005d0 0020 dddb6dd6 be9a0bf8 4c671ce4 03241a3e c1c0edba c512bf60 8d3ebedb 42e50ada
+0 01 40000048 001 00000100 ccb0be96 ccb0be96 daee4bb4 daee4bb4 d9ccfbcd
+1 01 4000041d 000 00001010 993d9f00 0010 993d9f00 0000 993d9f00 1000 fdda7a25 0000 fdda7a25 0010 fdda7a25 0100 fdda7a25 1000 f3311d81 0001 f3311d81 0010 f3311d81 0100 f3311d81 0000 00000410 0020 dd067076 991b5542 cc6fb15e 848c305a c18129f4 9c166f31 24eb3a3a 6ebf3961
+1 01 40000038 000 00000000 00000005 0001 00000030 0010 c7da9df6 bcbfb6cc 53b44621 57fb3f40
+1 01 400002d4 010 00000010 515ebe13 0110 a3e024e9 1111 beade127 0111 000002d0 0010 3240d474 bac08316 4b4708b5 dcb882a4
+0 01 40000118 010 00001000 abf832f1 56699e0d c9d4df31 43e3a926 f2ab49d1 11018520 a9400b72 51a04878 ab4244f0
+1 01 40000148 010 00000110 682be9c6 1111 b4cc35e6 1011 0518fd6b 1111 a5dc2389 1101 2f21d25e 1101 ced50704 1111 b59fc699 1011 00000140 0030 823073a3 1c962a9b 487239a5 16461792 995072d2 45b12569 c5237352 a821bbe5 b7f4eb46 e06ad81c 975202c9 3623a3f5
+1 01 400003ff 000 00001010 3f000000 1000 d38b8490 0000 d38b8490 0010 d38b8490 0100 d38b8490 1000 ff21f2cb 0001 ff21f2cb 0010 ff21f2cb 0100 ff21f2cb 1000 00009018 0001 00009018 0010 000003f0 0020 0e8607fa 53cef734 aec4f524 ba5bca12 fbb99a88 12cabd76 329e965e bd25a735
+1 01 400003fb 000 00001001 1d000000 0000 1d907757 0001 1d907757 0010 1d907757 0100 1d907757 1000 56921fdf 0001 56921fdf 0000 56921fdf 0100 56921fdf 1000 000000e3 0001 000003f0 0020 0e8607fa 53cef734 abf656f0 447489bc e591a277 4e4139fe a50fb5ea 75c8c2ff
+0 01 400002f8 000 00001000 7a61fdf1 7a61fdf1 7a61fdf1 7a61fdf1 da001d94 da001d94 da001d94 da001d94 f6b728dc
+1 01 4000043a 001 00001000 4ca90000 1100 e623aa62 0011 e623aa62 0100 f6a079dc 0000 f6a079dc 1100 11715911 0010 11715911 1100 a786cda3 0011 a786cda3 1100 00000430 0020 fd93c57f 695ca4dd 3d2c754a 82cae1c3 f6d1ebdc d8df93f5 adf36a38 061b5f81
+0 10 4000029a 001 00001111 2635bac6 0db8cc5e 0db8cc5e 75ba0b8b 75ba0b8b 01e7bda1 01e7bda1 811366f9 811366f9 3aa052a3 3aa052a3 253e6984 253e6984 dadd6c9f dadd6c9f 2635bac6
+1 01 400003e4 001 00001111 79da0590 0001 79da0590 0100 97d03d2b 0011 97d03d2b 1100 e33f2c7a 0011 e33f2c7a 1000 e2604158 0010 e2604158 0100 f5bd2fe8 0011 f5bd2fe8 1100 09e740c1 0011 09e740c1 1100 c83e17b7 0011 c83e17b7 1100 2f713355 0011 2f713355 0100 000003e0 0030 1d6dbb20 abb1f07e 321f649c d779b676 ce86324e 0fb288b3 211cf0c6 635847c1 d291d6e7 e0fc9c0b e306669c aad743f8
+1 01 400006c2 001 00000001 f5700000 1100 0000f479 0011 000006c0 0010 2166339b 5a8d0314 f7a0ce35 d8621099
+0 10 400007c6 001 00001111 daeef144 65d89605 65d89605 9f352d74 9f352d74 c8ccf1f4 c8ccf1f4 a7c605a3 a7c605a3 a2de1520 a2de1520 76bc8b94 76bc8b94 abccf2a1 abccf2a1 daeef144
+0 10 400002f0 010 00000001 3361927a db697387
+0 10 400006e4 001 00001111 daeef1b9 daeef1b9 abccf1ba abccf1ba daeef1bb daeef1bb abccf1bc abccf1bc 20eef1bd 20eef1bd abcc49ca abcc49ca daeef1bf daeef1bf abccf1b8 abccf1b8
+0 01 4000041e 000 00001000 99309f0d 99309f0d fdda7a5a fdda7a5a fdda7a5a fdda7a5a 5d311d81 5d311d81 5d311d81
+1 01 40000010 010 00001101 436ab23a 1101 c8958cd0 1011 c9fff78c 1011 14318b77 1011 18a0f101 1111 93c72516 1001 de237c51 1111 2ff905a1 1100 0262972a 1111 6c9eee27 1111 530cce41 0110 874a1cb0 0010 2ee242ee 1111 7cb0d93f 1111 00000010 0040 9f811484 8137bef5 3dd9d5f2 785e4433 b33025aa 00a623c8 60ac6e74 5a06e9e3 f14a3e6d 8c6d891f 21a2af01 0bb22bf3 25d2ff6b 9c7a03cd 7d7798aa 13d9a9ac
+1 01 40000540 010 00000001 130d90de 1111 6d59a830 1111 00000540 0010 5af644d7 76064c58 c3be2a3c efd502ee
+0 10 40000106 001 00000001 ee7a7381 ee7a7381
+1 01 40000470 010 00000110 1eb61562 1101 d7f96efa 1111 5f3130e9 1011 f0a9ac2a 1011 b25dfa1f 1111 cadbc718 0111 2e23ce04 1101 00000470 0020 b8d0e81f 9bda9e76 a6ccf891 962f9998 57a663d0 e9928ad3 6e808daa f7f938b3
+0 01 400003f8 001 00001110 09e740c1 09e740c1 c83e17b7 c83e17b7 56713355 56713355 ff21f2e3 ff21f2e3 abcc9018 abcc9018 daee1692 daee1692 ab3d91f9 ab3d91f9 d25df105
+0 01 4000032b 000 00001100 abccf0ca daeef0cb daeef0cb daeef0cb daeef0cb abccf0cc abccf0cc abccf0cc abccf0cc 1ff13e86 1ff13e86 1ff13e86 1ff13e86
+1 01 40000558 000 00000000 0000000b 0001 00000550 0010 02d7a8ba f907f04a e1068cde 7782e2f3
+1 01 40000364 010 00001011 a090c7fd 1011 0c49a51f 1001 37653434 0101 4ee9af30 1111 85b96191 1111 87414fc1 0111 329ac2ce 0000 cb3e761b 0110 1550eba8 1000 a0d92285 0110 98dec059 1111 3b4f9290 1111 00000360 0040 51fd8133 a982a0ad 3a5b832a e5901d02 703967d6 c38eed3c 09af6691 fd1b79fc 6b4d9ed3 b7858d34 ebc42cb5 e4e89eb5 cafed705 935507a7 f1086e76 60b9bb72
+1 01 4000019c 001 00000111 4a443ffd 0011 4a443ffd 0100 b3c79902 0011 b3c79902 1000 ee579a53 0010 ee579a53 1000 407250df 0011 407250df 1000 00000190 0020 1d890143 a0424c3a 0ffb7132 87f2ecc8 3e0b6ab5 8a5a5bc5 ccc03e69 c346ea84
+0 01 40000288 010 00000010 811366f9 3aa052a3 253e6984
+1 01 400000d4 010 00000101 37a6ba32 1110 61feac02 1111 29d65819 1010 36bfb337 0001 6bfbb42e 1110 58506083 0011 000000d0 0020 6c83afd0 a28653bc dd35d221 86adb119 8dfbfeb1 034fdc53 a8b0837b 2e9f6e19
+0 01 40000080 010 00000001 abccf0f2 cadb53b4
+0 01 400006cb 000 00001011 abccf1b2 dab7f1b3 dab7f1b3 dab7f1b3 dab7f1b3 abcc00b4 abcc00b4 abcc00b4 abcc00b4 daeef1b5 daeef1b5 daeef1b5
+0 10 40000350 001 00000001 abccf0d4 abccf0d4
+0 01 400000de 000 00000011 291958de 291958de abccf037 abccf037
+1 01 40000798 010 00001110 d9209cad 1001 1b886cb8 1101 9b7e6277 0001 ea959fc4 0110 c07b2eb4 1011 21e8f7a6 1001 9e4989a0 1010 1ed5556b 1111 8581f913 1111 b216ef44 1111 916fb931 1011 c9e209b5 0101 090ec9ec 1100 a626e47f 1010 67ba97b2 0111 00000790 0050 44e46557 ab2526e0 42646427 d45e0e9d 419d0dda f19e96ef efb5deb9 27260bb8 1fe686c2 2f0f13a6 1cab9d48 688f7b4d aa82ea0c 8ba8d0cb 1135e44a 2e5cc3ec 6a7385f5 3f24dd68 4bc7b8ef 24c7dd0f
+0 01 400001e0 010 00001001 3d1c688c b3a8f004 44cc832a 38ee58fb 72cc6593 7d7678c4 c68cbea9 eef3f096 ab4ef0d8 8902d5e8
+0 01 40000742 000 00001011 ab1d03d0 ab1d03d0 5c1df1d1 5c1df1d1 5c1df1d1 5c1df1d1 e03ef1c9 e03ef1c9 e03ef1c9 e03ef1c9 daee3d14 daee3d14
+0 10 400007dc 000 00000011 76bc8b94 76bc8b94 76bc8b94 76bc8b94
+1 01 40000578 010 00000000 6fa173b1 1101 00000570 0010 bc4fb9f4 dc622a7d 1b8307ce e1b37b27
+0 10 40000554 010 00000111 94eecd6c 81e0320b c3821d62 130d90de 6d59a830 39f1f1a2 da5624bf 0006f1af
+1 01 400002fb 000 00001111 29000000 1000 086b00fa 0001 086b00fa 0010 086b00fa 0100 086b00fa 0000 7907d00e 0001 7907d00e 0010 7907d00e 0100 7907d00e 1000 71727bf0 0001 71727bf0 0000 71727bf0 0100 71727bf0 1000 008c98a6 0001 008c98a6 0010 008c98a6 0000 000002f0 0020 b8dcfc65 f059c2ad 2d3ac6d4 3d8a9d7b 441b2c9a ac6514e4 ffa856d7 4e5bb832
+1 01 40000040 010 00000101 88cd2453 1001 a87f577d 1111 1b301e4b 0111 0fe591f9 0110 f55e66ad 0110 54e7aa64 0111 00000040 0020 355cc4d5 4c93c4e8 ddbc9839 42482ace 10cad21c 559238ec 6183ae9e 9f4f70dc
+0 01 40000352 000 00001000 abccf0d4 abccf0d4 60eef0d5 60eef0d5 60eef0d5 60eef0d5 ab01918d ab01918d ab01918d
+0 01 4000049c 010 00001001 c5cb304a 30dff120 702a65a5 e387459e daee972b abccf12c daeef12d abccf12e daeef12f 9a123c30
+0 10 400001a8 010 00000001 40cc50df daeef06b
+1 01 40000764 001 00000110 ab3eac23 0011 ab3eac23 1000 95e1506c 0011 95e1506c 1100 2d4aff6a 0011 2d4aff6a 0100 0000f761 0010 00000760 0020 99c05020 6b01b3c1 423c70c8 f3b1a6d8 0cea2b92 1f65310f aaadb1fd f69a9824
+1 01 400001de 001 00000101 b55d0000 1100 5113e3ec 0011 5113e3ec 1100 15d048c2 0001 15d048c2 1100 0000285a 0001 000001d0 0020 d25915b1 54e62dad ac461914 f39a3277 59007680 b6644cd3 08c15cb9 deeb5684
+1 01 40000264 010 00001011 f585e053 1111 9bb5548c 1010 ccc67311 1111 6c7b901a 1111 6c5ff469 1110 146e0ca0 1001 2d597225 1111 e647cff1 1100 49b291dc 0011 be7d07e9 1100 1a337c8f 0111 6b58acab 1010 00000260 0040 5f3d0ef4 b1a4bbb2 6330a30d 4beeda58 0eb013af 65751e71 ff01232d 808fc105 1d746aba 5e6c3b09 d133eacc b586ab7e 401aecbd ee3b5cc1 616fa932 7d590705
+0 10 400007d2 000 00000011 c8ba97b2 c8ba97b2 c8ba97b2 c8ba97b2
+0 10 40000542 000 00000011 130d90de 130d90de 130d90de 130d90de
+0 01 4000067e 001 00001110 daeefeb6 abd5e0e6 abd5e0e6 27eef0bf 27eef0bf aba5c3c8 aba5c3c8 2e3b8ea1 2e3b8ea1 abf84ea4 abf84ea4 48658f72 48658f72 ab8236ef ab8236ef
+1 01 40000282 001 00000111 ad790000 1000 5c3996f6 0001 5c3996f6 0100 255fd74e 0010 255fd74e 1000 c948c9b6 0011 c948c9b6 0100 000096aa 0011 00000280 0020 83cebaba ec249b3c 39d036f4 a0a2e742 1f7ec931 bc08a8fd dd3ef863 d1a6c385
+0 10 400007c9 000 00001111 090e9605 090e9605 090e9605 a635e474 a635e474 a635e474 a635e474 91ccb931 91ccb931 91ccb931 91ccb931 dae2f1b5 dae2f1b5 dae2f1b5 dae2f1b5 090e9605
+0 10 4000005d 000 00001111 dae0d617 dae0d617 dae0d617 d95e66cd d95e66cd d95e66cd d95e66cd cde7aa64 cde7aa64 cde7aa64 cde7aa64 0dd265a2 0dd265a2 0dd265a2 0dd265a2 dae0d617
+1 01 40000276 001 00001110 14330000 1100 d770c82f 0011 d770c82f 1100 2b973eeb 0011 2b973eeb 1100 31b51488 0010 31b51488 1100 c57c6ebe 0011 c57c6ebe 0000 a272f07b 0011 a272f07b 0100 475a4e3b 0011 475a4e3b 1100 0b3672eb 0011 0b3672eb 1100 00000270 0030 9f584329 99d70768 682fc73a 470a5ee9 5944bbd0 1e892413 2b4732c1 9a0903c3 7f2224e5 80ecbafc 4fcf39f5 156510ee
+1 01 40000757 000 00000010 45000000 1000 0000a863 0001 0000a863 0010 00000750 0010 2bf50b7b b8cb9710 f9cf4356 69d468bd
+1 01 400005b0 010 00001101 ee231d9c 1111 8a152798 1111 f5e73372 1111 3036eedf 1100 0349f669 1011 732124bf 1111 4be790c9 1101 018fb455 1111 b663dae3 1101 7e58bbb2 0100 c645ca4f 1101 06e7ee87 1111 66139a20 1001 406ce493 0011 000005b0 0040 19996e01 c676839e cb7cad26 e375ca97 fd11d6a1 ba19d728 1e230078 ad48deba ce18e4aa 575ab346 0bbc9152 2190d906 c19767a3 8860fa40 0d468e02 53bc52a5
+0 01 40000588 010 00001110 e5251662 daeef162 03ab818b daeef165 abccf166 daeef167 abccf168 daeef169 abccf16a daeef16b ee231d9c 8a152798 f5e73372 3036f16f 03ccf669
+1 01 40000200 010 00001100 f04fd32c 1111 bf3e293c 1101 33bf911f 0011 fea5468e 1101 eaabcf58 0101 b0bdaba7 0111 ce6484be 1111 9fd821fd 1111 a56dda0a 1111 552a91f1 1011 a30b4b89 1111 a174ee2a 1110 33b102db 1101 00000200 0040 eef71067 1d0452ce 191ffb44 d7516ac1 d062be76 5d46d40e 7d100c5c 5fe6090f fc39704b 7e5dd5cd 1e96cc0d 296cac59 5136dc26 4ebee95f be6282ee 3ac5b55b
+0 10 400003d0 010 00001111 abccf0f4 da74184c 5a4b4bf6 daee8129 7419e67a 77dae690 97d03d2b e3702c7a 136041f0 f5bd2fe8 09e740c1 c83e17b7 dacc0ee2 18ee67d2 5d887cf2 daeef0f3
+1 01 40000218 010 00001110 fc899bf2 1111 b5ab2d3d 1111 0d755754 1110 e3c49b6a 1111 c0014e6d 0111 820da637 1110 6b949bbd 1110 7517b7f2 1111 3efe8bb2 1011 ab94b600 1101 7081834a 1111 03852b3b 1111 3abe083c 1111 3f8aefb3 0100 b7ae69d4 0100 00000210 0050 d062be76 5d46d40e 3c3662d7 2a04eaea 47dcf6e2 cc81d128 becd39a1 73e5e010 7684bfe7 aa660dca e1bea1a8 07ce5ec1 03d24496 63cb14b6 d06c786b 09750b6a 03de1820 5dbb9ac7 f0409f97 d1fdf6b5
+1 01 40000201 000 00000111 b10d4f00 0010 b10d4f00 0100 b10d4f00 0000 5ff8e778 0001 5ff8e778 0010 5ff8e778 0100 5ff8e778 1000 000000c2 0001 00000200 0010 63fc0b0c 37e96fa5 3f14c1bd 08771bf4
+1 01 400005a0 001 00000000 0000529d 0001 000005a0 0010 e2575d5f 037413f5 f21d2027 cbc9dda4
+0 01 4000039c 001 00000001 56ae042e 56ae042e
+1 01 4000062e 001 00000111 1df90000 1100 df541227 0011 df541227 1100 68704562 0011 68704562 1100 6ee71589 0011 6ee71589 0000 00003b42 0010 00000620 0020 4d827257 008da3ae 18d4cb65 5cf773c8 ffaa2896 e7242100 d5c98227 c0a9cbd9
+0 10 40000622 001 00000111 3b371fe2 efc8a02e efc8a02e abccaae0 abccaae0 1df9f18b 1df9f18b 3b371fe2
+1 01 400001e0 010 00001000 d1a592c9 1111 e9cb88ad 0001 d206faf3 1111 408122e3 1100 05b73443 1111 74565273 1111 a6fde288 0111 46d00856 1011 7cd52123 1111 000001e0 0030 3ac6af0f 8fde8747 1d981207 31784722 c979b959 62b99f49 c60fe622 eb542714 382984bd 35fb1c93 e2ec807a 920df8ee
+1 01 4000010c 001 00000101 31ebd5c9 0011 31ebd5c9 0100 56e576ed 0001 56e576ed 1000 6100e0be 0001 6100e0be 0000 00000100 0020 da1a907a 9523163f 0b9b9ed5 88a0113c 95e7076b e0cbc54b 21a2414d f037266e
+1 01 4000025f 000 00000100 cd000000 0000 b65e5a67 0001 b65e5a67 0010 b65e5a67 0000 b65e5a67 0000 00000250 0020 03de1820 5dbb9ac7 f0409f97 d1fdf6b5 94007bb2 d8131053 e535c668 3737bfcd
+0 01 400002fc 001 00001000 da6b00fa da6b00fa 7907d00e 7907d00e 717258f0 717258f0 abcc98a6 abcc98a6 a34aea07
+0 01 40000169 000 00000011 de2c0331 de2c0331 de2c0331 9b6b9361
+0 10 400005c4 010 00001111 732124bf 4be7f1c9 018fb455 b66387e3 da589643 c645f14f 06e7ee87 66cc1620 daeee493 abccf17a b5dbf190 6fcc386d 2af0bb25 abccf1e8 daeef17f 03ccf669
+0 01 400005e4 010 00001001 daeee493 abccf17a b5dbf190 6fcc386d 2af0bb25 abccf1e8 daeef17f bbccf180 daeef181 707af182
+1 01 400001e2 000 00001101 bca30000 0100 bca30000 0000 73fe2b44 0001 73fe2b44 0000 73fe2b44 0100 73fe2b44 1000 d345e593 0000 d345e593 0010 d345e593 0100 d345e593 1000 96e7c78c 0001 96e7c78c 0010 96e7c78c 0100 96e7c78c 1000 000001e0 0010 753ed48d 3c90786e a2e710ba 1ef87504
+1 01 40000514 001 00000010 1cadf866 0011 1cadf866 1100 0000fecb 0011 00000510 0010 dbd9aaab 183817f4 3a477035 1776152d
+0 10 40000097 000 00000111 daeef091 18189a0c 18189a0c 18189a0c 18189a0c daeef091 daeef091 daeef091
+0 10 40000754 010 00000001 457bc973 4f9f956f
+1 01 40000340 001 00001010 443631de 0010 443631de 0100 ef318350 0001 ef318350 1100 7463220f 0010 7463220f 1000 19e8741e 0011 19e8741e 0100 5d1e932a 0011 5d1e932a 1000 0000475b 0011 00000340 0020 6de0dd9c fa6b64f4 dee46c5f 28257df7 a3210efb be0b0e4d e88597a8 17addf42
+0 10 40000456 001 00000001 7ef46a68 7ef46a68
+0 01 40000460 001 00001100 ab18a6fa ab18a6fa e5f5124c e5f5124c 88b21ec8 88b21ec8 6375f1f3 6375f1f3 1eb65362 1eb65362 d7f96efa d7f96efa 5fcc30e9
+0 10 4000054e 000 00000011 da5624bf da5624bf da5624bf da5624bf
+0 01 40000608 001 00001101 707af182 707af182 dada4bb1 dada4bb1 65ccf117 65ccf117 afee04ed afee04ed 48dcf145 48dcf145 da311ca8 da311ca8 3b371fe2 3b371fe2
+0 01 4000022c 000 00000100 820da68b 820da68b 820da68b 820da68b 6b949bdb
+0 01 40000064 000 00000100 e1ebf0ba e1ebf0ba e1ebf0ba e1ebf0ba 7676ee1a
+0 01 400000f0 010 00001110 abccf03c daeef03d ee9ebd3e 8727f03f 1bfa1f42 ee7a7381 cbb5dac7 5febd5c9 561ce3ed c8315abe abf832f1 56699e0d c9d4df31 43e3a926 f2ab49d1
+0 10 400001c8 010 00000001 abefca92 64ee6294
+0 10 40000372 001 00000111 4ee9af30 85b96191 85b96191 ab414fc1 ab414fc1 daeef0df daeef0df 4ee9af30
+0 01 400007f2 000 00001000 abcc48fc abcc48fc daeef106 daeef106 daeef106 daeef106 abccf1fe abccf1fe abccf1fe
+0 01 40000020 010 00000100 18a0f101 938de416 de237c51 2ff9663a 0262972a
+0 10 40000424 000 00001111 5d311d81 5d311d81 5d311d81 5d311d81 1b348e4f 1b348e4f 1b348e4f 1b348e4f 9d4facb2 9d4facb2 9d4facb2 9d4facb2 fdda7a5a fdda7a5a fdda7a5a fdda7a5a
+0 01 40000302 001 00001001 7907d00e 717258f0 717258f0 abcc98a6 abcc98a6 a34aea07 a34aea07 abccf01b abccf01b 7d99a89b
+1 01 40000454 001 00001000 80b7818c 0010 80b7818c 1000 7b688124 0010 7b688124 1000 7e25d4cd 0010 7e25d4cd 0100 c37a69de 0010 c37a69de 1100 00007631 0010 00000450 0020 d008d1ba 9e40eee2 84ecaa5d 90755e3d f80ae080 d8a919b3 5a3b3395 f7034f8b
+1 01 400001cc 010 00001111 6c65412c 1111 f44a639b 1101 7b2eaf93 1111 ffd5aaad 0110 37960421 1111 81eadebb 1111 b0b0636a 1111 4d4d7aba 0100 15a92fe9 1100 c7f78ac2 1011 216e7f83 1111 65695490 1101 afcca15a 1101 40920634 1111 5dff2870 1001 1bcee359 1111 000001c0 0050 ce68be1a 3991ddb3 97de60d1 5926be96 9e484bdc 31030550 0af8529d f8ec6d8e b1be81ce c8f84ca1 d5667730 64026390 b11b503d 11446635 b47abf8b 03fee9cc ff282dc7 14d7fb29 d3985bc8 d1673177
+0 01 40000080 010 00000101 abccf0f2 cadb53b4 a7cc4740 fb2e4b23 18189a0c daeef091
+0 01 40000458 010 00001110 7b3b8108 a325d417 c37a69fa e5f5764c 88b21ec8 6375f1f3 1eb65362 d7f96efa 5fcc30e9 f0eeac2a b25dfa1f dadbc718 2e23f104 f058da8c a3e21661
+1 01 4000069e 001 00000001 b6670000 1100 0000e547 0001 00000690 0020 a643082c da00bcbf 08e6f013 54ac82b7 3c78ccaa 084572b0 6468fcc9 3593d62a
+0 10 40000580 001 00000001 5553f613 5553f613
+0 10 400005cc 001 00000111 018fb455 018fb455 03ccf669 03ccf669 732124bf 732124bf 4be7f1c9 4be7f1c9
+1 01 400001ba 001 00000100 6a580000 1100 fcd0b16e 0011 fcd0b16e 1100 f5f933d7 0011 f5f933d7 0100 000001b0 0020 0a1e2f87 c1313cdc 3f2038ae c614341f f1fb373e 62bcc94b 711e712c 92d8a2f7
+1 01 4000001c 010 00001111 38a0193e 0010 75baa2d0 0011 735b7a27 0110 6f459643 1000 ae5d63d6 1111 1ebbcfdd 0111 c2cc66ff 0100 ba2925a1 1110 1ddf01f6 1111 a81eb904 1111 9e8269d2 1011 653541f4 1111 515e7719 1011 3443f4b8 1111 31806d37 1111 37edd031 1111 00000010 0050 9f811484 8137bef5 bca6a006 09882741 17f3b3d6 c0f9e84a 624835e2 6096eca6 0026acff 45e72cbe 38c28000 d64dbb4b 070e90ab 245af854 8b346b74 97e48252 57df5929 64547be4 2dfaa0ec 98349824
+0 01 400002e4 010 00000111 dee1f048 d1fff4e2 e9426945 3361927a db697387 2961fdf1 da6b00fa 7907d00e
+1 01 40000070 010 00001101 40a38194 1111 11e0fd5a 1101 4aee95d8 1111 61381483 1110 8b72ba02 1010 227404be 1101 617dce66 0110 f18f386f 1100 c48e5f60 1111 44f6bce5 1111 4e635f5b 0110 e22acd4b 0011 8c1bb334 1111 046e9e20 1111 00000070 0040 260178a4 9dff0b95 41af042b 7c70378f eb8fee94 af1cb100 43057332 1adf0bbd 6fa71836 6fa6d8d4 c719b615 68210383 e5ce1483 edbaf185 3366acf0 6d7df3d6
+1 01 40000055 000 00001011 1ffa9b00 0000 1ffa9b00 0000 1ffa9b00 1000 59e34ad0 0000 59e34ad0 0010 59e34ad0 0100 59e34ad0 1000 fbe5effc 0001 fbe5effc 0010 fbe5effc 0000 fbe5effc 1000 00000058 0001 00000050 0020 9ea0f976 8da8c88c 3140194f 1a9f8288 3dd0b5a8 af7e5134 a166660c 37b52ea4
+0 01 40000414 001 00001111 d25df105 d25df105 27edf194 27edf194 99309f0d 99309f0d fdda7a5a fdda7a5a 5d311d81 5d311d81 1b348e4f 1b348e4f 9d4facb2 9d4facb2 9eb167e1 9eb167e1
+0 10 400002b2 001 00001111 206635ac 6f328888 6f328888 b0889e86 b0889e86 1e3ff0af 1e3ff0af 78cb3856 78cb3856 ea9b40df ea9b40df 56d421c8 56d421c8 2a96eb84 2a96eb84 206635ac
+0 01 4000060d 000 00001000 dada4bb1 dada4bb1 dada4bb1 65ccf117 65ccf117 65ccf117 65ccf117 afee04ed afee04ed
+0 10 400002b8 000 00000111 b0889e86 b0889e86 b0889e86 b0889e86 1e3ff0af 1e3ff0af 1e3ff0af 1e3ff0af
+0 01 400006e4 000 00001111 daeef1b9 daeef1b9 daeef1b9 daeef1b9 abccf1ba abccf1ba abccf1ba abccf1ba daeef1bb daeef1bb daeef1bb daeef1bb abccf1bc abccf1bc abccf1bc abccf1bc
+0 01 4000048e 001 00000111 f058da8c a3e21661 a3e21661 bf331c82 bf331c82 4a04f126 4a04f126 c5cb304a
+0 10 4000009c 010 00000111 160ccd4b 8bccbaf2 227453be a77dce40 f18f4b23 c48e5f60 44f6bce5 2b635f26
+0 01 4000065e 001 00000111 da134579 fe297dbd fe297dbd dafbf1e1 dafbf1e1 ab471b78 ab471b78 daadc744
+0 10 400001f0 000 00000111 c7b78ac2 c7b78ac2 c7b78ac2 c7b78ac2 216e7f83 216e7f83 216e7f83 216e7f83
+1 01 40000180 001 00001111 6f78a7df 0011 6f78a7df 1100 892ec7d1 0001 892ec7d1 1000 ba0e781c 0011 ba0e781c 1000 1c638a5c 0011 1c638a5c 0100 d278eb63 0011 d278eb63 1100 3f011c3c 0011 3f011c3c 1100 1b2e288b 0011 1b2e288b 1100 17fd154a 0011 17fd154a 1100 00000180 0020 83b6dc7f 29a9aeb0 f3798bbc 48029d87 b3526d88 57273c9f af7e6e9f e099eb73
+1 01 40000372 000 00000010 89df0000 0100 89df0000 1000 00000031 0001 00000370 0010 8a574485 7518fc90 e30467ad c18422f6
+1 01 400001f0 010 00001100 19f3673a 1111 97654069 1110 1236834f 1101 dc913950 1111 27e74909 1110 e2065141 1111 4f23042f 1111 850ba196 0111 b9b4a36a 0111 4a3fd261 1110 3bb79fa1 1001 0f0af037 1110 bfacc00f 1001 000001f0 0040 e2c1b0a4 d79e1249 209dc931 d5851c75 f38c570a a81b5735 33803666 a1f5f681 05254c3a 9156bb2d 07982a69 312498b6 d9053ac5 e942efa4 354898d9 11f46df0
+1 01 40000150 010 00001000 bda0928d 1111 c62889a3 1111 5e3fdbb4 0110 32ea33b9 0111 6054148a 1111 365161e1 1111 a30efd0b 1111 a51a34ba 0110 f981df4c 1100 00000150 0030 bea007bc ea09db64 4c2a4796 d3289c08 577b82ff 214dfacb a3dc7e55 f6931038 3f271586 a9bd35d4 d75d2141 84d6433a
+0 10 40000491 000 00001111 a3e21661 a3e21661 a3e21661 bf331c82 bf331c82 bf331c82 bf331c82 4a04f126 4a04f126 4a04f126 4a04f126 c5cb304a c5cb304a c5cb304a c5cb304a a3e21661
+0 01 400007ce 001 00001101 a635e474 c8ba97b2 c8ba97b2 a7c605a3 a7c605a3 a2de1520 a2de1520 76bc8b94 76bc8b94 a7ccd9f8 a7ccd9f8 2aeef1f9 2aeef1f9 abb4d1fa
+0 10 40000196 000 00001111 3f011c3c 3f011c3c 1b2e288b 1b2e288b 1b2e288b 1b2e288b 17fd154a 17fd154a 17fd154a 17fd154a d278eb63 d278eb63 d278eb63 d278eb63 3f011c3c 3f011c3c
+1 01 40000728 010 00001010 acc211fd 1010 ad527453 1111 b3673838 1111 f51e3bf9 0101 cd4d1fff 1111 a259de59 1110 c01b04a4 1110 e6c5908f 1111 20c3227e 1111 39919404 1110 b4ad9842 1110 00000720 0040 384b526a b61e61ae 6a991adb 0ddfd9ea 7a085a1f e587acd9 1fac3020 4e0c31e6 7703f4a2 d9be9ad8 f480b159 bd18f437 6e3ceabc 21c82286 67dd493e 068194d5
+0 01 400002eb 000 00000011 d1fff4e2 e9426945 e9426945 e9426945
+1 01 40000084 010 00000110 d30b8b6f 1011 6f08888e 0111 e1254887 0011 a545efa0 1101 930ba1b4 1100 c915a8a0 0111 818fb46a 1010 00000080 0020 5f1a46d3 f311e48d 4998f010 5eb4e137 2adba054 e3408b74 532a242a c43be245
+0 01 400006e4 010 00000110 daeef1b9 abccf1ba daeef1bb abccf1bc 20eef1bd abcc49ca daeef1bf
+0 01 400006b6 000 00000010 a746f1c9 a746f1c9 a13d4654
+0 10 40000088 001 00000011 a708888e a708888e f18f4887 f18f4887
+1 01 40000402 000 00000011 dc940000 0100 dc940000 1000 00005e7b 0000 00005e7b 0010 00000400 0010 b2504a9f dad0ab8b f076d963 6627a2df
+0 10 40000250 010 00000111 7eaef0f7 d3540cc0 ef009269 d42388dc 7081834a 03852b3b 3abe083c f98a093d
+0 10 40000268 001 00000111 9b36549a 9b36549a ccc67311 ccc67311 82335a67 82335a67 f585e053 f585e053
+0 01 4000037c 010 00000000 daeef0df
+1 01 4000030d 000 00000001 0091f100 0000 0091f100 0100 00000300 0010 441b2c9a ac6514e4 fd53fd27 708c9fc0
+1 01 40000448 000 00000000 00000072 0000 00000440 0010 f6d1ebdc d8df93f5 adf36a38 061b5f81
+1 01 4000021a 001 00000100 fe0e0000 1100 117a8f1f 0001 117a8f1f 1100 f932c012 0000 f932c012 1100 00000210 0020 05254c3a 9156bb2d 3adcf0ad 08419ece 9abd66d5 af02a506 45fe34b4 c5538d35
+1 01 40000754 010 00000010 a4300b87 1110 253af194 1111 a35fac71 1101 00000750 0010 e481403c 4ef54155 967a6a6a 6c4c7e04
+0 01 400002d0 000 00001010 a8a433eb a8a433eb a8a433eb a8a433eb ff5ebee1 ff5ebee1 ff5ebee1 ff5ebee1 a3e024e9 a3e024e9 a3e024e9
+0 10 400001fc 000 00000011 dc913950 dc913950 dc913950 dc913950
+0 10 400002d4 010 00000011 ff5ebee1 a3e024e9 b8ade127 a8a433eb
+1 01 40000328 010 00001011 015c7ffe 0111 dfb8f047 1101 825924f9 1111 59f3f56d 1110 e0cb8763 1111 73f5ec3c 1101 0f829655 1111 86194c89 1100 ae69a195 0111 a271f776 1010 f6b6539a 0111 4bbc5f43 1101 00000320 0040 5db89481 b424b821 789a6c90 557501a4 ead9893f f6add906 f951f8da e7ac703f 3bd1b1a5 4d7fe0d3 53e495f3 2e244732 35acbafa 199141b5 fb9b4c84 42c22f9f
+1 01 400007a8 010 00000000 d40abbdb 1111 000007a0 0010 419d0dda f19e96ef 63d9a4c4 be4b1981
+0 10 400004ce 001 00000011 5f701ba0 abccf132 abccf132 5f701ba0
+0 01 40000770 010 00001000 0f0cf7dc ede1ed42 c339f162 da3caa09 528e29dd c4c6f12b 165c9828 be3faca7 5b151585
+0 10 40000554 010 00000011 94eecd6c 81e0320b c3821d62 0006f1af
+0 01 40000424 010 00000110 5d311d81 1b348e4f 9d4facb2 9eb167e1 a2ee6bb3 4ca91f2f 5223aa62
+0 10 400005f3 000 00000111 6fcc386d 2af0bb25 2af0bb25 2af0bb25 2af0bb25 6fcc386d 6fcc386d 6fcc386d
+0 10 400001ac 010 00000011 daeef06b b3439902 ee6a9a78 40cc50df
+1 01 40000286 000 00001100 f59c0000 0100 f59c0000 1000 c5838e42 0001 c5838e42 0010 c5838e42 0100 c5838e42 0000 4a49fbc6 0000 4a49fbc6 0010 4a49fbc6 0100 4a49fbc6 1000 007f2f3d 0001 007f2f3d 0010 007f2f3d 0100 00000280 0020 f480fd97 e62c6f4c 6106c56b 5485e599 5d6971d0 f22d6a66 7d14bcc2 0406789c
+0 01 4000075c 010 00000101 a35fa471 99a3cc53 abfbac23 95e1506c 224aff6a 0f0cf7dc
+1 01 40000361 000 00000001 00c6cc00 0010 00c6cc00 0100 00000360 0010 b9c23a28 cd9fa3d5 0a10bf76 e78a5132
+1 01 40000274 001 00001011 562655e2 0011 562655e2 1000 31c9ffaf 0011 31c9ffaf 0000 e011143a 0010 e011143a 1000 11d56627 0001 11d56627 1100 4dc52473 0011 4dc52473 1000 6faeacbb 0001 6faeacbb 1100 00000270 0020 57920714 ac6efd59 ee78f75a 3c8ca327 147bec92 08598862 64b5c264 b0217d75
+0 10 400001d4 010 00000011 7b2eaf93 48d5aa7e 37960421 f44a4c9b
+1 01 400004d4 010 00001101 92cb910f 0011 2693dcde 1011 1d771550 1010 d3e6803b 1111 c03fda5e 1000 82531256 1111 7e37988e 1111 8168e6f6 1111 e2d18935 1001 38a88282 0111 1b7d11d1 1101 17de3bc6 1111 51f222dd 0111 e609ca80 0101 000004d0 0040 ae1ccf53 93a490b6 1423fbc3 7789b15c dc8caf70 a1b0a4da 6e4bae5e 4198604e 784ed487 3e371a0b 4ab3806f d0b79a87 49427d67 375da762 70e20e9d 95f999d8
+1 01 40000291 000 00000011 1961a700 0010 1961a700 0100 1961a700 1000 0000005e 0001 00000290 0010 29298c4f a34a1a7a f10b24c0 f0518274
+1 01 40000588 010 00000001 0443ef71 1110 374dcc50 0111 00000580 0010 7ecfc0eb e76aaaf6 8008e264 9697eacb
+0 01 400003cf 000 00001110 daeef0f3 abccf0f4 abccf0f4 abccf0f4 abccf0f4 da74184c da74184c da74184c da74184c 5a4b4bf6 5a4b4bf6 5a4b4bf6 5a4b4bf6 daee8129 daee8129
+0 01 40000399 000 00001111 8995335f 8995335f 8995335f 56ae042e 56ae042e 56ae042e 56ae042e d777c7b0 d777c7b0 d777c7b0 d777c7b0 1b8fc924 1b8fc924 1b8fc924 1b8fc924 3362707b
+0 10 4000002c 001 00000001 ae5d63d6 ae5d63d6
+0 10 40000338 010 00000111 e0cb8763 73f56e3c abccf0c8 daeef0c9 ab5c7ffe dfb8f047 825924f9 59f3f586
+1 01 40000604 000 00001001 a1d2b973 0001 a1d2b973 0010 a1d2b973 0100 a1d2b973 0000 f5de27a9 0000 f5de27a9 0000 f5de27a9 0100 f5de27a9 1000 00006d26 0001 00006d26 0010 00000600 0010 bc536603 7f3b3484 e526cb21 aaef8e99
+0 01 40000082 001 00001000 8bccbaf2 d3748b6f d3748b6f a708888e a708888e f18f4887 f18f4887 a5455fa0 a5455fa0
+1 01 40000768 001 00000000 0000570c 0011 00000760 0010 99c05020 6b01b3c1 829020df af2c5022
+1 01 400006b4 010 00000101 8d167349 0011 c080eba4 1101 98acb057 1110 5009a9fe 0101 253cf416 0101 23d4f6e5 0100 000006b0 0020 8de37413 2822101d 02af0898 9df9b976 8cf8a290 3f0054e7 25bde987 cea9dce6
+0 01 4000031b 000 00001110 abf638c6 da9dc921 da9dc921 da9dc921 da9dc921 abccf0c8 abccf0c8 abccf0c8 abccf0c8 daeef0c9 daeef0c9 daeef0c9 daeef0c9 ab5c7ffe ab5c7ffe
+0 10 40000194 010 00000111 3f011c3c 1b2e288b 17fd154a 6f78a7df 89ee50d1 ba9b781c f9638a5c d278eb63
+0 10 4000043e 001 00000111 5223aa62 9eb167e1 9eb167e1 a2ee6bb3 a2ee6bb3 4ca91f2f 4ca91f2f 5223aa62
+1 01 4000072a 001 00000001 3b790000 1100 00006df7 0001 00000720 0010 384b526a b61e61ae f5771187 f1136262
+1 01 4000041c 001 00000011 65fcc0f2 0011 65fcc0f2 1000 bffa9a25 0001 bffa9a25 1100 00000410 0020 dd067076 991b5542 f0e3c466 239b1b9a a442c140 4a514b01 aa7a4f3d 631e2efb
+0 10 400006d2 000 00000111 abcc00b4 abcc00b4 daeef1b5 daeef1b5 daeef1b5 daeef1b5 abcc00b4 abcc00b4
+0 10 4000003c 010 00000001 1ddf01f6 ba292505
+0 01 400003ac 010 00001110 e07bd1e5 1f43eddc 3dcc920b dd360609 18eab8eb dacc0ee2 18ee67d2 5d887cf2 daeef0f3 abccf0f4 da74184c 5a4b4bf6 daee8129 7419e67a 77dae690
+1 01 400001c2 001 00000101 7c060000 1100 81326aef 0011 81326aef 1000 546f579a 0011 546f579a 1100 000060cc 0011 000001c0 0010 dc55b43a 9d6bd457 2740b054 6da3b3cf
+1 01 400003b8 000 00001110 f36eb0d0 0001 f36eb0d0 0010 f36eb0d0 0100 f36eb0d0 1000 bbdc8553 0000 bbdc8553 0010 bbdc8553 0100 bbdc8553 0000 6ab54cfa 0001 6ab54cfa 0010 6ab54cfa 0000 6ab54cfa 0000 0079e4d4 0001 0079e4d4 0000 0079e4d4 0100 000003b0 0020 97a29095 c1acbe29 e445b003 875f3f5a 2be44350 66bc293e 819cffbb 023e0687
+0 01 400002da 000 00001000 a3e024e9 a3e024e9 b8ade127 b8ade127 b8ade127 b8ade127 b4f3fd99 b4f3fd99 b4f3fd99
+1 01 400002d6 000 00000010 32250000 0100 32250000 1000 00000050 0001 000002d0 0010 6160e02b 7a74ccf2 6e217f89 4d3cdb87
+0 01 40000112 001 00000111 561ce3ed c8315abe c8315abe abf832f1 abf832f1 56699e0d 56699e0d c9d4df31
+1 01 400003fa 001 00001100 9b7a0000 0100 ab200851 0011 ab200851 1000 56318c67 0011 56318c67 1000 a761ca21 0011 a761ca21 1000 3698476e 0010 3698476e 1100 5f4e3cda 0011 5f4e3cda 1000 d9141296 0001 d9141296 1100 000003f0 0030 ce86324e 0fb288b3 be7a3755 9faac273 20ca2afb b757858a f5620f4d d081e0e8 8f20d7ee 74caea78 1ec39659 9a4725f8
+0 01 400001c8 010 00001111 546f579a 6c6560cc f44a4c9b 7b2eaf93 48d5aa7e 37960421 81eadebb b0b0636a d34de5f3 15a9c78c 19f3673a 97654083 1236e24f dc913950 27e74934 e2065141
+1 01 400006f0 000 00000010 002d1a38 0001 002d1a38 0010 002d1a38 0100 000006f0 0010 23a584ea e9b52e76 5434e2b8 fb4ed4a4
+0 10 40000210 010 00000001 b9b4a36a 4a3fd2a7
+0 10 40000778 010 00000011 c339f162 da3caa09 0f0cf7dc ede1ed42
+0 10 400003a4 010 00000011 1b8fc924 3362707b e07bd1e5 d777c7b0
+0 10 400007b2 001 00000001 9ecc89ec 9ecc89ec
+0 10 400006b4 010 00000011 a7467349 c08046a4 98acb040 06cc60ac
+1 01 4000030f 000 00000000 ae000000 1000 00000300 0010 441b2c9a ac6514e4 82954cb3 014130d4
+1 01 4000030c 001 00000101 821601b4 0011 821601b4 1000 936ccc96 0000 936ccc96 0000 50c5aaa6 0000 50c5aaa6 1100 00000300 0020 441b2c9a ac6514e4 98c4f40f 76765de9 39779207 aa4375e6 64b3be5b 3ecf8487
+0 10 400000ac 001 00000001 daeef098 daeef098
+1 01 400002c8 001 00000101 3fbbd278 0011 3fbbd278 1100 9d985351 0011 9d985351 1000 1e0f8cba 0011 1e0f8cba 1100 000002c0 0020 e80cd2f7 42568283 9549c6e3 87cc3efd f5abde2a 66cae0ba 6dc07fb7 d4dbd45f
+1 01 40000752 001 00001010 5e220000 1100 edbf6124 0001 edbf6124 0100 c1ba1903 0010 c1ba1903 0100 097630c6 0011 097630c6 1100 cd97359f 0011 cd97359f 1100 d4c91ccd 0011 d4c91ccd 1100 00000750 0020 ab0015b3 c31d1779 0eeb0151 ad0b9f76 4c32ec64 5e4039f5 43374796 d4ea12b6
+0 10 40000680 001 00000011 abd5e0e6 abd5e0e6 27eef0bf 27eef0bf
+1 01 400002b6 001 00000110 a8230000 1100 06952d42 0010 06952d42 1000 0b1d0a92 0001 0b1d0a92 1100 bed581d6 0011 bed581d6 1100 000002b0 0020 91e194e5 a0d85fc6 d08721c7 0fe259c8 298f2e9a 60a30d22 451bb371 deabe962
+0 01 400004b5 000 00000011 daeef12d daeef12d daeef12d abccf12e
+0 01 400006ab 000 00000000 abccf1aa
+1 01 400000c0 010 00001011 06a7a82e 0100 ae94de30 0111 ae7c7350 1110 9791c9bd 1111 04368fae 0101 b6a7d478 1101 13a38d32 1101 e7d37077 1111 9d6bc676 1111 c6aff889 1111 7d53267c 0111 541e9af5 1111 000000c0 0030 5d519160 158a048c 601df200 3cea669c 62961cf3 798db478 79424b0e 4b791767 30e5804e 79ddfa8d 999f1b52 491e55b2
+0 10 4000030f 000 00000011 829101b4 829101b4 829101b4 829101b4
+0 01 400005ec 010 00001100 b5dbf190 6fcc386d 2af0bb25 abccf1e8 daeef17f bbccf180 dad2b973 f5def182 dada6d26 65ccf117 afee04ed 48dcf145 da311ca8
+1 01 4000013e 001 00001010 b5130000 1100 4e919781 0000 4e919781 1000 3d33e1ee 0011 3d33e1ee 1100 bd2b17df 0011 bd2b17df 0100 bf99328e 0010 bf99328e 1000 88f241fb 0011 88f241fb 1100 00000130 0030 a803dec0 a8483a9d a8bcb9a7 78258284 1a71d83f 9c0df683 cf9a0ded 495916cf 30d636da 5c4ef552 e30e73f8 5c5fdbf2
+1 01 40000180 010 00001001 7fd0b660 1001 cd1955b3 1011 c1e13b09 1011 0674b67b 1111 88bf9236 1101 b12f40d0 0111 3ec917cb 1111 dd207049 0100 7199ab50 0011 a11c1df6 1000 00000180 0030 13057645 5cabf629 27ee78fa af1fb2a5 265ac674 a86d0f0e da876098 281a8d9d 1d2c1d56 902071c2 5f4dfc0e 9552708e
+0 10 40000330 010 00001111 825924f9 59f3f586 e0cb8763 73f56e3c 7907d00e 717258f0 abcc98a6 829101b4 abccf01b 50c5a89b abf638c6 da9dc921 abccf0c8 daeef0c9 ab5c7ffe dfb8f047
+0 01 4000019c 010 00001001 1720154a b343ab50 a16a9a78 40cc50df daeef06b abccf06c daeef06d 6a58f06e fcd0b16e 7c0633d7
+0 01 4000047d 000 00000011 f0eeac2a f0eeac2a f0eeac2a b25dfa1f
+0 10 400004dc 010 00000001 1dc41537 26ccdcde
+1 01 400003f4 010 00001100 087e5d8b 0111 caefb02f 1101 e36103ff 1111 5e069805 1111 556153fb 0111 a6dc4fbf 0110 d769d34a 1010 936ea975 1010 06e499fb 0101 2933d549 1101 8c0696ad 0110 7cd0696b 1111 90c4d99e 1111 000003f0 0040 b05ee406 7ea66022 d63df7ff 228478f3 d9ebb4e4 ca9359ed 1feb254b db663c8b 4f46f9fc ce6eada8 1d3ee56b 7c9e49ad 7959d009 1316d1de 13ca67da 9b7869c5
+1 01 40000285 000 00000011 cc344f00 0010 cc344f00 0100 cc344f00 1000 00000096 0000 00000280 0010 562f86fc 7490d403 393de649 dd7afac7
+1 01 40000422 001 00000100 e8d30000 1100 1c944b83 0011 1c944b83 1100 a5b0318c 0010 a5b0318c 1100 00000420 0010 48b64dc9 331b4a1c 3cce3535 cb6de3d0
+1 01 4000077a 001 00001011 8ef00000 1100 cd8c13f5 0011 cd8c13f5 1100 bf491a46 0011 bf491a46 1100 7328c78e 0010 7328c78e 0100 b2213194 0011 b2213194 1100 c5ad7a61 0001 c5ad7a61 1100 00003e33 0011 00000770 0030 0cea2b92 1f65310f 2f809d57 43336fd8 4e52015c 7d36940f 9b099d79 d2c17565 be3cc809 29ba7781 bd98ff05 9dec876e
+0 10 40000436 001 00001111 a2ee6bb3 4ca91f2f 4ca91f2f 5223aa62 5223aa62 e8d3696b e8d3696b 1c944b83 1c944b83 a5b0314f a5b0314f 9d4facb2 9d4facb2 9eb167e1 9eb167e1 a2ee6bb3
+1 01 4000042e 000 00001000 231a0000 0100 231a0000 1000 35fec745 0000 35fec745 0010 35fec745 0100 35fec745 1000 0020f13f 0000 0020f13f 0010 0020f13f 0100 00000420 0020 48b64dc9 331b4a1c de07f18e d3cfcd75 ae2ee20f b5aa6e8c 6faaafcf 1e0afc91
+0 10 40000314 010 00000001 50c5a89b abccf01b
+1 01 4000050c 010 00000010 3e1e031d 1011 526e1e9b 0101 e2e4f8a4 1011 00000500 0020 49427d67 375da762 a3e2e6d8 3b7670d3 445ab5b8 16a042ba 2d483f2a 5e3152ae
+0 10 400000a2 001 00000011 8c1bb334 046e9e20 046e9e20 8c1bb334
+0 10 40000154 001 00000001 c62889a3 c62889a3
+1 01 4000041e 001 00000010 5f850000 1100 f68ee46a 0011 f68ee46a 1100 00000410 0020 4f46f9fc ce6eada8 9f7811e9 0985817c 70cadf28 c8230c54 ce507dd5 b6732935
+1 01 40000314 000 00000101 9abc835b 0001 9abc835b 0010 9abc835b 0000 9abc835b 1000 000051f1 0001 000051f1 0000 00000310 0010 20d42f9c f75badb9 0083a5ff 40238d77
+1 01 40000315 000 00000000 0000c400 0010 00000310 0010 a17bb215 1c8e8b47 1bb702bf ae45de38
+1 01 40000068 001 00000001 2f259d9b 0001 2f259d9b 1100 00000060 0010 3dd0b5a8 af7e5134 30424ad5 0edb17e6
+0 10 400003da 001 00000001 5a4b4bf6 5a4b4bf6
+0 10 400002da 001 00000011 a3e02450 b8ade127 b8ade127 a3e02450
+0 01 4000046d 000 00000000 6375f1f3
+1 01 40000604 001 00001111 80fb3679 0001 80fb3679 1000 b37114f0 0011 b37114f0 1100 9623e79a 0011 9623e79a 1100 59f4a21e 0010 59f4a21e 0100 fb5f3640 0000 fb5f3640 0000 d7bd6920 0010 d7bd6920 1000 4f462c2a 0000 4f462c2a 1100 80fd2380 0010 80fd2380 1100 00000600 0030 1735d0a3 6c4698cb 1df55288 0157ebad 47791e21 8d082462 b4e438d4 c382562b 0ff658f1 5e45530f 7f68e569 63b90e38
+0 01 4000074d 000 00000001 39919414 39919414
+0 10 40000152 001 00000011 88f241fb c62889a3 c62889a3 88f241fb
+0 10 400005e1 000 00000001 66cc1620 66cc1620
+0 10 4000074b 000 00001111 20c3227e 39919414 39919414 39919414 39919414 c01b04d0 c01b04d0 c01b04d0 c01b04d0 e6c5908f e6c5908f e6c5908f e6c5908f 20c3227e 20c3227e 20c3227e
+1 01 40000234 010 00000011 d1b7c37e 1010 53918ec3 1101 d55dbf83 1111 66b69a1d 1011 00000230 0020 d36793d0 10a6476b 26e5b825 f9dfbda8 9f0bb32f c178221d a743b2fa c965230a
+1 01 400005a3 000 00000101 7d000000 1000 1e53cc7d 0000 1e53cc7d 0010 1e53cc7d 0000 1e53cc7d 1000 00000018 0001 000005a0 0010 453bbe62 cbff72c7 3c640f24 53bf1942
+1 01 400004c6 001 00000100 a07b0000 0100 651cb9ec 0010 651cb9ec 1100 117dc1ce 0011 117dc1ce 1100 000004c0 0010 f46219e7 604c59d4 b9f66f7c 9b13fe2d
+1 01 40000380 010 00001001 05a51767 1011 21ddfd19 1110 9a511ddd 1110 68b591d9 1110 13ee56b7 1001 f4a249af 1110 65ea99f4 1001 713c71bd 1100 9d22cbf2 0111 6400ef58 1111 00000380 0030 a79b3572 f33c54cd ecb9736d ef9c4904 709db372 761167f3 ce34df9f 08b70f09 c7f71c94 e331ba4f 88886412 91a843d2
+1 01 40000404 010 00000010 d95bb2cc 1110 8cf0c4a3 1111 20af01ac 1111 00000400 0010 2ed1bad2 95a0fb7f f3d2ea5d 3763a03c
+1 01 40000172 000 00001100 276d0000 0100 276d0000 1000 6dac86f9 0000 6dac86f9 0010 6dac86f9 0100 6dac86f9 1000 ac6e71d3 0001 ac6e71d3 0010 ac6e71d3 0100 ac6e71d3 1000 00a67152 0001 00a67152 0010 00a67152 0100 00000170 0010 7371a8a0 799f5251 0f5b9278 0089e729
+0 10 40000072 001 00000001 40a38194 40a38194
+1 01 4000040e 001 00001001 78780000 1100 84aa1767 0011 84aa1767 0100 dc73eb7f 0011 dc73eb7f 1000 622a0f8f 0010 622a0f8f 1100 0f7eb569 0011 0f7eb569 0100 0000004f 0011 00000400 0030 2ed1bad2 95a0fb7f 04c3a67d e4ed6a5a 1087b046 da95936e b859e3bc bd57d6c6 01370297 07d02e44 179d4f0a 169229ab
+1 01 400006ec 010 00000011 beb6c03c 1111 51da9f0f 1010 4d90e395 1111 40e07c87 1110 000006e0 0020 fb026e1b 17094bd6 d8c1dc46 a59bc077 1379aa0c 5dfe53aa d608cc14 0efd93ca
+0 10 40000738 000 00000011 cd4d1fff cd4d1fff cd4d1fff cd4d1fff
+1 01 40000688 010 00001000 2ffaf3e3 1011 c903b400 1111 4c72a315 1111 858fe501 1101 f6485c98 1011 700b07ed 1111 f46b8e25 1111 c144d649 1000 38d1ad47 1111 00000680 0030 363d2133 d8cbca0c fb40ce95 b3d80d18 e4d9580d c2be402c 832de771 297fa5d9 1a7aa36e 007ede2b 3ef169b2 5c394b9b
+0 01 40000040 001 00000010 a81eb904 a81eb904 9e7f69d2
+1 01 40000330 001 00001001 7b42d178 0011 7b42d178 0100 c53430cb 0011 c53430cb 1100 1a4c6d70 0011 1a4c6d70 1100 7c982c68 0011 7c982c68 1100 88469a08 0010 88469a08 0100 00000330 0020 809376f8 94e5eb60 29de0c0d 560c1745 7fa8bb67 286b3953 b4903ec7 b12c5b2f
+0 10 40000282 001 00000011 11d51427 cc344f73 cc344f73 11d51427
+1 01 40000430 001 00000101 cb71b777 0011 cb71b777 1100 00dc4388 0001 00dc4388 1000 f146a729 0011 f146a729 1100 00000430 0010 1a94aec8 2d4d4aba b4147fc2 0425da49
+0 01 4000077c 010 00001100 cd8c13f5 bf491a46 c428c72b b2213194 c5adac61 5b153e33 8ad3f15a d9be87ad 1b8887b8 ff97f177 da959fe9 d40abbdb 21eef1a6
+1 01 400000f9 000 00001100 2f2a4200 0010 2f2a4200 0100 2f2a4200 0000 cfa8149c 0001 cfa8149c 0000 cfa8149c 0000 cfa8149c 0000 dbe7ec24 0000 dbe7ec24 0010 dbe7ec24 0000 dbe7ec24 1000 0000857b 0000 0000857b 0010 000000f0 0020 51397bd2 a62fe109 d65d931d c884fe72 ad050549 e34bbe19 d3310837 33b686d9
+1 01 4000004e 001 00001101 a0ec0000 0000 11a0d07a 0010 11a0d07a 1100 e471c12b 0010 e471c12b 1100 4deb82d0 0011 4deb82d0 0100 44825a7d 0000 44825a7d 1100 67a2accf 0010 67a2accf 0100 0a65ea09 0011 0a65ea09 1100 000022ce 0011 00000040 0030 070e90ab 245af854 8b346b74 97e48252 2d5e1397 ca4778b8 9d85a1dd a7ea307c a44b902a 9ba8e8c8 ce6b4199 72902f12
+1 01 400002d2 000 00001101 81cd0000 0100 81cd0000 1000 5f417e03 0001 5f417e03 0010 5f417e03 0100 5f417e03 0000 00116f5b 0001 00116f5b 0010 00116f5b 0100 00116f5b 1000 40be81b3 0000 40be81b3 0010 40be81b3 0000 40be81b3 1000 000002d0 0010 4d524f92 77e7531a 2df66c9d 858e83cb
+0 01 400007e6 000 00001101 2aeef1f9 2aeef1f9 abb4d1fa abb4d1fa abb4d1fa abb4d1fa 54a77ca3 54a77ca3 54a77ca3 54a77ca3 abcc48fc abcc48fc abcc48fc abcc48fc
+1 01 40000344 010 00000111 a464c54c 1001 855d9aea 1111 59f54288 0011 a4dcabc9 1111 30cff06e 1100 142e0f6b 1110 1dd7abb8 1111 c956f5e7 0101 00000340 0030 661cd2fd 83603be1 7f2cca0a 929cd4a8 117ddc5a 65fd09bc 73286672 df33099f 3538ed1a 9af0821d 55490340 71e7983e
+1 01 400003c2 000 00000110 90650000 0100 90650000 1000 2895f591 0001 2895f591 0010 2895f591 0000 2895f591 1000 000000ba 0001 000003c0 0010 a8bdbb95 5326baf7 45a26913 0f861e57
+0 10 40000484 010 00001111 dadbc718 2e23f104 f058da8c a3e21661 bf331c82 4a04f126 c5cb304a 30dff120 702a65a5 e387459e daee972b abccf12c daeef12d abccf12e daeef12f b25dfa1f
+0 01 400005bc 010 00000100 3036f16f 03ccf669 732124bf 4be7f1c9 018fb455
+0 10 4000041b 000 00001111 622a0f49 5f7eb569 5f7eb569 5f7eb569 5f7eb569 93aa1767 93aa1767 93aa1767 93aa1767 dce4eb7f dce4eb7f dce4eb7f dce4eb7f 622a0f49 622a0f49 622a0f49
+1 01 4000036c 001 00000001 78861990 0011 78861990 1000 00000360 0010 3538ed1a 9af0821d 0aabe30d 41efd7bc
+0 10 40000334 010 00000001 c53430cb 8242d178
+1 01 400001a8 010 00000100 89795cc0 0000 9e4360be 1111 e93956fd 0000 0c2e4f4d 0111 30031ddf 1101 000001a0 0020 1d2c1d56 902071c2 8dbf998c e0c0ba8c aa313fa5 2324998e 0ada8298 def9dbd6
+0 01 4000031b 000 00000000 abf638f1
+0 10 400007ee 000 00001111 54a77ca3 54a77ca3 a7ccd9f8 a7ccd9f8 a7ccd9f8 a7ccd9f8 2aeef1f9 2aeef1f9 2aeef1f9 2aeef1f9 abb4d1fa abb4d1fa abb4d1fa abb4d1fa 54a77ca3 54a77ca3
+0 10 400005b8 000 00000001 f5e73372 f5e73372
+1 01 400006dc 010 00000001 eac0da4e 1011 ff77ab47 1000 000006d0 0020 9aeef096 567ab46d c20b6460 58f08587 54d7c711 d6c73b11 e34109ea f2a0561c
+1 01 4000000c 001 00001000 33f96e22 0010 33f96e22 0100 68ae7488 0011 68ae7488 0000 d6de0a67 0011 d6de0a67 1100 a6aef28e 0010 a6aef28e 1100 0000f791 0001 00000000 0020 38731084 960ca486 0daea16e e7208bc5 658f86f1 6ef4a6af 6b51c1d2 216083b9
+0 10 400004ac 010 00000111 daee972b abccf12c daeef12d abccf12e daeef12f 30dff120 702a65a5 e387459e
+0 01 400006e4 000 00001110 daeef1b9 daeef1b9 daeef1b9 daeef1b9 abccf1ba abccf1ba abccf1ba abccf1ba beb6c03c beb6c03c beb6c03c beb6c03c 512d9f38 512d9f38 512d9f38
+0 10 400000b0 001 00001111 abccf02c abccf02c daeef02d daeef02d abccf02e abccf02e daeef02f daeef02f 8c1bb334 8c1bb334 046e9e20 046e9e20 cd3c2605 cd3c2605 daeef098 daeef098
+0 01 40000144 000 00000000 3d33e1ee
+1 01 4000075d 000 00000110 b8c3cf00 0000 b8c3cf00 0100 b8c3cf00 1000 05fbbb7f 0001 05fbbb7f 0010 05fbbb7f 0100 05fbbb7f 1000 00000750 0020 ab0015b3 c31d1779 c94478e4 3f60e6e5 85bd7113 181d4484 270b1cec 3ef15b75
+0 01 400005a8 010 00001011 abccf118 daeef16b ee231d9c 8a152798 f5e73372 3036f16f 03ccf669 732124bf 4be7f1c9 018fb455 b66387e3 da589643
+0 01 40000248 001 00000110 3abe083c 3abe083c f98a093d f98a093d 7eaef0f7 7eaef0f7 d3540cc0
+0 10 400004b8 001 00000111 abccf12e abccf12e daeef12f daeef12f abccf12c abccf12c daeef12d daeef12d
+0 10 400004ea 000 00001111 82531256 82531256 7e37988e 7e37988e 7e37988e 7e37988e d3e6803b d3e6803b d3e6803b d3e6803b c0eef139 c0eef139 c0eef139 c0eef139 82531256 82531256
+0 01 400000b4 001 00000011 daeef02d daeef02d abccf02e abccf02e
+0 01 4000038a 000 00000111 9a511de2 9a511de2 68b59159 68b59159 68b59159 68b59159 134f92b7 134f92b7
+1 01 400007db 000 00001010 4b000000 1000 2e9016c2 0000 2e9016c2 0000 2e9016c2 0100 2e9016c2 1000 bc560b40 0001 bc560b40 0010 bc560b40 0100 bc560b40 0000 0000f982 0001 0000f982 0010 000007d0 0020 6a7385f5 3f24dd68 713ee0c1 7cde8f44 0dfeaddd bd559049 3399aa21 54fbb17d
+1 01 400001df 000 00001001 91000000 1000 88a82b08 0000 88a82b08 0010 88a82b08 0100 88a82b08 1000 c4a031d8 0001 c4a031d8 0010 c4a031d8 0000 c4a031d8 1000 000000d4 0000 000001d0 0020 9e484bdc 31030550 0f1b2f20 b894db21 a9cc31b8 5ac8846f 0b90b591 6df83d2d
+0 10 40000243 000 00000011 66819a1d 66819a1d 66819a1d 66819a1d
+1 01 40000165 000 00001000 d3db1700 0000 d3db1700 0100 d3db1700 0000 2cad2210 0000 2cad2210 0010 2cad2210 0100 2cad2210 1000 00003bea 0001 00003bea 0000 00000160 0010 3f5256c8 e5c9c4b1 45ddc607 25e71cd0
+0 10 400007a4 000 00000011 da959fe9 da959fe9 da959fe9 da959fe9
+0 10 400005ce 001 00000111 018fb455 03ccf669 03ccf669 732124bf 732124bf 4be7f1c9 4be7f1c9 018fb455
+1 01 40000554 000 00000110 a8c9e712 0001 a8c9e712 0000 a8c9e712 0100 a8c9e712 1000 0040463d 0001 0040463d 0010 0040463d 0100 00000550 0010 e4583233 32f16aea 4c3a0287 50d936eb
+0 01 400000de 001 00000111 e7d37077 9d6bc676 9d6bc676 c6aff889 c6aff889 ab53267c ab53267c 541e9af5
+1 01 40000212 001 00000111 1c330000 1000 7118ab0c 0001 7118ab0c 1000 08980888 0011 08980888 1100 e7a9653b 0011 e7a9653b 1100 00007052 0010 00000210 0020 64466e08 f2c099e7 9634b00d 2fb5c694 462e2c6a 794eb337 b4fd79a0 a6b061ff
+0 01 4000028c 001 00001111 4a49fb3b 4a49fb3b 1961a73d 1961a73d dadd6c5e dadd6c5e 2635bac6 2635bac6 0db8cc5e 0db8cc5e 78cb3856 78cb3856 ea9b40df ea9b40df 56d421c8 56d421c8
+0 01 4000021c 010 00001010 e7a9653b f932700f e3c49b6a a3014e6d 820da68b 6b949bdb d117c3f2 53918bc3 d55dbf83 66819a1d 03852b3b
+0 01 400001aa 001 00001110 40cc50df 9e4360be 9e4360be abccf06c abccf06c da2e4f4d da2e4f4d 3003f0df 3003f0df fcd0b16e fcd0b16e 7c0633d7 7c0633d7 81006aef 81006aef
+1 01 40000174 001 00000111 1ab534ce 0010 1ab534ce 1100 267f8087 0001 267f8087 1100 169197f8 0011 169197f8 1100 38b20d4c 0010 38b20d4c 1100 00000170 0020 16645210 e7e919eb f46d4e90 52158815 e7daf215 f0d80e1c 31dbd8ac d0dce2b9
+1 01 40000620 001 00001111 814a9944 0011 814a9944 0100 739eae06 0010 739eae06 0000 b10030e4 0011 b10030e4 1100 da844a92 0011 da844a92 1000 96a0f426 0011 96a0f426 1100 57a0faed 0011 57a0faed 1000 836aeaa4 0011 836aeaa4 1100 2d14f50d 0011 2d14f50d 1100 00000620 0020 df1fdece 075860a7 ad906516 e3a1aaf2 cafd5c8e c6d127f6 f6ab84b2 7f1e5322
+0 10 400002d4 000 00001111 32417e03 32417e03 32417e03 32417e03 00116f5b 00116f5b 00116f5b 00116f5b 40ad8127 40ad8127 40ad8127 40ad8127 81cd8cba 81cd8cba 81cd8cba 81cd8cba
+1 01 400002f0 010 00001101 7c24ce03 1101 7ad77ec9 1111 1811ac3c 0111 f9117ae3 1101 c045335e 1110 ae50ac74 1101 607ec74f 1101 9a8a86dc 1110 1a9521be 0101 db29e453 0100 6fb597f8 0111 a6a22393 1110 0085e643 1001 d720fa0b 1111 000002f0 0040 bfdaa1ed b427fa6a e7ffc8af cef3a002 38c81740 1dc074e5 623db8a3 368b0e2a 35a7ce3a 6fd24dcb 5c4a271d 7053ed81 f9c42aca 9671435a eb5380b7 de4ab1c9
+0 01 40000504 000 00001011 daf222dd daf222dd daf222dd daf222dd ab09f180 ab09f180 ab09f180 ab09f180 3eee031d 3eee031d 3eee031d 3eee031d
+1 01 40000164 001 00001001 8f1fd559 0010 8f1fd559 1100 13677674 0011 13677674 0000 035b5490 0011 035b5490 1100 08012815 0011 08012815 1000 c8b8acab 0011 c8b8acab 0100 00000160 0020 4875e1c7 fe8c7db7 4f355a0c 1e4f1587 44765401 825f001c ef423640 9dcaee6b
+1 01 400004c8 000 00001111 98370cd1 0000 98370cd1 0000 98370cd1 0100 98370cd1 1000 19aed2c9 0001 19aed2c9 0000 19aed2c9 0100 19aed2c9 1000 d5caa141 0001 d5caa141 0010 d5caa141 0000 d5caa141 1000 462c0d6c 0001 462c0d6c 0010 462c0d6c 0000 462c0d6c 1000 000004c0 0020 f46219e7 604c59d4 d6b47b44 b32bd4a1 53427c6d a8bd7575 09fc7e70 e84ab124
+1 01 400002b9 000 00000110 587f7600 0010 587f7600 0100 587f7600 1000 28cf2cd1 0000 28cf2cd1 0000 28cf2cd1 0100 28cf2cd1 1000 000002b0 0010 91e194e5 a0d85fc6 ba2dcbea 5bb0e913
+0 10 4000040c 000 00001111 787801ac 787801ac 787801ac 787801ac 5e069805 5e069805 5e069805 5e069805 d95bb2fb d95bb2fb d95bb2fb d95bb2fb 8cf0c4a3 8cf0c4a3 8cf0c4a3 8cf0c4a3
+1 01 4000064c 000 00001001 b88c7c98 0001 b88c7c98 0010 b88c7c98 0100 b88c7c98 1000 2e33bbd9 0001 2e33bbd9 0010 2e33bbd9 0100 2e33bbd9 1000 00009234 0000 00009234 0010 00000640 0020 488cae73 209c2124 efa8e373 3cb7e0ec 9c356ee7 63ce0d74 18129714 806fad60
+1 01 400003de 001 00001001 2cb50000 0000 3e703935 0001 3e703935 1100 441b966c 0010 441b966c 0100 a00ef173 0011 a00ef173 1000 79b075ed 0011 79b075ed 1000 0000593f 0011 000003d0 0030 67824285 60a07723 9ba539da 35a86017 aefc2911 5b93a319 bd2f757f c314ed60 0ffa32a7 79722f2f dd7deff5 95e277d4
+0 01 40000040 000 00000011 a81eb904 a81eb904 a81eb904 a81eb904
+0 01 40000480 010 00000100 b25dfa1f dadbc718 2e23f104 f058da8c a3e21661
+0 10 40000390 001 00000001 134f92b7 134f92b7
+1 01 40000134 010 00000000 d75ef4ea 0110 00000130 0010 b62021a0 6b4ce834 a8f2f8ae ca8c949c
+0 10 400007d0 001 00001111 c8ba97b2 c8ba97b2 a7c605a3 a7c605a3 4bde1520 4bde1520 2e908b94 2e908b94 91ccb931 91ccb931 dae2f1b5 dae2f1b5 090e9605 090e9605 a635e474 a635e474
+1 01 40000790 010 00001111 263e24f0 0111 2d8ca2fe 1111 0f491ff9 1111 abb437a6 1011 62cf2f37 1011 10f884d3 0111 82dea1a9 1110 a0ff7b80 1110 1b5addd4 1011 52d664c8 1011 527affaa 0000 0a7b5e83 1111 ba80b3cf 1101 1a6bd783 1101 a9cdc01d 1100 58b72690 0101 00000790 0040 82cc48f8 337e6614 2c11a6c2 cd857c68 bb6db427 655b0f0c 603fed59 df39675a d5078580 45b45dc6 e94a14dd 4d91e21d e78e92be 2c8c9bfb f4235ad3 96efbf81
+1 01 4000056c 010 00001101 64c0a164 1011 e3ea77ec 1101 98d53183 1111 71247d7a 1110 c86091f0 1101 07426dd0 1100 a3adabf0 1110 be794d7d 1101 a46b56e5 1110 0b739df9 0101 884fdb54 1111 961c7ffe 0101 35acb65e 1111 2afb64fb 1100 00000560 0050 a71be8c3 f9c6eeec a6cc8dce 9e7b2779 2306eb0d 0d9dcfa4 78489df2 a84e8b4f d5c8aeaf 2c677b25 04d8967a 7d470123 568e912e e663a818 d9939e1a 411e9025 83d9f841 1fa26402 0fcc540b 791f53d0
+0 01 4000019a 001 00001011 3ec917cb 1720154a 1720154a b343ab50 b343ab50 a16a9a78 a16a9a78 40cc50df 40cc50df 9e4360be 9e4360be abccf06c
+0 01 400003b8 010 00001010 f36eb0d0 18dc85eb 90654cfa 2879f591 5d887cba daeef0f3 abccf0f4 da74184c 5a4b4bf6 daee8129 3e70e635
+1 01 4000024c 010 00000010 4a93d8bc 1101 52ee45ea 0111 8726732b 1110 00000240 0020 9f0bb32f c178221d f854c3ad 4a2feda4 ac79b737 d475c878 4a412109 51855ab0
+0 01 4000069c 010 00000010 700b07ed f46b8e25 c1ee97a9
+0 01 4000004c 010 00001010 51e57719 11a0d0b8 e471c137 59eb82d0 4482effc f3a2ac58 0a65ea09 2f2522ce d385f0f8 40a38194 11e0075a
+1 01 40000129 000 00001111 9024a500 0010 9024a500 0100 9024a500 1000 1e2b347a 0001 1e2b347a 0000 1e2b347a 0100 1e2b347a 0000 fc4238fe 0001 fc4238fe 0010 fc4238fe 0100 fc4238fe 1000 3c6a161c 0001 3c6a161c 0010 3c6a161c 0100 3c6a161c 1000 000000ef 0001 00000120 0020 e6e69739 0e2fba4c 9fee01cd 1ec08a9f 8192fdfa f97740c4 4df44bd6 6ce35ce6
+0 10 4000051c 010 00000011 3294bc86 ab6ef19b e2adf8a4 aba2fecb
+0 01 400001ac 010 00000000 9e4360be
+0 01 400004ab 000 00000111 e387459e daee972b daee972b daee972b daee972b abccf12c abccf12c abccf12c
+0 10 400007b4 001 00000001 52d564c8 52d564c8
+1 01 400006e6 000 00001000 4bc60000 0000 4bc60000 1000 e7898d3a 0001 e7898d3a 0010 e7898d3a 0100 e7898d3a 1000 009fa8f5 0001 009fa8f5 0010 009fa8f5 0100 000006e0 0010 bd7ba856 367f7e88 63486751 466dd450
+1 01 4000041c 001 00001010 a8bfbe50 0011 a8bfbe50 1100 853dd4d7 0011 853dd4d7 1000 7e74c652 0011 7e74c652 1100 ab036200 0011 ab036200 1100 277c805a 0001 277c805a 1100 00003abf 0011 00000410 0030 1087b046 da95936e e1d36bd0 3a679dbc df200dbe 126defa7 2ce29a05 4f9cb2ea ac92b0cc b7a77dcf d3bae874 7f548263
+0 01 40000248 001 00001000 3abe083c 3abe083c 4a9309bc 4a9309bc 7eee45ea 7eee45ea 872673c0 872673c0 ef009269
+0 10 400001e4 001 00000111 c4b031d8 c4b031d8 d34de5f3 d34de5f3 15a9c78c 15a9c78c 88a82bbb 88a82bbb
+1 01 400006b0 010 00000001 ccdbc6b3 1010 c7a6dd68 0011 000006b0 0010 d2d1a0a2 30c1be53 e6a5ab28 9d1d43cc
+0 10 40000370 010 00000001 89dfaf30 85b96131
+1 01 4000012a 001 00000000 d1800000 0000 00000120 0010 e6e69739 0e2fba4c 9fee01cd 1ec08a9f
+0 10 400006a4 010 00000011 c1ee97a9 38d1ad47 daeef1ab f46b8e25
+1 01 40000448 001 00000111 80fa75a6 0000 80fa75a6 1100 9463acc6 0011 9463acc6 1100 d1d31a54 0011 d1d31a54 0100 7e3808b8 0011 7e3808b8 1100 00000440 0020 f6d1ebdc d8df93f5 1ce035ec 4596d59f 7bdf57dc 85aaef05 615bf7d3 dae5da53
+0 10 400000c8 010 00001111 ae7c7332 9791c9bd 2436f0ae b6a7ba78 13a3ac32 e7d37077 9d6bc676 c6aff889 ab53267c 541e9af5 abccf03c daeef03d ee2a423e 8727f09c 4da7f030 df94de30
+0 10 40000352 001 00000011 a4dcabc9 30cf4743 30cf4743 a4dcabc9
+0 10 40000204 000 00000011 e2065141 e2065141 e2065141 e2065141
+1 01 40000730 001 00000100 48647094 0011 48647094 1000 4b287a23 0011 4b287a23 1100 000037cc 0011 00000730 0010 c9c82b85 e6b2fd37 b6513517 625877cd
+0 10 400003ef 000 00000111 797075ed a0d0f173 a0d0f173 a0d0f173 a0d0f173 797075ed 797075ed 797075ed
+1 01 40000315 000 00000100 2b8fc600 0010 2b8fc600 0100 2b8fc600 1000 00004934 0001 00004934 0000 00000310 0010 70b8f65e dd05b335 e6c485db 21305140
+0 10 400002d4 001 00000011 32417e03 32417e03 81cd8cba 81cd8cba
+1 01 40000660 001 00000000 0000cb00 0011 00000660 0010 e103f0be f51883d7 b7316a7b 5e8f75c2
+0 10 400000e0 001 00000111 9d6bc676 9d6bc676 c6aff889 c6aff889 ab53267c ab53267c 541e9af5 541e9af5
+0 01 400006ee 001 00001010 be9fa8f5 512d9f38 512d9f38 4d90e395 4d90e395 40e07cca 40e07cca daeef1bf daeef1bf abccf1c0 abccf1c0
+1 01 400002f1 000 00001010 90a1ea00 0000 90a1ea00 0000 90a1ea00 1000 e13050c0 0001 e13050c0 0000 e13050c0 0100 e13050c0 1000 7fb9dd14 0001 7fb9dd14 0010 7fb9dd14 0100 7fb9dd14 1000 000002f0 0010 a9171daf e17c61ca 67a8dcfe f6ca6ad0
+1 01 4000002e 001 00000101 4deb0000 0100 9be6a694 0001 9be6a694 1100 b9771008 0011 b9771008 1100 0000a8be 0011 00000020 0020 17f3b3d6 c0f9e84a fbcc4c04 250e58bd 4f816e39 a8aa7c01 2f47dcec d8e20343
+0 01 400007d2 001 00000010 c8ba97b2 a7c605a3 a7c605a3
+0 01 4000007e 000 00000110 613814f7 613814f7 8bccbaf2 8bccbaf2 8bccbaf2 8bccbaf2 d3748b6f
+1 01 400006c4 001 00000100 7165cbd0 0011 7165cbd0 1100 0a03f992 0011 0a03f992 1000 00001608 0001 000006c0 0010 8d0c8df5 a7b8fbdb b2a94546 ba77223a
+0 10 40000725 000 00000011 f7eef1c9 f7eef1c9 f7eef1c9 f7eef1c9
+0 01 400000a0 010 00001001 8c1bb334 046e9e20 cd3c2605 daeef098 abccf02c daeef02d abccf02e daeef02f 4da7f030 df94de30
+1 01 400004fe 001 00000000 9a640000 0000 000004f0 0010 784ed487 3e371a0b 4ab3806f d0b79a87
+1 01 400001f8 001 00000000 000090f5 0001 000001f0 0010 e2c1b0a4 d79e1249 cfb641f7 d5fe88b6
+0 10 400005f0 001 00001111 6fcc386d 6fcc386d 2af0bb25 2af0bb25 abccf1e8 abccf1e8 daeef17f daeef17f 66cc1620 66cc1620 daeee493 daeee493 abccf17a abccf17a b5dbf190 b5dbf190
+0 01 4000067c 000 00000101 daeefeb6 daeefeb6 daeefeb6 daeefeb6 abd5e0e6 abd5e0e6
+1 01 40000113 000 00001100 0f000000 1000 3a2b91b8 0000 3a2b91b8 0010 3a2b91b8 0100 3a2b91b8 1000 c0298057 0001 c0298057 0010 c0298057 0100 c0298057 1000 465f3156 0001 465f3156 0010 465f3156 0000 465f3156 0000 00000110 0010 95b3b7d6 7bd27fa2 36ae9ed5 96553176
+0 10 400004d0 010 00000111 d5cca141 46ee0d6c 26ccdcde 1dc41537 9a123c30 da7b76a3 9837b932 19aec1c9
+0 01 400007c8 010 00001010 a9cd9605 a6b7e490 c8ba97b2 a7c605a3 4bde1520 2e908b94 a7560b40 2aeef982 abb4d1fa 54a77ca3 abcc48fc
+0 01 40000205 000 00001100 e2065141 e2065141 e2065141 4f23042f 4f23042f 4f23042f 4f23042f fe0ba196 fe0ba196 fe0ba196 fe0ba196 1cb4a36a 1cb4a36a
+0 10 4000005e 001 00000111 4482effc 11a0d0b8 11a0d0b8 e471c137 e471c137 59eb82d0 59eb82d0 4482effc
+1 01 4000027c 010 00000010 6b608f77 1111 eee048b9 1111 116836ec 1111 00000270 0020 57920714 ac6efd59 ab0830ff 0fcceac2 be23525c 9cf398b1 532882c4 b6ed2e46
+0 01 4000046c 010 00000110 6375f1f3 1eb65362 d7f96efa 5fcc30e9 f0eeac2a b25dfa1f dadbc718
+1 01 40000440 010 00000010 b30f8288 1110 d8944911 1111 ef817afc 1111 00000440 0010 6f073506 d7e510c7 d05a7465 8230d081
+0 10 400007c4 001 00000001 1a6bf183 1a6bf183
+1 01 400001e4 001 00001101 ebdd3291 0010 ebdd3291 0000 ff81accd 0011 ff81accd 0100 ed8f25c9 0000 ed8f25c9 1100 4bb5f951 0010 4bb5f951 1100 87b10fbd 0011 87b10fbd 1000 b8497511 0011 b8497511 1100 a9f2ff88 0011 a9f2ff88 1100 000001e0 0020 4f94f8cd 5ce07118 236154ce b00a4941 dab57918 02325767 36be952b 47669abe
+1 01 400003d2 001 00000001 9c6a0000 1000 00008a5c 0011 000003d0 0010 63dcbeaf 5c2c618a 80264cdf faf5f884
+0 01 400005ce 001 00000100 018fb455 b66387e3 b66387e3 da589643 da589643
+1 01 40000064 010 00000110 2e1ea83e 0011 8a59ebe0 1111 fe496a2d 0111 ee15010f 1111 128b0939 1110 511bf9c0 0100 2c83ec12 1101 00000060 0020 6257a273 8bc18f30 f6ef00fb 51c474cb cfdfb56b 54a297d5 79fbe3ee 79ce120b
+1 01 4000003e 000 00001111 3c0d0000 0100 3c0d0000 1000 6d747e04 0001 6d747e04 0010 6d747e04 0100 6d747e04 0000 1bd2635a 0001 1bd2635a 0010 1bd2635a 0000 1bd2635a 1000 6a69b501 0001 6a69b501 0010 6a69b501 0100 6a69b501 0000 000092b4 0001 000092b4 0010 00000030 0020 4f816e39 a8aa7c01 a12ed2c8 07a84d69 917fba40 d2d11300 65b392bf 3445f305
+1 01 40000220 010 00001000 8b2f3362 0111 be4b8054 1111 2ca04f1c 0111 e8ba577a 1101 6519790c 1000 c014971a 0111 bceb3b17 1111 231bd209 1111 efa9e784 1111 00000220 0030 529837d7 1917d8e6 ed8ec564 288f773d b1fa977c 4e54bbad 57fbb305 cbbe08cc 23fd2283 4711978d 974205ab 26eea0e2
+0 01 4000067d 000 00001111 daeefeb6 daeefeb6 daeefeb6 abd5e0e6 abd5e0e6 abd5e0e6 abd5e0e6 27eef0bf 27eef0bf 27eef0bf 27eef0bf 2fa5f3e3 2fa5f3e3 2fa5f3e3 2fa5f3e3 c903b400
+1 01 40000204 010 00000001 fa29a770 0101 6bbd32e1 1010 00000200 0010 d2fcb670 1082774d b93cfd60 16b7a2f9
+0 10 400004cc 010 00001111 19aec1c9 d5cca141 46ee0d6c 26ccdcde 1dc41537 d3e6803b c0eef139 82531256 7e37988e 8168e6f6 e2a2f135 aba88282 1b7df1d1 9a123c30 da7b76a3 9837b932
+0 01 400007ec 000 00000011 54a77ca3 54a77ca3 54a77ca3 54a77ca3
+1 01 4000022c 010 00000010 34c79502 1111 3e86bc06 1111 c0a908bf 1010 00000220 0020 529837d7 1917d8e6 21dd84a8 5eb8ddc2 2044458f 00e9af9c 4e21fc91 c4fe332f
+0 10 400007e5 000 00000001 2aeef982 2aeef982
+1 01 400001f1 000 00001101 c3fadc00 0010 c3fadc00 0100 c3fadc00 1000 461df8c4 0000 461df8c4 0010 461df8c4 0100 461df8c4 1000 1d2c3334 0001 1d2c3334 0010 1d2c3334 0000 1d2c3334 0000 001af30b 0000 001af30b 0010 001af30b 0100 000001f0 0010 c715e88c e0fbb11f 522b7f52 3f63b858
+1 01 400001c8 001 00000101 3c2c391f 0011 3c2c391f 0100 0378c455 0001 0378c455 1100 2b9b92e9 0001 2b9b92e9 1100 000001c0 0020 dc55b43a 9d6bd457 650cee54 b61ad7b6 7b13f332 27ce4f0a 515d6e7d 0077ad12
+1 01 40000329 000 00000101 4a31a700 0010 4a31a700 0100 4a31a700 0000 00595a4d 0000 00595a4d 0000 00595a4d 0100 00000320 0010 f9c42aca 9671435a ef2bafa2 c35fbf12
+1 01 4000028e 001 00000101 d2f40000 1100 db42a6ae 0011 db42a6ae 1000 f698aedc 0011 f698aedc 1100 0000df61 0011 00000280 0020 be23525c 9cf398b1 3d60c373 99821e2e 74107f43 6f92cf67 af425adc 67e84c96
+1 01 400005b0 010 00001110 dc8e45a8 1101 db496f6e 1011 e4cdc83c 0111 27b3d53a 0010 44a02706 0110 444fe717 1111 08e123a4 1010 63aca35b 1111 9d865d89 1001 1730ca28 0111 4b7d47d5 1111 8c45c841 0101 5774f1e2 1011 b6d403b9 1011 efc52346 1011 000005b0 0040 85e7dc71 690ace07 eff2ffa0 c029994a 867511dd 82b548e9 ca8aa812 bd92c255 781d9bf5 7118e9b0 6790ef94 53800550 62eed57a ef943ed1 865fdf27 0c8ca229
+1 01 40000374 001 00000011 9385d605 0011 9385d605 1100 0a9be3b2 0010 0a9be3b2 1100 00000370 0010 2d61f89f 621ad29e 49290012 2440ee37
+0 10 40000208 001 00000111 6b23322f 6b23322f fe0ba196 fe0ba196 27e74934 27e74934 e2295170 e2295170
+1 01 4000012c 010 00001111 c655987b 1011 9e98247b 1110 9bebcee5 0111 f5d189be 1111 f70e026b 1011 babed90f 1111 284c3d2a 1111 1058fb56 1111 63f99caf 1011 0d59b05a 1100 b3e3767d 0110 f28e3bae 0111 60f5f936 1100 dd8ab109 1110 01bbcb2b 1111 5a0fdf05 1101 00000120 0050 e6e69739 0e2fba4c f7ac759f f61f7c94 51b74915 bce0edb6 cdf1cb39 f7f3f737 538a46b0 f9698c85 ef3c9a8b 2c169a0b 18307700 933d4c87 9a7b6f7f d3140540 1d14671d f4ea69f5 0567264a df6d1a34
+0 10 400000fc 010 00001111 8727f09c 4da7f030 df94de30 ae7c7332 9791c9bd 2436f0ae b6a7ba78 13a3ac32 e7d37077 9d6bc676 c6aff889 ab53267c 541e9af5 abccf03c daeef03d ee2a423e
+0 01 40000136 001 00001001 3cebcee5 f5d189be f5d189be f713026b f713026b babed90f babed90f 284c3d2a 284c3d2a 1058fb56
+0 01 400004fb 000 00000000 aba88282
+0 01 4000052a 001 00001101 8dafa273 702e0b1c 702e0b1c 522bf7ed 522bf7ed c2e42b04 c2e42b04 87c9c37d 87c9c37d 7cc08f8b 7cc08f8b 130d90de 130d90de 6d59a830
+1 01 40000778 001 00001010 f24a0a1a 0010 f24a0a1a 0000 8d77a2b1 0011 8d77a2b1 1100 a3a5bca3 0000 a3a5bca3 1000 4ed38646 0011 4ed38646 1100 2204c779 0011 2204c779 1100 0000bbf3 0001 00000770 0020 0cea2b92 1f65310f 246703e3 fcfcc951 2ad0fcb4 2dc493d3 1310127f d09f3c5b
+1 01 40000731 000 00001011 d308e600 0010 d308e600 0000 d308e600 1000 907186df 0000 907186df 0010 907186df 0000 907186df 0000 5333b639 0000 5333b639 0010 5333b639 0100 5333b639 0000 0000004a 0000 00000730 0010 717e33da c722ef25 b8535f93 acbcd6de
+1 01 40000174 010 00001110 9866b9d9 0111 e9a43ed7 1111 5e3f3d40 1111 0637e20c 1011 5bd5a7fe 1111 2bbcc43c 0111 92a74bb7 0110 ef24eb01 1101 703fd576 0110 0a70c779 1011 38d696e7 0110 ea05be37 1111 71b86763 0101 7fa0c7a9 1111 63b37b14 1111 00000170 0040 e3056c15 b67317bc f41995ee 4ac33608 b6e34529 f2a44fe7 18b3b36e a6efd168 bbc25fdd 0cde127b ea6bedc9 a767f0d1 7ef67bf2 9ec7cbcd 44fd9d77 5b010a3f
+0 10 400006ee 001 00000001 be9fa8f5 be9fa8f5
+0 10 400002b4 010 00000111 a8238888 587f7686 28cff092 78cb3856 ea9b40df 56d421c8 2a96eb84 206635ac
+0 10 4000028c 001 00001111 d2f4fb3b d2f4fb3b db61a6ae db61a6ae f698aedc f698aedc 2635df61 2635df61 0db8cc5e 0db8cc5e eee048b9 eee048b9 116836ec 116836ec 6fae8ebb 6fae8ebb
+1 01 400003f8 010 00001110 6eab4625 1110 ae634a86 1111 8ef1081d 1111 73ed8051 1001 ef8d670c 1111 79ea4004 0000 1b4a7469 0011 d78cbca1 1111 00e56d0f 0011 0668309b 1111 380f39b6 1101 89ce4491 1111 ef993ea6 1011 89311b3a 1111 2eda13ba 1100 000003f0 0050 0ffa32a7 79722f2f 6904b2a0 543520f6 6f944a01 d241ce3d d4f9309e e61b091c 35806f12 b25c2c82 e6e00dd0 03d7081d 40f2099a b06dfd4b 80aec2d4 4c70bec6 84c890ad 1fd641c0 c69cb54e 07f038e4
+0 10 400003a4 010 00000011 6400ef58 3362707b e07bd1e5 d722cbf2
+0 01 40000390 001 00000100 134f92b7 134f92b7 f4a2497d f4a2497d 659533f4
+1 01 400004e4 000 00000000 000000c5 0000 000004e0 0010 dc8caf70 a1b0a4da 6e4bae5e 4198604e
+0 10 4000048a 001 00000011 2e23f104 f058da8c f058da8c 2e23f104
+1 01 40000634 000 00001011 52a1a6af 0000 52a1a6af 0010 52a1a6af 0100 52a1a6af 1000 f9369d84 0000 f9369d84 0010 f9369d84 0100 f9369d84 1000 ffaf528f 0001 ffaf528f 0000 ffaf528f 0000 ffaf528f 0000 00000630 0010 9747087d 7f2d2bf0 cf0ed430 7f55d135
+0 01 4000070e 001 00000111 7568021f cacbb192 cacbb192 da4a6594 da4a6594 abcc19fb abcc19fb daeef1c7
+0 01 40000570 010 00001000 e3ea54ec 98d53183 71247db1 c86012f0 0742f613 a3adabd6 be79ef7d a46b5650 037381f9
+0 01 400007c3 000 00000000 ba80b9cf
+0 01 400003d2 001 00000010 9cccf0f4 da748a5c da748a5c
+1 01 400001d2 001 00000101 e5850000 0100 b860360b 0010 b860360b 1000 07b13986 0011 07b13986 1000 0000b545 0011 000001d0 0010 b0435fa6 0e93aa77 2e7014e2 61a5dfe5
+0 01 400004cc 010 00001110 19aec1c9 d5cca141 46ee0d6c 26ccdcde 1dc41537 d3e6803b c0eef139 82531256 7e37988e 8168e6f6 e2a2f135 aba88282 1b7df1d1 17de3bc6 daf222dd
+1 01 400006f0 000 00000010 00d85fc6 0000 00d85fc6 0010 00d85fc6 0100 000006f0 0010 b3527d10 76082577 43389546 d65b9de1
+1 01 4000006e 000 00000011 76880000 0100 76880000 1000 00009be9 0000 00009be9 0010 00000060 0020 6257a273 8bc18f30 7d3032b8 8d2d3c7a 98baab49 00dabdcb d390e20e befb4082
+1 01 400004fc 010 00001010 18f68c24 1011 7933e190 1111 ff1590c3 1111 182d2d0b 1001 aad5e186 1101 184e401b 1111 995ea8cc 1111 628d28ef 1111 0ae9d0f6 0010 1e1f6ca3 1101 4f50d1e1 1111 000004f0 0040 784ed487 3e371a0b 010082dd a21c27a7 7a1f24a1 85396c79 190f07b4 e86613b6 076236fc a83e8893 901821f3 c1f2eb1f c159780b eaf2cfd3 99da3197 c3ed04b3
+0 10 40000450 001 00000001 6fd31a54 6fd31a54
+1 01 400002f0 001 00000101 af06f254 0011 af06f254 1100 1a5187b7 0011 1a5187b7 1100 289ff32d 0001 289ff32d 1100 000002f0 0010 a8e7269c 16678617 e1e58f45 e0f67a0f
+1 01 40000438 000 00001101 be7c5e80 0001 be7c5e80 0000 be7c5e80 0000 be7c5e80 1000 d71e294e 0000 d71e294e 0010 d71e294e 0100 d71e294e 0000 299ad8ee 0001 299ad8ee 0000 299ad8ee 0100 299ad8ee 1000 0000075e 0000 0000075e 0010 00000430 0020 84c890ad 1fd641c0 47ef6bf7 d966f12b 9a674c6e f23249a3 92459789 2d00fbe5
+1 01 4000048c 001 00001000 e3fe0773 0011 e3fe0773 0100 03e963de 0010 03e963de 1100 7c2d8e3e 0001 7c2d8e3e 1100 66eb5d62 0010 66eb5d62 0100 000060bb 0011 00000480 0020 57a663d0 e9928ad3 dc2eba36 17205cb6 a9ee66bb 41ae707c bd66a015 31764d9b
+0 10 400006c8 001 00000001 0ad4f992 0ad4f992
+0 10 40000716 001 00000111 da4a6594 abcc19fb abcc19fb daeef1c7 daeef1c7 cacbb192 cacbb192 da4a6594
+1 01 4000020f 000 00001110 95000000 1000 3af17b0f 0001 3af17b0f 0000 3af17b0f 0100 3af17b0f 1000 3aa57329 0000 3aa57329 0000 3aa57329 0100 3aa57329 0000 1017a183 0001 1017a183 0010 1017a183 0100 1017a183 0000 0000d27d 0001 0000d27d 0010 00000200 0020 d2fcb670 1082774d bd38649d cc2febed 40af2033 8bd424e1 cd1380c4 787ebbcb
+0 10 40000031 000 00000011 9be6cf94 9be6cf94 9be6cf94 9be6cf94
+1 01 40000734 001 00000010 c1df2ac7 0011 c1df2ac7 1000 00008c27 0011 00000730 0010 448f2552 109a8664 a5c12e10 61f38924
+1 01 40000188 001 00001100 fd106d60 0011 fd106d60 1000 066588fe 0010 066588fe 1100 6f5d2e95 0011 6f5d2e95 0100 ff0f2e6a 0011 ff0f2e6a 1100 2bbb008d 0010 2bbb008d 0100 42ae96f8 0000 42ae96f8 1000 00003d16 0010 00000180 0030 b6e34529 f2a44fe7 e9d2442e 1bfebdc5 b3b85e4b fa54825e ce48f850 ffcc22f5 0fa9dce6 89fa11ec caefe04c 44dc9c54
+0 01 400002ac 001 00000110 2a96eb84 2a96eb84 206635ac 206635ac a8238888 a8238888 587f7686
+0 01 40000296 000 00000110 f698aedc f698aedc 2635df61 2635df61 2635df61 2635df61 0db8cc5e
+0 01 400005ea 001 00001111 efcc2346 b5dbf190 b5dbf190 6fcc386d 6fcc386d 2af0bb25 2af0bb25 abccf1e8 abccf1e8 daeef17f daeef17f bbccf180 bbccf180 80d2b979 80d2b979 b37114f0
+0 10 40000112 001 00000011 0f1ce3ed 3a2b91be 3a2b91be 0f1ce3ed
+1 01 40000214 010 00001110 368d45d7 0100 1b09c2df 1001 c19101d6 1101 d9bf3f47 0011 576ecd2a 1110 eef02694 0111 d44ac099 0111 c4224653 0101 23a2f8d5 1010 f8a43caf 1110 ecd6b7e3 1101 206c327e 0111 2d312392 1101 45a47136 1101 40ace000 0111 00000210 0040 6b5c96fa df7c50c7 4042dc44 18cbdb47 f747f008 c5d10a58 4a7ecec9 5f29a845 df8e9a13 1dc38f0a d4d36c45 fa6a9da9 ede37cdd 7d53fc00 aa20e0d5 f5a0ee10
+1 01 4000009e 001 00001000 a2390000 1000 d3aa42e9 0011 d3aa42e9 0100 7e907dd9 0001 7e907dd9 1100 695c1af1 0011 695c1af1 0100 10982617 0000 10982617 1100 00000090 0020 2adba054 e3408b74 0ec75ae9 aa7bf1e2 d75052b8 e9ce6535 7cac14ae e4493791
+1 01 40000780 010 00000101 22d834b5 1010 c1a99f84 1110 b1c69543 1111 59a2f47a 0110 970e5c2b 1001 f78e7e6f 1011 00000780 0020 9e54acfe 059298de 223d3b3d aa290b92 f45395a3 fde1f52d 1967204b 97b28c97
+0 01 4000043c 001 00000101 521e2962 521e2962 299a82ee 299a82ee d8940711 d8940711
+0 01 400005a0 010 00001110 2afbf19d 1eeecc69 abccf118 daeef16b dc8e1da8 db156f6e f5cdc83c 3036d56f 03a02769 444fe717 08e723c9 63aca35b 9d638789 da30ca28 4b7d47d5
+1 01 400000b9 000 00001110 24c51800 0000 24c51800 0100 24c51800 1000 fb9135a0 0001 fb9135a0 0010 fb9135a0 0100 fb9135a0 0000 e545d3b8 0001 e545d3b8 0010 e545d3b8 0000 e545d3b8 1000 bfb744a8 0001 bfb744a8 0010 bfb744a8 0000 bfb744a8 1000 000000b0 0020 99c0b61d 1426cd3e 72e365f3 61d7f1b3 39ba1e48 fba18d5e dc028a89 eefc4f93
+1 01 40000668 001 00001101 d2cdfd9c 0011 d2cdfd9c 0100 e8367a84 0011 e8367a84 1100 90df4d14 0010 90df4d14 1100 a45bdd67 0001 a45bdd67 1100 54821c83 0011 54821c83 1100 df2fb834 0011 df2fb834 1100 8ffcf363 0011 8ffcf363 0100 00000660 0030 e103f0be f51883d7 703f7896 7b271284 5abd994a 4b45a42b 29ddcde8 d55e8f6b b71017ca 181cb0a0 94ba1bc3 779d0ccf
+0 01 4000025c 010 00001011 d42388dc 82335a67 f585e053 9b36549a ccc67311 6c7b901a 563355e2 d770ffaf 6b608f77 eee048b9 116836ec 6fae8ebb
+1 01 40000412 001 00000001 01180000 1100 0000ff8e 0010 00000410 0010 1a476c9d 6e2dafa7 f45fb6c1 a54cf9b3
+1 01 40000556 000 00001111 c6380000 0100 c6380000 1000 1bf033d5 0001 1bf033d5 0010 1bf033d5 0100 1bf033d5 1000 f7a31c8b 0001 f7a31c8b 0010 f7a31c8b 0100 f7a31c8b 1000 1e46a982 0001 1e46a982 0010 1e46a982 0100 1e46a982 1000 00003381 0000 00003381 0010 00000550 0020 bc0be8fe 2c581a9c 7aae8c61 3c3355eb aec53adb 865eb366 c4048d04 a5bfafec
+0 10 400004e0 001 00000001 d3e6803b d3e6803b
+1 01 40000790 010 00001000 eda0d636 0111 ecdcb1e1 0111 4cde2318 1011 b7ae4651 1110 101e1a92 1001 dad96c21 0101 639ca02a 1110 cdcf2327 0111 32b74355 1111 00000790 0030 2fc7a8d6 5a4f9c40 20a3e9a9 1432dd0c 9181d2b4 42d9bbbd a6a198a2 7431a62a 359a52c0 9255567d 185e3c89 b0e0a877
+0 01 400003a3 000 00000011 d722cbf2 6400ef58 6400ef58 6400ef58
+1 01 40000274 010 00001111 4ff57259 1111 205c7df6 1111 50026ca0 1100 0d4f919e 0110 689ff785 1001 1ba49b07 1011 6eaac183 1011 a8ed2fe3 1111 39e4a357 1111 03f20d14 1111 48b50b4f 1100 05ff7d59 1010 e81386ca 1110 beb5d59f 1111 7bcef409 0111 1ec50b48 0001 00000270 0050 78727329 b6646885 601eadbd eefa79b4 24d1a313 15028c63 37379ba7 5b32c91c d2b7043d 1c0a78aa 5761900c c3377832 9a5a82a6 b0250c44 68d05bd1 daf8f8ea b09547b3 2803e411 398bd74e 555ef16b
+1 01 40000649 000 00000101 07b9d700 0010 07b9d700 0100 07b9d700 0000 00299038 0001 00299038 0000 00299038 0000 00000640 0010 488cae73 209c2124 f42a92ef 04cf87ac
+1 01 40000180 001 00001010 a98fc66a 0010 a98fc66a 1100 02b335de 0011 02b335de 0100 dc0eafc3 0001 dc0eafc3 1100 185bd6c3 0011 185bd6c3 1100 7e1d0a0a 0011 7e1d0a0a 1100 0000a2da 0011 00000180 0020 12735f4f 97cc8856 be2bec31 c2c33a95 8bf4bd86 866a7def c9bd29e2 656efa11
+1 01 400004ae 000 00000111 bab40000 0100 bab40000 0000 db1e280c 0000 db1e280c 0000 db1e280c 0000 db1e280c 1000 000082c5 0001 000082c5 0010 000004a0 0020 0e7e6638 13262f79 68165e04 9e98ea7d d03d9212 1b2fabbd 6ae8b340 056b773a
+0 10 400003d0 010 00000001 9cccf0f4 da748a5c
+1 01 400002a6 000 00000000 00260000 0000 000002a0 0010 9a5a82a6 b0250c44 68d05bd1 daf8f8ea
+0 01 4000060c 000 00000010 9623e79a 9623e79a 9623e79a
+0 01 40000180 010 00000100 a98fc60c 5bb335de dc0e6dc3 185bd6c3 7e1d0a0a
+1 01 4000026c 010 00000101 6dbf26ea 1111 8d5349c8 1101 19babb15 1111 915309bd 0111 eaf2729f 0111 558ccc6a 1100 00000260 0030 94007bb2 d8131053 664cce41 a28630db 229d44f8 4edf15f6 1128260a 30461726 c8a18d49 6e5cb233 01782da5 812e8403
+1 01 4000013c 000 00000101 84e68d60 0001 84e68d60 0010 84e68d60 0100 84e68d60 1000 0000ac2d 0000 0000ac2d 0000 00000130 0020 51b74915 bce0edb6 4bfb7021 956e4905 538a46b0 f9698c85 ef3c9a8b 2c169a0b
+0 01 40000620 001 00000101 804a9944 804a9944 efc8ae2e efc8ae2e b10030e4 b10030e4
+0 01 40000508 010 00001011 1809f10b aad50386 184e401b 995ea8cc 628d28ef 3294d086 1e1fbaa3 4f50d1e1 8dafa273 702e0b1c 522bf7ed c2e42b04
+1 01 40000616 001 00001110 d5870000 1100 3bc28554 0011 3bc28554 1100 b097f913 0010 b097f913 1100 1faf0de0 0011 1faf0de0 1100 d9609061 0011 d9609061 0100 f1174c47 0010 f1174c47 1100 6e6dd139 0011 6e6dd139 1100 cea941ef 0000 cea941ef 0100 00000610 0030 d19c5344 2bbee823 f2e954a4 11d4309c 4e775a23 25cada39 7e65f4cc 11921547 e5413611 1907ca66 b4553d4e 02991be7
+0 10 40000318 010 00000011 abb59734 a6a22321 ab95f0be 2b8fc65b
+0 10 4000020c 010 00001111 950ba196 3af1a30f 718dd20c 1b17a1df c191d2d6 f92f3f47 576ecd54 a3f02694 344ac099 3e22bc53 2314f81a f8a43c17 ecd6d2e3 27e74934 e2295170 6b23322f
+0 10 400005c8 010 00000001 08e723c9 63aca35b
+0 01 40000512 000 00001001 184e401b 184e401b 995ea8cc 995ea8cc 995ea8cc 995ea8cc 628d28ef 628d28ef 628d28ef 628d28ef
+0 10 40000534 001 00001111 c2e42b04 c2e42b04 87c9c37d 87c9c37d 7cc08f8b 7cc08f8b 1e1fbaa3 1e1fbaa3 4f50d1e1 4f50d1e1 8dafa273 8dafa273 702e0b1c 702e0b1c 522bf7ed 522bf7ed
+1 01 40000124 001 00001011 74e309d9 0010 74e309d9 1100 6e17c50a 0011 6e17c50a 1000 4e9d2649 0011 4e9d2649 1100 962d16b8 0010 962d16b8 1100 a3f9c1ae 0011 a3f9c1ae 1100 ba893fe2 0011 ba893fe2 1100 00000120 0020 fda2d167 39b9ccaa 35780f26 36714365 152a444f 34b0211e b880dd4d f5611f98
+1 01 4000064a 001 00000010 ba670000 1100 8ce23898 0001 8ce23898 1000 00000640 0010 488cae73 209c2124 7f584563 00d31308
+0 10 40000774 010 00000011 ede1ed42 8ef00a62 8d77a2b1 0f0cf7dc
+1 01 4000042c 010 00001001 d579c790 1000 c2724ec7 1101 f6e5cd1b 1111 f30c5770 1011 c19d3981 0111 61e9f13f 1010 fae45cc2 1111 f2da109e 1110 7a43327b 1110 58d0d09a 1011 00000420 0040 40f2099a b06dfd4b ce78927f 807d721d 51229e54 2d1b8c8c 5c088ea1 a8f0e1c3 1a67dc33 553c0604 0d4b325d b15dd2fa afd9d859 71cc6720 26313431 9388c306
+1 01 4000002a 000 00000100 80f10000 0100 80f10000 0000 000ecb39 0001 000ecb39 0010 000ecb39 0000 00000020 0010 17f3b3d6 c0f9e84a 749adc22 a103aa1d
+1 01 40000496 001 00000110 f3400000 1100 f5003e83 0011 f5003e83 1100 98ed8671 0011 98ed8671 1100 19ce0156 0011 19ce0156 0000 00000490 0020 dd7d936d e7cc28d9 26171efc 73022fc5 d3585e78 789b7952 27b69997 98ae69c2
+1 01 40000180 001 00000010 e204446f 0011 e204446f 0000 000094a8 0010 00000180 0010 cc35ccb5 47d37886 547c370a 8502d8ce
+0 01 40000508 010 00001101 1809f10b aad50386 184e401b 995ea8cc 628d28ef 3294d086 1e1fbaa3 4f50d1e1 8dafa273 702e0b1c 522bf7ed c2e42b04 87c9c37d 7cc08f8b
+0 01 400005b0 000 00001101 dc8e1da8 dc8e1da8 dc8e1da8 dc8e1da8 db156f6e db156f6e db156f6e db156f6e f5cdc83c f5cdc83c f5cdc83c f5cdc83c 3036d56f 3036d56f
+1 01 40000348 000 00000010 001cfab6 0001 001cfab6 0010 001cfab6 0100 00000340 0010 661cd2fd 83603be1 66af7a3d adc32d38
+1 01 400003cc 010 00000111 de758743 1111 bf463b5a 0110 59e947ea 1111 8c6ded9a 1110 f8de5f5e 1011 c043bd9b 1011 2dc6ddd4 1111 84ed5d4d 1101 000003c0 0030 a8bdbb95 5326baf7 b9d8c761 a7b07372 0de99670 46f146b0 d33433bc 1eaa1095 ade861e2 577fda8b a8a1e9a7 071f8462
+1 01 4000002b 000 00001001 50000000 0000 81f64430 0001 81f64430 0000 81f64430 0100 81f64430 0000 5dff51be 0001 5dff51be 0010 5dff51be 0100 5dff51be 0000 000000eb 0001 00000020 0020 17f3b3d6 c0f9e84a 86313c83 58b5205d a56e12df b949c27f 781e6b51 ab3333a3
+0 01 40000594 001 00001111 884fdb54 884fdb54 ab1cf1fe ab1cf1fe 35acb65e 35acb65e 2afbf19d 2afbf19d 1eeecc69 1eeecc69 abccf118 abccf118 daeef16b daeef16b dc8e1da8 dc8e1da8
+0 10 4000059c 010 00000111 35acb65e 0742f613 a3adabd6 be79ef7d a46b5650 037381f9 884fdb54 ab1cf1fe
+1 01 400003aa 001 00001010 be4d0000 0100 76f1b4c0 0011 76f1b4c0 1100 da72d73a 0001 da72d73a 0000 2b718e3c 0000 2b718e3c 0100 1f999078 0010 1f999078 1100 40d291f1 0011 40d291f1 1100 000003a0 0020 c7f71c94 e331ba4f ac53e83c 64c9549d 341cea52 9483a2cc 2e2340c4 2f88d5ad
+0 01 40000450 010 00000011 58d3d09a 7e3808b8 7b3b8108 a325d417
+0 01 400004c4 001 00000000 da7b76a3
+1 01 4000046f 000 00000001 2c000000 1000 000000ca 0001 00000460 0020 f80ae080 d8a919b3 044507b0 c37e7105 8b20009e b5945f87 30402ee3 a5657e93
+0 10 400003ce 001 00000011 de758743 5d887cba 5d887cba de758743
+0 01 40000770 001 00000110 0f0cf7dc 0f0cf7dc ede1ed42 ede1ed42 8ef00a62 8ef00a62 8d77a2b1
+1 01 400007b0 001 00000100 b63d03e4 0011 b63d03e4 1100 8baa72bf 0011 8baa72bf 0100 00004c2f 0010 000007b0 0010 1a4100b5 c30c4c5d 0900630e 842219eb
+0 10 400007f1 000 00000011 abcc48fc abcc48fc abcc48fc abcc48fc
+1 01 4000025e 000 00001100 a67b0000 0100 a67b0000 1000 1c4a7264 0001 1c4a7264 0010 1c4a7264 0100 1c4a7264 1000 38592d4d 0001 38592d4d 0010 38592d4d 0000 38592d4d 1000 00a5146d 0001 00a5146d 0010 00a5146d 0100 00000250 0020 ac79b737 d475c878 bb534830 2bb2638b 68279a3b e769111f 3c221015 5d55c29a
+0 01 40000260 010 00000011 1c4a7264 38852d4d 9ba5146d 6dbf26ea
+0 10 40000608 001 00000001 b37114f0 b37114f0
+0 01 40000038 010 00001101 ba29a8be 3c0d01f6 a8747e04 1b7f635a 6569b501 51e592b4 11a0d0b8 e471c137 59eb82d0 4482effc f3a2ac58 0a65a83e 8a59ebe0 76886a2d
+1 01 40000174 010 00000001 efee7272 1101 b74b22d4 1111 00000170 0010 67b4b4d5 0c32dac0 6eed89a1 04320aa6
+0 01 4000020a 001 00001011 6b23322f 950ba196 950ba196 3af1a30f 3af1a30f 718dd20c 718dd20c 1b17a1df 1b17a1df c191d2d6 c191d2d6 f92f3f47
+1 01 400003dc 010 00000010 8ecdfdc7 1101 6c5e568c 1101 10cca9a9 1110 000003d0 0020 0de99670 46f146b0 c452fff1 45a556dc 2a68cfde 5b37a8f7 4a116ab7 78964e04
+1 01 40000108 010 00001010 ee3afb5e 1101 38d1e846 1110 501622ac 1111 cbbbd00a 1011 1ce13783 1111 de4669de 1111 7c5f0aea 1111 c9ea8342 0111 92d3d5ac 1111 bd232953 1111 d0c163e3 1101 00000100 0040 ad050549 e34bbe19 7cb5d12d dd248f58 7504274c 1c6b2d1f 82584655 8851524a 4d4304a0 0716a4a0 f61ed95b a9285a5b 0233b198 e9ffb3f5 938eae2a 19b23914
+1 01 4000035e 000 00000000 00f70000 0000 00000350 0010 117ddc5a 65fd09bc 73286672 df33099f
+0 01 40000040 010 00001111 a8747e04 1b7f635a 6569b501 51e592b4 11a0d0b8 e471c137 59eb82d0 4482effc f3a2ac58 0a65a83e 8a59ebe0 76886a2d ee159b0f 128b095a 4a1b95d8 2c831412
+0 10 400004a6 000 00000001 702a65a5 702a65a5
+0 10 400000c1 000 00001111 e5a7d3b8 e5a7d3b8 e5a7d3b8 bf9444a8 bf9444a8 bf9444a8 bf9444a8 ae7c7332 ae7c7332 ae7c7332 ae7c7332 9791c9bd 9791c9bd 9791c9bd 9791c9bd e5a7d3b8
+1 01 400003b0 010 00000100 6c7a5ff5 1111 ea19e305 1001 4986051f 1111 03eeb01f 1110 e656a07b 1110 000003b0 0020 bd2bdf68 26482d5a 1ddb0bc7 f0c29296 1c14e49e ca64ced6 06cc9f39 944f08a4
+0 10 4000031c 000 00000001 a6a22321 a6a22321
+1 01 400002d4 010 00001010 0804f01d 1111 f96ffdb5 1010 21d1e0f2 0011 6bf8b578 1100 573ff6fc 0010 cc499b31 1111 e25e7bdb 0111 fbdd7d95 1111 ea6836c5 1000 6c29da88 1011 9a77c6f2 0111 000002d0 0030 6461320e e3b4e96f 8fb74260 91bd77c8 43d6d4fd 150bffa3 3546c7ea 068c58ec 68694b31 9d4cd5c8 4478f10e 471ff204
+1 01 40000284 010 00001111 858cde0f 1011 fb8e62ad 1111 b10c5167 0111 93a74c64 1011 73d74e73 1011 6f60c77b 1101 97bd456a 1111 9141a531 1010 aa8ffbf4 1111 c8c62ad0 1111 6db94a90 0111 0802871f 1111 82f8446d 1111 ad4d7782 0101 f19b9280 1101 84045a69 1101 00000280 0050 4a8d124c f398878a 7d079736 0121b720 084c5c5a 3be76d7f b188e6ea 4971f718 20a6edfe 0916daa7 59f5a434 1e3ade79 f56f2cc9 cbd08688 56cf907b 7960b00a f3f971ed 01d6ebaf d9015e74 ac8a3100
+0 01 40000059 000 00001111 59eb82d0 59eb82d0 59eb82d0 4482effc 4482effc 4482effc 4482effc f3a2ac58 f3a2ac58 f3a2ac58 f3a2ac58 0a65a83e 0a65a83e 0a65a83e 0a65a83e 8a59ebe0
+0 01 400000fc 001 00000100 8727f09c 8727f09c dbfaec42 dbfaec42 ee7a8581
+0 10 40000242 001 00001111 ef6c327e 2d312b92 2d312b92 45a40836 45a40836 4aace000 4aace000 7eee45ea 7eee45ea 872673c0 872673c0 ef009269 ef009269 a67b88dc a67b88dc ef6c327e
+0 10 400002ce 000 00000011 9d7c5351 9d7c5351 9d7c5351 9d7c5351
+0 01 40000034 001 00001011 b97710eb b97710eb ba29a8be ba29a8be 3c0d01f6 3c0d01f6 a8747e04 a8747e04 1b7f635a 1b7f635a 6569b501 6569b501
+0 01 4000014c 010 00001101 636b9caf 0d5941fb c6e376a3 2f8e3bae 60f533b9 dd8ab18a 01bbcb2b 5a0f7605 035b5490 086d2815 efeeb972 b74b22d4 5e3f3d40 a98f446f
+1 01 4000014e 001 00001000 57510000 0000 58edf15d 0011 58edf15d 1100 5e3c6884 0011 5e3c6884 1100 2f768f47 0011 2f768f47 0000 22506786 0010 22506786 1000 00000140 0020 538a46b0 f9698c85 ef3c9a8b 2c169a0b a6519c67 03f9d944 6e27de6f b24368e6
+0 01 400007ec 000 00001011 54a77ca3 54a77ca3 54a77ca3 54a77ca3 abcc48fc abcc48fc abcc48fc abcc48fc daeef106 daeef106 daeef106 daeef106
+0 01 40000324 000 00000010 d720fa0b d720fa0b d720fa0b
+0 10 4000077b 000 00000111 8ef00a62 8d77a2b1 8d77a2b1 8d77a2b1 8d77a2b1 8ef00a62 8ef00a62 8ef00a62
+1 01 40000428 010 00000111 278141ff 1111 697bb740 0011 22e0b0f6 1011 2b360de0 1111 d1d3f78a 1001 bf138887 1111 be3b7822 0010 28cba87f 1111 00000420 0030 40f2099a b06dfd4b 6ae9d7b0 d5fd6a9a b36d7c5d f47b2696 3abdc8a7 5d48f34f 03c7d4fa 933d6ef8 b41e3d4f d3fc9069
+1 01 400002b0 010 00001011 8ab62f5a 1101 fd196774 1111 4375e468 1111 560c5b2f 1100 0e928ec0 1111 0e3fd446 1011 d2a43070 1110 b2da7cc8 1101 70530f85 1010 d31b1e1b 0100 4fd9990a 1101 26648e67 1111 000002b0 0030 e61a2853 608a0dec e243b6ea 5bf3a90b c6601b94 110b15a1 ead33b2c b6864c75 3ddfd591 c9ac8771 6b4bf49e 1e6ef4ba
+1 01 400001a0 010 00000100 d0e330f0 1111 bc876ec5 0100 7b4183b5 0011 5920d393 1111 9ac2c841 1111 000001a0 0020 b77996e4 0752555f 9bd8c360 2da9b533 d49791c4 2eca6320 d5a55fbd 3af0a0e4
+1 01 40000188 001 00000101 db78bda8 0011 db78bda8 1100 c6beee00 0001 c6beee00 0100 960a1323 0010 960a1323 1000 00000180 0020 cc35ccb5 47d37886 c94e05bf e456e9cf 86e674fe 1f6ca4b7 71940bea fa23e667
+0 10 400006e4 000 00001111 4beef1b9 4beef1b9 4beef1b9 4beef1b9 e7898d3a e7898d3a e7898d3a e7898d3a be9fa8f5 be9fa8f5 be9fa8f5 be9fa8f5 ffccf1b8 ffccf1b8 ffccf1b8 ffccf1b8
+1 01 400002e4 010 00000011 2ee43dd1 1011 ebf208d3 0011 ef870d36 1111 f43c72ee 1111 000002e0 0020 89023bcd 6dc5392a 8ad8fb7d 8b5b021f 3704608e fb57137a 86b4e361 4a2c5e54
+1 01 4000029f 000 00000011 82000000 1000 00d88908 0001 00d88908 0010 00d88908 0100 00000290 0020 084c5c5a 3be76d7f 962a2dc4 85adccc4 6d2d61b7 c9c6ab16 cba4703f 4ebb5329
+1 01 400001ff 000 00001010 2d000000 1000 1b581c28 0000 1b581c28 0000 1b581c28 0100 1b581c28 1000 286f6e8c 0000 286f6e8c 0010 286f6e8c 0100 286f6e8c 1000 0000dbab 0001 0000dbab 0010 000001f0 0020 c715e88c e0fbb11f c0cf3645 27601774 4875b16b 10199182 b7dede70 1f30fd25
+0 01 40000438 000 00001101 d146578a d146578a d146578a d146578a bf138887 bf138887 bf138887 bf138887 619a78ee 619a78ee 619a78ee 619a78ee 28cba87f 28cba87f
+1 01 40000050 010 00000001 cd7e06f7 0111 88e0ea04 0111 00000050 0010 f06892dc 976a8e0f a451cadf 24c3ea63
+0 01 40000492 001 00001100 03e96361 f3401c3e f3401c3e f5003e83 f5003e83 98ed8671 98ed8671 30df0156 30df0156 702a65a5 702a65a5 e387459e e387459e
+1 01 4000006d 000 00000010 c2afad00 0010 c2afad00 0100 c2afad00 0000 00000060 0010 6257a273 8bc18f30 8595bd0e 73cba0dc
+1 01 4000022a 001 00001111 aeaf0000 1000 14fd04eb 0001 14fd04eb 0100 da2556d5 0001 da2556d5 0000 1f96cd80 0010 1f96cd80 1100 99ce90b8 0010 99ce90b8 1100 c304a282 0011 c304a282 1100 0f4c9c54 0011 0f4c9c54 1000 f53293af 0011 f53293af 1100 0000a620 0011 00000220 0030 f747f008 c5d10a58 362c4d60 97a0664a 628a2ecc 16e99377 a5b90252 3250851f 80df4825 3a8d065c 49017201 0ec7d6a6
+0 01 40000744 001 00001100 e6c5908f e6c5908f 20c3227e 20c3227e 39919414 39919414 5e22986f 5e22986f a4bf0b24 a4bf0b24 25ba1994 25ba1994 b8c330c6
+1 01 4000042c 010 00000110 4107958a 1111 be0b9e10 1101 b008e89a 0111 db4e8031 1111 741a789d 1010 65a21605 1001 3c3513f1 1000 00000420 0030 40f2099a b06dfd4b 0bb1d0d1 5c46178e 8b8991ec ce8b7812 5f46a5f0 543a26fc c94adc0c 3ef4a8ce 4b479b99 bb59828b
+0 10 4000035c 010 00000011 1dd7abb8 a4dcabc9 30cf4743 142e0f8d
+1 01 400004c8 001 00000101 89979697 0011 89979697 0000 c9920463 0001 c9920463 1100 c2afde76 0011 c2afde76 1100 000004c0 0020 f46219e7 604c59d4 042f12a6 55b0ef48 ccb360bc 0857519c f653447b 7a97806f
+1 01 40000293 000 00001001 7f000000 1000 63990069 0001 63990069 0010 63990069 0100 63990069 0000 840e0954 0001 840e0954 0000 840e0954 0100 840e0954 1000 0000009d 0000 00000290 0010 17c0f9af 8b26ed2c 78d81b7c 5e09c6f0
+0 10 40000464 010 00000011 e5f5764c 88b21ec8 2c75f1f3 c37a69fa
+1 01 400001ad 000 00000010 2d2ab600 0010 2d2ab600 0100 2d2ab600 1000 000001a0 0010 b77996e4 0752555f 18dd5651 e16221bb
+1 01 400003b8 010 00000110 5c646f4d 0110 246353e7 0110 2d953968 0111 202fd3c8 0100 07ec4e05 0111 7c12b6fb 0110 7a5e2e19 1110 000003b0 0030 bd2bdf68 26482d5a b63988e7 4f51d705 53fc7699 274d5b27 513c7de5 4c12794a 93ec7f7c 8bfce069 dd34f4f5 bf8dc345
+0 10 400001fc 001 00000011 2d1af388 2d1af388 b8493334 b8493334
+1 01 400004e5 000 00001010 95628f00 0010 95628f00 0000 95628f00 1000 ef0831ec 0000 ef0831ec 0000 ef0831ec 0000 ef0831ec 0000 6b4bf2e6 0001 6b4bf2e6 0010 6b4bf2e6 0000 6b4bf2e6 1000 000004e0 0010 e097c6b4 a43f7cff 25255475 5239fd70
+1 01 40000260 001 00001001 01c8836e 0011 01c8836e 1100 eae1d281 0011 eae1d281 1000 8ec522fc 0001 8ec522fc 1000 34a748b5 0011 34a748b5 1000 c52f8bd3 0000 c52f8bd3 1100 00000260 0020 fe928ad1 e69a2fc9 2e919f4d 3f50ed1d fcce4d46 0c1b01df 88d88fcb 2590b9bf
+1 01 40000124 010 00000010 6b2ca1ab 0001 849e8f32 1110 153e9f73 0111 00000120 0010 45840de2 605f7233 469db1ba 5e3d18e2
+0 10 400001ca 000 00000001 542c391f 542c391f
+1 01 4000028d 000 00001010 b0609c00 0010 b0609c00 0100 b0609c00 1000 1f6f912f 0000 1f6f912f 0000 1f6f912f 0100 1f6f912f 1000 40e46f0e 0000 40e46f0e 0010 40e46f0e 0000 40e46f0e 1000 00000280 0020 4a8d124c f398878a 3469ed08 e6bc10f2 7abe4162 188c2980 fb6bfb1e 8851f825
+0 01 40000256 001 00001011 872673c0 ef009269 ef009269 a67b88dc a67b88dc 01c8836e 01c8836e ea85d281 ea85d281 8ea514fc 8ea514fc 34bf48b5
+0 10 4000014c 001 00000111 636b9caf 636b9caf babed90f babed90f 284c3d2a 284c3d2a 1058fb56 1058fb56
+0 01 40000428 010 00001110 278141ff 4107958a be0bb010 2b08e89a db4e8031 74137887 659a7805 3ccba87f f2da10fc 7a4332c6 58d3d09a 7e3808b8 7b3b8108 a325d417 c37a69fa
+0 01 40000453 000 00000000 58d3d09a
+0 10 40000209 000 00000011 6b23dbab 6b23dbab 6b23dbab 6b23dbab
+0 10 40000585 000 00001111 a3adabd6 a3adabd6 a3adabd6 be79ef7d be79ef7d be79ef7d be79ef7d a46b5650 a46b5650 a46b5650 a46b5650 0742f613 0742f613 0742f613 0742f613 a3adabd6
+1 01 400004c0 001 00000110 f39d99df 0011 f39d99df 1000 59e447ce 0011 59e447ce 1000 a5e2c211 0011 a5e2c211 1100 0000cc89 0011 000004c0 0010 1de2023b 27da753a 45ec4498 dda389e3
+0 01 400005d4 010 00001101 da30ca28 4b7d47d5 0645ee41 57ccf1e2 b6ee03b9 efcc2346 b5dbf190 6fcc386d 2af0bb25 abccf1e8 daeef17f bbccf180 80d2b979 b37114f0
+1 01 400002d4 000 00001010 41ae722e 0001 41ae722e 0000 41ae722e 0100 41ae722e 1000 b87ac436 0000 b87ac436 0010 b87ac436 0100 b87ac436 1000 004f5440 0001 004f5440 0010 004f5440 0100 000002d0 0010 11d543cf d1f7a66e 17434b42 e1811a99
+1 01 400004ac 010 00001101 512eaa78 1111 8918e4e6 1011 e28dd845 1111 cf9359e3 1111 756c6bf4 1111 d1adcc36 1111 b34158cb 1011 e07fd7c0 1110 bb273d4d 1110 4238733c 1111 0bcd07b5 0011 43378c54 1111 5ccb5c4e 1101 c6bfd692 1100 000004a0 0050 d3585e78 789b7952 bc41b315 d2111ca3 2f400079 a0a012bd ea8974c2 f107e8bd 78cdd533 719eed77 f23bfab0 70b59685 df776b6a a5466a26 fc8a55ff 64224547 f035c347 6a2e9aab 2356ecd5 6d74b22e
+0 01 400005a8 010 00000000 abccf118
+0 10 4000022c 010 00000111 34fdc0eb 3e22bcd5 1f96cd1a 99ce9017 c304a282 f92f3f47 576ecd54 aef02694
+0 01 40000701 000 00001011 abccf1c0 abccf1c0 abccf1c0 9112f1c1 9112f1c1 9112f1c1 9112f1c1 4e24f12e 4e24f12e 4e24f12e 4e24f12e 7568021f
+0 01 40000504 010 00001010 ff1590c3 1809f10b aad50386 184e401b 995ea8cc 628d28ef 3294d086 1e1fbaa3 4f50d1e1 8dafa273 702e0b1c
+0 10 400006f4 001 00000001 4d90e395 4d90e395
+1 01 40000268 000 00001011 a9099519 0001 a9099519 0010 a9099519 0000 a9099519 0000 7b0fe58b 0001 7b0fe58b 0010 7b0fe58b 0100 7b0fe58b 1000 7990ac38 0001 7990ac38 0010 7990ac38 0000 7990ac38 1000 00000260 0020 fe928ad1 e69a2fc9 a3651433 c1c8df3e d131dd52 f1d4e1f4 33df3a67 6cc89593
+1 01 40000174 000 00001101 5f938a4f 0000 5f938a4f 0010 5f938a4f 0100 5f938a4f 1000 4cc0610e 0001 4cc0610e 0010 4cc0610e 0100 4cc0610e 1000 d9af4856 0001 d9af4856 0010 d9af4856 0100 d9af4856 1000 0000e3af 0001 0000e3af 0010 00000170 0020 c0d24b1c 7b48a23e e2184a52 e54333a5 739684d0 da6c7363 dbfa0e7d 5a343e35
+0 01 40000524 010 00001111 4f50d1e1 8dafa273 702e0b1c 522bf7ed c2e42b04 87c9c37d 7cc08f8b 130d90de 6d59a830 39f1f1a2 da5624bf 0006f1af c638cd12 1bf033d5 f7a31c8b 1e46a982
+0 10 40000042 001 00000011 a8747e04 1b7f635a 1b7f635a a8747e04
+0 10 40000350 001 00000011 a4dcabc9 a4dcabc9 30cf4743 30cf4743
+0 10 400004a9 000 00001111 e387459e e387459e e387459e 512eaa78 512eaa78 512eaa78 512eaa78 30df0156 30df0156 30df0156 30df0156 702a65a5 702a65a5 702a65a5 702a65a5 e387459e
+1 01 400000cc 001 00001010 502298f3 0001 502298f3 1100 60668277 0011 60668277 0100 0cd8facf 0001 0cd8facf 0100 33017c47 0001 33017c47 1100 cb065831 0011 cb065831 1100 0000216e 0011 000000c0 0030 39ba1e48 fba18d5e 3e12dbb9 66ff690d 75fb2eb4 a11f72dd a313453e 72980da7 98b9bb2d 1c607b52 32934c04 0d33f2fe
+0 10 40000654 010 00001111 daee9295 5a084ae6 da134579 fe29cb00 dafbf1e1 abcdfd9c e8367a84 90df4df4 a45bf167 54821c83 df2fb834 b6b5c973 3c6a9cf8 ba67d792 8c8c7c98 2e33bbd9
+1 01 40000124 000 00000111 999b6238 0001 999b6238 0010 999b6238 0100 999b6238 1000 a3bcb35a 0001 a3bcb35a 0010 a3bcb35a 0100 a3bcb35a 1000 00000120 0010 7758134b dfa26a5a ada7ea32 ecb93f4a
+1 01 400002e8 010 00000010 70c85bef 0110 be7f560c 0111 fffe77dd 1110 000002e0 0020 89023bcd 6dc5392a 32af6a36 70571634 e1c55fc3 a141671e 795d6c59 f03a2f5e
+1 01 4000025e 001 00000000 67000000 1000 00000250 0010 ac79b737 d475c878 b2ebdfc3 914e0cef
+0 01 400004fc 000 00000000 187d8c24
+1 01 4000043f 000 00000110 b3000000 1000 5f3ca62c 0001 5f3ca62c 0010 5f3ca62c 0100 5f3ca62c 1000 0000ebf2 0000 0000ebf2 0000 00000430 0020 8b8991ec ce8b7812 d2815dae 72509f45 b9745083 1024c36c 6596afb9 3b431999
+1 01 40000474 001 00001001 0e5ce442 0011 0e5ce442 1100 a8e2f156 0011 a8e2f156 1100 e862be77 0011 e862be77 0100 4f254792 0011 4f254792 1000 a47799d6 0011 a47799d6 1100 00000470 0020 4bcba871 04a6b6f4 947485f2 166768af e354d45d 1a1c1c44 4f551305 c7160abf
+0 10 4000024a 000 00000001 45a4a620 45a4a620
+1 01 400003e0 001 00001100 e9f860e5 0011 e9f860e5 1000 490faad7 0000 490faad7 1000 7dc8bc78 0001 7dc8bc78 1000 e98c1262 0011 e98c1262 1100 1edde67f 0011 1edde67f 0100 2baaed8a 0001 2baaed8a 0100 00000266 0011 000003e0 0020 d33ad63a 1a3f80eb bb87f41f 3e9e9514 df461445 72f83add 62458f24 93f1b9dc
+1 01 400000cd 000 00000110 51fe4d00 0010 51fe4d00 0100 51fe4d00 1000 3e2a1b5d 0001 3e2a1b5d 0000 3e2a1b5d 0100 3e2a1b5d 1000 000000c0 0020 39ba1e48 fba18d5e 96f62c36 08f727f7 5a789deb 225d8022 54655670 363b94dc
+0 01 40000754 010 00001110 a4bf0b24 25ba1994 b8c330c6 05fbbb7f d4c91ccd 95e1570c 224aff6a 0f0cf7dc ede1ed42 8ef00a62 8d77a2b1 22493446 c1a99f46 b1c69543 c5a2f4f3
+0 01 400005d6 000 00001110 da30ca28 da30ca28 4b7d47d5 4b7d47d5 4b7d47d5 4b7d47d5 0645ee41 0645ee41 0645ee41 0645ee41 57ccf1e2 57ccf1e2 57ccf1e2 57ccf1e2 b6ee03b9
+1 01 40000764 000 00000101 8022bce9 0001 8022bce9 0010 8022bce9 0000 8022bce9 1000 0000c891 0001 0000c891 0010 00000760 0010 117b7c10 e6ae5171 d8a6adff 1c489a30
+1 01 400005b4 001 00001010 73387b5b 0011 73387b5b 0100 08566f63 0011 08566f63 1100 c80bdede 0010 c80bdede 1100 097312ca 0010 097312ca 1100 8a83fb60 0011 8a83fb60 1100 00000ada 0011 000005b0 0020 26549439 6844b81a 5993d932 bd2f35a7 fd92c83b 704efa05 63b0160b b012cd98
+0 10 400005fc 001 00000001 daeef17f daeef17f
+0 10 400005de 001 00000111 0645ee41 9d638789 9d638789 da30ca28 da30ca28 4b7d47d5 4b7d47d5 0645ee41
+0 10 400005ec 001 00001111 b5dbf190 b5dbf190 6fcc386d 6fcc386d 2af0bb25 2af0bb25 abccf1e8 abccf1e8 daeef17f daeef17f 57ccf1e2 57ccf1e2 b6ee03b9 b6ee03b9 efcc2346 efcc2346
+0 10 40000662 000 00000111 fe29cb00 fe29cb00 dafbf1e1 dafbf1e1 dafbf1e1 dafbf1e1 fe29cb00 fe29cb00
+1 01 40000652 001 00000111 08750000 1100 f0c6e2fd 0000 f0c6e2fd 0100 a0f614ac 0011 a0f614ac 1000 294b15e4 0011 294b15e4 1100 00004795 0011 00000650 0020 b58e28db 12b7fc4c 535165af 586f93a1 27f2cc1a 7fd5661f 6dac0d69 95ac27db
+1 01 4000014c 000 00000011 d68fd3d2 0001 d68fd3d2 0010 d68fd3d2 0100 d68fd3d2 0000 00000140 0010 538a46b0 f9698c85 23eabb3d c026fca0
+0 01 400005ba 001 00001001 08566f63 c80bde6f c80bde6f 09731269 09731269 8a83fb60 8a83fb60 08e70ada 08e70ada 63aca35b
+1 01 4000018a 000 00000010 d32e0000 0100 d32e0000 1000 00000033 0001 00000180 0010 739684d0 da6c7363 86466769 579e23c5
+0 10 40000248 001 00000001 45a4a620 45a4a620
+1 01 400004e7 000 00000110 09000000 1000 c4825575 0000 c4825575 0000 c4825575 0100 c4825575 1000 00005b4f 0000 00005b4f 0010 000004e0 0010 5f424f8b c49e5ebb 0483a9eb 8d42f665
+1 01 40000122 001 00001010 db300000 0100 4f79d608 0000 4f79d608 1100 b5b52e84 0000 b5b52e84 1100 6e7eb43f 0001 6e7eb43f 0000 0eb81feb 0010 0eb81feb 1000 b4dd5233 0011 b4dd5233 1100 00000120 0020 db3b78da 33ebc2c3 cb10c763 69d1c391 0a7ed7df d38679f5 f1c00084 66fd3195
+1 01 400002ec 000 00001011 6f56d032 0001 6f56d032 0010 6f56d032 0100 6f56d032 0000 bd63842b 0001 bd63842b 0010 bd63842b 0100 bd63842b 0000 1abf90d6 0000 1abf90d6 0010 1abf90d6 0100 1abf90d6 1000 000002e0 0020 89023bcd 6dc5392a 0172cb7e 62cea976 587260f4 f081eac0 21a00665 785a2e67
+1 01 40000764 010 00000101 a8ecdaea 1010 4c24eb63 1110 f08ff568 1100 206591ee 0110 51629ef8 1111 dee401bf 1101 00000760 0020 2431431b 087a8260 3da1fb27 38bb9eb5 4294e8e8 ecf7ea68 aa732091 b4fbf98b
+1 01 40000532 001 00000010 32a60000 1100 ec519da3 0011 ec519da3 0100 00000530 0010 59f4254b 4a881141 ac1ab739 df63b1bc
+1 01 400001b1 000 00000110 e6a56400 0010 e6a56400 0000 e6a56400 1000 532258dd 0001 532258dd 0010 532258dd 0000 532258dd 1000 000001b0 0010 32779f44 006a38e7 8011786a 4664479e
+1 01 40000328 010 00000011 80665f7d 1111 b51aa802 0111 dbe94e33 0110 aaa19599 1110 00000320 0020 f9c42aca 9671435a 8c075367 206ca829 e7dfedf5 33ba4b9d cfa50ea1 bb2765f3
+1 01 40000638 010 00000011 f065fc56 1111 2bc0193f 0101 6d621245 1110 2d8d41d4 1110 00000630 0020 e5413611 1907ca66 471b2552 62e4893a 7e11ec4f 3f781a90 ef720934 141fd12c
+1 01 4000056a 001 00000001 5b040000 1100 0000ffe1 0011 00000560 0010 aec53adb 865eb366 ffd66546 53bca1bf
+0 10 40000627 000 00001111 ef609061 f1174ce4 f1174ce4 f1174ce4 f1174ce4 6e6dd139 6e6dd139 6e6dd139 6e6dd139 1faf0de0 1faf0de0 1faf0de0 1faf0de0 ef609061 ef609061 ef609061
+0 01 4000030d 000 00000100 9a8a86b4 9a8a86b4 9a8a86b4 ab95f0be ab95f0be
+0 01 40000618 001 00000000 3bc28554
+0 01 4000028a 001 00001100 fb8e62ad b0609c67 b0609c67 1f6f4c64 1f6f4c64 40996f69 40996f69 840e0d54 840e0d54 82bd456a 82bd456a 91d88908 91d88908
+0 10 40000498 010 00000111 f5003e83 98ed8671 4f5d4792 a47799d6 2e23f104 f0fe0773 03e96361 f3401c3e
+0 01 4000075c 001 00001010 b8c330c6 b8c330c6 05fbbb7f 05fbbb7f a8c9dae9 a8c9dae9 4c24eb91 4c24eb91 f08fff6a f08fff6a 0f6591dc
+0 10 40000010 010 00000111 436a7488 d6de0a67 a6aef28c 14d91991 55555555 55555555 88776655 88f96e55
+0 01 4000074e 000 00001000 39919414 39919414 5e22986f 5e22986f 5e22986f 5e22986f a4bf0b24 a4bf0b24 a4bf0b24
+1 01 4000048e 000 00000000 00c20000 0100 00000480 0010 e354d45d 1a1c1c44 0947a3d9 265bf4f6
+1 01 400004b8 010 00001011 3aca3eec 1111 867f95cd 0011 70cbcfa5 1011 e6d34d36 1111 fe4cb262 1111 15b6e6ca 1111 291a272d 1110 929c43e3 1110 5f2f0e6b 1110 889ea380 1011 45c76015 1111 d5b1f624 1111 000004b0 0040 2f400079 a0a012bd 826fdccf 52ced4c9 4f93c2ff 87bebc62 56246b45 06cc9c72 8d90691e adbe472a a63b0034 9bed1d89 5fe0b642 4201717f 6c635194 708f6bf9
+0 10 400003e6 001 00001111 49cca9d4 7dedf178 7dedf178 e98c1262 e98c1262 13dde67f 13dde67f f5aa5d8a f5aa5d8a 6eab0266 6eab0266 ae634a86 ae634a86 e95e60e5 e95e60e5 49cca9d4
+1 01 400001a0 010 00001100 0ba88f89 1111 81f64312 1111 417e7eb9 0111 e62fbc49 0100 ac41174f 0001 d8ed395a 0011 e8c0981b 0110 4c250bfe 0011 99542bc4 0111 0bbefefe 1110 548a1e46 1101 6422dc97 1111 15ff28b0 1111 000001a0 0040 1773333d f4461769 d3f64376 ba2859cb 1aa96628 8140d220 828b3b00 7e50e05c 5b4f7956 26c522e7 2590d6be 917e4cfa d9b25546 199c0bfc cc717910 21040f84
+1 01 4000063e 001 00000010 faaa0000 0100 7b93cadf 0001 7b93cadf 1100 00000630 0020 e5413611 1907ca66 6f95fe13 0e1343f2 25478c31 5cf7aafd f9ca2ccc 2eae959b
+1 01 400007b0 001 00001111 0edb94b3 0011 0edb94b3 1100 d82198bf 0011 d82198bf 1100 fba8602c 0011 fba8602c 1100 a6470925 0010 a6470925 0100 c55736b8 0001 c55736b8 1100 6b84e9b8 0011 6b84e9b8 1100 72d68665 0010 72d68665 1100 12162ebc 0011 12162ebc 1000 000007b0 0020 a7d75a90 961a5859 147a6d60 958a3e47 5c3260cc f35bb2c8 072ef9c4 794c3d69
+0 01 400002c4 001 00001000 0e3fd446 0e3fd446 d2a43078 d2a43078 b2da53c8 b2da53c8 70cd0fba 70cd0fba 41aef02e
+1 01 4000027e 001 00000100 1d210000 1100 11df3f88 0011 11df3f88 1100 9c7d3635 0010 9c7d3635 1000 00000270 0020 d131dd52 f1d4e1f4 06c5681d 34bda73e 7467cff8 af96ce0d 8d14af72 d706d2bc
+1 01 400005ef 000 00000100 af000000 1000 fbdeaa5f 0001 fbdeaa5f 0010 fbdeaa5f 0100 fbdeaa5f 1000 000005e0 0020 62eed57a ef943ed1 872f575e b2d010a9 9b99e837 1c1b0d59 e803e3a5 53e25566
+1 01 40000438 001 00000110 cec5be66 0011 cec5be66 0000 0b64e0af 0011 0b64e0af 0000 a4ba0ddc 0011 a4ba0ddc 1100 0000acea 0011 00000430 0020 8b8991ec ce8b7812 3b352a4b feb2f148 0863d3d2 d764fccb e366a98b 29dfb54f
+0 10 400000c0 001 00000001 e5a7d3b8 e5a7d3b8
+1 01 400004a0 001 00001100 efce6204 0010 efce6204 1100 60178429 0010 60178429 0100 a2efb47e 0000 a2efb47e 1100 d0edda65 0011 d0edda65 0000 dde68ac5 0011 dde68ac5 0000 cc9d9579 0000 cc9d9579 1100 0000769e 0001 000004a0 0020 bf1eff05 3389183c 5fb5df10 f4e53dd2 01cb20bd 429870de 47d132bf 31020f1e
+1 01 40000674 000 00001010 df08930a 0001 df08930a 0010 df08930a 0000 df08930a 1000 adeea2d0 0000 adeea2d0 0010 adeea2d0 0100 adeea2d0 1000 00121b7d 0001 00121b7d 0010 00121b7d 0100 00000670 0010 79118696 a3640ecc ed0072f6 d17932e5
+1 01 40000764 010 00000011 744227b3 1101 e94ab994 1100 d8ad1bdc 0111 4dbf44a9 1111 00000760 0020 806ea5e0 59f30ad9 06871f84 407fccc7 0abdabfa 45b4aaa4 cb1c3b64 71fc469e
+1 01 400001ca 000 00001100 ed8a0000 0000 ed8a0000 0000 d5c2265b 0000 d5c2265b 0010 d5c2265b 0100 d5c2265b 1000 1f279a7b 0001 1f279a7b 0010 1f279a7b 0100 1f279a7b 1000 00dac0c1 0001 00dac0c1 0010 00dac0c1 0100 000001c0 0020 5b4f7956 26c522e7 fd36690f a600b534 974afce2 c3e27de6 1ddc95a1 063a3f64
+1 01 4000040e 000 00000100 e8280000 0100 e8280000 1000 001bd8cc 0001 001bd8cc 0010 001bd8cc 0100 00000400 0020 6f944a01 d241ce3d f17b96d6 75ae697b 36cc5c12 6e64bc05 b3117403 e5c889f3
+1 01 400000c1 000 00001101 6e800e00 0010 6e800e00 0100 6e800e00 0000 90860953 0001 90860953 0010 90860953 0100 90860953 0000 cae2ae47 0000 cae2ae47 0010 cae2ae47 0100 cae2ae47 1000 005965a3 0001 005965a3 0000 005965a3 0000 000000c0 0010 332ea285 5f44ebb4 5a5fabd2 0b045834
+0 10 400003b6 001 00001111 ea719205 49646f1f 49646f1f 036353f1 036353f1 d722cbf2 d722cbf2 6400ef58 6400ef58 334d707b 334d707b 76f1b4c0 76f1b4c0 6c7a5ff5 6c7a5ff5 ea719205
+1 01 40000324 010 00000111 05c47d0b 1010 17c22477 1111 09e19cbb 1110 d6e383f9 1101 ba462cf5 1101 b282ab52 1111 32490d49 0111 503ec437 0101 00000320 0030 8fe2ad1f 910ff443 9b9508b2 ae72f5e3 4ccd4c97 25accac1 9ce91d30 360f9765 f10fa671 7ccb32c9 301d580e fc1100f4
+1 01 400004b4 010 00001110 60e01e91 1011 6c5c46cf 1111 6f908396 1011 0a10188e 1111 ba73c421 1111 6856b4ae 0111 322bcfbe 1011 19cc5772 0101 bfdb9426 1111 606d99d9 1110 c867afb2 0110 9c3b8944 1110 84e88e52 1110 147051d6 1011 21f054cc 1101 000004b0 0040 27e7c61b 805a7cb1 a3acc7b8 395a832f 61b44b63 8bc8e0a9 9c0133c2 89248447 eab39517 d6bb72cd 5848b0bc acedf47b 64b44a2f d5309cb3 c789660f 632c5ada
+1 01 4000025a 001 00000001 14e20000 1000 00003337 0011 00000250 0010 ac79b737 d475c878 b3d15d4e bbbca35c
+0 10 400001c9 000 00000111 548a3946 548a3946 548a3946 d5c22697 d5c22697 d5c22697 d5c22697 548a3946
+0 01 4000029c 001 00000010 82bd456a 82bd456a 91d88908
+0 01 400003e4 001 00001110 49cca9d4 49cca9d4 7dedf178 7dedf178 e98c1262 e98c1262 13dde67f 13dde67f f5aa5d8a f5aa5d8a 6eab0266 6eab0266 ae634a86 ae634a86 8ef1081d
+1 01 400007bc 000 00001111 0ef785ee 0001 0ef785ee 0010 0ef785ee 0000 0ef785ee 0000 0b2b075a 0001 0b2b075a 0000 0b2b075a 0100 0b2b075a 1000 0c1b8a2a 0001 0c1b8a2a 0000 0c1b8a2a 0100 0c1b8a2a 1000 bf55756a 0001 bf55756a 0000 bf55756a 0100 bf55756a 1000 000007b0 0020 a7d75a90 961a5859 14459703 83e5abd1 99f0e41d 6fecae5d b3e3a8cf 22ad7fe2
+0 10 400001ae 000 00001111 2d2fb693 2d2fb693 0ba88f89 0ba88f89 0ba88f89 0ba88f89 81f64312 81f64312 81f64312 81f64312 7f7e7eb9 7f7e7eb9 7f7e7eb9 7f7e7eb9 2d2fb693 2d2fb693
+0 10 4000061c 010 00000011 b097f9a8 65f4a217 d58704ed 3bc28554
+0 10 400007e5 000 00001111 2aeef982 2aeef982 2aeef982 abb4d1fa abb4d1fa abb4d1fa abb4d1fa 54a77ca3 54a77ca3 54a77ca3 54a77ca3 a7560b40 a7560b40 a7560b40 a7560b40 2aeef982
+0 01 400007c2 000 00001001 0b2bb95a 0b2bb95a 0c1be92a 0c1be92a 0c1be92a 0c1be92a bf55866a bf55866a bf55866a bf55866a
+0 10 400002b4 010 00001111 fd196774 4375e468 560cf080 11df3f88 9c68360f fb8e62ad b0609c67 1f6f4c64 40996f69 840e0d54 82bd456a 91d88908 aa8ffbf4 c8c62ad0 2ab94a90 8ab6875a
+0 10 40000200 010 00000011 1b584934 286f6e70 6b23dbab 950ba196
+0 10 400002c4 010 00000011 0e3fd446 d2a43078 b2da53c8 0e928ec0
+0 01 4000031d 000 00000100 a6a22321 a6a22321 a6a22321 00ccf043 00ccf043
+1 01 4000045c 001 00000000 0000abef 0001 00000450 0010 afd9d859 71cc6720 706fcf61 e05822ec
+0 10 400004c0 001 00000111 0a10188e 0a10188e ba73c421 ba73c421 fe56b4ae fe56b4ae 32b6cfbe 32b6cfbe
+0 01 400004d5 000 00001111 bfdb9426 bfdb9426 bfdb9426 606d9954 606d9954 606d9954 606d9954 8867af80 8867af80 8867af80 8867af80 9c3b8915 9c3b8915 9c3b8915 9c3b8915 84e88e24
+1 01 4000059a 001 00001101 d3bf0000 1000 344f8fcd 0011 344f8fcd 1100 0661da62 0010 0661da62 1100 fbf013f4 0010 fbf013f4 1100 b7eb61b7 0011 b7eb61b7 1100 a50d181d 0011 a50d181d 0100 46fabaf2 0000 46fabaf2 1100 0000f1a1 0001 00000590 0030 568e912e e663a818 5a6ed6fd b37161a5 e3570078 0096fd84 2ac8f3d9 69882e43 cecb1818 648e0a76 650f156d 68a788f4
+1 01 40000662 001 00000101 e1510000 1000 c00c683c 0010 c00c683c 1100 da40912e 0011 da40912e 1100 0000382a 0011 00000660 0010 49429aaa e6edb439 01c22507 90f47fcf
+1 01 40000480 001 00001100 4e569411 0010 4e569411 1100 20e3353b 0011 20e3353b 1100 ecb35d2b 0001 ecb35d2b 1000 34e11277 0010 34e11277 0100 108c885e 0011 108c885e 1100 9c757656 0001 9c757656 0100 0000fd92 0010 00000480 0020 18b21955 94291cbd 6dadc1f3 55276175 3854e13c 34a88b89 f6cb666c 79510bc1
+1 01 4000041c 010 00000110 65526b6e 0111 47ef8204 0111 62bdc2ee 1011 f473e274 1001 f7de9c47 0101 54b2ea3c 1111 ba68e482 0111 00000410 0030 36cc5c12 6e64bc05 b3037668 12dda2f7 0913d306 8cb01eaa 6b1797cd f9d25716 b3430d37 2cf969c8 e623fc5b 89571caa
+0 10 40000698 010 00000001 f6825c98 700b07ed
+0 10 400002f2 000 00000111 ff63842b ff63842b 1abf90b7 1abf90b7 1abf90b7 1abf90b7 ff63842b ff63842b
+1 01 4000026c 010 00001101 f005464e 1101 057cab78 0000 606a742d 0101 2cc28bb8 1111 6277ce4e 1111 acfa0824 0011 365aec3a 1011 e9eae112 0111 d7804af4 1100 dfb05632 0110 74bb654f 1111 341b2481 1101 fb197813 1111 169b4584 0111 00000260 0050 fe928ad1 e69a2fc9 b62a29f0 cfe55000 82cb67f4 db269f70 6f0b5452 91a59048 99bc787d a89e66e0 98ba0762 42877b94 c6092ddc 0322df82 564ce5d2 53d31031 d16b724f 72785650 00c92c79 9bad3728
+1 01 400006bd 000 00001110 3c19ed00 0010 3c19ed00 0100 3c19ed00 1000 463f7a1a 0001 463f7a1a 0010 463f7a1a 0100 463f7a1a 0000 4d4c467f 0001 4d4c467f 0010 4d4c467f 0100 4d4c467f 1000 09c54a66 0001 09c54a66 0010 09c54a66 0100 09c54a66 1000 000006b0 0020 d2d1a0a2 30c1be53 ff1c9aed 6ed05ecb b6ca3139 70a29d6c 9faf1598 d16f0d4f
+1 01 4000020f 000 00001011 c6000000 1000 9ee778c8 0001 9ee778c8 0010 9ee778c8 0100 9ee778c8 1000 bfe72feb 0001 bfe72feb 0000 bfe72feb 0100 bfe72feb 1000 0097ef44 0001 0097ef44 0010 0097ef44 0000 00000200 0020 4875b16b 10199182 80165138 72ae1b40 f35b656d 5dcaf0a6 b4586736 6a33af25
+0 10 40000231 000 00000111 3e22bcd5 3e22bcd5 3e22bcd5 1f96cd1a 1f96cd1a 1f96cd1a 1f96cd1a 3e22bcd5
+0 01 400000c3 000 00000000 e5800eb8
+0 01 4000046d 000 00001110 2c75f1f3 2c75f1f3 2c75f1f3 1eb653ca 1eb653ca 1eb653ca 1eb653ca 0e5ce442 0e5ce442 0e5ce442 0e5ce442 a8e2f156 a8e2f156 a8e2f156 a8e2f156
+1 01 4000066b 000 00000000 d9000000 1000 00000660 0010 49429aaa e6edb439 aa404fcf 1e652275
+0 01 4000045c 010 00001010 a325d4ef c37a69fa e5f5764c 88b21ec8 2c75f1f3 1eb653ca 0e5ce442 a8e2f156 f062be77 4e569492 20e3353b
+0 10 40000298 010 00000111 341b0d81 fb197813 11df0824 3668ec3a fbeae112 d7809c67 1fb05664 74bb654f
+1 01 40000080 001 00000010 f784f102 0001 f784f102 1100 00008f6e 0011 00000080 0010 c2373104 2341c7bc 6ddeccc1 7b0ce1f7
+0 10 400000a1 000 00000111 8caa42e9 8caa42e9 8caa42e9 7e909ed9 7e909ed9 7e909ed9 7e909ed9 8caa42e9
+0 10 400004c0 010 00000011 0a10188e ba73c421 fe56b4ae 32b6cfbe
+0 10 40000378 001 00000111 0a9be3c1 0a9be3c1 daeef0df daeef0df 89dfaf30 89dfaf30 9385d605 9385d605
+1 01 40000056 000 00001001 6c020000 0100 6c020000 1000 a9cea20f 0001 a9cea20f 0000 a9cea20f 0100 a9cea20f 0000 c76e4867 0001 c76e4867 0010 c76e4867 0000 c76e4867 1000 00000050 0010 79908bf0 ec59e895 ca956415 5c308c1d
+1 01 400003f3 000 00001000 48000000 0000 f412a313 0001 f412a313 0010 f412a313 0100 f412a313 1000 76838b70 0001 76838b70 0010 76838b70 0100 76838b70 1000 000003f0 0010 48542307 9409c7e2 b411349c f11715aa
+1 01 4000071e 000 00001000 0c3e0000 0100 0c3e0000 1000 aaa800f4 0000 aaa800f4 0010 aaa800f4 0000 aaa800f4 1000 00769552 0000 00769552 0010 00769552 0100 00000710 0020 37d652f0 e1c50a4f 57891d4a d0ca84bf db7d6f38 72fc87e9 9736c57d 9f964b77
+1 01 4000075c 010 00000111 c90569bf 1111 b376f834 0011 624f8aff 1100 a1df2e26 1111 8f0f732e 1001 fd28dcaf 0101 c01a9797 1101 c1622ec9 1010 00000750 0030 ab0015b3 c31d1779 0652d86c 38cb50a7 6035d2c6 e6525868 51c1e38b 327934fd eb3b3250 992ec063 f1641305 145122c0
+1 01 4000037c 010 00000111 cd0f6405 1110 1cde8431 0011 13ea6ced 1111 8e58542c 1111 aedbba3e 1110 7946888e 1101 5fda7c62 1111 ee5e2acc 1111 00000370 0030 2d61f89f 621ad29e 732cc0de aa18d0ba edff35d4 775f4cfe 8fe3730c 88237990 ce9e0706 1149cc3b 980d727b 9f4916a9
+1 01 4000074c 010 00000100 795e736a 1011 7234a74f 1001 d57f3efe 1011 830cb59b 1111 8e3bfb06 0111 00000740 0020 7703f4a2 d9be9ad8 6011bf85 103d3502 752ec6a7 5a6d297d 7d6becaf 19d6e751
+1 01 40000784 010 00001101 a14d1b69 1111 cdbc30fb 0101 29ea6acb 1111 106f86af 1111 8ab226d1 1110 b37d907b 1111 8cffc0cd 1111 339f7669 1111 6f4084cb 0100 c0e4171e 0001 47b8d8dc 1111 a0b64a13 0111 4870d232 0111 3ed950b9 1111 00000780 0040 622d78b6 b3fe9d62 ca3fc710 e9656514 5f0e99b7 8698f95b ce710ff6 f10d9c10 2ad35f62 c47f1c66 c80f80b9 c65efe64 30a1c4a4 f230582e 0f87745f 4927ffac
+0 01 40000678 010 00000110 adeea283 df121b7d abfcf363 27eef0bf 2fa5f3e3 c903b400 4c72a315
+0 10 400006c8 010 00000001 09c54a66 dab7f108
+1 01 40000556 000 00000101 2b5b0000 0100 2b5b0000 1000 a4e083b1 0001 a4e083b1 0010 a4e083b1 0100 a4e083b1 1000 00000550 0010 844f6d02 7f8a3288 c1c00976 0de5bea0
+1 01 400007b6 001 00001001 bee00000 1100 1552888e 0010 1552888e 1100 424a3d3b 0001 424a3d3b 1100 4f7572ae 0010 4f7572ae 0100 13ffef27 0001 13ffef27 1100 000072e7 0011 000007b0 0020 a5d9e3a3 e1d96c71 2670cb97 9df1ba14 91729b38 d6306ac2 babbf6f0 05bad1e8
+0 01 400000a0 010 00000111 8caa42e9 7e909ed9 cd5c1af1 1098f098 abccf02c daeef02d 24c5f02e da9135a0
+1 01 40000081 000 00001010 bdb8f500 0010 bdb8f500 0100 bdb8f500 1000 60ce0fa3 0001 60ce0fa3 0010 60ce0fa3 0100 60ce0fa3 0000 32fc639a 0001 32fc639a 0010 32fc639a 0100 32fc639a 1000 00000080 0010 064ed847 12c8da33 6b0f7d8b ee56ca97
+1 01 400003a0 010 00001111 e9b33e57 0101 96abd452 1111 c0f08d7d 1110 2b93fb8d 0101 df9a7e0a 1111 e61d1218 1111 ed9f248e 1111 c21f8cfa 1111 8bd1127c 0110 0804071c 0110 1f27e0d4 1111 cce86faa 1111 fd29fe50 1110 cbb63605 1111 c9418f54 1111 21b886d2 0110 000003a0 0040 0720571a e0edae3b 66110b49 5f98977f 3ca04277 11fbe2e4 95efb909 875b9364 3d5aee55 d4ce2a50 513e8497 b056da7b c4d30df7 2e82d446 b4f2084d e50e7136
+1 01 40000280 000 00001110 8cd60eb0 0001 8cd60eb0 0010 8cd60eb0 0100 8cd60eb0 1000 16da496a 0000 16da496a 0010 16da496a 0000 16da496a 1000 483522db 0001 483522db 0010 483522db 0100 483522db 0000 009ba788 0001 009ba788 0000 009ba788 0100 00000280 0010 e06ac155 c043ff19 79c1b4ba 5ed8d8c9
+0 10 400006f6 001 00000011 4d90e395 51d85f38 51d85f38 4d90e395
+0 10 40000347 000 00000111 a419f04c 0f3e9a37 0f3e9a37 0f3e9a37 0f3e9a37 a419f04c a419f04c a419f04c
+0 10 40000500 010 00001111 7933e190 ff1590c3 1809f10b aad50386 184e401b 995ea8cc 628d28ef 3294d086 1e1fbaa3 4f50d1e1 8dafa273 702e0b1c 32a6f7ed c2519da3 87c9c37d 7cc08f8b
+0 10 400006d8 010 00000111 abccf1b6 eaeeda4e f53f7a1a 4d4c467f 09c54a66 dab7f108 abcc00b4 daeef1b5
+0 01 4000012c 000 00001101 bd3e9f3f bd3e9f3f bd3e9f3f bd3e9f3f 0ec11fe3 0ec11fe3 0ec11fe3 0ec11fe3 b4dd5233 b4dd5233 b4dd5233 b4dd5233 ba893fe2 ba893fe2
+0 01 40000202 001 00000011 1b584934 286f6e70 286f6e70 6b23dbab
+1 01 4000076c 001 00000010 cf0af80a 0011 cf0af80a 1100 0000ae7e 0001 00000760 0020 6035d2c6 e6525868 1f627312 27b0a35e e506b0c1 1cbf03f6 b18c55fc 37a2712d
+0 01 400000f8 000 00001001 ee2a423e ee2a423e ee2a423e ee2a423e 8727f09c 8727f09c 8727f09c 8727f09c dbfaec42 dbfaec42
+1 01 400004fe 001 00000101 5f0b0000 1100 74b8eb0f 0000 74b8eb0f 1100 9bbb1d81 0011 9bbb1d81 0100 000062e5 0010 000004f0 0020 784ed487 3e371a0b ce444d8c 86f8d7d1 dcdc6bd6 4120db72 5e3967ac 96b5ef7a
+1 01 40000049 000 00001100 558d7c00 0010 558d7c00 0100 558d7c00 0000 9a4c128a 0001 9a4c128a 0000 9a4c128a 0000 9a4c128a 0000 379ea64d 0001 379ea64d 0010 379ea64d 0000 379ea64d 1000 0000e30f 0001 0000e30f 0010 00000040 0020 917fba40 d2d11300 080d9f5e 2860bc35 3f6c3e8e c6ed374c 79200935 1c00bd9f
+1 01 4000064a 000 00000101 d0d10000 0100 d0d10000 1000 74332ca4 0001 74332ca4 0010 74332ca4 0100 74332ca4 1000 00000640 0010 25478c31 5cf7aafd 945d043d 8beaa84c
+1 01 400007a8 000 00001100 8c51a39e 0001 8c51a39e 0010 8c51a39e 0100 8c51a39e 1000 4876a969 0001 4876a969 0010 4876a969 0100 4876a969 0000 c2331105 0001 c2331105 0010 c2331105 0100 c2331105 1000 000000cc 0001 000007a0 0020 2ad35f62 c47f1c66 e545303e dc43cbda dd0ffe22 29201b12 15fb2d3a ca34e5e0
+0 10 40000266 001 00000001 ea85d281 ea85d281
+0 10 400002d0 000 00000111 70cd0fba 70cd0fba 70cd0fba 70cd0fba 41aef02e 41aef02e 41aef02e 41aef02e
+0 01 4000046f 000 00001001 2c75f1f3 1eb653ca 1eb653ca 1eb653ca 1eb653ca 0e5ce442 0e5ce442 0e5ce442 0e5ce442 a8e2f156
+1 01 40000048 001 00000101 682d51b7 0011 682d51b7 1100 2ed8eba5 0011 2ed8eba5 1100 faf74e8a 0001 faf74e8a 1100 00000040 0020 917fba40 d2d11300 2b12062a d40e91a2 ef4adfda abe5c09d 4308a8ec 23c8532b
+0 10 4000025e 000 00000001 677b3337 677b3337
+0 10 400001b8 010 00000011 30c098df fcd00bfe e6c2644f 532e395a
+1 01 40000748 010 00001110 ffe4bef2 1101 c91a5645 0111 9f049a87 1011 3dbb03ed 1111 1af31392 1101 c8ea31cd 1111 6d052579 0111 7af6f4bb 1011 37d439c6 1111 384a873a 1100 12f72aa9 1111 2a2b43e2 1001 b9d66cf6 1111 9a9f8cba 1010 f67575e6 1110 00000740 0050 7703f4a2 d9be9ad8 9cd15f5c 571d7b29 727754d9 5723457b 4a0ed7d3 a5252771 5f51f7f6 791dcf62 fc85f311 0b6cb9f7 a265f3f1 9c86bdf3 66c104ad 05db0af3 0b0cddcf faad1fdb 7e94e681 f76316e8
+1 01 40000604 001 00001010 2a2dd566 0011 2a2dd566 0100 4dbfb4e0 0011 4dbfb4e0 0100 04aaceb1 0011 04aaceb1 1100 46e36d79 0000 46e36d79 1100 cafce4b1 0000 cafce4b1 1000 00003902 0011 00000600 0020 0186b7cb 17267409 63b52acc ee653001 2eb35b68 c9ef88d2 98b8e637 57e90ce9
+0 10 400000fc 001 00000001 8727f09c 8727f09c
+0 01 40000376 000 00001100 9385d605 9385d605 0a9be3c1 0a9be3c1 0a9be3c1 0a9be3c1 cd0f64df cd0f64df cd0f64df cd0f64df 053e8431 053e8431 053e8431
+0 10 40000118 000 00000111 1ce13783 1ce13783 1ce13783 1ce13783 de4669de de4669de de4669de de4669de
+0 01 40000560 010 00001110 1e46a982 01023359 5b04fa9e 6444ffe1 e3ea54ec 98d53183 71247db1 c86012f0 0742f613 a3adabd6 be79ef7d a46b5650 037381f9 884fdb54 d31cf1fe
+1 01 4000075a 000 00001100 cea60000 0000 cea60000 1000 72c9173f 0000 72c9173f 0010 72c9173f 0100 72c9173f 1000 ad96cccb 0000 ad96cccb 0010 ad96cccb 0000 ad96cccb 1000 00da7162 0001 00da7162 0010 00da7162 0000 00000750 0020 727754d9 5723457b 5d50e416 a017a552 303e2ea6 00731f9e 7d91d034 799f5981
+1 01 4000055e 000 00001111 aa180000 0100 aa180000 0000 c42c4834 0001 c42c4834 0000 c42c4834 0100 c42c4834 1000 dfaec9d8 0001 dfaec9d8 0010 dfaec9d8 0100 dfaec9d8 1000 31a40930 0001 31a40930 0000 31a40930 0000 31a40930 1000 0000b2d3 0001 0000b2d3 0010 00000550 0020 844f6d02 7f8a3288 791b81bb 27e1f595 b385dcd5 5d7143a8 33ac7349 17284d50
+1 01 40000236 001 00001000 72a10000 1100 97879f0c 0010 97879f0c 1000 3cda815b 0011 3cda815b 1100 5a4edc33 0011 5a4edc33 1100 11f1f701 0011 11f1f701 0100 00000230 0020 81b90852 8e803b8b c750b095 3581a957 c127b095 f4da0279 83344d71 12f9dd6a
+0 01 40000788 001 00000100 b1bc95fb b1bc95fb 29ea6acb 29ea6acb 106f86af
+0 10 40000266 001 00000111 ea85d281 8ea59519 8ea59519 f005e54e f005e54e 01c8836e 01c8836e ea85d281
+1 01 40000224 010 00001010 f7ab8385 1110 9f99ee96 1111 516b401a 1110 0ad3923d 1011 3f993f92 1011 5c7a646f 1111 86c634b9 1101 21a4b92e 1001 f18deda6 1010 b3974685 1111 d590b64d 1111 00000220 0030 b062ff9e c01eb371 5611e899 38fdc227 5db036e5 638438f4 d289e2b7 4513be2f b5ff1dcd 82ad4404 98e8c96f 383a5ce4
+1 01 4000010c 010 00001001 a3338100 1111 f5f4dee6 0100 ddcf2c1b 1011 712c4e6c 1111 f673e44f 0011 4726305f 1101 9ac60d80 1111 f1475318 0110 48f35638 1011 e5b8df4b 0110 00000100 0040 ad050549 e34bbe19 b69e9e15 7115ff9e 7f3069eb 7f1f3622 fe69321f 1ffee1d3 54d6f24e 860170cf 9ecf0137 1138878e 3f01d385 f1ea75ba 9146180c 9e0fe5a2
+0 01 40000090 001 00001000 a5455fa0 a5455fa0 930bbce5 930bbce5 2b15a8a0 2b15a8a0 a20cb44b a20cb44b 8caa42e9
+0 01 40000784 001 00000110 a14d1b69 a14d1b69 b1bc95fb b1bc95fb 29ea6acb 29ea6acb 106f86af
+1 01 400004df 000 00001110 13000000 1000 380f672d 0001 380f672d 0010 380f672d 0100 380f672d 1000 61c9f5e7 0001 61c9f5e7 0010 61c9f5e7 0100 61c9f5e7 1000 4d7e8fe8 0000 4d7e8fe8 0010 4d7e8fe8 0100 4d7e8fe8 1000 000009b9 0001 000009b9 0010 000004d0 0020 eab39517 d6bb72cd 9362b164 fe5e1cc8 2bf784aa cec4ffb9 fbe994c7 6f4b3299
+1 01 400001c4 010 00001011 566cbc4b 1111 fe40a719 1111 de376dec 0101 01f05000 0001 5a0dbe59 1101 80855b4f 1111 3fed7e07 1111 ba2ec4d5 1101 71324706 1111 8026674a 0111 13bfda16 1000 142439ba 1111 000001c0 0040 e5f26779 e4f5d182 c8d0d838 e6d911cb 8da9c52a bfa40723 7d54b79d a6e84cd0 e3cc7180 9ce65122 1ad886d2 2f454d88 ae7ca076 db0392d9 5c2d8e45 661732a1
+1 01 4000019c 001 00000000 0000a28f 0011 00000190 0010 86e674fe 1f6ca4b7 e6c68604 115e90d7
+0 01 4000055c 000 00001110 f7181c8b f7181c8b f7181c8b f7181c8b c42ca934 c42ca934 c42ca934 c42ca934 dfaec9d8 dfaec9d8 dfaec9d8 dfaec9d8 3104fa30 3104fa30 3104fa30
+1 01 400006c7 000 00001001 a6000000 1000 5ae872d2 0000 5ae872d2 0010 5ae872d2 0000 5ae872d2 1000 99f68fc1 0001 99f68fc1 0000 99f68fc1 0100 99f68fc1 0000 000000a0 0001 000006c0 0020 2d5b4aca e483b2be ed76ea3f 9d80ab1e 3578e03c 3d217cf7 42c6e8b9 bfebb615
+0 01 4000072c 000 00001010 ad5274f7 ad5274f7 ad5274f7 ad5274f7 d367e694 d367e694 d367e694 d367e694 c1282ac7 c1282ac7 c1282ac7
+0 10 40000260 010 00000011 01c8836e ea85d281 8ea59519 f005e54e
+0 10 40000468 001 00000011 88b21ec8 88b21ec8 2c75f1f3 2c75f1f3
+0 01 40000418 010 00001100 622a6d0f 06526b6e 38ef8204 62cec2ee f4814174 41de9547 54b2ea3c 2b68e482 db4ebe66 b313e0af a4ba0ddc 3ccbacea f2da10fc
+0 01 400005f4 000 00000010 2af0bb25 2af0bb25 2af0bb25
+0 01 400005f0 001 00000001 fbdeaa5f fbdeaa5f
+0 10 40000154 001 00000001 5e3c6884 5e3c6884
+1 01 4000039a 001 00000110 b1ed0000 1100 3c4c673c 0011 3c4c673c 1100 8c9c8bf2 0011 8c9c8bf2 1000 7f8023eb 0011 7f8023eb 1100 00000390 0020 ce9e0706 1149cc3b 2c26d99b 50ce67d1 5e701cbf d059df04 7e4d28b8 5d900ae2
+0 10 40000386 000 00000111 13ea6ced 13ea6ced 053e8431 053e8431 053e8431 053e8431 13ea6ced 13ea6ced
+1 01 40000459 000 00000001 00edef00 0010 00edef00 0000 00000450 0010 afd9d859 71cc6720 22d0b37c f061c117
+0 01 400006b4 000 00001110 a746dd68 a746dd68 a746dd68 a746dd68 c08046a4 c08046a4 c08046a4 c08046a4 3c19ed40 3c19ed40 3c19ed40 3c19ed40 f53f7a1a f53f7a1a f53f7a1a
+0 01 400004b8 000 00001011 6c5c46cf 6c5c46cf 6c5c46cf 6c5c46cf 6f6c8396 6f6c8396 6f6c8396 6f6c8396 0a10188e 0a10188e 0a10188e 0a10188e
+1 01 4000031a 001 00000010 03f90000 1100 5ccdadae 0011 5ccdadae 1100 00000310 0010 70b8f65e dd05b335 2654a55a 35511a6c
+1 01 400005db 000 00000111 50000000 1000 c760feb2 0000 c760feb2 0010 c760feb2 0100 c760feb2 1000 00632d1e 0001 00632d1e 0010 00632d1e 0000 000005d0 0020 781d9bf5 7118e9b0 c4f06ecb 6dd9a817 48039009 ab2de2b0 3d294572 45cc16f9
+1 01 4000021c 001 00001101 11604604 0001 11604604 1100 1a129a29 0010 1a129a29 0100 d08ed55a 0011 d08ed55a 1100 3f730df9 0011 3f730df9 1100 14af689a 0001 14af689a 0100 71dd36bb 0001 71dd36bb 1000 23533234 0011 23533234 1000 00000210 0030 f35b656d 5dcaf0a6 2262b9d0 8507df77 a8f55224 babce7b9 01b08987 25385741 4f0fd340 ef96759c 6adacd2e f6b0a4e8
+1 01 4000064a 001 00000111 3c460000 1100 9bad79e7 0011 9bad79e7 1100 d4bf202c 0001 d4bf202c 1100 05dc21ff 0010 05dc21ff 1100 00007bf7 0010 00000640 0020 25478c31 5cf7aafd dde8d3d4 f656a6a0 b61eb903 4e4e4cf8 8c7e7e1a 58f6b564
+1 01 40000450 010 00000010 3f568a8c 0011 79768b73 1011 c13e9816 1101 00000450 0010 ef132bcf 34ec2513 515caebc 8eaa9b8b
+1 01 40000603 000 00001011 8c000000 1000 17b71f9e 0001 17b71f9e 0010 17b71f9e 0100 17b71f9e 1000 20d75ac9 0001 20d75ac9 0010 20d75ac9 0000 20d75ac9 1000 00ce6a37 0001 00ce6a37 0010 00ce6a37 0100 00000600 0010 dff5af78 61a7c650 c97eaf44 3d7970a5
+1 01 40000580 001 00001000 52fbb0d6 0011 52fbb0d6 1000 d78aeec2 0011 d78aeec2 1100 d7e68321 0001 d7e68321 1100 69f738a9 0010 69f738a9 1000 0000efef 0011 00000580 0020 e9d91518 eacb6790 bc165b65 4fcf0e86 07fa95b6 38219557 97a3a43d 89d47826
+1 01 400005b0 010 00001001 41e4331f 0011 7091672d 1101 f1e49186 1101 0bab3304 1011 96f3750c 1100 656622a4 0111 c891c5f5 1011 59f21f4f 1100 e7479765 1111 6a68662d 1011 000005b0 0030 fbfff3e6 d94bbc7a 89a8686e 39618e6e 209dfdbd bf7ee811 35dda889 ddbf95fa ae46ca6c b9d0c994 2479ba68 89b25a9c
+1 01 400006c3 000 00000110 90000000 1000 c01c014d 0000 c01c014d 0000 c01c014d 0100 c01c014d 0000 0000a838 0001 0000a838 0010 000006c0 0010 19ffb6b6 677ee6f5 78aa6e81 6ec78d24
+1 01 40000667 000 00001111 ed000000 1000 d77b7ef1 0001 d77b7ef1 0010 d77b7ef1 0100 d77b7ef1 0000 664e5077 0001 664e5077 0010 664e5077 0000 664e5077 1000 ed13e206 0001 ed13e206 0010 ed13e206 0100 ed13e206 1000 0093d4c2 0001 0093d4c2 0010 0093d4c2 0100 00000660 0020 b864494c 92ff9f8a f6f3eef9 03f4fc6f 07919136 eac0be47 5468dfb1 ff0c08d1
+0 10 400000cf 000 00000011 51fe4da3 51fe4da3 51fe4da3 51fe4da3
+1 01 40000391 000 00001101 21cfa800 0010 21cfa800 0100 21cfa800 1000 cf3ff7f4 0001 cf3ff7f4 0010 cf3ff7f4 0100 cf3ff7f4 1000 d51a19a8 0000 d51a19a8 0000 d51a19a8 0100 d51a19a8 0000 00f9781d 0000 00f9781d 0010 00f9781d 0100 00000390 0010 7466a8b3 192e5591 92656ebd f825245d
+0 01 400005ee 001 00000101 afdbf190 fbdeaa5f fbdeaa5f 2af0bb25 2af0bb25 abccf1e8
+0 10 4000049d 000 00000001 98ed8671 98ed8671
+1 01 40000250 010 00000010 4f9e9e2d 1111 b7bf02f0 1111 aabab6fb 1110 00000250 0010 f82ed6de 72a918fe d2e621fe dea42d73
+0 10 40000485 000 00000001 20e3353b 20e3353b
+0 01 4000056c 010 00001100 6444b2d3 e3ea54ec 98d53183 71247db1 c86012f0 5242b0d6 d78aeec2 d7e6ef21 696b3850 0373efef 884fdb54 d31cf1fe 344f8fcd
+0 01 400006dc 010 00000001 eaeeda4e ffccf1b8
+0 10 40000630 010 00000111 96a9f426 52a1a6ed f065fc56 2daaf53f 1faf0de0 ef609061 f1174ce4 6e6dd139
+0 10 400004c6 001 00000011 ba73c421 0a10188e 0a10188e ba73c421
+0 01 400003fc 000 00000111 ae634a86 ae634a86 ae634a86 ae634a86 8ef1081d 8ef1081d 8ef1081d 8ef1081d
+0 01 40000233 000 00001011 712292bb 23a13234 23a13234 23a13234 23a13234 5c7a646f 5c7a646f 5c7a646f 5c7a646f 86c681b9 86c681b9 86c681b9
+1 01 40000174 010 00001101 c9a32acb 1011 b2dc080e 1011 606014c5 1111 918b5c7c 1110 b9a56c61 0111 883ee1a9 0111 488350ca 1111 326fa456 1011 295f13d8 1111 0bf5bca2 1011 8db65b5e 0010 31478537 0111 501fbe63 0101 71b0b64e 1001 00000170 0040 e7cf0e9b e4e77061 e1f21036 3891973c 4e3d403f 6c2604bc 36086eea 5f655dcc aec99ee4 2a2e3cc4 eb8f9059 987d236b 0007d4e9 aefe9f1f cfa9ce8f b222256b
+1 01 400000a0 000 00001101 47de9be1 0001 47de9be1 0010 47de9be1 0000 47de9be1 1000 82904ca8 0001 82904ca8 0010 82904ca8 0000 82904ca8 0000 c20da936 0001 c20da936 0010 c20da936 0100 c20da936 1000 0000aaec 0000 0000aaec 0010 000000a0 0010 a59e06fe 71be2c88 525bc961 8cc1a1c3
+1 01 400001b3 000 00000010 bc000000 1000 000072a4 0001 000072a4 0010 000001b0 0010 06d2153e 014c46b4 7a4c6fc8 bdc2cb22
+1 01 40000117 000 00000100 d1000000 1000 d883ce26 0000 d883ce26 0010 d883ce26 0100 d883ce26 0000 00000110 0010 c4219a96 72cc5024 5b376cee 6592acdd
+0 01 40000668 001 00001110 d97b7ef1 d97b7ef1 66365077 66365077 ed13e206 ed13e206 df93d4c2 df93d4c2 adeea283 adeea283 df121b7d df121b7d abfcf363 abfcf363 27eef0bf
+1 01 40000608 010 00001110 eeab5836 0111 e85b592c 1111 01b9b104 0111 fe80b1c0 0010 4129c6fa 1101 c763f3c9 1011 a0ad2284 1111 36f0502a 1011 e1d99741 1101 f257b9f6 1111 e57cd690 1010 0f769fca 0111 d9260db1 1111 3a41f1d3 1011 6422d0a9 0111 00000600 0050 dff5af78 61a7c650 e05518c1 ee38140b f2193235 450fe6ab baedee17 73904647 087408cb 6b78e6c4 6c28d07f 031c153d a9ba93fb a5161101 0500b49b bd2ee731 5ff2dd74 214fef82 ac36176e c7497f27
+1 01 40000428 001 00001010 e69df85e 0011 e69df85e 0100 49488946 0011 49488946 1100 75cb1ede 0010 75cb1ede 1100 c44d9b62 0000 c44d9b62 1100 e4c92880 0010 e4c92880 1100 000036ff 0011 00000420 0020 0913d306 8cb01eaa c1a67269 932efdd4 dbf63d50 8a6a1394 d55a750b 4e92f566
+0 01 400006e8 001 00001010 e7898d3a e7898d3a be9fa8f5 be9fa8f5 51d85f38 51d85f38 4d90e395 4d90e395 40e07cca 40e07cca daeef1bf
+1 01 40000698 010 00001000 c24de42e 1101 76aef543 1001 e16f0d91 1111 932a8a93 1111 4921c96c 1111 dd4d5f40 1011 6fb78534 1010 bcd81526 1011 8cd5670a 1111 00000690 0030 e4d9580d c2be402c 628a40e9 4e80a025 20c29618 f71f9211 b5640140 9306306c 64ce0277 cacd4c05 841fba89 799e0deb
+0 10 40000428 001 00000001 f49df85e f49df85e
+0 10 4000034a 000 00001111 851cfab6 851cfab6 a2e84288 a2e84288 a2e84288 a2e84288 0f3e9a37 0f3e9a37 0f3e9a37 0f3e9a37 a419f04c a419f04c a419f04c a419f04c 851cfab6 851cfab6
+0 01 400002f2 001 00000010 ff63842b 1abf90b7 1abf90b7
+1 01 400000e0 001 00001000 c3c3aa94 0011 c3c3aa94 0100 ae3c25e2 0011 ae3c25e2 1100 b5ddd3c3 0011 b5ddd3c3 1100 225236e1 0010 225236e1 0100 00006e50 0000 000000e0 0020 454be2ac 374a7536 12c6326d 290cc41c 51397bd2 a62fe109 d65d931d c884fe72
+1 01 400004b8 010 00001111 14f40eec 1111 1804abc9 1110 585d96ab 1101 430ce91f 1101 932c6261 1111 817621c8 0111 f714e313 1011 3f5cd520 0111 7cfa24de 1111 2f6a938c 0101 b105af0f 0111 d680c20d 1101 615b67d5 1111 ee284934 0111 73929365 0101 0d3daaff 1111 000004b0 0050 27e7c61b 805a7cb1 70a368b7 4ce92b60 a36f9857 e754beff 95e65b28 33afb79d 51e22220 5124deba 0f7e6983 238fe787 92cdeb55 a86c923e d8fce696 57afc09a 14767871 de3b0d52 65a8393f 2061bdd0
+1 01 4000042c 010 00001110 a1d085ca 1111 8ebfd706 1101 79d90ac1 1111 e4c30342 1111 efa1ffd2 1111 3b954eba 1111 daf84557 1011 8e662df5 1011 499835ef 1001 f9762cec 0111 2c573e85 1111 85fb20b7 0100 a3337ef0 0011 46083468 1111 fa9ee50d 0001 00000420 0050 0913d306 8cb01eaa d79bc06c 6c888622 c4237f33 7bc57b64 efbd644b ecb52275 52e14b40 b0b572c8 77f1528c 46717d35 57837400 10634d02 ddefdbfa b9d71112 9141071f a4b4f961 52beb2da b9c026d7
+0 10 4000020e 001 00000001 c60ba196 c60ba196
+1 01 400000f8 001 00001101 f96c253a 0001 f96c253a 1100 0b4baa19 0010 0b4baa19 1100 307c26b4 0001 307c26b4 0000 164ca6be 0010 164ca6be 1100 ccc83a25 0011 ccc83a25 0100 f046aac2 0011 f046aac2 0100 03f89811 0010 03f89811 1100 000000f0 0030 51397bd2 a62fe109 79c241a1 2a11a56a ff02f3da 98cc497a b5a8f78c 15073690 10b8bef8 6ea26e8d b1a31944 55bc2f80
+1 01 40000444 010 00000100 2df0db47 1111 3615040f 1111 5b80ab77 1110 f7a75980 1111 c76b5964 1111 00000440 0020 79986399 fd8a0767 5dc5909b fa31bfb1 cf5a5cc7 c0f8f692 daddb208 e3d696fd
+1 01 400003e8 000 00001010 64dcf198 0001 64dcf198 0000 64dcf198 0100 64dcf198 1000 d7a3635c 0001 d7a3635c 0010 d7a3635c 0100 d7a3635c 0000 0005ea72 0001 0005ea72 0010 0005ea72 0100 000003e0 0020 d33ad63a 1a3f80eb 657e57ba bf633139 84b3080f 59f71884 279a6181 944df755
+0 10 400005f4 000 00000001 2af0bb25 2af0bb25
+0 10 4000074c 010 00001111 791a5645 9f229a87 3dbb03ed cef3b592 72c917cd ad05cc79 7a4f7162 37d439c6 384af80a 12f72aa9 2a1a9ee2 b9d66cf6 9a778cb1 c01b04d0 e6c5908f ffe422f2
+1 01 4000015a 001 00001000 073f0000 1100 4a85dc1a 0011 4a85dc1a 1100 bbbda811 0000 bbbda811 0000 04d83b81 0001 04d83b81 1100 83475858 0011 83475858 1000 00000150 0020 a6519c67 03f9d944 e7d6f624 849a3c45 b9596139 531b2998 dc67c02f 63353676
+1 01 4000073f 000 00000111 b7000000 0000 7a41efca 0001 7a41efca 0010 7a41efca 0100 7a41efca 1000 0011b665 0001 0011b665 0010 0011b665 0100 00000730 0020 448f2552 109a8664 a5c12e10 61f38924 0ab62d67 cb3a42dc 637b8de7 d02a826f
+0 01 4000059b 000 00000010 d31cf1fe 344f8fcd 344f8fcd
+0 01 40000164 001 00000101 04d8cb81 04d8cb81 830f5858 830f5858 035b5490 035b5490
+1 01 400002fe 001 00001110 6fe10000 1100 a0dc0561 0011 a0dc0561 0100 2765c2ad 0011 2765c2ad 0100 1f1f4a2e 0011 1f1f4a2e 0000 ba929111 0011 ba929111 0100 b78f0e76 0011 b78f0e76 1100 46753375 0011 46753375 1100 849ebe77 0001 849ebe77 0000 000002f0 0030 587260f4 f081eac0 4cc9aed4 93bd3f26 6670a240 64c418b9 429d7800 81b5cd65 29cb566f b58ece4d 16fa4f71 f80f55b9
+1 01 4000038c 010 00000000 19d87e26 1011 00000380 0010 edff35d4 775f4cfe 83e98236 01b1b593
+0 10 400001f6 001 00000011 461df8bd 142439ba 142439ba 461df8bd
+1 01 400005bc 010 00000011 0498cafc 1111 163e1500 1111 9b876775 1100 9452cc42 1011 000005b0 0020 fbfff3e6 d94bbc7a d8c3334e aa1e3e9f b2d8b653 b9df5265 b8c0ca80 9762861c
+1 01 400005db 000 00001011 59000000 0000 c9e23255 0001 c9e23255 0010 c9e23255 0100 c9e23255 1000 0c842b05 0001 0c842b05 0010 0c842b05 0100 0c842b05 1000 00db7474 0001 00db7474 0000 00db7474 0000 000005d0 0020 ae46ca6c b9d0c994 930cf11b f3d51fe4 3b52d628 01e3cc55 d75bc3a8 e9afa151
+0 01 40000522 000 00000100 1e1fbaa3 1e1fbaa3 4f50d1e1 4f50d1e1 4f50d1e1
+0 01 4000046e 000 00001001 2c75f1f3 2c75f1f3 1eb653ca 1eb653ca 1eb653ca 1eb653ca 0e5ce442 0e5ce442 0e5ce442 0e5ce442
+0 10 40000470 010 00000001 1eb653ca 0e5ce442
+0 01 40000570 010 00000101 e3ea54ec 98d53183 71247db1 c86012f0 5242b0d6 d78aeec2
+0 10 40000348 010 00000011 851cfab6 a2e84288 0f3e9a37 a419f04c
+1 01 40000314 010 00001000 68850f46 0010 247eafe9 1101 f84ec75c 1111 7fa9416d 1100 5629cb1c 1111 ba596fd4 0110 66654166 1101 4fdaa1a9 0101 502f85e2 0111 00000310 0030 7c53c70f 4aa8b508 74f21d8d 3bb120c1 029238fa f68e1736 2d923a35 c0f5ab4a e2420936 605a9841 78b6cf13 eb149ff2
+1 01 40000774 010 00001000 14596a76 1101 7175aa44 0111 5b5a64c0 1111 4c0b42b9 1111 0cc72e75 1011 2236c86c 0111 201cccc3 1110 15a23e49 1010 93752b17 1100 00000770 0030 761648bd 1d1b7178 558bae80 2aa4f8cc 49263c53 d3d8be93 8c1433b7 b77e1c79 9a8109d6 b9b7ac32 8e40a2e7 38ccfab1
+0 01 400000fc 010 00001000 0b4baa9c dbfaecb4 164ca681 eec83a25 a346aac2 03f898ac d12b2c1b 7183ce6c de46e44f
+1 01 400007c7 000 00000111 48000000 1000 8e61875f 0000 8e61875f 0000 8e61875f 0000 8e61875f 1000 00e4d252 0001 00e4d252 0010 00e4d252 0000 000007c0 0010 6825c298 63869e52 85a285d1 4472871f
+0 10 4000028c 001 00000011 d79b9c88 d79b9c88 fb3522db fb3522db
+1 01 4000034e 001 00000110 33180000 1100 46d2b55e 0011 46d2b55e 1000 d0454267 0011 d0454267 1100 75ed7da5 0011 75ed7da5 1100 00000340 0020 f10fa671 7ccb32c9 23af3cbf 1e3b9a63 8e0a6c8f 2a1863d2 2e63985a dfadbe96
+0 01 4000017e 001 00001100 606014c5 918b5caf 918b5caf 5ba56c61 5ba56c61 d33ee1a9 d33ee1a9 488350ca 488350ca 321da456 321da456 295f13d8 295f13d8
+0 01 400000d2 000 00000000 3e2a825d
+0 10 400002a0 001 00000011 919b4584 919b4584 aa8ffbf4 aa8ffbf4
+0 10 4000015d 000 00000111 4a85dc1a 4a85dc1a 4a85dc1a 073f8f47 073f8f47 073f8f47 073f8f47 4a85dc1a
+1 01 40000348 001 00000011 b189587d 0010 b189587d 1100 586bb4bd 0011 586bb4bd 1100 00000340 0010 f10fa671 7ccb32c9 639b8e1d 0f0b63d2
+0 10 40000436 001 00000001 79d90ac1 79d90ac1
+0 10 400002a4 001 00000011 aa8ffbf4 aa8ffbf4 919b4584 919b4584
+0 10 4000079c 010 00000011 8cffc0cd 156f3eaf 937526e1 b37d907b
+0 01 4000030c 010 00000101 9a929111 b78f0e76 46750f75 247e97e9 f84ec75c 7fa9f043
+1 01 4000023c 000 00000101 98998494 0001 98998494 0010 98998494 0100 98998494 1000 00001963 0001 00001963 0010 00000230 0020 4f0fd340 ef96759c fe82b20f 0a74a472 fd6b048a 529cdd26 499cca62 533adabe
+0 01 400007d4 010 00001001 a7c605a3 4bde1520 2e908b94 a7560b40 2aeef982 abb4d1fa 54a77ca3 abcc48fc daeef106 abccf1fe
+0 10 4000045a 001 00001111 c1fbef16 a3257ef0 a3257ef0 3b954eba 3b954eba 2df0db47 2df0db47 3615040f 3615040f 5b80abef 5b80abef f7a75980 f7a75980 c76b5964 c76b5964 c1fbef16
+0 01 400002a2 000 00000001 919b4584 919b4584
+0 10 400002f4 000 00000011 1abf90b7 1abf90b7 1abf90b7 1abf90b7
+0 01 400002f6 000 00000111 1abf90b7 1abf90b7 6c9fda88 6c9fda88 6c9fda88 6c9fda88 6fe1c6f2 6fe1c6f2
+1 01 400001f2 001 00000010 87ce0000 1100 506351e2 0010 506351e2 1100 000001f0 0010 0923a7ba 49b32337 4f2e1bd0 e5f77075
+1 01 4000036e 001 00000110 1eac0000 1100 a06267a3 0011 a06267a3 1100 2a01d4e6 0000 2a01d4e6 1000 38777dce 0001 38777dce 1000 00000360 0020 3538ed1a 9af0821d a16f1d75 5569a290 c8914b82 b917eaf9 d1cc0115 82fe3cc8
+0 01 400000cb 000 00001001 cae2ae32 51fe4da3 51fe4da3 51fe4da3 51fe4da3 3e2a825d 3e2a825d 3e2a825d 3e2a825d b6d8bacf
+0 01 40000322 000 00001001 7fa9f043 7fa9f043 5629cb1c 5629cb1c 5629cb1c 5629cb1c 17596f77 17596f77 17596f77 17596f77
+1 01 40000094 001 00001000 aeae0176 0001 aeae0176 1100 57086f19 0010 57086f19 1100 3a59b203 0011 3a59b203 1100 a3f6ff79 0011 a3f6ff79 0000 0000a50b 0011 00000090 0020 10787e30 56f81503 33ebc580 c04ed314 4bfbaceb 883a5be5 1edf7f5a 9bf378f0
+0 01 40000425 000 00000100 62cec2ee 62cec2ee 62cec2ee f49df85e f49df85e
+1 01 40000354 010 00000010 0e986220 0001 5f21bc46 0111 e25786b4 0011 00000350 0010 32749de1 3cd1e788 3104eb1e d841ca97
+1 01 400006b8 010 00001001 a2d9aa7d 1011 8aebe714 1111 78dd5d24 0110 7c90195b 1110 bbeee51d 0101 7c539d4f 1111 508b11ff 1111 8aa951d3 1011 4f192556 1111 de484a96 1101 000006b0 0030 64ce0277 cacd4c05 f96fb6bb e94a34c8 5478f5d5 53abca69 c5683028 da4f0c5b d75ace76 19c21b70 7d09af5a f36b037a
+1 01 40000014 010 00001100 99579b46 0101 9da271c6 1111 69264563 0011 d72a037d 1011 5bf317a8 1111 561abeab 1011 880c3717 1000 4826afc0 1100 4b2d9967 1111 723582ca 1101 f98ce377 0001 2330181e 1111 25608d77 1110 00000010 0040 329d6205 84f67c36 43d4ed6d 3e3046cf b08eca0d b28c7032 b0f32b54 edf5faff 273a4099 d2555620 e8773d94 888c821e 9434dea9 0112675b 56ac3328 668f7926
+1 01 40000172 001 00000001 85910000 1000 0000534b 0001 00000170 0010 b6761f89 17bbe367 caada067 f238ab46
+1 01 4000071f 000 00000000 31000000 1000 00000710 0010 37d652f0 e1c50a4f 8095e846 067064e6
+0 01 40000268 001 00000110 8ea59519 8ea59519 f005e54e f005e54e 792fac38 792fac38 196abb2d
+1 01 40000683 000 00001011 7c000000 0000 9dfc5de6 0000 9dfc5de6 0010 9dfc5de6 0000 9dfc5de6 1000 45d99915 0001 45d99915 0010 45d99915 0100 45d99915 0000 00031209 0001 00031209 0010 00031209 0000 00000680 0010 66017f73 cae71b8d 67d7d4a9 c6c9a3a4
+0 10 40000180 001 00000011 918b5caf 918b5caf 5ba56c61 5ba56c61
+1 01 400001d8 010 00000110 b235a6fb 1101 628d0431 0011 9a372584 1111 5dabb1d1 1111 e12345d3 1110 b893d52a 1111 a066aa00 0110 000001d0 0030 8da9c52a bfa40723 bd46ac68 ea29891c 4b30ccb2 12f5ef95 6d919822 2cb188c6 28b50f48 fe7c9b33 e072b838 28d7b59f
+0 10 40000288 001 00001111 fb3522db fb3522db d79b9c88 d79b9c88 1fb05664 1fb05664 74bb654f 74bb654f 341b0d81 341b0d81 fb197813 fb197813 8cd60eb0 8cd60eb0 1668493a 1668493a
+0 10 4000047a 001 00001111 a8e2f156 f062be77 f062be77 46083468 46083468 e5f5760d e5f5760d 88b21ec8 88b21ec8 2c75f1f3 2c75f1f3 1eb653ca 1eb653ca 0e5ce442 0e5ce442 a8e2f156
+0 10 40000344 010 00000111 a419f04c b18958b6 586bb4bd 46dcb55e d0454220 7521bc46 1dd786b4 0f3e9a37
+0 01 400006e1 000 00000110 ffccf1b8 ffccf1b8 ffccf1b8 4beef1b9 4beef1b9 4beef1b9 4beef1b9
+0 01 400007ca 001 00001000 8e5572e7 12b7d252 12b7d252 c8ba97b2 c8ba97b2 a7c605a3 a7c605a3 4bde1520 4bde1520
+1 01 400004c8 001 00000001 fa994029 0010 fa994029 1100 000004c0 0010 a36f9857 e754beff dd802949 028e6ef0
+1 01 400000b6 001 00001011 7ef60000 1100 e304a0ce 0001 e304a0ce 1100 650a15ef 0011 650a15ef 1000 99b9903e 0011 99b9903e 0100 93a7c0b0 0011 93a7c0b0 1100 2fb62c03 0010 2fb62c03 1000 0000d67f 0011 000000b0 0020 22b88644 27dace12 217d230f 6fbd1fef 11616ea2 fcff8c76 48c878e0 14a48b53
+1 01 4000057c 010 00001100 0880bc17 1001 71949b1a 1111 1e600ded 1111 9b8d1d02 1111 5f45b8bc 1011 d0745f25 1010 9a6fc3bb 1111 c592a10d 0101 f4768ce5 1001 7545a20b 1111 c265ffd2 1001 623a8f3b 1110 d25ae77d 1011 00000570 0040 2306eb0d 0d9dcfa4 4d5860f9 72744105 04cc6ccb abb96a61 f0e4e290 3799b613 2e29b5cb 11b40e45 faadf1d7 8dd7e544 020df253 aa9fd55e f0d88529 9ca4b58e
+1 01 400007e8 010 00000011 9076bf21 1111 1942a99b 1011 3b7f62ea 1111 e369a290 1111 000007e0 0020 0dfeaddd bd559049 e7c6b797 8b751144 def57482 61d6a470 11f40b70 34553e99
+0 10 4000067e 001 00000001 df121b7d df121b7d
+1 01 400004b4 010 00000111 78cff477 1111 b9e515d7 1111 883cff59 1011 8ff9718d 1111 2564b124 1011 b354861e 0100 6bdced13 1110 fcd62672 1011 000004b0 0030 cee7499b 94c21953 cf00f0cb 11652236 b41375a7 4e4b4289 b20ae77c 5b16f42a 94c55ecb 7575b577 71f00a87 f8fab171
+0 01 4000022e 001 00000001 51af409a 712292bb
+0 10 400003e2 001 00001111 e95e60e5 49cca9d4 49cca9d4 64dcf198 64dcf198 e9a3635c e9a3635c 1305ea72 1305ea72 f412a313 f412a313 76838b70 76838b70 ae634a86 ae634a86 e95e60e5
+1 01 400002e4 001 00000010 1e737c68 0010 1e737c68 1100 00007f5c 0011 000002e0 0010 fcae71ec 0900b674 7253f2d6 103859f7
+0 10 400004c6 001 00000001 250cb124 250cb124
+0 10 40000445 000 00000001 2df0db47 2df0db47
+1 01 400000a8 010 00001101 8042b2e8 1111 9f25c2ff 0100 98a0d695 1110 ba0a658f 1100 26ea2fca 1111 4ccfc889 0100 7685d1ff 0110 1bab456a 1111 b5e97241 0100 36259f00 1111 e3c383bc 1001 d1dcb578 0110 0e1aac78 1011 5269e333 1110 000000a0 0040 4bfbaceb 883a5be5 d7dfd65b cd03f20d 4b4019ba 63f19d63 79e658b9 bf5d7acc 5d4d674a 242499c1 55c57c34 de5c3570 33a8478e 03486338 1e07a788 607d3203
+1 01 40000208 010 00000010 152de055 0110 4cf353d9 1111 b82dfe43 1110 00000200 0020 4875b16b 10199182 e4086229 606387e9 eea52eaa d4a87bd8 0bd7bdac 73205634
+1 01 40000280 001 00001110 289ecf7d 0011 289ecf7d 0100 72f38e43 0011 72f38e43 1100 9fb43894 0010 9fb43894 1100 3f65fb82 0000 3f65fb82 1100 fba0a5a3 0010 fba0a5a3 1000 8a124a1d 0010 8a124a1d 1000 bab7c264 0010 bab7c264 1100 0000da9a 0010 00000280 0020 0c96bc57 1231f05f 1940237e 52929669 c32339da dc8c4ca8 e6273cc3 80ad8c66
+1 01 400005f2 000 00001000 22290000 0100 22290000 1000 b2ca6d5f 0000 b2ca6d5f 0010 b2ca6d5f 0100 b2ca6d5f 1000 0064cf5d 0000 0064cf5d 0000 0064cf5d 0100 000005f0 0010 d8a5fdfe 8c0c7369 f4d7f662 27e36abf
+0 01 40000118 010 00001000 7183ce6c de46e44f 47260a5f 9ac60d80 b547535a 483e5638 0eb8dfe3 b4dd5233 ba893fe2
+1 01 400002cb 000 00000110 31000000 1000 85acd375 0001 85acd375 0010 85acd375 0100 85acd375 1000 0000a54f 0001 0000a54f 0010 000002c0 0020 c6601b94 110b15a1 5e3a450e 4024952f d9c57593 b6352ccd 73a7acda c8bc40a9
+1 01 400001bc 010 00000010 0caa5cd9 1111 eabc318e 0111 5e03532a 1111 000001b0 0020 06d2153e 014c46b4 10ba5f6d 8ee87da2 5b15eaa1 98d27aa9 4876e2ec a711939a
+1 01 4000029f 000 00000110 5e000000 1000 539ccdd9 0001 539ccdd9 0010 539ccdd9 0000 539ccdd9 1000 0000b567 0001 0000b567 0010 00000290 0020 c32339da dc8c4ca8 dbd37633 f3e69fee c41ade43 0b9a0ebe 0cc6a9b9 c1680355
+1 01 4000067a 001 00001110 8def0000 1100 c02a29a8 0001 c02a29a8 1100 452fcb2d 0011 452fcb2d 1100 004070e0 0001 004070e0 1100 b3064cc8 0010 b3064cc8 1100 11fa92a4 0011 11fa92a4 0100 789a2da1 0011 789a2da1 1100 eefa81ac 0011 eefa81ac 1000 00000670 0030 07919136 eac0be47 9206e72d 25053238 51dfc01f 7bb5a946 7b687381 725d54f5 c623d707 183a4fde fdf6795f cabab598
+1 01 400001ce 000 00000001 e14e0000 0100 e14e0000 1000 000001c0 0010 5b15eaa1 98d27aa9 b66ff7b0 1aa832bc
+1 01 400005bc 010 00001000 0e1741e2 1011 cd2edf08 1110 4ef1b003 1110 3a707832 1110 56072caf 0011 c54d646d 1111 5461d9df 1011 29f9e71d 1111 79a0f2c2 1111 000005b0 0030 fbfff3e6 d94bbc7a 31ebfb13 e38e3cda fab995c8 adf50098 87deaae9 f6c5cf4c 0faec63f 279d8147 6d8ea7e9 4c2ed515
+1 01 40000404 010 00000011 ad246492 0111 025cf0e0 1111 b65b3daa 1111 e7750818 1011 00000400 0020 e131c048 866d86b5 4b9817c6 b46409de 0b225235 84763b2e 4bd8c220 514516fb
+0 10 40000483 000 00000011 4e569492 4e569492 4e569492 4e569492
+1 01 40000304 010 00001110 51e47732 1111 cfbf48fb 1111 632524a1 1111 4c99915c 0101 8bd2bfc1 0001 883ebbae 1010 d13f6cb6 1111 b9a83923 1111 634c8a28 0111 3f929f36 1011 feab3cbe 1101 ba7d2baa 1011 22bcb6c2 1110 9c9d5c63 1111 00168159 1000 00000300 0040 71b382be a073c75e bddcd2a0 65ea124e 81c6d83f aeb3d774 944c09dc f31fdc2b 9c137822 7f020fa3 2198684f a6beffc5 74816cac 8cf3bb93 230cff23 88d0b23f
+1 01 40000678 010 00000101 12fe27e1 1111 b7c464da 1011 2d425597 1010 59eb63fa 0101 ebf80277 1101 5e9742d6 1111 00000670 0020 07919136 eac0be47 7de77f2c 7e9619e2 dd59fd74 d3fe0b2f e6a427c7 aa7572c1
+0 01 4000011a 001 00000000 7183ce6c
+0 01 400005af 000 00000010 d20de77d 46fa331f 46fa331f
+1 01 400006e8 010 00000110 3178442d 0111 030d02de 1110 e1c95634 1111 b1d3ad29 1011 a68d13c3 0111 082c8ca3 1111 54a89d35 1111 000006e0 0030 bd7ba856 367f7e88 520552ef 53b4554a d772e04a aad38e7c 2b8d0750 00de5491 84c3ae2e 5de135c9 d6bb848f ef2d56d0
+0 01 4000022a 000 00000011 3f730df9 3f730df9 51af409a 51af409a
+1 01 4000060e 001 00001111 177d0000 1100 e8bbd661 0010 e8bbd661 1100 85e25410 0011 85e25410 1100 e7abcfad 0011 e7abcfad 1100 66d9e2bf 0011 66d9e2bf 1100 ae67337a 0011 ae67337a 1100 3111d0f7 0011 3111d0f7 1000 e95c4c1f 0011 e95c4c1f 1100 000054e0 0011 00000600 0030 dff5af78 61a7c650 7b47d10a c4c6304c e71f0610 fb15762e 230804c2 bd0a0766 525a782f 215aea38 d6823283 8a8afbeb
+0 10 40000401 000 00000011 8ef1081d 8ef1081d 8ef1081d 8ef1081d
+1 01 4000004c 001 00001101 48f7c36c 0001 48f7c36c 1100 b0342fe7 0001 b0342fe7 0100 bff92052 0011 bff92052 1000 3bdd3a9c 0011 3bdd3a9c 1100 3e516cc1 0011 3e516cc1 1100 090a7533 0011 090a7533 1000 4e1d2dd1 0010 4e1d2dd1 1000 00000040 0030 9434dea9 0112675b 617bd0fe d4adf5d7 ce0fcf25 1b85cb0b b2b8eec9 29a3f685 f37bb143 b08cf853 00349c14 b349678a
+0 10 40000064 010 00000001 4e652d3e 09a27533
+0 10 400007c6 001 00001111 48ffe927 8e5572e7 8e5572e7 12b7d252 12b7d252 c8ba97b2 c8ba97b2 a7c605a3 a7c605a3 4bde1520 4bde1520 2e908b94 2e908b94 0b75725a 0b75725a 48ffe927
+1 01 400007b2 001 00000101 4e4a0000 0000 590a1ce2 0011 590a1ce2 1100 584e7adc 0011 584e7adc 1100 00007469 0001 000007b0 0010 9bf532ef 94fd0caf 7c29770b 84f0251f
+0 01 40000257 000 00000111 b7bf02f0 aabab669 aabab669 aabab669 aabab669 677b3337 677b3337 677b3337
+1 01 40000322 001 00000001 98740000 1000 00006bfb 0001 00000320 0010 8d5ffdf7 b1e1cf51 9c22dc38 cb819cb1
+0 01 4000039c 001 00000011 3cf9783c 3cf9783c 8cb38bf2 8cb38bf2
+1 01 40000288 000 00000100 87e3b953 0000 87e3b953 0000 87e3b953 0000 87e3b953 1000 0000002f 0001 00000280 0010 0c96bc57 1231f05f c9425df1 d2300028
+1 01 400003e4 001 00000111 0ef6abaa 0000 0ef6abaa 1100 52d0a62b 0001 52d0a62b 0100 8621b6f3 0011 8621b6f3 1100 f0a8a077 0011 f0a8a077 0100 000003e0 0020 50ac22d6 2d3980df 413cd6d7 bb1c1199 5b88cb03 42d80aa6 2691601a e4f3b022
+0 01 40000564 010 00000111 dfaec9d8 3104fa30 6444b2d3 e3ea54ec 98d53183 71247db1 08601217 71949b1a
+0 01 400002e4 001 00001100 1e737cd1 1e737cd1 ccc87f5c ccc87f5c ef56d032 ef56d032 ff63842b ff63842b 1abf90b7 1abf90b7 6c9fda88 6c9fda88 6fe1c6f2
+0 10 40000194 010 00001111 295f13d8 0bbbbca2 42d65b8f 0b478537 811f4363 717e7e4e 2d2fb693 bcc2644f 532e72a4 30c098df 0caa5cd9 918b5caf 5ba56c61 d33ee1a9 488350ca 321da456
+1 01 400000d2 001 00000010 6ec60000 1000 f70b41ef 0011 f70b41ef 1100 000000d0 0010 68b940ee e45bc24a 733aa3eb 5466d1aa
+0 01 400007c8 010 00000100 8e5572e7 12b7d252 c8ba97b2 a7c605a3 4bde1520
+0 10 40000192 001 00000111 321da456 295f13d8 295f13d8 0bbbbca2 0bbbbca2 42d65b8f 42d65b8f 321da456
+0 10 40000392 000 00000001 21cfa88e 21cfa88e
+1 01 400005bd 000 00001001 0a5ff400 0010 0a5ff400 0100 0a5ff400 1000 d1a11f91 0001 d1a11f91 0000 d1a11f91 0100 d1a11f91 0000 00a3f6fc 0000 00a3f6fc 0000 00a3f6fc 0100 000005b0 0020 fbfff3e6 d94bbc7a 5e90daf1 17532a71 be440954 feed3d55 f320d292 c73ceb2f
+1 01 40000458 000 00001110 b6b128d1 0001 b6b128d1 0010 b6b128d1 0100 b6b128d1 1000 f4441eab 0001 f4441eab 0000 f4441eab 0000 f4441eab 1000 c181e5b9 0000 c181e5b9 0010 c181e5b9 0000 c181e5b9 1000 00386acd 0001 00386acd 0010 00386acd 0100 00000450 0020 cf5a5cc7 c0f8f692 99bc078e 52e65988 f61da283 1be9f90f 7fcfd1a1 b3c47fcc
+1 01 4000020c 000 00001111 1ee3ad08 0001 1ee3ad08 0000 1ee3ad08 0100 1ee3ad08 0000 83d35b1d 0001 83d35b1d 0010 83d35b1d 0100 83d35b1d 1000 c593dcab 0000 c593dcab 0000 c593dcab 0000 c593dcab 0000 7e0c6b33 0001 7e0c6b33 0000 7e0c6b33 0000 7e0c6b33 1000 00000200 0020 4875b16b 10199182 c79c87c3 6619e3c9 9ba1bde1 678828c4 6fcaf018 fcdda58e
+0 01 40000714 000 00001011 da4a6594 da4a6594 da4a6594 da4a6594 abcc19fb abcc19fb abcc19fb abcc19fb 313ef1c7 313ef1c7 313ef1c7 313ef1c7
+1 01 4000007d 000 00000111 753d8e00 0010 753d8e00 0100 753d8e00 1000 d68691a6 0001 d68691a6 0010 d68691a6 0100 d68691a6 0000 000000e3 0000 00000070 0020 98baab49 00dabdcb a2e3b825 4ee00761 2f8decbc b2d0633c b9ceb4c2 1248ec14
+0 01 400006ec 010 00000101 030d02f5 e1c95634 b190ad29 408d13c3 082c8ca3 54a89d35
+1 01 40000634 001 00001011 2248f3ad 0001 2248f3ad 0100 0fdc5239 0000 0fdc5239 1100 f56cb77b 0001 f56cb77b 1100 2b7ef397 0011 2b7ef397 0100 9c189226 0011 9c189226 1100 5867fc64 0011 5867fc64 1100 00000630 0020 70371e3d 2de4a21b dca6ca72 0cfbb350 d493f8c4 a82477e5 64073df4 020b940d
+1 01 40000239 000 00000000 00001b00 0010 00000230 0010 4f0fd340 ef96759c cd6eff5a edb46a28
+1 01 40000332 000 00001101 761d0000 0100 761d0000 1000 fa1ee625 0001 fa1ee625 0010 fa1ee625 0100 fa1ee625 1000 943bd065 0001 943bd065 0010 943bd065 0100 943bd065 0000 ddaf5e2e 0001 ddaf5e2e 0010 ddaf5e2e 0000 ddaf5e2e 1000 00000330 0010 1846ccc6 4ab68233 6508a22f fd70ab75
+0 01 400000c8 001 00001011 2fe92c32 2fe92c32 36259f00 36259f00 6e2a82bc 6e2a82bc f70b41ef f70b41ef 0e01ac78 0e01ac78 5269e331 5269e331
+0 10 400003fe 001 00000111 ae634a86 13a8a077 13a8a077 f412a313 f412a313 76838b70 76838b70 ae634a86
+1 01 40000544 010 00001010 933e5c26 1011 83a3b50a 1101 4e5a20a6 1111 3f36a091 1111 5b992d40 1111 6851639f 1111 d7da22ea 1111 b116502e 0010 c8a2d500 0111 75ca4942 1111 6d24b58a 1111 00000540 0030 5928a7f0 fef728ed f72b8bd2 4a37e462 7337e0f4 28427280 599b35f0 7a9d1738 2333aaae 377d0741 152dcafb b80ee37d
+0 01 40000400 010 00000011 8ef1081d 73246492 025cf0e0 b65b3daa
+1 01 4000042a 001 00001010 23880000 1000 48bc51eb 0011 48bc51eb 1100 1441d638 0011 1441d638 1100 20c46458 0010 20c46458 1100 b55a5be2 0001 b55a5be2 1100 01b26dc3 0011 01b26dc3 1100 00000420 0020 0913d306 8cb01eaa 8ff82255 6a005c8b 72157bd5 c7775d2d 73f16255 f5f4ed43
+0 01 4000010e 001 00001000 a346aac2 03f898ac 03f898ac d12b2c1b d12b2c1b 7183ce6c 7183ce6c de46e44f de46e44f
+1 01 40000030 010 00001100 3c0cc76d 1011 716daede 1110 85c9d867 1101 00a99115 1011 75d2fd6c 1110 dec0868a 1101 2835b551 1001 4eb5d1c9 1111 697971d8 1110 65402961 0110 ee48aba1 1101 109a4e60 1111 fb530770 1110 00000030 0040 08f90cbd b35184bb 54b4e2be 4bfbd52d fadd7cf9 ca55c543 75e4fe56 1d550dd6 f47d96f6 4dd13308 b4100952 9fa04736 d008b102 6b134c30 5dbdefbb 6c87bfbb
+1 01 400005e0 001 00001011 01e7d370 0011 01e7d370 1000 646f15fb 0011 646f15fb 1100 50654f29 0011 50654f29 1100 ee51ac9a 0011 ee51ac9a 1100 d5e34d86 0000 d5e34d86 1100 18093fc3 0010 18093fc3 0100 000005e0 0020 3c35de4c 20a4cf6a ac5db72f c93b5510 1e6182e2 2a5c29cf e60ef3ce 3e83978b
+1 01 400004e4 010 00001010 7a0f8f10 1011 7ffbf070 0111 150fef7f 1010 bf32cb09 1111 d6b78884 1100 52001a14 1111 a7adf9ee 1111 909ab905 1111 b5f01946 0111 2181ab8c 0111 10488615 1111 000004e0 0030 16e5aa28 32e6244d fbe43e6a b8fe44dd 8a1da0a2 c4e0c521 45722275 cc30b10e 9a81f404 c463657f dbaa8935 0a6097ed
+0 01 400005a8 001 00000000 623a8fb7
+0 01 40000644 010 00001111 9c189226 5867fc64 9bad79e7 d4bfbb2c 05dc2195 a0087bac 294b15e4 e1294795 ed0c68e1 d97b7ef1 66365077 ed13e206 df93d4c2 12fe27e1 b72a64da 2d2f552d
+0 10 40000580 010 00001111 71949b1a 1e600ded 9b8d1d02 5f6bb8bc d0735fef 9a6fc3bb d392f10d f44f8fe5 7545a20b c2f013d2 623a8fb7 d20de77d 46fa331f 70917b2d f1e46f86 0a5ff4e2
+0 10 40000188 001 00000111 d33ee1a9 d33ee1a9 488350ca 488350ca 918b5caf 918b5caf 5ba56c61 5ba56c61
+1 01 40000755 000 00001100 a50bba00 0010 a50bba00 0100 a50bba00 1000 b3376500 0001 b3376500 0010 b3376500 0100 b3376500 1000 a8969b59 0001 a8969b59 0000 a8969b59 0000 a8969b59 0000 00004261 0001 00004261 0010 00000750 0020 9b8effa3 17abad41 aab5c652 95ded82b e7833fca fae716a5 04082be1 829b00f8
+1 01 400003ac 001 00000110 99b13038 0000 99b13038 1100 3fb7c321 0010 3fb7c321 1000 2b41647f 0011 2b41647f 0100 0000a52d 0010 000003a0 0020 5e701cbf d059df04 a693edb7 a11a295b 4722fde2 f51db839 648dfad4 b848ff99
+0 01 40000268 010 00000000 8ea59519
+1 01 400001f6 000 00000111 fc8f0000 0100 fc8f0000 1000 398f08f9 0001 398f08f9 0010 398f08f9 0100 398f08f9 1000 00004c92 0001 00004c92 0000 000001f0 0010 9531ea29 4766e857 332a56be 7a2f9059
+0 01 40000481 000 00000010 4e569492 4e569492 4e569492
+0 01 400005e4 001 00001011 646f15fb 646f15fb 50654f29 50654f29 ee51ac9a ee51ac9a d5e3aa5f d5e3aa5f b2093f25 b2093f25 ab64f1e8 ab64f1e8
+0 10 40000215 000 00000111 bfe7d2eb bfe7d2eb bfe7d2eb 83d35b1d 83d35b1d 83d35b1d 83d35b1d bfe7d2eb
+1 01 40000751 000 00000010 6c610500 0010 6c610500 0100 6c610500 1000 00000750 0010 06b13dd2 8a10e1b8 c8c04ea0 b5286bf5
+1 01 4000062c 001 00000010 4104911f 0011 4104911f 0100 0000731d 0011 00000620 0020 525a782f 215aea38 cc654c2e f3f1474d 1492596d b5afff9f 5b5d8489 3284f7e8
+1 01 40000738 001 00000111 5478fa40 0010 5478fa40 1100 a4f063f4 0010 a4f063f4 0100 ab7b1cec 0011 ab7b1cec 1100 5d828b10 0011 5d828b10 0100 00000730 0020 448f2552 109a8664 832b3e67 1b1d3e95 08e16b75 2275f638 d05b57d4 8a8f14b6
+0 01 400000a9 000 00000100 8042b2e8 8042b2e8 8042b2e8 1025aa98 1025aa98
+1 01 400004fa 001 00000100 610b0000 1100 1dca3176 0011 1dca3176 1000 1d71fa31 0011 1d71fa31 1000 000004f0 0020 8a1da0a2 c4e0c521 f911860f a496c5d1 ff7ed4cd 92cd48b9 10df15e0 823471d1
+0 10 40000394 010 00000011 cf3ff7f4 b11a2acc 3cf9783c 21cfa88e
+0 10 400004e9 000 00000111 61fbf070 61fbf070 61fbf070 1528ef34 1528ef34 1528ef34 1528ef34 61fbf070
+0 10 400005c4 001 00000111 4ea3b0a4 4ea3b0a4 3a707842 3a707842 59f22caf 59f22caf cda1df91 cda1df91
+0 01 40000798 010 00001010 b37d907b 8cffc0cd 339f7669 da408421 8c51a39e 4776a969 c2331105 590a1ce2 584e7adc 424a8569 0b75725a
+1 01 40000000 010 00001101 a94bc6a4 1110 1f749c48 0111 ae1e3643 1000 28a3f170 1111 3a469432 1111 a39173bd 1111 55dc39f7 1101 886ee58e 1111 40bbceb1 0011 4704502f 1111 c5785066 1101 e31b8b6d 1111 44fd5198 0011 657562ab 0111 00000000 0040 7b9793e0 d94bd613 f10c0576 8ed1f02f 386ef362 60925f35 168e9eb6 fe530069 3ed1ed0e 969cb242 adaec115 59b8df56 c006c95c 88eb17d4 a5d9de16 6b2e85ba
+1 01 400004f8 010 00001011 1827e929 1111 ec921a34 1111 c855178c 1011 77ae4c2b 1010 1be04a9a 1111 f5c952a8 1111 b9ee5772 1000 5f9c8015 1101 e08aef14 0111 4c785603 0111 b58cb400 1111 a0e63758 0011 000004f0 0040 8a1da0a2 c4e0c521 d7f8133a 47a2ab55 fdca8bbb daad828d 7a9c49b2 8f5c8d80 2ba8704a e199ca76 8a02342d fdd30204 cf8d2115 82afb91f 370a5cdb 7ff7260b
+0 01 400000c8 010 00001100 2fe92c32 36259f00 6e2a82bc f70b41ef 0e01ac78 5269e331 9dc3aa94 ae3c25e2 b5ddd3c3 545236f5 abccf03c daeef03d f96c423a
+1 01 40000229 000 00000010 1d4d4a00 0010 1d4d4a00 0100 1d4d4a00 1000 00000220 0010 a8f55224 babce7b9 35fff230 3386965d
+0 10 4000065c 010 00000111 294b15e4 7b7ef397 9c189226 5867fc64 9bad79e7 d4bfbb2c 05dc2195 a0087bac
+1 01 400007ba 001 00001011 513c0000 1000 b126616b 0011 b126616b 0100 a299ec08 0011 a299ec08 0100 706ffa01 0001 706ffa01 1100 aeee8329 0011 aeee8329 1100 0f17c6bc 0011 0f17c6bc 1100 000093bb 0010 000007b0 0030 9bf532ef 94fd0caf 8a6cd0c8 c8910747 6d3e3b0c c0bb4610 8fe26b9f 26520ff0 78965360 5546c55f ee8881fc 2133136a
+0 01 40000015 000 00000010 a39173bd a39173bd a39173bd
+0 01 400004a4 010 00001101 701784a5 a2ef459e 512eda65 89cc8ac5 78cff477 b9e515d7 8804ff59 8ff9718d 250cb124 fa544061 6bdcedc8 fccc2672 bf5cd520 7cfa24de
+0 10 400006e4 000 00000111 4beef1b9 4beef1b9 4beef1b9 4beef1b9 ffccf1b8 ffccf1b8 ffccf1b8 ffccf1b8
+1 01 400002bc 010 00001000 e0b446f4 1011 b9bd6373 0111 6c4a0c0b 1111 bbd0e743 1001 644ef6b3 1010 d2481a99 0111 f2376cb2 0011 bbb0f5ce 1001 8a025f78 1010 000002b0 0030 e61a2853 608a0dec e4b67496 1d1e2d7f 1881192a 9131db04 d8e137ad 7af60a04 2f841617 64f2a31e 0a169ad2 99e0a7ad
+1 01 40000044 010 00001000 1ed70ef2 1110 11a8e4ea 0111 0d4845b2 1110 5f256922 1100 7eb54d08 1111 66c0b875 1011 41fe6d28 1111 322d098f 0001 2ec25a89 1111 00000040 0030 40fef3bc 605ce40f 7576c32c 00e8fb67 19e1adf9 cc7d99ed cb6ae3ad d20b00fe 7ba32fff e790425c 1b62fc1f fc1cac03
+0 01 4000025e 001 00000001 677b3337 01c8836e
+1 01 40000304 000 00000011 5e6beca0 0000 5e6beca0 0010 5e6beca0 0000 5e6beca0 0000 00000300 0010 54e2714f 7521e2a3 1aa6b920 0870211f
+1 01 400007c8 001 00001001 70cd6977 0010 70cd6977 0100 72b8ac5a 0001 72b8ac5a 0100 998827d2 0000 998827d2 1100 eaf1d774 0011 eaf1d774 1100 7f096ef7 0011 7f096ef7 0100 000007c0 0020 6d3e3b0c c0bb4610 36612b29 30c99728 b786f13f 1a473aa1 1911d29d 247a625e
+1 01 400005b8 001 00001010 2eb5d5bb 0011 2eb5d5bb 1000 5932d14d 0011 5932d14d 1100 b1e07c8f 0011 b1e07c8f 1100 726b3dcd 0010 726b3dcd 0100 3f962207 0011 3f962207 0100 00001fb9 0011 000005b0 0020 fbfff3e6 d94bbc7a aec0a416 57438419 fe4aaf15 09916817 23e4a294 87f25d6d
+0 10 40000428 000 00000111 239df85e 239df85e 239df85e 239df85e 48bc51eb 48bc51eb 48bc51eb 48bc51eb
+1 01 400003f8 010 00001101 98fcccaa 1011 069d35df 1111 5594bf73 1101 38c69e95 1111 9677cc21 0111 b3a9cea2 1101 1e749c8e 1001 7442704b 1110 531eed32 0111 5727326d 1111 3192c630 1111 bc6c14e3 1110 8bea379b 1011 e992565e 1110 000003f0 0040 5b88cb03 42d80aa6 11a7573a 06125738 7f84d770 20d00451 f52c19b9 49080201 f0d9dcd9 2ba05646 dccf75b5 21840611 c27775bf a3d2883a e1d2c03c 94e69a87
+1 01 4000071c 001 00000001 c5a4ed5e 0001 c5a4ed5e 0100 00000710 0010 37d652f0 e1c50a4f 2eda9d66 ca11e2a6
+0 01 4000020d 000 00001101 4ce35308 4ce35308 4ce35308 83d35b1d 83d35b1d 83d35b1d 83d35b1d bfe7d2eb bfe7d2eb bfe7d2eb bfe7d2eb 7e17ef33 7e17ef33 7e17ef33
+1 01 40000514 010 00001111 6da2412d 1101 b4c3ee68 0011 fa34aafb 1101 2434b3db 1011 c52b143f 1111 f153f027 0111 f28fd592 1001 364c915a 1111 46d3b811 0111 2870558c 1111 c55b2dd4 1110 f9486cd1 1111 ab7efbc1 1101 f7212d07 1101 903a8303 1111 cbf75a89 1101 00000510 0050 5f082ac8 77a2c004 f3b18d8d 8d2082ba de595854 4839ae78 4f60de0c bc45547d 6051da8a 668988aa 1812829b 6c27ecdb 7a5d3597 89c857d7 1f802719 88785624 17559b39 83c1976e b69c106c 7561a49b
+1 01 400007da 001 00000111 2abc0000 1100 10e3ee94 0011 10e3ee94 1100 1f1d72f2 0011 1f1d72f2 0100 243e63ac 0011 243e63ac 1100 0000fec7 0011 000007d0 0020 b786f13f 1a473aa1 79214d98 e39b0508 a1e1c186 444526ee 409491fd d1e713c9
+1 01 40000754 001 00000010 26fc6048 0011 26fc6048 1100 00008a57 0011 00000750 0010 7f5f7178 02f45432 aa4a4d45 4b8e0a08
+0 10 40000585 000 00001111 1e600ded 1e600ded 1e600ded 9b8d1d02 9b8d1d02 9b8d1d02 9b8d1d02 5f6bb8bc 5f6bb8bc 5f6bb8bc 5f6bb8bc 71949b1a 71949b1a 71949b1a 71949b1a 1e600ded
+0 10 400002c0 010 00001111 0ebd6373 6c4a0c0b bba43043 64acf675 70481a99 41ae6cb2 bb7ac4ce 8a4f5f40 6bf8fd99 1e737cd1 ccc87f5c ef56d032 ff63842b 1abf90b7 6c9fda88 6fe1c6f2
+1 01 40000377 000 00000001 54000000 1000 0000002d 0001 00000370 0010 ce914acc cc14c251 19a6e12f 703cb58b
+0 10 400007f6 001 00000001 e369a290 e369a290
+1 01 4000033e 001 00000011 19ab0000 1100 d338df6b 0001 d338df6b 1100 00004247 0011 00000330 0020 1846ccc6 4ab68233 cea363b6 d674c3bc 666e6074 a48dbdc6 35f51316 cf5032de
+0 10 400006a0 000 00000011 e16f0d91 e16f0d91 e16f0d91 e16f0d91
+1 01 400001a8 010 00000011 e64811cc 0111 845dc78f 0101 3231af37 1011 58e8f727 1111 000001a0 0020 0007d4e9 aefe9f1f b3bdae6b 89a490a2 1f98c6c2 4403873b d0fb9a41 db38f2d1
+1 01 400002d0 001 00000011 88ade303 0001 88ade303 1100 efe04d3d 0011 efe04d3d 1100 000002d0 0010 4f6e1ddd c1fd9c84 b2ced3d2 528289b0
+0 10 4000072c 010 00000001 ad5274f7 3b79113a
+0 10 400006ac 010 00001111 ddee5f40 6fcc85ac bc461526 a2d5aa7d 8aebe714 2d2f552d 00eb5dfa ebf84c77 5e9742d6 789a2da1 ee8f81ac c24d5c2e 760b0743 e16f0d91 932a8a93 4921c96c
+1 01 400007ba 000 00001000 2e3b0000 0000 2e3b0000 0000 aeb097ea 0001 aeb097ea 0010 aeb097ea 0100 aeb097ea 1000 003939b3 0001 003939b3 0010 003939b3 0100 000007b0 0020 9bf532ef 94fd0caf 1770df29 c849a4d9 e8746efa b8bb8954 ae096067 496ee35b
+1 01 40000174 010 00001000 e4f741b0 1110 44e9989d 1101 4f6ee850 1110 45134861 1001 8bc1b3cc 0111 11b0aa9c 1111 ee50cfa1 1011 1c9e35f3 1010 2e259851 0111 00000170 0030 5e3bf238 5b2774e9 dcf34a0e 4fb97e79 524c45d7 fa2858b2 48394d0b b8e9b183 4547ae49 81c396db 4373e10f a786b8ae
+0 10 4000042a 001 00000111 8b9d379b e99256eb e99256eb 3192c630 3192c630 bc6c14ee bc6c14ee 8b9d379b
+1 01 40000104 001 00000100 4bf1fc7f 0000 4bf1fc7f 0100 36cf70bb 0011 36cf70bb 1100 00008a8c 0011 00000100 0010 ad0e54aa 136096cb 1bec3752 66b4c3ee
+0 01 40000540 010 00000110 f9486cd1 ab7e5cc1 f721f107 903a8303 cbf7a089 5b992d40 6851639f
+0 10 400006de 000 00000111 de48da96 de48da96 4f192556 4f192556 4f192556 4f192556 de48da96 de48da96
+0 01 400000b7 000 00000011 ba0af02d 26ea2fca 26ea2fca 26ea2fca
+0 10 4000032d 000 00000011 feab9cbe feab9cbe feab9cbe feab9cbe
+1 01 400000f8 001 00001001 b0f7ba19 0011 b0f7ba19 0100 06aba39a 0011 06aba39a 0100 1e6dc937 0011 1e6dc937 0000 3a2ea85a 0001 3a2ea85a 1000 9b0b84f6 0011 9b0b84f6 0100 000000f0 0020 51397bd2 a62fe109 9a1ab0ce 30948448 44a436f6 57488f2d a7b46ac1 86fba0f0
+1 01 400002c6 000 00001001 1ec60000 0000 1ec60000 1000 a6c595fa 0001 a6c595fa 0010 a6c595fa 0100 a6c595fa 1000 db35a03f 0001 db35a03f 0010 db35a03f 0100 db35a03f 1000 000002c0 0010 0608a620 4916f519 9dcbefc1 9c434a5f
+1 01 400005b8 010 00000101 33709370 1111 82baefee 0111 5045f996 1100 a22d4b1a 0101 9cc94e73 1000 0fe1f21b 0111 000005b0 0020 fbfff3e6 d94bbc7a 2d3e91ed ec367eac 7dc26337 179dfecd 36f8c93b aa99c45d
+0 01 40000650 010 00001011 d4bfbb2c 05dc2195 a0087bac 294b15e4 e1294795 ed0c68e1 d97b7ef1 66365077 ed13e206 df93d4c2 12fe27e1 b72a64da
+0 10 40000520 010 00000111 248cb3db c52b143f 8d53f027 f22e0b92 364c915a c2d3b811 2870558c c55b2d8b
+1 01 40000630 001 00001100 97598dae 0011 97598dae 0100 da15f4e2 0011 da15f4e2 1100 088f7d54 0011 088f7d54 0100 12eeaa90 0011 12eeaa90 1100 62cb95b5 0010 62cb95b5 1100 e600d95d 0011 e600d95d 1100 00004d7b 0010 00000630 0020 cdb42e74 3ff5a2ec 1efad133 d5812400 5b5d2dd4 2d35d407 93f497de cf27a791
+0 01 400006c0 001 00001000 90dd5d1a 90dd5d1a 7c90197f 7c90197f 5aeea81d 5aeea81d 7c539d4f 7c539d4f 508b11ff
+0 10 4000008e 001 00000111 f18f4887 bd8691a6 bd8691a6 d3ce0fa3 d3ce0fa3 32fc639a 32fc639a f18f4887
+1 01 40000641 000 00001101 852ca200 0010 852ca200 0100 852ca200 1000 90db6f57 0001 90db6f57 0010 90db6f57 0100 90db6f57 1000 ffbd8d8c 0001 ffbd8d8c 0010 ffbd8d8c 0100 ffbd8d8c 1000 00452a13 0000 00452a13 0010 00452a13 0100 00000640 0010 502b3f42 3b55d040 59377791 e1d31e1c
+0 10 400006e0 001 00000111 ffccf1b8 ffccf1b8 4beef1b9 4beef1b9 e778442d e778442d 030d02f5 030d02f5
+1 01 400007e6 001 00000001 14850000 1100 00002870 0010 000007e0 0010 47de0850 5d07e591 d3bf2e4e 0dd77912
+1 01 4000042d 000 00000000 00008500 0010 00000420 0010 c27775bf a3d2883a 822d5997 f76c12a4
+1 01 4000039f 000 00001101 98000000 0000 6d81d81c 0001 6d81d81c 0010 6d81d81c 0100 6d81d81c 1000 d15873e3 0001 d15873e3 0000 d15873e3 0100 d15873e3 1000 451d5dc2 0001 451d5dc2 0010 451d5dc2 0100 451d5dc2 1000 000000e3 0000 00000390 0020 7466a8b3 192e5591 92656ebd f825245d cf46b467 ae33f500 04a72a85 61f6f048
+0 10 4000065f 000 00001111 294b15e4 d4bfbb2c d4bfbb2c d4bfbb2c d4bfbb2c 05dc2195 05dc2195 05dc2195 05dc2195 a0087bac a0087bac a0087bac a0087bac 294b15e4 294b15e4 294b15e4
+0 01 40000094 001 00000001 aeaebc76 aeaebc76
+0 10 400007d0 001 00000011 998893b2 998893b2 eaf1d774 eaf1d774
+1 01 400002cc 010 00001011 dcb3b8e0 1101 f2c53671 1001 a8efcbf9 1101 4fa892f2 1101 13f613b5 0111 726d61df 1101 43dbaca6 0110 bcb32b8a 1110 c93ddc44 1010 4d2a210e 1111 57f97ed3 0011 031c92c2 1111 000002c0 0040 0608a620 4916f519 ed12b445 a6e00761 709c62ab 691418de 93a205af e3b08184 fea99773 417b44ed 9af27b60 8bfa6b8b c3e74592 82c298a2 d3d4621c 910382f9
+1 01 40000492 000 00001111 08280000 0100 08280000 0000 335f7a35 0001 335f7a35 0010 335f7a35 0000 335f7a35 1000 2f9babd8 0001 2f9babd8 0000 2f9babd8 0100 2f9babd8 1000 05d7ae70 0001 05d7ae70 0000 05d7ae70 0100 05d7ae70 0000 0000c657 0000 0000c657 0010 00000490 0020 d2473f79 1ff8382f 3c70853a 4c4debf2 e2e8fda7 4dc33f4c a121e498 eb0420be
+0 01 400006a0 010 00000011 e16f0d91 932a8a93 4921c96c ddee5f40
+0 01 40000392 000 00001110 21cfa88e 21cfa88e cf3ff7f4 cf3ff7f4 cf3ff7f4 cf3ff7f4 b11a2acc b11a2acc b11a2acc b11a2acc 3cf9783c 3cf9783c 3cf9783c 3cf9783c 6d81d81c
+0 10 400001d6 001 00000001 5a0dc059 5a0dc059
+0 10 40000784 010 00000011 0c4d2e75 b136c86c 201ccccb 4c0b42b9
+0 10 40000380 010 00000011 053e8431 13ea6ced 8e58542c 19db7e26
+1 01 40000088 010 00000101 966c684e 1111 199e339d 0111 aece952b 0111 8f4c83c4 1001 d6fe6f34 1001 bdbca881 0111 00000080 0020 2f8decbc b2d0633c 2cd215bc 9cf5c009 0982ea7b c9f0e0a8 5d1eefb1 b2e0eb53
+1 01 400006e4 010 00000101 95f982a6 1011 bc41d01a 0111 15b32431 1100 d0735d86 1011 360c2282 1111 b4864330 0011 000006e0 0020 a39d0861 bf0fdfc4 a60a254e b1e96d26 c48f13d3 559bea60 9974f092 b2f7fbbb
+0 10 400006d8 001 00000011 4f192556 4f192556 de48da96 de48da96
+0 01 4000064c 001 00000111 9b452ae7 9b452ae7 d4bfbb2c d4bfbb2c 05dc2195 05dc2195 a0087bac a0087bac
+0 10 40000748 010 00000111 ffe422f2 791a5645 6c610587 26fc6048 b3378a57 72c91759 ab7b1cec e6828b10
+0 10 400006c8 010 00000001 5aeea81d 7c539d4f
+0 10 4000064c 010 00001111 9b452ae7 d4bfbb2c 05dc2195 a0087bac 294b15e4 e1294795 ed0c68e1 d97b7ef1 66365077 ed13e206 df93d4c2 12fe27e1 b72a64da 852ca297 90db6f57 ffbd8d8c
+1 01 4000020c 010 00000010 a4ed96f6 1101 6848bbdc 1011 33df72bb 1011 00000200 0020 4875b16b 10199182 32776a29 8c5f2a18 f1acb0ff b4969260 3f96112f 0dc9f66e
+0 10 400000c0 010 00001111 e585d13e 1bab456a 2fe92c32 36259f00 6e2a82bc f70b41ef 0e01ac78 5269e331 9dc3aa94 ae3c25e2 b5ddd3c3 545236f5 abccf03c daeef03d f9f7ba19 0baba39a
+1 01 40000174 010 00001001 b46e7544 1111 5f4d937a 1011 ac7f8480 1111 313ce845 0101 c2b7b62c 1011 ac4f24a2 1111 f006faf5 1111 78cd0a5e 1111 0ed0c26e 1110 7369b42a 1110 00000170 0030 1af370f6 0f353cf2 e3f51051 273fd8a3 c7345aa0 15bb1035 cc6a811e e6f10c48 a9f17f8b 21fdd6a9 c14d6c4e 983b447a
+0 01 40000614 001 00001000 85e25410 85e25410 e7abcfad e7abcfad 66d9e2bf 66d9e2bf ae67337a ae67337a 3160d0f7
+1 01 40000228 001 00001101 5c48a8bb 0000 5c48a8bb 0000 6db4ff5b 0011 6db4ff5b 0100 62884808 0011 62884808 0100 0f04844a 0011 0f04844a 0000 7f46e01b 0011 7f46e01b 1000 6bcde156 0001 6bcde156 1100 9f193b95 0011 9f193b95 1000 00000220 0030 a8f55224 babce7b9 ce21d7bd 86002f2f 777d0a5a 5c2bc301 557183e7 a866d9f0 326f25dc 3504d7d3 c226b526 c1f2ab79
+0 01 400000a4 010 00001010 7e90a50b 8042b2e8 1025aa98 98a0d62c ba0af02d 26ea2fca 65cf15ef e585d13e 1bab456a 2fe92c32 36259f00
+1 01 400004a8 010 00001101 42a3b0a3 0111 0b10883d 0111 d7bb8f59 1111 6b42cd40 0101 1e14bf6b 1111 adc31966 1111 a775b2cd 1100 6f9ed6e7 0111 82016be6 0010 c8790d71 1101 9e1fbf70 1111 5309cd10 0001 d2c66f93 1010 7cd4aed8 0011 000004a0 0040 e2e8fda7 4dc33f4c 2599b94b 8c5f2465 02e41485 31b30740 0384ff8e f6a37c9e baa7270e 635f1cdb 93f93328 75cdb7fb 874a528c ddbb5b85 b191bb7d 25976924
+1 01 40000459 000 00000011 5ed5d900 0010 5ed5d900 0100 5ed5d900 1000 000000e7 0001 00000450 0010 cf5a5cc7 c0f8f692 551a4b84 e8518afe
+1 01 40000436 000 00000010 f5c60000 0100 f5c60000 1000 00000013 0001 00000430 0010 ff8c0b30 3f6a046c c904ac2c 51906927
+0 10 4000034c 000 00000111 586bb4bd 586bb4bd 586bb4bd 586bb4bd b18958b6 b18958b6 b18958b6 b18958b6
+0 10 40000246 001 00000011 f1f1ed01 9f4e3b95 9f4e3b95 f1f1ed01
+1 01 400004e4 000 00000111 3cad5457 0001 3cad5457 0010 3cad5457 0100 3cad5457 1000 12ac6833 0000 12ac6833 0010 12ac6833 0100 12ac6833 1000 000004e0 0010 12bd3e43 475098f6 e80c9923 f3741d42
+0 10 40000570 001 00000011 e3ea54ec e3ea54ec 98d53183 98d53183
+0 10 40000007 000 00000111 55749c48 a94bc655 a94bc655 a94bc655 a94bc655 55749c48 55749c48 55749c48
+0 01 4000026a 001 00000101 8ea59519 f005e54e f005e54e 792fac38 792fac38 196abb2d
+0 01 40000518 010 00001101 628aee68 fa3456fb 248cb3db c52b143f 8d53f027 f22e0b92 364c915a c2d3b811 2870558c c55b2d8b f9486cd1 ab7e5cc1 f721f107 903a8303
+1 01 40000568 001 00000110 1af9d9b4 0000 1af9d9b4 1000 45849637 0001 45849637 1100 0930e5f5 0011 0930e5f5 1100 00009bac 0011 00000560 0020 2333aaae 377d0741 ba96bff9 2beae315 628feb28 81ee482e ee708713 9e711192
+0 01 40000181 000 00000110 453c5c45 453c5c45 453c5c45 c2c1b62c c2c1b62c c2c1b62c c2c1b62c
+0 01 4000068e 000 00000100 5e9742d6 5e9742d6 789a2da1 789a2da1 789a2da1
+0 10 40000624 010 00000011 3160d0f7 e95c4c1f f204911f ae67337a
+0 01 4000050a 001 00001011 1be04a9a f5c952a8 f5c952a8 b94e401b b94e401b 6da2a82d 6da2a82d 628aee68 628aee68 fa3456fb fa3456fb 248cb3db
+1 01 400003fa 001 00000100 d9ac0000 1100 544afc08 0011 544afc08 1100 ba7db697 0010 ba7db697 1100 000003f0 0020 5b88cb03 42d80aa6 f50a93a1 2d60171b d63e800a adcd08ba e3adaef4 35efdc58
+0 01 40000084 001 00001101 d3ce0fa3 d3ce0fa3 966c684e 966c684e f19e339d f19e339d a5ce952b a5ce952b 8faebcc4 8faebcc4 d6086f34 d6086f34 3abca881 3abca881
+0 01 400000be 000 00000110 65cf15ef 65cf15ef e585d13e e585d13e e585d13e e585d13e 1bab456a
+0 01 40000453 000 00001100 f7a75980 c76b5964 c76b5964 c76b5964 c76b5964 5ed5d9d1 5ed5d9d1 5ed5d9d1 5ed5d9d1 f4257ee7 f4257ee7 f4257ee7 f4257ee7
+1 01 400002dc 001 00000011 4a1781f2 0011 4a1781f2 1100 df8ba5da 0011 df8ba5da 1100 000002d0 0020 709c62ab 691418de 755046a3 d263875c e86faef3 a9376379 247a7887 98dd41ed
+1 01 40000113 000 00000011 3d000000 1000 001b8b54 0001 001b8b54 0010 001b8b54 0100 00000110 0010 8e7004d4 a7a6f3dc 0fdac9b2 50014d56
+0 10 400004c7 000 00000011 259ed6e7 259ed6e7 259ed6e7 259ed6e7
+1 01 40000382 001 00001100 26da0000 1000 71f7cee5 0001 71f7cee5 0100 f6c33e62 0001 f6c33e62 0100 e78782df 0000 e78782df 1100 f582016c 0011 f582016c 0100 b8f3d476 0011 b8f3d476 1100 4021974b 0010 4021974b 1100 00000380 0020 ffcc7d60 d6fb125f d62af8e5 160e6904 7eb706bf accfd771 0e5af878 79aca75c
+1 01 40000288 001 00000100 ee9f4cf1 0011 ee9f4cf1 1000 d79752f4 0011 d79752f4 1000 00003153 0011 00000280 0020 0c96bc57 1231f05f f3765bd0 b1875a57 2d0ca193 9b9177dd 02a48b25 f9cbe1d0
+0 01 400003f4 000 00001110 f412a313 f412a313 f412a313 f412a313 d9acccaa d9acccaa d9acccaa d9acccaa 544afc08 544afc08 544afc08 544afc08 ba7db673 ba7db673 ba7db673
+0 01 4000006b 000 00001000 8a59ebe0 76afad2d 76afad2d 76afad2d 76afad2d ee159b0f ee159b0f ee159b0f ee159b0f
+0 01 40000270 010 00001100 792fac38 196abb2d 2cc28bb8 6277ce4e 8c9ecf7d 72f38e43 eeb44cf1 d76552f4 fbb03153 8abb4a4f bab7c281 5e19da13 539bcdd9
+0 10 4000070c 010 00000011 7568021f 54a89d35 9112f1c1 4e24f12e
+0 01 40000464 010 00000011 e5386acd 88b21ec8 2c75f1f3 1eb653ca
+0 10 400007e2 001 00000111 a71d72f2 148563ac 148563ac 907628c7 907628c7 19a7a99b 19a7a99b a71d72f2
+1 01 400004f4 010 00001101 9e76aa78 0111 603c461c 0101 21bfa076 1110 92bba43f 1111 e7c077fa 0011 f5e33374 0111 360ec3ef 1111 b16b2edf 1000 7aa22bd1 1111 bab4445a 1111 a239e919 0111 0cb521b4 1011 2c1d2349 1111 af3160e5 1111 000004f0 0040 6647371e ed6f9827 27085c6d 02780139 c678e092 0e305cf0 1b6c397d 67f8b9a5 da81d05b 264e7fcb 879f4901 4bdbeca1 66c857fb 68f1ca51 a32d3143 6919cca1
+1 01 40000360 010 00000100 47e216ac 1110 3cf7bfc5 0101 f4068943 1110 89c89a29 1110 aae618a1 1111 00000360 0020 3998bc61 5d076ab9 8fb05200 0601f834 c43b7057 8b802a98 6c19bf56 d793595f
+0 10 400005bc 001 00001111 59baefee 59baefee 7545a20b 7545a20b c2f013d2 c2f013d2 623a8fb7 623a8fb7 d20de77d d20de77d 46fa331f 46fa331f 70917b2d 70917b2d 33709370 33709370
+1 01 40000232 001 00000111 fc4f0000 0100 596594d9 0000 596594d9 1100 41361a37 0011 41361a37 0000 338c8d45 0011 338c8d45 1100 00003b9f 0010 00000230 0020 5547febc fa3728a9 72578add cd7e3a31 326f25dc 3504d7d3 c226b526 c1f2ab79
+0 10 4000002c 010 00000111 e31b8b6d 3c265198 717562ab 85c9a867 000d9115 d7a0ceb1 4704502f c578be66
+1 01 40000267 000 00000000 5b000000 1000 00000260 0010 c2aaaf9b f9240c3f e5485a83 0e3c4da2
+0 01 400002f0 010 00000011 4d2a210e 1abf7ed3 031c92c2 6fe1c6f2
+1 01 4000050b 000 00001010 89000000 0000 d9f0275d 0001 d9f0275d 0010 d9f0275d 0100 d9f0275d 0000 cfda5e63 0001 cfda5e63 0010 cfda5e63 0100 cfda5e63 1000 0000ef74 0001 0000ef74 0010 00000500 0020 c678e092 0e305cf0 5deef554 faeb9141 d75375d7 f6fc3fe6 17b95cad af0f010c
+0 01 400004d4 010 00000011 bf5cd510 d2fa6fde 136aaed8 3805af0f
+0 01 400006a2 001 00000101 e16f0d91 932a8a93 932a8a93 4921c96c 4921c96c ddee5f40
+0 10 400005e8 000 00001111 50654f29 50654f29 50654f29 50654f29 ee51ac9a ee51ac9a ee51ac9a ee51ac9a 0184d370 0184d370 0184d370 0184d370 646f15fb 646f15fb 646f15fb 646f15fb
+1 01 40000384 001 00001010 8e98e8c6 0011 8e98e8c6 1100 bdfd729b 0010 bdfd729b 1100 2016eba8 0011 2016eba8 0100 b5952881 0011 b5952881 1100 4c8a4a7a 0010 4c8a4a7a 1000 0000fd9f 0011 00000380 0020 8ab1f6a6 bf1d509d b4c72658 3ef836b6 9f146101 a358c0b8 60a37908 b1db1f58
+1 01 4000030c 010 00001010 52f42294 1111 b7f82281 1111 4a831d18 1101 f8395a7c 1110 47008c4c 1111 eee2e1c7 1111 8e0e9c18 1100 0ced9c20 1000 aa842ad1 0111 f2673f10 0111 a265cb6a 0110 00000300 0040 54e2714f 7521e2a3 5f3670e2 7a429193 7c2748db 74aa012e 0b5fad64 e88fd607 71d97808 30296d19 976d8642 7505d524 f8c73b9b 6156e405 8ecac6a1 ea95ca81
+1 01 400006ac 001 00001011 e10a29f8 0010 e10a29f8 1000 6155f8e9 0010 6155f8e9 1100 955241c8 0000 955241c8 1000 7f4327d9 0000 7f4327d9 1100 aa8d9d6f 0011 aa8d9d6f 1100 83f9a8f7 0011 83f9a8f7 1100 000006a0 0030 20c29618 f71f9211 d3cb3627 97be43b3 28985861 9d14ca14 66e58f35 c2e22ed2 513593f0 427c38bf d201f485 e9f14542
+1 01 400005dc 001 00000001 38a39b85 0001 38a39b85 1100 000005d0 0010 0faec63f 279d8147 2326cf79 6561a098
+0 10 40000298 001 00000001 bab7c281 bab7c281
+0 01 400004b4 001 00000010 7842f440 7842f440 1e14bf6b
+1 01 400002e4 000 00000110 6529b49e 0000 6529b49e 0000 6529b49e 0100 6529b49e 1000 007352e6 0001 007352e6 0010 007352e6 0100 000002e0 0010 fb45a04f d9c0d832 38aa116e 5ed1722c
+0 01 40000508 010 00000111 1be33374 36f0275d cfda5e63 7aa2ef74 bab4445a fa39e919 0c8c21b4 2c1d2349
+1 01 4000028e 001 00001000 86e70000 0100 34f12618 0011 34f12618 1100 1d530550 0011 1d530550 1100 20a81dd3 0010 20a81dd3 1100 266a6de9 0011 266a6de9 0000 00000280 0020 0c96bc57 1231f05f be4f24ca da3bcfe9 6dfa48c4 a237b5db 3e804f45 47fddba5
+0 10 40000769 000 00000111 37d439c6 37d439c6 37d439c6 384af80a 384af80a 384af80a 384af80a 37d439c6
+0 10 400003dc 010 00000001 8eb886c7 c9418f54
+0 10 40000705 000 00000111 9112f1c1 9112f1c1 9112f1c1 54a89d35 54a89d35 54a89d35 54a89d35 9112f1c1
+0 10 400002c8 010 00000001 a6c595fa dcb3a0e0
+0 10 40000002 001 00000011 a94bc655 55749c48 55749c48 a94bc655
+1 01 40000210 000 00001110 32af736a 0001 32af736a 0010 32af736a 0100 32af736a 1000 60b90f10 0001 60b90f10 0010 60b90f10 0100 60b90f10 1000 2ad3c20d 0001 2ad3c20d 0000 2ad3c20d 0100 2ad3c20d 1000 0026063d 0000 0026063d 0000 0026063d 0100 00000210 0010 187f93ad b75c41af 0a5be3f1 e7d8e32c
+0 01 4000079a 001 00001101 b37d907b 8cffc0cd 8cffc0cd 339f7669 339f7669 da408421 da408421 8c51a39e 8c51a39e 4776a969 4776a969 c2331105 c2331105 590a1ce2
+1 01 400004ec 001 00001110 439ca65f 0010 439ca65f 1000 901ec11d 0011 901ec11d 1100 74eef59c 0001 74eef59c 1100 307e19e7 0001 307e19e7 1100 01a28214 0011 01a28214 1100 33ba230b 0011 33ba230b 1100 f7696c36 0011 f7696c36 1000 0000be9e 0001 000004e0 0030 12bd3e43 475098f6 672e7474 af237fea 594306fa c6a26b63 9eb00a3f dbaa8b71 90c3dce5 037e8aec 76e4803c 7f381b29
+0 10 40000020 010 00000111 d7a0ceb1 4704502f c578be66 e31b8b6d 3c265198 717562ab 85c9a867 000d9115
+0 01 40000712 001 00000110 cacbb192 da4a6594 da4a6594 abcc19fb abcc19fb 31a4f15e 31a4f15e
+1 01 40000706 001 00000111 a47f0000 1000 6aa670eb 0011 6aa670eb 0000 ee8f2c07 0011 ee8f2c07 1000 fcca50b7 0011 fcca50b7 0100 0000ead4 0011 00000700 0020 459720e9 32b9923f a00e04a1 039d3aa4 d7d6772f 2b25f645 629cc537 c6d223a3
+0 10 40000236 001 00000111 5965844a 7f7a1a37 7f7a1a37 338c8d45 338c8d45 714f4808 714f4808 5965844a
+0 10 40000302 001 00001111 c0dc0561 51e4ec32 51e4ec32 cfbf48fb cfbf48fb 52f42294 52f42294 b7f82281 b7f82281 4a830f18 4a830f18 f8395ae9 f8395ae9 47008c4c 47008c4c c0dc0561
+0 10 4000020e 001 00000001 a4ed53f6 a4ed53f6
+1 01 40000098 010 00001001 2e4a3da7 1111 52865f12 1101 1ac8e365 1101 6ea7aa3a 1111 bbdd53a6 0100 538b7403 1101 27655d1f 1110 f992d9d8 1011 91b0b0db 1101 73437826 1110 00000090 0030 0982ea7b c9f0e0a8 357cc0c1 446c7f4b c6fb36b1 67124bf2 ec401dfc f6530487 c3160333 7df4b9dc 9187295c 7a30d340
+1 01 40000018 001 00000111 6a70588b 0011 6a70588b 0100 6d344d3f 0001 6d344d3f 1100 9f0b8f74 0011 9f0b8f74 0100 90e6e283 0011 90e6e283 1100 00000010 0020 386ef362 60925f35 fa35449f e238782e 9c07d67f 1da3064e 8231050f d634a6f6
+1 01 400002f8 010 00000000 75658686 0110 000002f0 0010 c3e74592 82c298a2 9089cdb3 43c69461
+1 01 4000032c 000 00001110 bf65a97e 0000 bf65a97e 0010 bf65a97e 0100 bf65a97e 1000 6e131063 0001 6e131063 0010 6e131063 0100 6e131063 1000 c0b3ecc7 0000 c0b3ecc7 0010 c0b3ecc7 0100 c0b3ecc7 1000 00064de7 0001 00064de7 0010 00064de7 0000 00000320 0020 71d97808 30296d19 f99e3b9e ca1313ed 3277bbb5 e22fe951 aef4a1a4 ac97d6bd
+1 01 4000058b 000 00001001 7a000000 1000 0a47f288 0000 0a47f288 0010 0a47f288 0100 0a47f288 0000 1d10bc07 0001 1d10bc07 0010 1d10bc07 0100 1d10bc07 1000 00000096 0000 00000580 0020 04cc6ccb abb96a61 455969ca ea71726b 8910d2a2 f779de85 089c8bf5 34126c2a
+1 01 4000046c 000 00000001 00008c39 0001 00008c39 0010 00000460 0010 f61da283 1be9f90f 2943868d 87f65b67
+0 01 40000740 010 00000100 ab7b1cec e6828b10 ffe422f2 791a5645 6c610587
+0 01 40000478 001 00001100 a8e2f156 a8e2f156 f062be77 f062be77 4e569492 4e569492 20e3353b 20e3353b ec23f12b ec23f12b f0e11273 f0e11273 1028885e
+0 01 4000001c 010 00001011 6d34e53f d70b8f74 90e6e283 c578be66 e31b8b6d 3c265198 717562ab 85c9a867 000d9115 75d2fd1e 1ed70e8a 28a8e4ea
+1 01 400000f0 010 00001000 8b5a039d 1101 17a97d35 1111 3ab26937 0001 f76101d7 1110 358eb26d 1111 93e4fe2b 1101 8f190718 1101 2e0b0534 1110 b7372cb8 1010 000000f0 0030 6cd3393b 6c1d47e1 dc20b16c 985bc573 78d763f0 6792eb8d 01d4fabf d70e3a1a f4ae1a57 f832c0ea 2f8e9657 7cdd5cb1
+0 10 400006bb 000 00001111 7f43aa7d aa8d9d6f aa8d9d6f aa8d9d6f aa8d9d6f 6155f8ac 6155f8ac 6155f8ac 6155f8ac 95461526 95461526 95461526 95461526 7f43aa7d 7f43aa7d 7f43aa7d
+0 01 40000586 001 00000010 1e600ded 7a8d1d02 7a8d1d02
+1 01 40000478 010 00000001 c8efdb5e 1011 c5811135 0111 00000470 0010 4bcba871 04a6b6f4 02695e67 ce619891
+0 10 400005e6 000 00000111 646f15fb 646f15fb 0184d370 0184d370 0184d370 0184d370 646f15fb 646f15fb
+0 01 40000754 001 00000011 26fc6048 26fc6048 b3378a57 b3378a57
+1 01 40000616 001 00000101 4e210000 1100 b38af565 0011 b38af565 1100 62022f26 0011 62022f26 1000 000014f0 0011 00000610 0020 4a487276 a4a4c6da 3b81b603 f15c840a 3ec03cfd b6da6b5e c2687f8e fa2fb605
+0 01 400000dd 000 00000111 5269e331 5269e331 5269e331 9dc3aa94 9dc3aa94 9dc3aa94 9dc3aa94 ae3c25e2
+1 01 4000066a 001 00000110 b4af0000 0000 78e82327 0011 78e82327 1100 7990f0be 0010 7990f0be 1100 a8906e85 0011 a8906e85 1100 00000660 0020 b864494c 92ff9f8a f7a4c309 52e32112 5a1a1cc4 cc1456c0 bb19b97b c848940f
+0 10 40000028 010 00000011 c578be66 e31b8b6d d70b8f74 90e6e283
+0 01 40000154 000 00000010 5e3c6884 5e3c6884 5e3c6884
+1 01 400000e8 010 00001111 d2038c31 1011 b1086ced 1110 2b59f74d 1111 369da63c 1101 6f12abb0 1011 b4effd70 1111 0bac9d95 1110 4540ba7e 1111 cd3643fc 1110 ccac72f7 1111 1eb17349 0110 04308ae4 1111 a234849c 1101 b199dbe1 0010 db6067ed 0111 648049cc 1101 000000e0 0050 454be2ac 374a7536 66716f74 7bd708f4 db0da42a 7a10d2cd a5ab282a 57f01894 301585e9 7cc52299 20bf029f 270529e4 cb488448 4bd80286 540848a7 e993eb36 9558fdd2 b891bfce 1119b48b b0c799d4
+1 01 40000318 010 00001100 d30d1710 0111 1c7748c8 1101 e0009dcb 0111 f1adc39a 1111 74a4979f 1111 3769edac 0111 40d2ac1a 1111 395f56e4 1111 de3d27bc 0011 9c046cf4 1111 dfd9ef09 1101 30935d9b 0011 824ca1c8 1000 00000310 0040 7c2748db 74aa012e d9bc3122 a81430dc bfd30560 b810f418 9e2b4be2 e0fce687 28c9e7ff aae0b05c 27e5cc75 11a6410d 2412114b 4fe31e5e ec32c67f aee7ab54
+0 10 400002f8 010 00000001 036586c2 6fe1c6f2
+0 01 40000584 000 00000001 1e600ded 1e600ded
+1 01 40000601 000 00001110 b3a35f00 0010 b3a35f00 0000 b3a35f00 1000 ce98b25b 0001 ce98b25b 0010 ce98b25b 0100 ce98b25b 1000 1a731972 0001 1a731972 0000 1a731972 0100 1a731972 1000 2b99b2d4 0000 2b99b2d4 0010 2b99b2d4 0100 2b99b2d4 1000 00000600 0010 c6b4816b 55c949de 5f484ce5 15bfef68
+1 01 400004a1 000 00001010 2c078300 0010 2c078300 0100 2c078300 1000 4fd7b298 0000 4fd7b298 0000 4fd7b298 0100 4fd7b298 1000 a6ed3a14 0001 a6ed3a14 0000 a6ed3a14 0100 a6ed3a14 1000 000004a0 0010 05ad8e2c 286e65da 89fc9601 67aa0288
+1 01 40000452 001 00000001 d2a40000 1100 0000384c 0001 00000450 0010 d90f7ffa 643e9ae8 af133a6e 121b4b4b
+0 01 4000024c 010 00000111 d590b64d 4f9e9e2d b7bf02f0 aabab669 677b3337 01c8836e 5b85d281 8ea59519
+1 01 400002d4 010 00001000 b7c235ec 1111 d6dd5234 1111 0be5bcd1 1101 5fd60b4d 1011 1aba72ff 1101 6d0e0956 1001 6e3163bb 1011 489b8401 0011 8521cb76 1111 000002d0 0030 624339a3 ae6041cc b91b3606 4a64b909 1c1d9a9e 3d7e2501 7515486e 6994d654 23578e0a 41e667e4 36bcab2a 73e9543e
+1 01 4000044f 000 00000101 d3000000 1000 839ee757 0001 839ee757 0010 839ee757 0100 839ee757 1000 0000001f 0001 00000440 0020 79986399 fd8a0767 bd01970d 3828c2f5 ffc1bcf9 d293dd22 38f7c0b0 f11f97e5
+0 01 400007ce 001 00000100 0fb8c65a 998893b2 998893b2 eaf1d774 eaf1d774
+1 01 40000332 001 00000110 b3010000 1100 b912138d 0010 b912138d 0000 d2a2fd73 0011 d2a2fd73 1000 fc1c9117 0001 fc1c9117 1000 00000330 0010 318293db d23ace61 6a25f706 db071e22
+0 01 400007e5 000 00001110 148563ac 148563ac 148563ac 907628c7 907628c7 907628c7 907628c7 19a7a99b 19a7a99b 19a7a99b 19a7a99b 3b7f62ea 3b7f62ea 3b7f62ea 3b7f62ea
+1 01 4000000e 001 00001111 efe70000 1100 22f64e77 0001 22f64e77 1000 cd7c9469 0011 cd7c9469 1100 6c56315e 0011 6c56315e 0000 1a113ca8 0011 1a113ca8 1100 3754a9b5 0011 3754a9b5 0000 c75bf439 0001 c75bf439 1000 8583bf1d 0011 8583bf1d 1000 0000a6bd 0011 00000000 0030 7b9793e0 d94bd613 d2b5d6f2 202033e7 c8e2812d 7e9feead 0a68b9a3 6c436697 3437cc6b c870aefe 44d214df 35b53765
+1 01 40000078 010 00001111 6280d8d5 1111 08e2d5a3 0111 51e18920 1100 f7ac86a3 1110 d33d8d31 0110 2edb0e7d 0011 7a30e91a 1110 826b7b21 1111 276aa480 1011 1cea01bf 1110 8d4d8eb3 1111 c7f8971f 1110 3dbaf1c4 1111 c12860d2 0101 af85c2ae 0111 d2bdce98 1110 00000070 0050 98baab49 00dabdcb 9401c608 d47270e8 1d82ead2 404b64b5 5f2aabdb d332e804 55cb9579 7101deca b9ad5c02 82ff9658 8b5a3996 905b9986 651182b1 8eb3a2c9 aab6d6fd 2b372f26 e5e3a996 36a8f01c
+1 01 40000153 000 00000001 20000000 1000 000000f5 0000 00000150 0010 fa650d7d a9b1221c aedeee55 e8c31c5e
+0 10 400005ae 001 00000011 d20de77d 623a8fb7 623a8fb7 d20de77d
+1 01 400004a7 000 00000101 a0000000 1000 89036774 0001 89036774 0010 89036774 0000 89036774 0000 000000c6 0001 000004a0 0010 3c790f3d 0fedc294 87114d7c e35c5fc0
+0 10 400007cf 000 00000001 0fb8c65a 0fb8c65a
+0 10 4000057c 010 00000111 08601217 c42c5034 dfa2d500 1aca4942 4584b537 0930e5f5 98d59bac 71247db1
+1 01 4000064e 000 00000101 f0eb0000 0100 f0eb0000 1000 b9443fd5 0001 b9443fd5 0010 b9443fd5 0100 b9443fd5 1000 00000640 0020 502b3f42 3b55d040 9b660448 74f3f53d 76f430b3 1854e57b 9c71a587 006c1aae
+1 01 4000054b 000 00001110 53000000 1000 e46c851b 0000 e46c851b 0010 e46c851b 0000 e46c851b 0000 96b5f3d6 0001 96b5f3d6 0010 96b5f3d6 0100 96b5f3d6 0000 16e779b5 0001 16e779b5 0010 16e779b5 0100 16e779b5 1000 00009fa4 0001 00009fa4 0010 00000540 0020 7a5d3597 89c857d7 d5f991e9 43ea81f3 c9438b26 06b4df2e 0f8f2af8 78d14e5b
+1 01 400001e4 001 00000101 34939d3a 0011 34939d3a 1100 e36aca07 0011 e36aca07 1000 ee4e46e3 0001 ee4e46e3 1100 000001e0 0010 7494a7ea 6bf7e931 75f87aa3 f77a6263
+0 01 400000c9 000 00001000 2fe92c32 2fe92c32 2fe92c32 36259f00 36259f00 36259f00 36259f00 6e2a82bc 6e2a82bc
+1 01 400002dd 000 00000001 0024c100 0010 0024c100 0000 000002d0 0010 624339a3 ae6041cc 9e2c32ef 143abf92
+1 01 4000056e 000 00000111 ebb20000 0100 ebb20000 1000 74e5a712 0001 74e5a712 0010 74e5a712 0100 74e5a712 1000 000016ff 0000 000016ff 0010 00000560 0020 2333aaae 377d0741 120e6237 8a01d08c e16af145 68142f5e dcd2ff77 172f264b
+0 01 400002d8 010 00000110 d6dd5234 0be5c1d1 5f8b0b4d 1abaacff 6d735256 6e5663bb 4d2a8401
+1 01 4000012e 001 00001111 1f800000 0100 15f3735b 0001 15f3735b 1100 08b15f3a 0000 08b15f3a 0100 70c16b86 0011 70c16b86 0100 8b839dde 0010 8b839dde 1100 90d8ac2e 0011 90d8ac2e 1100 b90b4fea 0011 b90b4fea 0100 8fc48f1a 0000 8fc48f1a 1100 0000fa9d 0000 00000120 0030 9558fdd2 b891bfce 3830895c 74a8ea94 f102ee55 b2898a2c ee588249 2bc39430 593cc957 6350da19 612a8269 f9b0272a
+1 01 400006e4 010 00000110 9eaa848e 1110 05e1c697 1110 4d7dbfa2 1111 97b0d07c 1011 8eeba11c 0111 b695c182 1011 17cbb809 1110 000006e0 0020 dd27eb4e 1755c287 03aad260 7c32590f 8a471687 ea3c4bdc 0251e814 0564fb95
+1 01 400002b0 010 00001101 a411f543 1101 9cb62ebf 1110 ff5475fd 0111 5eac6b94 1011 6b44496f 1111 26993945 1101 313ccc52 0111 79d69f45 1110 62af2756 1111 eaffc1b6 1111 6c57f063 1111 e9b62247 1111 0bc334d6 1010 bb84bfed 1111 000002b0 0040 0f9f43fe 6647614f ac94610b 49210cf6 4100028f 874cb5db 77906401 ef30f747 9900c125 03e9f0a2 88ae35c7 94d3b5e8 9f672677 0d963836 e6b10e58 7051cc3c
+0 01 40000328 010 00001101 74a4979f bf69edac b301ac1a 395f13e4 d23bfd73 fc046c17 dfd99a09 a4195d9b 828958b6 586bb4bd 46dcb55e d0454220 7521bc46 1dd786b4
+0 01 40000374 010 00001011 5485d605 389be32d cd0f64df 263e8431 8e98e8c6 bdfd7262 e716eba8 b5952881 4cf34a76 4021fd9f 3cf9783c 6d81d81c
+1 01 40000176 001 00000000 1ee80000 0100 00000170 0010 0ce2250f 65684295 69f307c5 10033ba6
+1 01 400000e0 000 00000100 b0b8db66 0001 b0b8db66 0010 b0b8db66 0100 b0b8db66 1000 00000017 0001 000000e0 0010 15807c8f 51fca0be 15a42ced 78413ae1
+1 01 4000001c 010 00000110 9ee20179 1110 43dba8be 1111 5deb6d04 1000 26b75869 1001 47d3187f 0110 7886a213 1111 ad6eb03a 0101 00000010 0030 c8e2812d 7e9feead 13f7436b b27bea66 605032db 612b5e20 79887280 6021bcfc 0b5fd486 36e12982 4958073b 26b5de33
+1 01 40000046 000 00000101 f15b0000 0100 f15b0000 0000 54c073be 0001 54c073be 0000 54c073be 0000 54c073be 1000 00000040 0010 a649e3ce a4732762 a21faf0e e9ee2629
+1 01 40000481 000 00000000 0000f300 0010 00000480 0010 e7435bf5 38d9398e 57d8c199 11b6d8c0
+1 01 40000633 000 00000100 dc000000 1000 3efd192e 0000 3efd192e 0000 3efd192e 0000 3efd192e 1000 00000630 0010 18c1ac07 639b5f09 9a9ed1b9 5459dacd
+0 10 4000031c 001 00001111 1c778cc8 1c778cc8 c0dc0561 c0dc0561 51e4ec32 51e4ec32 cfbf48fb cfbf48fb 52f42294 52f42294 b7f82281 b7f82281 4a830f18 4a830f18 f80d1710 f80d1710
+0 10 40000746 001 00000001 e6828b10 e6828b10
+0 10 40000188 001 00001111 ac4f24a2 ac4f24a2 f006faf5 f006faf5 78cd0a5e 78cd0a5e 0ed0c251 0ed0c251 7369b4a2 7369b4a2 42d65b8f 42d65b8f 453c5c45 453c5c45 c2c1b62c c2c1b62c
+1 01 40000032 000 00001011 84150000 0000 84150000 0000 7c5a2f04 0001 7c5a2f04 0010 7c5a2f04 0100 7c5a2f04 0000 b490e1a1 0001 b490e1a1 0010 b490e1a1 0100 b490e1a1 1000 0000a072 0001 0000a072 0010 00000030 0010 85bc939b 7c37c316 3bb1ff76 6a490890
+1 01 400004a5 000 00001010 9dd64c00 0010 9dd64c00 0100 9dd64c00 1000 add28ee4 0000 add28ee4 0010 add28ee4 0100 add28ee4 0000 3a0a53f1 0001 3a0a53f1 0010 3a0a53f1 0100 3a0a53f1 0000 000004a0 0010 27a12130 11f659c2 e012b252 1c52de6d
+1 01 40000490 010 00000110 0d262187 1111 9ed7401c 1111 53587aaa 0111 481d3a0d 1111 31fd5b61 0001 a7b88100 1111 051e8e60 1101 00000490 0020 362473e7 a9278007 daba1f7f a59120f2 e2270513 f2f9c340 d90471f9 dfb95d3b
+0 10 40000324 001 00000111 f1adc39a f1adc39a 74a4979f 74a4979f bf69edac bf69edac ee009dcb ee009dcb
+1 01 400004ec 010 00001110 eaf64740 1111 09b54746 1110 dc39c015 1111 add33421 0111 e945a5ef 1101 1d52439a 1111 f2c11f2a 1111 a9df32fe 1111 250c89c2 1111 337a1bb9 1111 8260b83c 1111 e7abba30 1110 c35ab4fd 0111 0acd0ed4 0111 3496e6a2 1111 000004e0 0050 12bd3e43 475098f6 7ed47b97 7625c5ec 0ec43f58 f22432cf bebbdf39 635e3d9f cfca95c3 487885a8 6da81ec1 9abc53d7 d123880a 0b4441da 94c27043 6e0a519b 6c97f415 0ca7cd27 28f39ca1 fbf378ce
+1 01 400005f6 001 00001111 59d90000 1100 d5dfa450 0011 d5dfa450 0100 03154d72 0001 03154d72 0100 ef38a878 0001 ef38a878 1100 0a9581e1 0011 0a9581e1 1100 0e08f6c8 0011 0e08f6c8 1100 6bbe4aa0 0011 6bbe4aa0 1100 b2051ef5 0001 b2051ef5 1100 000093be 0011 000005f0 0030 7ed3c8c4 8ebc9b6c 6740d20e 22bb84c4 7a804534 55299592 9e071e05 e541235f 73da853e e637e9ab b3b2804b a1876719
+0 10 400003c8 010 00000011 1f27e0d4 cce86faa e6d11268 28040791
+1 01 400002e0 000 00001011 cd89a3e5 0000 cd89a3e5 0010 cd89a3e5 0100 cd89a3e5 0000 94c3a9a9 0000 94c3a9a9 0010 94c3a9a9 0100 94c3a9a9 1000 4d81412a 0000 4d81412a 0010 4d81412a 0100 4d81412a 1000 000002e0 0010 724de6ab 48826d29 b60ff293 451741d0
+1 01 400000c2 000 00000011 ef6f0000 0000 ef6f0000 0000 0000b886 0001 0000b886 0010 000000c0 0010 187e387e 94d7b4da 022158d7 e6bc4b14
+0 01 400003f2 000 00001000 13a8a077 13a8a077 f412a313 f412a313 f412a313 f412a313 d9acccaa d9acccaa d9acccaa
+0 01 40000486 001 00000010 20e3353b ec23f12b ec23f12b
+1 01 4000070e 000 00001110 d1f90000 0100 d1f90000 1000 c0487b9d 0001 c0487b9d 0010 c0487b9d 0100 c0487b9d 1000 655f810f 0001 655f810f 0000 655f810f 0100 655f810f 1000 4b1aa200 0001 4b1aa200 0010 4b1aa200 0100 4b1aa200 0000 00000068 0000 00000700 0020 459720e9 32b9923f 0e12b2ec 684c8e41 ee825fb4 cfb3c70c 0c836031 4ce8a78b
+0 10 40000098 000 00000011 274aa480 274aa480 274aa480 274aa480
+0 01 400004e4 010 00001000 3cad5457 12ac6870 eaf64740 09b5471d dc39c015 30d33421 e94582ef 1d52439a f2c11f2a
+0 01 40000340 010 00000111 dfd99a09 a4195d9b 828958b6 586bb4bd 46dcb55e d0454220 7521bc46 1dd786b4
+1 01 40000076 000 00001000 015e0000 0000 015e0000 1000 44edb330 0000 44edb330 0010 44edb330 0100 44edb330 1000 00cd98b3 0000 00cd98b3 0000 00cd98b3 0000 00000070 0010 d3d0d197 0c1ad25e 8a90338a 52c99030
+1 01 400003c5 000 00001010 dabd7400 0010 dabd7400 0100 dabd7400 0000 848a19be 0000 848a19be 0000 848a19be 0100 848a19be 1000 b4fd9f61 0001 b4fd9f61 0010 b4fd9f61 0100 b4fd9f61 1000 000003c0 0010 1f5a84ea 57c99369 5b81fdbe 0207ee09
+0 10 40000038 000 00000001 b490e1a1 b490e1a1
+0 01 40000096 001 00001011 826b7b21 274aa480 274aa480 1cea0112 1cea0112 8d4d8eb3 8d4d8eb3 c7f8973a c7f8973a 3dbaf1c4 3dbaf1c4 5328aad2
+0 01 400005f8 001 00000010 abdfa450 abdfa450 da15f172
+0 10 400006ec 010 00000011 4d7dbfa2 ffccf1b8 9eaa84a6 05e1c61a
+1 01 400003a7 000 00000011 81000000 1000 003819b6 0001 003819b6 0010 003819b6 0100 000003a0 0010 b8a17e38 f298746c b2a207e8 9a4bad29
+1 01 400001b0 001 00001011 7edd1640 0011 7edd1640 1000 10c7e49e 0011 10c7e49e 1000 a14382e7 0010 a14382e7 1100 ec0946a3 0011 ec0946a3 1100 0dc87885 0011 0dc87885 1100 db523c91 0001 db523c91 1100 000001b0 0020 db2c53e2 af5765f6 1f4795ca 3d0d6ac8 6b9d6803 88699fe7 bd8745d6 b1907be4
+1 01 400005ce 001 00000001 62600000 1100 00001b01 0010 000005c0 0020 7dc26337 179dfecd 0915a632 474a70ed b9d566ea e431a8a5 1624071a a7f1b881
+0 01 400001b8 010 00001011 a14382df ec0946a3 0dc87885 db525391 fe40a719 e14e26ec 1f279a00 5a0dc059 b2355bfb 3fed0431 9a372584 34939d3a
+1 01 40000086 001 00001111 71a40000 0100 b59b6f6b 0011 b59b6f6b 1100 466c2132 0001 466c2132 1000 92d76546 0011 92d76546 1100 c2eac200 0011 c2eac200 0000 cc2891b0 0001 cc2891b0 1100 2ea8ae00 0000 2ea8ae00 1100 51d3e129 0010 51d3e129 1100 00003ba8 0001 00000080 0030 62a63b4a b8dc7ae9 6e61ed66 09407fcc 36a84f01 cc76512b 7c34aaec b1cc0e3e 759df939 28367b84 8bb8e866 5447c2e0
+1 01 40000328 010 00001111 d0ce4887 1011 cbe23baa 1111 38aba8d1 1111 5202d692 0011 fdbcbbcd 1111 9ece9f13 1011 a0f4c2f3 1111 13c09250 1101 058cc3ce 1101 e5ceb4ef 1011 9946956b 0111 c54874b0 1111 d0782bc1 1011 447ad40a 1111 d7cfe20f 1111 690a359d 1110 00000320 0050 bfd30560 b810f418 77391c44 6dd50c6b 2dc5551e c8936edb b5825922 209eec93 cc4275e4 92f726c9 a46ed175 ef1881fb 9f7fb083 94e05894 eaccedfa 7ffb4e90 f7ea43c5 64f39abe 3acbe2f6 c2b91d9d
+0 10 4000036b 000 00000111 f406891f 89c89a90 89c89a90 89c89a90 89c89a90 f406891f f406891f f406891f
+0 01 400005a7 000 00000001 c2f013d2 623a8fb7
+0 01 400005f0 010 00001001 d5e3aa5f 59d93f25 abdfa450 da15f172 ef385f78 0a9581e1 0e08f6c8 6bbe4aa0 b205d6f5 4e2193be
+0 10 4000054a 001 00001111 5321f107 903a8503 903a8503 cbb5f3d6 cbb5f3d6 16e779b5 16e779b5 68519fa4 68519fa4 d7da22ea d7da22ea f9486cd1 f9486cd1 ab7e5cc1 ab7e5cc1 5321f107
+0 01 40000594 010 00001111 9a6fc3bb d392f10d f44f8fe5 7545a20b c2f013d2 623a8fb7 d20de77d 46fa331f 70917b2d 33709370 59baefee 50457c8f 4e2d3d1a 9c962207 6260f21b c54d1b6d
+0 10 40000298 010 00001111 20a81d81 5e196de9 539bcdd9 aa8fb567 c8c62ad0 2ab94a90 a4118743 9cb62e74 435475fd 5e0c6b94 8c9ecf7d 72f38e43 eeb44cf1 d7e752f4 34f12618 1d530550
+1 01 4000060f 000 00000110 0b000000 1000 3a7618bf 0001 3a7618bf 0010 3a7618bf 0100 3a7618bf 1000 0000d9f1 0000 0000d9f1 0010 00000600 0020 7a804534 55299592 4007aa56 24fb16ab 98ce58a9 d86eb3ee 52962346 07ffb7c1
+0 01 40000520 001 00001011 0ccd0ed4 0ccd0ed4 3496e6a2 3496e6a2 af3160e5 af3160e5 f22e0b92 f22e0b92 364c915a 364c915a c2d3b811 c2d3b811
+1 01 4000005e 000 00001110 90cd0000 0000 90cd0000 0000 bb598786 0001 bb598786 0010 bb598786 0100 bb598786 0000 715a9528 0001 715a9528 0010 715a9528 0000 715a9528 1000 d88f18a3 0000 d88f18a3 0010 d88f18a3 0000 d88f18a3 1000 00000000 0001 00000050 0020 19e1adf9 cc7d99ed cb6ae3ad d20b00fe a6e53598 6911dba6 9cf6d1be c81339ad
+0 01 400002b4 010 00001001 9cb62e74 435475fd 5e0c6b94 6b44496f 26990c45 a63ccc52 79d69fe0 62af2756 eaffc1b6 6c57f063
+1 01 40000016 000 00000010 2c5f0000 0100 2c5f0000 1000 000000bc 0001 00000010 0010 3b585734 e611dccd 3df761f2 c8099439
+0 01 4000003c 010 00001110 000da072 75d2fd1e 1e5b0e8a 54a8e4be 0d4845c9 5f2571e7 7eb54d08 6648b875 41fe6d28 fb598786 71c29528 d85918e0 76afad00 ee159b0f 018b095a
+1 01 40000764 010 00001001 b8d65b86 1111 4de02668 1101 5890b4ed 1111 ee4d3da5 0111 727739c8 1111 f3b8bcaf 1010 8da34d80 1110 04153273 1110 2b37b952 1101 6c359df3 0001 00000760 0030 2e8db798 c946b106 161a2d72 8863c21f fc4305a8 31040d8a 450fdd87 530c9a90 ef865a47 43234f8a 1ba785bd 8802426b
+0 10 4000036c 001 00000011 89c89a90 89c89a90 f406891f f406891f
+0 10 40000418 000 00000111 621eed32 621eed32 621eed32 621eed32 5727326d 5727326d 5727326d 5727326d
+1 01 40000480 010 00001011 470479b7 1110 484dd4d2 1111 debd1ed4 0111 d15a7303 1101 1f3244b9 1101 e9207414 1011 7e77c8a5 1011 ff8e2bb5 1111 03bb9fba 1111 9459d491 1100 eb9ba051 1110 a3255274 0110 00000480 0030 86e56ea5 36c99dd9 8e61c515 06017b2c bd1c8f87 a005aa8a d8c7b047 b4703754 90a0fac3 74731b09 748c34ed fc325859
+0 10 40000214 001 00000011 60b90f10 60b90f10 32af736a 32af736a
+0 01 400003ae 000 00001111 99b1b48d 99b1b48d 3f9ac30a 3f9ac30a 3f9ac30a 3f9ac30a e641647f e641647f e641647f e641647f ed9fa58e ed9fa58e ed9fa58e ed9fa58e c21f8cfa c21f8cfa
+0 10 400005f8 001 00000001 abdfa450 abdfa450
+1 01 400003db 000 00000111 02000000 0000 21fd9743 0001 21fd9743 0010 21fd9743 0100 21fd9743 1000 00ee8f67 0001 00ee8f67 0010 00ee8f67 0000 000003d0 0020 c4d30df7 2e82d446 ad6ecb1e 2e116d6c a8418947 b36317c9 602b58fa 3931fa29
+0 01 40000670 010 00001011 7990f006 a8906e85 12fe27e1 b72a64da 2d2f552d 00eb5dfa ebf84c77 5e9742d6 789a2da1 ee8f81ac c24d5c2e 760b0743
+0 10 400005d8 000 00001111 29f9e71d 29f9e71d 29f9e71d 29f9e71d 38a3f285 38a3f285 38a3f285 38a3f285 c54d1b6d c54d1b6d c54d1b6d c54d1b6d 5430d9df 5430d9df 5430d9df 5430d9df
+1 01 4000059f 000 00000001 47000000 1000 000000c9 0001 00000590 0020 8910d2a2 f779de85 b12810d7 5fd520b2 43efce04 7d0a03b4 8c89e69d 4ccd1154
+1 01 400006d8 010 00000100 be2b707e 0111 4271e247 1111 2bcb1d5c 1111 c7dabd37 1110 062e3ec7 1111 000006d0 0020 d75ace76 19c21b70 c0bcd222 2bd521b8 c151e7d2 4007e0ff 84568cf1 fbc53964
+0 10 4000062c 000 00000111 f204911f f204911f f204911f f204911f e95c4c1f e95c4c1f e95c4c1f e95c4c1f
+0 01 400003e8 001 00000100 64d0f12b 64d0f12b 8621b6f3 8621b6f3 13a8a077
+1 01 400003dc 001 00000101 4acdc493 0010 4acdc493 1100 d3eabecb 0011 d3eabecb 1100 b6bada96 0010 b6bada96 0100 000003d0 0020 c4d30df7 2e82d446 2be5af51 e1fddcaf 281513b7 da01cb90 4c658d03 3f11f983
+1 01 40000048 010 00000011 0ffd06a3 0111 44152370 1111 994c4088 1111 a22fc253 0111 00000040 0020 a649e3ce a4732762 7b949bbf f8373c8a f9510a7e 08437137 6e97659e 97ad19d6
+0 10 400000cb 000 00001111 2fe92c32 36259f00 36259f00 36259f00 36259f00 e585d13e e585d13e e585d13e e585d13e 1babb886 1babb886 1babb886 1babb886 2fe92c32 2fe92c32 2fe92c32
+1 01 4000009a 001 00000111 5aa10000 1100 29eeddb1 0011 29eeddb1 1100 abc8f6dc 0001 abc8f6dc 1100 a664b864 0000 a664b864 1100 0000baea 0001 00000090 0020 36a84f01 cc76512b 888d1c70 84fa4775 fd33a938 9f3db212 0d13d595 cc42359a
+1 01 4000012c 010 00001101 2fa8f567 1111 014c939b 1101 3b3f86ad 1111 0c75341e 0111 0e1e037d 1111 65b72603 1111 c61913f1 0111 d7462d1d 0111 e1c89fb7 0110 9f917c47 1111 6a0d67fd 0100 c8e48831 1010 13568c34 1111 bf19d146 0011 00000120 0050 9558fdd2 b891bfce 7db8d6ac c32c0819 8dd57c32 31501c77 dddf29d3 c17a2e74 02a3d19c c0757a7a d04e6306 71909486 ca2cb715 52fe3d7b 0e721979 1f9ba203 183a883e 7655fbda 36449576 fdbd6045
+1 01 400000f4 001 00000011 08fdb825 0010 08fdb825 0100 9c7a3d98 0010 9c7a3d98 1100 000000f0 0010 f94171b6 2624e393 7bd9cd67 5e8662df
+1 01 400005ff 000 00001011 c7000000 1000 de184677 0000 de184677 0010 de184677 0100 de184677 1000 d53b99d1 0001 d53b99d1 0010 d53b99d1 0000 d53b99d1 1000 0054d34b 0001 0054d34b 0010 0054d34b 0000 000005f0 0020 7ed3c8c4 8ebc9b6c bea786ad 39d816b9 185767c2 cb59a743 7fb828df f6970c6e
+0 01 40000648 000 00000110 ffbd8d8c ffbd8d8c ffbd8d8c ffbd8d8c f0eb2ae7 f0eb2ae7 f0eb2ae7
+1 01 400003f4 001 00000001 76981a19 0011 76981a19 1000 000003f0 0010 91dd74c2 78ae2647 5a67d5bf 929eb2a4
+1 01 4000031c 010 00001100 0577a5d7 1111 d4d641ad 1001 4efdccf3 1011 0ec6bf10 1111 4c7fd890 1111 060771e5 0101 369d1cf0 1101 6e5a9539 1100 6ed0a9ec 0111 7821ac37 1000 b32e4ae2 1111 c0799f52 0110 bc18c29f 1100 00000310 0040 7c2748db 74aa012e 7f164664 0101ee05 11bc27d7 dcf41064 c09e2b14 b1d1dd43 56905a15 b304a21a 80f77ff4 d3972ce3 c667690e fa757602 90be7a6b 4d4639a0
+1 01 400007ae 001 00001011 e0780000 1100 e644543a 0010 e644543a 1100 c66f3e1f 0011 c66f3e1f 1100 da46e259 0001 da46e259 1000 d3539fd4 0001 d3539fd4 1000 7dfa17c9 0010 7dfa17c9 1100 00009cf2 0011 000007a0 0030 2ad35f62 c47f1c66 af4f8961 d3a5bbae 233f98e5 68ddd4a9 d722a639 1804b01b 00c85667 57646ff5 b59796ec 6e70cd8e
+0 01 40000738 010 00001010 5478fa27 a2f0633d ab7b1cec e6828b10 ffe422f2 791a5645 6c610587 26fc6048 b3378a57 72c91759 ad054261
+0 01 40000200 000 00001100 1b584934 1b584934 1b584934 1b584934 286f6e70 286f6e70 286f6e70 286f6e70 6b2de0ab 6b2de0ab 6b2de0ab 6b2de0ab a4ed53f6
+1 01 40000048 001 00001011 03d0e948 0001 03d0e948 0000 bb6530fb 0001 bb6530fb 1000 906b5645 0000 906b5645 0100 ece12d28 0001 ece12d28 1100 5deb04dd 0001 5deb04dd 1100 40ab037e 0010 40ab037e 1000 00000040 0020 a649e3ce a4732762 3a26f25f 21848b65 e163a52f ef100b0b 0c30756b d3511168
+1 01 400002c0 001 00001010 2b82fe99 0010 2b82fe99 1100 8bb27aaf 0000 8bb27aaf 0100 67d100d1 0001 67d100d1 1100 a74e07b9 0011 a74e07b9 0100 fc5155eb 0001 fc5155eb 1000 00001060 0011 000002c0 0020 511f1861 24a5e2a6 3b49a0f6 6b673477 9a1c8d87 d80baedb 895d540e 1225729e
+0 10 40000240 000 00000011 9f4e3b95 9f4e3b95 9f4e3b95 9f4e3b95
+0 10 40000414 010 00000011 744270a1 621eed32 5727326d 1e1b088e
+0 01 400006a4 000 00000111 932a8a93 932a8a93 932a8a93 932a8a93 4921c96c 4921c96c 4921c96c 4921c96c
+1 01 40000152 001 00000000 0cd70000 1000 00000150 0010 30c583a0 a6603e0d 7019ec14 2a34eb8d
+1 01 4000056f 000 00001010 d6000000 0000 937eb656 0001 937eb656 0000 937eb656 0100 937eb656 0000 56101796 0001 56101796 0010 56101796 0100 56101796 1000 0000c799 0001 0000c799 0010 00000560 0020 2333aaae 377d0741 120e6237 8a01d08c aed51968 4064f294 219597af c97118c1
+0 01 40000218 010 00001010 2ad3ef0d 1126d204 f9129a47 d08ed55a 1d4d4af9 51b4ff5b 714f4808 5965844a 7f7a1a37 338c8d45 9f4e3b95
+0 01 400006cd 000 00001010 7c539d4f 7c539d4f 7c539d4f 508b11ff 508b11ff 508b11ff 508b11ff 8aee51d3 8aee51d3 8aee51d3 8aee51d3
+0 01 40000548 010 00000110 5321f107 903a8503 cbb5f3d6 16e779b5 68519fa4 d7da22ea c42c5034
+0 01 4000073c 001 00000001 a2f0633d a2f0633d
+1 01 4000055c 010 00001101 4bb0314c 1101 58319ee4 1111 5c042bab 1111 b0ebd733 1010 c4343f0a 1011 ad765fd9 1101 16ce95fd 1111 be0c8f21 0111 011b1341 1111 2da7a4db 0011 c81d0caf 1111 874a812b 0110 4a1c0a6e 0101 b1d6530f 1011 00000550 0050 c9438b26 06b4df2e 4918ba7c 4d262530 a9605078 ba12530d b930bef9 72e09a2f 7c46e57e fc7f498d da08f04c fe1f29a4 b00d6c11 be899311 aa486ef9 74bdb23c dff0c3a8 732db858 e9785b3e c35295af
+0 01 40000780 010 00001010 041532b9 2b372e52 b136c8f3 201ccccb 156f3eaf 937526e1 b37d907b 8cffc0cd 339f7669 da408421 8c51a39e
+1 01 400002ad 000 00001101 dbd4dc00 0010 dbd4dc00 0100 dbd4dc00 1000 99a6492a 0000 99a6492a 0010 99a6492a 0000 99a6492a 1000 96ab4b20 0001 96ab4b20 0010 96ab4b20 0100 96ab4b20 1000 006288ef 0001 006288ef 0010 006288ef 0100 000002a0 0020 c41ade43 0b9a0ebe a60a40b3 bb3a4c64 2b508dbb e1acdf35 7da6840d 03e0bc1c
+0 01 4000061f 000 00000100 62d92f26 ae6714f0 ae6714f0 ae6714f0 ae6714f0
+0 01 4000037c 010 00001101 cd0f64df 263e8431 8e98e8c6 bdfd7262 e716eba8 b5952881 4cf34a76 4021fd9f 3cf9783c 6d81d81c 815823e3 453819b6 99b1b48d 3f9ac30a
+1 01 400003b1 000 00000101 a3717400 0000 a3717400 0100 a3717400 1000 002e0314 0001 002e0314 0010 002e0314 0100 000003b0 0010 72740257 286abfbb f9ec0ae2 4030a374
+1 01 40000158 001 00000000 0000cc78 0011 00000150 0010 30c583a0 a6603e0d d75bf2d9 873ff8da
+1 01 40000508 001 00001011 b379c4c3 0010 b379c4c3 1000 b5721ebb 0011 b5721ebb 1000 13e33ee9 0011 13e33ee9 1000 7736040c 0011 7736040c 0100 76ac4724 0010 76ac4724 1100 f178d722 0001 f178d722 1100 00000500 0020 cfca95c3 487885a8 8586127f fa1ab0b5 65c042d2 b95ff93a 36570a7a 5274053e
+1 01 40000290 010 00001001 4e7d9331 1100 a79f5d84 1011 95157762 1010 7fbc08ce 1101 53428fc1 1111 97e42c53 1111 2230b247 1111 8b953e46 1111 05accf02 0111 da8dc759 1100 00000290 0030 faf39e49 20f8e2fc a36367e8 4d6f631a 4fcaeac5 7e86d838 48d8904d 4e46af93 1de0938f 8269bd13 1a97fc71 8bf24f9b
+1 01 4000066a 000 00000000 00040000 0100 00000660 0010 b864494c 92ff9f8a 74eb1440 7b5c967a
+1 01 400001d2 001 00001011 599e0000 1100 4cf0a93a 0000 4cf0a93a 1100 1e9e05a8 0000 1e9e05a8 1000 6553b8d2 0011 6553b8d2 1100 596d94ee 0001 596d94ee 0100 bd9df798 0011 bd9df798 1100 00002b59 0011 000001d0 0020 7d7400d8 3b4e9220 184fd0a3 e36cea9a d914aae5 50bd1bc1 34ef533a e944a15a
+1 01 40000782 001 00001010 e8b30000 0100 2a1481af 0010 2a1481af 1100 9bb01da6 0000 9bb01da6 1100 17cf0db1 0001 17cf0db1 1100 40f03eef 0011 40f03eef 0000 2bf828fa 0011 2bf828fa 1100 00000780 0020 12e53080 0153a350 346bce2e db621d15 82aa6b6b 92921282 fe62c98b 2e03a46f
+0 10 4000005c 001 00001111 40fe0328 40fe0328 75d2fd1e 75d2fd1e 1e5b0e8a 1e5b0e8a 54fd0648 54fd0648 bb1523fb bb1523fb 996b4088 996b4088 ece1c228 ece1c228 5debb8dd 5debb8dd
+1 01 4000069e 001 00001110 ec680000 1100 d28ea71b 0011 d28ea71b 1100 1be04ff4 0010 1be04ff4 1100 51c2748c 0010 51c2748c 1100 2baac0ca 0010 2baac0ca 1100 0d79e883 0010 0d79e883 1100 68de7e8e 0011 68de7e8e 1100 8e057532 0011 8e057532 1100 00000690 0030 c623d707 183a4fde f15b51e6 9bfcabb0 702a6598 9287d4a8 07894986 9d057b3d d8f32172 66fc5b50 84154bc6 d1ff0530
+1 01 40000452 000 00001010 fda80000 0100 fda80000 0000 842a7b23 0000 842a7b23 0000 842a7b23 0100 842a7b23 1000 b42e04cf 0001 b42e04cf 0010 b42e04cf 0100 b42e04cf 0000 00000028 0001 00000450 0010 28f47e1a fd1b910c b8845998 067735aa
+1 01 400005ea 001 00001100 d8bb0000 1100 bec54d8c 0011 bec54d8c 0100 254451d8 0001 254451d8 0000 571201c9 0010 571201c9 1100 71cc3bf0 0011 71cc3bf0 1100 f958c025 0001 f958c025 0100 be186341 0000 be186341 1100 000005e0 0030 3c35de4c 20a4cf6a 63aed6c2 fe99de94 4496da94 a3bc259a 3b218cab eead8e09 072d9abf 98a9cf72 628704c5 00540b59
+1 01 4000017f 000 00000011 29000000 1000 00dbd548 0000 00dbd548 0010 00dbd548 0100 00000170 0020 0ce2250f 65684295 d5ad9d4a 427de935 bc58bdf0 255a308d d71658b1 fca0c979
+0 01 40000536 001 00000001 c2d3b811 2870558c
+1 01 400003b6 001 00000001 b4a70000 0000 0000d3e6 0001 000003b0 0010 72740257 286abfbb 8c967e1b 8ad237c0
+1 01 4000056f 000 00000100 d2000000 1000 4ab45ba2 0001 4ab45ba2 0010 4ab45ba2 0100 4ab45ba2 1000 00000560 0020 a9605078 ba12530d b9755f25 882897ce 248105bd c6d83a53 6b3068c5 30358a93
+1 01 4000012c 001 00001010 d1656aa0 0010 d1656aa0 1100 50a148d9 0011 50a148d9 1100 acfae306 0011 acfae306 1100 492d36c9 0001 492d36c9 1100 955c39e4 0010 955c39e4 1100 00005dc5 0011 00000120 0030 9558fdd2 b891bfce 5cc47ff7 9f011b19 31de7b1e 79fe978a a1deeb92 a9eede5c 5831dcc0 9a485929 c56bc909 ff08971b
+0 10 40000730 010 00001111 d367e694 c1282ac7 5478fa27 a2f0633d 54a89d35 a412f1c1 4e2470eb d1f92c07 c0487b9d 655fea0f ab1aa200 31a4f15e aacc00c8 f77695c9 3b79113a ad5274f7
+0 01 400004c1 000 00001010 a775718d a775718d a775718d 259ed6e7 259ed6e7 259ed6e7 259ed6e7 fa546b61 fa546b61 fa546b61 fa546b61
+1 01 40000067 000 00000111 9c000000 0000 78c2c073 0001 78c2c073 0010 78c2c073 0100 78c2c073 1000 00661dd6 0001 00661dd6 0000 00661dd6 0100 00000060 0010 a6e53598 6911dba6 43f29dae 925b732f
+1 01 40000342 001 00001100 04b30000 0100 7739baf2 0011 7739baf2 1100 199cec4d 0001 199cec4d 1100 9e9f64cc 0011 9e9f64cc 1100 d876752b 0011 d876752b 0100 261cc081 0011 261cc081 0100 ba7fac98 0011 ba7fac98 1100 00000340 0020 1535271e 653cf88a 9b03b48a 9198c543 28b22019 755f36e7 58a8dbd1 933159eb
+1 01 4000053c 001 00000100 e58195ad 0010 e58195ad 1100 af9a600f 0010 af9a600f 0100 0000757a 0010 00000530 0020 6051da8a 668988aa c104d0d8 28487627 e9590f99 e5d20686 31a9e290 5edacfd0
+1 01 4000060c 010 00001110 63764e43 1000 b35975fe 0111 076d889c 1111 88f29484 1111 d986f029 0111 52d1c44f 0111 0e6f2451 1111 e1029c5c 1110 919a846a 1111 ee239a5b 1011 43974a0e 1111 ca9ff711 1011 2ef442d1 1011 90eaa74f 0111 68ec7c63 1101 00000600 0050 072d9abf 98a9cf72 66b5253d 1a1451ac 1d86aaa8 1b58a818 92da51ed 3e6de1c6 537a0d15 8bf9b931 335694ae dd79e1b3 24a740e2 4bb64e66 561f0bf0 b17b2cfe 0b8cad86 285dd07a 20c4099c 28a17edb
+0 10 400001f2 001 00001111 8766aaba fc8f51bd fc8f51bd 398f08f9 398f08f9 2d1af392 2d1af392 9a6d25ee 9a6d25ee bd9df798 bd9df798 e3232b59 e3232b59 ee4ed5e3 ee4ed5e3 8766aaba
+0 10 4000048c 010 00000111 d15a1203 1f3221b9 e9d77414 7e58c8a5 ff8e2bb5 47047992 484dd4d2 ecbd1ed4
+0 10 40000638 000 00001111 ca8ff711 ca8ff711 ca8ff711 ca8ff711 2eee42d1 2eee42d1 2eee42d1 2eee42d1 ee599a5b ee599a5b ee599a5b ee599a5b 43974a0e 43974a0e 43974a0e 43974a0e
+0 01 40000522 001 00001100 0ccd0ed4 3496e6a2 3496e6a2 af3160e5 af3160e5 f22e0b92 f22e0b92 364c915a 364c915a c2d3b811 c2d3b811 2870558c 2870558c
+1 01 400006f4 010 00000101 6e25eb16 0111 585b8846 0110 728099a6 1111 52024750 1111 72006dbe 1111 dc7e5a4c 1011 000006f0 0020 2e46f05f ab49c807 abd4d35d 743f4746 c94621d1 ba8d2b0c 07bab623 d78f1a19
+1 01 40000312 001 00001100 0bbc0000 1100 a4cbcd70 0011 a4cbcd70 1100 6d8856d9 0011 6d8856d9 0100 6e08b972 0011 6e08b972 1100 e7d94755 0011 e7d94755 1100 bd8eacd7 0010 bd8eacd7 1100 a1c5bf53 0001 a1c5bf53 1000 00000310 0020 3bd66020 9ee25c10 d53f6ebf 843ca660 5fd64c04 979f929c 20ce471f 913c50be
+1 01 40000578 001 00000101 c5c124ed 0011 c5c124ed 1000 1a8ffa8f 0011 1a8ffa8f 1100 b9c6b3eb 0011 b9c6b3eb 1000 00000570 0020 248105bd c6d83a53 065d6bab a1a556a6 29b7df5a ffc15203 db433f9b de7293de
+1 01 400005b0 001 00001010 50f4b999 0011 50f4b999 1100 853bbc9c 0010 853bbc9c 1100 a0b92ea9 0011 a0b92ea9 1100 778a2845 0011 778a2845 1100 4060fe02 0011 4060fe02 1100 0000baea 0001 000005b0 0020 a2c00ec7 e010e789 374df95a e98b04c9 672aa804 35b15ce6 b6050892 767e7348
+1 01 400007b5 000 00000111 95d4fd00 0010 95d4fd00 0100 95d4fd00 0000 f98e001d 0001 f98e001d 0010 f98e001d 0000 f98e001d 1000 0000000a 0001 000007b0 0010 cf92d6f6 81fe83c2 769dbd99 90aa1122
+0 10 40000279 000 00001111 2cc28bb8 2cc28bb8 2cc28bb8 6277ce4e 6277ce4e 6277ce4e 6277ce4e 792fac38 792fac38 792fac38 792fac38 196abb2d 196abb2d 196abb2d 196abb2d 2cc28bb8
+1 01 400001f0 010 00001000 45777742 0110 bbdf6970 1111 dcd34a8d 1110 9f24d468 1110 e1a004a4 0111 d6104775 1111 0bdb3abb 1100 02d9d91d 1110 94a59c4e 0111 000001f0 0030 61798018 3e11e5cd 797048f4 734a3fe4 d5f43bed 48bbf7a2 4b714817 304c51e7 a5a5c1f2 5c7b8be1 c2a232ac a4c1dd77
+0 01 40000063 000 00001111 fb598786 71c29528 71c29528 71c29528 71c29528 78c2c073 78c2c073 78c2c073 78c2c073 7666add6 7666add6 7666add6 7666add6 ee159b0f ee159b0f ee159b0f
+0 10 40000360 001 00000011 d7cfe20f d7cfe20f 690a35c5 690a35c5
+1 01 400005d2 001 00000001 41a30000 1100 00006acb 0011 000005d0 0010 48f2a32e 21241b0c e988af08 83fb5568
+0 01 40000700 010 00001010 52024750 72006dbe dc245a4c d1f92c07 c0487b9d 655fea0f ab1aa200 31a4f15e aacc00c8 f77695c9 3b79113a
+0 01 400006ae 001 00001000 2baac040 0d79e8ac 0d79e8ac 68de7e8e 68de7e8e 8e057532 8e057532 aa8d9d6f aa8d9d6f
+1 01 40000374 010 00000111 ff076791 1011 5ad06f98 1110 7ab3e8f0 1010 41b433ed 1111 b5ec20cf 1101 44fd1a4c 0100 8c837ee1 1100 0b91789e 1111 00000370 0030 810e45c1 2d1a51a0 145cb851 2af2cb63 3009d526 1651b32e 86614916 f77b742f c4ee410c aa98caf5 bda156a8 60457c42
+1 01 400002ae 001 00000111 cdcb0000 1000 99211329 0011 99211329 1100 c2af25cf 0001 c2af25cf 1000 5203b4e0 0011 5203b4e0 1100 0000c5ed 0011 000002a0 0020 4fcaeac5 7e86d838 45ebe638 fc0f6075 2991917b 8892e7fd 75aeaf5b d48833cf
+0 01 40000508 010 00001110 b3dfc4fe b50c1ebb 137a3ee9 8236040c 76ac475a f178b422 0ccd0ed4 3496e6a2 af3160e5 f22e0b92 364c915a c2d3b811 2870558c e581958b f99a60d1
+0 01 40000424 001 00001010 bc6c14ee bc6c14ee 8b9d379b 8b9d379b e99285eb e99285eb 1441d638 1441d638 f5c664c1 f5c664c1 b55a0313
+0 01 40000714 010 00000100 655fea0f ab1aa200 31a4f15e aacc00c8 f77695c9
+1 01 4000023a 001 00001110 68510000 1100 d257608d 0001 d257608d 0000 94d091e8 0011 94d091e8 1100 da2f39b4 0001 da2f39b4 1100 d527bb5b 0011 d527bb5b 1100 a6d17890 0011 a6d17890 1100 5308c25a 0011 5308c25a 1100 d5e0e7ac 0011 d5e0e7ac 0100 00000230 0030 5547febc fa3728a9 99bcea4e 718656f4 93fb57d6 5601e893 bbc751ea ff299b3b fdcbb724 03a63032 1150b55d 69de7684
+1 01 40000524 001 00000100 4af41654 0011 4af41654 0100 6ccb1193 0011 6ccb1193 0100 00004638 0010 00000520 0010 813c42cc 96fa7ba4 df71c757 8a0ab0e9
+1 01 40000104 010 00001100 c8cf99d6 1011 ed3a0db0 0110 5caeb3b3 1111 619d21f2 1101 a5950f7f 1111 7217046d 1101 a2131201 0111 3504064a 1101 41e2efbc 1101 51246eed 1110 983688e8 1111 1f430494 1111 fc3deaa2 1111 00000100 0040 dcccfd43 533c7dab 135f67fa 5fa03ea6 3518d6b1 910cae06 482bbdba 8eed812a b44abb5e 72b0eeaf e83b4ab9 1af76422 a1210188 cbcedb4d 1c992c6e 35f6da6c
+1 01 400007cc 010 00000111 1916bdb5 1111 145a3e25 1111 f14d7f76 1111 f4a673fa 0111 4df21837 1101 3123abad 0011 99103880 0011 d40f55cd 1110 000007c0 0030 00c85667 57646ff5 c227a8da 2db4150b 6c5bc063 b4940326 a137a8be 4fef7a17 ba7b01e7 b654bae7 6f2cce15 5d26c16d
+0 10 4000002e 001 00000011 e3d318bd 2678bf69 2678bf69 e3d318bd
+1 01 400003b8 010 00001001 7b3b1a7a 0010 a258732d 0100 214444c9 0011 cdb2dfb2 1111 db4f4d52 1100 f328e1ab 1110 e05c046e 0011 d5f16902 1110 cc476292 1101 a61f4075 0111 000003b0 0030 72740257 286abfbb 9c8aceae 7da8fc17 ae556fc7 29d74128 410c8d6e f3bd123d b349991d 308e0b2b 46a4ae0c 269bb5b5
+1 01 400001c4 010 00000101 8b3b1c9d 1111 061bb071 1110 1a6c06d5 1101 7b2242c7 1011 5342f5af 0111 b0515830 1110 000001c0 0020 c3ebb149 81320c59 7f31eada 031ada10 67b9675e 8a9eb8d1 f4781d80 d352d4c4
+0 01 400000f4 010 00000001 36fdb83c 9c7a3db0
+1 01 4000079a 001 00001010 6bcc0000 0100 41be7b8c 0011 41be7b8c 0100 b95509e2 0010 b95509e2 0000 0f693131 0010 0f693131 1100 73fe375c 0001 73fe375c 1100 a35c4981 0001 a35c4981 1100 00000790 0020 82aa6b6b 92921282 beba9546 8fd6ceb3 7338ee7a 7ec35e82 0514eb95 915b110d
+1 01 40000526 000 00001100 ace60000 0100 ace60000 1000 1a7f011b 0000 1a7f011b 0010 1a7f011b 0000 1a7f011b 0000 769de20c 0001 769de20c 0010 769de20c 0100 769de20c 1000 005931d2 0001 005931d2 0010 005931d2 0100 00000520 0020 a82deb62 d138d2d0 cea58255 4b51bba4 1a218467 3f302390 0ef964ef 1c6f42e0
+0 10 400005b1 000 00001111 50f4b999 50f4b999 50f4b999 853bbc2d 853bbc2d 853bbc2d 853bbc2d a0b92ea9 a0b92ea9 a0b92ea9 a0b92ea9 778a2845 778a2845 778a2845 778a2845 50f4b999
+1 01 400001de 001 00001111 4a880000 1100 ec039cc9 0010 ec039cc9 1100 520a2d94 0000 520a2d94 0000 468e4fd0 0011 468e4fd0 1100 9ee5865e 0000 9ee5865e 0100 df43c0d5 0011 df43c0d5 0100 acd90ace 0010 acd90ace 1100 30b2c29f 0001 30b2c29f 1100 0000fd38 0001 000001d0 0030 67b9675e 8a9eb8d1 222ceaec 3d49540d ab3d252a 89c2374c b9b71095 fe9cf772 4b5e1cc5 0fdf4dab c31dc251 aa7ccfe8
+1 01 40000350 001 00001001 c98f7dcb 0011 c98f7dcb 0100 4f6a1d9c 0011 4f6a1d9c 1100 91cc0aef 0010 91cc0aef 1100 96ce07fa 0011 96ce07fa 0100 693f46dd 0011 693f46dd 1100 00000350 0020 9f40dce0 32b57235 26e17c2e 790a396e 269ae095 aed7c4c0 1995584c 190b4152
+1 01 40000741 000 00000001 00dde800 0010 00dde800 0100 00000740 0010 42785c70 1b0ab38d 4b39ec79 da6bdbe0
+0 10 400003d8 010 00000011 cc478f92 4a1f4075 fd29046e d5f16905
+1 01 400007e9 000 00001110 5a260600 0010 5a260600 0000 5a260600 1000 7ed29c52 0001 7ed29c52 0010 7ed29c52 0100 7ed29c52 0000 5f2c57dc 0001 5f2c57dc 0010 5f2c57dc 0000 5f2c57dc 1000 7dca56b1 0001 7dca56b1 0010 7dca56b1 0100 7dca56b1 1000 000007e0 0020 ba7b01e7 b654bae7 181b9d3f 852b63e6 f60e5754 9555ffb0 995e2ac8 05c1a5dc
+0 10 400007ec 000 00000011 19d29c52 19d29c52 19d29c52 19d29c52
+0 01 40000564 000 00001000 5c042bab 5c042bab 5c042bab 5c042bab b0cad742 b0cad742 b0cad742 b0cad742 d2b23f0a
+0 01 4000055e 001 00001110 4bb0224c 58319ee4 58319ee4 5c042bab 5c042bab b0cad742 b0cad742 d2b23f0a d2b23f0a 4ab45ba2 4ab45ba2 16ce95fd 16ce95fd c50c24ed c50c24ed
+1 01 400002f9 000 00000100 9c361700 0010 9c361700 0100 9c361700 1000 000034de 0001 000034de 0010 000002f0 0010 23578e0a 41e667e4 f5020341 19c7ebab
+1 01 400003ec 000 00000001 00007b3f 0001 00007b3f 0010 000003e0 0010 281513b7 da01cb90 2a22a375 f7288977
+0 10 400007cc 010 00000011 1916bdb5 7dfa17b3 706f9cf2 aecd6929
+0 01 400006bc 010 00000110 aa8d9d6f 83f9a8f7 7c90197f 5aeea81d 7c539d4f 508b11ff 8aee51d3
+1 01 400002e4 010 00001101 5c73f1dd 0111 22c1dfe1 1100 928af46f 0111 887ad767 1110 ce3e2bc8 0111 af577f1a 1100 49898bf3 1011 d11f15cd 0111 5db674de 1111 8e2971e4 1111 aca89be7 1101 41f252e3 1110 895f4416 1111 5befbd4d 0110 000002e0 0040 8c399a64 e86aff7e b8f3dca7 d8813283 4d8c38f3 076a5bdb 2981034a 5f61af01 8f961217 84af8508 fb4bc93b e3a298a1 d043d6f6 9c1168e4 54248b40 611b84ad
+1 01 4000000c 001 00000100 66f0fd79 0000 66f0fd79 0100 0036c140 0011 0036c140 1000 0000b9b7 0011 00000000 0020 7b9793e0 d94bd613 099849f2 94f2d9b8 3cb49954 a8c1926f b64b01f4 3b9857f3
+1 01 400001e2 000 00001010 72410000 0100 72410000 1000 91cb71ed 0001 91cb71ed 0000 91cb71ed 0100 91cb71ed 1000 db8a1810 0001 db8a1810 0010 db8a1810 0100 db8a1810 1000 000000fb 0000 000001e0 0010 5c146ba8 4e1a9f53 b9068ef9 af7632ff
+0 01 40000716 001 00000110 655fea0f ab1aa200 ab1aa200 31a4f15e 31a4f15e aacc00c8 aacc00c8
+1 01 400005c0 010 00001110 1a208c4f 1101 62fb2f02 1110 d6c3434f 0001 e60581c9 1011 5155f07e 1011 b48d23f3 1111 85a4d793 1111 bda99ba5 1111 98b61895 1001 0a596075 1110 f39754f6 1000 6a3b83d2 1101 128932ea 1111 a2c600c3 1001 34ded6ad 1010 000005c0 0040 18228c05 6ce01eda c76ba839 df21e342 b6679094 4a7206fd 72efb4ec 3259c269 672c128b 77468f33 666c942f 5564bb01 9fb0cd98 31b26238 d8f74536 05c03ab5
+1 01 4000023a 001 00001100 966e0000 1100 5cb63fcd 0011 5cb63fcd 1100 357f1141 0011 357f1141 0100 c9da7c25 0011 c9da7c25 0000 d15a622b 0011 d15a622b 1100 7a819b84 0010 7a819b84 0000 1e2e0390 0001 1e2e0390 1000 00000230 0030 5547febc fa3728a9 805557c9 b605a6c4 9a163ad3 090df2be 35c68e4b 2e21f484 567a508b 28709e3f 3fd39a2c f80dff60
+0 01 40000500 010 00000110 1d52439a f2c11f2a b3dfc4fe b50c1ebb 137a3ee9 8236040c 76ac475a
+0 01 4000007c 010 00001101 75e2d5a3 51e191a6 f7a486a3 b59b6f6b 469e0e32 92d76546 826bc200 5aa1a4b0 29eeddb1 abc8e1dc a66497a8 3dbaf1ea 5328aad2 2785c2ae
+1 01 40000710 010 00000011 3a1e8b0b 1110 287a0a8e 0101 fff6dd72 1110 b8724d67 1000 00000710 0010 9168d8be d1b1f24c 3406d230 b1542b19
+0 10 40000710 010 00001111 3a1e8b9d 657aea8e fff6dd00 b8a4f15e aacc00c8 f77695c9 3b79113a ad5274f7 d367e694 c1282ac7 5478fa27 a2f0633d 52024750 72006dbe dc245a4c d1f92c07
+0 10 400006e0 001 00000001 2bcb1d5c 2bcb1d5c
+0 10 4000069f 000 00001111 ec680743 789a2da1 789a2da1 789a2da1 789a2da1 ee8f81ac ee8f81ac ee8f81ac ee8f81ac c24d5c2e c24d5c2e c24d5c2e c24d5c2e ec680743 ec680743 ec680743
+1 01 4000076c 000 00001000 b852215a 0001 b852215a 0010 b852215a 0100 b852215a 1000 6f59f368 0001 6f59f368 0010 6f59f368 0100 6f59f368 1000 000000fd 0001 00000760 0020 2e8db798 c946b106 fb9bb4d7 c6bcdde6 42bbb08c ee8f78c3 8928218e 38205107
+0 10 400002b0 010 00001111 99211329 c28d4bcf 5203b4e0 5e0cc5ed 8c9ecf7d 72f38e43 eeb44cf1 d7e752f4 4e7d2618 a7535d84 95a87781 7fbc6dce 53428fc1 97e42c53 2230b247 cd953e46
+1 01 40000768 001 00000110 bb05ebd5 0010 bb05ebd5 1000 311c121f 0011 311c121f 0100 44d9d3df 0011 44d9d3df 1100 000058e7 0010 00000760 0020 2e8db798 c946b106 d70322bf d0a9fcd4 f505961e 47f100d3 1ba60e89 29d909f4
+1 01 4000020c 001 00001100 b9e84d27 0011 b9e84d27 1100 1af94d13 0001 1af94d13 1100 848fde2c 0001 848fde2c 0100 5d07b7eb 0011 5d07b7eb 0100 ef8eb030 0011 ef8eb030 1100 2e204844 0011 2e204844 1000 0000e122 0011 00000200 0030 d5f43bed 48bbf7a2 67c535c3 10635493 4e660fb8 bb7f89f2 8a94de2a 3436cfb5 b3397f8d 8a30da41 121acfc4 c86fda67
+0 10 400001f0 010 00000011 8743c0d5 acd90a70 30b24a9f 9f24d438
+1 01 400006ac 001 00001110 6cbf70a4 0011 6cbf70a4 1100 e1fef146 0001 e1fef146 1100 e3cdd68e 0001 e3cdd68e 1100 311f782f 0000 311f782f 1100 06ea794b 0011 06ea794b 1100 efcf2082 0001 efcf2082 1000 1e2a2fb1 0011 1e2a2fb1 1100 00008838 0010 000006a0 0030 702a6598 9287d4a8 87c7319a d259fe3b 4a81eb54 3d10fcf2 55d841cd 8e33ced8 6d72df7e 6cbba04b ec9309e3 6407c16f
+1 01 4000032c 010 00000011 87d8395c 1101 7f89e511 1110 d85b6644 1110 9f25ec91 1001 00000320 0020 5fd64c04 979f929c 201421c8 b35f772f 3cfff3b0 378e394e 22186e9e 32903e5a
+1 01 40000657 000 00000100 e8000000 0000 07433ec6 0001 07433ec6 0010 07433ec6 0100 07433ec6 1000 00000650 0010 76f430b3 1854e57b 3cf593ba 32c4425d
+1 01 40000414 010 00000101 d6ebfc7b 1111 408b3148 1101 f22cd939 1111 c71dc2d2 1111 3c6bdc07 1111 7a5d814b 1111 00000410 0020 66a0ac2a b869b2f6 9adcc076 03fc978d 08922366 ece31ebd 13f94b9d 9e7feeaf
+0 01 40000520 010 00001001 0ccd0ed4 ace61654 afcb0193 769de20c 365931d2 c2d3b811 2870558c e581958b f99a60d1 ab7e75c1
+1 01 4000053c 000 00000001 00005312 0000 00005312 0010 00000530 0010 1a218467 3f302390 c7449e8d 8131de6e
+1 01 40000654 010 00000000 1e1b382f 1111 00000650 0010 4b84b918 4a0a3527 c4dcbef8 a8c6b10c
+1 01 400004f0 000 00001111 fde2e07c 0001 fde2e07c 0010 fde2e07c 0000 fde2e07c 0000 7a62dbda 0001 7a62dbda 0010 7a62dbda 0100 7a62dbda 1000 c9e22350 0000 c9e22350 0010 c9e22350 0100 c9e22350 1000 57e4a3b5 0001 57e4a3b5 0010 57e4a3b5 0100 57e4a3b5 1000 000004f0 0010 b65c0ae0 cbebbad3 869cf475 b0e787ee
+0 10 40000360 000 00000001 693f46dd 693f46dd
+0 01 40000106 001 00000100 c84099d6 cd3a0d18 cd3a0d18 5caeb3b3 5caeb3b3
+1 01 400005ce 000 00001100 d0cf0000 0000 d0cf0000 0000 da9cb901 0001 da9cb901 0010 da9cb901 0100 da9cb901 1000 1f8032dd 0000 1f8032dd 0010 1f8032dd 0100 1f8032dd 1000 00f11410 0001 00f11410 0010 00f11410 0100 000005c0 0020 18228c05 6ce01eda c76ba839 df21e342 42652d83 a86652b9 90400418 e130dbed
+1 01 40000262 001 00001001 15060000 1100 bcdf35ff 0001 bcdf35ff 0100 badf89a3 0011 badf89a3 0100 06d44fad 0011 06d44fad 0100 4b1140da 0010 4b1140da 1100 00009b76 0010 00000260 0020 6384aae1 bdcef87b 49b6c43e f21ec6fb 74a17062 994f4288 031751d7 48683e57
+0 10 4000000c 010 00001111 eff0f170 0046c140 2c5fb9b7 557031bc 9ee201a8 43dba8be 5de6e239 2678bf69 e3d318bd 7886a213 715a2f04 b490e1a1 000da072 a94bc655 55749c48 ae776655
+1 01 40000124 010 00000111 93919d0c 1111 865e99bf 1111 2b7f3610 1010 a79f62c2 1110 3af1bb0b 0101 2c570c64 1111 39e4b4fe 0101 3550e164 0010 00000120 0030 8617c110 6615ac3e 8cc233c4 64bf2aa6 162ca498 a33e261f 894cc645 345bcf97 700d8de8 eab1a65f 7fe9439c c2b5ba8a
+1 01 40000494 010 00001100 2bd5a739 1111 cce5a448 1011 b7ba2b65 1011 7af584b4 1111 f05e1fea 1111 511465bc 0101 1efd2fc3 1101 1ee3510b 1011 68bcdff0 1111 fa4b2d62 1111 59d09f09 1100 59db19dc 1111 074f7f5f 1111 00000490 0040 6a72f3f2 cc1f207e dd081ea5 56855a02 86e205d7 48767be6 6abcfed1 d6625932 bde0dc43 39065120 868ce11b a1d4678a 9142b7d9 53919dda 32804c1a 97c7a1b8
+1 01 40000264 010 00000001 1cce1f25 1101 95428305 1101 00000260 0010 bc39629f dce0f1b2 a48be140 3a334d0c
+0 01 4000042e 001 00001010 e99285eb 1441d638 1441d638 f5c664c1 f5c664c1 b55a0313 b55a0313 01b26dc3 01b26dc3 3b954eba 3b954eba
+1 01 40000670 000 00001101 bdfe2822 0001 bdfe2822 0000 bdfe2822 0100 bdfe2822 1000 fe45a7b6 0000 fe45a7b6 0010 fe45a7b6 0100 fe45a7b6 1000 1d52886b 0000 1d52886b 0010 1d52886b 0100 1d52886b 1000 0000c460 0001 0000c460 0010 00000670 0010 4fd17e33 668c2333 18c0b015 690b7c52
+1 01 40000350 010 00000111 bdf80326 0111 094e1006 1110 ecacacb7 1110 ed8a5f5f 1110 0a4bf4db 0101 05228c0d 0111 58bd6a7c 1110 26c8d845 1111 00000350 0020 a3b0e3d1 048bf30b 4cd511d7 4ded048f 1f35ddd2 bcdfe382 dc91e75e 1d50c8e2
+1 01 40000248 010 00001000 16e93d94 1110 79d60bd7 1011 d12b3780 1110 b587b21a 0100 4844abc5 1111 92d0009e 0001 89388ec8 1010 f137ca37 1110 35765e3c 1110 00000240 0030 9a163ad3 090df2be 4dfba4b6 1bf7ab47 59210443 5282d34b aed20ac2 7e32c43b 3bc78c06 562f17b4 1af049ec 83ea87d2
+0 01 40000259 000 00000100 4844abc5 4844abc5 4844abc5 677b339e 677b339e
+0 10 40000484 010 00000001 484dd4d2 47047992
+1 01 40000054 001 00001100 306a7193 0010 306a7193 0100 f29e7386 0011 f29e7386 1100 33b5ea53 0000 33b5ea53 1100 bddbdfa0 0010 bddbdfa0 1000 0715c159 0011 0715c159 1000 04b5f6fe 0010 04b5f6fe 1000 000031ef 0011 00000050 0020 8f0aa6a7 721530c5 a2d26b58 ee5e7d83 c1fa0063 718c9440 cc8b4615 4ee69765
+0 10 400002e6 000 00001111 9473f1dd 9473f1dd 22c14156 22c14156 22c14156 22c14156 6e8af46f 6e8af46f 6e8af46f 6e8af46f 0b89a34d 0b89a34d 0b89a34d 0b89a34d 9473f1dd 9473f1dd
+1 01 40000360 010 00001101 0b98a05d 1011 c592587c 1111 75c7b4ee 1100 8fe9f0fa 1011 3a543ecb 1110 cfaaa133 1010 45056fa9 0111 492395df 1111 5eba3a26 1111 32dab5a5 0110 4210908d 0001 467e23ac 0110 a9e9c75f 1111 f5c9b5ff 0111 00000360 0040 303d84a6 8bdb2c06 d2cad1f9 edd439bc af343c05 5c56791a 7ba3da63 a9d23efe 1c40fd57 b716c0e2 39531a54 3c00493b ccb5fab2 3626f1fe 5ce11696 a6519b71
+0 10 40000610 001 00001111 3a5975fe 3a5975fe 076d889c 076d889c 88f29484 88f29484 6286f029 6286f029 be184678 be184678 d59599d1 d59599d1 0e08d34b 0e08d34b 63be4aa0 63be4aa0
+0 01 4000001f 000 00000100 9ee201a8 43dba8be 43dba8be 43dba8be 43dba8be
+0 10 40000292 000 00001111 4e7d2618 4e7d2618 a7535d84 a7535d84 a7535d84 a7535d84 95a87781 95a87781 95a87781 95a87781 7fbc6dce 7fbc6dce 7fbc6dce 7fbc6dce 4e7d2618 4e7d2618
+1 01 40000534 001 00000110 1a50eafd 0010 1a50eafd 1000 82e61ba3 0010 82e61ba3 1100 d3cca64d 0011 d3cca64d 1100 0000b4f8 0011 00000530 0020 aca780ed e487cb5e cd2c44ed bbaea557 5a5c92e5 77395f77 e4f9baef 4fc502c9
+0 01 40000594 001 00001100 9a6fc3bb 9a6fc3bb d392f10d d392f10d 474f8fe5 474f8fe5 7545a2c9 7545a2c9 c2f013d2 c2f013d2 623a8fb7 623a8fb7 d20de77d
+1 01 40000306 000 00001110 54250000 0100 54250000 1000 54996d0a 0001 54996d0a 0000 54996d0a 0100 54996d0a 1000 650895e6 0001 650895e6 0000 650895e6 0100 650895e6 0000 45619151 0001 45619151 0010 45619151 0100 45619151 0000 0000004e 0000 00000300 0020 9c8224e0 2cc6de0f a4d08d90 471bbf53 d68d03da b44ada2e d122cb51 f817aa1d
+1 01 40000130 010 00000100 c0718248 1011 fee6d33b 0110 564fb6e4 1011 f15a4b32 1111 2df830f6 0111 00000130 0020 cb2e465c c71da388 3840b7ed 25bac930 358f86e2 cdc01a80 9ab4cfa5 9d6d794e
+1 01 40000018 000 00001101 836da9fc 0001 836da9fc 0010 836da9fc 0100 836da9fc 1000 a0d76792 0001 a0d76792 0010 a0d76792 0100 a0d76792 1000 faabceca 0000 faabceca 0010 faabceca 0100 faabceca 1000 0000bc25 0001 0000bc25 0000 00000010 0020 3cb49954 a8c1926f f2204206 0943fd66 b65a898f 0a36f308 6b9a5717 92cfe3f3
+1 01 400006cc 001 00000110 0d2f7845 0000 0d2f7845 1100 e16709eb 0011 e16709eb 1100 4da339ff 0011 4da339ff 1100 00006ae4 0001 000006c0 0020 6d72df7e 6cbba04b 4291a69e 50d8832b 184fafee 6682c11a d5558f3e 42170f24
+1 01 4000026c 010 00001111 0eeef82d 0001 bf65b3a7 1110 bb34cede 1011 ed26b548 1101 c911b70d 0011 858522a7 1111 d78fde64 1101 b327850b 1111 e503f973 1111 c5e24a2c 1101 b50db8e6 1011 39c45e0a 1111 7a609aa8 1010 eb30dd69 0110 e2fa96ef 1011 02b74372 1111 00000260 0050 3bc78c06 562f17b4 c14947d7 912bcd9e 2ef7e8d0 1a25256c 571986b2 22f024ea e157856d ed5a7e2c ce2e6b40 46bc05e8 86703332 cb36fe46 7ed079c5 25fde0b9 294a4e56 1ea0c6db 25d8543a 2adc29bb
+1 01 400007a8 001 00000110 0bb13086 0011 0bb13086 1000 30daf35c 0010 30daf35c 1100 9e870f8a 0011 9e870f8a 1100 00003c34 0011 000007a0 0020 7338ee7a 7ec35e82 400ab94d 40f134bb bf26e3b6 4b1cbf71 ae5654fa 135896ba
+1 01 40000328 010 00000001 03127143 1110 6216afd0 1000 00000320 0010 5fd64c04 979f929c 225e4443 b89bfe74
+0 01 40000422 001 00000111 c71dc2d2 3c6bdc07 3c6bdc07 7a5d814b 7a5d814b e99285eb e99285eb 1441d638
+1 01 40000100 001 00000011 6ba2873e 0011 6ba2873e 1100 85a4b6c2 0001 85a4b6c2 1000 00000100 0010 abc0bbc8 c435d601 314da1fb 9999add2
+0 10 4000062b 000 00001111 e1029c1f 919a846a 919a846a 919a846a 919a846a aed1c44f aed1c44f aed1c44f aed1c44f 0e6f2451 0e6f2451 0e6f2451 0e6f2451 e1029c1f e1029c1f e1029c1f
+0 10 400003b8 001 00000001 ed9f1ae6 ed9f1ae6
+1 01 400001c4 010 00000101 70ac9e30 1110 ebf23c0e 0111 e1d2171e 0100 f50695f4 1110 602ea027 1111 9cbe2784 1001 000001c0 0020 187a6f03 9ca3e8da 57e55b9a c2d8a79e 11820a06 c332f3d7 6faccb10 f615a8fc
+0 01 400006fe 001 00000110 728099a6 52024750 52024750 72006dbe 72006dbe dc245a4c dc245a4c
+1 01 40000262 001 00001011 b5990000 1100 2c130937 0001 2c130937 1100 6eddff84 0011 6eddff84 1100 43b9789c 0010 43b9789c 1100 40339623 0011 40339623 1100 b858a899 0010 b858a899 1000 0000920e 0011 00000260 0020 4842091a 4c95ac10 db307d62 81929ded c5e20b7e 13a1bfa9 90644e4e cd50dfc0
+0 10 40000460 001 00000111 c108e568 c108e568 e5386acd e5386acd 88b21ec8 88b21ec8 2c758c39 2c758c39
+0 10 4000037a 000 00000011 5a056fa9 5a056fa9 5a056fa9 5a056fa9
+0 10 40000450 010 00000001 83a8e757 842a591f
+1 01 4000073a 000 00000111 f9150000 0100 f9150000 0000 f142f2b5 0001 f142f2b5 0010 f142f2b5 0000 f142f2b5 1000 0000666d 0001 0000666d 0010 00000730 0020 448f2552 109a8664 412c3abc 1ec05c78 471751cb 6d1a8249 51ad9fd4 9e13907b
+0 10 400006df 000 00000011 4271e247 4271e247 4271e247 4271e247
+0 01 40000158 010 00000000 c83fcc78
+0 01 400001f3 000 00001101 8743c0d5 acd90a70 acd90a70 acd90a70 acd90a70 30b24a9f 30b24a9f 30b24a9f 30b24a9f 9f24d438 9f24d438 9f24d438 9f24d438 1ba004a4
+1 01 400006da 001 00001101 a1be0000 0100 78ea8a3b 0011 78ea8a3b 1100 454d1e2e 0011 454d1e2e 1000 c5b0483c 0001 c5b0483c 1100 a009b3d9 0000 a009b3d9 1100 a0251ef3 0001 a0251ef3 0000 aee4b158 0001 aee4b158 1100 0000c45e 0011 000006d0 0030 184fafee 6682c11a 38c35ca7 74fde455 090626e3 be49fe2e be36df06 8d2204ca 34c06efa 02f38b65 2db7751d b29169d8
+0 10 4000017c 001 00000001 297f8480 297f8480
+1 01 40000450 010 00001101 9e9fb836 1001 61c8089a 0110 1831ccd9 1101 b86d81a1 1100 348d195b 1010 f96dde33 1111 f3e5de42 0111 8f0e439b 1010 56ec8189 1110 8ae031d1 1010 ff2f353d 0111 63f7e5e3 1010 d7bbd13c 1111 b0821045 0101 00000450 0040 aa1c6d4c e95cf202 305bc460 9f4f16bb 8c2c3bb7 f28c62bc 818534c7 a7e4c073 64fa0162 71696679 af8f42aa 452c0a89 8564215e 68e292c7 a1ca076f 839fbf8e
+1 01 40000344 010 00001000 3ffaad8b 0111 b4192826 1001 0de5e0ea 1111 5352b75f 1111 6975a69f 1001 23ecf96b 1111 184cb610 1100 b2367529 1001 a187d37b 1111 00000340 0030 364d6f42 114b423e 9af34676 2b0e1876 15540acd 36cf7784 4191d67a 20cd7c93 0e4f5bd5 20e87b32 9548e886 36a22cd7
+0 10 400003c8 010 00000111 db4fe0d4 f328e161 fd29046e d5f16905 cc478f92 4a1f4075 e6d144c9 cdb2dfb2
+1 01 40000218 010 00000111 e521345b 1111 543b036d 1111 46524d89 1111 16fb66a5 1100 f8b8cc6d 1011 2d152636 0111 a3678b0b 0011 73467b82 1110 00000210 0030 4e660fb8 bb7f89f2 0c1c4f5b 5c87d506 d813e1e1 2870990b 3654ea9e 36f3c893 c4f6a8d9 38a4541f 4835802a 6c89b197
+0 10 400000cc 010 00000011 36259f00 e585d13e 1babb886 2fe92c32
+0 01 40000411 000 00001001 1e1b088e 1e1b088e 1e1b088e d6ebfc7b d6ebfc7b d6ebfc7b d6ebfc7b 408bed48 408bed48 408bed48
+1 01 40000272 000 00000001 10680000 0100 10680000 1000 00000270 0010 9da4ca28 407638fd 1b43557a 70bd180e
+0 01 4000061b 000 00001000 88f29484 6286f029 6286f029 6286f029 6286f029 aed1c44f aed1c44f aed1c44f aed1c44f
+1 01 400003f8 010 00000000 ff9b7cd0 1111 000003f0 0010 91dd74c2 78ae2647 1660083b a5428ad1
+0 10 400005ec 010 00000001 6a3b4dd2 f3bb4f29
+0 01 400006f2 000 00000000 aee4d058
+0 01 4000050d 000 00000001 b50c1ebb b50c1ebb
+1 01 40000367 000 00001011 12000000 0000 daf278b9 0000 daf278b9 0000 daf278b9 0100 daf278b9 1000 84ba92c4 0001 84ba92c4 0000 84ba92c4 0100 84ba92c4 1000 00d7021c 0001 00d7021c 0010 00d7021c 0100 00000360 0020 0e4f5bd5 20e87b32 c09269e6 6f614bc4 69af5b7c f68a21c8 80639ee2 82bd34e3
+1 01 4000035e 000 00000101 63520000 0100 63520000 1000 e2922f7a 0001 e2922f7a 0010 e2922f7a 0100 e2922f7a 1000 00000350 0020 15540acd 36cf7784 8f7f5140 94cd422d 2f702c00 4d5cf3c8 53497d4d e47faa07
+0 01 400003ce 000 00001011 f328e161 f328e161 fd29046e fd29046e fd29046e fd29046e d5f16905 d5f16905 d5f16905 d5f16905 cc478f92 cc478f92
+0 10 40000784 010 00001111 2a148152 9bb0c8f3 17cfccb1 156f3eef 2bf828fa b3cc907b 8cbe7b8c 339f0969 0f693121 0bfe3086 30daf381 9e870f8a c6d43c34 f94e001d d3b0970a 04b332b9
+0 01 400005c4 010 00000000 62fb2fea
+0 01 400003d8 010 00000001 cc478f92 4a1f4075
+1 01 40000510 010 00000000 59c5fa1b 0110 00000510 0010 d895e465 9bb64fcf 51f5591d 3cf6de84
+1 01 400001c4 001 00000010 55583382 0001 55583382 0100 00000e11 0001 000001c0 0010 e4a75dfa 6088a254 f562a17f ab92fb9e
+0 01 40000034 000 00000110 715a2f04 715a2f04 715a2f04 715a2f04 b490e1a1 b490e1a1 b490e1a1
+1 01 4000031c 010 00001011 0a64c586 0111 eeb3a2a6 1111 b3c75583 1111 32669e73 1111 0b645c10 0111 a4670011 1111 69021e0a 0010 23b0ac35 0111 7ac34ed0 1111 f9eaf907 0111 64f6cb48 0111 60d8ead2 1110 00000310 0040 d68d03da b44ada2e d3988199 f6c01266 97c5bd97 cfb98960 a5275742 5d4f40a0 3cf2f13b 276fb277 052b1fea c1b82a17 0f88c5a2 d603ed39 bd5c8297 2bb54245
+0 10 40000715 000 00000011 657aea8e 657aea8e 657aea8e 657aea8e
+0 01 400004d0 001 00001100 9e1fbf70 9e1fbf70 bf5cd510 bf5cd510 d2fa6fde d2fa6fde 136aaed8 136aaed8 3805af0f 3805af0f 3cad5457 3cad5457 12ac6870
+1 01 400004b6 001 00000111 4a560000 1000 88f320ac 0011 88f320ac 0100 be0da009 0011 be0da009 1000 813a829c 0011 813a829c 1100 0000b546 0001 000004b0 0020 9feda7b8 1cde0766 5018622a c26a21b1 6b0fa997 29ff4bd4 b76c5ba7 b37790a0
+0 10 4000022c 001 00000011 51152636 51152636 f84dcc6d f84dcc6d
+1 01 400000d1 000 00000100 58726200 0010 58726200 0100 58726200 1000 00004e0f 0001 00004e0f 0010 000000d0 0010 d0b8a445 30dbfc80 652edff7 826ab287
+0 01 400006e5 000 00000001 c5b0bd3c c5b0bd3c
+0 01 400001a4 001 00001011 811f4363 811f4363 714811cc 714811cc 2d5db68f 2d5db68f 7ec21640 7ec21640 10e8e49e 10e8e49e a14382df a14382df
+1 01 4000076f 000 00001100 56000000 0000 9c430110 0001 9c430110 0000 9c430110 0100 9c430110 0000 80a78fc9 0001 80a78fc9 0010 80a78fc9 0100 80a78fc9 0000 388e3d3f 0001 388e3d3f 0010 388e3d3f 0100 388e3d3f 1000 00000760 0020 2e8db798 c946b106 d70322bf d0a9fcd4 874a75dd 2a567b2f 2e224501 b9ec7884
+1 01 40000178 010 00000000 f764644f 1111 00000170 0010 0ce2250f 65684295 33dafef7 b195f860
+0 10 400007c2 001 00000011 7dfa17b3 706f9cf2 706f9cf2 7dfa17b3
+1 01 40000473 000 00001101 c7000000 1000 333e0c96 0000 333e0c96 0010 333e0c96 0100 333e0c96 0000 c05565b0 0001 c05565b0 0010 c05565b0 0000 c05565b0 0000 a3ff0953 0001 a3ff0953 0010 a3ff0953 0100 a3ff0953 1000 0000005f 0001 00000470 0020 968d5acc d02be731 ef4cc593 30efb0e7 80b291a4 6f18574a 841ddc6e defaa4ca
+0 01 400001f0 000 00000001 8743c0d5 8743c0d5
+1 01 4000030c 010 00000000 06eed03f 1101 00000300 0010 9c8224e0 2cc6de0f 1aba93ba 6a1e771e
+0 10 400003b0 010 00001111 a371c30a e62e0314 ed9f1ae6 c2588cfa 5eba3a26 b5dab5cf bdfd728d 8c7e23a8 a9e9c75f 4cc9b5ff 4021fd9f 3cf9783c 6d81d81c 815823e3 453819b6 99b1b48d
+1 01 40000016 000 00001100 b2680000 0100 b2680000 0000 df57e705 0000 df57e705 0010 df57e705 0100 df57e705 0000 cd3c351a 0001 cd3c351a 0010 cd3c351a 0100 cd3c351a 0000 006742bd 0001 006742bd 0010 006742bd 0100 00000010 0020 b44a443d 6ce52b29 24dda801 0847f08a 03c5ff35 05e09d07 adfa967d 82dcee09
+1 01 400003fc 001 00001101 f7994ff5 0011 f7994ff5 1000 9a6da13b 0011 9a6da13b 1100 a990e168 0011 a990e168 1100 4cc6f84f 0011 4cc6f84f 1100 c0f7c6bd 0011 c0f7c6bd 1100 b310e97c 0011 b310e97c 1000 5fc397da 0010 5fc397da 1000 000003f0 0030 91dd74c2 78ae2647 c2cb3a82 e6493c09 48404f63 7614942d 15b2f80c a7edf5ee a7bdc445 f8728c54 860d2aac 6ca26cf6
+0 01 40000718 010 00001110 fff6dd00 b8a4f15e aacc00c8 f77695c9 3b79113a ad5274f7 d367e694 c1282ac7 5415fa27 f1f0f2b5 abdd666d e6828b10 ffe422f2 791a5645 6c610587
+0 10 400004dc 001 00000001 136aaed8 136aaed8
+0 10 40000270 010 00000001 10689623 b86aa8de
+1 01 40000622 001 00001110 e3980000 1100 1fd2256c 0010 1fd2256c 1100 cd87f119 0001 cd87f119 1100 83cf05c0 0010 83cf05c0 0100 c2fc6073 0010 c2fc6073 1100 a2704501 0010 a2704501 1100 1e9d2218 0001 1e9d2218 0100 a2ad28c8 0001 a2ad28c8 1100 00000620 0020 e5ce49e0 1e35709e 8f9cb111 8fe92fc8 f13b97f4 b0b53ab8 add6c715 c66346f8
+1 01 400002f0 001 00000001 d2bb074c 0010 d2bb074c 1100 000002f0 0010 e8cc84ff 4b3b38ec 5bcb59ef bc0f6d7c
+1 01 40000098 000 00000011 71c3e9b8 0001 71c3e9b8 0010 71c3e9b8 0000 71c3e9b8 0000 00000090 0010 36a84f01 cc76512b c0296c36 c0e47cc6
+0 10 40000691 000 00000011 789a2da1 789a2da1 789a2da1 789a2da1
+0 10 4000010c 010 00001111 5caeb3b3 619d73f2 a5950f7f 7217ce6d de131201 3504674a 93919d0c 865e99bf 2b3636e8 c09f8248 fce6d30b 5657b6e4 f15a4b32 6ba2873e 854099c2 cd3a0d18
+0 01 40000032 001 00001100 7886a213 715a2f04 715a2f04 b490e1a1 b490e1a1 000da072 000da072 75d2fd1e 75d2fd1e 1e5b0e8a 1e5b0e8a 54fd0648 54fd0648
+1 01 400006c4 001 00000100 894a345b 0011 894a345b 1100 5e5f5dcb 0011 5e5f5dcb 1100 00008c07 0011 000006c0 0010 30a5a48a 413a67be 44b8c344 a0dec205
+0 01 400003f0 001 00001000 13a8a077 13a8a077 76121a19 76121a19 ff9b7cd0 ff9b7cd0 f74a4ff5 f74a4ff5 9a6da13b
+0 10 400001d8 010 00001111 9c515884 4a88b8d2 72419cee 91cbf7ed db8a1810 eee5d5e3 8743c0d5 acd90a70 30b24a9f 9f24d438 0dc87885 70589e82 06f23c11 1ad226d5 f50695c7 602ea027
+0 10 40000480 010 00001111 d7bbd15f 4882d445 ecbd1ed4 d15a1203 1f3221b9 2bd5a739 cc58a448 b78e2b65 7af584b4 f05e1fea eb14a0bc 1efd52c3 1ebb510b 4abcdff0 faf320ac bed0a009
+0 01 400001e8 001 00000001 db8a1810 db8a1810
+1 01 4000008c 001 00001111 484e1657 0010 484e1657 1100 df8ce220 0001 df8ce220 0100 62987116 0010 62987116 1100 9649a6a8 0001 9649a6a8 0000 71e7ccac 0011 71e7ccac 1100 c1f97ca4 0001 c1f97ca4 1100 b079ca96 0011 b079ca96 1100 25700323 0011 25700323 1100 00000080 0030 62a63b4a b8dc7ae9 e09a910e 2d4ad2c9 57f54ca7 b0254b0d 97418e82 555ad758 cdf4297a ace0a2b2 3784f546 2fdc5ec8
+1 01 4000005a 000 00001000 9ad30000 0100 9ad30000 1000 060e4893 0001 060e4893 0000 060e4893 0100 060e4893 1000 00d2dff4 0001 00d2dff4 0010 00d2dff4 0100 00000050 0020 8f0aa6a7 721530c5 be058a02 b97992db 14015294 cf68c921 bf54be9e 8aefa398
+1 01 40000458 010 00001111 58b01104 1010 2cd04b04 1101 073b687e 1101 b7b0ab43 0011 9c14115d 0001 03f29b89 1100 8093c7ce 1111 ffe1b62d 0101 bf2de6ad 1010 d97dc9a3 1110 1501d12a 1111 2fbe2cae 1111 dc1975e1 0110 42dc3ee9 0011 793e8af2 1111 210dbcc6 1111 00000450 0050 aa1c6d4c e95cf202 de7af9c4 cbfd5757 c86e97cd cbd3e6c2 41cc6552 b8f55537 a47e9dee bde5f53d 9c34e7af afd0c439 f711d67a 034c65a5 bba7c839 3ac1505b a2df4b78 1bba221c da31a5cf ea34cad8
+1 01 40000426 001 00001000 356d0000 1100 12c11575 0010 12c11575 1100 1ac5a5ac 0001 1ac5a5ac 1000 efff31c4 0011 efff31c4 0100 32af1fda 0001 32af1fda 0100 00000420 0020 2487d4db 698fdee9 ec627a8f 25433619 72156b85 89c3d3e1 60495b9e d75f844d
+1 01 400002b6 001 00001011 e26f0000 1100 6323c722 0011 6323c722 0000 833d5331 0001 833d5331 0100 759f175c 0011 759f175c 0100 90712e00 0011 90712e00 1100 c78daf95 0011 c78daf95 1100 00001990 0011 000002b0 0020 646df4cf b57f8fd7 5d3622cb df7fdc96 34214c54 64e7426c 44493300 2d42c0af
+0 10 4000032c 010 00000111 62645c10 a4670011 d85b1ef0 9fb0ac35 7ac34ed0 eeb3a2a6 b3c75583 32669e73
+0 01 400005d8 001 00000011 85f11410 85f11410 bda99ba5 bda99ba5
+0 10 40000758 001 00000001 b3378a57 b3378a57
+0 01 40000538 001 00001101 82e61b8c 82e61b8c d3cca64d d3cca64d f99ab4f8 f99ab4f8 ab7e75c1 ab7e75c1 5321f107 5321f107 903a8503 903a8503 cbb5f3d6 cbb5f3d6
+1 01 400003cc 000 00001101 3ce6f2b3 0000 3ce6f2b3 0000 3ce6f2b3 0100 3ce6f2b3 0000 60cad671 0001 60cad671 0000 60cad671 0100 60cad671 1000 1c01ced9 0001 1c01ced9 0010 1c01ced9 0000 1c01ced9 1000 0000e97a 0000 0000e97a 0010 000003c0 0020 ae556fc7 29d74128 088993a4 fbcb99ba 75d9c3fd 0f551a26 b7513410 8747aa26
+0 01 40000398 000 00001100 4021fd9f 4021fd9f 4021fd9f 4021fd9f 3cf9783c 3cf9783c 3cf9783c 3cf9783c 6d81d81c 6d81d81c 6d81d81c 6d81d81c 815823e3
+1 01 40000675 000 00001101 cdb01000 0010 cdb01000 0100 cdb01000 0000 f0c127d4 0000 f0c127d4 0010 f0c127d4 0100 f0c127d4 1000 ac97d6a6 0000 ac97d6a6 0010 ac97d6a6 0100 ac97d6a6 1000 002688f2 0001 002688f2 0010 002688f2 0100 00000670 0020 9479109b 1af96e39 dd32b820 8bb1d862 7aaa648e 51d94551 26873a90 f0858fdd
+0 01 40000018 010 00001101 8357e7fc a03c351a fa6742bd 5de6e225 2678bf69 e3d318bd 7886a213 715a2f04 b490e1a1 000da072 75d2fd1e 1e5b0e8a 54fd0648 bb1523fb
+1 01 40000728 001 00001000 5d7528bb 0001 5d7528bb 1000 f0565583 0011 f0565583 0100 3a8ea928 0010 3a8ea928 0100 53842def 0011 53842def 0100 00000187 0010 00000720 0020 db7d6f38 72fc87e9 a43e93b6 3db8d1bc 03ca3b01 c77a1c85 696265bb c8b39dbc
+0 01 40000332 001 00001000 a4670011 d85b1ef0 d85b1ef0 9fb0ac35 9fb0ac35 7ac34ed0 7ac34ed0 78eaf907 78eaf907
+1 01 4000034c 010 00000000 d1379379 1100 00000340 0010 0f88c5a2 d603ed39 594a1209 0924b7c9
+1 01 4000062c 010 00000101 29d4fc59 1010 c061f50e 1011 c603369c 1101 9eab0d0d 1100 85c1ed1b 1110 c897461f 1101 00000620 0030 e5ce49e0 1e35709e 122746b9 a8a158be 08b69e43 a4a7e880 2e52afab 51b0d04f 431b4761 e97aac8c 7bcdcdf7 650ee639
+0 01 400001ba 000 00001010 a14382df a14382df ec0946a3 ec0946a3 ec0946a3 ec0946a3 0dc87885 0dc87885 0dc87885 0dc87885 70589e82
+0 01 40000077 000 00000001 018b095a 44edb3d5
+0 01 400006c2 001 00000100 eff9a882 894a345b 894a345b 5e5f5dcb 5e5f5dcb
+1 01 400003f4 001 00001111 156598a8 0011 156598a8 1000 e3da5c4b 0000 e3da5c4b 1000 cf901728 0011 cf901728 1100 95d60db9 0011 95d60db9 0000 1bf1a959 0011 1bf1a959 0100 f8fbe3b7 0011 f8fbe3b7 1100 c6189370 0011 c6189370 1100 5b78dd01 0011 5b78dd01 0100 000003f0 0030 93dd806f 22c163d9 eb38c80a 0fdf3b7b 42813577 c3831ed7 7070ce94 5e7be466 bbb5e645 f80b1722 e92c0ff3 9ff84564
+0 10 400006ee 000 00000011 4d7dbff3 4d7dbff3 4d7dbff3 4d7dbff3
+1 01 400001bf 000 00001001 75000000 1000 69606884 0001 69606884 0010 69606884 0100 69606884 1000 7d6f050e 0001 7d6f050e 0010 7d6f050e 0100 7d6f050e 0000 00000033 0000 000001b0 0020 db2c53e2 af5765f6 817ec847 98aa77b7 d0c74f00 aaf4ac28 01b1a41c fbe4e58b
+0 01 4000077c 010 00000011 8da34dc0 04b332b9 2a148152 9bb0c8f3
+1 01 4000043c 000 00000111 a4992d1d 0001 a4992d1d 0010 a4992d1d 0000 a4992d1d 0000 f792a383 0001 f792a383 0010 f792a383 0000 f792a383 1000 00000430 0020 72156b85 89c3d3e1 a6c3f0aa ab7862dc 48e98645 44ac8e0c b1a52c2e 3d021084
+1 01 40000130 010 00001110 86565393 1111 2f326935 1111 95fe0b9c 1111 d5242446 1110 6bae7b25 1011 f5f93ac5 0111 b255a586 1101 108ff23a 1111 062ffa0e 0011 d6f2e345 1111 b3e791c7 1011 2e545fc1 1111 04973b14 1010 3dfacb10 1110 2f0c604f 1110 00000130 0040 1c6ddf94 65689a69 bbf90439 0121ca2d 5ef4cf4b b2ed600e 384a5cbd 6a440769 7b971dd1 290409e4 6c034e5f 7b0041aa 541c04f3 1bb753d9 652026bb 03cb6cbd
+0 01 40000266 000 00001001 2c13ca37 2c13ca37 6eddff84 6eddff84 6eddff84 6eddff84 43b9782d 43b9782d 43b9782d 43b9782d
+0 01 4000057c 010 00001001 1a8ffa8f b994b3eb c81d0caf 7a4a8102 5f1cf26e b110530f 9a6fc3bb d392f10d 474f8fe5 7545a2c9
+1 01 400005b0 010 00001111 639c4ee8 1111 455d1563 1111 8758b6c4 0110 4d7e9c3b 1011 c8902537 0110 f91f81f2 1110 0cb3d484 0111 f7e0533c 1110 22f2739e 1110 dac54efd 1111 9d33c8d8 1111 4ec8d931 1111 c37a64ec 0011 8a1effb5 0100 c7f8c878 1110 3d005e11 1011 000005b0 0040 ab262b63 2ae52377 f97159f7 0343735a ccf9c183 3861cf62 152b57b5 9766daac 3f2f8b8f d19630c7 58135360 12fff0a8 58e92628 1cd3dbd1 85fff9b7 2ee9b3dc
+1 01 400004d6 001 00001000 eeca0000 0100 8dce080b 0011 8dce080b 1100 5d645553 0011 5d645553 0100 921bfb66 0011 921bfb66 1000 16adf6a1 0010 16adf6a1 0100 000004d0 0020 521623b7 26d8603b 154a4c1e 0ceb8f09 beb433ee 1d922f0e 2070bd70 854f1781
+0 01 400000e5 000 00001100 ae3c2517 ae3c2517 ae3c2517 d2dd8c31 d2dd8c31 d2dd8c31 d2dd8c31 b1086cf5 b1086cf5 b1086cf5 b1086cf5 2b59f74d 2b59f74d
+1 01 4000035c 010 00000000 56979b03 1011 00000350 0010 15540acd 36cf7784 97d111f3 382d64ea
+1 01 400000a6 000 00000000 00490000 0000 000000a0 0010 cdf4297a ace0a2b2 3784f546 2fdc5ec8
+1 01 40000618 010 00001101 91b3e540 1110 d320fd96 1111 36b2dcff 1011 8d259af2 1101 13f4a818 0101 01bfa52a 1100 de0aa194 1101 4b1896af 1101 4bf48a18 1111 5fce6315 1101 47336dbd 1001 8654e559 1100 0dc9695f 1011 1c309efa 1001 00000610 0040 1d86aaa8 1b58a818 820c0634 81479da1 01c28fdd b302b2c7 4857eb25 d7546e1c 9a41286f 1128bdd3 ce15c6dc 7af92890 0bea8006 e5f98aeb 550bf224 8eaad2ae
+1 01 40000344 010 00000111 7adbdf34 1111 622cafaa 0101 9f8b3590 1011 d17da76d 1111 24179bf8 1101 78b56e5b 1111 c9087d9c 1101 dd0c8deb 1111 00000340 0030 7a0d8728 35392100 42fd6409 c7310ea7 c66d698a 8ebd8cde dd67d3d9 c6a69107 c2aea787 47e8ef60 5d06fbe5 a70770d2
+0 10 40000140 000 00001111 6bf87b25 6bf87b25 6bf87b25 6bf87b25 28f93ac5 28f93ac5 28f93ac5 28f93ac5 b2552d86 b2552d86 b2552d86 b2552d86 108ff23a 108ff23a 108ff23a 108ff23a
+0 10 40000622 001 00001111 3698dcff 8d2525f2 8d2525f2 cdf49c18 cdf49c18 01bffc6a 01bffc6a de0af594 de0af594 4b1845af 4b1845af 4bf48a18 4bf48a18 5fceed15 5fceed15 3698dcff
+1 01 40000726 001 00001110 44aa0000 0000 26f87f3b 0010 26f87f3b 1100 87b23542 0011 87b23542 1000 243a5ebd 0010 243a5ebd 1100 3beda952 0011 3beda952 1000 8019b3c5 0011 8019b3c5 0100 3b66d619 0001 3b66d619 0100 6fb733c9 0011 6fb733c9 1100 00000720 0030 db7d6f38 72fc87e9 65d373a8 7ee6c842 037cf23a 676eca94 efaccffe 90f0ba81 166ab5aa 59e0868a 03fd75c1 1103e7ab
+1 01 400005a6 000 00001111 fda30000 0100 fda30000 1000 a26ac321 0000 a26ac321 0010 a26ac321 0000 a26ac321 1000 22b7f439 0001 22b7f439 0010 22b7f439 0100 22b7f439 1000 7409e1de 0001 7409e1de 0010 7409e1de 0100 7409e1de 1000 000005d6 0001 000005d6 0010 000005a0 0020 2700fefc 06252744 19f9680c 62d4ded0 83154dca 7f648972 0684dbfe 23c99beb
+0 10 40000228 010 00000011 f84dcc6d 51152636 46524d89 16fbe122
+0 01 40000256 001 00000100 b787e7ac 4844abc5 4844abc5 677b339e 677b339e
+0 10 4000076d 000 00000001 b81c121f b81c121f
+1 01 400002d8 010 00000011 a5047a2e 0111 1ba84ba3 1111 693e1b96 1111 d126a00b 1111 000002d0 0020 9a1c8d87 d80baedb e12f1f08 13510e59 fa333966 1cbf6068 915de53a c2e31217
+0 10 400004be 001 00000011 bed0a009 faf320ac faf320ac bed0a009
+0 01 40000114 010 00000110 a5950f7f 7217ce6d de131201 3504674a 93919d0c 865e99bf 2b3636e8
+1 01 400003ee 001 00001111 0bdf0000 1000 52ae098a 0011 52ae098a 0100 b622c493 0010 b622c493 0100 4b0deecc 0011 4b0deecc 0000 cde3f4f2 0010 cde3f4f2 0100 6086c1b4 0001 6086c1b4 1000 9f3e24bb 0010 9f3e24bb 1000 04126007 0011 04126007 0100 0000f98d 0011 000003e0 0030 281513b7 da01cb90 77fd218c 64b0675e 24d6de43 8e8c4ea4 4257e2d0 7a32c3e3 92cbd69b 5b478856 3ea1725c d255f0bc
+1 01 4000074c 000 00001011 91e45732 0001 91e45732 0010 91e45732 0000 91e45732 1000 c3eb65b9 0001 c3eb65b9 0010 c3eb65b9 0000 c3eb65b9 0000 48f8e13e 0001 48f8e13e 0010 48f8e13e 0100 48f8e13e 0000 00000740 0020 166ab5aa 59e0868a a294cb92 c32ad71a b4afe8f7 d1f43ed9 93453255 2fb63546
+0 10 400007f5 000 00000011 7dca56b1 7dca56b1 7dca56b1 7dca56b1
+0 01 400003c6 001 00001010 cdb2dfb2 db4fe0d4 db4fe0d4 f3e6e161 f3e6e161 60ca0471 60ca0471 1cf1ced9 1cf1ced9 cc47e992 cc47e992
+1 01 4000066f 000 00000000 39000000 1000 00000660 0010 b864494c 92ff9f8a cbb1f415 3cf3899f
+0 10 40000234 010 00001111 73467b4a 966e1a37 5cb63fcd 1ba004a4 d6104775 0bdbe0ab b9e84d27 1af99c13 608f0f2c e521345b 543b036d 46524d89 16fbe122 f84dcc6d 51152636 714f8b0b
+0 10 40000530 010 00001111 365931d2 1ad3ea11 82e61b8c d3cca64d 1d52439a f2c11f2a b3dfc4fe b50c1ebb 13c5fae9 8236040c 76ac475a f178b422 0ccd0ed4 ace61654 afcb0193 769de20c
+1 01 4000058b 000 00000111 c4000000 1000 ceb7b09e 0001 ceb7b09e 0010 ceb7b09e 0100 ceb7b09e 1000 0067d358 0001 0067d358 0010 0067d358 0100 00000580 0020 29b7df5a ffc15203 4ee3563c 337ef463 ed313b97 18d5f904 57208b81 944575c7
+0 01 400002a4 010 00000010 e2e496ef 02b74372 cd953e46
+1 01 400001f8 000 00000110 64f68d6e 0001 64f68d6e 0010 64f68d6e 0000 64f68d6e 1000 00b57480 0001 00b57480 0000 00b57480 0100 000001f0 0010 4b5e1cc5 0fdf4dab 4021c3f6 e80db958
+0 10 400004c0 010 00000011 813a829c 074f7f46 fa546b61 c879ed71
+0 10 40000688 010 00001111 ebf84c77 5e9742d6 789a2da1 ee8f81ac c24d5c2e ec680743 d28ea71b 1be04f93 51c2746c 6cbf70a4 e1fee846 e3cd7e8e 311f7532 06ea794b 2d2688f2 00eb5dfa
+0 01 4000038c 001 00001011 8c7e23a8 8c7e23a8 a9e9c75f a9e9c75f 4cc9b5ff 4cc9b5ff 4021fd9f 4021fd9f 3cf9783c 3cf9783c 6d81d81c 6d81d81c
+0 01 40000618 010 00000111 91b3e584 d320fd96 3698dcff 8d2525f2 cdf49c18 01bffc6a de0af594 4b1845af
+1 01 40000798 010 00000001 cdb981f2 1111 834ef2ab 1111 00000790 0010 82aa6b6b 92921282 8c39b904 b67c8f4f
+0 01 40000698 010 00000000 c24d5c2e
+0 10 400005bc 010 00000011 4d8a9c3b 7409e1de 455d05d6 a058b6a9
+1 01 400001e0 001 00001110 041b3cd9 0001 041b3cd9 0100 73011494 0011 73011494 1100 52381a11 0000 52381a11 1100 e5a25c44 0011 e5a25c44 1100 cce6a495 0010 cce6a495 1100 1770ffe3 0011 1770ffe3 1100 0790a34c 0010 0790a34c 0100 0000bf1b 0011 000001e0 0020 34fa0789 a78d4536 ada3ee05 e457a308 53063a46 5065eedb a399f2c8 757120d5
+1 01 4000040a 001 00000100 f52a0000 1100 745c6dfc 0001 745c6dfc 1000 cb21abdc 0011 cb21abdc 1100 00000400 0020 92cbd69b 5b478856 32ce2639 8c2060a1 9a3b23c7 bf290248 f16ce667 6200b448
+1 01 40000124 001 00001101 f2a4a13d 0001 f2a4a13d 1100 da734432 0011 da734432 1000 694392d3 0000 694392d3 1100 5f8bc424 0011 5f8bc424 1100 74b2f358 0001 74b2f358 0000 b6b69138 0011 b6b69138 0100 31ae6a98 0000 31ae6a98 1100 00000120 0020 f7bdcad3 6a21ea93 815e8357 6600da5c 35d8115f 6dde8acc 04ed1beb 7090b3d6
+1 01 4000057b 000 00000101 3e000000 1000 380971a9 0001 380971a9 0010 380971a9 0000 380971a9 1000 000000cb 0000 00000570 0020 248105bd c6d83a53 4ac2d352 ab94b465 29b7df5a ffc15203 4ee3563c 337ef463
+0 10 4000005c 000 00000011 060e0393 060e0393 060e0393 060e0393
+1 01 4000031b 000 00001000 37000000 0000 b16b810e 0001 b16b810e 0000 b16b810e 0100 b16b810e 0000 f74c81b9 0001 f74c81b9 0000 f74c81b9 0100 f74c81b9 1000 00000310 0020 d68d03da b44ada2e 40ae522f 699c1a70 573bbdc4 156f02fd 0916158c ae6d77da
+1 01 40000787 000 00000001 5c000000 1000 000000ae 0001 00000780 0010 2f4477ac 33fbdceb d0711591 9d860762
+1 01 400000ec 010 00001000 e664dfd0 1111 f16ec1fe 1111 e686521a 1101 768fdd96 0111 24316185 1101 769958f6 0011 c7139bcb 1011 7db29068 1101 d2381bd4 0001 000000e0 0030 15807c8f 51fca0be 1012a5bc c09ee769 e685e7eb dd3705a0 9a717b2f 874c77ca 36a28927 566e0484 1e0140f9 1e522725
+0 01 40000004 010 00000001 55749c48 ae776655
+0 01 400000d0 001 00000100 587262bc 587262bc f70b4e0f f70b4e0f 0e01ac78
+0 10 40000618 010 00000011 91b3e584 d320fd96 3a5975fe 076d889c
+1 01 40000358 001 00000110 998c974c 0011 998c974c 1100 63901b28 0001 63901b28 1000 6578de3d 0011 6578de3d 0000 0000ec17 0010 00000350 0020 c66d698a 8ebd8cde 02f3bec2 1809670e 1b661530 5a24ff13 bd53e532 74f57b1a
+1 01 400005de 000 00000011 f8e60000 0100 f8e60000 1000 00006d65 0001 00006d65 0010 000005d0 0020 3f2f8b8f d19630c7 4588dc09 a5242a47 48ef2cfb 1c2cbc3d f9f16204 8694bff2
+0 10 40000732 001 00000011 243a5e94 3b84a952 3b84a952 243a5e94
+1 01 400006a8 000 00001011 7dca328f 0001 7dca328f 0000 7dca328f 0100 7dca328f 0000 206c0bd6 0001 206c0bd6 0010 206c0bd6 0100 206c0bd6 1000 7cf08b15 0000 7cf08b15 0010 7cf08b15 0100 7cf08b15 1000 000006a0 0020 702a6598 9287d4a8 6ab4f65c 03ac3ad4 a68ed4c2 13187833 23300d99 7a89775b
+0 01 4000026e 000 00000100 43b9782d 43b9782d 10689623 10689623 10689623
+0 01 400000d6 001 00000010 f70b4e0f 0e01ac78 0e01ac78
+1 01 40000610 001 00000111 af09757f 0010 af09757f 0000 15254b0f 0011 15254b0f 1100 59d6994b 0011 59d6994b 1000 d08319c8 0011 d08319c8 0100 00000610 0010 c02ad7cd d43cf410 8bc4c0bb 7556fe0a
+0 10 400005e6 001 00001111 0a1e60fb c7f8c829 c7f8c829 3d3b5e11 3d3b5e11 128932ea 128932ea a21201c3 a21201c3 34ccd6f0 34ccd6f0 c758f125 c758f125 98846d65 98846d65 0a1e60fb
+1 01 400007b0 000 00000000 00000077 0001 000007b0 0010 270204d2 5788384c 5751347b 73ffc1b6
+1 01 40000248 000 00001000 4da1e462 0001 4da1e462 0000 4da1e462 0100 4da1e462 1000 887024e6 0000 887024e6 0000 887024e6 0100 887024e6 1000 00000087 0001 00000240 0020 9a163ad3 090df2be 10104108 60a39374 663308b4 086633bf 8f95e736 b9618c4f
+1 01 400003ba 001 00001011 95210000 1100 a893d8f2 0011 a893d8f2 1000 85a6039c 0011 85a6039c 1000 45053ed1 0001 45053ed1 1100 ccc8800c 0011 ccc8800c 1000 c1cf3a10 0011 c1cf3a10 1100 0000d240 0011 000003b0 0030 72740257 286abfbb c50fc6c0 1b023d16 15e81484 06091f15 75342019 2a4c19a9 0dab9718 a3877fea 53cc474c a3d9f29a
+0 10 40000218 001 00000111 e521345b e521345b 543b036d 543b036d 1af99c13 1af99c13 608f0f2c 608f0f2c
+1 01 4000050c 010 00000101 f68b2638 1101 f7649cef 1111 a37d8217 1111 8064e62c 1011 586fa772 1111 59a249e0 0100 00000500 0030 cfca95c3 487885a8 3916eeac c19f6c8f 1e14a12d 6d3e2731 3cf8191a 5487e545 74f567cc 6bb62ad6 abd21d3b 847842e7
+0 01 400002c4 001 00001010 90712e00 90712e00 c78daf95 c78daf95 794e1990 794e1990 fcaf27eb fcaf27eb eaff1060 eaff1060 6c047a2e
+1 01 40000797 000 00001011 28000000 1000 f5a0dbd2 0001 f5a0dbd2 0010 f5a0dbd2 0100 f5a0dbd2 1000 777fe5d1 0001 777fe5d1 0010 777fe5d1 0100 777fe5d1 1000 0039b065 0001 0039b065 0010 0039b065 0100 00000790 0020 88aa8ffc 5ead60ca f3f39b51 e9498690 70b3d004 9f394d9e 4a72643e 5dbe6c05
+0 01 4000065a 000 00000001 07433ec6 07433ec6
+0 01 4000042a 000 00000011 12c1154b 12c1154b 1a9285ac 1a9285ac
+1 01 400002e8 001 00001110 c3b1c683 0000 c3b1c683 0100 891df024 0011 891df024 0100 7d3fbc7e 0011 7d3fbc7e 1100 7dc92e12 0001 7dc92e12 1100 26b9283e 0001 26b9283e 0100 1e0d93b2 0010 1e0d93b2 1100 44af41ab 0001 44af41ab 1000 000062fd 0011 000002e0 0030 fa333966 1cbf6068 a87ab824 b63748bf dfc51eb9 3ed7bfb4 68f489fc d5097b1c 2a9578fd 1a00d6cd e45bc3b5 a3e0f179
+0 10 400006a0 010 00000001 d28ea71b 1be04f93
+1 01 4000009e 001 00001110 55aa0000 1100 5118bf98 0011 5118bf98 1100 ed609a57 0010 ed609a57 1100 ee551ef4 0010 ee551ef4 0100 8b9176d9 0001 8b9176d9 1100 5eca6b9a 0000 5eca6b9a 1100 b9581a60 0001 b9581a60 1100 48961a66 0011 48961a66 1000 00000090 0030 57f54ca7 b0254b0d b9b24aad 58cb9f49 cf69a911 8959d6e2 8a58ffaf b62923dc edd04071 6430d240 c1667c3c 13f2d7cf
+0 10 40000528 010 00001111 afcb0193 769de20c 365931d2 1ad3ea11 82e61b8c d3cca64d 1d52439a f2c11f2a b3dfc4fe f68b1e38 f7649cef a37d8217 80ace62c 586fa772 0ca20ed4 ace61654
+1 01 400004ac 010 00000100 87f27241 1110 4eb6f5b5 1011 222389ab 1111 fcaaac37 1111 331f9079 0111 000004a0 0020 86e205d7 48767be6 e5efd181 45111a88 e31091e7 741be3c2 1af4ecca 0d8f6712
+0 10 40000390 010 00000011 a9e9c75f 4cc9b5ff 4021fd9f 3cf9783c
+1 01 40000722 001 00001110 59ef0000 0100 0b5d1052 0011 0b5d1052 1100 4b9b6cd5 0001 4b9b6cd5 1100 ec3a897b 0001 ec3a897b 0100 ed1c8356 0001 ed1c8356 1100 e8b3e45e 0011 e8b3e45e 1100 dfbf5b34 0011 dfbf5b34 1000 57450a3d 0011 57450a3d 1100 00000720 0020 a1542993 62393ab6 d03a73c9 206b7a84 d2e48c4d 049cd110 8cf0d19f 97287c8e
+1 01 40000694 001 00000001 c86d7b7c 0011 c86d7b7c 1100 00000690 0010 392dbfbe 9d0d44fd 5369fde3 448931ec
+1 01 40000002 001 00001000 7b4e0000 0100 1c7ac482 0011 1c7ac482 1100 7c9e9c4f 0011 7c9e9c4f 1100 15199b95 0001 15199b95 1100 31f5cb84 0001 31f5cb84 1000 00000000 0020 310a298f a0a1f5bc eb0e5698 f6e3715c cb2cf36b 0ea862d4 52516dcd 4d13b179
+1 01 40000082 000 00000000 00650000 0100 00000080 0010 f5b04be7 dd89385a 7eb1cf4e 111108e8
+1 01 400001b0 000 00001111 3e70a8cb 0001 3e70a8cb 0000 3e70a8cb 0000 3e70a8cb 1000 bd432d9b 0001 bd432d9b 0010 bd432d9b 0000 bd432d9b 1000 ac9ff4f3 0000 ac9ff4f3 0010 ac9ff4f3 0100 ac9ff4f3 0000 0c817907 0001 0c817907 0000 0c817907 0000 0c817907 0000 000001b0 0010 524123b0 b7432cda 397d3925 e1c4a15b
+0 01 400000d4 010 00000010 f70b4e0f 0e01ac78 5269e331
+1 01 40000706 000 00000110 9ab50000 0100 9ab50000 0000 ff8fa8a6 0001 ff8fa8a6 0010 ff8fa8a6 0100 ff8fa8a6 1000 000000eb 0001 00000700 0010 6fa669fb e3d52d61 d9a008cb 4bb6781f
+1 01 400003be 000 00000010 e2e90000 0100 e2e90000 1000 000000cd 0001 000003b0 0020 72740257 286abfbb 496436c6 8e78c56d c6f73eed 4d0257e9 1c7b4d07 d448f8b2
+1 01 400006d8 001 00001000 663c7088 0011 663c7088 1100 6586bada 0011 6586bada 1000 81987ef8 0010 81987ef8 1100 24867cc2 0010 24867cc2 1000 00009385 0001 000006d0 0020 184fafee 6682c11a 3a6ca6f0 04fee80b 9b153c0c ecfb8cd1 4d694438 0e661ac2
+0 10 40000390 001 00000111 a9e9c75f a9e9c75f 4cc9b5ff 4cc9b5ff 4021fd9f 4021fd9f 3cf9783c 3cf9783c
+0 01 40000617 000 00000000 15254b0f
+1 01 4000034d 000 00000111 749f5300 0010 749f5300 0100 749f5300 1000 63a50d9d 0000 63a50d9d 0010 63a50d9d 0100 63a50d9d 1000 000000bf 0001 00000340 0020 7a0d8728 35392100 3cd88c76 fc29d28c ac9a0abd 1f8ef62d 7f66e0da b86639de
+0 10 400000a8 001 00000001 25551e23 25551e23
+0 10 40000398 001 00000111 4021fd9f 4021fd9f 3cf9783c 3cf9783c a9e9c75f a9e9c75f 4cc9b5ff 4cc9b5ff
+1 01 400001e9 000 00000010 77f1f000 0000 77f1f000 0100 77f1f000 1000 000001e0 0010 34fa0789 a78d4536 63427099 2408b2c3
+1 01 40000428 010 00001001 870003f0 1011 8b3c606c 1111 b5f7ec22 1011 3a342732 1011 df6478bb 0111 54773e4e 1101 338de9ef 1111 72379b99 1111 6748e859 1010 2770ec21 0110 00000420 0030 2487d4db 698fdee9 2c0133d4 d4630ea3 6c6cda69 0d819b4c fff76c6c 926c0d73 dface4d6 03a83e85 8d593093 9fa1db09
+1 01 40000458 010 00000001 72eeacb0 0001 e5c06334 0001 00000450 0010 aa1c6d4c e95cf202 f56e77f0 0399420a
+0 10 400002d8 010 00001111 6c047a2e 1ba84ba3 693e1b96 d126a00b 22b14156 6e1df024 7d3fbc7e 7dc92b12 afb9173e 1e0d93f3 2b9f175c 90712e00 c78daf95 794e1990 fcaf27eb eaff1060
+1 01 40000236 001 00001101 27db0000 1100 37203f89 0011 37203f89 1000 9776d4c4 0010 9776d4c4 1100 9019e21d 0011 9019e21d 1000 68345eef 0011 68345eef 1100 087281d9 0011 087281d9 0100 567d4d42 0011 567d4d42 1100 00000fd3 0011 00000230 0030 e5448dee a38389ee c3650226 7c33a255 b7c4e26c af0635ea e1d81286 8aec04fd de76753c 42d2ffd3 7f68d10a aec5b701
+1 01 40000570 010 00001101 f6df383a 1110 91b48cdc 0011 5ca22f80 1101 68d0b35a 1001 2252af2d 1011 8df5ff9f 1111 2cd3cec3 0101 fb3c36dc 1111 d86ea8e5 1011 952df80d 0101 c9fa870e 0010 aee06064 1110 b27d59d6 0011 21b82dac 0111 00000570 0040 fdf21136 41978b37 5317f648 4f23420d b6b7e82d 4d004d61 1840af6d e9a1c38c ac108028 0dab10c4 94d41c08 4f88e477 f8c49422 f46f46b8 329ae6bc fa0d0d6b
+0 10 4000047c 000 00000111 d97dc953 d97dc953 d97dc953 d97dc953 bf2fe6b0 bf2fe6b0 bf2fe6b0 bf2fe6b0
+0 01 400002a6 000 00001111 e2e496ef e2e496ef 02b74372 02b74372 02b74372 02b74372 cd953e46 cd953e46 cd953e46 cd953e46 99211329 99211329 99211329 99211329 e26f4bcf e26f4bcf
+1 01 400006c8 001 00001101 0edabbfa 0011 0edabbfa 1100 d6a205e0 0010 d6a205e0 1100 f29a9c98 0010 f29a9c98 0100 a7238f8e 0001 a7238f8e 1100 943e0ed2 0001 943e0ed2 1100 ba8372fb 0010 ba8372fb 1000 26fd0d2c 0001 26fd0d2c 1100 000006c0 0030 30a5a48a 413a67be c4413dc6 4a631a1a a3644225 296ee06a 54a2440d c9e31a54 d4b1566d f778becd 865b1365 54fb39ae
+0 10 400000bc 010 00000001 734378ef 48b01a66
+0 01 40000410 010 00000100 cb21abdc 5feb977b 408bed48 f22cd939 c71dc2d2
+0 01 4000072a 001 00001011 4b9b7fd5 873a357b 873a357b ed1c5e56 ed1c5e56 e8b3e45e e8b3e45e df195b34 df195b34 57450a3d 57450a3d 6fb733c9
+1 01 40000674 001 00000100 3d9ac85f 0001 3d9ac85f 1100 227882d5 0001 227882d5 1000 00005f3b 0011 00000670 0010 8e3a51ca d0995675 557b32c8 891622e1
+0 01 400005e4 001 00001111 0a1e60fb 0a1e60fb c7f8c829 c7f8c829 3d3b5e11 3d3b5e11 128932ea 128932ea a21201c3 a21201c3 34ccd6f0 34ccd6f0 c758f125 c758f125 be184678 be184678
+1 01 4000015c 010 00000101 b6dd2a14 1111 83454864 0010 31235a0e 1111 812362ff 1111 52520104 1011 86fd2dbd 0101 00000150 0030 7b971dd1 290409e4 118b428e 1b256c37 6e6af6d5 1895da74 abd910df 2df056e1 fca5789e dea6fb36 096a105a 74ce35d9
+1 01 400002f0 000 00001101 c06750ba 0001 c06750ba 0010 c06750ba 0100 c06750ba 1000 a36137ac 0001 a36137ac 0000 a36137ac 0100 a36137ac 1000 47a3f1a9 0000 47a3f1a9 0010 47a3f1a9 0000 47a3f1a9 1000 0000e3b7 0000 0000e3b7 0010 000002f0 0010 c9f9b54e f88a6a1b f9f68914 4b3d9d56
+0 01 40000420 001 00001100 c71dc2d2 c71dc2d2 356ddc07 356ddc07 87c103f0 87c103f0 8b3c606c 8b3c606c b5ffec22 b5ffec22 3aaf2732 3aaf2732 b56478bb
+1 01 4000001e 001 00001110 4a510000 1100 c9b700d6 0000 c9b700d6 0100 a3a91edd 0000 a3a91edd 1100 aaad8a19 0011 aaad8a19 1100 b69b60e7 0011 b69b60e7 1000 73f8d94f 0000 73f8d94f 1100 7031a725 0001 7031a725 1100 cea3513c 0011 cea3513c 1100 00000010 0030 cb2cf36b 0ea862d4 b14c4176 aecabf0e c3eba9ac 60530520 c299850d a77de721 144cd7e4 9695c08e 49406571 ab51713d
+0 10 40000434 010 00001111 3aaf2732 b56478bb 54772d4e 606d0db4 9ff12459 f52a6007 7418f9fc cb21abdc 5feb977b 408bed48 f22cd939 c71dc2d2 356ddc07 87c103f0 8b3c606c b5ffec22
+0 10 400007d8 001 00000001 2aa673fa 2aa673fa
+1 01 400004b0 010 00001101 c6408b14 1011 70ce1545 1111 723ab1fc 1101 1d755f8f 1100 162d5a13 0111 de8f1dd0 1011 e0fc0168 1111 7b330180 1101 d7057267 1001 9de5f7eb 0011 b6d9365c 1111 0da5e572 1111 fdbdf077 1101 aa7074ac 0111 000004b0 0040 3f7a5c08 e597e64e 24cbf453 958b37f2 042ab5c7 bc07baca bcbbd1de 60d55d56 d27c15ac ca6cab38 e76b8ae1 4e4ca984 626e1f9d ebe376af 1a06cf96 47286217
+0 01 400001fd 000 00000011 9fb5bf1b 9fb5bf1b 9fb5bf1b 1ba004a4
+0 10 40000098 010 00000011 5aa1e9a8 55aaccac 928c6520 62987100
+0 01 40000233 000 00001011 714f8b0b 27db7b4a 27db7b4a 27db7b4a 27db7b4a 376e3f89 376e3f89 376e3f89 376e3f89 9776d4cd 9776d4cd 9776d4cd
+0 01 40000574 010 00000011 16ce8cdc 5ca22480 688f715a 2294af2d
+1 01 400007b8 000 00000100 8f36c002 0001 8f36c002 0010 8f36c002 0100 8f36c002 1000 00000056 0000 000007b0 0010 270204d2 5788384c 3d3dbdd0 af01aa5e
+1 01 400004ee 001 00000111 40730000 1100 a20f8e94 0001 a20f8e94 0000 3877f1eb 0010 3877f1eb 0100 7cf75be0 0011 7cf75be0 0000 0000e7bb 0001 000004e0 0020 626e1f9d ebe376af 816baf36 9d2913ba b1688c87 75c70a2d 64d87058 d80d78bf
+1 01 40000490 001 00000010 ec6bd669 0010 ec6bd669 1100 0000800a 0001 00000490 0010 cf909bdd 728f2867 39a2816c 2649b3f0
+0 01 400004dc 010 00000111 0da5e572 fdbdfb77 3c7074ac 12ac6870 40734740 09b5e094 7a77f1da c9e25be0
+0 10 400006c0 010 00000111 eff9a882 894a345b 0edabbfa d6a20507 e19a9ceb a723398e 943e70d2 baea72da
+0 01 4000061c 010 00001111 d38319c8 3698dcff 8d2525f2 cdf49c18 01bffc6a de0af594 4b1845af 4bf48a18 5fceed15 4797a7bd 86546f63 0dbd695f 1ceb2afa b9443fd5 1e1b382f 07433ec6
+0 10 40000090 010 00000011 928c6520 62987100 5aa1e9a8 55aaccac
+0 10 400006cd 000 00001111 d6a20507 d6a20507 d6a20507 eff9a882 eff9a882 eff9a882 eff9a882 894a345b 894a345b 894a345b 894a345b 0edabbfa 0edabbfa 0edabbfa 0edabbfa d6a20507
+0 10 40000425 000 00000011 356ddc07 356ddc07 356ddc07 356ddc07
+1 01 4000013c 010 00000001 e29927af 1111 082d9f60 0111 00000130 0020 35d8115f 6dde8acc 0f700008 49728e28 5c62b5a4 ff61bfd1 15caa787 3a788958
+1 01 4000068e 001 00000011 4bfc0000 1100 4ef913b0 0011 4ef913b0 0100 000074d8 0011 00000680 0020 7aaa648e 51d94551 5019825a 1c46d240 25530db1 03ea8996 75507fea 067d37e4
+0 10 400002f8 010 00000001 47b9f13e 1e0de3f3
+1 01 4000077c 010 00000111 ba8c2955 1011 1f9a6fa3 1111 ce58612f 1110 8d7f47b6 1011 ebf4523f 1111 73796e5b 1101 63d37c1d 1111 dc1c209a 0011 00000770 0030 874a75dd 2a567b2f 8140b65e 3b89a68f b820c540 0fbec3b8 ab606a32 9d5cbaad b09f633f 6b4bc139 8e9e1a50 1cdbad74
+1 01 40000726 001 00000101 2e460000 0000 25cac38a 0001 25cac38a 1100 62793534 0011 62793534 0100 000028b0 0001 00000720 0020 a1542993 62393ab6 74147958 7a0672b0 6022abd9 e15aa3b7 20a23ecb 4568a4ee
+0 01 400003bd 000 00000110 e2e9d8f2 e2e9d8f2 e2e9d8f2 85d103cd 85d103cd 85d103cd 85d103cd
+0 10 40000587 000 00000111 8df5ff9f 2294af2d 2294af2d 2294af2d 2294af2d 8df5ff9f 8df5ff9f 8df5ff9f
+1 01 40000178 010 00000011 43d0a27d 0001 7b30cf22 1010 7abf7017 1011 c824cffc 1101 00000170 0020 fca5789e dea6fb36 b3641204 4d9ca546 da088c5f b3fe4e66 b2964511 70a6e1dc
+1 01 40000226 001 00000001 f6960000 1000 0000cb94 0011 00000220 0010 5d603bfa 1597a382 b4bd646f 2a52a064
+0 01 40000398 010 00000101 4021fd9f 3cf9783c 6d81d81c 815823e3 453819b6 99b1b48d
+0 01 40000414 010 00001000 5feb977b 408bed48 f22cd939 c71dc2d2 356ddc07 87c103f0 8b3c606c b5ffec22 3aaf2732
+1 01 4000053e 001 00001110 8e3a0000 0100 2a62b1c7 0010 2a62b1c7 1000 17d55e48 0011 17d55e48 1100 0751a1e4 0010 0751a1e4 0100 f4400092 0011 f4400092 1000 1730eb53 0001 1730eb53 0000 41db3102 0001 41db3102 0100 c2c38f22 0001 c2c38f22 1100 00000530 0030 aca780ed e487cb5e 55635a13 6afc37f1 e330c934 6f9e660b 72d479c7 cd059df1 808fb1d3 83a3ca33 58a5cea0 725e704c
+0 01 40000564 001 00000001 5c042bab 5c042bab
+1 01 40000214 010 00001000 70ca7b71 1111 bc484636 1111 3ccc5b16 1011 04170868 1111 87569522 1111 432f58b0 0111 fdbbc1eb 1111 dff9ad4e 1110 e20b6516 1010 00000210 0030 29196b39 ff2d2210 19b1bf58 fc1119e0 3580a132 554256ea 00ad43ff 4fc7dfd4 b59317eb 87542c27 70f1a096 19f6b224
+0 10 40000030 001 00000111 73f8a213 73f8a213 70312f25 70312f25 cea3513c cea3513c 000da072 000da072
+0 01 4000054c 000 00001100 f43a0092 f43a0092 f43a0092 f43a0092 cbb5f353 cbb5f353 cbb5f353 cbb5f353 16db7902 16db7902 16db7902 16db7902 c2c39f22
+0 01 4000069e 001 00000001 ec680743 d28ea71b
+1 01 4000072b 000 00001011 64000000 0000 ee0fc47a 0001 ee0fc47a 0010 ee0fc47a 0000 ee0fc47a 1000 707db2cd 0001 707db2cd 0010 707db2cd 0100 707db2cd 1000 00d9b80d 0001 00d9b80d 0010 00d9b80d 0100 00000720 0020 a1542993 62393ab6 81e17d7c 70cdc6cf fda0faf4 ce4ba5ba 3568dcc2 924e57d0
+0 01 40000356 001 00000101 241710bf 998c974c 998c974c 63089b28 63089b28 dd0cde3d
+1 01 400001a3 000 00001001 61000000 1000 ac1ce65f 0001 ac1ce65f 0000 ac1ce65f 0100 ac1ce65f 1000 02ef9d05 0001 02ef9d05 0010 02ef9d05 0000 02ef9d05 0000 00000028 0000 000001a0 0010 8e968078 fab2867a 6181103c 0ea3e113
+1 01 400005c2 000 00001101 1d2a0000 0100 1d2a0000 1000 a9086a4e 0001 a9086a4e 0010 a9086a4e 0100 a9086a4e 1000 e949fc5b 0001 e949fc5b 0000 e949fc5b 0100 e949fc5b 1000 c29b5693 0001 c29b5693 0000 c29b5693 0100 c29b5693 1000 000005c0 0010 b87b9d58 e325b4e8 f736b343 58de50a9
+0 01 400007cc 001 00000110 1916bdb5 1916bdb5 145a3e25 145a3e25 f14d7f76 f14d7f76 2aa673fa
+0 01 400004c4 010 00000100 de4f1dd0 e0fc0168 7b33ed80 d71fbf67 bfcaf7eb
+0 10 40000580 010 00001111 2294af2d 8df5ff9f c4d381c3 fb3c36dc d867a8e5 9a2dc30d d392870d aee060e5 754559d6 fdb82dac a23ac3b7 22b7f439 7409e1de 455d05d6 a058b6a9 4d8a9c3b
+1 01 40000000 010 00001011 9428f51a 1111 437c8a89 1110 9cbb6f09 1011 a29adeaf 1110 6ae17cc1 1111 18502fd5 1110 09c58034 0111 b6fac00c 0111 3ccb9091 1111 9504cb6e 1011 55c2ea45 0011 8d030422 1000 00000000 0030 c46cd650 e65534c9 ed51884d 633fcf3f 6afffdb8 33714c41 982f6b02 5496b822 5d336a1c 5c7c210b 44942a36 1a779072
+1 01 40000290 010 00001110 6e8dbdb3 1101 80be113e 1100 5e5c1839 0101 fc997f92 1011 bd387800 1101 70790b2f 0010 59d02e11 1010 971df41d 0100 1b57e537 1111 5b7208ed 1100 fc169ace 1011 2a70d2fd 1111 0fb34bc6 1011 e5b9fd60 1101 954b22c7 1011 00000290 0040 f938895f 8a17a110 c39f497c 41511a7d 78e10701 c588604f c56fc57b 67a0bbee 94de8174 7e816cbb 1b5fa037 b0fac3ca 64565d8e d3b9baa8 0eba841f 2f27c388
+0 10 4000051c 010 00001111 586fa772 0ca20ed4 ace61654 afcb0193 769de20c 365931d2 1ad3ea11 82e61b8c d33aa64d 1d52439a f2c11f2a b3dfc4fe f68b1e38 f7649cef a37d8217 80ace62c
+1 01 400001ac 001 00000010 cd5b9b87 0000 cd5b9b87 1100 00004a95 0011 000001a0 0020 8e968078 fab2867a 6676edf4 d038d08f 8d45548f c428fa55 7e51a476 0293c1af
+1 01 40000240 010 00001101 27240dfb 1111 0c0975a1 1010 614dab92 1111 00f2e91f 1111 8b51fb52 0111 f3c456c0 1101 b4a30894 0110 e6ac7b46 1011 25050c9d 1111 9aa36833 1111 11353549 1111 e42a3c9b 1100 5b0748da 1101 0b4e1dae 1010 00000240 0040 fd27875d 0ca5db90 735ab170 f7a7bb7b 66bf083f 2b3aff44 05a7d417 a48d7ac9 605a9880 c2611e4a 97e907b0 9e5ad0a3 1112d0ae b75d87e2 e5a5ad27 497b8fac
+1 01 40000754 010 00000010 526a60b1 1011 caaa4c23 0111 bed64acb 1101 00000750 0010 f23de0be df4cb462 6159b05a 46a5a0eb
+1 01 400000ab 000 00000001 ee000000 1000 0000003f 0001 000000a0 0010 cf69a911 8959d6e2 356909d5 06a8a7ed
+1 01 40000170 010 00001000 05e3efde 1001 6d0cb132 1111 8b6b95eb 1111 5bc6b338 1110 80f51260 1101 af31bdf7 1111 c2dfc4c5 0111 12adb022 1111 e2e65db0 1111 00000170 0030 96b0bac8 f30724fc bf5fb6c9 f7c13ebe 9643f1c1 115fa9aa 0ef4df26 555a02ec 9e1772cd 736cd77b 4b397711 14c96822
+0 01 40000457 000 00000110 84c8081f 583111b0 583111b0 583111b0 583111b0 2cd07e34 2cd07e34
+0 10 400001ed 000 00000011 e5a25c44 e5a25c44 e5a25c44 e5a25c44
+0 10 400000e8 010 00000001 d2dd8c31 e664dfd0
+1 01 400003b0 010 00000111 ee6fe578 1111 74f49b49 1111 413f9800 1101 82dbbd2d 1101 ea70fe34 0111 eb382d7e 1111 8d12c40a 1011 b0332f3c 1101 000003b0 0020 d53e9806 01579f1a 87b8b7e9 9014d641 cbf103b8 6d0018ea f5d323ca 3c31d043
+1 01 40000028 001 00001100 55d06e80 0001 55d06e80 1100 b6ea1280 0011 b6ea1280 1100 0ef8defe 0001 0ef8defe 1100 9d36d92f 0011 9d36d92f 0000 c16d24e5 0010 c16d24e5 1100 1cc648b7 0000 1cc648b7 1100 0000c797 0011 00000020 0030 5d336a1c 5c7c210b 1eadcbe3 395fb9a6 3e825f5f 2847ff88 7561d428 124c3273 60c9ca16 6cdac2ce 363d8513 3f511dfb
+1 01 40000108 001 00001100 a3495762 0010 a3495762 1100 c3d29130 0011 c3d29130 1100 aaf5347e 0001 aaf5347e 1100 3d53a9f1 0011 3d53a9f1 1100 761fb392 0011 761fb392 1100 964eaa37 0011 964eaa37 1100 0000ac1e 0010 00000100 0030 36a28927 566e0484 1753dcea d0789da7 4b98d470 fcdc975c d6644631 b025411a 06853031 d0a3c342 611f64d8 cf68755d
+1 01 4000038c 010 00000111 8cd55367 1111 d352ebc5 0111 78aee9b9 1111 9471718e 0111 061ff851 1110 c712e8fe 0001 d6e98a4c 1110 6773f65a 1100 00000380 0030 1c40fd57 b716c0e2 b5ad8415 b98dfdb9 8b2ff59b ed208f25 529dec15 d5d5da8d 4208f288 b405fd42 9c1c26ac c3feafe9
+1 01 40000006 000 00001010 fc8d0000 0100 fc8d0000 0000 9bf21223 0001 9bf21223 0010 9bf21223 0100 9bf21223 1000 8d9761d1 0001 8d9761d1 0010 8d9761d1 0100 8d9761d1 1000 000000a5 0001 00000000 0020 94de9b7a 27f86295 00a140f3 bee5ccb3 6885e834 846e79b1 437fa1f9 40a14228
+1 01 4000008c 001 00000100 ab7d9f92 0010 ab7d9f92 1100 0354e92b 0011 0354e92b 1100 0000c78e 0011 00000080 0020 f5b04be7 dd89385a 7d28a193 28e5e24b b8517a6b e35bb587 af23f85e 15ef2acf
+0 10 4000056e 001 00001111 d2b23f0a f6df38a2 f6df38a2 16ce8cdc 16ce8cdc 5ca22480 5ca22480 688f715a 688f715a 58319ee4 58319ee4 5c042bab 5c042bab b0cad742 b0cad742 d2b23f0a
+1 01 400000ee 001 00000001 691d0000 1100 0000c961 0011 000000e0 0020 15807c8f 51fca0be 7df17086 e909496a 93e572c4 0e9e0166 b6a27a40 68ae75ee
+0 10 40000238 010 00001111 376e3f89 9776d4cd 1ba004a4 d6104775 0bdbe0ab b9e84d27 1af99c13 70ca7b71 bc484636 3c3b5b16 04170868 87569522 f82f58b0 fdbbc1eb dff9ad0b e2db654a
+0 01 4000022e 001 00001011 fdbbc1eb dff9ad0b dff9ad0b e2db654a e2db654a 376e3f89 376e3f89 9776d4cd 9776d4cd 27240dfb 27240dfb 0c3475ef
+1 01 40000274 000 00001011 8592e750 0001 8592e750 0000 8592e750 0100 8592e750 1000 c64cdcba 0001 c64cdcba 0010 c64cdcba 0000 c64cdcba 0000 ed56b9a6 0001 ed56b9a6 0010 ed56b9a6 0000 ed56b9a6 1000 00000270 0010 aa5c4955 1d62b1df fe75a7a3 cddba7d4
+1 01 40000274 001 00001001 ff7ad616 0011 ff7ad616 1000 c212b156 0011 c212b156 1000 8fb7dcce 0001 8fb7dcce 0100 64f2f735 0011 64f2f735 0100 f5bfaa9c 0010 f5bfaa9c 1100 00000270 0020 033bb9a4 b2f26fc0 b3f99440 3483e9c7 cf5be131 0595be19 441350e2 ac8f9a38
+0 01 4000056b 000 00001011 b0cad742 d2b23f0a d2b23f0a d2b23f0a d2b23f0a f6df38a2 f6df38a2 f6df38a2 f6df38a2 16ce8cdc 16ce8cdc 16ce8cdc
+1 01 4000024a 000 00000001 8f370000 0100 8f370000 1000 00000240 0010 fd27875d 0ca5db90 06a1db41 b4a162d9
+1 01 40000110 010 00000010 b074d790 1111 214a5429 0111 997dd6cf 1101 00000110 0010 9e9db209 894314ac 5230a4c1 72a4541e
+1 01 40000114 000 00000001 0000b282 0001 0000b282 0010 00000110 0010 dc815f95 2dade12a bd6d2c11 2993428a
+1 01 400003ac 010 00001000 05b497fc 1110 1f250c61 0111 ee3fdd4f 1110 1815e696 1010 6b691058 1111 1ebe3b13 1111 700fe521 0101 9624c7ab 1101 0fafb3a2 1101 000003a0 0030 4208f288 b405fd42 51fea582 424da665 2102be9e b1efbc62 bb6cfc71 6b92497a 40240ff5 4cd7ee75 1d5a60cc 6524f44d
+0 10 40000562 001 00000111 58319ee4 5c042bab 5c042bab b0cad742 b0cad742 d2b23f0a d2b23f0a 58319ee4
+0 01 400001cc 001 00000010 1ad226d5 1ad226d5 f50695c7
+0 01 400007ba 001 00001010 8f36c002 d3b0970a d3b0970a 7dfa17b3 7dfa17b3 706f9cf2 706f9cf2 aecd6929 aecd6929 1916bdb5 1916bdb5
+0 10 40000270 010 00000111 5b0796da ff92d616 c226b156 edb7b9ce 25050c9d 9aa36833 11353549 e42a782d
+0 01 40000108 001 00001001 a3495768 a3495768 c3d29130 c3d29130 b074d790 b074d790 3d4ab282 3d4ab282 997db3cf 997db3cf
+1 01 40000364 001 00001111 21ee3664 0010 21ee3664 0000 6a437357 0011 6a437357 1000 173ba4ee 0000 173ba4ee 1100 c0cdaac4 0000 c0cdaac4 1100 47291361 0011 47291361 1100 68fdc9c8 0011 68fdc9c8 1100 b914ba70 0011 b914ba70 1000 096fd798 0001 096fd798 1100 00000360 0030 f19a7eee a3dd6a05 7ae645dd 1e4889a9 6a0cdd73 d8cdd040 7af1c86f 5a904f6c a617e52b 3fcf005f a80ac5d4 870038f1
+0 10 400007d2 000 00000011 145a3e25 145a3e25 145a3e25 145a3e25
+1 01 40000224 001 00000101 78b5bda3 0011 78b5bda3 0000 aa8fefbd 0011 aa8fefbd 1100 54e00148 0011 54e00148 0100 00000220 0010 fb616a33 8200a34b b9c0a0a3 5b81363a
+0 10 400000ee 001 00000001 691ddfd0 691ddfd0
+0 01 40000328 001 00000100 32669e73 32669e73 62645c10 62645c10 a4670011
+0 01 400005f8 000 00001001 34ccd6f0 34ccd6f0 34ccd6f0 34ccd6f0 c758f125 c758f125 c758f125 c758f125 be184678 be184678
+0 10 400004be 001 00000001 1d759079 1d759079
+1 01 400002ec 010 00000101 ea4b06a0 1101 91df0bb4 1111 2f461d11 1110 6c28d39f 1101 bf29490b 1111 c8eac897 1101 000002e0 0030 fa333966 1cbf6068 410ccc2f 4e61f6cc 268c5268 135aa1e9 e4e33d61 cabbafdd 45137087 feddd9c8 9127ee79 17b2233a
+0 10 4000077a 000 00001111 388e3d3f 388e3d3f baa32955 baa32955 baa32955 baa32955 4443d310 4443d310 4443d310 4443d310 72a78fc9 72a78fc9 72a78fc9 72a78fc9 388e3d3f 388e3d3f
+1 01 4000069a 001 00000011 ae130000 0100 7b2bbc2d 0001 7b2bbc2d 0100 00001bc7 0011 00000690 0020 25530db1 03ea8996 501cd19b 167038df 9a618c5f fc9d7347 92d5a1fe 1f058dbb
+0 01 40000000 010 00001100 9428f51a 438d8a82 9bf21223 8d9761d1 6ae17ca5 18502fb7 83c58034 4afac00c 3ccb9091 95a9cb6e 55d0ea80 b6ea1280 0ef8a2fe
+0 10 4000075b 000 00000011 b3aa4c23 b3aa4c23 b3aa4c23 b3aa4c23
+0 01 400006d4 010 00000101 a723398e 943e70d2 baea72da 26fd7e2c 24b07c3c a0093e85
+1 01 40000566 001 00001010 6ce90000 1100 d88a7008 0011 d88a7008 0100 63412818 0011 63412818 1000 f16e7f4f 0010 f16e7f4f 1100 a7935f93 0010 a7935f93 0100 e8e8f52c 0010 e8e8f52c 1100 00000560 0020 81df7031 a711d651 413fa66d 2489dccb bd505b71 7cbd4a90 0fb3dd18 5ea130a6
+0 10 400000b4 010 00000111 b958ce60 48b01a66 734378ef 5118bf98 ed609a96 ee551e23 8b91aa3f 5ecac2ae
+0 10 40000496 001 00000001 210dbc0a 210dbc0a
+1 01 4000001e 001 00000100 70670000 0100 c0fe20c9 0010 c0fe20c9 1000 a26ffbdc 0011 a26ffbdc 1100 00000010 0020 6885e834 846e79b1 000469e3 b31517dd 50c68b1c 9ade591d 2d5451c9 730dd361
+0 10 4000041c 000 00001111 f22cd939 f22cd939 f22cd939 f22cd939 cb21abdc cb21abdc cb21abdc cb21abdc 5feb977b 5feb977b 5feb977b 5feb977b 408bed48 408bed48 408bed48 408bed48
+0 01 400000fa 000 00000000 9c8fdd96
+1 01 40000040 000 00001111 fe30d88e 0001 fe30d88e 0010 fe30d88e 0100 fe30d88e 1000 8cb106b6 0001 8cb106b6 0010 8cb106b6 0100 8cb106b6 1000 7243c9bb 0001 7243c9bb 0010 7243c9bb 0000 7243c9bb 1000 24d7d2d7 0000 24d7d2d7 0010 24d7d2d7 0100 24d7d2d7 0000 00000040 0010 baf18a31 3f43f895 ceabdb3f 8bd0945a
+0 01 400000ea 001 00000101 d2dd8c31 691ddfd0 691ddfd0 f16ec961 f16ec961 e686b81a
+1 01 400002bc 010 00001011 918a24f6 1011 03291e7e 1111 e6b7ec97 1110 5f7dfffc 1110 676e9053 1100 b82eaaaa 1111 8121518a 1111 c32ce34b 1100 63752b4f 1011 10890284 1111 d8e5a145 0101 e65aee2e 1111 000002b0 0040 94de8174 7e816cbb ad0ffcbf b68d7700 0c2e0abc 4bed79e9 b1561cb3 6d44321a 4b23d324 a6f1ef5f 8561f2d8 a7d257b1 b4af64bb bdd7caa3 6e914333 a420ccca
+1 01 400001e2 001 00001101 bf240000 0100 133cf265 0011 133cf265 0100 ec653086 0011 ec653086 1100 378afb77 0011 378afb77 1100 5f3c42e5 0011 5f3c42e5 0100 6394a96e 0001 6394a96e 1100 a7b13a5a 0011 a7b13a5a 1100 000007d1 0001 000001e0 0020 620c7ac3 3b357a7c f20e39a0 10a8f7ed 7eae62c4 f0f4a308 799a3e20 51ff1ed1
+0 10 400003e0 010 00000011 d3eabecb 0ebadad4 64d0f12b 0b217b3f
+0 10 40000770 010 00001111 4443d310 72a78fc9 388e3d3f baa32955 6fb733c9 e6828b10 ffe422f2 911a5732 6c6165b9 52f860b1 b3aa4c23 bed617cb ad054261 b8d65b86 bbe0eb68 b81c121f
+1 01 40000105 000 00001111 15c68600 0010 15c68600 0100 15c68600 1000 1378aa85 0000 1378aa85 0010 1378aa85 0100 1378aa85 1000 467eb746 0000 467eb746 0010 467eb746 0000 467eb746 1000 0d18edc0 0001 0d18edc0 0010 0d18edc0 0100 0d18edc0 1000 00000076 0000 00000100 0020 b8cc4993 dcd75e04 3a354d9d 4b348688 98c78da7 12bc3d2b f38603cc f51327e9
+0 10 40000104 001 00001111 15c686cb 15c686cb 1378aa68 1378aa68 46d2b730 46d2b730 0d18edc0 0d18edc0 3d4ab282 3d4ab282 997db3cf 997db3cf 964eaa37 964eaa37 6ba258f6 6ba258f6
+1 01 40000702 000 00000110 229a0000 0100 229a0000 1000 e4607935 0001 e4607935 0010 e4607935 0000 e4607935 1000 0000001c 0001 00000700 0010 e2ae4ac8 c7880d8a fba4198d 8e440658
+0 01 40000336 001 00001000 d85b1ef0 9fb0ac35 9fb0ac35 7ac34ed0 7ac34ed0 78eaf907 78eaf907 7adbdf34 7adbdf34
+1 01 400005fe 000 00000011 32760000 0100 32760000 0000 00000596 0001 00000596 0000 000005f0 0020 9fb0cd98 31b26238 0bccb23b dd2c14b6 0fe2e347 1a5f2e49 5eb2fc9f 4742eda6
+0 10 4000073e 000 00000011 57450a3d 57450a3d 57450a3d 57450a3d
+0 01 400002d0 010 00000011 b82eaaaa 8121518a c32c7a2e 63a82b4f
+1 01 400002e8 000 00001011 969d3bed 0001 969d3bed 0000 969d3bed 0100 969d3bed 1000 aae07931 0001 aae07931 0000 aae07931 0100 aae07931 1000 82e147ce 0001 82e147ce 0000 82e147ce 0100 82e147ce 0000 000002e0 0020 b4af64bb bdd7caa3 b54a5170 39ede0e4 14405c5b bcbc5e2b 1c0d02de e48c1ddb
+0 10 40000260 001 00000111 25050c9d 25050c9d 9aa36833 9aa36833 11353549 11353549 e42a782d e42a782d
+1 01 400003ff 000 00001011 e3000000 0000 dcf76511 0001 dcf76511 0010 dcf76511 0100 dcf76511 0000 854019c9 0000 854019c9 0010 854019c9 0100 854019c9 1000 00c9ddc6 0001 00c9ddc6 0010 00c9ddc6 0100 000003f0 0020 24d6de43 8e8c4ea4 4257e2d0 7a32c3e3 a83c5209 4dd21b5f 5d74084c 175cfa20
+1 01 40000162 001 00000000 a7a10000 0000 00000160 0010 6e6af6d5 1895da74 abd910df 2df056e1
+0 10 40000646 001 00000111 86546f63 0dbd695f 0dbd695f 1ceb2afa 1ceb2afa 4797a7bd 4797a7bd 86546f63
+0 10 4000063c 010 00000001 5fceed15 4bf48a18
+1 01 40000058 010 00000101 c7247c52 1101 fe2d93c4 0101 fd2efffd 1101 d95560d0 0011 a9e1c85a 1010 e00de319 1110 00000050 0020 8f0aa6a7 721530c5 98b54da9 c0f7a048 482e9f30 72baa58b 7c853be1 0c7546a1
+1 01 40000338 010 00001011 e9032165 1111 61e8e717 0110 375fecbe 1000 7d0ab560 1111 f4fd347e 1101 694b896f 1101 401bcc4b 1111 e0be8231 1111 912ec90f 1100 5348008b 1111 79d36162 1101 3bb7e1d9 1011 00000330 0040 3cf2f13b 276fb277 65cd7f4a 0c13629b 4af69b7e 64684b3d 570419f4 94988bd1 8fb49b7d 331ffa0f 958434e0 4921f820 44019480 ab8c4024 ca18e743 2454a380
+1 01 400003d4 010 00001100 5712e16a 1011 75200145 1011 adcb24d7 1110 37b3589b 1101 992c6fcb 1010 62cfccf4 0111 c2d3f466 1111 6afd6f06 1101 c53f5765 1111 39e953db 0010 5e75d8d0 0011 aef8cde2 1011 98449c52 0110 000003d0 0040 3d9f2e23 31d75ae8 3c473104 98c637c8 83966bef a455c04b f2d53634 4a065059 c9c24faf 81dfa4bb 9c929bea b94cef3c 34733693 beb6a58b 9c84845b 83949d43
+0 01 4000014e 001 00001111 108ff23a 0c91fa0e 0c91fa0e d6f2e345 d6f2e345 b33f91c7 b33f91c7 b6dd2a14 b6dd2a14 048a4846 048a4846 31235a0e 31235a0e 812362ff 812362ff 525b0104
+1 01 400002a8 010 00001010 5a0304dd 1111 1bc65ab0 1111 47ba1a2b 1101 60e0d8b9 1111 06f2d002 1010 2b52572c 0111 5a8c12b7 1111 bf1ee61b 1011 b46bcf7d 1100 ebd6ab4c 1110 2e0bfff8 1110 000002a0 0040 78e10701 c588604f 33476ce7 dc00b98d 8eebbb27 29788a77 8fda1c92 162b43e3 015362ce 127702e0 c2cbb915 bc82ea21 3cbc5d70 fa6b52d3 9c6ef1ef 17bd4564
+0 10 40000704 010 00000001 e4b57935 229a4750
+0 01 400003b0 001 00001011 ee250c61 ee250c61 ee3fdd49 ee3fdd49 183fe600 183fe600 6b691058 6b691058 1ebe3b13 1ebe3b13 eb0f2d21 eb0f2d21
+1 01 400007c6 001 00001100 02210000 1100 9a2f6380 0011 9a2f6380 1100 0a1a8e0b 0010 0a1a8e0b 0000 74dc76b8 0010 74dc76b8 1100 043eff6d 0001 043eff6d 1100 394a2c2e 0011 394a2c2e 1100 f73a8eab 0011 f73a8eab 1100 000007c0 0020 9229c67a 6d7817c7 e90db849 c4b88334 224990a1 cf0d1d05 18c89999 1ff3b6d9
+0 10 40000002 001 00001111 9428f51a 438d8a82 438d8a82 9bf21223 9bf21223 8d9761d1 8d9761d1 6ae17ca5 6ae17ca5 18502fb7 18502fb7 83c58034 83c58034 4a67c00c 4a67c00c 9428f51a
+1 01 40000084 010 00001100 52c41231 1110 4badb5c3 0101 5a41ddcb 0011 157d3443 1111 c0033b77 1001 39b4ec8b 1011 f5516823 0111 e18a154a 1110 39901669 1111 5f12896b 1011 8b35d1a9 0111 1e667e40 0111 cff32d97 1110 00000080 0040 a9ccb407 ab8f8327 dd3d745c f9ffa16b 75d982b8 28e02f28 8b492475 f1ed1fb9 2fb0b816 1482ca29 8d36b0e1 16ca8312 55402ea1 7f3abd5c b891925a 5e704a9d
+1 01 400007d7 000 00000100 4a000000 0000 e046fb94 0001 e046fb94 0010 e046fb94 0100 e046fb94 0000 000007d0 0010 224990a1 cf0d1d05 6115ddee b79baca4
+1 01 40000506 001 00000110 12780000 1100 a41b7dcc 0011 a41b7dcc 0000 a52b4df9 0001 a52b4df9 1100 841d23f0 0000 841d23f0 1100 00000500 0020 c3e49fe5 514c0562 000ed055 70d71521 1fab1d04 0f8c6277 36959d8d 56a986f3
+0 01 40000348 001 00000000 f4fdea7e
+0 01 4000021a 001 00000101 bc484636 3c3b5b16 3c3b5b16 04170868 04170868 8756bda3
+1 01 400006e6 000 00000100 c0630000 0100 c0630000 1000 0004595b 0001 0004595b 0010 0004595b 0100 000006e0 0010 202cb9f0 fc2a15df f47d5878 219ddb36
+0 10 400002c0 001 00000111 5a8c12b7 5a8c12b7 bfb7e61b bfb7e61b b46bffc7 b46bffc7 ebd6ab90 ebd6ab90
+1 01 4000060e 001 00000101 d0930000 0000 7edb8b96 0011 7edb8b96 1100 c53c11c1 0010 c53c11c1 1100 0000cf96 0011 00000600 0020 0fe2e347 1a5f2e49 5eb2fc9f 4742eda6 8fb9c6a1 adecd2c5 711277c6 3b30c46e
+0 10 40000220 010 00001111 04170868 8756bda3 aa8fefbd fde00148 dff9ad0b e2db654a 376e3f89 9776d4cd 1ba004a4 d6104775 0bdbe0ab b9e84d27 1af99c13 70ca7b71 bc484636 3c3b5b16
+0 10 400005e2 000 00000011 98846d65 98846d65 98846d65 98846d65
+0 10 40000128 001 00000001 da5e4432 da5e4432
+1 01 4000000c 001 00000101 dbd9f2b8 0011 dbd9f2b8 1100 0b153956 0011 0b153956 1100 29f55614 0011 29f55614 1100 00000000 0020 94de9b7a 27f86295 b43eb887 ffef8716 14112f8a e8890328 c4b86405 d2faba80
+0 01 400007b2 001 00000101 9e870f77 c6d43c34 c6d43c34 8f36c002 8f36c002 d3b0970a
+1 01 4000041a 001 00001011 f2210000 1100 e4ca8092 0001 e4ca8092 1000 5b22e8e2 0010 5b22e8e2 1100 4b600189 0011 4b600189 1000 b2d237c0 0011 b2d237c0 1100 86e78512 0011 86e78512 1000 00001f97 0011 00000410 0030 9a3b23c7 bf290248 75163668 f2c46d83 7564de73 e7ecf185 39f509bb adcbafa0 4a63b9c3 ebb5aa42 eca9e2f0 686ce9c4
+0 01 40000140 001 00001001 6b2d9f60 6b2d9f60 28f93ac5 28f93ac5 b2552d86 b2552d86 108ff23a 108ff23a 0c91fa0e 0c91fa0e
+1 01 4000018e 001 00001000 e7760000 1100 0d39a005 0011 0d39a005 0100 40b4aa49 0011 40b4aa49 1000 137e9421 0011 137e9421 1100 40bf9add 0010 40bf9add 1000 00000180 0020 9643f1c1 115fa9aa 8430815a 4845f199 a5059150 a5e8a02b ea4f65a8 8247a626
+0 01 4000055e 001 00000111 4bb0224c 58319ee4 58319ee4 6ce92bab 6ce92bab b08a7008 b08a7008 63b22818
+0 01 40000334 010 00000110 d85b1ef0 e9032165 7ae8e7d0 37eaf907 7d0ab560 f4fdea7e 694b536f
+0 10 400006c9 000 00000111 0edabbfa 0edabbfa 0edabbfa d6a20507 d6a20507 d6a20507 d6a20507 0edabbfa
+1 01 400004b8 010 00001001 b61d995e 1001 e869b91e 1010 4da67f9e 1101 3714ed9b 1011 f0670291 1110 dd13a079 0111 ec28b581 1000 4d21e535 1111 e5f19fad 0011 1b55ed74 1111 000004b0 0030 3f7a5c08 e597e64e 189c4d3c 46f7c334 8523f2fd e83f74c4 7de4cb23 58f50bd1 0aee27be 5f7ab2cd 58fb82c6 718654a7
+1 01 4000043e 000 00000111 d2ad0000 0100 d2ad0000 1000 51a455f7 0000 51a455f7 0010 51a455f7 0100 51a455f7 0000 0000e048 0001 0000e048 0010 00000430 0020 4a63b9c3 ebb5aa42 b2e817fc 405203bc c55695e8 c71a29d4 704738ee dda58743
+0 10 400000c2 001 00000001 e585d13e e585d13e
+1 01 40000410 001 00000100 f2ec5969 0011 f2ec5969 1100 2b20146a 0001 2b20146a 0100 00004175 0001 00000410 0010 9a9c4878 dd8aace9 a1b24828 0e8bcb60
+1 01 400000f6 001 00000100 1a200000 1100 9322e162 0011 9322e162 1100 eb5c6d47 0011 eb5c6d47 1100 000000f0 0010 cfe7ddb8 4f958417 41a0d798 6888218a
+1 01 40000200 001 00000000 00001f44 0011 00000200 0010 002083d5 8314115c 002e268f 3121465a
+1 01 4000020b 000 00000000 4a000000 0000 00000200 0010 002083d5 8314115c 002e268f 3121465a
+0 01 400003b0 001 00000001 ee250c61 ee250c61
+0 01 400002e0 000 00001100 10890284 10890284 10890284 10890284 d1e5a045 d1e5a045 d1e5a045 d1e5a045 969deeed 969deeed 969deeed 969deeed aae0f031
+0 01 4000050b 000 00000010 b3df7dcc a52b1ef9 a52b1ef9
+0 01 4000032c 001 00000111 62645c10 62645c10 a4670011 a4670011 d85b1ef0 d85b1ef0 e9032165 e9032165
+0 10 400005f2 001 00000111 128932ea a21201c3 a21201c3 34ccd6f0 34ccd6f0 c776f125 c776f125 128932ea
+0 10 400006f4 010 00000011 3625c45e b65b8882 728099a6 aee4d058
+0 01 4000024a 001 00001110 8f37ab92 00f2e91f 00f2e91f d151fb52 d151fb52 f3c4e7c0 f3c4e7c0 48a308c5 48a308c5 e67b7b46 e67b7b46 25050c9d 25050c9d 9aa36833 9aa36833
+0 01 4000002d 000 00000111 b6ea1280 b6ea1280 b6ea1280 0ef8a2fe 0ef8a2fe 0ef8a2fe 0ef8a2fe 7031d92f
+1 01 40000596 001 00001001 4df10000 1100 41758aa2 0011 41758aa2 1100 864bddc7 0001 864bddc7 0100 5f1c2d25 0010 5f1c2d25 1100 3161a7ba 0010 3161a7ba 1000 00001c4c 0011 00000590 0020 ffda8330 b8e0b292 5e03fead d215a946 852df492 ac75b426 2051bcec 8cd6de36
+1 01 40000060 010 00000100 650d0c6c 1101 a50c867c 1101 faf493ce 0001 37614ae8 0101 cc6bf0f9 1111 00000060 0020 834a7021 9cc486a0 240372f0 8391fa05 60b77980 683c0b10 42acb76e 332aa22e
+1 01 400001e3 000 00000000 00000000 1000 000001e0 0010 4902b7f9 875dff40 46793b85 92d58436
+1 01 40000354 001 00001110 7535273a 0011 7535273a 0100 67099793 0011 67099793 0100 69d30ed1 0001 69d30ed1 1100 699fc457 0000 699fc457 0000 923e8d57 0011 923e8d57 1100 494f6d4a 0011 494f6d4a 1100 2867dd6f 0001 2867dd6f 1100 00002959 0011 00000350 0030 393d939a 473da4d1 88f0a54f d4c6fa3d f2968117 9d9d351b f41a750f 153cd317 c4472572 75449fac 540bc151 a6b556a1
+0 10 4000035c 010 00000001 69d300d1 91099793
+1 01 40000753 000 00000110 b5000000 1000 3bc80f98 0001 3bc80f98 0000 3bc80f98 0100 3bc80f98 1000 00003bca 0001 00003bca 0010 00000750 0010 75ba0913 b836ac8d 1e5acd88 c2b085cb
+1 01 400005f4 000 00001111 870b421d 0001 870b421d 0010 870b421d 0100 870b421d 0000 04c5c043 0001 04c5c043 0010 04c5c043 0100 04c5c043 0000 b417aa5d 0001 b417aa5d 0000 b417aa5d 0100 b417aa5d 1000 f9eeb429 0001 f9eeb429 0010 f9eeb429 0100 f9eeb429 0000 000005f0 0020 aeba194b 5ebc90e9 e35f407d 1450b50c 03ffc510 470d3b8c 13b58170 95ad6863
+0 01 40000490 010 00001100 ec6bd6f2 210dbc0a cc58a448 b78e2b65 7af584b4 f05e1fea eb14a0bc 87f272c3 c6bb8b14 70ce1545 b63aac5e e875b979 4da65a9e
+1 01 40000104 010 00001000 0a4f7b49 0110 b0a7cf35 0110 101cf3dd 1111 59d69583 1010 ac5f8410 1110 8561207c 1111 e0c64bd8 0111 3b1e2a05 1110 c3c55efb 1111 00000100 0030 28d2f9ae 1ff962b4 ca4333a8 c156747a 93c3cec4 8d65706f 387c1289 58742fe5 f4b21810 e44b23b2 12441240 b52c4463
+1 01 40000527 000 00001001 68000000 1000 a48f5847 0001 a48f5847 0010 a48f5847 0100 a48f5847 0000 d8676c7d 0001 d8676c7d 0010 d8676c7d 0000 d8676c7d 0000 00000022 0000 00000520 0020 501f2700 9de0d39b 40cc4a3f ac3012d1 aca780ed e487cb5e 55635a13 6afc37f1
+0 10 40000454 010 00000001 84c8081f 9ea8e736
+1 01 40000698 010 00001100 10437cb5 1101 15ef40c7 1011 045ef35e 1001 bb1c4e25 1111 c2646bfe 1101 169846e8 1011 98bb711f 1111 4c73afd6 0000 86f67455 1101 1e4b4b0d 1111 b50c61e8 1010 92eae044 1111 5df2b18b 1101 00000690 0040 25530db1 03ea8996 55f5ad8d 299daf59 359fc94a 7b2a9b6f 38c9444a 5b36aaf2 8d2c4e58 28e0001c 69e77c07 79e05bc8 cd2abcbb 7247f714 27714f1e 7292d1db
+0 10 4000069e 001 00000111 152b40c7 78f913b0 78f913b0 c86d74d8 c86d74d8 10435cb5 10435cb5 152b40c7
+1 01 400004e0 000 00000010 0095ad21 0001 0095ad21 0010 0095ad21 0100 000004e0 0010 e3a8501e 43af295b 0e3e7eaa 9f6aae15
+1 01 40000390 001 00001001 1d5cc42e 0011 1d5cc42e 0100 37ff95ac 0010 37ff95ac 1100 86405719 0011 86405719 1100 42a11760 0001 42a11760 1100 881cd394 0011 881cd394 1100 00000390 0020 af1b21bf 6a390a6f 7d0c43ed eae3d0ca a66d413a fe6a15c7 40a3aab2 678a0717
+1 01 40000628 010 00000101 924ed729 1111 8c228cb9 1101 7f53941d 1110 197ee89a 1110 6897b0a8 1111 44b37c67 1100 00000620 0020 01c28fdd b302b2c7 25e3fe84 917ac6f0 18262e38 027a8913 faab2f96 b20257a3
+1 01 400004bc 001 00000011 a48e419a 0011 a48e419a 1100 3ef8a591 0011 3ef8a591 1000 000004b0 0020 3f7a5c08 e597e64e f1854da6 a1726b76 bcc0c0a2 22d98ee3 44d83169 22081dc2
+0 10 400001b4 010 00000001 bde82d9b 3ec24a95
+0 01 40000308 001 00001011 5499710a 5499710a 06ee223f 06ee223f 41619151 41619151 895f4416 895f4416 f8efbdd9 f8efbdd9 6e6bc50e 6e6bc50e
+1 01 400001df 000 00000101 dd000000 1000 e1f36f5f 0000 e1f36f5f 0000 e1f36f5f 0100 e1f36f5f 0000 000000ba 0001 000001d0 0020 11820a06 c332f3d7 3ad5ead9 4489bfbb 3acc7ec5 f40305f2 99f888e2 42ea44a9
+0 01 40000596 000 00000110 4df1c30d 4df1c30d 41758aa2 41758aa2 41758aa2 41758aa2 ae4b60c7
+1 01 40000164 001 00001101 aa9df9e0 0011 aa9df9e0 1000 efe3ea46 0010 efe3ea46 1000 24b9efbc 0001 24b9efbc 1100 1a01af2c 0010 1a01af2c 1000 fcb9bb10 0010 fcb9bb10 1100 7b035da5 0011 7b035da5 1100 60525cdf 0011 60525cdf 1100 00000160 0020 fec8cf42 2062af6f b83cb214 7710864e 654fddf2 972233f8 c16b593a ec34f5d2
+0 10 40000660 010 00000011 e1294795 ed0c68e1 d9047ef1 39e82327
+1 01 40000690 010 00000110 c86349d3 1110 02746eb9 0111 3d59148f 1111 f16bcb3d 1111 a9aa924b 0101 2089c7a2 1000 40af93de 1101 00000690 0020 ede56437 27cbc130 f12adeec c1778381 9d4ec731 a0a3c163 9ed3a5ef 22bedc5e
+0 01 40000297 000 00001000 80beb8e6 395c5e39 395c5e39 395c5e39 395c5e39 fcbc7f92 fcbc7f92 fcbc7f92 fcbc7f92
+0 10 4000059c 000 00000001 ae4b60c7 ae4b60c7
+1 01 4000021c 010 00000110 c0807f9c 1011 b6b006f9 0111 7ef63bf4 1010 9f79f5e1 1110 11159b7d 0111 fa63fb52 1000 f4d6331a 1011 00000210 0030 29196b39 ff2d2210 b9d39b7b 255bd7e4 66fe1038 8fbe0248 569685c6 17cc9586 76966146 f83aa1e2 5aa25bf7 c0ee0f5c
+0 10 400002f3 000 00000001 91e10bce 91e10bce
+0 10 40000752 001 00000111 b56165b9 3bc86098 3bc86098 b3aa3bca b3aa3bca bed617cb bed617cb b56165b9
+0 01 40000432 000 00001110 b5ff1f97 b5ff1f97 3aaf2732 3aaf2732 3aaf2732 3aaf2732 b56478bb b56478bb b56478bb b56478bb d2ad2d4e d2ad2d4e d2ad2d4e d2ad2d4e 33a455ef
+1 01 40000576 001 00000010 41b40000 1100 9b881ada 0011 9b881ada 0100 00000570 0010 dc6dc829 b5d72068 42fc564a 93f4e7f0
+1 01 4000025c 010 00000011 b659d619 1110 519aeb1e 1110 b7849bac 1101 9e444fe4 1111 00000250 0020 66bf083f 2b3aff44 7ff4e5a4 2798073a a7698824 e3baa7f1 334f87b2 003d0fbf
+1 01 400003f1 000 00001000 b9371d00 0010 b9371d00 0000 b9371d00 0000 a7c1bacf 0001 a7c1bacf 0010 a7c1bacf 0100 a7c1bacf 1000 0000c496 0001 0000c496 0010 000003f0 0010 d18f08e4 b0787bc9 e8e82006 1da191b2
+1 01 40000690 001 00000001 dbc0c1c9 0011 dbc0c1c9 1000 00000690 0010 4c78e377 db0fa2df 2d52a4cd a54fe7d0
+0 10 400002e4 001 00000111 d1e5a045 d1e5a045 969deeed 969deeed aae0f031 aae0f031 10890284 10890284
+1 01 400003b6 001 00000101 bd9b0000 1100 ae824ac5 0011 ae824ac5 1000 06978c2c 0010 06978c2c 0100 0000c38c 0011 000003b0 0020 d156cb9f 1307fe8b dd8596d5 8b7be819 5bc67b50 b2ad7573 7bff78e5 56e1e5ad
+1 01 400007bc 010 00000100 d91842ee 1110 2777fbf2 1100 3da77465 1011 169570fe 1101 05141175 1110 000007b0 0020 270204d2 5788384c 41acaaa2 d45ac895 476a1218 4e995fd6 9349a2f6 73cb748b
+0 01 4000078c 001 00001110 ebf4523f ebf4523f 73793e5b 73793e5b 63d37c1d 63d37c1d f5a0209a f5a0209a 777fe5d1 777fe5d1 3339b065 3339b065 0f693121 0f693121 0bfe3086
+0 10 400000b4 010 00000011 cff32d60 48b01a66 734378ef 5e667e40
+0 01 400004a6 001 00001110 f05e1fea eb14a0bc eb14a0bc 87f272c3 87f272c3 c6bb8b14 c6bb8b14 70ce1545 70ce1545 b63aac5e b63aac5e a48e419a a48e419a 3ea6a591 3ea6a591
+1 01 400005dd 000 00001111 2a95bd00 0010 2a95bd00 0100 2a95bd00 0000 047a879d 0001 047a879d 0010 047a879d 0000 047a879d 1000 c6d72ed7 0001 c6d72ed7 0010 c6d72ed7 0100 c6d72ed7 0000 e0f00f33 0001 e0f00f33 0010 e0f00f33 0100 e0f00f33 1000 000000fe 0001 000005d0 0020 3f2f8b8f d19630c7 cfbf5a3d 3092039b e4fe3463 1f6e96d6 aa4cf3d1 3bc55dcd
+1 01 400000ac 010 00000010 e4451fdd 1111 fb138c59 1010 2ea90771 1111 000000a0 0020 2fb0b816 1482ca29 744e0b93 65e19d4e d1b08662 64f3a610 b5d98d89 c3f58707
+0 10 4000000c 010 00001111 dbd9f2b8 0b153956 29f55614 83c58034 4a67c00c c0cb2091 a26ffbdc 55d0ea80 b6ea1280 0ef8a2fe 7031d92f c16d243c 1cc6a072 9428f51a 438d8a82 9bf21223
+1 01 4000043e 001 00000110 b3ea0000 1100 2576abb2 0011 2576abb2 1100 10c64bd2 0011 10c64bd2 0100 26556ec2 0010 26556ec2 1100 00000430 0020 4a63b9c3 ebb5aa42 59dc5bc1 b6dbed78 a0546141 b30a4c9f 4b162e2e cb8d168d
+0 10 400001ab 000 00000111 71489d05 cd5bb68f cd5bb68f cd5bb68f cd5bb68f 71489d05 71489d05 71489d05
diff --git a/fpga/src/memsec/tb/testdata/prince/ecb/initial_memory.txt b/fpga/src/memsec/tb/testdata/prince/ecb/initial_memory.txt
new file mode 100644
index 0000000..a6aecfc
--- /dev/null
+++ b/fpga/src/memsec/tb/testdata/prince/ecb/initial_memory.txt
@@ -0,0 +1,512 @@
+62a43282
+ac768420
+294f8bba
+d0c7687d
+a3a7dc4d
+714948ac
+2023ffea
+de1c506f
+e23ab9da
+f82434b4
+4d74187e
+0cb965d9
+9c36c4c6
+fe4d3d10
+d4cda826
+24c53bb8
+d31ac1f3
+010207ff
+5b590181
+cfbb79f7
+624d978b
+893279ec
+f77f0624
+680db17d
+86394d32
+d328e9b9
+03c7ec59
+e41a4dc1
+93c00d07
+d2bd50e5
+0ca1f8fe
+a185a6a0
+54a33aef
+1a596b89
+629d6707
+3a1d1c3e
+58da1d71
+4443b159
+e843982f
+61259ed0
+2c405833
+e9fa3e2b
+8bd419c4
+681762a9
+47070671
+eaa72c5b
+c3e4db0b
+3fc7af41
+36a859fe
+f581552a
+cd58692f
+18f82fc3
+739e74ab
+b3d0ff70
+54b1e6a9
+1d59b0c8
+f2ee05d2
+fc2d5e82
+fe56790a
+b08fd11f
+ef4ef2e4
+14f5d7a7
+fc0842c6
+1b43550e
+4fccb3a4
+57a572ec
+bd511f29
+6057655c
+bcb9b853
+07ea4335
+e672ef30
+5c1fa940
+29246fa0
+4580d653
+30fbae56
+b4661526
+4e4ec820
+8227b405
+09af1652
+464428ae
+826dafa5
+6af5b2b9
+c1fc3fa4
+814627e2
+242420b6
+6c5c5207
+deeb8959
+828bf222
+0c4c5517
+d6e38a4b
+77cfedc1
+65554f29
+0ca4256b
+7ce23f1f
+d8d4bf45
+faaa242d
+f547a8cc
+f52a306f
+f04b764f
+3eda02fd
+8a0a4e41
+fe828b60
+296da18f
+33fb9fe9
+4a29fd81
+b11e179b
+f61e7b93
+9e78ee1f
+07e64194
+e9c75f70
+84029ccb
+1507b1de
+63f3c50b
+53d47e04
+bb803d8c
+915088b9
+53e7f12e
+2ef4e826
+78364976
+9d2a5302
+27d23877
+e109052b
+f505c350
+02c3b885
+b1f56b66
+424bbe0e
+c1d2edf6
+c1171ca2
+55716617
+4a39ad65
+be754c79
+470b30a4
+eaf65d36
+6a6aa62e
+7a631cd0
+f8e3b3ef
+b236001c
+61fd6fe4
+9161ac45
+509e42e5
+6b5d61da
+95f9e2ed
+ce9b05f3
+059501f9
+9756cdcf
+f64287aa
+2b67d18f
+fc6f46b4
+4651c733
+21e45372
+06f2b66a
+9c066f03
+3dcc57ae
+67182568
+c42114f7
+c6ff217f
+f32c910d
+daa0f950
+22f17a14
+88b126ce
+e18c59fc
+25745b1d
+9508b668
+1336e518
+885e7a4c
+2b57d1df
+12e2a567
+774c5a3d
+02aa7e8d
+3befff82
+35ac5afd
+c15b1671
+aa2b6cdf
+53ea585b
+2a6f696b
+b1fe8874
+9cd36b82
+280f70b9
+2db6447a
+9f134059
+6f59d485
+9676dd00
+b9802d8c
+f40cf56c
+b1bbfb5b
+5be651b8
+c5200a4b
+a04d5386
+54fb9b01
+9cb91e60
+67d2e640
+b9cc0049
+e80da182
+80146b9b
+17e2b8a6
+95f0cad3
+08b52894
+a9136e67
+970f962e
+97ea0f1b
+1caddac4
+7644b93b
+f72e2915
+c4301d12
+baef3f4b
+47ec8b36
+8ebaae14
+75e8a31e
+f8c60d00
+2dd028b5
+049e716b
+9fe34a44
+d4a87fb9
+1a26cd2e
+5b69d5f4
+5100c85a
+01989a3c
+59648b5a
+96c50ec6
+e9c7a588
+d34e25db
+290b42df
+d6520c9b
+dd7942d6
+667fbe4d
+a700b452
+3af43968
+d98052ef
+ce68be1a
+e9eccd31
+69d62dc9
+062bf774
+bdb108b9
+9835b02d
+0b784297
+3e631bb2
+353a11b7
+7e966a96
+32f67135
+0c4d6a8d
+794b0790
+87aba01d
+ff163f3a
+ef56d4c0
+092b9207
+a3eaab6c
+fb5b24e7
+ad837921
+9d3fecdb
+17682471
+8acc6d89
+8ac2ccfd
+6b0980cf
+be06fcf7
+c4f4ce48
+ece25074
+e2b24dc9
+4560b7a1
+5bca7fdb
+632ccac8
+3d609102
+0ed834f2
+3cec9b38
+f05535c9
+5ae616d3
+fa554e4b
+5d36a283
+fd70317d
+dc29927a
+b4622337
+34fbaaea
+bd7aa743
+de7d5da3
+742c0a49
+c35716d7
+ffe476ba
+5529c0b6
+51af3087
+9fe78f0e
+1f8814d8
+9c62d198
+59891469
+a3ad82df
+ffdb0618
+e40cdc38
+1d72e699
+efc5e941
+c245702e
+f92fd70b
+27127329
+7b3eb833
+640e0107
+78a4b919
+f196aeac
+a610f276
+95e67d3a
+19040784
+2c9bb766
+52667926
+67eecfd8
+f6825855
+c85b026f
+2d5182d9
+e9313f98
+b881e370
+04b3077a
+e12e95a0
+7f63ea67
+a745b748
+40ca946a
+37dee852
+e6a9ce07
+37bcd22a
+f7fd6ff1
+8800c581
+8051e05c
+4d1e3720
+8da80981
+45e2a5c1
+1abbf115
+9267ba42
+686ab5eb
+3882046b
+0ef74927
+68bd37f5
+5b9134ec
+d139df83
+88457324
+63d847dd
+71a3336b
+99e027fd
+c3a17a5e
+a7a15c35
+ca6dca24
+b242bfb3
+b25204dd
+ab81b853
+397aaf15
+0416c805
+465c3102
+03ae5daa
+e78bb9fe
+ead657e4
+b7b1a762
+8927f71b
+ae1553e6
+8f7120c0
+a1eab45d
+a948f38a
+5db65f13
+b15a606a
+4aa518ed
+0257ed8b
+2bd46cd2
+54f4001a
+05a78c35
+fe82cdd4
+262b78bb
+df475d33
+adc56a19
+fec6fb2e
+30f060ae
+119e1bb0
+e23b59d7
+a1799894
+cb1dab36
+202fe658
+6d53cfa0
+cdd293fa
+5c6b05ab
+bbc63b07
+0507bd64
+998db9f7
+b7971a6c
+2031d85f
+600905fb
+28b53a59
+905d2e49
+f50b339d
+059330c0
+ae70a54f
+cda1c6a8
+7dd4facd
+04893782
+cbb6e313
+c74be153
+076d41f1
+c2533142
+9c163b78
+4aaabb8d
+4adccd3e
+fb6597ac
+935f5b1e
+fe295153
+51d46389
+fe7b529d
+25a992cf
+275e77b6
+6f02cc78
+eac0b714
+a0604524
+c66863f8
+3baeaa33
+223eb655
+6fadde4d
+4d01d9ad
+4b4ffc7b
+e84d95c4
+b056e264
+a52e7160
+3c294d36
+ae4189a4
+5eb013a7
+8678dd36
+f69e7843
+8f066d97
+a1238043
+a07043f4
+a882c7a2
+9f1c8775
+b94a4d0b
+e56d773a
+4ebd6c1e
+4184a982
+ebb8eac4
+d097ba09
+c2ff57e8
+b9324466
+9c7850d9
+3f1dfa3a
+bca0a09b
+69d9506c
+02c42f1d
+9d62595c
+89b54d06
+769d3c24
+68c169d3
+d1442f0f
+dd894e9c
+a1593f94
+17bdcda1
+b63ac7d5
+8754a213
+cb57bde7
+08402928
+681d4858
+6b6cabf1
+74e07067
+1fa74a0e
+1c255662
+4d15dbbb
+9958dff9
+282aa103
+53b0909a
+f8562dbb
+86dfe38f
+09fdf45a
+252f676a
+60383d75
+21ebcc57
+0091bc5a
+4fe2d383
+4eb42b09
+0591989a
+2365ee5a
+382c8b49
+c30c4fca
+0bd27128
+86f05de8
+905214fa
+1ac91242
+345a7f1c
+21657f69
+e66b1d0e
+d88af9db
+3d733549
+2d8e8f2f
+b9ea7d8f
+06a9b0fe
+ce83a818
+f1755beb
+36a7603c
+7238bb37
+29a7e601
+e58a8643
+e62c43fd
+5be50308
+0443f05b
+77d36317
+0ddd1517
+fa30b78f
+768898e6
+cc839ee5
+582a1570
+fa3e0051
+99d3bde5
+98ff52d1
+1a90d4af
+70dc74a2
+e9d1fd96
+7eaba691
+5a955105
+386c9d94
+223aefdf
+8d2bdf74
+0c4b0b28
+96bde5a5
+7cf5ad2c
+8ced646b
+b7352bfa
+442f6224
+7e1b7902
diff --git a/fpga/src/memsec/tb/testdata/prince/ecb/test_cases.txt b/fpga/src/memsec/tb/testdata/prince/ecb/test_cases.txt
new file mode 100644
index 0000000..edff1e0
--- /dev/null
+++ b/fpga/src/memsec/tb/testdata/prince/ecb/test_cases.txt
@@ -0,0 +1,2245 @@
+0 01 40000000 000 00000000 abccf000
+0 01 40000000 000 00000001 abccf000 abccf000
+0 01 40000000 000 00000010 abccf000 abccf000 abccf000
+0 01 40000000 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 01 40000000 000 00000100 abccf000 abccf000 abccf000 abccf000 daeef001
+0 01 40000000 000 00000101 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001
+0 01 40000001 000 00000000 abccf000
+0 01 40000001 000 00000001 abccf000 abccf000
+0 01 40000001 000 00000010 abccf000 abccf000 abccf000
+0 01 40000001 000 00000011 abccf000 abccf000 abccf000 daeef001
+0 01 40000002 000 00000000 abccf000
+0 01 40000002 000 00000001 abccf000 abccf000
+0 01 40000002 000 00000010 abccf000 abccf000 daeef001
+0 01 40000003 000 00000000 abccf000
+0 01 40000003 000 00000001 abccf000 daeef001
+0 01 40000003 000 00000010 abccf000 daeef001 daeef001
+0 01 40000003 000 00000011 abccf000 daeef001 daeef001 daeef001
+0 01 40000004 000 00000000 daeef001
+0 01 40000004 000 00000001 daeef001 daeef001
+0 01 40000004 000 00000010 daeef001 daeef001 daeef001
+0 01 40000004 000 00000011 daeef001 daeef001 daeef001 daeef001
+0 01 40000004 000 00000100 daeef001 daeef001 daeef001 daeef001 abccf002
+0 01 40000004 000 00000101 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002
+0 01 40000000 001 00000000 abccf000
+0 01 40000000 001 00000001 abccf000 abccf000
+0 01 40000000 001 00000010 abccf000 abccf000 daeef001
+0 01 40000000 001 00000011 abccf000 abccf000 daeef001 daeef001
+0 01 40000000 001 00000100 abccf000 abccf000 daeef001 daeef001 abccf002
+0 01 40000000 001 00000000 abccf000
+0 01 40000000 001 00000001 abccf000 abccf000
+0 01 40000000 001 00000010 abccf000 abccf000 daeef001
+0 01 40000000 001 00000011 abccf000 abccf000 daeef001 daeef001
+0 01 40000000 001 00000100 abccf000 abccf000 daeef001 daeef001 abccf002
+0 01 40000002 001 00000000 abccf000
+0 01 40000002 001 00000001 abccf000 daeef001
+0 01 40000002 001 00000010 abccf000 daeef001 daeef001
+0 01 40000002 001 00000011 abccf000 daeef001 daeef001 abccf002
+0 01 40000002 001 00000100 abccf000 daeef001 daeef001 abccf002 abccf002
+0 01 40000002 001 00000000 abccf000
+0 01 40000002 001 00000001 abccf000 daeef001
+0 01 40000002 001 00000010 abccf000 daeef001 daeef001
+0 01 40000002 001 00000011 abccf000 daeef001 daeef001 abccf002
+0 01 40000002 001 00000100 abccf000 daeef001 daeef001 abccf002 abccf002
+0 01 40000000 010 00000000 abccf000
+0 01 40000000 010 00000001 abccf000 daeef001
+0 01 40000000 010 00000010 abccf000 daeef001 abccf002
+0 01 40000004 010 00000000 daeef001
+0 01 40000004 010 00000001 daeef001 abccf002
+0 01 40000004 010 00000010 daeef001 abccf002 daeef003
+0 01 40000004 010 00001111 daeef001 abccf002 daeef003 abccf004 daeef005 abccf006 daeef007 abccf008 daeef009 abccf00a daeef00b abccf00c daeef00d abccf00e daeef00f abccf010
+0 10 40000000 000 00000001 abccf000 abccf000
+0 10 40000000 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000000 000 00000111 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001
+0 10 40000000 000 00001111 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003
+0 10 40000001 000 00000001 abccf000 abccf000
+0 10 40000001 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000002 000 00000001 abccf000 abccf000
+0 10 40000002 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000004 000 00000001 daeef001 daeef001
+0 10 40000004 000 00000011 daeef001 daeef001 daeef001 daeef001
+0 10 40000004 000 00000111 daeef001 daeef001 daeef001 daeef001 abccf000 abccf000 abccf000 abccf000
+0 10 40000000 000 00001111 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003
+0 10 40000004 000 00001111 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003 abccf000 abccf000 abccf000 abccf000
+0 10 40000008 000 00001111 abccf002 abccf002 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001
+0 10 4000000c 000 00001111 daeef003 daeef003 daeef003 daeef003 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002 abccf002 abccf002
+0 10 40000010 000 00001111 abccf004 abccf004 abccf004 abccf004 daeef005 daeef005 daeef005 daeef005 abccf006 abccf006 abccf006 abccf006 daeef007 daeef007 daeef007 daeef007
+0 10 40000014 000 00001111 daeef005 daeef005 daeef005 daeef005 abccf006 abccf006 abccf006 abccf006 daeef007 daeef007 daeef007 daeef007 abccf004 abccf004 abccf004 abccf004
+0 10 40000018 000 00001111 abccf006 abccf006 abccf006 abccf006 daeef007 daeef007 daeef007 daeef007 abccf004 abccf004 abccf004 abccf004 daeef005 daeef005 daeef005 daeef005
+0 10 4000001c 000 00001111 daeef007 daeef007 daeef007 daeef007 abccf004 abccf004 abccf004 abccf004 daeef005 daeef005 daeef005 daeef005 abccf006 abccf006 abccf006 abccf006
+0 10 40000020 000 00001111 abccf008 abccf008 abccf008 abccf008 daeef009 daeef009 daeef009 daeef009 abccf00a abccf00a abccf00a abccf00a daeef00b daeef00b daeef00b daeef00b
+0 10 40000024 000 00001111 daeef009 daeef009 daeef009 daeef009 abccf00a abccf00a abccf00a abccf00a daeef00b daeef00b daeef00b daeef00b abccf008 abccf008 abccf008 abccf008
+0 10 40000028 000 00001111 abccf00a abccf00a abccf00a abccf00a daeef00b daeef00b daeef00b daeef00b abccf008 abccf008 abccf008 abccf008 daeef009 daeef009 daeef009 daeef009
+0 10 4000002c 000 00001111 daeef00b daeef00b daeef00b daeef00b abccf008 abccf008 abccf008 abccf008 daeef009 daeef009 daeef009 daeef009 abccf00a abccf00a abccf00a abccf00a
+0 10 40000030 000 00001111 abccf00c abccf00c abccf00c abccf00c daeef00d daeef00d daeef00d daeef00d abccf00e abccf00e abccf00e abccf00e daeef00f daeef00f daeef00f daeef00f
+0 10 40000034 000 00001111 daeef00d daeef00d daeef00d daeef00d abccf00e abccf00e abccf00e abccf00e daeef00f daeef00f daeef00f daeef00f abccf00c abccf00c abccf00c abccf00c
+0 10 40000038 000 00001111 abccf00e abccf00e abccf00e abccf00e daeef00f daeef00f daeef00f daeef00f abccf00c abccf00c abccf00c abccf00c daeef00d daeef00d daeef00d daeef00d
+0 10 4000003c 000 00001111 daeef00f daeef00f daeef00f daeef00f abccf00c abccf00c abccf00c abccf00c daeef00d daeef00d daeef00d daeef00d abccf00e abccf00e abccf00e abccf00e
+0 10 4000003d 000 00001111 daeef00f daeef00f daeef00f abccf00c abccf00c abccf00c abccf00c daeef00d daeef00d daeef00d daeef00d abccf00e abccf00e abccf00e abccf00e daeef00f
+0 10 4000005d 000 00001111 daeef017 daeef017 daeef017 abccf014 abccf014 abccf014 abccf014 daeef015 daeef015 daeef015 daeef015 abccf016 abccf016 abccf016 abccf016 daeef017
+0 10 4000007d 000 00001111 daeef01f daeef01f daeef01f abccf01c abccf01c abccf01c abccf01c daeef01d daeef01d daeef01d daeef01d abccf01e abccf01e abccf01e abccf01e daeef01f
+0 10 40000000 010 00000001 abccf000 daeef001
+0 10 40000000 010 00000011 abccf000 daeef001 abccf002 daeef003
+0 10 40000004 010 00000001 daeef001 abccf000
+0 10 40000004 010 00000011 daeef001 abccf002 daeef003 abccf000
+0 10 40000000 001 00000001 abccf000 abccf000
+0 10 40000000 001 00000011 abccf000 abccf000 daeef001 daeef001
+0 10 40000002 001 00000001 abccf000 abccf000
+0 10 40000002 001 00000011 abccf000 daeef001 daeef001 abccf000
+0 10 40000002 001 00000001 abccf000 abccf000
+0 10 40000002 001 00000011 abccf000 daeef001 daeef001 abccf000
+0 10 40000000 000 00000001 abccf000 abccf000
+0 10 40000000 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000001 000 00000001 abccf000 abccf000
+0 10 40000001 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000002 000 00000001 abccf000 abccf000
+0 10 40000002 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000002 000 00000111 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001 abccf000 abccf000
+0 10 40000003 000 00000001 abccf000 abccf000
+0 10 40000003 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000008 010 00000001 abccf002 daeef003
+0 10 40000010 010 00000011 abccf004 daeef005 abccf006 daeef007
+0 10 4000000c 010 00000001 daeef003 abccf002
+0 10 40000014 010 00000011 daeef005 abccf006 daeef007 abccf004
+0 10 40000008 001 00000001 abccf002 abccf002
+0 10 40000008 001 00000011 abccf002 abccf002 daeef003 daeef003
+0 10 4000000a 001 00000001 abccf002 abccf002
+0 10 4000000a 001 00000011 abccf002 daeef003 daeef003 abccf002
+0 10 4000000a 001 00000001 abccf002 abccf002
+0 10 4000000a 001 00000011 abccf002 daeef003 daeef003 abccf002
+0 10 40000009 000 00000001 abccf002 abccf002
+0 10 40000009 000 00000011 abccf002 abccf002 abccf002 abccf002
+0 10 4000000a 000 00000001 abccf002 abccf002
+0 10 4000000a 000 00000011 abccf002 abccf002 abccf002 abccf002
+0 10 4000000a 000 00000111 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003 abccf002 abccf002
+0 01 40000001 000 00000011 abccf000 abccf000 abccf000 daeef001
+0 01 40000001 000 00000011 abccf000 abccf000 abccf000 daeef001
+1 01 40000000 000 00000011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 00000000 0008 17a2c939 c7896650
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 00000000 0008 3a562fc0 c348e37e
+1 01 40000000 000 00001011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 00000000 0010 3a562fc0 c348e37e 064325d9 50f86900
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 3a562fc0 c348e37e b2e11c62 96eca837
+1 01 40000004 000 00000011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 00000000 0008 a1337b79 ce290d75
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 00000000 0010 a1337b79 ce290d75 bab46348 673701ec
+1 01 40000004 000 00001011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 00000000 0010 a1337b79 ce290d75 643f1516 4e2f8719
+1 01 40000004 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 aaccaacc 0001 aaccaacc 0010 aaccaacc 0100 aaccaacc 1000 00000000 0018 a1337b79 ce290d75 643f1516 4e2f8719 365787f2 24a657ed
+1 01 40000008 000 00000011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 00000008 0008 324c6812 8a5cce6a
+1 01 40000008 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 00000008 0008 3a562fc0 c348e37e
+1 01 40000008 000 00001011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 00000008 0010 3a562fc0 c348e37e 2a62ca14 49507e46
+1 01 40000008 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 aaccaacc 0001 aaccaacc 0010 aaccaacc 0100 aaccaacc 1000 00000008 0010 3a562fc0 c348e37e a1506316 be72f710
+1 01 4000000c 000 00000011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 00000008 0008 a1337b79 ce290d75
+1 01 40000008 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 78563412 0001 78563412 0010 78563412 0100 78563412 1000 00000008 0008 73454e13 9f6357ee
+1 01 40000008 000 00001011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 78563412 0001 78563412 0010 78563412 0100 78563412 1000 bc7af3ef 0001 bc7af3ef 0010 bc7af3ef 0100 bc7af3ef 1000 00000008 0010 73454e13 9f6357ee ccc328d8 70330004
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0000 cccccccc 0000 cccccccc 0000 00000000 0008 a1337b79 ce290d75
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0000 cccccccc 0000 cccccccc 1000 00000000 0008 4d203faa efd6433d
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0000 cccccccc 0100 cccccccc 0000 00000000 0008 c137f68a 8c8b9cb4
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0010 cccccccc 0000 cccccccc 0000 00000000 0008 3ff3bf2b 94d215e8
+1 01 40000000 000 00000011 cccccccc 0001 cccccccc 0000 cccccccc 0000 cccccccc 0000 00000000 0008 6552c645 eae82a37
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0000 cccccccc 0100 cccccccc 1000 00000000 0008 6552c645 eae82a37
+1 01 40000000 000 00000011 cccccccc 0001 cccccccc 0010 cccccccc 0000 cccccccc 0000 00000000 0008 6552c645 eae82a37
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0010 cccccccc 0000 cccccccc 1000 00000000 0008 6552c645 eae82a37
+1 01 40000000 000 00000011 cccccccc 0001 cccccccc 0000 cccccccc 0100 cccccccc 0000 00000000 0008 6552c645 eae82a37
+1 01 40000000 000 00000011 cccccccc 0001 cccccccc 0000 cccccccc 0000 cccccccc 1000 00000000 0008 6552c645 eae82a37
+1 01 40000001 000 00000011 cccccc00 0010 cccccc00 0100 cccccc00 1000 000000ff 0000 00000000 0008 6552c645 eae82a37
+1 01 40000002 000 00000011 cccc0000 0100 cccc0000 1000 0000ffcc 0000 0000ffcc 0000 00000000 0008 6552c645 eae82a37
+1 01 40000003 000 00000011 cc000000 1000 00ffcccc 0000 00ffcccc 0000 00ffcccc 0000 00000000 0008 6552c645 eae82a37
+1 01 40000009 000 00000011 cccccc00 0010 cccccc00 0100 cccccc00 1000 000000ff 0000 00000008 0008 5d35fcf8 e863a4c0
+1 01 4000000a 000 00000011 cccc0000 0100 cccc0000 1000 0000ffcc 0000 0000ffcc 0000 00000008 0008 5d35fcf8 e863a4c0
+1 01 4000000b 000 00000011 cc000000 1000 00ffcccc 0000 00ffcccc 0000 00ffcccc 0000 00000008 0008 5d35fcf8 e863a4c0
+1 01 40000000 000 00000011 33000000 0000 33000000 0000 33000000 0000 33000000 1000 00000000 0008 85131fe9 a5736e3b
+1 01 40000000 000 00000011 00330000 0000 00330000 0000 00330000 0000 00330000 0000 00000000 0008 85131fe9 a5736e3b
+1 01 40000000 000 00000011 00003300 0000 00003300 0000 00003300 0000 00003300 0000 00000000 0008 85131fe9 a5736e3b
+1 01 40000000 000 00000011 00000033 0000 00000033 0000 00000033 0000 00000033 0000 00000000 0008 85131fe9 a5736e3b
+1 01 40000000 000 00000011 33333333 0000 33333333 0000 33333333 0000 33333333 0000 00000000 0008 85131fe9 a5736e3b
+1 01 40000004 000 00000011 33000000 0000 33000000 0000 33000000 0000 33000000 1000 00000000 0008 7f87da04 a070ab91
+1 01 40000004 000 00000011 00330000 0000 00330000 0000 00330000 0000 00330000 0000 00000000 0008 7f87da04 a070ab91
+1 01 40000004 000 00000011 00003300 0000 00003300 0000 00003300 0000 00003300 0000 00000000 0008 7f87da04 a070ab91
+1 01 40000004 000 00000011 00000033 0000 00000033 0000 00000033 0000 00000033 0000 00000000 0008 7f87da04 a070ab91
+1 01 40000004 000 00000011 33333333 0000 33333333 0000 33333333 0000 33333333 0000 00000000 0008 7f87da04 a070ab91
+1 01 40000008 000 00000011 33000000 0000 33000000 0000 33000000 0000 33000000 1000 00000008 0008 09b96e98 b4a3956f
+1 01 40000008 000 00000011 00330000 0000 00330000 0000 00330000 0000 00330000 0000 00000008 0008 09b96e98 b4a3956f
+1 01 40000008 000 00000011 00003300 0000 00003300 0000 00003300 0000 00003300 0000 00000008 0008 09b96e98 b4a3956f
+1 01 40000008 000 00000011 00000033 0000 00000033 0000 00000033 0000 00000033 0000 00000008 0008 09b96e98 b4a3956f
+1 01 40000008 000 00000011 33333333 0000 33333333 0000 33333333 0000 33333333 0000 00000008 0008 09b96e98 b4a3956f
+1 01 40000009 000 00000011 33000000 0000 33000000 0000 33000000 1000 00000000 0000 00000008 0008 09b96e98 b4a3956f
+1 01 40000009 000 00000011 00220000 0000 00220000 0000 00220000 0000 00000000 0000 00000008 0008 09b96e98 b4a3956f
+1 01 40000009 000 00000011 00003300 0000 00003300 0000 00003300 0000 00000000 0000 00000008 0008 09b96e98 b4a3956f
+1 01 40000009 000 00000011 33333300 0000 33333300 0000 33333300 0000 00000033 0000 00000008 0008 09b96e98 b4a3956f
+1 01 4000000a 000 00000011 55000000 0000 55000000 1000 00000000 0000 00000000 0000 00000008 0008 676c1247 6cd0a2cd
+1 01 4000000a 000 00000011 00330000 0000 00330000 0000 00000000 0000 00000000 0000 00000008 0008 676c1247 6cd0a2cd
+1 01 4000000a 000 00000011 33330000 0000 33330000 0000 00003333 0000 00003333 0000 00000008 0008 676c1247 6cd0a2cd
+1 01 40000000 000 00000011 cccc0000 0000 cccc0000 0000 cccc0000 0100 cccc0000 1000 00000000 0008 51d3e673 14115eb0
+1 01 40000000 000 00000011 cccc0000 0000 cccc0000 0000 cccc0000 0100 cccc0000 0000 00000000 0008 51d3e673 14115eb0
+1 01 40000000 000 00000011 cccc0000 0000 cccc0000 0000 cccc0000 0000 cccc0000 1000 00000000 0008 51d3e673 14115eb0
+1 01 40000000 000 00000011 cccc0000 0000 cccc0000 0000 cccc0000 0000 cccc0000 0000 00000000 0008 51d3e673 14115eb0
+1 01 40000000 000 00000011 77aa3355 0000 77aa3355 0000 77aa3355 0100 77aa3355 1000 00000000 0008 518bdcb7 333373eb
+1 01 40000002 000 00000011 00000000 0100 00000000 1000 0000cccc 0000 0000cccc 0000 00000000 0008 597aa626 aad4b375
+1 01 40000002 000 00000011 11110000 0100 11110000 0000 0000aaaa 0000 0000aaaa 0000 00000000 0008 55db62d1 86e0bfcf
+1 01 40000002 000 00000011 cccc0000 0000 cccc0000 1000 0000aaaa 0000 0000aaaa 0000 00000000 0008 6e4ba80a 083c7aff
+1 01 40000002 000 00000011 33550000 0000 33550000 0000 000077aa 0000 000077aa 0000 00000000 0008 6e4ba80a 083c7aff
+1 01 40000005 000 00000011 cc000000 0000 cc000000 0000 cc000000 1000 000000cc 0000 00000000 0010 bf837625 93ee6cc3 676c1247 6cd0a2cd
+1 01 40000005 000 00000011 aa111100 0000 aa111100 0000 aa111100 0000 000000aa 0000 00000000 0010 bf837625 93ee6cc3 676c1247 6cd0a2cd
+1 01 40000007 000 00000011 00000000 1000 00cccc00 0000 00cccc00 0000 00cccc00 0000 00000000 0010 00b35757 b2443630 676c1247 6cd0a2cd
+1 01 40000007 000 00000011 cc000000 0000 00aaaacc 0000 00aaaacc 0000 00aaaacc 0000 00000000 0010 00b35757 b2443630 676c1247 6cd0a2cd
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0008 3cecc40f 085a1e33
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0008 59c9707b b9d82d9f
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0008 d28a8c7e 43740b6a
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0008 3a5d1ebf 9e736138
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 00000000 0008 427fe58b 79380ba5
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 1000 00000000 0008 427fe58b 79380ba5
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0100 88776655 1000 00000000 0008 427fe58b 79380ba5
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 00000000 0008 427fe58b 79380ba5
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 00000000 0008 427fe58b 79380ba5
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 00000000 0008 427fe58b 79380ba5
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0100 88776655 1000 00000000 0008 427fe58b 79380ba5
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 1000 00000000 0008 427fe58b 79380ba5
+1 01 40000001 000 00000111 f0f0f000 0010 f0f0f000 0100 f0f0f000 1000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 54eec6f1 a0a4ff37 f939e205 7b906b71
+1 01 40000001 000 00000111 f0f0f000 0010 f0f0f000 0100 f0f0f000 0000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 54eec6f1 a0a4ff37 f939e205 7b906b71
+1 01 40000001 000 00000111 f0f0f000 0010 f0f0f000 0000 f0f0f000 1000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 54eec6f1 a0a4ff37 f939e205 7b906b71
+1 01 40000001 000 00000111 f0f0f000 0010 f0f0f000 0000 f0f0f000 0000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 54eec6f1 a0a4ff37 f939e205 7b906b71
+1 01 40000001 000 00000111 f0f0f000 0000 f0f0f000 0100 f0f0f000 1000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 54eec6f1 a0a4ff37 f939e205 7b906b71
+1 01 40000001 000 00000111 f0f0f000 0000 f0f0f000 0100 f0f0f000 0000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 54eec6f1 a0a4ff37 f939e205 7b906b71
+1 01 40000001 000 00000111 f0f0f000 0000 f0f0f000 0000 f0f0f000 0000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 54eec6f1 a0a4ff37 f939e205 7b906b71
+1 01 40000002 000 00000111 f0f00000 0100 f0f00000 1000 6655f0f0 0000 6655f0f0 0000 6655f0f0 0100 6655f0f0 1000 00008877 0001 00008877 0010 00000000 0010 00588e6d 26579ca9 f8acea57 285aaa1a
+1 01 40000002 000 00000111 f0f00000 0100 f0f00000 0000 6655f0f0 0000 6655f0f0 0000 6655f0f0 0100 6655f0f0 1000 00008877 0001 00008877 0010 00000000 0010 00588e6d 26579ca9 f8acea57 285aaa1a
+1 01 40000002 000 00000111 f0f00000 0000 f0f00000 1000 6655f0f0 0000 6655f0f0 0000 6655f0f0 0100 6655f0f0 1000 00008877 0001 00008877 0010 00000000 0010 00588e6d 26579ca9 f8acea57 285aaa1a
+1 01 40000002 000 00000111 f0f00000 0000 f0f00000 0000 6655f0f0 0000 6655f0f0 0000 6655f0f0 0100 6655f0f0 1000 00008877 0001 00008877 0010 00000000 0010 00588e6d 26579ca9 f8acea57 285aaa1a
+1 01 40000003 000 00000111 f0000000 1000 55f0f0f0 0000 55f0f0f0 0000 55f0f0f0 0000 55f0f0f0 1000 00887766 0001 00887766 0010 00887766 0100 00000000 0010 0d4b020a 9bfc5ea3 ccad5904 78f099ef
+1 01 40000003 000 00000111 f0000000 0000 55f0f0f0 0000 55f0f0f0 0000 55f0f0f0 0000 55f0f0f0 1000 00887766 0001 00887766 0010 00887766 0100 00000000 0010 0d4b020a 9bfc5ea3 ccad5904 78f099ef
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 00000000 0010 a1337b79 ce290d75 ccad5904 78f099ef
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 1000 00000000 0010 a1337b79 ce290d75 b96e8b32 ec4d6de0
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0100 88776655 1000 00000000 0010 a1337b79 ce290d75 770fdd7c c5b8746f
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 00000000 0010 a1337b79 ce290d75 f1fe7ac4 3b18179a
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 a1337b79 ce290d75 d324e8b7 08b48d7b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 a1337b79 ce290d75 d324e8b7 08b48d7b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 a1337b79 ce290d75 d324e8b7 08b48d7b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 a1337b79 ce290d75 d324e8b7 08b48d7b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 00000000 0010 a1337b79 ce290d75 d324e8b7 08b48d7b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 00000000 0010 a1337b79 ce290d75 d324e8b7 08b48d7b
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0100 88776655 1000 00000000 0010 a1337b79 ce290d75 d324e8b7 08b48d7b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 1000 00000000 0010 a1337b79 ce290d75 d324e8b7 08b48d7b
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 a1337b79 ce290d75 a367d3ff a88c7422
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0000 3333cccc 0010 3333cccc 0000 3333cccc 1000 00000000 0010 a1337b79 ce290d75 a367d3ff a88c7422
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0010 88776655 0000 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 a1337b79 ce290d75 a367d3ff a88c7422
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0010 88776655 0000 88776655 1000 3333cccc 0000 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 a1337b79 ce290d75 a367d3ff a88c7422
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 a1337b79 ce290d75 a367d3ff a88c7422
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 a3d78a7f 00849838 a367d3ff a88c7422
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 427fe58b 79380ba5 a367d3ff a88c7422
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0001 88776655 0010 88776655 0000 88776655 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 427fe58b 79380ba5 a367d3ff a88c7422
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 427fe58b 79380ba5 a367d3ff a88c7422
+1 01 40000000 001 00001101 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 00000000 0020 224131de 133c1721 65368218 5004e32f ab459656 da08caa0 20b6b878 ecac16a3
+1 01 40000000 001 00001111 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 00000000 0020 224131de 133c1721 65368218 5004e32f ab459656 da08caa0 298e2cb7 f0165bc0
+1 01 40000000 001 00001011 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 00000000 0018 c168e557 f77c28fd 29fd39a2 d614b57d 841b3517 324702b4
+1 01 40000000 001 00001101 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 00000000 0020 c168e557 f77c28fd 29fd39a2 d614b57d 841b3517 324702b4 aa5f0acd ab8874af
+1 01 40000000 001 00001111 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 00000000 0020 c168e557 f77c28fd 29fd39a2 d614b57d 841b3517 324702b4 cca5ab9f 0798416e
+1 01 40000007 000 00000011 55000000 1000 00887766 0000 00887766 0000 00887766 0000 00000000 0010 445fd9c2 85ee9b50 29fd39a2 d614b57d
+1 01 40000006 000 00000011 66550000 0100 66550000 0000 00008877 0000 00008877 0000 00000000 0010 d63f5747 8f34087e 29fd39a2 d614b57d
+1 01 40000005 000 00000011 77665500 0010 77665500 0000 77665500 0000 00000088 0000 00000000 0010 069015ef 89c3976b 29fd39a2 d614b57d
+1 01 40000004 000 00000011 88776655 0001 88776655 0000 88776655 0000 88776655 0000 00000000 0008 069015ef 89c3976b
+1 01 40000003 000 00000011 55000000 1000 00887766 0000 00887766 0000 00887766 0000 00000000 0008 c4441e93 6eafb22b
+1 01 40000002 000 00000011 66550000 0100 66550000 0000 00008877 0000 00008877 0000 00000000 0008 6bebfe2b d6c182db
+1 01 40000001 000 00000011 77665500 0010 77665500 0000 77665500 0000 00000088 0000 00000000 0008 a02ec0bc 1a8956a5
+1 01 40000000 000 00000011 88776655 0001 88776655 0000 88776655 0000 88776655 0000 00000000 0008 1d480572 3ebb061e
+1 01 40000006 000 00000011 66550000 0000 66550000 0000 00008877 0000 00008877 0000 00000000 0010 1d480572 3ebb061e 29fd39a2 d614b57d
+1 01 40000006 000 00000011 66550000 0000 66550000 1000 00008877 0000 00008877 0000 00000000 0010 a5315eac 0f47c4d0 29fd39a2 d614b57d
+1 01 40000007 000 00000011 55000000 0000 00887766 0000 00887766 0000 00887766 0000 00000000 0010 a5315eac 0f47c4d0 29fd39a2 d614b57d
+1 01 40000007 000 00000011 55000000 1000 00887766 0000 00887766 0000 00887766 0000 00000000 0010 1d480572 3ebb061e 29fd39a2 d614b57d
+1 01 400000e8 010 00001111 fa74cfea 1001 c3ee5217 1101 4a7b57b7 0111 f08334c4 0111 8c817279 1111 ed125ad2 0111 b2e37a6c 0111 48b46897 1111 c338b811 1101 57507d1c 1111 f6f4b1f7 1111 81e0af8c 0111 b10e6d0c 0111 a0552342 1111 053280fb 1111 797af8a8 1111 000000e8 0040 d58ad52c f256b58e 57153586 52721a01 f049b4f8 a6e8ec9a 4d33c0a0 2a6d58a8 767beba5 b88e5451 6efc0495 bfe903a3 d830d20d d45dc57e 28ad03bf 422f10ec
+0 01 400003b2 001 00001101 abccf0ec daeef0ed daeef0ed abccf0ee abccf0ee daeef0ef daeef0ef abccf0f0 abccf0f0 daeef0f1 daeef0f1 abccf0f2 abccf0f2 daeef0f3
+1 01 4000008a 001 00000000 f0890000 1000 00000088 0008 fc7d25a1 8a0a8cc0
+0 10 40000554 010 00000001 daeef155 abccf154
+0 10 40000638 010 00000001 abccf18e daeef18f
+1 01 40000731 000 00001010 b8ae9600 0000 b8ae9600 0100 b8ae9600 0000 6c52fb0e 0001 6c52fb0e 0010 6c52fb0e 0100 6c52fb0e 0000 b4fcb256 0001 b4fcb256 0010 b4fcb256 0100 b4fcb256 1000 00000730 0010 8c2f1117 823dc4a8 ba6c870c 43c710de
+1 01 400000c8 001 00000100 c4068e59 0011 c4068e59 1100 d390d435 0011 d390d435 1100 000069f1 0001 000000c8 0010 75f815d8 15539df0 ac977fec 12705d18
+0 01 400005d3 000 00001111 abccf174 daeef175 daeef175 daeef175 daeef175 abccf176 abccf176 abccf176 abccf176 daeef177 daeef177 daeef177 daeef177 abccf178 abccf178 abccf178
+0 01 400000a8 010 00000100 abccf02a daeef02b abccf02c daeef02d abccf02e
+1 01 400005f4 001 00000011 449b530b 0011 449b530b 1100 0dcd3d89 0011 0dcd3d89 1100 000005f0 0010 943da783 37179889 58fa886c 1c60407d
+1 01 40000604 000 00000110 a8a490e1 0000 a8a490e1 0010 a8a490e1 0100 a8a490e1 1000 00d10086 0001 00d10086 0010 00d10086 0100 00000600 0010 c2824d29 df503277 7ff36723 99914e4d
+1 01 4000005c 010 00001110 b961e695 1110 ae36fda1 0111 d2a3b8d1 1111 76c8101c 1111 93655799 1100 63509a8f 1011 bdc8c296 1101 f5404e15 1011 d9b6d792 1101 0a2eccd3 1110 82269708 1111 41d7147f 1111 c79656be 1110 0bf2a31e 1011 2c49b4d4 1110 00000058 0040 77697bd1 473c94ff 3d109fb4 56133202 32b2890e e5aa55d2 9af433c4 82d6892d 9a2cf26b 5e6a804c de034c2e 6bfa85aa 5a8906b8 0a1c1210 7648d776 e3ec7ae9
+1 01 4000069a 001 00000001 a9190000 1100 000064af 0011 00000698 0008 f658e6e0 a0f45d90
+0 01 40000308 000 00000110 abccf0c2 abccf0c2 abccf0c2 abccf0c2 daeef0c3 daeef0c3 daeef0c3
+0 10 400000e4 010 00000011 daeef039 faccf0ea c3eef017 abccf038
+1 01 400000fc 010 00001110 2f2aec3e 0111 a1eb9965 1110 9a8b8282 1111 5f5b19e8 1110 34439900 0100 f7736391 0001 beea9479 1011 f69f68c9 1011 bfa7b52b 1111 3ec78b5e 1010 8e415c4e 0111 7451096d 0011 bd6ab055 1011 1ba1d824 1110 38d36df2 1011 000000f8 0040 8f8d607e 11a2ec8e 99bc010e 47c07d70 3512943e 55bc35de c25c1164 9cbe61c6 bbbc67a0 5cc80a3c a5e81fac 485ae607 b1cb5d8b 4c766d16 29e40dc6 89639235
+0 10 40000717 000 00001111 daeef1c5 abccf1c6 abccf1c6 abccf1c6 abccf1c6 daeef1c7 daeef1c7 daeef1c7 daeef1c7 abccf1c4 abccf1c4 abccf1c4 abccf1c4 daeef1c5 daeef1c5 daeef1c5
+0 01 40000090 001 00000100 0bcca31e 0bcca31e 2c49b425 2c49b425 abccf026
+1 01 40000380 010 00000001 d7b51400 1001 8cff3a12 0111 00000380 0008 4375b828 33ad7b09
+1 01 4000042a 000 00001100 5d370000 0000 5d370000 0000 2514e1c3 0001 2514e1c3 0010 2514e1c3 0100 2514e1c3 0000 7c4cafbc 0001 7c4cafbc 0000 7c4cafbc 0000 7c4cafbc 0000 00789e87 0001 00789e87 0010 00789e87 0100 00000428 0010 deb3da09 59d504df 9cc0dc41 c816ef4f
+0 01 40000230 001 00001110 abccf08c abccf08c daeef08d daeef08d abccf08e abccf08e daeef08f daeef08f abccf090 abccf090 daeef091 daeef091 abccf092 abccf092 daeef093
+0 01 400005a8 010 00000101 abccf16a daeef16b abccf16c daeef16d abccf16e daeef16f
+1 01 4000025a 001 00000101 1a3c0000 1100 18dc4477 0011 18dc4477 1100 99d0abbd 0011 99d0abbd 1100 000096e5 0011 00000258 0010 f38d5210 6d9f473b b0141a1d 7a58fbdb
+0 10 40000159 000 00000001 abccf056 abccf056
+0 01 400002bc 001 00001001 daeef0af daeef0af abccf0b0 abccf0b0 daeef0b1 daeef0b1 abccf0b2 abccf0b2 daeef0b3 daeef0b3
+0 01 40000554 010 00000000 daeef155
+0 10 40000570 010 00000011 abccf15c daeef15d abccf15e daeef15f
+0 10 40000548 010 00000011 abccf152 daeef153 abccf150 daeef151
+0 01 400006ac 010 00001001 daeef1ab abccf1ac daeef1ad abccf1ae daeef1af abccf1b0 daeef1b1 abccf1b2 daeef1b3 abccf1b4
+1 01 4000041f 000 00000101 ad000000 1000 a12bb7de 0001 a12bb7de 0010 a12bb7de 0000 a12bb7de 1000 0000005b 0001 00000418 0010 c53c246f aa626f3c 8f599dcb f87d47d0
+1 01 4000073c 010 00001011 900df88e 0111 2f057ab8 0111 178162f5 0111 d98985a7 0001 3e12e4ac 0101 75073ed2 0111 42e43b7d 1111 5b49e660 1111 eb333f06 0011 ea338672 1111 1df98fba 1111 f7b8bc90 1111 00000738 0038 86055ab1 d275ea2a 1f395171 b365d1fc e93cc7f2 bcc2d566 f2ad30fe 56f4ebc8 230643e8 40577976 8db6d972 254d107f ea4f2daa e8c2ffc0
+1 01 400004c8 010 00001011 8745a0d9 1011 3bb5a606 1110 05587bbb 1111 e8fc8417 1010 ed608f27 1111 14028fe2 1100 be222d93 1111 c2ddcfc1 0111 6f4f3f2e 1010 51ea3ccc 1111 74ceff95 1011 40f55b4e 0111 000004c8 0030 c1ba84fc 8118c04b 2b1f7193 fc5b3064 a9063691 a59e7cdb a15febb9 d651d88d d3d851d2 743ccce2 0892185f afdb6db6
+1 01 40000350 000 00000001 00003448 0001 00003448 0000 00000350 0008 056e5092 43ad79b6
+0 10 4000041e 001 00000011 adeef107 abccf106 abccf106 adeef107
+0 01 40000680 001 00001111 abccf1a0 abccf1a0 daeef1a1 daeef1a1 abccf1a2 abccf1a2 daeef1a3 daeef1a3 abccf1a4 abccf1a4 daeef1a5 daeef1a5 a919f1a6 a919f1a6 daee64af daee64af
+0 01 400000d4 010 00000001 daeef035 abccf036
+0 10 4000004e 000 00001111 daeef013 daeef013 abccf010 abccf010 abccf010 abccf010 daeef011 daeef011 daeef011 daeef011 abccf012 abccf012 abccf012 abccf012 daeef013 daeef013
+1 01 4000000c 001 00001111 164cbaae 0011 164cbaae 1100 6fefdd4a 0011 6fefdd4a 1000 3aa37fb5 0011 3aa37fb5 1100 50d8ecb0 0011 50d8ecb0 0100 45ab52f1 0001 45ab52f1 1000 f8e38345 0010 f8e38345 1100 dd5819de 0011 dd5819de 1100 46d4df05 0010 46d4df05 0100 00000008 0028 fd2a367c 2e991591 fd10dcc0 419ec9ac b4e1e73b 45793d8f 5ceb0e80 d93026dd b5070ac8 056fa06c
+1 01 400000f4 010 00000011 cb1bcec4 0011 1b9afad7 0111 52894139 1000 49244a62 1011 000000f0 0018 9678d3db 3308f28e f179d15f f0b9ccb9 6dd10f8d 759d46b2
+1 01 400001cc 010 00001110 cab846ac 1111 f95107c1 1101 5434a5cb 1101 85749ad6 0111 d13f76da 1111 db850acd 1111 1e4ec2f6 1111 4728180e 1110 bc6ba5aa 1110 87a48b8e 1111 cb9e9f84 0111 3e447b21 1110 3bee2c6e 1111 05e3a5c3 1101 708b9631 1111 000001c8 0040 3fac1b5c f71fad65 a168cb43 8d0faf6e 891eed66 fc0632bc 07bfd61e 930b91a4 1799e05c 97828957 cb04ba1e 4ef432eb 9a1c2b55 ea61f9fa 49db8719 01bb97a6
+0 10 40000024 010 00000111 dd5819de abd4df0a daeef00b abccf00c daeef00d abccf00e daeef00f f8e38308
+1 01 40000448 001 00000001 a06d120d 0001 a06d120d 1100 00000448 0008 7c794413 786e23c6
+1 01 4000022c 010 00001101 399cb36b 1001 197d1af9 1111 85c143e8 1111 5a5ed6f3 1111 97ad4795 1111 eb131f4a 1111 5bac5195 0111 e2648fce 1111 ab762fa5 1101 7537c160 1001 050ff578 0111 e52dd6ff 1011 0d00a63f 0111 011d394d 1111 00000228 0040 558f787a 74d76401 330c0f5f b94cff55 92d21ba3 9a005d8a 7e020a36 d4331f88 aeb63102 739303f6 1d6861ad 0327150b 5bba9be8 1aafe291 2fb359c9 39f716bd
+1 01 400000f8 010 00001101 6d6028ee 1011 2da04f7b 0011 dc981301 1011 4091f823 1011 7cd28c11 1101 dec83174 1111 83593b22 1111 610331d9 1111 29ade946 1001 990bb758 1111 bad90cd7 1101 66ba7d63 1111 e20a3aef 1101 f21706bb 1011 000000f8 0038 c46f0e3e 002af903 69268155 67c6f6a0 ac871e2d b16ba183 3640fcfa e2621c80 68c3e041 1975c976 aff95be4 02ce2fe6 d9830633 7ca052e2
+0 10 40000622 000 00000011 abccf188 abccf188 abccf188 abccf188
+0 10 40000256 000 00000001 da0ff578 da0ff578
+0 10 4000044c 010 00001111 daeef113 abccf114 daeef115 abccf116 daeef117 abccf118 daeef119 abccf11a daeef11b abccf11c daeef11d abccf11e daeef11f abccf110 daeef111 a06df10d
+1 01 40000604 010 00000010 9bb46bb1 1111 515066eb 1110 55698355 0110 00000600 0010 7c532e6f d020dabd 4a4304fc b476f4f2
+1 01 40000194 000 00000000 000000f3 0001 00000190 0008 8d786f6a 97f81dd7
+0 01 4000033e 001 00001111 daeef0cf abccf0d0 abccf0d0 daeef0d1 daeef0d1 abccf0d2 abccf0d2 daeef0d3 daeef0d3 abccf048 abccf048 daeef0d5 daeef0d5 abccf0d6 abccf0d6 daeef0d7
+0 01 400001f4 010 00000011 da9e9f84 3e447b7e 3bee2c6e 05e3f0c3
+0 10 400000d0 010 00000111 abccf0f1 daeef035 abccf036 daeef037 abccf030 daeef031 c4068e59 d390d435
+0 10 400002c8 001 00001111 abccf0b2 abccf0b2 daeef0b3 daeef0b3 abccf0b4 abccf0b4 daeef0b5 daeef0b5 abccf0b6 abccf0b6 daeef0b7 daeef0b7 abccf0b0 abccf0b0 daeef0b1 daeef0b1
+1 01 40000454 010 00000101 6bd992f8 0101 bba17b4a 1110 156ea002 1100 abe82988 1111 e7bfb327 1001 f66d3017 1111 00000450 0020 49137fc7 0eabbcf0 756002e7 0aa1baea 27408829 4d15986c a27e5cba 752dc444
+0 10 400000bc 010 00000011 daeef02f abccf02c daeef02d abccf02e
+1 01 40000688 000 00001110 49b9c8f0 0000 49b9c8f0 0010 49b9c8f0 0100 49b9c8f0 1000 6716ab91 0001 6716ab91 0000 6716ab91 0100 6716ab91 1000 d21e8d04 0000 d21e8d04 0010 d21e8d04 0100 d21e8d04 1000 002ccac0 0001 002ccac0 0010 002ccac0 0100 00000688 0010 03ebb6b8 02bcb5c5 7a63291b 44775c8c
+1 01 40000210 010 00000110 553eeab5 1110 02cc8f13 1111 58ad160f 0100 c4fd0082 1111 244bf69e 1101 7cfa65df 1110 c04fba1c 1111 00000210 0020 b449aa06 2e520378 36a60ecc 8f75ac08 398ed865 e5d3e113 2afe16d1 17bf032b
+1 01 400006c6 000 00001010 50af0000 0100 50af0000 1000 17e3c11d 0001 17e3c11d 0010 17e3c11d 0100 17e3c11d 1000 6f9e739d 0001 6f9e739d 0010 6f9e739d 0100 6f9e739d 1000 000000d3 0001 000006c0 0018 91feea35 612a34b7 26284193 e1077432 a844b6e1 c0b1ea33
+0 01 4000010c 000 00000000 dec83174
+0 01 400007c8 001 00000010 abccf1f2 abccf1f2 daeef1f3
+1 01 4000006c 001 00001110 42d2640a 0011 42d2640a 1100 87a0e253 0010 87a0e253 0100 7f2dada5 0011 7f2dada5 1100 a522c57e 0011 a522c57e 1100 5c2cd0c0 0011 5c2cd0c0 1100 36494d5c 0011 36494d5c 1100 36dc4568 0011 36dc4568 1100 0000bb6a 0011 00000068 0028 8b9c87aa 446b24cf bb1da6fe c5233bdd 5e538832 0683d542 640980d7 d427eacc 3603badd cb873cec
+1 01 400002ae 000 00001010 e8d80000 0100 e8d80000 0000 c0dabda2 0001 c0dabda2 0000 c0dabda2 0100 c0dabda2 1000 c5632cf9 0000 c5632cf9 0010 c5632cf9 0100 c5632cf9 1000 00000072 0000 000002a8 0018 b158798c 172b51ff 0bd02e90 cae2aafd 2a6f696b b1fe8874
+0 01 400004a4 010 00000101 daeef129 abccf12a daeef12b abccf12c daeef12d abccf12e
+1 01 400005b4 010 00000110 b49198a7 1110 04eccf9b 0111 6d73b6e0 0011 5d0a41b7 1100 616f9339 1111 a5fcf8e3 1110 c2fa27eb 0111 000005b0 0020 967dc9d8 e6fed695 7ccc7051 b853bd8e c90ec9ed 606aab9d 822fc590 b53b1371
+1 01 40000630 010 00001010 0ae50a7b 1111 cc4cb972 0111 8156e72f 0011 08515ea5 1110 6c77c322 1101 51fc7025 1101 86adba30 1110 1605bd70 0110 f171f8c2 1011 fdc3f8c5 0111 b5f3a0b6 1111 00000630 0030 3a27c06e 01206376 3f68b19a 2ebb18cc 723f04af f066e50b 207ed801 61a97c0f e1a5ec0c 79400b28 ecbaf442 165a456d
+1 01 4000041e 001 00001100 afe30000 1100 6620fc1f 0001 6620fc1f 1000 caf7ae07 0011 caf7ae07 1100 b624f3b6 0010 b624f3b6 1100 789d2e27 0011 789d2e27 1100 93dce3e3 0011 93dce3e3 1100 9333455a 0011 9333455a 0100 00000418 0020 52f2fa65 b9208f3b 38066edb 8215f6fa 4adc3cd6 1ea6158e ccd62b22 31bdbe29
+0 10 400000c4 000 00000011 daeef031 daeef031 daeef031 daeef031
+1 01 400006bc 010 00000111 480a506e 1011 194dcd3b 1101 7927216a 0111 0f18082b 0111 fcc9cd24 1110 d805102b 1111 c146f353 1101 bbaa9884 1000 000006b8 0028 3897e258 1195f245 4b162076 47061f22 0e2e99f5 2e0ccd0b cf9ffe74 cb74b3ca 617c9844 be381325
+0 01 40000452 000 00001010 abccf114 abccf114 dad9f1f8 dad9f1f8 dad9f1f8 dad9f1f8 bba17b16 bba17b16 bba17b16 bba17b16 156ef117
+1 01 4000008a 001 00001011 f03a0000 1000 87f45750 0000 87f45750 1100 76248a72 0001 76248a72 1000 c7341e80 0011 c7341e80 1100 8717849f 0000 8717849f 0100 e19c77b6 0011 e19c77b6 0100 000099b1 0011 00000088 0020 25b41cc9 b5f91f9b 78b16df9 9ae4fa80 e469e4b8 93557e99 4d909955 99305c98
+1 01 4000026e 001 00001111 65bd0000 0100 a9b28de3 0011 a9b28de3 0100 a33dc16b 0011 a33dc16b 1100 c4a3398f 0010 c4a3398f 1100 cb40db62 0011 cb40db62 1100 92a4978e 0000 92a4978e 1100 cc18ba17 0011 cc18ba17 0100 9e60c54b 0011 9e60c54b 0100 0000d419 0011 00000268 0028 91bde3c8 a56c5e35 ed52e09b 1dfee2d9 2156d1bc 686d940f 389a09d3 9261d9d6 3d76be3e 04be2552
+0 10 400006e0 001 00001111 abccf1b8 abccf1b8 daeef1b9 daeef1b9 abccf1ba abccf1ba daeef1bb daeef1bb abccf1bc abccf1bc daeef1bd daeef1bd abccf1be abccf1be daeef1bf daeef1bf
+0 01 400000dc 010 00001011 daeef037 abccf038 daeef039 faccf0ea c3eef017 ab7b57b7 da83cec4 6d9a28ee 522a4f7b dceb1301 408bf823 7cd21911
+0 01 40000316 001 00000011 daeef0c5 abccf0c6 abccf0c6 daeef0c7
+1 01 40000740 001 00001001 bd05883a 0000 bd05883a 1100 d5b0698d 0001 d5b0698d 0000 7179101f 0011 7179101f 1000 07213c08 0011 07213c08 0100 d6dd9559 0011 d6dd9559 1100 00000740 0018 b4d12433 166e6ec8 f13a38ae 4730a81d ec93ae0e 66fc4503
+0 10 40000430 001 00001111 93dce3e3 93dce3e3 da33455a da33455a abccf10e abccf10e daeef10f daeef10f 66ccb71f 66ccb71f caf7ae07 caf7ae07 b624f30a b624f30a 789d2e27 789d2e27
+0 01 400003c0 010 00000011 abccf0f0 daeef0f1 abccf0f2 daeef0f3
+0 10 400002cf 000 00000011 daeef0b3 daeef0b3 daeef0b3 daeef0b3
+1 01 400001e0 010 00001001 a359d2a4 1101 858cfb98 1101 925155a2 1111 f122bcc7 1000 5c5728a8 1011 d032ea8d 1111 1b643dfe 1101 036192e1 1111 69c42907 1011 ae8a98d1 1111 000001e0 0028 448ffbb2 c96f7d59 c2f764bd d91de5ef 0de43f1b ea8458f5 acd1a846 11b7c9c6 4fcb1de2 50c76e9a
+1 01 4000003a 001 00001100 066d0000 1100 4ed311c2 0001 4ed311c2 0000 d1193d1c 0011 d1193d1c 1100 5b2f905a 0011 5b2f905a 0100 0790e6d5 0000 0790e6d5 1100 0fd9357f 0010 0fd9357f 1100 10dba530 0001 10dba530 1000 00000038 0020 33d31833 f46a2550 c4220ec9 5bab69e9 8420ae5b efd18ff3 33127ab7 2a8c0521
+1 01 40000331 000 00001111 e3c53200 0010 e3c53200 0100 e3c53200 1000 628781a8 0001 628781a8 0000 628781a8 0100 628781a8 1000 61c8b782 0001 61c8b782 0010 61c8b782 0100 61c8b782 1000 c91f8366 0001 c91f8366 0010 c91f8366 0000 c91f8366 0000 00000058 0000 00000330 0018 f0a0e3bc 3cc44bdc 4a0adcbc b62969be f8c60d00 2dd028b5
+0 01 4000000c 000 00000111 164cbaae 164cbaae 164cbaae 164cbaae 6f77dd4a 6f77dd4a 6f77dd4a 6f77dd4a
+0 01 400003a4 010 00000111 daeef0e9 abccf0ea daeef0eb abccf0ec daeef0ed abccf0ee daeef0ef abccf0f0
+1 01 40000670 000 00000000 000000be 0001 00000670 0008 8ce99446 693934ea
+0 10 40000256 000 00001111 da0ff578 da0ff578 e53cd6ff e53cd6ff e53cd6ff e53cd6ff 1800a63f 1800a63f 1800a63f 1800a63f 75ccf060 75ccf060 75ccf060 75ccf060 da0ff578 da0ff578
+0 01 400003e2 000 00001111 abccf0f8 abccf0f8 daeef0f9 daeef0f9 daeef0f9 daeef0f9 abccf0fa abccf0fa abccf0fa abccf0fa daeef0fb daeef0fb daeef0fb daeef0fb abccf0fc abccf0fc
+0 10 40000014 010 00000001 3aa37fb5 6f77dd4a
+0 10 4000018c 010 00001111 daeef063 abccf064 daeef0f3 abccf066 daeef067 abccf068 daeef069 abccf06a daeef06b abccf06c daeef06d abccf06e daeef06f abccf060 daeef061 abccf062
+0 10 400001b0 001 00001111 abccf06c abccf06c daeef06d daeef06d abccf06e abccf06e daeef06f daeef06f abccf068 abccf068 daeef069 daeef069 abccf06a abccf06a daeef06b daeef06b
+1 01 400000d8 001 00001101 fb910c12 0011 fb910c12 1100 0dd0faf6 0011 0dd0faf6 0100 cf2d9546 0011 cf2d9546 0000 e4c5445a 0011 e4c5445a 1000 54c86cf0 0011 54c86cf0 0100 de1a5d8e 0011 de1a5d8e 1100 c0879ebc 0011 c0879ebc 1100 000000d8 0020 c1397a0f ebded1cd 0cc11136 c020bcd7 b689b495 c9372b65 4446ae43 750e5ac6
+1 01 40000666 001 00001001 41140000 1100 a042a154 0011 a042a154 0000 53d59acf 0011 53d59acf 1000 69d22298 0011 69d22298 1100 78ad3664 0001 78ad3664 1100 0000983d 0011 00000660 0020 e367e775 7c6f09ce 5fd3bf1c 5970e914 77b016ab 99df0c2d 0f506257 66d1c807
+0 01 40000707 000 00000111 daeef1c1 abccf1c2 abccf1c2 abccf1c2 abccf1c2 daeef1c3 daeef1c3 daeef1c3
+0 01 40000494 001 00000001 daeef125 daeef125
+1 01 40000576 001 00000000 8c360000 1100 00000570 0008 efb3e794 e8148053
+0 01 40000362 001 00001100 abccf0d8 daeef0d9 daeef0d9 abccf0da abccf0da daeef0db daeef0db abccf0dc abccf0dc daeef0dd daeef0dd abccf0de abccf0de
+1 01 400001f4 010 00000000 f9fd3d3e 1111 000001f0 0008 40239142 397fb29b
+0 10 400000f8 010 00001111 6d9a28ee 522a4f7b abccf030 daeef031 c4068e59 d390d435 abccf0f1 daeef035 fb910c12 dad0faf6 abcc9546 e4ee445a fac86cf0 de1a5d8e c0879ebc da83cec4
+0 10 400001e4 010 00000011 858cc298 925155a2 f16ba57b a3590aa4
+1 01 400007ce 001 00001101 86060000 1100 f8862abf 0011 f8862abf 1100 d3d75e68 0011 d3d75e68 1100 18f503a3 0001 18f503a3 1100 cef85289 0011 cef85289 1100 02857efe 0001 02857efe 1100 96fb8e8e 0010 96fb8e8e 1100 00002702 0010 000007c8 0028 9937d5d6 cc94aef5 a2e1ffa7 6c0623c0 3256aced b1bd0ea0 a6009346 b5c38bbf 9c47cbb9 b0f29ecb
+0 01 40000146 001 00000100 daeef051 abccf052 abccf052 daeef053 daeef053
+1 01 40000248 010 00000001 0c9b1ed6 1000 3940ab4c 1110 00000248 0008 4b85c81a 1e58fb3e
+0 01 400006d7 000 00001110 c146f153 bbccf1b6 bbccf1b6 bbccf1b6 bbccf1b6 daeef1b7 daeef1b7 daeef1b7 daeef1b7 abccf1b8 abccf1b8 abccf1b8 abccf1b8 daeef1b9 daeef1b9
+0 10 400007f2 001 00000001 abccf1fc abccf1fc
+0 10 400002e1 000 00001111 abccf0b8 abccf0b8 abccf0b8 daeef0b9 daeef0b9 daeef0b9 daeef0b9 abccf0ba abccf0ba abccf0ba abccf0ba daeef0bb daeef0bb daeef0bb daeef0bb abccf0b8
+1 01 400005b0 010 00000000 020e7cf1 1110 000005b0 0008 2710678b 00baacf0
+1 01 400004cc 010 00001111 c8712ef8 1011 eaeec914 1100 f46e4f12 1110 65c7d014 1011 ba1a51c1 1111 96e0fac6 1110 068d930d 1111 9780bb98 1111 f1705137 1111 ce61229e 0111 5110fd43 1110 87738613 1010 fe717043 1011 ecb02e28 1001 6164aa94 1111 078b1fdf 1110 000004c8 0048 7d5b72f0 bcb4abc7 143663b9 05332107 29dea8d7 c68867e8 69371567 59c9f0a1 45c3f38b 2d674c16 af12d37e e2b85743 9aa996bc ec405af6 3b34de52 7fa6d445 027d4d39 2dc0eb38
+1 01 400006d0 010 00000000 784d85b4 0111 000006d0 0008 8e12c8cc a8e0c629
+0 01 400007bc 000 00000100 daeef1ef daeef1ef daeef1ef daeef1ef abccf1f0
+1 01 4000053f 000 00001100 2e000000 1000 c93449f1 0000 c93449f1 0010 c93449f1 0100 c93449f1 0000 a63360dd 0001 a63360dd 0010 a63360dd 0000 a63360dd 1000 d7f5835e 0001 d7f5835e 0010 d7f5835e 0100 d7f5835e 1000 00000538 0018 115cbe7a fc040ea6 e1045901 c628cb5e 3f450ad8 80445e18
+0 01 400003dc 010 00001110 daeef0f7 abccf0f8 daeef0f9 abccf0fa daeef0fb abccf0fc daeef0fd abccf0fe daeef0ff abccf100 daeef101 abccf102 daeef103 abccf104 daeef105
+0 01 40000332 000 00000111 e3c532cc e3c532cc 6287f0a8 6287f0a8 6287f0a8 6287f0a8 61c8b782 61c8b782
+1 01 4000048c 000 00001010 dab1a877 0000 dab1a877 0010 dab1a877 0100 dab1a877 1000 81cc65e6 0001 81cc65e6 0000 81cc65e6 0100 81cc65e6 1000 0006cb71 0001 0006cb71 0010 0006cb71 0100 00000488 0010 b688ead5 d04d2c51 c742f61f 3e522708
+1 01 40000164 010 00000011 67ccbff7 1111 8d62dd94 0110 5e895ce3 1111 7e1fae4f 0111 00000160 0018 b7fedd3c d6b1cd69 bae59790 721ef4c4 df6ce131 e692566e
+0 01 40000736 000 00001100 da52fb0e da52fb0e b4fcb256 b4fcb256 b4fcb256 b4fcb256 da0df88e da0df88e da0df88e da0df88e bd057ab8 bd057ab8 bd057ab8
+1 01 400007a4 001 00001010 69444aef 0011 69444aef 1100 ca46dd66 0011 ca46dd66 0100 d6aa24ba 0011 d6aa24ba 1100 b7a0d388 0010 b7a0d388 1100 7d732fd2 0001 7d732fd2 1000 0000a37e 0010 000007a0 0020 b1f8b262 7cdd4956 339aa259 bcee7f16 769df31e 5d57a626 ce4696d8 99c576c1
+0 01 400005b4 000 00000100 b491986d b491986d b491986d b491986d abeccf9b
+0 10 40000700 010 00000111 abccf1c0 daeef1c1 abccf1c2 daeef1c3 abccf1c4 daeef1c5 abccf1c6 daeef1c7
+0 10 40000476 001 00000011 daeef11d abccf11c abccf11c daeef11d
+1 01 400001ea 001 00001101 7a090000 1000 cb11a3e5 0010 cb11a3e5 0100 a242967a 0010 a242967a 0100 98fe9244 0001 98fe9244 1000 379695d3 0001 379695d3 1100 271061a2 0001 271061a2 1100 ad173e0b 0011 ad173e0b 1100 00005da5 0011 000001e8 0020 c305fb5f 3cce145b 271234cb 2ab771ee 10604a52 d92c39d8 799e01e9 c3b317fa
+0 01 40000386 001 00000110 daff3a12 abccf0e2 abccf0e2 daeef0e3 daeef0e3 abccf0e4 abccf0e4
+0 10 400005e0 010 00000111 abccf178 daeef179 abccf17a daeef17b abccf17c 449b530b 0dcd3d89 daeef17f
+1 01 400000c0 001 00000001 9efd4ff9 0001 9efd4ff9 1000 000000c0 0008 8ab8cf85 22b3c8be
+0 01 40000108 010 00000110 7cd21911 dec83174 83593b22 610331d9 290e6846 990bb758 bad98bd7
+1 01 40000550 010 00000111 bed6d6eb 1011 d070caf6 1011 675db2cd 1111 051b85c3 1101 e08215ed 1110 55246fe9 1111 f575414e 0010 c3dd356e 1110 00000550 0020 3aaddde2 24f6d280 05dacfd7 de65bda3 0bf3bb2a 59ac623c 15982987 45cbbba2
+1 01 4000054c 010 00001000 e3bce173 1110 7fd645a3 1011 0d1bd29f 0100 e727541a 1111 18696f01 1111 cea57fd5 1101 86a001a9 1111 d084c0f1 1110 f6d82d3f 1111 00000548 0028 80e34cbb 1a9bb941 37682a8a 314ebc77 93edae69 1c8bfe91 a1ee7385 52bcf52d 950dc1a6 a40606b8
+0 01 4000009e 001 00001100 da9c77b6 abcc99b1 abcc99b1 daeef029 daeef029 abccf02a abccf02a daeef02b daeef02b abccf02c abccf02c daeef02d daeef02d
+0 10 400000b0 010 00000001 abccf02c daeef02d
+1 01 400005c0 000 00000010 00e0d9c2 0000 00e0d9c2 0010 00e0d9c2 0000 000005c0 0008 48e9355f a4a4c036
+1 01 400003c4 000 00001010 3104336b 0001 3104336b 0000 3104336b 0100 3104336b 1000 0feb4f74 0000 0feb4f74 0010 0feb4f74 0000 0feb4f74 1000 003117c2 0001 003117c2 0010 003117c2 0100 000003c0 0010 a9442d51 e3130ae5 bf5ae875 87b6d23d
+1 01 400003d0 010 00001111 b8083f9d 1111 d6e89dca 0111 87555fd7 0111 6a3d74e7 1110 d526287e 1100 17ddf488 1111 a5ce061b 1100 e603c810 1100 2780ca3c 1001 7c77eef0 1101 e9868e79 1001 d6e37734 1101 375a540f 1101 2b8a4e34 0101 d34bcb54 1101 530348d3 0111 000003d0 0040 9ac9a2bc bd2f4ff5 00d21eb4 ac7c876a 4cb0cc9f 1c0f9e4f 881afe9b ffa2a729 f0b605a9 8c62fa1d c9e498b0 d1b1e932 2123aa0e b2ae98a5 10963b34 0d38837c
+0 01 400001fe 000 00001101 271092a2 271092a2 ad173e0b ad173e0b ad173e0b ad173e0b ae8a5da5 ae8a5da5 ae8a5da5 ae8a5da5 abccf082 abccf082 abccf082 abccf082
+0 10 40000494 010 00001111 da06cb71 abccf126 daeef127 abccf128 daeef129 abccf12a daeef12b abccf12c daeef12d abccf12e daeef12f abccf120 daeef121 abccf122 dab1a823 81ccf1e6
+1 01 4000046c 010 00001111 bdbdeb0e 1101 ed38b18e 1001 1f582d3f 1111 4b3a76f5 0001 0b5b1f8e 1101 f5d6e1c9 0101 1b53903a 1111 4cbb483d 1010 fcf2f2b3 1110 f00b7aca 1111 d07416c3 1011 9a4cd366 1001 61411ac8 1011 d71bc7dc 1111 439fe028 1111 61752d9c 1011 00000468 0048 965f77ce 5198dc82 2a9c775a f8ef2fb1 7c772f70 88b8bbb5 004bae7e 78df7f06 27e5a673 20476191 c916b425 d80771b7 a03e5035 e7ddb807 f8479fcc 86fae84b c6c04e26 96707cdd
+0 10 400004d8 001 00001111 6560d014 6560d014 ba1a51c1 ba1a51c1 abccf130 abccf130 daeef131 daeef131 87cca0d9 87cca0d9 c8b52ef8 c8b52ef8 eaee7bbb eaee7bbb f46e4f35 f46e4f35
+1 01 40000723 000 00001011 81000000 1000 1e581b14 0001 1e581b14 0000 1e581b14 0000 1e581b14 1000 3d780c3a 0000 3d780c3a 0010 3d780c3a 0100 3d780c3a 1000 00dcb6e4 0001 00dcb6e4 0010 00dcb6e4 0000 00000720 0010 d7b12673 b6a2fb10 4514faaa 5ea55860
+1 01 40000476 001 00001000 d89b0000 1000 3882494d 0011 3882494d 1000 0986a863 0010 0986a863 1100 9ebc2d37 0000 9ebc2d37 1100 0b1b5f50 0011 0b1b5f50 1100 00000470 0018 da56e8f8 9f4f94f2 cf6c78e4 7fb442b2 dca8b97a 93bf070d
+0 01 40000794 000 00000110 daeef1e5 daeef1e5 daeef1e5 daeef1e5 abccf1e6 abccf1e6 abccf1e6
+1 01 400005c0 010 00000000 160172d2 1001 000005c0 0008 83b9a0a3 4e87ad08
+1 01 400000b8 000 00001010 dd3cd4bc 0001 dd3cd4bc 0000 dd3cd4bc 0100 dd3cd4bc 0000 b6703598 0001 b6703598 0010 b6703598 0000 b6703598 1000 002bd28d 0000 002bd28d 0010 002bd28d 0100 000000b8 0010 d443d3df 5fb3ac03 212a98cc 4effcd1a
+1 01 400001bc 010 00001000 39b3f688 1101 db40eac2 1101 cc26666b 1111 1155dbba 0111 912759b2 1110 dd91b441 0111 73df952d 1111 6b051ff3 0011 029bee44 1011 000001b8 0028 7fe67008 6e41f86f 7649b6d4 3a65390e e819f7e5 5228ed56 81f022dc c582085f 0a127829 e24e1e8a
+0 10 40000659 000 00000011 b5f3a0b6 b5f3a0b6 b5f3a0b6 b5f3a0b6
+0 10 400004c6 001 00001111 daeef131 87cca0d9 87cca0d9 c8b52ef8 c8b52ef8 eaee7bbb eaee7bbb f46e4f35 f46e4f35 6560d014 6560d014 ba1a51c1 ba1a51c1 abccf130 abccf130 daeef131
+1 01 40000494 000 00000010 0037fd6a 0001 0037fd6a 0010 0037fd6a 0100 00000490 0008 eb58a9fc 3f92a6b6
+1 01 400003d2 000 00000011 eda30000 0000 eda30000 0000 00000cb5 0001 00000cb5 0010 000003d0 0008 32659a35 79757178
+0 10 400005dc 010 00000111 daeef177 160ad9d2 616f9339 a5fcf872 dafa27eb abccf174 daeef175 abccf176
+1 01 40000000 010 00001101 d2502646 0111 eb9acb11 1110 17d2599a 1110 d07fc3b8 1111 2bac08d5 1011 47d6bc18 0011 f50df116 1011 6179783a 0110 15424719 1011 7d798606 1101 6000730d 1101 f29e29a0 0011 d3568103 0001 d18565b4 1101 00000000 0038 617b2cef 20cdc1d7 a24ce0a2 45f1eefb 1fdee332 f239eef1 357b79da 49b47a36 3d8fb36a 76f35bdb 2e59073c f70c9d43 47fce4d7 c1d4232a
+0 01 4000054b 000 00001010 d7f5835e e3bce153 e3bce153 e3bce153 e3bce153 7fcc45a3 7fcc45a3 7fcc45a3 7fcc45a3 d01bcaf6 d01bcaf6
+1 01 40000580 010 00000011 c47609e3 1110 cd6419d4 0111 d49bdfbb 1011 8900c394 1010 00000580 0010 a6164823 ac86bd47 b22ed5d7 2297ae2f
+0 01 4000017b 000 00001011 abccf05e daeef05f daeef05f daeef05f daeef05f abccf060 abccf060 abccf060 abccf060 daeef061 daeef061 daeef061
+0 01 40000068 000 00000111 76c8101c 76c8101c 76c8101c 76c8101c 42d2640a 42d2640a 42d2640a 42d2640a
+0 10 40000134 010 00000011 38ee6df2 abccf04e daeef04f 1ba1d84c
+1 01 4000006a 001 00000100 72b10000 1100 955fb7ad 0011 955fb7ad 0100 e27c184d 0001 e27c184d 0100 00000068 0010 19776149 0f9ee966 fa31d50f 55557a96
+0 01 400001fe 000 00000001 271092a2 271092a2
+1 01 4000032c 001 00000000 00000292 0010 00000328 0008 e2a880bc 12dea90f
+0 10 400007b4 010 00000001 7deef1d2 b7a0d3ec
+1 01 4000015b 000 00000110 32000000 1000 7894a713 0001 7894a713 0010 7894a713 0100 7894a713 1000 0000e653 0000 0000e653 0010 00000158 0010 62347070 90c79baa 57119905 9abba3b4
+0 10 4000004c 010 00001111 0fd93513 10ccf030 daeef015 abccf016 b961e617 ab36fda1 d2a3b8d1 72b1101c 425fb7ad 637ce24d 7f2dada5 a522c57e 5c2cd0c0 d1193d1c da2f905a 0790f012
+1 01 400005cb 000 00001111 08000000 0000 bb6d5c79 0000 bb6d5c79 0010 bb6d5c79 0100 bb6d5c79 1000 9b452e48 0001 9b452e48 0010 9b452e48 0100 9b452e48 1000 4e868d50 0000 4e868d50 0010 4e868d50 0100 4e868d50 1000 0008a4e9 0001 0008a4e9 0010 0008a4e9 0000 000005c8 0018 1a77610b aa2ad6a7 d5e84b3a 954f8c9d 3da9fbaf 39f7b08a
+1 01 400003c4 010 00000110 92b71ba4 1111 14db2d3e 1111 98f561a7 1110 37e8537d 1110 8643620b 0111 56cc39c3 1111 9759381b 1011 000003c0 0020 bad29289 70cb3269 ed556e7a 52e2bca3 0d4e247b 828eccec b5a076ca 3305ed13
+1 01 400003fc 001 00000000 00008373 0010 000003f8 0008 0849706c a924e810
+1 01 40000184 010 00001101 188e3feb 1110 8abdc6e0 0110 3097f32d 1111 c1971904 1011 1a9cf423 1001 623b71fe 1111 dc6c5830 1011 67c6a492 1110 35dcb7a6 1110 461f343e 1101 7be38929 1111 75b38abd 1010 2bba34b0 1111 03eb8464 1010 00000180 0040 ce8b8727 f5c932cc 6fb0fe9f 19e51a7e 86e6a8bd 7f0378f7 7066305a 17771150 99093cf6 30614077 c0aa5230 a79b801c e4fbcb26 c72a6164 58ae54c1 34e5b4e0
+0 01 400000e6 000 00001100 e4ee445a e4ee445a fac86cf0 fac86cf0 fac86cf0 fac86cf0 de1a5d8e de1a5d8e de1a5d8e de1a5d8e c0879ebc c0879ebc c0879ebc
+1 01 400005cd 000 00000111 ed95f200 0000 ed95f200 0100 ed95f200 1000 1eb8cea6 0000 1eb8cea6 0010 1eb8cea6 0100 1eb8cea6 1000 00000003 0000 000005c8 0010 29c3b14f 42b68f75 6a66e4d8 43842c3e
+0 01 40000757 000 00001001 42e43b7d 5b49e660 5b49e660 5b49e660 5b49e660 daee3f06 daee3f06 daee3f06 daee3f06 ea338672
+0 10 400004b0 010 00000001 abccf12c daeef12d
+0 01 400005f8 010 00000000 0dcd3d89
+1 01 40000678 010 00000101 c927321a 0111 65277523 0001 41297fb0 1111 8e228123 1101 10b29ce5 0010 59478aa3 1101 00000678 0018 6545ac69 581a4aca a6f653b7 0bf2e308 45574e4d f8b035ba
+0 10 4000036c 001 00000011 daeef0db daeef0db abccf0da abccf0da
+1 01 400006ac 000 00001000 070049d5 0000 070049d5 0010 070049d5 0100 070049d5 1000 5d8b3617 0001 5d8b3617 0010 5d8b3617 0100 5d8b3617 1000 00000083 0000 000006a8 0010 68fc4071 2fe87682 4bc4d2cb dfcdeab0
+0 01 4000011a 000 00000101 290e6846 290e6846 990bb758 990bb758 990bb758 990bb758
+0 01 400005b2 000 00001111 020e7c6c 020e7c6c b491986d b491986d b491986d b491986d abeccf9b abeccf9b abeccf9b abeccf9b daeeb6e0 daeeb6e0 daeeb6e0 daeeb6e0 160ad9d2 160ad9d2
+0 10 400002c8 010 00000001 abccf0b2 daeef0b3
+0 10 4000056e 000 00000001 f6d82d3f f6d82d3f
+0 10 400002b8 001 00001111 abccf0ae abccf0ae daeef0af daeef0af abccf0a8 abccf0a8 daeef0a9 daeef0a9 abccf0aa abccf0aa dad8f0ab dad8f0ab c0daf0a2 c0daf0a2 c5632cad c5632cad
+1 01 400007c0 010 00001110 83487750 1111 7550c082 1110 60e42ea1 1100 54eb21da 1110 2612d486 0101 4026eb3e 0111 2a3a4bc2 1011 25783f87 1001 2cf825bc 0011 84ce583c 1111 49a279b8 1111 02226d15 0011 0c0cdeb9 1101 514f3da1 0111 47db4f83 1101 000007c0 0040 349ced27 6c78ff08 a59a7f2d 0640ef1b e89304a7 2fe0e957 f45a31c3 ebd8b86d 51dbfe22 8a893677 93a0c452 302ff8a1 0b621bf5 56806ee5 700b9bdc 4b054b4b
+0 10 40000118 010 00001111 290e6846 990bb758 bad98bd7 66ba7d63 e20a09ef f2ee06bb 1ba1d84c 38ee6df2 abccf04e daeef04f dceb1301 408bf823 7cd21911 dec83174 83593b22 610331d9
+0 01 400005e2 001 00001110 abccf178 daeef179 daeef179 abccf17a abccf17a daeef17b daeef17b abccf17c abccf17c 449b530b 449b530b 0dcd3d89 0dcd3d89 daeef17f daeef17f
+0 10 40000631 000 00001111 0ae50a7b 0ae50a7b 0ae50a7b da4cb972 da4cb972 da4cb972 da4cb972 abcce72f abcce72f abcce72f abcce72f 08515e8f 08515e8f 08515e8f 08515e8f 0ae50a7b
+1 01 400006e2 001 00001001 81290000 1100 96aa1c01 0011 96aa1c01 0000 15df9877 0011 15df9877 1100 32eac828 0011 32eac828 1100 92971f6c 0011 92971f6c 1100 00008e82 0010 000006e0 0018 847f957b 926a9d9b 1b5f7aa8 8ae03d73 695840e2 b6605c6b
+0 01 40000148 001 00001000 abccf052 abccf052 daeef053 daeef053 abccf054 abccf054 daeef055 daeef055 32ccf056
+1 01 400007dc 001 00001001 d33bed71 0011 d33bed71 1100 0f27014b 0011 0f27014b 1100 79ee536c 0011 79ee536c 0100 759699ff 0010 759699ff 1100 57a316d4 0011 57a316d4 0100 000007d8 0018 52ef0e36 bb3448cf 03e6d557 aa0392d6 fd77a840 39cb752e
+0 01 40000476 000 00000100 d8582d3f d8582d3f 38cc494d 38cc494d 38cc494d
+0 01 400001d0 010 00001000 f991b441 73df952d ab741ff3 023fee44 a3590aa4 858cc298 7a5155a2 f111a37b 5c4296a8
+0 01 4000061e 001 00000110 daeef187 abccf188 abccf188 daeef189 daeef189 abccf18a abccf18a
+1 01 4000056a 000 00000101 be4f0000 0100 be4f0000 1000 f9108813 0001 f9108813 0010 f9108813 0100 f9108813 1000 00000568 0008 158490ab 418a8397
+0 10 400005c4 001 00000111 616f9339 616f9339 a5fcf872 a5fcf872 ed955ceb ed955ceb 160ad9d2 160ad9d2
+1 01 40000368 010 00000010 a9a5071d 0111 d1dbac9c 1100 833e0251 0011 00000368 0010 954e2aba a9793e2f 996437e3 45219016
+1 01 40000146 001 00000000 536b0000 0100 00000140 0008 8edaba63 bc9d342b
+1 01 400001a0 001 00001110 61d235a9 0011 61d235a9 1000 3b70805c 0010 3b70805c 1100 767ae7aa 0001 767ae7aa 1100 2b316819 0011 2b316819 1100 5eaa6a3f 0011 5eaa6a3f 1100 7fa9003d 0001 7fa9003d 1000 360b9828 0001 360b9828 1100 0000389c 0011 000001a0 0020 b9825246 44c5b37a a832f8f4 96712b52 982f83c3 67323ef5 09eb84e6 bc4b21e3
+1 01 40000466 001 00000101 7ddc0000 1100 212146fa 0011 212146fa 1100 e33d6e40 0001 e33d6e40 1100 00005ab1 0011 00000460 0018 5196b7c8 dc84463b e857c44d d61a8039 fb079f80 9547349b
+1 01 400005bc 010 00000010 73cc3c6f 1101 d847e249 0110 89a77416 0110 000005b8 0010 9b02b86a 86cc214c 4e1a2aa6 55a82e53
+0 01 40000737 000 00001101 da52fb0e b4fcb256 b4fcb256 b4fcb256 b4fcb256 da0df88e da0df88e da0df88e da0df88e bd057ab8 bd057ab8 bd057ab8 bd057ab8 da81628d
+0 01 400004c0 001 00001111 abccf130 abccf130 daeef131 daeef131 87cca0d9 87cca0d9 c8b52ef8 c8b52ef8 eaee7bbb eaee7bbb f46e4f35 f46e4f35 6560d014 6560d014 ba1a51c1 ba1a51c1
+0 01 40000252 000 00001001 75ccf060 75ccf060 da0ff578 da0ff578 da0ff578 da0ff578 e53cd6ff e53cd6ff e53cd6ff e53cd6ff
+0 01 4000071c 010 00000111 daeef1c7 81ccf1c8 1eeef114 3d780cca daeeb6e4 abaef1cc da52fb0e b4fcb256
+1 01 40000278 001 00001010 841a695f 0011 841a695f 1100 f5752a3a 0011 f5752a3a 1100 a621c219 0011 a621c219 1100 380a8e99 0011 380a8e99 1000 abe7f7ee 0001 abe7f7ee 1100 0000b120 0010 00000278 0018 53a44896 ac855b67 d7d6b1c7 a7ca25a9 b7ffdc51 20597d54
+0 10 4000072c 010 00000011 daeeb6e4 81ccf1c8 1eeef114 3d780cca
+1 01 4000042c 001 00001111 e3399eaa 0011 e3399eaa 1100 9f9028c9 0001 9f9028c9 0000 9fadfb55 0001 9fadfb55 0100 9e78e61a 0011 9e78e61a 1000 2c3aded2 0011 2c3aded2 1100 45ddaf23 0010 45ddaf23 1100 876bafbf 0011 876bafbf 1100 23881293 0010 23881293 0100 00000428 0028 85e26b85 fc1ad590 b416cd17 d8a7b244 2855d087 998f4c1f 74bc76d8 938e5dfa 20b1f165 af54b4bd
+0 10 400002a4 001 00001111 daeef0a9 daeef0a9 abccf0aa abccf0aa dad8f0ab dad8f0ab c0daf0a2 c0daf0a2 c5632cad c5632cad abccf0ae abccf0ae daeef0af daeef0af abccf0a8 abccf0a8
+1 01 400004d8 010 00001101 e4606922 0011 23439956 1101 4e376fc8 1110 d311c753 1101 29387978 1101 eca96b2c 1110 8c7fe9c6 0111 d59afcca 0110 b49313f7 1111 9e405251 0100 f37e1d97 1011 b141a324 1101 89dffcb5 0100 971a1554 0101 000004d8 0038 40302164 cfd6b15b d6004c20 2b481ae7 7b74a152 470e0892 8b987741 8f68ed15 3176313c 3a8de8ce a4b37b1e 27219533 52357f8e 771b9194
+0 01 400001d0 000 00001000 f991b441 f991b441 f991b441 f991b441 73df952d 73df952d 73df952d 73df952d ab741ff3
+0 01 40000561 000 00001101 cea515d5 cea515d5 cea515d5 86a001a9 86a001a9 86a001a9 86a001a9 be4fc05a be4fc05a be4fc05a be4fc05a f9108813 f9108813 f9108813
+0 01 400004aa 001 00000110 61cc2d9c daeef12b daeef12b abccf12c abccf12c daeef12d daeef12d
+0 01 4000009c 001 00000001 da9c77b6 da9c77b6
+1 01 400006e8 001 00000110 2a34646c 0010 2a34646c 1100 71a5c240 0001 71a5c240 0100 bc42234d 0010 bc42234d 0000 00001874 0011 000006e8 0010 17f4b2f3 f4575aa7 eb4c2c3b 7a843b6d
+0 01 40000634 001 00001101 da4cb972 da4cb972 abcce72f abcce72f 08515e8f 08515e8f 6c77f122 6c77f122 51fcf125 51fcf125 86adba92 86adba92 da05bd93 da05bd93
+0 01 40000548 001 00000110 d7f5835e d7f5835e e3bce153 e3bce153 7fcc45a3 7fcc45a3 d01bcaf6
+0 01 400003c4 010 00001111 92b71ba4 14db2d3e 98f561c2 37e8539d da43620b 56cc39c3 973d381b d526f0f8 17ddf488 a5cef0fa e603f0fb 27ccf03c 7c77f0f0 e9ccf079 d6e38334 375af10f
+0 10 4000056e 000 00000111 f9108813 f9108813 be4fc05a be4fc05a be4fc05a be4fc05a f9108813 f9108813
+0 01 40000688 010 00000111 49b99ca2 5947f1a3 d21e8da4 da2ccac0 a919f1a6 daee64af abccf1a8 daeef1a9
+0 10 400000c4 010 00001111 daeef031 c4068e59 d390d435 abccf0f1 daeef035 fb910c12 dad0faf6 abcc9546 e4ee445a fac86cf0 de1a5d8e c0879ebc da83cec4 6d9a28ee 522a4f7b 9e2bd2f9
+1 01 400001a7 000 00001111 bc000000 1000 27eae2db 0001 27eae2db 0010 27eae2db 0100 27eae2db 0000 34e2241e 0001 34e2241e 0010 34e2241e 0100 34e2241e 1000 68bb4b06 0000 68bb4b06 0010 68bb4b06 0100 68bb4b06 0000 0059e4a0 0001 0059e4a0 0010 0059e4a0 0100 000001a0 0018 03a8e0b7 d7ab3633 43273fff 421c1b4e 2f183e77 4c6f2a4c
+1 01 40000331 000 00001010 3d5d5c00 0010 3d5d5c00 0000 3d5d5c00 1000 dda0d2c5 0001 dda0d2c5 0010 dda0d2c5 0000 dda0d2c5 0000 5885b3a6 0001 5885b3a6 0010 5885b3a6 0000 5885b3a6 1000 00000330 0010 75b2f35d 50edc391 4614d665 a12f2bc5
+0 10 40000471 000 00000111 edcc5ab1 edcc5ab1 edcc5ab1 d8582d3f d8582d3f d8582d3f d8582d3f edcc5ab1
+1 01 400000b8 001 00001010 8ac76ee2 0001 8ac76ee2 1100 e84bb120 0011 e84bb120 1100 e6f48ecf 0011 e6f48ecf 1100 a4ca6950 0001 a4ca6950 1100 2d20fafe 0011 2d20fafe 0100 0000098c 0000 000000b8 0018 8777e57e 7b1fc7d1 df637b12 d87f3d52 7f509782 f4c46cc4
+1 01 400004de 001 00000010 15810000 1000 5d8627d9 0011 5d8627d9 1100 000004d8 0010 5dbc54f1 c3b21231 24bb2a5c 710dbc80
+1 01 400002f8 001 00000110 e61f012a 0010 e61f012a 1100 c60042c9 0011 c60042c9 1100 8f1020a9 0011 8f1020a9 0100 0000d38a 0010 000002f8 0010 3d93fef2 5b6f9f4b ed7e7706 edd749a5
+0 10 4000026c 001 00000111 dabdf09b dabdf09b 011d394d 011d394d daee96e5 daee96e5 abccf09a abccf09a
+1 01 4000064c 010 00000101 f7ac1e09 1011 0970fb61 1111 62d0f856 1110 2d17081b 1101 d00ba102 1111 2a4e902c 0110 00000648 0020 91cdd1cd a43bc045 75a44a17 49b92a54 e39c16a8 b3bcbcbf 994b8a0a a522e38f
+1 01 40000002 000 00001100 01ae0000 0100 01ae0000 1000 fb7f986d 0001 fb7f986d 0010 fb7f986d 0100 fb7f986d 1000 30ef42e9 0001 30ef42e9 0010 30ef42e9 0000 30ef42e9 1000 00566eab 0001 00566eab 0010 00566eab 0100 00000000 0010 6d8afe50 1dbcb286 b506506c 27266f6a
+0 10 40000083 000 00001111 36494d5c 36dc4568 36dc4568 36dc4568 36dc4568 f0d7bb6a f0d7bb6a f0d7bb6a f0d7bb6a 87f45623 87f45623 87f45623 87f45623 36494d5c 36494d5c 36494d5c
+1 01 400001fe 000 00000101 53b90000 0100 53b90000 0000 5a12df22 0001 5a12df22 0010 5a12df22 0000 5a12df22 0000 000001f8 0010 f7f0615e f993aad7 a6e8d773 50b0f379
+0 10 400002bf 000 00001111 daeef0af c0daf0a2 c0daf0a2 c0daf0a2 c0daf0a2 c5632cad c5632cad c5632cad c5632cad abccf0ae abccf0ae abccf0ae abccf0ae daeef0af daeef0af daeef0af
+1 01 4000041c 010 00001100 01579a7a 1111 eed7bf78 1111 264232c9 0110 0aaa1fb4 1111 e1cbc297 0111 e4b719d2 1111 5b41e034 1101 8f79bd7d 1001 e3ca3bb7 0011 9c8d9107 1111 2ba6f2c0 0111 63b0e71e 0111 9fd693ac 0100 00000418 0038 2aacef19 6452f566 62a44090 d8a1315c eb024c0e 66868801 c04d6f57 6356f524 6cb45bcc 694d8112 0d4033d0 635a79e5 1e30474d 33315caa
+0 10 4000018e 001 00000011 3097f32d abbdc662 abbdc662 3097f32d
+0 10 40000185 000 00000001 188e3f61 188e3f61
+0 01 400007a6 000 00001111 69444aef 69444aef ab46dd66 ab46dd66 ab46dd66 ab46dd66 d6aa24ba d6aa24ba d6aa24ba d6aa24ba b7a0d3ec b7a0d3ec b7a0d3ec b7a0d3ec 7deef1d2 7deef1d2
+0 10 40000070 001 00000011 637ce24d 637ce24d 7f2dada5 7f2dada5
+1 01 4000060e 001 00000100 c8100000 1100 af4fdc2e 0001 af4fdc2e 1100 c61c7306 0011 c61c7306 1100 00000608 0010 b350c7b0 9dd5f07f c51b30fd 042b0eee
+1 01 40000706 001 00001011 114a0000 1000 23792ad4 0001 23792ad4 0100 38279d90 0001 38279d90 1100 0d4c9203 0001 0d4c9203 0100 03fe2677 0010 03fe2677 1100 5f0c7504 0010 5f0c7504 1100 000042b1 0000 00000700 0020 69e06e15 2f2210cb f78da2fb 5096cc58 4d449468 27ef42b4 139849bc 912e988c
+0 01 400007e4 010 00000101 84ee536c 759699b8 daa316d4 0c0cf1b9 da4f3da1 47dbf183
+0 10 400007bc 000 00000001 daeef1ef daeef1ef
+1 01 400003c4 010 00000110 d4cbc2b9 1110 8e92a855 1011 db54abd9 1111 6cec28ff 1101 2ed9832a 1000 d4fa8154 0100 ef972a86 1100 000003c0 0020 8f4ce29a a46e8a6e c0989671 6183c26c 3af66f32 3791b6dd c2f94400 239af2d4
+0 10 4000051e 001 00001111 daeef147 f3cc1d97 f3cc1d97 b141aa24 b141aa24 07df1f42 07df1f42 da1af154 da1af154 abccf144 abccf144 daeef145 daeef145 abccf146 abccf146 daeef147
+0 01 40000132 001 00001110 1ba1d84c 38ee6df2 38ee6df2 abccf04e abccf04e daeef04f daeef04f abccf050 abccf050 da6bf051 da6bf051 abccf052 abccf052 daeef053 daeef053
+1 01 4000065c 001 00000001 cb3c3cf0 0011 cb3c3cf0 0100 00000658 0008 348cde24 687d4ca0
+0 01 40000586 001 00000101 da6419d4 d4ccdfbb d4ccdfbb 89eec363 89eec363 abccf164
+1 01 400001b5 000 00001000 780afc00 0010 780afc00 0000 780afc00 0000 0afba129 0000 0afba129 0000 0afba129 0100 0afba129 1000 00000153 0001 00000153 0000 000001b0 0010 bed8c0b3 80d8f3ee 58140baf 36fb9cd3
+1 01 400006da 001 00000001 6bd40000 0000 000004b1 0011 000006d8 0008 a44c21f8 f7ddd287
+1 01 400004c9 000 00000001 00e87800 0010 00e87800 0100 000004c8 0008 175e54b5 0f50ea4c
+0 10 40000114 001 00000011 610331d9 610331d9 83593b22 83593b22
+1 01 4000032c 010 00001111 2740836c 1111 b9a43699 0111 70ca5ccd 1101 dc1d8bff 0111 c76d8267 0101 e0b743a7 1111 cccf8ab8 1111 adfa85b3 1111 8b375f8c 1000 6362f2b4 0100 42c2b45d 1111 520f8661 0111 14fc3eae 1011 7d9a01be 1101 90aff861 0110 3f040be1 1011 00000328 0048 a18ad9b8 72195f85 64519dd3 6f808c5e 076c9aed d2fc8977 44b53dd9 b64921ae c2d36880 e6d742e2 874ce7c3 edb273fb daa9388d fe25df85 aacaecfc c5420a78 7d3e4e16 38b64403
+0 10 4000038c 001 00001111 daeef0e3 daeef0e3 abccf0e4 abccf0e4 daeef0e5 daeef0e5 abccf0e6 abccf0e6 daeef0e7 daeef0e7 d7ccf000 d7ccf000 daff3a12 daff3a12 abccf0e2 abccf0e2
+0 10 4000038f 000 00000011 daeef0e3 daeef0e3 daeef0e3 daeef0e3
+0 01 400002b9 000 00001101 abccf0ae abccf0ae abccf0ae daeef0af daeef0af daeef0af daeef0af abccf0b0 abccf0b0 abccf0b0 abccf0b0 daeef0b1 daeef0b1 daeef0b1
+0 10 400007b6 001 00000011 7deef1d2 b7a0d3ec b7a0d3ec 7deef1d2
+0 10 40000162 001 00000011 abcce658 67ccbff7 67ccbff7 abcce658
+1 01 4000028f 000 00000010 21000000 1000 0000c83a 0001 0000c83a 0000 00000288 0010 f67a8416 06aea7cb e0363961 e4c80bad
+1 01 400004e0 010 00001111 ddbc7f69 1111 34151136 1111 eebf93eb 1101 3be594d7 0111 8193a15b 1010 aade30f2 1111 8590d330 1010 a4e8add6 1111 5ef7b626 1110 7b9a2e8d 0111 018d1054 1111 100c5a82 0110 3c5cd1cb 1111 f06b0dfc 1111 d99582e2 1111 62b86306 0110 000004e0 0040 faaad523 d2db8302 a42a17eb e1c95612 2b6fafb4 3b40aa3b c6e5402a 0208caa3 8fcc1b44 6e6b30dc fe332374 8f5d9b72 5d60aa6e 286f4abe 517794c2 06af4fdf
+1 01 40000668 000 00000100 90615902 0001 90615902 0010 90615902 0100 90615902 1000 0000007c 0001 00000668 0008 c12eade9 1ef1fc4a
+0 01 400007f9 000 00000001 47dbf183 47dbf183
+1 01 40000656 001 00000001 7e250000 0100 0000d26c 0011 00000650 0010 0819f9d5 c8c9ffec 51302609 65c6d89d
+0 01 400005f4 010 00000100 449b530b 0dcd3d89 daeef17f abccf180 9bb46bb1
+1 01 40000690 001 00000001 9d0e73e7 0011 9d0e73e7 1100 00000690 0008 4ee6e914 41c46e80
+0 10 4000011a 001 00000111 290e6846 990bb758 990bb758 83593b22 83593b22 610331d9 610331d9 290e6846
+1 01 400005f6 000 00000100 a2260000 0100 a2260000 1000 0028d9b9 0001 0028d9b9 0010 0028d9b9 0100 000005f0 0010 6de2c252 13296a3b 748eebe3 51154e97
+1 01 40000294 010 00000000 74066683 1011 00000290 0008 65211e77 e69f7e17
+0 10 400001f6 001 00000011 98fd3d44 5c4296a8 5c4296a8 98fd3d44
+1 01 400003f4 010 00000101 e73e374d 1101 1ee74db1 1011 22982ec0 1100 5eb8788c 1111 5f45c049 1101 2c09a237 1101 000003f0 0020 92b3d6e0 73d7999d fb9755ee 8afd8bc8 704d0558 7ca9d107 2a6fbf92 947b539b
+1 01 40000002 001 00000111 cbba0000 1100 62503a0d 0011 62503a0d 1100 635fcc39 0001 635fcc39 1100 19716449 0001 19716449 1100 000020b6 0011 00000000 0018 d5eb6265 2d061064 060f8db0 425fac96 5736a4db 44a798f4
+1 01 400005b0 010 00001011 7a028b7b 1101 d88a61da 1101 25732889 1101 0fdc8295 1011 9d70c808 0111 a457828b 1011 78e79e33 1011 e71e15cb 1111 54795a75 0111 11b9dc79 0010 04047b9f 1111 d26bf863 1111 000005b0 0030 b70a503e 0eb2fb1f 11db45f7 4c6bb1e1 59612535 db2282bb 31cea64e 6f156fd4 47ea0d41 b6bade7b 55eed336 22f60bfe
+1 01 4000047a 000 00000011 00ab0000 0100 00ab0000 1000 000026d2 0001 000026d2 0000 00000478 0008 907650ea 23194dc4
+1 01 400007dc 010 00000001 8b3bf117 1110 cf39f956 0110 000007d8 0010 0ddfadb9 7b10001c cd7c7bb7 0346b88f
+0 10 400001b6 001 00000011 7f59fca0 5ebb4b3f 5ebb4b3f 7f59fca0
+0 01 40000780 010 00000110 abccf1e0 daeef1e1 abccf1e2 daeef1e3 abccf1e4 daeef1e5 abccf1e6
+0 01 40000184 001 00000000 188e3f61
+0 10 40000036 000 00000011 d185f0b4 d185f0b4 d185f0b4 d185f0b4
+1 01 400003c8 010 00000100 525357e7 1111 e46fe441 1101 8861d335 1101 23bd2e14 1011 9192cf2c 1111 000003c8 0018 16340750 b2758cda 2982de56 4e474130 54eaa188 e4b6dbae
+0 01 400001d4 010 00000111 73df952d ab741ff3 023fee44 a3590aa4 858cc298 7a5155a2 f111a37b 5c4296a8
+0 10 400005f8 010 00000011 0d28d9b9 daeef17f abccf17c a226530b
+1 01 40000366 001 00001011 c84e0000 1100 d893cd00 0011 d893cd00 1100 c827ebfe 0001 c827ebfe 1100 3860d392 0011 3860d392 0100 2ff2cbad 0011 2ff2cbad 1100 a5565c5b 0011 a5565c5b 1100 00008e64 0010 00000360 0020 40151a0b 91094068 d74d5bdf 8f160b83 616023b4 dce57570 da88bf60 f621d1c8
+1 01 4000004e 001 00001111 12790000 1000 cb8d2e21 0011 cb8d2e21 1100 705328d7 0001 705328d7 0100 f769ca11 0010 f769ca11 0100 25b4686d 0011 25b4686d 1100 b8ceb793 0010 b8ceb793 1000 699ba668 0011 699ba668 1100 eabada02 0011 eabada02 1100 0000f4ff 0011 00000048 0028 f62ad43c 1eecfe82 6b02ed1f 1b71a1ae ec250233 ba5f4210 51f19032 832d8936 518baf23 a6600214
+0 10 400006fe 001 00000111 daeef1bf 9297236c 9297236c daee1874 daee1874 abccf1be abccf1be daeef1bf
+0 10 40000610 010 00001111 af4ff12e c61c7306 abccf186 daeef187 abccf188 daeef189 abccf18a daeef18b 0ae50a7b da4cb972 abcce72f 08515e8f abccf180 9bb46bb1 51506686 c8108383
+0 10 400001f0 010 00001111 5c4296a8 98fd3d44 37967bd3 27b992a2 db40f0c2 cc26666b ab55dbba 912759ac f991b441 73df952d ab741ff3 023fee44 a3590aa4 858cc298 7a5155a2 f111a37b
+1 01 4000034a 000 00001011 454b0000 0100 454b0000 1000 c267cde0 0001 c267cde0 0010 c267cde0 0100 c267cde0 1000 e06af746 0000 e06af746 0010 e06af746 0000 e06af746 1000 00007ff2 0001 00007ff2 0010 00000348 0010 ed3aff0c a35e5a70 517d1db0 840ac3d7
+1 01 400004c2 001 00001101 4a3f0000 1100 f0c52f4c 0010 f0c52f4c 0100 60b82a99 0011 60b82a99 1100 4ea81480 0011 4ea81480 1100 196ba9b0 0011 196ba9b0 1000 607a9dd3 0011 607a9dd3 1100 7f4dc4df 0011 7f4dc4df 1100 0000bfb6 0011 000004c0 0020 58c29dca 3b002696 f1254c9b efb4ccab f83135ce dec712a5 34aa4120 8f76227a
+1 01 40000628 010 00000111 aec6ef0f 1011 811b7078 1000 dc038679 1111 3b3cf35b 1010 bef9ccdd 1110 9472c525 1100 8b28ceec 0111 9e35b43b 1110 00000628 0020 9e2a318c c9f24e43 db44d7f8 80c3e860 b5403ab5 a1008566 0f41de41 b3abe16f
+0 01 400004a8 010 00000100 61cc2d9c daeef12b abccf12c daeef12d abccf12e
+0 10 40000798 001 00001111 abccf1e6 abccf1e6 daeef1e7 daeef1e7 abccf1e0 abccf1e0 daeef1e1 daeef1e1 abccf1e2 abccf1e2 daeef1e3 daeef1e3 abccf1e4 abccf1e4 daeef1e5 daeef1e5
+1 01 40000696 001 00001100 41bc0000 0100 af004dc1 0011 af004dc1 1100 18ef4399 0011 18ef4399 0100 5a0cfaca 0001 5a0cfaca 1100 0e63f871 0011 0e63f871 0100 f95b8b5a 0011 f95b8b5a 0100 e9604254 0011 e9604254 1100 00000690 0020 0257456a 0d83d31c edf20fea c8109da3 02f50985 3c7c7cb6 0243c146 7f74a935
+0 01 40000469 000 00001001 212146fa 212146fa 212146fa e33df140 e33df140 e33df140 e33df140 edcc5ab1 edcc5ab1 edcc5ab1
+1 01 400003dc 001 00000000 0000b7f7 0011 000003d8 0008 b483b174 aa287a1e
+1 01 40000584 010 00001101 dab79e60 1001 ad3dd0d8 1111 0384c55e 0110 e5eb32d1 1001 64327cc9 0111 a9be55b2 1011 d0346aad 1111 0a435115 1011 483d12a0 0111 9076d9fc 1011 9b4142d3 1111 b1ca5e90 1001 a7bfdc4d 1011 375481f2 1011 00000580 0040 42d72fdd 4567b68d a96deff4 c58fcbee 78829ef5 8ff782e9 8925c35f adeb940f c5e39310 4aad060e 4c577ae3 0ea10856 d37fb86f d137ca6a 405f7c2d e640b93f
+0 10 40000568 000 00001111 be4fc05a be4fc05a be4fc05a be4fc05a f9108813 f9108813 f9108813 f9108813 cea515d5 cea515d5 cea515d5 cea515d5 86a001a9 86a001a9 86a001a9 86a001a9
+1 01 40000570 010 00000110 ccce5cfe 1010 b4242d8f 1111 3fc46bc5 0101 3ff562e4 0111 a37e7bfc 1101 9764b800 1111 f4d4e6b0 1110 00000570 0020 f82944cb aed5db40 e3205dce 91728c91 85c3dc04 63c285af 0b2742a5 0552477f
+0 01 40000724 001 00001011 1eeef114 1eeef114 3d780cca 3d780cca daeeb6e4 daeeb6e4 abaef1cc abaef1cc da52fb0e da52fb0e b4fcb256 b4fcb256
+1 01 400005e8 000 00001011 1826cc98 0001 1826cc98 0010 1826cc98 0000 1826cc98 1000 ba3c8dc9 0001 ba3c8dc9 0010 ba3c8dc9 0100 ba3c8dc9 0000 25208957 0001 25208957 0010 25208957 0100 25208957 1000 000005e8 0010 2423ba77 b382ac98 c50684b2 af23bc55
+1 01 4000008a 000 00000000 00620000 0100 00000088 0008 6b4a1032 d43ccc0c
+1 01 40000340 000 00001010 8752e186 0001 8752e186 0010 8752e186 0100 8752e186 1000 7fbd9956 0001 7fbd9956 0010 7fbd9956 0100 7fbd9956 1000 0044e36e 0001 0044e36e 0010 0044e36e 0100 00000340 0010 e6712450 81614f0e 98e09f76 657d2855
+0 10 400003e2 000 00001111 d526f0f8 d526f0f8 17ddf488 17ddf488 17ddf488 17ddf488 a5cef0fa a5cef0fa a5cef0fa a5cef0fa e603f0fb e603f0fb e603f0fb e603f0fb d526f0f8 d526f0f8
+1 01 400003c8 001 00001011 ca7a5228 0000 ca7a5228 1100 bee7eb6f 0010 bee7eb6f 1100 ed11dc66 0010 ed11dc66 0100 a4cbc8f0 0001 a4cbc8f0 1000 0be8054a 0010 0be8054a 1100 99f1cef7 0010 99f1cef7 1100 000003c8 0018 a0dd4c73 535f9255 2dc46ce6 580b099c 4d9548e3 f1cb72a3
+0 10 400002f8 000 00000001 e61f01be e61f01be
+0 10 40000703 000 00001111 abccf1c0 11eef1c1 11eef1c1 11eef1c1 11eef1c1 ab79f1d4 ab79f1d4 ab79f1d4 ab79f1d4 3827f190 3827f190 3827f190 3827f190 abccf1c0 abccf1c0 abccf1c0
+0 01 400005d4 010 00001011 4e86dc75 04047b9f d26bf863 abccf178 daeef179 18cccc98 da3c8dc9 25208957 a226530b 0d28d9b9 daeef17f abccf180
+1 01 400004ce 001 00001001 423f0000 1100 f01db13f 0011 f01db13f 1100 ebea6357 0011 ebea6357 0100 085d74e2 0011 085d74e2 1000 469482eb 0011 469482eb 0100 00005293 0000 000004c8 0020 2cac66d0 a8e61969 8926cf9c ec1c2c23 684b8e2b e1a70915 faaad523 d2db8302
+0 10 40000130 001 00001111 1ba1d84c 1ba1d84c 38ee6df2 38ee6df2 abccf04e abccf04e daeef04f daeef04f bad98bd7 bad98bd7 66ba7d63 66ba7d63 e20a09ef e20a09ef f2ee06bb f2ee06bb
+1 01 400002be 001 00001101 0cdb0000 1000 2ed011bd 0011 2ed011bd 1100 d2673115 0000 d2673115 0000 2075ff16 0011 2075ff16 1000 fb88e826 0001 fb88e826 1100 ff35045f 0001 ff35045f 1100 a484908a 0010 a484908a 0000 00006a6f 0010 000002b8 0028 9687567a 90d779e1 5e6fdbaf 9dae3a60 eb2b50e8 b224f08a 7562cdb5 a3d193d6 e42cdde4 98abf452
+1 01 400001f0 010 00001100 088fd898 1101 5b016395 1101 3336c26f 1011 86499bfd 0111 7d915335 1111 8ae73254 1111 716849db 1111 11045397 1100 17401eb7 1111 306905b2 0111 5fc7b61f 1011 a24d407c 1111 f1726b45 1111 000001f0 0038 db86f1a6 46482464 553f293b 7391b38a 833636d6 36e24214 afa559b7 7a6a563f b6abb9dd c0f09de8 ee77170e 8b0b9af5 fcb5ae2e 08bd5efc
+1 01 4000044c 010 00001001 a3543254 0011 caae997e 1111 2b268346 1111 be82c6dc 1111 7b330d9a 1110 c53e2a1e 1111 e1798a27 1111 839bb35a 1101 108bda62 1011 4a38009d 1101 00000448 0030 a13d1344 05f249ca e922e57d 383c23df 0c2d2953 d114cdd3 684ddfd3 b4472b38 a6e6ee66 c337a666 acaadc50 6b3ee257
+1 01 40000466 001 00000111 653c0000 1100 2c10076c 0001 2c10076c 1100 5e56de4f 0001 5e56de4f 1100 839d9b85 0011 839d9b85 0100 00007c23 0011 00000460 0018 b7194384 1aadf4be 3d3b149b 6bd99f47 7b55a352 057adcdb
+1 01 400005b8 010 00001001 1ef663bc 0111 828a4393 0011 f454cc38 1011 19afffd0 0110 aa7ee854 1111 7b2e7896 0101 4b3f741f 1010 d6e12427 0011 a94addef 0011 aaa5bece 1111 000005b8 0028 fe3b6554 a4a3aa3f aafe611f 5d5fbe96 121da1c8 04187107 dac43355 2ccdfc8b 3bfaf0a3 8220df11
+0 01 4000056c 010 00001000 f9108813 cccc5c5c b4242d8f abc4f1c5 daf562e4 a37e09fc 9764b800 f4d4e6d8 8984c563
+0 01 40000526 001 00001100 daeef149 abccf14a abccf14a daeef14b daeef14b abccf14c abccf14c daeef14d daeef14d abccf14e abccf14e 2eeef14f 2eeef14f
+1 01 40000544 000 00000111 e0555de8 0001 e0555de8 0010 e0555de8 0100 e0555de8 1000 7395bdd5 0001 7395bdd5 0010 7395bdd5 0100 7395bdd5 0000 00000540 0010 a2da5917 7c3685a9 59b25343 3a49eb9e
+1 01 400006ac 010 00001110 cc19ead5 1101 184756fc 0111 1d336bba 0101 d2038d3b 1110 b588735a 0111 02ac0e3a 1111 09cfbee4 0111 b6f7f389 0011 7576f6d6 1111 75ec439c 1010 470d9f0a 0101 bb142109 1110 5d12aa9b 1111 8d7b6224 1111 c9fc9336 0100 000006a8 0040 a2c2de00 987dcb8f fe2b6053 839fbbfe 6345b9e9 95c5fb49 4f75a6ec 1148e5f9 b4d35e1b d8bbb0cc f611e2b1 081f4200 d4b1a92d 7af56357 8c6a366f 45c9c0c9
+1 01 40000156 001 00001100 c67d0000 1100 a90eacf6 0011 a90eacf6 1100 322df860 0011 322df860 1100 b961ddb9 0011 b961ddb9 1100 2d450c53 0010 2d450c53 0100 8f95c662 0010 8f95c662 1000 fd9a1626 0011 fd9a1626 1100 00000150 0020 f65ba8b1 bfeb94ca ac05c4da 5cf0470a 7434abf4 c2215fc5 3755d36f 369da910
+0 10 400007a0 000 00000111 abccf1e8 abccf1e8 abccf1e8 abccf1e8 69444aef 69444aef 69444aef 69444aef
+1 01 400007bc 010 00001000 77263ba4 0111 8cd17113 1001 03bbbca5 1111 6878415a 1111 e57acbd9 1111 07a5600a 1011 9ee05be6 1111 ef4aebaa 1101 df463978 0101 000007b8 0028 dec35188 870f042b 625b050a dc3c27d9 455745cb 42de30a5 28d04060 12a8b653 9442ae06 39fb1468
+0 01 40000444 001 00001110 87a6f2c0 87a6f2c0 a0b0e71e a0b0e71e dad63254 dad63254 caae997e caae997e 2b268346 2b268346 be82c6dc be82c6dc 7b330d17 7b330d17 c53e2a1e
+0 10 4000041b 000 00001111 abccf106 01579a7a 01579a7a 01579a7a 01579a7a abccf104 abccf104 abccf104 abccf104 daeef105 daeef105 daeef105 daeef105 abccf106 abccf106 abccf106
+0 10 40000274 001 00001111 a33dc16b a33dc16b 841a695f 841a695f f5752a3a f5752a3a 011d394d 011d394d daee96e5 daee96e5 abccf09a abccf09a dabdf09b dabdf09b abb28de3 abb28de3
+0 01 4000068c 010 00000001 5947f1a3 9d0e73e7
+0 01 40000364 001 00001110 c84ef8d9 c84ef8d9 d893cd00 d893cd00 c827f0fe c827f0fe ab60d392 ab60d392 2ff2cbad 2ff2cbad a5565c5b a5565c5b daee8edf daee8edf d7ccf000
+0 01 400002fc 010 00000110 c60042c9 ab1020a9 daeed3c1 abccf0c2 daeef0c3 abccf0c4 daeef0c5
+0 10 40000140 010 00000011 abccf050 da6bf051 abccf052 daeef053
+1 01 400004ac 001 00001110 5965ead2 0010 5965ead2 1000 a5a9df96 0001 a5a9df96 1100 cb5735ec 0011 cb5735ec 1100 047a8804 0011 047a8804 1000 2b028477 0011 2b028477 1000 359b963f 0001 359b963f 1100 a821f933 0010 a821f933 1100 00008f39 0011 000004a8 0028 5f516040 cb125333 83e9dd67 842a632e 8976951f a6a799c9 6dbe75c7 1dc42a89 d8692f8f 8d5445b7
+0 10 4000024c 010 00000011 3940aba5 eb131f4a daac5195 0c648fce
+1 01 4000047e 001 00001111 4d2c0000 0000 148fb5a6 0001 148fb5a6 0000 827bc80c 0011 827bc80c 0100 4bcd8661 0011 4bcd8661 0100 cb76a40c 0011 cb76a40c 0000 1c30dd35 0011 1c30dd35 0000 47dd4908 0011 47dd4908 1100 9c8e3e13 0001 9c8e3e13 0100 00000d41 0010 00000478 0028 907650ea 23194dc4 4611d653 43eeaa77 062b30f0 84d583a8 5f797e18 1bf53faa f7097d8d 0fc15c26
+1 01 400004d4 010 00001001 3bf85a1c 1011 162148f7 1011 f747c85a 1110 82f9bf6a 1111 af6e262b 0011 50fd736c 1111 8e4e2852 1111 d72bf53c 1011 7a89fd0a 1011 cafc4df8 1000 000004d0 0030 2e7e04c7 329153c3 f61c5839 ec13297f 1b274a4f b97bc0cb d6e9e766 77aa9610 d83000d5 724caf83 67ccbccf 6544b601
+0 10 40000354 010 00000011 42c27ff2 ab0f8661 14ee3eae e062f748
+1 01 400006ac 001 00001100 3550a5bd 0000 3550a5bd 1100 59f4b956 0011 59f4b956 1100 0f4ea73b 0011 0f4ea73b 1100 faf2f6cc 0011 faf2f6cc 1000 c2ec1979 0011 c2ec1979 1100 29e96113 0011 29e96113 1100 00005538 0011 000006a8 0020 fb692086 48123cf7 4b242ab9 cf392ae5 41e8ced9 e5d5711c 62f4a076 15514a39
+0 10 400000a0 000 00000111 abcc99b1 abcc99b1 abcc99b1 abcc99b1 daeef029 daeef029 daeef029 daeef029
+1 01 40000716 001 00000010 74c40000 0100 4395d167 0011 4395d167 1100 00000710 0010 f6d82129 edc19e0b 37ae3908 bdcfb77e
+1 01 40000530 010 00000010 4b11bf5e 1011 c472a28d 1101 95c3fc91 1110 00000530 0010 276aaa9a 3dc9defb d67af1ad 151143dd
+0 10 400001a2 001 00001111 61c635a9 bc708069 bc708069 76eae2db 76eae2db 34e2241e 34e2241e 5ebb4b3f 5ebb4b3f 7f59fca0 7f59fca0 0afb8428 0afb8428 39b33853 39b33853 61c635a9
+1 01 40000534 010 00001010 766b3067 0100 ed4093b0 0111 a6e6c5f0 1110 f0fd2138 1111 c86aa86a 0111 3784276b 1011 2f297c69 1111 332c4739 1111 12dd6d2f 1111 73b565ca 0111 75a0e7ae 1001 00000530 0030 e32a9e25 b1083dfd 6b9e35f0 68f4a84f c80d20f2 308ee02a 75740449 248cec8b 7d1be84f 7f912137 4e9e8626 99c99aa3
+1 01 400001d0 001 00001111 79ee5bff 0011 79ee5bff 1100 075a81bd 0011 075a81bd 1100 30d6b9c5 0000 30d6b9c5 1000 f57a2fec 0011 f57a2fec 0000 8a86f67a 0010 8a86f67a 1100 a6ff8308 0011 a6ff8308 1100 d31a7025 0011 d31a7025 1000 d8135c35 0010 d8135c35 0100 000001d0 0020 c0d849e6 c6c3e3c4 793dc60f d45b32bc d642837f 30495acf 995f9d3c 975a432b
+1 01 40000184 010 00000000 0d7f0f20 0001 00000180 0008 70d9ba8f f544e657
+1 01 40000194 000 00001110 c37ad420 0001 c37ad420 0010 c37ad420 0000 c37ad420 1000 83916f9c 0000 83916f9c 0010 83916f9c 0000 83916f9c 1000 0a5fa1a6 0000 0a5fa1a6 0010 0a5fa1a6 0100 0a5fa1a6 1000 00d67755 0001 00d67755 0000 00d67755 0000 00000190 0018 94bf2387 01fd472b 9b90c3ae 6a60b397 ec6d47a6 9ea31d7d
+0 01 40000708 010 00000100 ab79f1d4 3827f190 ab4cf103 03c426c5 4395d167
+1 01 40000704 010 00001110 61b810f0 0111 002b19e5 1111 6146d261 1101 c5fe6a6d 1011 19964581 0111 ddd60b5e 1111 eacad5eb 1111 d2f32557 0110 4f71fb29 1111 713669d1 1111 58966734 1111 0c1c3407 1100 39a5b84f 0011 559a2689 1011 4728b441 1000 00000700 0040 c39e990b 12867924 1d4b2f9c 3f8b5858 e3705c7e 532bb514 d7d299cc f7eb8218 5c627e25 9a1789f1 9ed0a9aa 6d3a6dfb c573aff7 b73d202a 0f86f5dd a97a5545
+1 01 4000069a 001 00001010 5e080000 1100 030fcf28 0001 030fcf28 1100 e541cc97 0011 e541cc97 1000 da46c44f 0011 da46c44f 1100 4e2c59b5 0010 4e2c59b5 1100 17a8871a 0011 17a8871a 1100 00000698 0018 e67a01e2 931420be b5961e2e 925f453e facbe594 29c4c000
+0 01 400005d1 000 00001110 4b797475 4b797475 4b797475 4e862427 4e862427 4e862427 4e862427 0404ddef 0404ddef 0404ddef 0404ddef aaa5bece aaa5bece aaa5bece aaa5bece
+0 01 4000005e 000 00001001 25b4686d 25b4686d b836b7a1 b836b7a1 b836b7a1 b836b7a1 699ba668 699ba668 699ba668 699ba668
+0 01 4000004e 001 00001110 12d93513 cb8d2e21 cb8d2e21 da53f0d7 da53f0d7 ab69ca16 ab69ca16 25b4686d 25b4686d b836b7a1 b836b7a1 699ba668 699ba668 eabada02 eabada02
+1 01 400005b3 000 00001011 e1000000 1000 0094c7a8 0001 0094c7a8 0000 0094c7a8 0100 0094c7a8 1000 c98f5f74 0001 c98f5f74 0010 c98f5f74 0000 c98f5f74 1000 0078bbd9 0000 0078bbd9 0010 0078bbd9 0100 000005b0 0010 8577eef7 7109b2ce 43c69b68 9978afe0
+1 01 400002ae 001 00001110 8bcf0000 1100 adfd570f 0011 adfd570f 1100 ade92b12 0011 ade92b12 1100 5eb6e209 0011 5eb6e209 1100 3b879f5e 0010 3b879f5e 0100 2a632083 0011 2a632083 0100 db996943 0011 db996943 1100 e2742d60 0011 e2742d60 1100 000002a8 0028 7b7802d5 97ac5374 b9a5d784 26175a3e 21c42146 3436f106 0048dc69 ca433b46 23bdc2d5 a2fd7dfc
+0 01 400001f4 010 00001111 5b013d95 3396c26f 27499bfd 7d915335 8ae73254 716849db 1104f083 17401eb7 026905b2 5fadb61f a24d407c f1726b45 7cfa6589 c04fba1c 39eef06b 197d1af9
+1 01 40000514 010 00000001 2809a137 1111 a152f26f 0111 00000510 0010 c90b941c 0a02353c 4813a734 4694f402
+0 10 40000431 000 00000111 e4b719d2 e4b719d2 e4b719d2 5b414534 5b414534 5b414534 5b414534 e4b719d2
+0 01 40000146 000 00000111 da6bf051 da6bf051 abccf052 abccf052 abccf052 abccf052 daeef053 daeef053
+1 01 40000099 000 00000100 bb681a00 0010 bb681a00 0000 bb681a00 0000 00006db0 0001 00006db0 0010 00000098 0008 102b591b 23a18632
+1 01 400005ae 001 00000001 a3180000 0000 00003371 0011 000005a8 0010 4c577ae3 0ea10856 6e232c5b 0dcaa782
+1 01 40000776 001 00000111 f30d0000 1100 eca0ccb5 0010 eca0ccb5 1000 875470c3 0011 875470c3 1100 dde69fb0 0011 dde69fb0 1000 00009943 0001 00000770 0018 00f9e5ed 5d084002 48464acc ff0aec31 8f5eb897 8dedcf67
+1 01 400006e8 001 00001010 70c338e5 0001 70c338e5 1000 0027c0e8 0011 0027c0e8 0100 88b0ac6a 0011 88b0ac6a 1100 ac9c56fe 0010 ac9c56fe 0100 b9afa5cd 0001 b9afa5cd 1100 0000ca9e 0010 000006e8 0018 ba5684fe a5e55e12 447f835f 8415749a e85936b1 01080f02
+0 10 4000047a 001 00000011 00ab494d 0986a8d2 0986a8d2 00ab494d
+1 01 400000b0 001 00001101 847f561b 0010 847f561b 1000 b7159742 0011 b7159742 1100 494904d5 0010 494904d5 1100 279b1a41 0011 279b1a41 1100 36e691c1 0010 36e691c1 1000 dbec20b4 0011 dbec20b4 0100 d2fb90cb 0010 d2fb90cb 1100 000000b0 0020 91b8dafa e397979d 126de062 13c3a0ab a6353bf6 598032a4 c7b22cfa ea51dbc0
+0 10 4000043c 010 00000001 2c3a3bb7 8fcce67d
+0 10 400006b4 010 00000111 0f4ea73b fa03f6cc c2ec1979 e50ccc97 da46c44f 4e2c595a 17a8871a 59f4b956
+1 01 4000029a 000 00001000 a62f0000 0100 a62f0000 1000 437d87ad 0000 437d87ad 0000 437d87ad 0000 437d87ad 1000 00fabf41 0001 00fabf41 0010 00fabf41 0100 00000298 0010 1edae79d 8cd3c62b e8b17b4e c07594c4
+0 10 400000ab 000 00000111 abccf02a daeef02b daeef02b daeef02b daeef02b abccf02a abccf02a abccf02a
+0 01 4000057c 001 00000000 daf562e4
+1 01 40000698 000 00001101 9f612bec 0001 9f612bec 0010 9f612bec 0100 9f612bec 1000 825e97db 0001 825e97db 0010 825e97db 0000 825e97db 0000 e72acd90 0001 e72acd90 0010 e72acd90 0100 e72acd90 0000 00003d0a 0000 00003d0a 0000 00000698 0010 94676533 cd714ee8 7a7f58fb ccc81a0c
+1 01 400005cc 010 00000110 33e14b7b 1111 c7b9420c 1111 e58567d2 0110 8134c4e8 1111 fa5f5114 1100 d8c1447d 0011 4c317f8b 1111 000005c8 0020 3632d71d f68436ac c35e3b72 836e4808 30b0447e f2f336cd b959305c 9804c319
+1 01 400006ca 001 00000010 07d90000 1100 a1b2ca3d 0011 a1b2ca3d 1100 000006c8 0008 f71b3e68 155550a0
+1 01 40000742 001 00000011 e5d70000 1100 2c97f198 0011 2c97f198 1100 00003afd 0001 00000740 0010 eac7d3d9 e12b1e41 bc1aa6e8 bf473908
+0 01 4000044c 001 00001010 dad63254 dad63254 caae997e caae997e 2b268346 2b268346 be82c6dc be82c6dc 7b330d17 7b330d17 c53e2a1e
+0 01 400002a4 010 00000001 daeef0a9 abccf0aa
+0 01 400006d0 010 00001111 754d43b4 c10df10a bb1421b6 5d12aa9b 8d7b6224 dafc1c01 703464e5 3227c0e8 88b0ac6a da9c5674 b9aff1cd daeecabf abccf1c0 11b810f0 002b19e5 6146f161
+1 01 40000495 000 00001010 e3cd5700 0010 e3cd5700 0100 e3cd5700 0000 f438d90d 0001 f438d90d 0010 f438d90d 0000 f438d90d 0000 7f952241 0000 7f952241 0010 7f952241 0100 7f952241 0000 00000490 0010 d5dc3e34 d975a9f9 b0a4567c 80a04170
+0 01 40000668 010 00000111 90615902 53ee9a7c 69d22298 78adf164 ab27321a daeef123 41297fb0 8e22f123
+1 01 4000005a 001 00001110 c4720000 1000 f7a8e2b3 0001 f7a8e2b3 0100 8754c677 0011 8754c677 1100 f62355bd 0011 f62355bd 0000 f3e1131d 0011 f3e1131d 1000 84dd3404 0001 84dd3404 1100 cdb24875 0010 cdb24875 1100 3b816b1d 0000 3b816b1d 0100 00000058 0020 d06e244b 31c6fcd3 dc540411 4f6dac3b 19d9f5a7 3e83b7bc 0da86269 929afb12
+0 01 4000065c 000 00001110 d03c3cf0 d03c3cf0 d03c3cf0 d03c3cf0 ab4e9098 ab4e9098 ab4e9098 ab4e9098 4114f199 4114f199 4114f199 4114f199 90615902 90615902 90615902
+1 01 400005a0 010 00001101 041f1766 1111 9b898dd3 1110 37f7ab85 1110 600d4f8b 0111 f549445f 1111 3cace748 1000 38534e71 1101 ad670ea1 1110 4a26e5b9 1010 9b9acce6 1100 724e36bb 1111 36471728 1111 19e12675 0101 dfaa4962 1011 000005a0 0038 4ca5339e 2be7560b 35fc9962 c4b9ca87 57465ebd 64b5f36b c5dd7c0c 19c27407 e9b9a6a0 a891e1a2 ae56ee29 76f321e8 b879be98 b853d5fa
+0 10 40000363 000 00000011 7d9af0be 7d9af0be 7d9af0be 7d9af0be
+0 10 40000572 001 00000111 cccc5c5c b4242d8f b4242d8f abc4f1c5 abc4f1c5 daf562e4 daf562e4 cccc5c5c
+1 01 40000536 001 00000111 e1890000 1100 aeffac80 0001 aeffac80 0100 823b95c6 0011 823b95c6 1000 7becd08a 0011 7becd08a 1100 0000b9d3 0010 00000530 0018 700f1b7a 937f237c 442a61f5 9bf1af40 c7b4800d 92088310
+1 01 40000130 001 00000001 ef0f4d6f 0011 ef0f4d6f 0100 00000130 0008 f95e126a 9c29b3b2
+1 01 40000712 001 00001000 d4a80000 1100 8448e9ad 0010 8448e9ad 1100 f7f0a8a7 0010 f7f0a8a7 1100 659af699 0011 659af699 0100 4f077299 0000 4f077299 0100 00000710 0018 3423cd12 21d2f91a 142cf9d6 c5cbf2cc e9cdad44 aaf6c68a
+0 10 400000fa 001 00001111 6d9a28ee 522a4f7b 522a4f7b abcc9546 abcc9546 e4ee445a e4ee445a fac86cf0 fac86cf0 de1a5d8e de1a5d8e c0879ebc c0879ebc da83cec4 da83cec4 6d9a28ee
+0 10 400007d0 010 00000111 0712600a 9ee05be6 ef4a4baa 8b46f178 8c487713 03bbbca5 6878415a e57acbd9
+1 01 4000027e 000 00000111 2cbd0000 0100 2cbd0000 1000 728478f4 0000 728478f4 0000 728478f4 0100 728478f4 0000 0000f9a1 0001 0000f9a1 0010 00000278 0010 b6b92d4f d3200e6e 1774c3a1 edaa7938
+0 01 400002b0 010 00001000 adfd570f ade92b12 5eb6e209 0c879faf 2e632083 db996943 e2742d60 fb88f026 ff35f05f
+0 01 4000052c 010 00001100 daeef14b 4bccbf5e e189f18d 95ff9380 82e695c6 7becd08a e06ab96a 3795276b 2f297c69 332c4739 12dd6d2f e7b565ca 75696fae
+0 10 40000694 010 00001111 dabccac0 9f612bec 030f97db e52acd90 da46c44f 4e2c595a 17a8871a 59f4b956 0f4ea73b fa03f6cc c2ec1979 41297fb0 8e22f123 49b99ca2 5947f1a3 9d0e73e7
+0 10 400003ea 000 00001111 a5cef0fa a5cef0fa e603f0fb e603f0fb e603f0fb e603f0fb d526f0f8 d526f0f8 d526f0f8 d526f0f8 17ddf488 17ddf488 17ddf488 17ddf488 a5cef0fa a5cef0fa
+0 01 4000029c 010 00000000 43eef0a7
+0 01 40000446 000 00000111 87a6f2c0 87a6f2c0 a0b0e71e a0b0e71e a0b0e71e a0b0e71e dad63254 dad63254
+1 01 400003e0 001 00001100 878efac7 0011 878efac7 1100 a64fd96e 0011 a64fd96e 1100 7cd9bdaf 0011 7cd9bdaf 0100 c3dd972f 0011 c3dd972f 0100 3b65bf29 0011 3b65bf29 1000 1e9963da 0011 1e9963da 1000 00003965 0001 000003e0 0020 0fb001a4 1b63a331 2da75732 16615491 17fcafa8 26a2245f 493ce7ba 7b0f31ff
+0 01 4000069c 010 00000111 030f97db e52acd90 da46c44f 4e2c595a 17a8871a 59f4b956 0f4ea73b fa03f6cc
+1 01 400000fc 000 00001110 c25272bc 0001 c25272bc 0010 c25272bc 0100 c25272bc 1000 e020254f 0001 e020254f 0010 e020254f 0100 e020254f 1000 2543dfaf 0001 2543dfaf 0000 2543dfaf 0100 2543dfaf 1000 00617f42 0001 00617f42 0010 00617f42 0000 000000f8 0018 1ab2f4ab 7801cf27 88ac2ca6 d6cdeae3 d3a4de68 29f0d0a0
+0 10 40000526 000 00001111 daeef149 daeef149 abccf14a abccf14a abccf14a abccf14a daeef14b daeef14b daeef14b daeef14b abccf148 abccf148 abccf148 abccf148 daeef149 daeef149
+1 01 40000410 010 00000001 b8e84cb8 1110 81f2ebc4 0110 00000410 0008 f980fd26 bd0f5d78
+0 01 400001a0 010 00001110 61c63555 bc708069 76eae2db 34e2241e 5ebb4b3f 7f59fca0 0afb8428 39b33853 db40f0c2 cc26666b ab55dbba 912759ac 79ee5bff 075a81bd 30741ff3
+0 01 400003fa 001 00001000 1ecc4d65 22988334 22988334 5eb8788c 5eb8788c 5f45f149 5f45f149 2c09f137 2c09f137
+0 01 40000588 010 00001011 f4d4e6d8 8984c563 e5ccf1d1 da327cc9 a9cc55b2 d0346aad 041f1766 9b898da0 37f7abfc 9b0d4f8b f549445f 3c94dca8
+1 01 4000004f 000 00001100 35000000 0000 a19d57cb 0000 a19d57cb 0000 a19d57cb 0000 a19d57cb 1000 e1b31e96 0001 e1b31e96 0000 e1b31e96 0100 e1b31e96 1000 25794b10 0001 25794b10 0010 25794b10 0100 25794b10 1000 00000048 0018 f62ad43c 1eecfe82 23ff1e99 2cc4520c 68de9969 b4a48576
+0 10 40000543 000 00001111 7becd08a e06ab96a e06ab96a e06ab96a e06ab96a 3795276b 3795276b 3795276b 3795276b 2f297c69 2f297c69 2f297c69 2f297c69 7becd08a 7becd08a 7becd08a
+1 01 40000799 000 00000110 bdd0f900 0010 bdd0f900 0000 bdd0f900 1000 0e1123ae 0000 0e1123ae 0010 0e1123ae 0100 0e1123ae 1000 00000798 0008 a3dcd5c8 6d534562
+0 01 40000108 001 00000000 7cd27f42
+0 01 400007c8 010 00001001 6878415a e57acbd9 0712600a 9ee05be6 ef4a4baa 8b46f178 0f39f94b 84ee536c 759699b8 daa316d4
+1 01 400003ae 001 00001110 ce820000 1100 c8dcad9c 0011 c8dcad9c 1100 b1cabc55 0001 b1cabc55 1100 eb6efc38 0011 eb6efc38 1000 579bab7b 0011 579bab7b 1100 dad381f0 0001 dad381f0 0100 d95a5059 0011 d95a5059 1000 36f15900 0011 36f15900 1000 000003a8 0028 e3e1cede 9be5755d 47a39aeb 62944980 75179df2 2790800d 2cb5e9ff da13828b d02c6b30 de5b3adb
+0 10 40000180 010 00000011 abccf060 188e3f20 abbdc662 3097f32d
+0 01 40000366 000 00001010 c84ef8d9 c84ef8d9 d893cd00 d893cd00 d893cd00 d893cd00 c827f0fe c827f0fe c827f0fe c827f0fe ab60d392
+1 01 400005f8 010 00001010 147373ef 1111 7a86d8de 1010 e1b2f0e2 1111 f7a6fbcb 0001 29e4de41 1100 afa9dfa6 0011 86e866d0 1010 3d29e585 1101 c5a383c9 0011 8777f27b 1111 dee83220 1110 000005f8 0030 eb3ba0b9 99114088 6a77a198 8ecccc74 afc29ace 5154c395 d727679d 712b46f1 d6e4df43 0505a425 8b296097 23edc32c
+1 01 40000620 001 00001011 6c03c5c2 0010 6c03c5c2 1100 c79f48fe 0000 c79f48fe 0100 db92d265 0011 db92d265 1100 eb7fe0c9 0011 eb7fe0c9 1100 5e337a89 0001 5e337a89 1000 4c19e442 0000 4c19e442 1000 00000620 0018 096ec19c d5fcf38b db3dd66e ba242193 c9213f12 9245ccf6
+1 01 400007ee 000 00001011 bb0e0000 0100 bb0e0000 1000 a526791e 0001 a526791e 0010 a526791e 0000 a526791e 1000 fea252b8 0001 fea252b8 0010 fea252b8 0100 fea252b8 0000 0000b46e 0000 0000b46e 0010 000007e8 0018 3f59d41e 76c31d4d 11d1793d 74cfa559 6e4e96cf 83dc4577
+0 10 400004d0 010 00001111 f01db13f 3bea5a1c 164d48f7 f747c8eb 82f9bf6a 3415262b 50fd736c 8e4e2852 d77ff53c 7adefd0a ca93d3f7 a4e8add6 359bf13f a821f931 60b88f39 423f1480
+0 10 4000073e 001 00000111 470df88e 0c1cf1cc 0c1cf1cc da52b84f da52b84f 55fc2689 55fc2689 470df88e
+0 01 400005c4 010 00001011 9b9aff8b 724e36bb 36471728 c7e14275 df854962 8134c4e8 fa5fbece abcc447d 4c317f8b 18cccc98 da3c8dc9 25208957
+0 01 40000688 001 00000101 49b99ca2 49b99ca2 5947f1a3 5947f1a3 9d0e73e7 9d0e73e7
+1 01 400002a1 000 00000010 54071900 0010 54071900 0100 54071900 0000 000002a0 0008 74fe4e8c 404b9cb2
+0 01 40000066 000 00001111 699b55bd 699b55bd f3ba131d f3ba131d f3ba131d f3ba131d 84ddf404 84ddf404 84ddf404 84ddf404 cdb2484d cdb2484d cdb2484d cdb2484d 7f81ada5 7f81ada5
+1 01 400007e8 001 00000100 636316fc 0011 636316fc 1000 e229efae 0011 e229efae 1000 0000ad62 0011 000007e8 0010 bf938999 80d82d98 6d64a17d 829930ee
+0 01 400004c0 010 00001100 359bf13f a821f931 60b88f39 423f1480 f01db13f 3bea5a1c 164d48f7 f747c8eb 82f9bf6a 3415262b 50fd736c 8e4e2852 d77ff53c
+0 01 40000170 010 00000111 ab1fae4f daeef05d abccf05e daeef05f abccf060 188e3f20 abbdc662 3097f32d
+0 10 40000078 010 00000011 a522c57e 5c2cd0c0 cdb2484d 7f81ada5
+1 01 40000100 001 00001010 3e2e4245 0011 3e2e4245 1100 3062c3e1 0010 3062c3e1 1100 63a9343a 0001 63a9343a 1100 a4ca3982 0011 a4ca3982 1000 19fb7b5f 0011 19fb7b5f 1100 000011d0 0011 00000100 0018 243496fb e305741d 2a9375f7 8d228a6e f2c8d998 620f6d85
+0 01 4000036e 000 00001111 c827f0fe c827f0fe ab60d392 ab60d392 ab60d392 ab60d392 2ff2cbad 2ff2cbad 2ff2cbad 2ff2cbad a5565c5b a5565c5b a5565c5b a5565c5b daee8edf daee8edf
+1 01 4000052c 010 00001000 bbacb168 1110 172ef112 1111 ae983460 1101 c0456435 1101 78b50a4b 1101 c24fcdd9 1011 b58c5ee7 1001 e3aef564 1111 32711eea 1111 00000528 0028 8687e37b a91cc84c 87816b00 6c1b4753 f3cc66ce 7ec1e03f 9bd74551 fd32a36f d591da12 03ceae54
+1 01 40000784 001 00001100 12d9d6ab 0010 12d9d6ab 0000 ae3829d2 0001 ae3829d2 0000 a92447f5 0011 a92447f5 1000 ea853cc5 0010 ea853cc5 1100 0435bc0e 0011 0435bc0e 1100 f8dfdb8c 0001 f8dfdb8c 1100 00003024 0010 00000780 0020 7b59daf4 e476598c 94b1904f e33841b3 b797f4f2 db5ea868 cc5f4961 7bd3ba3c
+1 01 400007ba 001 00000010 a7690000 1100 a635bce2 0010 a635bce2 1100 000007b8 0008 d2380b0d 6d1c424f
+0 01 40000790 000 00001000 ea853ce4 ea853ce4 ea853ce4 ea853ce4 0435bc0e 0435bc0e 0435bc0e 0435bc0e f8dff98c
+1 01 400002e0 010 00001001 00cb9f5d 1101 c5111188 1110 4e9a6423 1101 d40222a8 1111 cd6c945d 1111 bbb74d20 1011 e62fe4f8 0110 53e01e30 1110 8fc302ab 1101 b417a630 1010 000002e0 0028 8f895ec3 40f5ca80 d19b0fa3 58ae558d 7ca7b663 23b46c2e 64cf336c 4e7f49d1 f33e0469 811e4f5b
+1 01 40000738 001 00001111 1a177af9 0011 1a177af9 1100 3e9a2f9d 0011 3e9a2f9d 0100 8b9ac572 0000 8b9ac572 1100 f26c0543 0011 f26c0543 1100 6a7069d5 0010 6a7069d5 1100 10175ad2 0011 10175ad2 1000 3933e675 0011 3933e675 0100 b18cf14b 0011 b18cf14b 1000 00000738 0020 fe0a8ea4 d5408614 e38d42ea 08cea28b bb89252a 7b9dd5fd d27be674 d7478867
+0 10 400005b4 001 00001111 3c94dca8 3c94dca8 38535f71 38535f71 ad670e93 ad670e93 041f1766 041f1766 9b898da0 9b898da0 37f7abfc 37f7abfc 9b0d4f8b 9b0d4f8b f549445f f549445f
+1 01 40000308 010 00001011 2e38c07d 1110 d311ad13 0101 97c55aa9 1001 28a2000a 1111 0883d833 1011 4c3f8837 0110 d8d9d607 1010 327f1664 1110 726babb7 1111 a81d6e50 0111 666d8b64 1111 0e6616df 1111 00000308 0030 5ddd7aa6 d2f44d91 4adee460 d5ea11ac 056c3829 54dd547b fc26ecce 316ed3c1 fd50d278 15cebbeb 13f9f25e ec08ee78
+1 01 40000488 010 00000000 97231852 0111 00000488 0008 08c1df20 c23a352f
+0 10 400001c3 000 00000111 db40f0c2 cc26666b cc26666b cc26666b cc26666b db40f0c2 db40f0c2 db40f0c2
+1 01 4000071c 010 00001010 0b115124 1110 c684f59b 1110 66ffa371 1111 623bffcf 0110 a3c5db6c 1110 3805a49e 1111 1169c0b1 1111 f813aa51 1100 f6606629 0110 2567d89b 0101 6557a05c 1111 00000718 0030 b1642bc8 2f5030ed 63a0f865 4e1bc5f3 d07f1501 ef41497f 7672e352 c0a730bc 37948d8d eb2f9bf7 767c3b4b ab6cc371
+0 10 40000304 010 00000111 b4eea6c1 2e38c0c2 da11f013 97ccf0a9 28a2000a 08ccd833 da3f88c7 8fc320ab
+1 01 40000253 000 00000101 f7000000 0000 fa127715 0001 fa127715 0010 fa127715 0100 fa127715 1000 000000a9 0001 00000250 0010 8e29c498 db0e818f be379e3c 371290ce
+0 10 40000490 010 00000001 f00bdd35 47cd5708
+0 10 40000036 001 00000111 d185f0b4 066df00e 066df00e daeef0c2 daeef0c2 abccf003 abccf003 d185f0b4
+1 01 400001c0 010 00000010 694da6ee 0001 1952fcf3 1111 b6b9dc7e 1111 000001c0 0010 1c524d63 f090c45c e19bfa58 84868706
+0 01 400000c3 000 00001100 36f491cf a4ec20b4 a4ec20b4 a4ec20b4 a4ec20b4 d2fb90fe d2fb90fe d2fb90fe d2fb90fe d390d435 d390d435 d390d435 d390d435
+0 10 400000a6 001 00000001 daeef029 daeef029
+1 01 400005fd 000 00001010 85e1c300 0010 85e1c300 0100 85e1c300 0000 b6cd9c60 0001 b6cd9c60 0010 b6cd9c60 0100 b6cd9c60 1000 b39dadf2 0001 b39dadf2 0010 b39dadf2 0000 b39dadf2 0000 000005f8 0010 f1debe15 22135c8c e90af0f4 a10a46f0
+0 01 4000062c 001 00000110 eb7fe0c9 eb7fe0c9 5e038689 5e038689 4c4cf372 4c4cf372 bef9cc2f
+0 10 4000017a 001 00001111 abccf05e daeef05f daeef05f b961ddb9 b961ddb9 67450cf7 67450cf7 8f62c65a 8f62c65a fd9a1626 fd9a1626 ab1fae4f ab1fae4f daeef05d daeef05d abccf05e
+0 10 40000422 001 00001111 eed7bf78 ca423207 ca423207 0aaa1fb4 0aaa1fb4 e3cbc297 e3cbc297 e4b719d2 e4b719d2 5b414534 5b414534 8fcce67d 8fcce67d 2c3a3bb7 2c3a3bb7 eed7bf78
+0 10 400007da 001 00001111 ef4a4baa 8b46f178 8b46f178 8c487713 8c487713 03bbbca5 03bbbca5 6878415a 6878415a e57acbd9 e57acbd9 0712600a 0712600a 9ee05be6 9ee05be6 ef4a4baa
+1 01 40000694 010 00001111 8915ad57 1001 725c9c25 0011 70138b34 1011 d6cb7c06 1001 7787103d 1011 7a40ce78 1100 922a2db7 1111 e14f45df 1100 b3875316 0111 746603c1 1111 0295b971 0111 fc536f04 1111 bfd80261 1111 21f7e1f7 1111 a724625d 1111 32d3d554 1111 00000690 0048 98303b4b 007b92ea cffaa659 876133f0 285ee63c 48c3efdc 2555868c 7862ab9f 45f7af0d 74fb06a0 ea3db7f5 5b5c9029 1d054003 fb8eb8dd e2febf81 12f3431b e075f4a5 fa979967
+0 01 400006b0 010 00001011 e14fb956 0f875316 746603c1 c295b971 fc536f04 bfd80261 21f7e1f7 a724625d 32d3d554 c10df10a bb1421b6 5d12aa9b
+0 01 40000262 000 00001000 011d394d 011d394d daee96e5 daee96e5 daee96e5 daee96e5 abccf09a abccf09a abccf09a
+1 01 40000335 000 00001101 e7a85d00 0010 e7a85d00 0100 e7a85d00 1000 e4e6a2a4 0001 e4e6a2a4 0010 e4e6a2a4 0100 e4e6a2a4 1000 e12c03cb 0000 e12c03cb 0010 e12c03cb 0000 e12c03cb 0000 00459f55 0001 00459f55 0010 00459f55 0100 00000330 0018 e1b40c31 d64b6564 786ccb0f f430781b d2a46574 e9df21af
+1 01 4000074c 010 00000001 0dfc25d1 1110 e2f8bf20 1010 00000748 0010 7864d843 802667c3 2b45e10e 4ac8aa3a
+1 01 400005aa 000 00000110 15710000 0100 15710000 1000 402bfe80 0001 402bfe80 0010 402bfe80 0100 402bfe80 1000 00000085 0001 000005a8 0010 2bcee841 760d1095 5d430a29 a5132db9
+1 01 40000730 010 00001011 f297765e 0111 3c974d60 1111 db638f0c 1011 d91f7877 1111 df2c4504 0111 f702499f 1111 33f38617 0110 a6421d1b 1101 0413946e 1111 333c4050 1110 6abfa164 1011 5cf9ec1e 1010 00000730 0030 4e425a85 51826ec7 7dda7ae3 b026fa08 189079f0 219528a8 ed8110c3 a6a2634f 748f548a 4e0fce1f 57746129 bbf2f694
+1 01 400007c6 000 00000100 cb0a0000 0100 cb0a0000 1000 00827609 0000 00827609 0010 00827609 0100 000007c0 0010 bd920cce 7c5c4586 623b8ba3 08f0c5e6
+0 10 4000058a 001 00000001 f4d4e6d8 f4d4e6d8
+1 01 4000008c 010 00000111 8dfebf1c 1111 e196721c 1111 eec2ab81 0001 f4253c42 1000 5150a7c2 0111 d7484f18 1111 1f2aaba7 1111 30388773 0110 00000088 0028 390a5ab1 69675d85 451f43dc 5182e532 49dcda64 bba85603 36b1ca6d 6aa56b70 38aac034 8d8c28c1
+1 01 400005b0 010 00001101 49b8f227 1111 e88cbd25 1000 8558dd63 1011 330ec7d6 1001 c77b3c5c 1101 9d59e1c4 1111 c59292d9 1111 bf4a1cf3 1111 d4f66a4f 1111 43d2a5c2 1101 08e3128f 1111 826fdbef 1111 cd03768a 1111 d707305d 1101 000005b0 0038 fc210d8d 6a16ffe0 bdf605f7 52bbebd0 5713685f 29f37c55 941cf89c 0cd5ad7e 2e039224 04c483c5 33368b48 c5f8c4aa 37c74636 88df042b
+1 01 4000057e 001 00000010 76660000 1100 ca6cefd7 0010 ca6cefd7 1100 00000578 0010 0d11b53c 8c3273be f9eb1ae2 ad502b55
+0 01 400000cc 001 00000001 d390d435 d390d435
+0 10 40000744 010 00000011 f702499f 6af386fd a642251b 8b2c4504
+1 01 400001d5 000 00001101 3815c700 0010 3815c700 0100 3815c700 1000 f24cf8e9 0001 f24cf8e9 0010 f24cf8e9 0100 f24cf8e9 0000 44afbe3b 0000 44afbe3b 0010 44afbe3b 0000 44afbe3b 1000 00ffb18d 0000 00ffb18d 0010 00ffb18d 0100 000001d0 0018 fc3d63f7 1662a28b 4f33e0e4 088df17b 26ece52a 76150110
+0 10 40000010 010 00000011 2b7720b6 3aa3bc18 f5d8f116 457978f1
+0 10 40000310 001 00000011 97ccf0a9 97ccf0a9 28a2000a 28a2000a
+0 10 40000218 001 00000001 5fadb61f 5fadb61f
+1 01 4000069c 000 00001111 776972f4 0001 776972f4 0010 776972f4 0100 776972f4 1000 9d27e844 0000 9d27e844 0010 9d27e844 0100 9d27e844 1000 4792bf9e 0001 4792bf9e 0010 4792bf9e 0100 4792bf9e 1000 810b9b9e 0001 810b9b9e 0010 810b9b9e 0000 810b9b9e 1000 00000698 0018 bc646f0e 5e371c48 af9900af fb80a1a5 2a96c948 fb36916d
+0 10 40000210 010 00000001 17401eb7 026905b2
+0 01 400005ce 001 00000101 bf4a1cf3 d4f66a4f d4f66a4f 43d249c2 43d249c2 08e3128f
+1 01 40000540 000 00000000 0000006d 0001 00000540 0008 9fc72679 1da74a7c
+0 01 4000070a 001 00000110 002b19e5 6146f161 6146f161 d4a86a6d d4a86a6d 8448e981 8448e981
+1 01 400005b4 000 00000010 00fbb513 0001 00fbb513 0010 00fbb513 0100 000005b0 0008 f2b46422 6368c100
+1 01 400004b0 001 00001101 c804e59a 0010 c804e59a 0000 73a8bd16 0000 73a8bd16 0000 3328f40b 0010 3328f40b 1100 70af84d2 0000 70af84d2 1000 be4bb49c 0011 be4bb49c 0100 8581f958 0000 8581f958 1100 88e84d0e 0011 88e84d0e 1100 000004b0 0020 8f1710b9 1d0493b9 3aaf0306 9961396c d6ad6f46 b7b0e4e7 1366804b 52043eff
+1 01 400005b4 001 00000000 00005ce2 0011 000005b0 0008 923a78f4 0d4cfa7d
+0 10 40000489 000 00000001 4c231852 4c231852
+1 01 400000a0 010 00000111 c2ed0ae4 1010 86f00be4 0111 a006d271 1011 c4c637f8 0101 d463d8c3 0111 264aa957 1111 a5596c7f 1111 2c03e5b3 1111 000000a0 0020 ec0e442f 372cd944 0de7291c 35db823f 2ec8fc07 79628a5a e20a3672 95935455
+1 01 400006f0 010 00001000 baa3c711 0010 cd3ad8cf 0111 3ed24dbf 1111 2ca53c79 0111 6c8c3754 1110 47813587 1111 8d78aed0 1011 d3462dc1 0110 180a5af7 1110 000006f0 0028 273a9c69 8478cb46 7782796d 297a1d9c 289e23df 9d7b3129 c79aee34 cdf70af9 a0dbc656 4a37140e
+0 10 400003b6 000 00000011 b1caf055 b1caf055 b1caf055 b1caf055
+0 10 400001fe 001 00000111 27499bfd 088f9698 088f9698 5b013d95 5b013d95 3396c26f 3396c26f 27499bfd
+0 01 40000602 001 00000111 b6cd9c60 9bb4adf2 9bb4adf2 29e46686 29e46686 c810dfa6 c810dfa6 864f662e
+1 01 40000429 000 00001011 86ff1600 0010 86ff1600 0100 86ff1600 1000 c167437b 0001 c167437b 0010 c167437b 0100 c167437b 1000 47cbc283 0001 47cbc283 0010 47cbc283 0100 47cbc283 0000 000000dc 0001 00000428 0010 649748ce 60ba7421 9da239d0 42376ccb
+1 01 40000022 000 00000100 fb880000 0000 fb880000 1000 00e080ef 0001 00e080ef 0010 00e080ef 0100 00000020 0008 b1e27cbf 48a21b74
+1 01 40000148 001 00001101 fa781efc 0010 fa781efc 1100 f3ce1bb4 0001 f3ce1bb4 1100 1fb1d71e 0001 1fb1d71e 1100 b272a6d9 0011 b272a6d9 0000 964c8a08 0011 964c8a08 1100 70596bbd 0011 70596bbd 1100 2bf9c739 0001 2bf9c739 1000 00000148 0020 2330ff59 5fdf4960 e10b485b 5120704f 88de11b7 051506bc 0d6f7f21 e327ccec
+0 01 4000072c 010 00000000 a3c5db34
+1 01 4000070c 001 00001011 08ad15e6 0011 08ad15e6 1000 31631eae 0011 31631eae 1100 be4e2956 0011 be4e2956 1100 b6341da4 0011 b6341da4 0100 8a369c70 0011 8a369c70 1000 dfc4cf71 0001 dfc4cf71 0100 00000708 0020 b4261fe5 86582764 41d40953 ba2c2dd2 ec298503 f18217d5 17faa0dc 24ffe9d5
+0 01 400004c4 010 00001010 8581f931 88e84d0e 423f1480 f01db13f 3bea5a1c 164d48f7 f747c8eb 82f9bf6a 3415262b 50fd736c 8e4e2852
+0 10 4000065e 001 00000111 d03c3cf0 0970fb61 0970fb61 6225f8c5 6225f8c5 2d17d26c 2d17d26c d03c3cf0
+1 01 40000249 000 00001000 c26d5200 0000 c26d5200 0100 c26d5200 1000 b192ded0 0001 b192ded0 0010 b192ded0 0100 b192ded0 1000 00000838 0001 00000838 0000 00000248 0010 038e4750 81aba79b fd411942 8cc835be
+0 01 400001b8 010 00000010 0afb8428 39b33853 db40f0ee
+1 01 400001a2 000 00001001 9c020000 0100 9c020000 1000 362037bd 0000 362037bd 0010 362037bd 0100 362037bd 1000 ac00657b 0001 ac00657b 0010 ac00657b 0100 ac00657b 0000 000001a0 0010 0c446c1e c6394abb 1fa67299 b7db4444
+0 01 40000550 010 00000101 332c4739 12dd6d2f e7b565ca 75696fae cea515d5 86a001a9
+1 01 40000048 001 00001000 eb0bd4ec 0011 eb0bd4ec 1100 7de6b753 0011 7de6b753 0000 21291ecb 0001 21291ecb 1100 ce865b7d 0011 ce865b7d 1100 00007940 0010 00000048 0018 23c86409 cd8eb1c7 dcb43e29 9f231b64 1f190bdb c02ab248
+1 01 4000044c 000 00000110 7f504c0e 0001 7f504c0e 0010 7f504c0e 0000 7f504c0e 1000 00b95c9e 0000 00b95c9e 0000 00b95c9e 0100 00000448 0010 b3a23ff1 f21a67f6 c8d69a2b 820e04d7
+1 01 400005ae 001 00001101 558e0000 0000 dd4548d9 0000 dd4548d9 1100 db3a119a 0010 db3a119a 0000 2bc5802f 0011 2bc5802f 1100 00ba48bd 0011 00ba48bd 0100 ce231046 0010 ce231046 1000 d1d57596 0011 d1d57596 1100 00003004 0011 000005a8 0028 2bcee841 760d1095 620640e2 1470c22e 477fa3b9 64800b96 f875c13d a67e8915 98732442 e0cc93da
+0 01 40000428 010 00001111 86ff16b4 c167437b e4cbc283 5b4145dc 8fcce67d 2c3a3bb7 9c8d9107 87a6f2c0 a0b0e71e 7fd64c0e cab9997e 2b268346 be82c6dc 7b330d17 c53e2a1e 653c8a27
+0 10 400007e8 010 00000001 639616fc e20eefae
+0 01 4000013c 010 00001110 daeef04f abccf050 da6bf051 fa781e52 f3cef0b4 1fb1f01e c67da6d9 964c8a08 70596bbd 2b61dd39 67450cf7 8f62c65a fd9a1626 ab1fae4f daeef05d
+0 10 40000478 010 00000111 00ab494d 0986a8d2 c53e2a1e 653c8a27 2c10466c 5e56da4f 4a9d9b85 d8587c23
+1 01 4000006a 000 00000000 003e0000 0100 00000068 0008 26199e2e 1de03a9a
+0 01 400002f0 000 00001101 cd6c945d cd6c945d cd6c945d cd6c945d bbee4d20 bbee4d20 bbee4d20 bbee4d20 e62fe4be e62fe4be e62fe4be e62fe4be 53e01ec9 53e01ec9
+0 10 40000570 000 00001111 cccc5c5c cccc5c5c cccc5c5c cccc5c5c b4242d8f b4242d8f b4242d8f b4242d8f abc4f1c5 abc4f1c5 abc4f1c5 abc4f1c5 766662e4 766662e4 766662e4 766662e4
+0 10 40000764 010 00000111 1df98fba f7b8bc90 daeef1db abccf1dc f30df1dd ecccccde 875470c3 ea338672
+1 01 40000644 001 00000001 994bfef5 0001 994bfef5 1100 00000640 0008 3aca3b7e a424a675
+1 01 40000048 000 00001010 ed20adf6 0000 ed20adf6 0010 ed20adf6 0100 ed20adf6 1000 3a074270 0001 3a074270 0010 3a074270 0100 3a074270 0000 0041cb43 0001 0041cb43 0010 0041cb43 0100 00000048 0010 c9a3f346 5cd83e8b 1859fcd3 189230d0
+0 01 400003b4 000 00001000 b1caf055 b1caf055 b1caf055 b1caf055 ebccfc38 ebccfc38 ebccfc38 ebccfc38 579bab7b
+0 01 40000218 010 00001110 5fadb61f a24d407c f1726b45 7cfa6589 c04fba1c 39eef06b 197d1af9 85c143e8 5a5ed6f3 97ad4795 eb131f4a daac5195 c26d8fce b192ded0 75ccf038
+0 01 400007eb 000 00001011 639616fc e20eefae e20eefae e20eefae e20eefae a50cad62 a50cad62 a50cad62 a50cad62 daa252b8 daa252b8 daa252b8
+0 10 400006cd 000 00000011 a724625d a724625d a724625d a724625d
+1 01 400000f2 001 00000100 c89c0000 0000 98c8011b 0011 98c8011b 0100 c7a16a9c 0011 c7a16a9c 0100 000000f0 0010 965df370 d22acfcc 1f1244a5 a3d4387a
+1 01 40000464 010 00000100 6e717b05 1110 8e4ae63b 1111 0fd87383 1101 00ea3601 1001 b2bb3810 1111 00000460 0018 bf1c3d81 4f4671e1 4cecc4a5 a83b49b2 8f0c0ede 29b6206f
+1 01 400005fa 000 00000000 00600000 0100 000005f8 0008 bed8249d ddf52fe3
+0 01 400006b6 001 00001010 0f875316 746603c1 746603c1 c295b971 c295b971 fc536f04 fc536f04 bfd80261 bfd80261 21f7e1f7 21f7e1f7
+1 01 40000164 010 00000101 ecb0e4dd 0110 f090bcad 0111 cc793677 1110 7d829077 1111 4bbc94e6 1111 3ec0dd71 1011 00000160 0020 a7dc6550 0612a89c bbbfd565 616cbc13 fb902785 39e61a0f 0216f59e c8a55908
+1 01 4000070c 010 00001111 e3e17664 1111 7a08c6b1 1111 1db51214 1010 3001fb79 1111 29550d3a 1101 2d455c54 0100 ae98f459 0000 ca13c48c 1111 7894e1e3 1001 a119a54a 1101 4acc8ecc 1111 f47ec436 1111 ccf74263 1111 191de109 0101 06d122f9 1111 3eafa040 1110 00000708 0048 dc59b79a cf64dcb3 1443fb5b 2a4119fe a5c22669 a4931084 e6fbf04a d88295cf 17a80c5a 4e26c42e c5602dda 05fdae36 b570460d fd15e6b6 a21a75e0 c8e92b5e c761dc24 620de830
+1 01 400005e4 010 00000101 5d370db8 1111 72f2e174 1010 75d7ca6e 0110 3900377d 0111 540483d3 1001 b98b855e 1010 000005e0 0020 46a89e33 4d9777ba e4b69c47 990460c7 591edf25 4453405a 99c488e1 4dfdc873
+0 01 400000a2 001 00000100 c2480a18 1ff00be4 1ff00be4 a038d271 a038d271
+0 01 400007c2 000 00001110 8c487713 8c487713 cb0abca5 cb0abca5 cb0abca5 cb0abca5 6882765a 6882765a 6882765a 6882765a e57acbd9 e57acbd9 e57acbd9 e57acbd9 0712600a
+1 01 400000b0 010 00000100 966fe05f 1110 9b9df1c8 1110 e3cf3bca 1101 aaf31ca7 1110 5bd6faf1 1101 000000b0 0018 30c2c382 72e3e056 7676a993 021283d0 e1aadf63 005d0bf5
+1 01 40000120 010 00001000 bef1ce9e 1111 f258e002 1111 fc26f582 1111 06c67d4c 1111 09b8e995 1101 04de77c1 1110 aed1bc37 1110 3b7ca907 1111 7085933a 1101 00000120 0028 41823a24 db1c835d bd304bb3 aa759724 eb99b99c f5f65427 6652c736 e2280241 4cb98ba6 02fe2059
+1 01 40000772 000 00000000 00360000 0100 00000770 0008 a30e3582 d789e645
+0 01 40000752 001 00000110 0413946e 333c404b 333c404b 6a49a164 6a49a164 5ceeec06 5ceeec06
+0 01 40000637 000 00000111 4c4cf372 bef9cc2f bef9cc2f bef9cc2f bef9cc2f 94725e8f 94725e8f 94725e8f
+1 01 4000022b 000 00001001 72000000 1000 838a4858 0000 838a4858 0000 838a4858 0000 838a4858 0000 3b749e54 0000 3b749e54 0010 3b749e54 0100 3b749e54 1000 000000ac 0000 00000228 0010 048cc6c8 58935459 be9d7c30 5ba3b5ab
+1 01 4000079e 001 00001101 7fd80000 0100 8f220065 0010 8f220065 1100 11114f76 0001 11114f76 1100 6ec3532f 0011 6ec3532f 1000 c2c8e8a4 0011 c2c8e8a4 0000 eb99f34d 0001 eb99f34d 1100 c38d5800 0001 c38d5800 0100 0000a4ca 0011 00000798 0028 fc52f481 bd2f9551 c7374f9b 873fc345 6492201d f501a1af b6f36eba ac9fca2b 5c35de30 9a5ae123
+1 01 400004a6 001 00000010 f6df0000 1100 2b94d117 0011 2b94d117 1100 000004a0 0010 3d02f4ac 7d8e3c7c 3951cb90 e08c198c
+0 10 400004c4 010 00001111 8581f931 88e84d0e 423f1480 f01db13f 3bea5a1c 164d48f7 f747c8eb 82f9bf6a 3415262b 50fd736c 8e4e2852 d77ff53c 7adefd0a ca93d3f7 a4e8add6 354bb49c
+0 01 400001b8 010 00001111 0afb8428 39b33853 db40f0ee 1952fcf3 b6b9dc7e 912759ac 79ee5bff 3815c7bd 304cf8e9 443fbeec 8affb1a4 a6ff8308 d3517025 f1135c7b 088f9698 5b013d95
+0 01 40000288 001 00001100 abe7c5ee abe7c5ee 21eeb119 21eeb119 abccf03a abccf03a 74ee6683 74ee6683 a62ff0a6 a62ff0a6 43eef0a7 43eef0a7 ab071941
+0 01 40000554 010 00001011 12dd6d2f e7b565ca 75696fae cea515d5 86a001a9 be4fc05a f9108813 cccc5c5c b4242d8f abc4f1c5 766662e4 ca6ceffc
+1 01 4000034c 001 00001010 a8dde11d 0011 a8dde11d 0100 85548eef 0000 85548eef 1100 d680a827 0011 d680a827 1100 38a79d1d 0011 38a79d1d 1100 ff284dce 0010 ff284dce 1100 0000028f 0010 00000348 0020 2654bf0e ef407a90 72ed0b39 4082bcbf 2ea8ca5e 604f5c39 ac4f392c 2a493b32
+0 10 4000004e 000 00000011 12074270 12074270 12074270 12074270
+0 10 4000016c 010 00000001 cc793626 8f90bcad
+0 01 400005d8 010 00000001 08e3128f 826fdbef
+1 01 4000066c 000 00000000 0000006a 0001 00000668 0008 d88abb84 d4867e8e
+0 10 40000760 001 00000001 ea338672 ea338672
+0 10 40000028 010 00000111 6000df0d daee29a0 abccf003 d185f0b4 066df00e daeef0c2 fbe34719 7de080ef
+0 10 40000684 001 00000111 8e22f123 8e22f123 49b99ca2 49b99ca2 5947f1a3 5947f1a3 41297fb0 41297fb0
+0 01 400007c4 010 00001100 cb0abca5 6882765a e57acbd9 0712600a 9ee05be6 ef4a4baa 8b46f178 0f39f94b 84ee536c 639616fc e20eefae a50cad62 daa252b8
+1 01 400002d5 000 00001111 e2b3ec00 0010 e2b3ec00 0100 e2b3ec00 1000 40c03513 0001 40c03513 0010 40c03513 0100 40c03513 1000 ac328280 0001 ac328280 0000 ac328280 0100 ac328280 1000 b3cc780c 0000 b3cc780c 0010 b3cc780c 0100 b3cc780c 0000 000000b4 0001 000002d0 0018 3bf6eb07 14a56815 27070f00 a2ed2674 213a43ae 0c3fb1d7
+0 01 40000294 001 00000000 74ee6683
+0 01 40000794 010 00001111 0435bc0e f8dff98c 0ed830e7 8f2200e8 11114a76 6e46532f d6aae8a4 eb99d34d 7d8df100 a769a4ca a635bca4 8c487713 cb0abca5 6882765a e57acbd9 0712600a
+0 01 4000014c 010 00000110 f3cef0b4 1fb1f01e c67da6d9 964c8a08 70596bbd 2b61dd39 67b0e4f7
+0 10 4000006c 010 00000001 84ddf404 f33e131d
+1 01 40000700 010 00001100 968b2a26 1111 a4f83d33 0011 01fbf2ee 1111 a9bc0dfb 1110 b7a6b99c 1110 5c5fd39c 0100 047c0e47 1001 838d28b2 1111 1a6882c7 1101 7273e9ef 1100 6acfe0eb 1011 8849c7f5 1100 d002b531 1111 00000700 0038 da2cd080 de34e8ae a289928b f89f23b9 544f1591 21ef3433 4e64a7f0 5d68f1b8 a87b450b 7eff8738 721e0da5 318208f3 164f0207 fcc5ec4d
+1 01 400002da 001 00000010 11860000 1100 e8fd0bc6 0010 e8fd0bc6 1100 000002d8 0008 ddd53505 11fc1429
+1 01 40000750 010 00000011 06768d82 1011 0d8d5d61 1010 793ea293 1010 b949d828 1010 00000750 0010 163297e2 da17b6f7 1497000b 40330e90
+0 01 400005fc 001 00001100 7ae1c37f 7ae1c37f b6cd9c60 b6cd9c60 9bb4adf2 9bb4adf2 29e46686 29e46686 c810dfa6 c810dfa6 864f662e 864f662e 3d297385
+1 01 40000748 001 00000010 04217a98 0011 04217a98 1100 00005313 0011 00000748 0008 cf72852d 45d6c87a
+1 01 40000791 000 00000100 069adb00 0000 069adb00 0100 069adb00 1000 0000263a 0001 0000263a 0010 00000790 0008 712159ce 46b6640d
+1 01 400002ec 001 00000110 6a44ada5 0011 6a44ada5 0100 511b6d7c 0011 511b6d7c 1100 16f03242 0011 16f03242 1100 00000e8d 0011 000002e8 0018 5d0f79e8 54c097cb d4b07b25 ab111081 ced37619 caa81cb6
+0 10 4000003e 000 00000011 daeef0c2 daeef0c2 daeef0c2 daeef0c2
+1 01 400001d6 001 00001010 70cb0000 1100 81798932 0011 81798932 1100 de8a2e22 0011 de8a2e22 0100 e319a34a 0011 e319a34a 1100 cdfb7302 0001 cdfb7302 1100 23656357 0010 23656357 1100 000001d0 0020 7ac8f17b bc996190 2fcc60fe 799defb2 dd5d8dc9 c1d94a59 a0d60953 714c7189
+0 10 4000039c 010 00000111 daeef0e7 d7ccf000 daff3a12 abccf0e2 daeef0e3 abccf0e4 daeef0e5 abccf0e6
+1 01 4000058f 000 00000010 54000000 1000 0000844e 0001 0000844e 0010 00000588 0010 ad601015 e0af26cf d07e4ab2 26dec3b7
+0 01 40000522 001 00001100 abccf148 daeef149 daeef149 abccf14a abccf14a bbacb14b bbacb14b 172ef112 172ef112 ae98f160 ae98f160 c0459335 c0459335
+1 01 40000376 001 00001111 dc7a0000 0000 c9024dc4 0001 c9024dc4 1100 309189ad 0011 309189ad 0100 29c44817 0011 29c44817 0100 4fd8fe19 0000 4fd8fe19 1100 989638da 0001 989638da 0100 ff7e3e6d 0010 ff7e3e6d 1100 9c72e8a6 0001 9c72e8a6 1100 00007c83 0001 00000370 0028 616023b4 dce57570 67d06a7b 0bb71ba1 40ce21e5 e6edfaa7 47569e7c b624f40b ac18c41d 7c4daaa1
+0 10 40000662 000 00000111 ab4e9098 ab4e9098 4114f199 4114f199 4114f199 4114f199 ab4e9098 ab4e9098
+1 01 40000759 000 00000100 01a77400 0010 01a77400 0100 01a77400 1000 0000eb86 0001 0000eb86 0010 00000758 0008 37539dc4 421964a7
+1 01 40000312 001 00001010 fd130000 0100 3e98e70a 0011 3e98e70a 1100 ef17f496 0001 ef17f496 1100 ee409ba9 0011 ee409ba9 0100 bc324ad2 0001 bc324ad2 0000 1c338cd5 0011 1c338cd5 1100 00000310 0018 8b99adfc f243ca1f 06e3d957 0e4f72ed d1e6a1a3 c3ca6c4e
+1 01 400005f0 001 00000001 883bc641 0010 883bc641 1100 000005f0 0008 c1dc4965 d901583f
+1 01 40000725 000 00001001 25d07300 0010 25d07300 0100 25d07300 1000 18b21824 0000 18b21824 0010 18b21824 0100 18b21824 0000 00163603 0001 00163603 0010 00163603 0100 00000720 0010 8e778de0 df8e21c0 0ee9d584 a6754c31
+1 01 400003e2 001 00000111 af800000 1100 12787e6d 0011 12787e6d 1100 5eecb272 0010 5eecb272 0100 b41e52c6 0010 b41e52c6 1000 0000f085 0011 000003e0 0018 a8f4a57c 0e0ae8ff 1c025636 4c4e5dc9 5102ddd1 7be85ffa
+0 01 40000239 000 00000111 5a5ed6f3 5a5ed6f3 5a5ed6f3 97ad4795 97ad4795 97ad4795 97ad4795 eb131f4a
+0 10 4000078e 001 00001111 a9ee47f5 069a3ce4 069a3ce4 0435263a 0435263a f8dff98c f8dff98c 0ed830e7 0ed830e7 ddcc9fb0 ddcc9fb0 daeed643 daeed643 abccf1d2 abccf1d2 a9ee47f5
+0 10 40000250 010 00000111 75ccf038 fa127715 e53cd6a9 1800a63f eb131f4a daac5195 c26d8fce b192ded0
+0 10 40000395 000 00001111 daeef083 daeef083 daeef083 abccf0e6 abccf0e6 abccf0e6 abccf0e6 daeef0e7 daeef0e7 daeef0e7 daeef0e7 9c72f0a6 9c72f0a6 9c72f0a6 9c72f0a6 daeef083
+1 01 400007dc 010 00000001 832f9620 1111 44394979 1111 000007d8 0010 42065d2b aa070d5a 7a535bad d4aeb8b8
+1 01 40000654 001 00001110 a081e8f4 0010 a081e8f4 0100 0dcf77f0 0001 0dcf77f0 1100 e5eab873 0010 e5eab873 1100 017df9a0 0010 017df9a0 0100 de0bff3c 0011 de0bff3c 0100 9da14c19 0011 9da14c19 1100 23752248 0011 23752248 1100 0000283d 0011 00000650 0028 e63957ab a503084d 421f3d0e 499176fd 4b7df4ff b5ec6f25 80ab6c49 901657ac 5d9e737d e49ed84e
+0 01 40000415 000 00000000 daf2eb05
+0 10 400000d0 010 00000011 abccf0f1 daeef035 fb910c12 dad0faf6
+1 01 40000608 001 00000011 e8ff56de 0010 e8ff56de 1000 8012ee73 0011 8012ee73 1100 00000608 0008 04b9ca79 d7c72374
+0 10 400001f0 010 00000011 088f9698 5b013d95 3396c26f 27499bfd
+0 10 40000432 001 00000001 e4cbc283 e4cbc283
+0 01 400001e8 001 00000111 23656325 23656325 f1135c7b f1135c7b 088f9698 088f9698 5b013d95 5b013d95
+0 10 400000d0 010 00001111 abccf0f1 daeef035 fb910c12 dad0faf6 abcc9546 e4ee445a fac86cf0 de1a5d8e c0879ebc dac8011b 6da16a9c c25272bc 5bd691f1 a4ec20b4 d2fb90fe d390d435
+0 01 400000c8 001 00000111 d2fb90fe d2fb90fe d390d435 d390d435 abccf0f1 abccf0f1 daeef035 daeef035
+1 01 40000134 001 00000110 a71db12a 0011 a71db12a 1100 c3da0bbe 0011 c3da0bbe 1100 5e15a9c2 0011 5e15a9c2 0000 00007a0d 0011 00000130 0018 f33af801 403d4fdc 49d74636 9491660f 3f05bf8c 68764be2
+1 01 400000db 000 00000001 3f000000 1000 0000006a 0000 000000d8 0008 c60d06c3 6f195511
+1 01 4000027a 000 00001010 d65a0000 0000 d65a0000 1000 2d863387 0001 2d863387 0010 2d863387 0100 2d863387 1000 86bd88ad 0001 86bd88ad 0010 86bd88ad 0100 86bd88ad 1000 000000ec 0001 00000278 0010 8ec964b8 5743ffbd 13cf8d33 6b47856a
+1 01 400001b6 001 00000100 70e60000 1100 181e1daa 0001 181e1daa 0100 04402718 0010 04402718 1100 000001b0 0010 9afe45b6 12f682bd cc2bb639 c2d27949
+0 01 40000220 010 00000010 f1726b45 7cfa6589 724fba1c
+1 01 40000466 001 00000011 6bd10000 1000 e96bdbbc 0011 e96bdbbc 0100 0000350a 0011 00000460 0010 1b8ee13b 94193e74 4f1f5b0a 98d4b575
+0 10 4000010c 001 00000001 a4c83982 a4c83982
+0 01 400003bd 000 00000111 579bab7b 579bab7b 579bab7b abd3f0f0 abd3f0f0 abd3f0f0 abd3f0f0 d9cb5059
+1 01 400004b0 010 00001110 8649edcc 1111 80840a07 1010 eb786964 1111 d28a888b 1110 673b5827 1111 7c9a7a58 1111 7aac88e3 1101 9824e008 1010 bc903b4f 1111 5865597c 1111 bcab26ec 1111 6ddce657 1101 a0ff2607 1110 852916d7 1111 866e2da6 0011 000004b0 0040 faedef59 b162bd5f d480c958 edb9b048 4d380fd8 0acc45f2 675af9f5 73098076 1bc10921 df466ce3 a7ee1dd4 716cca6b b3d48187 60fa5b9f 945a8b8e d6d53724
+0 01 4000030c 001 00000101 da11f013 da11f013 9713f0a9 9713f0a9 3e98e70a 3e98e70a
+0 01 4000036a 000 00001000 d893cd00 d893cd00 c827f0fe c827f0fe c827f0fe c827f0fe ab60d392 ab60d392 ab60d392
+0 10 40000600 001 00000111 b6cd9c60 b6cd9c60 9bb4adf2 9bb4adf2 e8e45686 e8e45686 8012ee73 8012ee73
+0 01 40000455 000 00001111 2b268346 2b268346 2b268346 be82c6dc be82c6dc be82c6dc be82c6dc 7b330d17 7b330d17 7b330d17 7b330d17 c53e2a1e c53e2a1e c53e2a1e c53e2a1e 6b717b27
+0 01 400003a2 000 00001101 abccf0e8 abccf0e8 daeef0e9 daeef0e9 daeef0e9 daeef0e9 abccf0ea abccf0ea abccf0ea abccf0ea ce82f0eb ce82f0eb ce82f0eb ce82f0eb
+0 01 4000019e 001 00001100 0a5fa130 9c023555 9c023555 36203769 36203769 7600657b 7600657b 34e2241e 34e2241e 5ebb4b3f 5ebb4b3f 70e6fca0 70e6fca0
+0 10 40000186 001 00000111 188e3f20 abbdc662 abbdc662 3097f32d 3097f32d abccf060 abccf060 188e3f20
+1 01 40000426 000 00000111 98f30000 0000 98f30000 0000 32612b51 0001 32612b51 0010 32612b51 0100 32612b51 1000 0000a2bb 0001 0000a2bb 0010 00000420 0010 62a44090 d8a1315c 1ad4d3c6 9395fb33
+1 01 400004fa 001 00000111 af270000 1000 c8a4bb78 0011 c8a4bb78 1100 20858a67 0011 20858a67 0100 c2b98633 0011 c2b98633 1100 00004b13 0011 000004f8 0018 fbc15201 989eff11 72950dee 00c5c042 22ac6b45 406076ce
+0 01 400005fd 000 00001101 7ae1c37f 7ae1c37f 7ae1c37f b6cd9c60 b6cd9c60 b6cd9c60 b6cd9c60 9bb4adf2 9bb4adf2 9bb4adf2 9bb4adf2 e8e45686 e8e45686 e8e45686
+1 01 40000430 001 00000111 cf8ec472 0001 cf8ec472 0100 41a20800 0011 41a20800 1100 7c82c32e 0011 7c82c32e 1100 e7b5ddac 0011 e7b5ddac 1100 00000430 0010 e58a4c39 c608928e c6077f6d 3cc3fa14
+1 01 40000097 000 00001110 26000000 1000 48110c73 0001 48110c73 0010 48110c73 0000 48110c73 0000 e2cd83e8 0001 e2cd83e8 0010 e2cd83e8 0100 e2cd83e8 0000 626a77d6 0001 626a77d6 0000 626a77d6 0100 626a77d6 1000 00008d9f 0001 00008d9f 0010 00000090 0018 eca9d22a 5c3daf85 0d1edd03 c37f17fc 904d113d 39c521b1
+1 01 400006a1 000 00000110 2d6d6f00 0010 2d6d6f00 0100 2d6d6f00 1000 38cc2ecc 0001 38cc2ecc 0010 38cc2ecc 0100 38cc2ecc 0000 000006a0 0008 732e2046 8a48da6a
+0 10 4000051a 000 00000111 d952f26f d952f26f dab86347 dab86347 dab86347 dab86347 d952f26f d952f26f
+0 10 400007b2 000 00000001 eb99d34d eb99d34d
+1 01 400005bc 010 00001010 f5a53867 0010 c6dd4056 1111 69fbf462 1111 2bdefcd3 1011 b08de2aa 1011 62258ba4 1011 03df6c60 1110 2721ccf9 1011 92fcdfde 0010 47a451c8 1001 e98eaf96 0000 000005b8 0030 01d31f84 3fdbad93 a3952612 9c84575f 0ac86cf9 3695912c 4b97d3bc 07d5e860 0431cdf4 d13eadaf 4753a679 6967a8cc
+0 10 4000050d 000 00001111 da0c5a54 da0c5a54 da0c5a54 5e858a67 5e858a67 5e858a67 5e858a67 c2b98633 c2b98633 c2b98633 c2b98633 018d4b13 018d4b13 018d4b13 018d4b13 da0c5a54
+0 01 40000490 010 00000111 f00bdd35 47cd5708 9a8ed90d 619522c8 d71bc7dc f6dfe028 2b94d117 59eeea2b
+0 10 400006d8 001 00000011 bb1421b6 bb1421b6 5d12aa9b 5d12aa9b
+1 01 40000225 000 00001010 725cdb00 0000 725cdb00 0000 725cdb00 0000 1662fb3d 0001 1662fb3d 0000 1662fb3d 0000 1662fb3d 1000 ec66dc57 0001 ec66dc57 0010 ec66dc57 0000 ec66dc57 0000 00000220 0010 fcb5ae2e 08bd5efc 7050eaf4 bad5c1f8
+1 01 40000706 001 00000110 b2ca0000 1000 bb0b05a2 0011 bb0b05a2 1000 3bc05cff 0011 3bc05cff 0100 65cd8d70 0011 65cd8d70 1000 00000700 0018 09905901 353f461a 4ab0334e 09f04001 c23c2caf 381958ca
+1 01 40000594 000 00000001 0000f254 0000 0000f254 0010 00000590 0008 a72fb81d ffa3cb31
+0 01 40000272 000 00001110 abb28de3 abb28de3 a33dc16b a33dc16b a33dc16b a33dc16b d61a695f d61a695f d61a695f d61a695f 2d863387 2d863387 2d863387 2d863387 86bd88ad
+1 01 40000302 001 00001001 b1600000 1100 a7c2c812 0011 a7c2c812 0100 092eebd6 0000 092eebd6 1100 0d7a5fbe 0001 0d7a5fbe 1000 11df9f5e 0010 11df9f5e 1100 00005566 0001 00000300 0018 815e627f 958201eb a1fd6de4 6bfbfd1f d240f574 4bdd8916
+1 01 40000271 000 00000110 7730dc00 0010 7730dc00 0100 7730dc00 1000 194b6352 0001 194b6352 0000 194b6352 0100 194b6352 1000 00000270 0008 146fed5d 2d9832b0
+0 01 400002a8 001 00001001 abccf0aa abccf0aa 8bcff0ab 8bcff0ab adfd570f adfd570f ade92b12 ade92b12 5eb6e209 5eb6e209
+0 01 40000120 010 00000101 bef1ce9e f258e002 fc26f582 06c67d4c 09b84d95 a71db12a
+1 01 40000437 000 00001001 7c000000 1000 1cf01984 0001 1cf01984 0010 1cf01984 0100 1cf01984 0000 3b2e7465 0000 3b2e7465 0000 3b2e7465 0100 3b2e7465 1000 000000cf 0001 00000430 0018 0797c501 a2db910f a46583e7 d2a0b41b e28ed1c4 55776465
+0 10 4000041c 010 00000001 01579a7a abccf106
+1 01 400004ac 010 00000111 29cd13c1 1111 69160cb3 1101 f7c3286b 1111 5cb09418 1101 ea9492c8 1111 b630ccc2 1111 fb7a1f43 1011 be00fa6d 0101 000004a8 0028 85ad44c4 c5bf8e30 d5e80531 6232c402 c06a7506 9f9203df bab3f974 7772b0a6 7bc55006 a2932195
+1 01 4000076c 001 00001010 0d7c9290 0011 0d7c9290 1000 f4f35483 0011 f4f35483 1100 08d4d016 0010 08d4d016 0100 94965631 0011 94965631 1100 9f2e232e 0001 9f2e232e 1000 0000053c 0011 00000768 0020 45f76047 c0cf4a87 b431788d ec3c80b4 82343012 ff22ef08 b66ecb43 4e4a9bf7
+0 01 4000031c 000 00000000 da409ba9
+1 01 400003c4 001 00001010 06bd40cd 0011 06bd40cd 1100 49270d8f 0010 49270d8f 1100 72ed1014 0000 72ed1014 0100 d2ec1038 0000 d2ec1038 1000 1cc1d6bf 0011 1cc1d6bf 1100 0000ed06 0011 000003c0 0020 99754889 03ad3a3d 9215b1f1 4a6a54cb 58fe2a77 5aa4142d a96ac69c 980e0919
+0 10 400001a0 001 00000111 9c023555 9c023555 36203769 36203769 7600657b 7600657b 34e2241e 34e2241e
+1 01 4000045d 000 00000111 6858ba00 0010 6858ba00 0100 6858ba00 1000 4c77483b 0000 4c77483b 0010 4c77483b 0100 4c77483b 1000 0000003c 0001 00000458 0010 de3d061c f7d4de47 c290c898 7e508217
+0 01 4000024a 001 00001100 c26d8fce b192ded0 b192ded0 75ccf038 75ccf038 fa127715 fa127715 e53cd6a9 e53cd6a9 1800a63f 1800a63f 011d394d 011d394d
+1 01 400004ec 000 00001110 38ca19df 0000 38ca19df 0010 38ca19df 0100 38ca19df 0000 894bdc6c 0001 894bdc6c 0000 894bdc6c 0100 894bdc6c 0000 d0c4db72 0000 d0c4db72 0010 d0c4db72 0100 d0c4db72 1000 007a72c5 0001 007a72c5 0000 007a72c5 0000 000004e8 0018 92817e9b afaf0d5e caae2a98 f8c48d38 1cb05850 1fb9d44d
+1 01 4000024a 001 00000010 661c0000 1100 15a8ed21 0010 15a8ed21 0000 00000248 0008 8bd94f5d d6073e49
+1 01 400003e3 000 00000101 e6000000 0000 05df2dc7 0001 05df2dc7 0010 05df2dc7 0000 05df2dc7 0000 0000009a 0001 000003e0 0010 8fca5181 de891097 3e4e6c7a be66a5ed
+1 01 400000e8 010 00001010 43461a84 1100 cc84d9a9 1001 65bd9253 1101 f7d223b4 0111 703ba55c 0111 7011e2e7 1110 5a812bc2 1111 f9164292 1111 e3baaa5b 1010 8225a3b6 1100 b4268195 1111 000000e8 0030 37d9a9bb d3a2cdd1 2c46b3d7 465da052 eb2d02c6 b488fbb8 dc7e6e78 f6bfd6f4 9c9cf2fc 3e7023d4 0bf4259e 25da8d11
+0 10 40000540 010 00000011 c2eccd6d b56ab9e7 e3aef564 32711eea
+1 01 40000470 010 00001100 ccb8ed7c 1101 1e2edc1a 0111 1e1f242e 1011 a2a60ea3 0100 84fa80d3 1111 02b125a1 1010 8777c3cc 1111 70e1d5fd 0011 4d408b74 0011 f68fdb3e 1111 fe057686 1110 bb287035 1011 7cdff86d 0110 00000470 0038 2a219397 bba9cee7 f69b6c6c 12dcc714 f79e2b32 a6f34945 80544461 437eebdb 03cb1755 4ed81a1b 023a1d68 137c3256 0ed82149 caf07be9
+0 10 40000318 010 00000011 ef17d896 da409ba9 11df9fa9 3e98e766
+1 01 4000045a 000 00000001 5f340000 0100 5f340000 1000 00000458 0008 2382396c 520311d0
+0 10 40000384 010 00000011 4fd83a12 ab96f0da ff7e3ee3 d7c44817
+1 01 40000350 001 00001111 2580e71e 0011 2580e71e 0000 f25ee786 0011 f25ee786 1100 4700fc50 0011 4700fc50 1100 66c8690c 0010 66c8690c 1100 506a4979 0011 506a4979 1100 a70db866 0001 a70db866 1000 9c751dcf 0011 9c751dcf 1100 5348b7cc 0010 5348b7cc 1100 00000350 0020 9ddef53b 48888a12 bdda353d c2543e1e 4d67fb5e e3915891 e6558e45 3c2addac
+0 01 400000cb 000 00000011 d2fb90fe d390d435 d390d435 d390d435
+1 01 40000666 001 00000011 5f7b0000 1100 fc8a6e6a 0010 fc8a6e6a 1100 000033e1 0011 00000660 0010 1025d3d2 d3e7d39b 0412d7f9 bd7ca6e4
+0 01 400000f4 000 00001000 dad223b4 dad223b4 dad223b4 dad223b4 6d3ba55c 6d3ba55c 6d3ba55c 6d3ba55c 7011e2bc
+1 01 4000037d 000 00000100 b17c9700 0010 b17c9700 0100 b17c9700 1000 0000c4ed 0001 0000c4ed 0000 00000378 0010 1cea8202 8b3dfab1 a4620149 41bb9417
+1 01 40000498 010 00000101 15ad3ca4 0011 87933472 1101 29b4047f 1111 20e6a7bb 1101 32a403a1 1000 949e2eb5 1110 00000498 0018 9b5d68c3 ff53333d e8a3265f 6d7f920c 1fc0827e 21fe5c7a
+1 01 400002d8 000 00001011 4e854a56 0000 4e854a56 0010 4e854a56 0100 4e854a56 1000 9004b7a2 0001 9004b7a2 0010 9004b7a2 0100 9004b7a2 1000 1627f5f8 0000 1627f5f8 0010 1627f5f8 0000 1627f5f8 1000 000002d8 0010 b4866b65 f54839c1 1ce548c9 ee7a71d0
+0 01 40000282 001 00000101 86bd88ad 3818f9ec 3818f9ec abe7c5ee abe7c5ee 21eeb119
+1 01 40000294 000 00000001 0000c224 0000 0000c224 0010 00000290 0008 41017e59 c48b971d
+1 01 40000232 001 00001101 0d8e0000 0000 4e7091e5 0000 4e7091e5 1000 55106545 0011 55106545 1100 5887f156 0010 5887f156 1100 1ef24995 0010 1ef24995 0000 a5adaced 0010 a5adaced 1100 a091e971 0000 a091e971 1100 00002df4 0011 00000230 0020 3ae9e38a 429c7518 aa48072a 4a18eda6 ecb5fa21 9b1e7894 4bd218f9 1e5ce604
+0 10 400003ba 000 00000001 ebccfc38 ebccfc38
+0 10 4000037e 000 00000001 b17c97ad b17c97ad
+0 10 400006f0 001 00001111 88b0c76a 88b0c76a da3ad8cf da3ad8cf 3ed24dbf 3ed24dbf daa53c79 daa53c79 8d7b6224 8d7b6224 dafc1c01 dafc1c01 703464e5 703464e5 3227c0e8 3227c0e8
+1 01 40000258 010 00001000 1c68ee04 1111 0fed8a84 1011 2f89abc3 1001 fac4c2e8 0110 ed867704 1110 399351a2 1001 e41e9cfb 1010 c68809a7 1111 7a4dbe97 0011 00000258 0028 5bdcfd7b e20001e9 8a2fc40a a922a15f b0f746e5 262c30e6 164b0226 14f6be7d 0a6d11ce df5829d2
+0 01 400006dc 010 00001001 5d12aa9b 8d7b6224 dafc1c01 703464e5 3227c0e8 88b0c76a da3ad8cf 3ed24dbf daa53c79 968b2a26
+0 01 40000434 010 00000011 7ca20800 7cf01984 3b2eddac 9c8d91cf
+1 01 40000390 001 00001001 8bd646e6 0011 8bd646e6 1100 da6b5779 0000 da6b5779 0100 ff02ea5e 0011 ff02ea5e 1100 f64a61bc 0011 f64a61bc 0100 87d779fd 0011 87d779fd 0100 00000390 0018 900cf87a 187b9614 62f2151e dd357606 6d45ab7a 1e12bcd3
+1 01 40000287 000 00000011 ef000000 1000 00789cd6 0001 00789cd6 0010 00789cd6 0100 00000280 0010 ff56583e a6da6835 191b9ced 11cdd14c
+1 01 400003dc 010 00001101 50423e55 1111 a344850d 1111 7de55871 1111 859d0599 1000 1e49af2d 1111 df9e4d11 0111 1998dda7 1111 7e527848 0011 3db267e9 0111 1e3212a9 1111 c60b90b1 1011 46c00cab 1111 2103de32 0110 05d46cfd 1100 000003d8 0040 5b4b0455 adf282be cba8010b e954b12d 67d34eea db104f84 757d4ff1 540717dd 864a6113 0e26f056 65bcfa6f fc3e1b67 31474552 853b8889 7590310e 45a47692
+1 01 400003c9 000 00001011 1f590f00 0010 1f590f00 0100 1f590f00 1000 d7a4165c 0000 d7a4165c 0010 d7a4165c 0000 d7a4165c 1000 f1f8ea44 0000 f1f8ea44 0010 f1f8ea44 0100 f1f8ea44 0000 00000088 0000 000003c8 0010 57449275 a51ed146 a50d0f2d 920aeff8
+0 10 40000664 010 00001111 5f7bff3c fc8a6e19 237533e1 69d2283d 78adf164 ab27321a daeef123 6c28ceec 994bb4f5 86adba92 f7051e09 0970fb61 6281e8c5 0dcfd2f0 e5eab8f0 ab7df998
+0 01 40000248 010 00001000 a0918fce b1922df4 75ccf038 fa127715 1c68ee04 0f008a84 2f1d39c3 dac4c2e5 ed86779a
+0 01 400006f3 000 00001101 88b0c76a da3ad8cf da3ad8cf da3ad8cf da3ad8cf 3ed24dbf 3ed24dbf 3ed24dbf 3ed24dbf daa53c79 daa53c79 daa53c79 daa53c79 968b2a26
+1 01 4000040c 001 00000000 0000ae63 0011 00000408 0008 67a69e05 f7e72874
+0 01 4000067c 010 00000110 daeef123 41297fb0 8e22f123 49b99ca2 5947f1a3 9d0e73e7 89bcca57
+1 01 40000226 001 00000111 83de0000 1100 aed367c4 0010 aed367c4 1100 11c0a713 0000 11c0a713 0100 6e2f2c98 0011 6e2f2c98 1000 0000d557 0011 00000220 0018 47394a19 c08aa404 8f1007eb 34bba903 81903acd 99542ee3
+1 01 400000b0 001 00001101 37654e78 0011 37654e78 0100 f76a1ee3 0011 f76a1ee3 1100 4ceb82df 0011 4ceb82df 0000 43287a4f 0011 43287a4f 1100 1a560118 0011 1a560118 0100 3f490a37 0010 3f490a37 0000 8fe68af0 0011 8fe68af0 0100 000000b0 0020 0f92187a c2fe711f 539e66d2 19e4a394 e75ea0b9 207635c6 26f846ba 28429c88
+1 01 40000626 001 00001010 2c120000 1000 93fdb2a3 0011 93fdb2a3 1100 1bc29c23 0011 1bc29c23 1100 2a752f16 0001 2a752f16 0100 c3c22e4b 0011 c3c22e4b 0000 fe0efed3 0000 fe0efed3 0000 00000620 0020 074c486f 632e79a3 5103aef5 87ac1675 b08a507d d012a5e3 b5403ab5 a1008566
+1 01 400001ec 010 00000100 7129e820 0111 fdaef3bc 1010 14a12ac0 1101 a50ca2c3 0111 f92ad389 1111 000001e8 0018 058e837f c587511c dbb29c94 84de9110 fcf4a5c0 d25febb2
+1 01 400005ba 000 00000110 79140000 0100 79140000 1000 bd8c8367 0001 bd8c8367 0010 bd8c8367 0100 bd8c8367 0000 00000033 0000 000005b8 0010 828f47f7 be8d1079 a3952612 9c84575f
+0 01 40000572 001 00001101 cccc5c5c b4242d8f b4242d8f abc4f1c5 abc4f1c5 766662e4 766662e4 ca6ceffc ca6ceffc 9764b800 9764b800 f4d4e6d8 f4d4e6d8 5484c563
+1 01 400004b6 001 00000111 33cd0000 1100 99193111 0001 99193111 1100 6fc4a711 0000 6fc4a711 1000 22afae2f 0011 22afae2f 1100 000038eb 0001 000004b0 0018 e76dfa70 9d1c894a ef4bad2d b1bc52fe 8185f49f 1d4dd34c
+0 01 40000180 000 00000010 abccf060 abccf060 abccf060
+1 01 400001f2 001 00000010 90fa0000 1100 2b82402a 0011 2b82402a 1100 000001f0 0008 87549d2d 7dbf15a8
+0 01 400006fc 000 00000100 daa53c79 daa53c79 daa53c79 daa53c79 968b2a26
+0 10 40000776 001 00001111 f3d4d0dd 94965631 94965631 9f54702e 9f54702e ea338672 ea338672 1df98fba 1df98fba f7b8bc90 f7b8bc90 0dee9290 0dee9290 f4f35483 f4f35483 f3d4d0dd
+0 10 400006d4 010 00001111 c10df10a bb1421b6 5d12aa9b 8d7b6224 dafc1c01 703464e5 3227c0e8 88b0c76a da3ad8cf 3ed24dbf daa53c79 fc536f04 bfd80261 21f7e1f7 a724625d 32d3d554
+0 10 4000053a 000 00000011 c0459335 c0459335 c0459335 c0459335
+1 01 40000359 000 00000110 e1396600 0010 e1396600 0100 e1396600 0000 88bbd11e 0001 88bbd11e 0010 88bbd11e 0100 88bbd11e 1000 00000358 0008 e4bfc222 c7810c83
+1 01 400007a6 000 00001111 47390000 0000 47390000 1000 30117c87 0001 30117c87 0010 30117c87 0100 30117c87 1000 9407b2d1 0001 9407b2d1 0010 9407b2d1 0100 9407b2d1 1000 301099d0 0000 301099d0 0010 301099d0 0100 301099d0 1000 00000bbb 0001 00000bbb 0010 000007a0 0018 7a5343ea 7fa5f61f 52bd495c 48637fa7 e2580c44 270cbcc3
+1 01 40000548 001 00001000 8c899d17 0001 8c899d17 1000 17a92325 0011 17a92325 1100 12d3352e 0011 12d3352e 0100 61ce2258 0010 61ce2258 1100 000071f1 0011 00000548 0018 7a93a561 a45d0c48 184b0305 e34b97f6 5b2a96b4 44af3f8d
+0 10 400006a9 000 00001111 81409b9e 81409b9e 81409b9e 922a2db7 922a2db7 922a2db7 922a2db7 2d6d6f06 2d6d6f06 2d6d6f06 2d6d6f06 47cc2ecc 47cc2ecc 47cc2ecc 47cc2ecc 81409b9e
+1 01 40000690 010 00000100 3b224b60 1010 022dfc96 0111 d15346e3 1110 e8c77792 1001 cb11e1fc 0110 00000690 0018 0b01f0ea ffc39f62 bfb71130 2684711f a90c2859 63b7894f
+1 01 40000530 010 00001010 98767672 1101 861ac1db 0111 7054114b 1001 a389e2cb 1101 c75a31ea 1110 53c32e6b 0111 2c040332 1111 08cd1103 0011 77a333f7 1011 ee406553 1110 ecf87258 1111 00000530 0030 69b1ce27 87100f1e b4e6ff91 a9eff046 c10977a0 5a4460fb 9238fbf9 15ebd127 36f87a6f bc69f70b 1950052f e87c68b2
+1 01 400006b6 001 00000001 838d0000 1100 0000d3c8 0011 000006b0 0010 950dd5f8 70a224ee e1e215f9 f61ddfd5
+1 01 400003f8 010 00000000 57d9ff64 0110 000003f8 0008 9d2f9a1e 535d25ca
+1 01 400005a0 010 00001111 356393af 0111 4da4ab86 0111 363cc7e4 1001 e4a1b4c1 1110 019856ca 0110 04218de5 0110 65645471 1110 44ba2d3e 0101 5b9305b7 1101 2dc0a050 1111 a2b5f16b 1111 cf73a4d2 1010 7ec1c62e 1111 a02fde48 1110 d97add72 1000 991f4938 0011 000005a0 0040 adeaac35 4a2ea7ae 404a6ef6 b0811379 5720ee28 5d59a8c7 90ae3e83 ae45b1aa 74babbcb 155f0069 50a24df4 b2adcc85 d93d5271 064d2168 13caad6a 154958a9
+0 01 40000145 000 00001000 da6bf051 da6bf051 da6bf051 fa781e52 fa781e52 fa781e52 fa781e52 f3cef0b4 f3cef0b4
+1 01 40000704 001 00001100 2719b079 0011 2719b079 1100 010a7053 0001 010a7053 0100 37265863 0001 37265863 1000 89b4ef92 0011 89b4ef92 0000 61963bcb 0011 61963bcb 0100 a3bee743 0001 a3bee743 1000 0000b8ae 0001 00000700 0020 db7c05dd 2ba442af be84b938 672b7d54 fd3bcae0 28e1429a 84f80642 acc79d06
+0 01 40000630 010 00001000 5e758616 4c4c2e4b bef9cc2f 94725e8f 6c28ceec 994bb4f5 86adba92 f7051e09 0970fb61
+0 10 400005dc 010 00001111 826f4938 470376c8 5d370db8 72cce198 dad7cac9 883bc67d 542653d3 b96085ef 7ae1c37f 5b9340b7 2dc0a050 a2b5f16b cf4aa4aa 7ec1c62e a02fdec2 d9e3ccf9
+0 10 40000217 000 00000011 026905b2 026905b2 026905b2 026905b2
+0 01 400004c8 010 00001010 7a004d6d 983fe080 bc903b4f 5865597c bcab26ec 6ddcc857 a0ff266a 852916d7 50fd2da6 8eca1952 d74bf56c
+1 01 4000009c 010 00000001 511639be 1001 532b2eca 1111 00000098 0010 2f34417d 7ead7061 b6558d55 e3329107
+0 10 40000560 010 00000001 cea515d5 86a001a9
+1 01 4000055c 010 00000001 45b48910 1111 1a138500 1011 00000558 0010 20b0f71b 9c88c5cc bfc39efe 4bde37bc
+1 01 40000237 000 00001011 5c000000 1000 bd58a5b0 0001 bd58a5b0 0010 bd58a5b0 0100 bd58a5b0 1000 5f43d781 0000 5f43d781 0010 5f43d781 0100 5f43d781 1000 0005ce12 0001 0005ce12 0010 0005ce12 0100 00000230 0018 4b2c4995 937f7161 d9fe9a38 32d548c7 23e619d4 f4d2dcf1
+1 01 4000000a 001 00000010 e1900000 1100 83f6e5f9 0011 83f6e5f9 0100 00000008 0008 d7cc1f40 017c5c3c
+1 01 4000032c 010 00000100 5e23bd75 1111 c84ba139 1011 6494679b 0101 9b20a46e 1101 47a3c9dd 1011 00000328 0018 13258baa 4c781c07 248ddc74 fe5815c0 7c56dd61 f60fb8c1
+1 01 400000fe 001 00000110 9f220000 1100 5e683f9f 0001 5e683f9f 1000 149aba9c 0011 149aba9c 0000 4dfd51bd 0010 4dfd51bd 1000 000000f8 0018 60968d01 d82d5de7 5a95d701 bc21cfb1 eea0e3cc b5cc4a4b
+0 10 400006b0 010 00000011 e14fb956 838d5316 7466d3c8 c295b971
+1 01 400000f7 000 00000000 a7000000 1000 000000f0 0008 2ef70586 f516eeb0
+1 01 40000194 010 00000011 7c914be4 1101 3bbf3b0c 0011 63bc3503 0110 ed9811b7 1111 00000190 0018 6b01f5e9 5dcc5061 ed0b5994 4243f95f 61cbfc41 dbd133eb
+1 01 40000114 010 00000110 0b776ba1 1000 d7990e1d 1101 4b82f5f1 1111 b30eabc6 0101 4331b74c 0100 3ada2edc 1001 aded5049 1000 00000110 0020 14ed00fa 5b71c263 2a31334e 7ea20622 105fda5f 2405b4af 0a141647 a2d0c263
+0 10 40000554 010 00000111 ee40652f ecf87258 45b48910 c75a316d b5c32e6b 2c040332 17a91103 77d333f7
+0 01 40000194 001 00000011 7c91d4e4 7c91d4e4 833b3b0c 833b3b0c
+0 01 40000638 001 00001000 bef9cc2f bef9cc2f 94725e8f 94725e8f 6c28ceec 6c28ceec 994bb4f5 994bb4f5 86adba92
+1 01 4000078e 000 00001110 9d640000 0100 9d640000 1000 286d0a38 0001 286d0a38 0010 286d0a38 0100 286d0a38 1000 f0287dc9 0001 f0287dc9 0010 f0287dc9 0000 f0287dc9 1000 4cd3b386 0001 4cd3b386 0010 4cd3b386 0100 4cd3b386 1000 00000007 0001 00000788 0018 fba577e0 c8605efc f350b63f ef20191b a31f00d8 03320c3d
+1 01 40000578 000 00000000 0000003e 0001 00000578 0008 4cdd3b4f 2c3c632e
+0 10 400003fb 000 00000001 1ed9ff48 1ed9ff48
+1 01 40000168 001 00001001 cad7841e 0000 cad7841e 1100 c2225498 0010 c2225498 1100 d162b34e 0010 d162b34e 1000 061e95a8 0010 061e95a8 1000 25848edb 0011 25848edb 0100 00000168 0018 22e70823 11b51dc8 d82fb399 b766f4a1 60a13c63 d4ec264f
+0 01 4000019c 010 00000011 0abc3530 ed9811b7 36203769 7600657b
+1 01 400004b5 000 00000111 d22e4300 0010 d22e4300 0000 d22e4300 1000 d26b345e 0001 d26b345e 0010 d26b345e 0000 d26b345e 1000 000000e2 0000 000004b0 0010 9406a126 a2163c3b ef413675 cc9de16b
+1 01 400000b6 000 00000111 64c60000 0100 64c60000 1000 f72adc04 0001 f72adc04 0010 f72adc04 0100 f72adc04 1000 0000d77f 0001 0000d77f 0010 000000b0 0010 f8f629b8 ee72ad51 ba99cc97 3c594055
+0 01 400007ee 001 00000111 e20eefae a50cad62 a50cad62 daa252b8 daa252b8 47dbb483 47dbb483 daeef1ff
+0 10 40000284 001 00000011 ef18f9ec ef18f9ec 86bd88ad 86bd88ad
+0 10 40000098 010 00000001 f4170c73 51cd83be
+0 10 40000418 010 00000001 abccf106 01579a7a
+1 01 40000408 000 00000100 e483f236 0001 e483f236 0000 e483f236 0100 e483f236 1000 000000b6 0000 00000408 0008 ff936dc5 c5e0c2b6
+0 01 40000558 010 00001010 ecf87258 45b48910 1aa58500 86a001a9 be4fc05a f9108813 cccc5c5c b4242d8f abc4f13e 766662e4 ca6ceffc
+1 01 4000006e 001 00000001 55550000 0100 00001870 0000 00000068 0010 8dcc9d3e 1b2d2f8d 0da86269 929afb12
+1 01 40000715 000 00000001 0016eb00 0010 0016eb00 0100 00000710 0008 2384287a fe4ea99d
+0 01 400006cb 000 00000111 21f7e1f7 a724625d a724625d a724625d a724625d 32d3d554 32d3d554 32d3d554
+0 01 400007d0 010 00000010 0712600a 9ee05be6 ef4a4baa
+1 01 40000654 010 00000001 3e79f50a 1110 78896ba6 1111 00000650 0010 6e80fb56 02bb4ab8 3c53671c b98504c2
+0 01 4000071c 000 00000011 838d28ae 838d28ae 838d28ae 838d28ae
+0 01 400007ea 001 00000110 639616fc e20eefae e20eefae a50cad62 a50cad62 daa252b8 daa252b8
+0 10 40000156 001 00001111 c67da6d9 964c8a08 964c8a08 70596bbd 70596bbd 70857a0d 70857a0d da6bf051 da6bf051 fa781e52 fa781e52 f3cef0b4 f3cef0b4 1fb1f01e 1fb1f01e c67da6d9
+1 01 40000689 000 00001111 2e6ca800 0010 2e6ca800 0100 2e6ca800 1000 09a37b06 0000 09a37b06 0010 09a37b06 0100 09a37b06 1000 c3aa7c9f 0001 c3aa7c9f 0010 c3aa7c9f 0100 c3aa7c9f 1000 a25c3aa8 0001 a25c3aa8 0010 a25c3aa8 0100 a25c3aa8 1000 000000c9 0000 00000688 0018 6d5cbf5f aa0fffd5 28547045 f0137dc3 bfb71130 2684711f
+1 01 400004d0 000 00001101 74a977fb 0001 74a977fb 0010 74a977fb 0000 74a977fb 1000 f0d71c8f 0000 f0d71c8f 0010 f0d71c8f 0000 f0d71c8f 1000 aa1dbbbb 0001 aa1dbbbb 0000 aa1dbbbb 0100 aa1dbbbb 0000 00007eea 0000 00007eea 0000 000004d0 0010 e0173da2 ad972337 bb078626 4669517b
+0 10 4000070f 000 00000111 37c05c63 bb0a0553 bb0a0553 bb0a0553 bb0a0553 37c05c63 37c05c63 37c05c63
+0 10 400004e0 001 00000111 a0ff266a a0ff266a 852916d7 852916d7 50fd2da6 50fd2da6 8eca1952 8eca1952
+1 01 400007da 000 00000110 befa0000 0100 befa0000 1000 5520a4c1 0000 5520a4c1 0010 5520a4c1 0100 5520a4c1 1000 000000f4 0001 000007d8 0010 c572cbbb c3809b54 38f2f912 00c7788b
+1 01 400006e8 000 00000010 001ed35e 0001 001ed35e 0010 001ed35e 0100 000006e8 0008 e77d1f8e 1e0c5e75
+0 01 4000075b 000 00000111 01a77464 b9eeeb86 b9eeeb86 b9eeeb86 b9eeeb86 ea338672 ea338672 ea338672
+0 10 40000180 010 00000111 abccf060 188e3f20 abbdc662 3097f32d c1cc1904 7c91d4e4 833b3b0c 0abc3530
+1 01 4000070c 001 00000000 000044c3 0001 00000708 0008 202cef82 69ed5db5
+1 01 400004c4 010 00000110 aea71f1c 1111 4658e374 1111 e38ac66d 1111 7d38dfc7 0101 f50f022a 1011 48c92371 1111 2238d0e3 1101 000004c0 0020 48f1f572 e69b6b36 efdce62c 7540e0ba 34772a77 44ae195e 58799d7c 70311698
+0 01 400004e8 010 00001100 50fd2da6 8eca1952 d74bf56c d0c4db0a af93d3c5 c8a4bb78 5e858a67 c2b98633 018d4b13 da0c5a54 3c5cd1cb 2809a137 d952f26f
+1 01 4000006f 000 00001001 93000000 1000 95367664 0001 95367664 0010 95367664 0100 95367664 1000 daf8c26e 0000 daf8c26e 0000 daf8c26e 0100 daf8c26e 1000 00000049 0001 00000068 0018 e4dc129f 0e91f61c a0d0bef9 9149d868 27768a8f 6495ced0
+1 01 40000078 001 00000110 24c713c4 0011 24c713c4 1100 a4aed79c 0010 a4aed79c 0000 4fa59a25 0001 4fa59a25 1000 000006b7 0011 00000078 0010 e65f937f 77da1714 04301444 948dce51
+0 01 4000073e 000 00001101 ccf74263 ccf74263 8b1d4509 8b1d4509 8b1d4509 8b1d4509 06d122f9 06d122f9 06d122f9 06d122f9 04217a98 04217a98 04217a98 04217a98
+0 01 40000590 010 00001001 e5cc844e da32f2c9 a9cc55b2 d0346aad 046393af 9ba4ab86 3671abe4 e4a1b480 dd985627 e8218de2
+0 10 40000224 001 00000011 83de6589 83de6589 f1726b45 f1726b45
+1 01 400000d5 000 00000111 47141800 0010 47141800 0000 47141800 1000 75f10e95 0001 75f10e95 0010 75f10e95 0100 75f10e95 1000 0000009f 0001 000000d0 0010 092651b8 7e0ef168 94d2851a 92bcb1aa
+1 01 4000019c 001 00001000 1b2589f5 0011 1b2589f5 1100 cc44bba0 0011 cc44bba0 1100 03324ccf 0011 03324ccf 1100 e3a1e480 0001 e3a1e480 1100 0000c4b9 0010 00000198 0018 bc0ef56a 6937e9f0 c0eeed9f ecfdc580 27a7ab2d fbcf476d
+1 01 4000070e 001 00000110 d8240000 1100 3afb1f4c 0001 3afb1f4c 1000 50bce6f6 0001 50bce6f6 0000 16f7d486 0011 16f7d486 0100 00000708 0018 db73caf2 94a149d2 53e18b98 1ad503e3 8b30c772 be3225a1
+1 01 400000d8 001 00001101 6c740960 0010 6c740960 1100 468c0227 0011 468c0227 1000 e6b4ea17 0001 e6b4ea17 1100 f0cb4270 0011 f0cb4270 1100 0f3ffe07 0000 0f3ffe07 1000 ea8660aa 0011 ea8660aa 1100 491e29c3 0011 491e29c3 0100 000000d8 0020 d5f7afbe 9dae89ea f0740fb3 2f62dc55 58cc17ca d3f5625d baf653ef 4812fe81
+1 01 400001f0 010 00001100 97832a36 0111 a49d4106 1111 c8dd69ba 0101 2fe1f82b 1111 44f5dafe 1111 5d1a70a6 0111 f1dc1cc6 1011 453d4b52 1101 e0a73b4a 1110 f650ad91 0111 5558330b 1111 de9974dd 1011 6609cd3b 1000 000001f0 0038 01d63be2 decca775 8d7766e0 5630c566 76bfc6b2 5522d195 baba8cb7 7f166297 9a768462 0b6212b7 505fdb8a f2bbea7e 37432b84 0fbcc909
+0 01 400001e2 001 00001101 e319a34a cdfb8302 cdfb8302 23656325 23656325 f129e820 f129e820 90832a36 90832a36 a49d4106 a49d4106 33dda2ba 33dda2ba 2fe1f82b
+1 01 400002bc 000 00000000 00000048 0001 000002b8 0008 8a66cc20 1164752d
+0 10 40000146 000 00001111 da6bf051 da6bf051 fa781e52 fa781e52 fa781e52 fa781e52 f3cef0b4 f3cef0b4 f3cef0b4 f3cef0b4 70857a0d 70857a0d 70857a0d 70857a0d da6bf051 da6bf051
+1 01 40000574 001 00001110 ea2955c8 0001 ea2955c8 1000 854440a6 0011 854440a6 1100 dc615f87 0011 dc615f87 1100 087c3081 0001 087c3081 1100 1738a57e 0010 1738a57e 1100 2dd70f41 0011 2dd70f41 1100 2b301f3a 0001 2b301f3a 1100 0000bfca 0011 00000570 0028 ad9e0111 6a549151 066a0187 aa145bab 817fb7c5 cda16fd1 3daf06f7 6a09c9dc fe09168f 8c37968c
+0 10 40000760 010 00001111 ea338672 1df98fba f7b8bc90 0dee9290 f4f35483 f3d4d0dd 94965631 9f54702e 8b1d4509 06d122f9 04217a98 a6425313 06138d82 0d3c5d4b 01a77464 b9eeeb86
+1 01 40000151 000 00001011 4be6b600 0010 4be6b600 0100 4be6b600 1000 645d9a8e 0001 645d9a8e 0010 645d9a8e 0100 645d9a8e 0000 a168d39a 0001 a168d39a 0000 a168d39a 0100 a168d39a 1000 00000009 0001 00000150 0010 c7299b02 6dd47bb0 49d20b74 9c5074ab
+1 01 40000187 000 00000001 e7000000 1000 000000cc 0001 00000180 0010 77330beb d8103852 f2cdf564 5d41bc69
+0 01 40000665 000 00000010 5f7bff3c 5f7bff3c 5f7bff3c
+0 10 4000027a 000 00001111 d61abe97 d61abe97 2d863387 2d863387 2d863387 2d863387 e4309ce3 e4309ce3 e4309ce3 e4309ce3 c68809a7 c68809a7 c68809a7 c68809a7 d61abe97 d61abe97
+1 01 400006e0 000 00000011 1439ac59 0001 1439ac59 0010 1439ac59 0000 1439ac59 0000 000006e0 0008 84a68a16 4f35a37f
+1 01 400004fd 000 00000101 9f685c00 0010 9f685c00 0000 9f685c00 1000 006651c9 0001 006651c9 0000 006651c9 0100 000004f8 0010 8858ce0e 927a7355 ba803469 8bae03d6
+0 10 40000115 000 00001111 0b0311d0 0b0311d0 0b0311d0 d799681d d799681d d799681d d799681d 4b82f5f1 4b82f5f1 4b82f5f1 4b82f5f1 b4268195 b4268195 b4268195 b4268195 0b0311d0
+0 10 40000408 001 00000001 e4830c36 e4830c36
+0 10 40000748 000 00001111 04217a98 04217a98 04217a98 04217a98 a6425313 a6425313 a6425313 a6425313 8b1d4509 8b1d4509 8b1d4509 8b1d4509 06d122f9 06d122f9 06d122f9 06d122f9
+1 01 400007d2 000 00001001 4e870000 0100 4e870000 1000 d1a56048 0001 d1a56048 0010 d1a56048 0100 d1a56048 0000 9a612e67 0000 9a612e67 0010 9a612e67 0100 9a612e67 1000 000007d0 0010 05ae1a01 5745a1cb 29cdf445 b28fc511
+0 01 40000294 010 00000011 74eec283 a62ff0a6 43eef0a7 ab071941
+0 01 40000428 010 00001100 32612b51 c167a2bb e48ec272 7ca20800 7cf01984 3b2eddac 9c8d91cf 87a6f2c0 a0b0e71e 7fd64c0e cab9997e 2b268346 5f34c6dc
+1 01 40000324 010 00000001 8fee1958 1111 a5892672 0101 00000320 0010 d85fc5b1 328a3618 8b5e5a5d 7fc41c81
+0 01 40000510 000 00000010 3c5cd1cb 3c5cd1cb 3c5cd1cb
+1 01 40000452 001 00000100 aa050000 1100 88963b15 0000 88963b15 0100 0fc174f0 0011 0fc174f0 0000 00000450 0010 4c96b0a1 787d8360 a1f31b7d 66f13956
+0 01 40000720 000 00001111 1a68f5c7 1a68f5c7 1a68f5c7 1a68f5c7 25d07371 25d07371 25d07371 25d07371 6ab218eb 6ab218eb 6ab218eb 6ab218eb 88163603 88163603 88163603 88163603
+0 01 400002fe 001 00000111 53e01ec9 b16020ab b16020ab b4c2c812 b4c2c812 092ec0c2 092ec0c2 0d11f0be
+0 10 40000538 010 00000011 7045934b a38995cb 9876f172 ae1ac1db
+1 01 40000230 010 00000111 8a609c98 1011 fc4f2547 1011 c3247ddc 0101 229a0303 1101 787c73d2 1110 b4ed430c 0110 30761160 1001 467acfa2 1111 00000230 0020 c392f2ee 59ae9299 891f99c4 27553050 0c4a2724 fef0abb4 d7729607 66a3d984
+1 01 40000506 001 00001101 e0320000 0100 2e5d9521 0010 2e5d9521 1100 699e1f00 0001 699e1f00 1100 4792a2e0 0011 4792a2e0 1100 c81421ac 0011 c81421ac 1100 a9dd3974 0000 a9dd3974 1000 3a71e5c3 0001 3a71e5c3 1100 0000e612 0011 00000500 0028 e9b64556 496a5518 b0943cc7 3802fc5c aa0ad5be c91b70f6 ffef74c6 428596a4 3d093d20 67040666
+0 10 40000384 000 00000001 4fd83a12 4fd83a12
+0 01 40000093 000 00001011 e196721c 26341e81 26341e81 26341e81 26341e81 f4170c73 f4170c73 f4170c73 f4170c73 51cd83be 51cd83be 51cd83be
+0 01 400006f7 000 00001100 da3ad8cf 3ed24dbf 3ed24dbf 3ed24dbf 3ed24dbf daa53c79 daa53c79 daa53c79 daa53c79 968b2a26 968b2a26 968b2a26 968b2a26
+1 01 400002c6 000 00000010 5e940000 0100 5e940000 1000 00000042 0001 000002c0 0010 5ca67fc6 f527a641 04e2d4fe 162a90d6
+1 01 40000508 001 00000000 00000393 0001 00000508 0008 6a409fbe 50115934
+1 01 400003b6 001 00000011 30d80000 0100 b1f8e66a 0001 b1f8e66a 0100 0000cbc5 0010 000003b0 0010 d88d306c 11efa7e3 4e140be6 0c160d15
+0 10 40000260 010 00000111 2f1d39c3 dac4c2e5 ed86779a 39bdf0a2 e4309ce3 c68809a7 d61abe97 2d863387
+1 01 400000e0 010 00001011 3b432679 1101 ed3d5caf 1001 cf5886a6 1110 a287b2cf 1011 ddb6cacb 0101 a5d72b2d 1100 9b040860 1101 7f596f1f 0111 95154a62 1110 bcff0cb9 0101 c7bdd929 1111 7032b5af 1011 000000e0 0030 92c3f557 7f1ba2cf 5cfccbbb 459de1fc 92441d40 e4ad772f c72119d1 c96d7fd7 81970261 5e51e97a 25d68231 b3460928
+0 10 4000060a 001 00001111 e8e45686 8012ee73 8012ee73 864f662e 864f662e 3d297385 3d297385 abcc83c9 abcc83c9 8777f27b 8777f27b b6cd9c60 b6cd9c60 9bb4adf2 9bb4adf2 e8e45686
+0 10 40000637 000 00001111 4c4c2e4b bef9cc2f bef9cc2f bef9cc2f bef9cc2f 94725e8f 94725e8f 94725e8f 94725e8f 5e758616 5e758616 5e758616 5e758616 4c4c2e4b 4c4c2e4b 4c4c2e4b
+0 10 400004e2 001 00000001 a0ff266a a0ff266a
+1 01 400006e5 000 00000101 8e912e00 0010 8e912e00 0100 8e912e00 1000 00e582ba 0001 00e582ba 0010 00e582ba 0100 000006e0 0010 b3a1b0dd e2ea01af 8522dca7 3ae3a757
+0 01 40000595 000 00000110 da32f2c9 da32f2c9 da32f2c9 a9cc55b2 a9cc55b2 a9cc55b2 a9cc55b2
+1 01 4000062c 010 00000010 f8d66239 1111 7d1cd6a5 0111 876887cc 1011 00000628 0010 a8c3fef3 a54489e6 06a82b38 fc025774
+0 10 40000192 001 00000001 c1cc1904 c1cc1904
+0 01 40000680 001 00001011 41297fb0 41297fb0 8e22f123 8e22f123 2e6ca8a2 2e6ca8a2 09a37ba3 09a37ba3 c3aa7c9f c3aa7c9f a25c3aa8 a25c3aa8
+0 01 4000035a 000 00001000 47396650 47396650 88bbd11e 88bbd11e 88bbd11e 88bbd11e 506a4979 506a4979 506a4979
+1 01 40000198 010 00000100 fade6fb3 1110 ef2eb5ec 1011 bd58479d 1111 9b6d336d 1000 b641d4eb 1101 00000198 0018 0639d964 6bcc0615 66451550 e8f2cf3c 1ed638c3 cfae9912
+0 01 400007de 001 00001101 5520a420 443949f4 443949f4 84ee536c 84ee536c 639616fc 639616fc e20eefae e20eefae a50cad62 a50cad62 daa252b8 daa252b8 47dbb483
+0 10 40000780 000 00001111 ddcc053c ddcc053c ddcc053c ddcc053c daeed643 daeed643 daeed643 daeed643 abccf1d2 abccf1d2 abccf1d2 abccf1d2 9d6447f5 9d6447f5 9d6447f5 9d6447f5
+1 01 4000076c 010 00000010 bbd3c777 0011 a914a529 1111 28921235 1111 00000768 0010 c8c905c2 ee1a52fc f5e5c430 577539d0
+0 01 400003c3 000 00000110 abd3f0f0 06bd40cd 06bd40cd 06bd40cd 06bd40cd 1f590f00 1f590f00
+0 01 4000054c 010 00000011 17a91103 77d333f7 ee40652f ecf87258
+0 01 40000174 001 00001011 06bc95e6 06bc95e6 3e848edb 3e848edb daeef05f daeef05f abccf060 abccf060 e78e3f20 e78e3f20 abbdc6cc abbdc6cc
+1 01 40000588 001 00000101 3138b153 0011 3138b153 1000 eb1df397 0001 eb1df397 1000 4e9707c2 0011 4e9707c2 1000 00000588 0010 659e5016 5d826c4d a5ca6929 1d92d599
+1 01 4000012c 010 00001000 30b9e6a6 0111 1aa58ee9 1011 66175d07 1111 2424ea3b 0011 f6b1ce30 1111 2ff6796a 1111 12490e9e 1011 9eeb024e 1110 5ba85847 1010 00000128 0028 13882a74 a44b4356 f499adb3 bfcb78a1 c42975ed 803eaa27 d08cceee a335f6f3 69bae690 1040ddd0
+0 01 400005be 001 00001001 33ba833e 5b9340b7 5b9340b7 2dc0a050 2dc0a050 a2b5f16b a2b5f16b cf4aa4aa cf4aa4aa 7ec1c62e
+1 01 40000343 000 00001010 ee000000 0000 2180e38f 0001 2180e38f 0010 2180e38f 0100 2180e38f 0000 92301e64 0000 92301e64 0010 92301e64 0100 92301e64 1000 00006842 0001 00006842 0010 00000340 0010 3b73f801 2ab9a73e c92777a3 9d12fd0d
+1 01 40000754 000 00000010 00e5dd46 0001 00e5dd46 0010 00e5dd46 0000 00000750 0008 6c5fdf34 210974ac
+0 01 40000070 001 00000000 95367664
+1 01 40000198 000 00001011 1c9db771 0000 1c9db771 0000 1c9db771 0100 1c9db771 1000 bf8f5cf1 0001 bf8f5cf1 0000 bf8f5cf1 0000 bf8f5cf1 1000 b07d13db 0001 b07d13db 0000 b07d13db 0100 b07d13db 1000 00000198 0010 120bf02d 6bf0193b 83dbe500 5bfc7552
+0 10 40000182 001 00000001 abccf060 abccf060
+0 01 40000078 010 00000010 24c713c4 5c2cd7c0 4f494d25
+1 01 40000319 000 00000011 f6a95000 0010 f6a95000 0100 f6a95000 0000 00000065 0001 00000318 0008 d13058ff aa3d5f54
+0 10 400003ec 001 00001111 1e49af2d 1e49af2d 3b9e4d11 3b9e4d11 1998dda7 1998dda7 1ed9ff48 1ed9ff48 22b267e9 22b267e9 a344850d a344850d 7de55871 7de55871 85ecb29a 85ecb29a
+0 10 40000675 000 00000001 78adf164 78adf164
+0 10 400001e0 001 00000111 e319a34a e319a34a cdfb8302 cdfb8302 23656325 23656325 f129e820 f129e820
+0 10 400005b8 010 00000011 6564542f 33ba833e dd985627 e8218de2
+0 01 40000110 001 00001000 b4268195 b4268195 0b0311d0 0b0311d0 d799681d d799681d 4b82f5f1 4b82f5f1 be0ecec6
+0 01 4000018e 001 00001111 3097f32d c1cc1904 c1cc1904 7c91d4e4 7c91d4e4 1c9d6f0c 1c9d6f0c bf25b5f1 bf25b5f1 b07d47db b07d47db 9b324ccf 9b324ccf b64165eb b64165eb 34e2c41e
+0 01 400005a0 001 00000001 046393af 046393af
+1 01 40000336 001 00001111 6ef50000 0100 4728df06 0011 4728df06 1100 f71b54f3 0000 f71b54f3 0100 27fdbd27 0010 27fdbd27 1000 081e840a 0011 081e840a 1100 515e2dbf 0011 515e2dbf 1100 2ef483cb 0001 2ef483cb 1100 6479ebc2 0011 6479ebc2 1100 0000d917 0001 00000330 0028 7153c40b 3a91cdc9 8fb19e5d cd3a03b1 98850410 a69b59a1 16f72a49 cc1a96bc 5c3a8f9b 35f466e2
+1 01 400006b0 001 00000011 4490bff7 0001 4490bff7 0100 2ab08f24 0011 2ab08f24 1100 000006b0 0008 c00cdd7b 7b822e2d
+0 10 40000210 010 00000011 e0a73bb7 0250ad91 5558330b de4d74dd
+1 01 4000050c 001 00001110 7e2df0c7 0011 7e2df0c7 1100 3cc4986d 0011 3cc4986d 1100 da9db894 0001 da9db894 1100 ed51d45e 0010 ed51d45e 1100 de01de4b 0011 de01de4b 1100 9f1850da 0011 9f1850da 1100 450ab6af 0011 450ab6af 0000 00004ad1 0011 00000508 0028 c5009123 a04bff5b 78b8d833 62bcd969 1c6f0e4e da02aa23 a92c0f3b 30b850ba d35a3bd6 12ab4952
+1 01 400007b8 010 00001100 c9eba5da 0111 c44ad631 1011 7126ff3a 0101 d099fd3c 0011 994444f8 0101 254e69f3 1110 29496110 1111 0210d216 1101 0fbe3519 1110 7d08faa3 1000 0f0e486a 1010 272b82fc 0111 f7f2f900 1111 000007b8 0038 3f2e5654 3917d812 2d353fa0 22ca9c91 40180dbb 18eaacb4 6bfbc83a 6e6593c3 695638bc f69b19dd cadf0c37 ff52be81 2f306d50 99b13b31
+0 01 400005d8 010 00001010 d9e3ccf9 826f4938 470376c8 5d370db8 72cce198 dad7cac9 883bc67d 542653d3 b96085ef 7ae1c37f b6cd9c60
+1 01 4000051c 010 00001110 e23e0320 0111 f5a0db77 1110 3181dc61 1101 b42c2b3e 1111 0e6cb887 0011 dec73c47 0101 677b74b0 1110 0ee3c27b 1111 c3795691 0111 c7fd6e82 1101 48b69e96 1111 dbe58786 1011 801719b7 1111 475bc065 1011 a1e7f471 0011 00000518 0040 061dcdbd 172e2e51 303557a8 a8473f65 8c33de0a c116e811 31db2512 bed5c2ee 8fc0ab05 37fdbe37 a23b4ac5 c794ff17 f0ce07eb 582adac2 d9581f8b c136c9b0
+0 10 400002c0 001 00000001 2e632083 2e632083
+0 01 40000620 000 00000110 6c03c588 6c03c588 6c03c588 6c03c588 2c9ff189 2c9ff189 2c9ff189
+0 01 400001d2 001 00000000 79ee5bff
+1 01 40000382 000 00001110 2d990000 0100 2d990000 1000 84cbb077 0000 84cbb077 0010 84cbb077 0100 84cbb077 0000 211e5fdc 0001 211e5fdc 0010 211e5fdc 0000 211e5fdc 0000 3a8cf36c 0001 3a8cf36c 0010 3a8cf36c 0100 3a8cf36c 1000 00000056 0001 00000380 0018 0c7b754f 83a80beb a5e1232e 1c450ad5 a471eb61 f40a4a95
+1 01 400005e0 001 00001000 565b096b 0011 565b096b 0000 5fe78b2c 0011 5fe78b2c 0100 4ad47314 0001 4ad47314 1100 5a0621e0 0011 5a0621e0 0100 0000f096 0011 000005e0 0018 fb6238ab 05f04f7a 88e0fa85 79b1db35 a0dc40ec d88f77dd
+0 01 40000258 010 00001000 1c68ee04 0f008a84 2f1d39c3 dac4c2e5 ed86779a 39bdf0a2 e4309ce3 c68809a7 d61abe97
+1 01 40000618 010 00001101 304d1072 1111 4749182d 0110 0458b9c5 1111 aff9d5a0 1101 466a69a3 1110 1c8a1fc7 0110 cf9b0811 1011 a1b02040 1100 0306c190 1111 1b8ce6c5 1111 b7de0d8e 1101 e56c4f8a 1110 985fef12 1111 8eac038b 1111 00000618 0038 cc32d86a 24c4706c 17dbe8fe 562e79ec 69c9700f 11f82a93 61fa04aa e8a4efd6 1c932ee3 63c0d4b7 8771b5d4 790723c1 17d5ead6 365e8338
+1 01 400006ec 001 00001001 39abb3aa 0000 39abb3aa 1100 1cc0f29b 0011 1cc0f29b 1000 d0a275b8 0011 d0a275b8 1100 cb5f04fb 0011 cb5f04fb 0000 469e43ae 0011 469e43ae 1000 000006e8 0018 cdb33b8c 79db6a63 8ce0b01e 0dbb1d88 05b1588b 5f32523f
+1 01 40000026 001 00001010 ac7d0000 1100 61fddaad 0011 61fddaad 1000 181bd791 0001 181bd791 1100 e5e97874 0010 e5e97874 1100 805b5ff8 0011 805b5ff8 1100 6bb4a5d7 0011 6bb4a5d7 1100 00000020 0020 7ee91b3a 22e7af0b f6922e70 e36669a8 b39ae4c2 9e1146cd 242df496 7da54fa8
+1 01 400004b8 000 00000011 83cd8ef0 0000 83cd8ef0 0010 83cd8ef0 0100 83cd8ef0 1000 000004b8 0008 c4365ddd 50d3eb67
+1 01 40000009 000 00001111 76324700 0010 76324700 0100 76324700 1000 c9eb41c0 0001 c9eb41c0 0010 c9eb41c0 0000 c9eb41c0 1000 8aee0c7b 0001 8aee0c7b 0010 8aee0c7b 0100 8aee0c7b 0000 d3372aa4 0001 d3372aa4 0010 d3372aa4 0100 d3372aa4 0000 000000c5 0001 00000008 0018 202b79ad fcaa163e 0e79e8fc 9cc71946 adf1ed1e 535c1e1b
+0 01 40000598 001 00000010 a9cc55b2 a9cc55b2 d0346aad
+0 01 400003ac 010 00000101 ce82f0eb c8dcad9c b1d8f055 ebf8fc6a 579bcb7b abd3f0f0
+1 01 40000230 001 00001111 862bd8fe 0011 862bd8fe 1100 0c3efb73 0011 0c3efb73 0100 18cdcd9a 0010 18cdcd9a 1000 402dc69b 0010 402dc69b 1100 8d8ed107 0000 8d8ed107 1100 3cc23ec4 0001 3cc23ec4 1100 0dfe2352 0011 0dfe2352 1100 c2d5a3ab 0011 c2d5a3ab 0100 00000230 0020 ad34f0cb 41166e52 b61b4e81 02b905fc 05d91192 b40b8529 07608bc1 fda658e9
+1 01 4000058c 010 00000110 c8d001de 1111 8d692712 1111 5b0de774 1110 3da57bec 1000 05689224 1111 79287cb5 1110 252fc80e 1110 00000588 0020 112cdee5 b313d85d 9e7253fe bf897903 889c1d44 1e5ff535 b9fddee1 c70aedf3
+1 01 400005aa 000 00000000 00ee0000 0100 000005a8 0008 040174c7 abcf64d5
+0 01 400006c4 000 00001100 bfd80261 bfd80261 bfd80261 bfd80261 21f7e1f7 21f7e1f7 21f7e1f7 21f7e1f7 a724625d a724625d a724625d a724625d 32d3d554
+0 01 40000188 010 00001111 abbdc6cc 3097f32d c1cc1904 7c91d4e4 1c9d6f0c bf25b5f1 b07d47db 9b324ccf b64165eb 34e2c41e 5ebb4b3f 70e6fca0 0a1e84aa 04402753 db40f0ee 1952fcf3
+0 01 40000658 001 00001001 78896ba6 78896ba6 e5eab8f0 e5eab8f0 ab7df998 ab7df998 5f7bff3c 5f7bff3c fc8a6e19 fc8a6e19
+1 01 40000446 000 00000011 d6bf0000 0100 d6bf0000 1000 00005606 0001 00005606 0000 00000440 0010 ba8544c4 b9767524 968c8515 b5712b57
+0 01 400007dd 000 00000001 7d20a420 7d20a420
+1 01 40000154 000 00001111 abd27a56 0001 abd27a56 0010 abd27a56 0100 abd27a56 1000 8a897b97 0001 8a897b97 0010 8a897b97 0100 8a897b97 0000 cc898f12 0001 cc898f12 0000 cc898f12 0000 cc898f12 1000 d3154e42 0001 d3154e42 0010 d3154e42 0000 d3154e42 0000 00000150 0018 00d7507f d5ec687e 0bb15626 b09df1fb 9562225e ce3c4346
+1 01 40000252 001 00000101 cd980000 1000 4ce9944f 0001 4ce9944f 1100 789c60e9 0001 789c60e9 1100 000044be 0011 00000250 0010 ef7adb90 dc5bda20 c014a519 fb8ac0c8
+1 01 40000368 000 00001111 e1f76d8a 0001 e1f76d8a 0010 e1f76d8a 0100 e1f76d8a 1000 227355ca 0001 227355ca 0010 227355ca 0100 227355ca 0000 1888091b 0001 1888091b 0000 1888091b 0100 1888091b 0000 39924447 0001 39924447 0010 39924447 0000 39924447 1000 00000368 0010 3e344491 37f682d2 12952d01 36b9ba11
+0 10 40000006 000 00000111 62503a0d 62503a0d cbba2646 cbba2646 cbba2646 cbba2646 62503a0d 62503a0d
+0 01 400004aa 001 00001110 3294d117 949e2ec1 949e2ec1 6916edb3 6916edb3 d2cd436b d2cd436b 83cd8e5e 83cd8e5e 6f9492c8 6f9492c8 22afae2f 22afae2f aea71f1c aea71f1c
+0 01 400005d0 001 00001100 7ec1c62e 7ec1c62e a02fdec2 a02fdec2 d9e3ccf9 d9e3ccf9 826f4938 826f4938 4703096b 4703096b 5de78b2c 5de78b2c 4ad4e114
+1 01 400005e8 010 00000010 17c965af 1101 3397f7ff 0000 7efbae36 1111 000005e8 0010 a62e61f0 397a1f71 ba2ef18d 311137d5
+0 10 400007a4 010 00000011 47114a76 30117c87 9407b2d1 8f2200e8
+0 10 40000208 010 00000011 f1681cc6 453df052 44f5dafe 8a1a70a6
+1 01 400004b6 001 00000001 23390000 0100 000031b4 0011 000004b0 0010 af10c6ef aacb4f21 169c518a 38147fbc
+0 01 40000210 010 00001010 e0a73bb7 0250ad91 5558330b de4d74dd 66726b45 83de6589 aed3673d 39c0dc57 862bd8fe fc3efb73 1824cddc
+0 01 40000518 010 00000001 ed51d46f de3e0320
+1 01 4000029f 000 00000001 de000000 1000 0000006c 0001 00000298 0010 e39e62b0 54006a09 a2af530c e5f2c744
+0 10 400006d5 000 00001111 c10df10a c10df10a c10df10a bb1421b6 bb1421b6 bb1421b6 bb1421b6 5d12aa9b 5d12aa9b 5d12aa9b 5d12aa9b 32d3d554 32d3d554 32d3d554 32d3d554 c10df10a
+0 01 40000158 010 00001011 a1897b97 cc596b12 2b614e42 67b0e4f7 cad7bcad c2225426 d182b377 06bc95e6 3e848edb daeef05f abccf060 e78e3f20
+1 01 40000290 000 00001111 5b58493a 0001 5b58493a 0010 5b58493a 0100 5b58493a 0000 296ed077 0001 296ed077 0010 296ed077 0000 296ed077 1000 69838eac 0000 69838eac 0010 69838eac 0100 69838eac 0000 f17c04e0 0001 f17c04e0 0010 f17c04e0 0100 f17c04e0 1000 00000290 0010 a642b7ff 541c8325 f8b853ce 3efc49f9
+0 10 4000077c 001 00000011 9f54702e 9f54702e 94965631 94965631
+1 01 400007a7 000 00001111 2e000000 1000 f3a24c58 0001 f3a24c58 0010 f3a24c58 0100 f3a24c58 0000 c9583295 0000 c9583295 0000 c9583295 0100 c9583295 0000 830e1bb7 0001 830e1bb7 0010 830e1bb7 0100 830e1bb7 1000 0040dae5 0001 0040dae5 0010 0040dae5 0000 000007a0 0018 728b9e0c 1ebdc8b7 7b2308d7 f7b3d1e9 23b74a34 bd75d1e4
+0 01 4000003c 010 00001101 daeef0c2 d1193d1c da2f905a ed20adec 12074270 2141cb43 ce865b7d 25797910 25a868b3 8754c677 699b55bd f33e131d 9355f404 95367664
+1 01 400002e0 001 00000000 00003c7a 0011 000002e0 0008 a89ad77f 84be9237
+1 01 40000431 000 00000100 e6345d00 0010 e6345d00 0000 e6345d00 1000 0000f28c 0001 0000f28c 0010 00000430 0008 d5804461 517a51ed
+1 01 40000114 010 00000111 feff64ed 1110 c37c6918 1011 5cedbbe6 1001 ede2cc32 1111 8c637e6d 1110 dc2f6741 1011 6706c760 0101 53eb80ce 1011 00000110 0028 797f2e38 4152e908 51f33d18 4615c7a8 464c2818 3883b8b6 687ce574 725017f7 f9fe1a88 620ac948
+0 10 400004cb 000 00000111 4658e374 e38ac66d e38ac66d e38ac66d e38ac66d 4658e374 4658e374 4658e374
+1 01 400007d6 001 00001110 cc970000 0000 31deb72f 0011 31deb72f 0100 ef511ee5 0010 ef511ee5 1100 00b133cb 0011 00b133cb 0000 8d8ed111 0011 8d8ed111 1000 15e7ddad 0011 15e7ddad 1100 61d9aef6 0011 61d9aef6 0100 1aa81c23 0001 1aa81c23 0100 000007d0 0028 6bfbc83a 6e6593c3 1af38311 44e621bd d90215f1 3dc4b374 b7fe6c29 166c69df c0dd5def c8ed04ee
+1 01 400006dd 000 00000011 d3ce5000 0010 d3ce5000 0100 d3ce5000 1000 000000ec 0001 000006d8 0010 fb209b48 3297672e d873a66c 35187cff
+0 01 40000170 010 00000111 d182b377 06bc95e6 3e848edb daeef05f abccf060 e78e3f20 abbdc6cc 3097f32d
+0 10 400005b0 010 00000011 dd985627 e8218de2 6564542f 33ba833e
+1 01 4000059c 000 00001111 0ba42f2b 0001 0ba42f2b 0010 0ba42f2b 0100 0ba42f2b 1000 83d9055e 0000 83d9055e 0010 83d9055e 0100 83d9055e 1000 4fa81c09 0000 4fa81c09 0010 4fa81c09 0100 4fa81c09 1000 883b9b3d 0001 883b9b3d 0010 883b9b3d 0100 883b9b3d 1000 00000598 0018 5bac99cb b1d7725d 4ca5fd5c 59abda7c dd8d8295 0fcb04fd
+1 01 40000273 000 00000101 c2000000 1000 70f9d09a 0001 70f9d09a 0010 70f9d09a 0100 70f9d09a 1000 000000a0 0001 00000270 0010 b5ed2233 3763a68c cec4938b 51faa1d5
+1 01 400004a8 010 00001010 567b6386 0100 f8d198e3 1011 ef24c122 0011 4814e6f4 1111 d08fd35c 1111 02ca8cd3 1101 11eb0537 0110 b3091157 1111 9db4d11e 1110 a8ed9adf 1000 597ed673 1101 000004a8 0030 588fa9ec 83095e3d 3e0bd789 1a4f793d a5ff7f9d 152b0ea0 5371f57f be93dcd3 21678022 4f495ceb b49ea167 cd455782
+1 01 40000324 001 00000101 a519231b 0001 a519231b 1100 66401e9f 0011 66401e9f 1100 df6eea48 0001 df6eea48 1100 00000320 0010 b68fa552 91297e28 18a837a8 3a9574ab
+1 01 400005e6 001 00001010 5e150000 1100 5cd47288 0011 5cd47288 0100 c7614aea 0011 c7614aea 0100 74b48487 0000 74b48487 1000 a6496e0c 0011 a6496e0c 0100 5d7b4ad8 0001 5d7b4ad8 1100 000005e0 0020 a6b55403 408dbbdf 44467ccf 570e2b34 20417adf e2f628b5 b21e3110 7bc6b614
+1 01 4000021c 000 00000001 0000c4b1 0001 0000c4b1 0010 00000218 0008 c121361d 503146f6
+0 10 40000184 010 00000001 e78e3f20 abccf060
+1 01 400001f0 001 00001110 a341c095 0011 a341c095 0000 ecf31415 0010 ecf31415 1100 dd51eeb4 0001 dd51eeb4 1100 427c87b1 0011 427c87b1 1000 d36e3489 0000 d36e3489 1000 9209f3e2 0010 9209f3e2 1100 f6e00290 0011 f6e00290 0100 000030ab 0001 000001f0 0020 6da21358 573592d5 c8bf5371 17bd2e01 b4e070b8 9304eeb5 b792d83b ad69fec5
+1 01 4000022c 001 00000110 690f7c19 0010 690f7c19 1100 ce78fb49 0011 ce78fb49 0000 8cf31278 0010 8cf31278 1100 00007f22 0001 00000228 0018 0562514e a8a37ddf 55f66589 14cfc961 8a7e7874 e4adfce9
+0 01 40000048 010 00001001 ed20adec 12074270 2141cb43 ce865b7d 25797910 25a868b3 8754c677 699b55bd f33e131d 9355f404
+0 10 400000dc 001 00000011 46d00227 46d00227 6c740995 6c740995
+1 01 40000090 010 00000011 bf8fdbd5 1101 7ddf79b9 1101 b7a239ae 1110 9617a648 0111 00000090 0010 f3fbceab 31ac8abf 5d2b39e9 188a1401
+0 01 400005cc 010 00000111 cf4aa4aa 7ec1c62e a02fdec2 d9e3ccf9 826f4938 4703096b 5e158b2c 17d47288
+1 01 40000232 001 00000011 2c330000 1100 2ff0a838 0011 2ff0a838 1100 000041ef 0011 00000230 0010 d05d5351 975173b9 a5d5c9df 835a5d30
+1 01 400003f3 000 00000100 76000000 1000 65572204 0001 65572204 0000 65572204 0100 65572204 1000 000003f0 0008 6f23e2d7 6c0fb284
+0 01 40000248 010 00000100 0dfe2352 46d5a3ab cdccf038 4ce9774f 789ceee9
+1 01 40000656 001 00001101 dc9a0000 0100 a545dd14 0001 a545dd14 1100 19cbac9f 0001 19cbac9f 1100 1eb0f02a 0011 1eb0f02a 0100 22b13eab 0011 22b13eab 1000 1f7aa7ed 0010 1f7aa7ed 1100 0ceffb2d 0011 0ceffb2d 1100 00003168 0010 00000650 0028 a2815180 78ea4317 c9033430 838a31fd c51a6a94 4f230c81 7a74cd85 57d8d949 90370133 e467a04e
+1 01 4000075d 000 00001110 43ff1f00 0010 43ff1f00 0100 43ff1f00 1000 1e105558 0001 1e105558 0010 1e105558 0100 1e105558 1000 44d14a15 0001 44d14a15 0000 44d14a15 0100 44d14a15 1000 3198f548 0001 3198f548 0000 3198f548 0000 3198f548 0000 00000758 0018 c22f631d 9adce140 cf3cc8a4 65d678f0 689dceb8 4e6fda8a
+1 01 40000030 001 00000100 58e2ad99 0000 58e2ad99 1000 52059ca2 0010 52059ca2 1000 000029af 0011 00000030 0010 4c7ce31e 85b89b60 21dff1fa 25c18d85
+1 01 40000159 000 00001101 47c8ee00 0010 47c8ee00 0000 47c8ee00 0000 f7802ace 0001 f7802ace 0010 f7802ace 0100 f7802ace 1000 a45e8ece 0001 a45e8ece 0010 a45e8ece 0100 a45e8ece 1000 00c82718 0001 00c82718 0010 00c82718 0100 00000158 0010 63b9c386 9a10532c a4ebae52 77e7d6a1
+1 01 4000039c 001 00001011 07d5731d 0001 07d5731d 1000 75a5f36a 0011 75a5f36a 1100 b047b242 0011 b047b242 0100 bd1d4098 0001 bd1d4098 0100 c736c102 0001 c736c102 0000 6917bd77 0001 6917bd77 1100 00000398 0020 cdb245fd d9a57c35 bdb1be68 04d7c1be 85043bdb 2358b56e aed65368 b9450da8
+0 10 40000700 010 00000111 968b2a26 2719b079 bb0a0553 d8245cc3 3aa6ef4c 1d16ebf6 a3f7d486 838d28ae
+1 01 40000044 001 00001100 f897c121 0001 f897c121 0100 0848f651 0010 0848f651 1100 c70d344f 0011 c70d344f 1100 fbc45b3c 0011 fbc45b3c 1000 6f1c0e67 0010 6f1c0e67 1100 80baeda4 0001 80baeda4 1100 00008f74 0011 00000040 0020 58159a28 f7be4578 bde68ba8 3ddf2344 9c8dd80d 3d128226 e4c4b7cb c54783d6
+1 01 400003a0 000 00000010 00017092 0000 00017092 0000 00017092 0000 000003a0 0008 bdb1be68 04d7c1be
+0 10 400006dc 010 00000011 d3ce509b 32d3d554 c10df10a bb1421b6
+0 10 400000e2 001 00000111 3b439579 edcb42af edcb42af cf5886f0 cf5886f0 a286b2cf a286b2cf 3b439579
+1 01 4000019a 001 00000011 538b0000 1100 bd24faed 0001 bd24faed 1000 000065f6 0001 00000198 0010 fcfa4c5d 2eaeac62 b490150a 4b95f726
+0 01 4000034d 000 00000010 2ef468cb 2ef468cb 2ef468cb
+0 10 400002dc 010 00000011 9004b7a2 ff35f05f e2b3ecb5 4e854a13
+0 10 40000218 010 00000001 5558330b de4dc4b1
+0 01 4000053a 001 00000100 0ee3c27b a3795691 a3795691 c7fd3182 c7fd3182
+1 01 4000050c 010 00001011 2707575b 1101 ff7f4c6d 1111 2843932a 1110 af81c28e 1111 de0f0c05 1111 e44547c9 1111 63032cd8 1101 f58f7c0b 1101 c6821e5f 1111 cfab750c 1101 5c7fef20 1011 006ba75c 1101 00000508 0038 a5f30f3b 9c178c55 dc25033a a683a577 ec2910f3 b3e8a109 26140d67 d636059f 64e57659 2df13a5c db12ca8c 3216550e adcb79b5 1ea5b1c7
+0 01 4000019e 001 00001111 bd25b5ed b07d47f6 b07d47f6 9b324ccf 9b324ccf b64165eb b64165eb 34e2c41e 34e2c41e 5ebb4b3f 5ebb4b3f 70e6fca0 70e6fca0 0a1e84aa 0a1e84aa 04402753
+0 10 400002b4 010 00000111 ade92b12 5eb6e209 0c879f48 ab07196c daeef0a9 abccf0aa 8bcff0ab adfd570f
+1 01 40000120 001 00000010 c50885b0 0011 c50885b0 1000 0000b939 0010 00000120 0008 abebfa20 1889088c
+0 10 400002ee 001 00000111 d444ada5 16cc3c7a 16cc3c7a c51111b4 c51111b4 4e9af023 4e9af023 d444ada5
+0 10 40000358 001 00001111 47396650 47396650 88bbd11e 88bbd11e 2745bd55 2745bd55 081e840a 081e840a 515e2dbf 515e2dbf 2ef468cb 2ef468cb 6479ebc2 6479ebc2 f25ee717 f25ee717
+1 01 40000101 000 00000101 1e053f00 0010 1e053f00 0000 1e053f00 1000 009d192f 0001 009d192f 0010 009d192f 0100 00000100 0008 4d48c820 cd95b778
+1 01 40000154 010 00001110 a7aea862 1111 8f5f5439 1111 e914d0f4 1111 79f77104 1111 d8553d12 1111 270bea20 1111 49e0bd28 1111 351bbac1 1100 f3113a56 1111 3e1f4a71 1101 6fbee704 1111 b150e229 1111 9ebe77c2 1111 a9413897 1111 fb93c28e 1111 00000150 0040 0d277246 f7b1086e bbb14de3 8df78cb1 34684baf 1d178bc0 28a60c3a 327521b3 279241b8 bbdd0720 d09b3622 10183b17 667cc1dd 584dac4d d47c37ba f6f5217a
+1 01 400003f9 000 00001100 883af600 0010 883af600 0100 883af600 0000 7d9d1de3 0001 7d9d1de3 0000 7d9d1de3 0000 7d9d1de3 1000 bae435ef 0001 bae435ef 0010 bae435ef 0000 bae435ef 0000 0000f15b 0000 0000f15b 0010 000003f8 0010 4f96b354 339feea8 7288ccc7 d1547873
+0 10 400005ef 000 00000111 da614aea 17d47288 17d47288 17d47288 17d47288 da614aea da614aea da614aea
+0 10 40000768 010 00000111 f7b8bc48 0deec777 a914a529 28921235 94965631 9f54702e 1e105558 44d18f15
+1 01 40000004 010 00000000 6e61a5a4 1011 00000000 0008 96004c81 aaf7f347
+0 10 40000084 010 00000001 36dc06b7 4f494d25
+0 10 40000054 010 00000011 6f1c0e7d 80ba79a4 25a88f74 fb415b3c
+1 01 4000066f 000 00001001 11000000 1000 6c64d4dd 0000 6c64d4dd 0010 6c64d4dd 0100 6c64d4dd 1000 1122f4ee 0001 1122f4ee 0000 1122f4ee 0100 1122f4ee 1000 00000030 0000 00000668 0018 2c08e628 23f2cf5b f4c82916 0ffd362a 6545ac69 581a4aca
+1 01 40000698 010 00000001 3c03571d 0101 02c1e22d 1111 00000698 0008 1cdd070e b1811220
+1 01 400000ae 001 00001110 efe10000 1100 1d7b0e0a 0011 1d7b0e0a 1100 c65bfe70 0001 c65bfe70 1100 49fcaad6 0011 49fcaad6 1000 3fad5284 0000 3fad5284 1100 5bdec551 0001 5bdec551 0000 b8aa0c85 0001 b8aa0c85 1000 376982f2 0010 376982f2 1100 000000a8 0028 c0942bbd 43f53b64 7ec56bcd 0f48b0fb 1c200330 0e509529 cbbe5884 3c7794a7 55b89bd9 39d1d7b6
+0 01 4000045c 010 00001111 6858ba17 4c77481e 6b717b3c 8e6bdbbc 0fd8350a ccb89b7c b22edc1a 1eab242e 09a6a8d2 84fa80d3 027b250c 8777c3cc fcf2d5fd f00b8b74 f68fdb3e fe053ca4
+1 01 40000074 000 00001010 c9aca1d0 0001 c9aca1d0 0000 c9aca1d0 0100 c9aca1d0 1000 dba3cba8 0000 dba3cba8 0010 dba3cba8 0100 dba3cba8 1000 00e42d17 0001 00e42d17 0010 00e42d17 0100 00000070 0010 8d64622c fbf4aa6e 7736cef5 793cea31
+0 10 400003a0 000 00000111 75a5f36a 75a5f36a 75a5f36a 75a5f36a da47b242 da47b242 da47b242 da47b242
+1 01 40000534 010 00000001 ad0ba8e4 0011 142855e1 1001 00000530 0010 17802ef7 193e27a6 aaad7877 ee145307
+0 10 40000700 010 00000001 968b2a26 2719b079
+1 01 4000065a 000 00001010 b6470000 0000 b6470000 1000 8a0f2b24 0000 8a0f2b24 0000 8a0f2b24 0000 8a0f2b24 1000 596ab7ab 0001 596ab7ab 0000 596ab7ab 0100 596ab7ab 0000 0000004a 0000 00000658 0010 45fc24df 263b3863 4d50a612 8f1b565e
+1 01 4000040f 000 00000010 8a000000 0000 0000ca42 0001 0000ca42 0010 00000408 0010 ff936dc5 c5e0c2b6 dec3aad9 0363b86d
+1 01 40000208 010 00000010 cd893e49 1111 b80cd5cd 1111 4e3c4dbb 1111 00000208 0010 68dc4e8e 5157cd70 724841ca 55bd79af
+1 01 40000578 010 00000101 f61d15d6 1011 ad67d4e9 1010 c8549606 1010 5cac6dba 1001 03fc6f66 1111 549d391d 1111 00000578 0018 a4d4c5c4 3e7a5a38 a4084c09 1780055d 71257ec5 0f044076
+0 10 40000280 010 00000001 86bd88ad ef18f9ec
+1 01 40000747 000 00001011 2e000000 1000 6fe0f27a 0001 6fe0f27a 0010 6fe0f27a 0100 6fe0f27a 0000 12f3e566 0001 12f3e566 0010 12f3e566 0100 12f3e566 1000 0077ba95 0000 0077ba95 0010 0077ba95 0100 00000740 0018 b2ade02a a62574b3 99a016ac a32a3657 33ae8026 a34f0668
+0 01 4000044a 001 00000011 a0b0e706 7fd64c0e 7fd64c0e aa05997e
+0 01 40000730 001 00001001 d002b531 d002b531 4acc8ecc 4acc8ecc f47ec436 f47ec436 ccf74263 ccf74263 8b1d4509 8b1d4509
+1 01 4000072f 000 00001100 78000000 1000 985168d3 0001 985168d3 0000 985168d3 0100 985168d3 1000 4fe0596c 0000 4fe0596c 0000 4fe0596c 0100 4fe0596c 1000 920cc761 0001 920cc761 0000 920cc761 0100 920cc761 1000 00000728 0018 2f18493d eb3d3920 b5fb1d4f 8568445a fdb959cf 93062bea
+0 10 400001f0 010 00000111 9083c095 ecf31406 dd51a2b4 42e187b1 e319a34a cdfb8302 23656325 f129e820
+0 01 400003a4 000 00000111 da47b242 da47b242 da47b242 da47b242 ab1df098 ab1df098 ab1df098 ab1df098
+0 10 4000039b 000 00001111 ff02ea5e 074a611d 074a611d 074a611d 074a611d 8bd64656 8bd64656 8bd64656 8bd64656 da6bf083 da6bf083 da6bf083 da6bf083 ff02ea5e ff02ea5e ff02ea5e
+1 01 40000588 010 00001101 50d45ebc 1000 41284fd5 1111 acb1d468 1010 acb6e12e 1111 0559989d 1001 882a7c0a 1111 34c717df 1101 ff2a6270 1011 54d642e9 1101 a6e80d22 1111 f1e2924d 1111 dea270e1 1000 808d4923 1110 5cc28b8b 1110 00000588 0038 03513fd9 2fd81d18 56d035ee a6d709bb 166da988 9d33eed2 f05378fb 82c84044 6706e320 a898999b 5259aaa7 b141c0e7 92153e63 c65fa2c3
+0 01 40000092 001 00000111 bf8f72d5 7ddf1eb9 7ddf1eb9 b7a23973 b7a23973 5117a648 5117a648 532b2eca
+1 01 4000046c 001 00000110 0e8f742d 0001 0e8f742d 1000 a1f2f92e 0011 a1f2f92e 0000 b7c635e9 0011 b7c635e9 1100 0000a367 0011 00000468 0018 fb1d296c 26b785f6 ce8f2236 441ea165 2a28ed72 498840df
+1 01 40000370 010 00000111 a711d1c9 1111 a3cfece1 1111 d7db0218 1101 1fef3fec 1001 f61244a2 0101 418e6624 1010 6b0b7dd3 1111 69325efa 1111 00000370 0020 da402792 2c8e0fd5 9aea3200 ccf925ed 34941e7e 9b59e0f8 4dbd988b 32fae803
+1 01 4000053a 001 00001000 3c620000 1100 4c87b70a 0000 4c87b70a 1100 d85bbc08 0001 d85bbc08 0100 f1114eb6 0011 f1114eb6 0100 3f0bd0e3 0010 3f0bd0e3 1100 00000538 0018 23f7a212 d6914af8 f94c34be e6d86a0d 3a6311be 367827a9
+0 01 40000284 010 00001110 ef18f9ec ab789cd6 21eeb119 ab58493a 29eed077 a6838ea6 f17c04e0 ab07196c daeef0a9 abccf0aa 8bcff0ab adfd570f ade92b12 5eb6e209 0c879f48
+1 01 400006a6 000 00001011 0b7f0000 0100 0b7f0000 1000 8a956831 0001 8a956831 0010 8a956831 0100 8a956831 1000 b530a980 0001 b530a980 0010 b530a980 0100 b530a980 1000 00007998 0000 00007998 0010 000006a0 0018 ff34c373 79fd77fa c37d1290 e48a4339 b8162a28 e106750b
+0 10 400000da 000 00000011 6c740995 6c740995 6c740995 6c740995
+1 01 400000e6 001 00001111 b2690000 1100 28b8b976 0011 28b8b976 1100 815edb8b 0011 815edb8b 1000 b82eb762 0011 b82eb762 1100 3f37a329 0010 3f37a329 1000 76958cdf 0010 76958cdf 1100 ac157b01 0001 ac157b01 1100 4c7e9725 0011 4c7e9725 1000 0000e894 0011 000000e0 0028 3379608e c105e31b 98fa090e 92bf2494 1318e390 6f8e14c4 3c95a750 6d79667d a4ac4d9a 6e8fd8f5
+1 01 40000698 000 00000100 ed77c490 0000 ed77c490 0010 ed77c490 0100 ed77c490 0000 00000055 0001 00000698 0008 319717d8 bc42c5bc
+1 01 400007b8 000 00000111 513ee8ac 0001 513ee8ac 0010 513ee8ac 0000 513ee8ac 1000 e32c5f6b 0001 e32c5f6b 0010 e32c5f6b 0100 e32c5f6b 1000 000007b8 0008 a1f1155e f16671dc
+1 01 40000286 000 00001111 87de0000 0100 87de0000 1000 a6515208 0001 a6515208 0010 a6515208 0000 a6515208 1000 f6d3da56 0001 f6d3da56 0010 f6d3da56 0100 f6d3da56 1000 4e1c7aa3 0000 4e1c7aa3 0010 4e1c7aa3 0000 4e1c7aa3 1000 0000e337 0001 0000e337 0010 00000280 0018 6a736061 86ddb86d 6d4abc55 d0051889 0f11ff06 b2e31013
+0 01 400006e7 000 00001010 8e912e01 70e582ba 70e582ba 70e582ba 70e582ba 39abc0e8 39abc0e8 39abc0e8 39abc0e8 1cb0f29b 1cb0f29b
+0 10 400002fe 000 00000111 53e01ec9 53e01ec9 e62f0e8d e62f0e8d e62f0e8d e62f0e8d 53e01ec9 53e01ec9
+0 10 40000592 001 00001111 ac69d412 acb6e12e acb6e12e 05cc559d 05cc559d 882a7c0a 882a7c0a c87c9681 c87c9681 5c38a5ba 5c38a5ba 50fc6f66 50fc6f66 41284fd5 41284fd5 ac69d412
+1 01 4000022c 010 00001011 80c94bf1 1111 9d14044c 1111 c2841937 0101 0d6334ee 1111 10921278 1111 1e2c0dc9 0111 ade58dde 1111 71192ac0 0111 acb1e386 0101 b1d435a5 1000 b2951476 1110 227d45c7 1100 00000228 0038 92f195b0 48f2d994 373ba5ae 00e269c8 ba3a735b 92aca866 35cb3463 4ee45a32 de7f537b 15f3a963 02d20a94 003f1ca9 698a801a 717f3449
+0 10 4000018c 000 00001111 fb93c28e fb93c28e fb93c28e fb93c28e b150e229 b150e229 b150e229 b150e229 9ebe77c2 9ebe77c2 9ebe77c2 9ebe77c2 a9413897 a9413897 a9413897 a9413897
+0 10 40000128 001 00000001 dc266741 dc266741
+0 01 400001a0 010 00001011 b07d47f6 9b324ccf b64165eb 34e2c41e 5ebb4b3f 70e6fca0 0a1e84aa 04402753 db40f0ee 1952fcf3 b6b9dc7e 912759ac
+1 01 4000072c 000 00000000 0000006a 0000 00000728 0008 2f18493d eb3d3920
+0 01 40000458 010 00001100 5f3474f0 6858ba17 4c77481e 6b717b3c 8e6bdbbc 0ed8352d ccb8f92e b7c635e9 1eaba367 09a6a8d2 84fa80d3 027b250c 8777c3cc
+1 01 40000034 010 00001111 c0226577 1111 e85ff69c 1111 4a430e21 1101 974c6001 1110 08b8b204 1101 b198b138 0110 7d28a1a6 1111 7af3c6f7 1110 e48ada57 1111 640a9dd0 1111 0153c8b3 1110 5b25602b 1101 fcb6dcbb 1111 3a420787 1111 e8b7f33c 0111 9419f385 1111 00000030 0048 72a3fb47 51ea1e8c 0852f508 4569c23d ef8ad152 bf7825a4 71ddff51 1a5e6b2e e96eb1a4 b7f04517 9dffb514 8abff010 86924b53 e9e52792 ae318057 0da4338c 75d6d76e 9a745a6b
+1 01 40000109 000 00001010 406bae00 0010 406bae00 0100 406bae00 1000 906f3ea5 0001 906f3ea5 0010 906f3ea5 0100 906f3ea5 1000 2e1f5c36 0001 2e1f5c36 0010 2e1f5c36 0100 2e1f5c36 1000 00000108 0010 d4b12072 06f986b8 79c1c697 1e6cd95c
+0 10 40000506 001 00000011 c2328633 5e668ac9 5e668ac9 c2328633
+1 01 400000f4 010 00001001 d3dc1d9f 0110 9d1e965f 1111 547570c0 1011 78676b8a 0010 7af79d29 1111 46ed93e6 1111 b64d0aaf 1111 2a54c2bc 1111 6f8fe5f0 1101 701ff8e0 1011 000000f0 0030 6ec25ffa 56c00d0e 1bf6f930 211d8d51 29686141 29b0b8be c5eadbb9 d0d9b8c4 324e2b08 8c164ded 632877a9 cc43b12e
+1 01 400006ca 000 00001000 1f2c0000 0000 1f2c0000 1000 f3aeaa19 0000 f3aeaa19 0010 f3aeaa19 0100 f3aeaa19 1000 00edf0df 0001 00edf0df 0010 00edf0df 0000 000006c8 0010 723d6a34 74cb5329 e4ed3593 2224e95b
+1 01 400005ec 001 00001010 d643f4de 0001 d643f4de 0100 03a728cb 0001 03a728cb 0000 97c95d7e 0011 97c95d7e 1100 28728cbe 0011 28728cbe 1100 30adf0af 0011 30adf0af 1100 0000e18d 0011 000005e8 0020 c393f6d7 b5efdeb6 02d3c75f 5b519995 4c196348 41ea4824 228506ea 4ae74d5c
+1 01 400004ae 001 00001000 c1740000 1100 582f2016 0011 582f2016 1100 203e221e 0011 203e221e 1000 b982550d 0011 b982550d 1100 bfaa330f 0010 bfaa330f 0100 000004a8 0018 0c6beb53 486c6f55 c9a052b4 c0139c0d eadbedba a2eb75fd
+0 10 400001fc 010 00000111 42e187b1 e319a34a cdfb8302 23656325 f129e820 9083c095 ecf31406 dd51a2b4
+0 10 40000462 001 00000011 4c77481e 6b717b3c 6b717b3c 4c77481e
+0 10 400005ae 001 00001111 a6e80d22 f1e2924d f1e2924d de218de2 de218de2 808d492f 808d492f 5cc28b3e 5cc28b3e 34c705df 34c705df ffa86270 ffa86270 54d69be9 54d69be9 a6e80d22
+0 01 4000040c 010 00000001 da03ae63 05d4ca42
+0 01 400001e7 000 00000000 cdfb8302
+0 01 400004a8 001 00000011 327bd117 327bd117 c17498e3 c17498e3
+0 01 40000072 001 00001100 9419f385 c9acadd0 c9acadd0 dba3cbc4 dba3cbc4 5ce42d17 5ce42d17 4f494d25 4f494d25 36dc06b7 36dc06b7 f062bb6a f062bb6a
+0 10 400002bd 000 00000111 0c879f48 0c879f48 0c879f48 5eb6e209 5eb6e209 5eb6e209 5eb6e209 0c879f48
+0 01 4000017c 010 00001111 6fbee704 b150e229 9ebe77c2 a9413897 fb93c28e c1cc1904 7c91d4e4 538b6f0c bd25b5ed b07d47f6 9b324ccf b64165eb 34e2c41e 5ebb4b3f 70e6fca0 0a1e84aa
+0 01 40000754 010 00001100 0d3cdd46 01a77464 43ff1f86 1e105558 44d18f15 f7b8bc48 0deec777 a914a529 28921235 94965631 9f54702e ddcc053c daeed643
+0 01 40000104 010 00001011 7af79d29 46ed93e6 b64d0aaf 2a54c2bc 6f8f64f0 7099f8e0 5c82f5e6 c5e285b0 8c63b902 dc266741 ad06e660 53b880ce
+0 01 400007c4 000 00000011 cb0afd3c cb0afd3c cb0afd3c cb0afd3c
+0 10 400005a4 001 00000011 ffa86270 ffa86270 34c705df 34c705df
+0 01 400006ac 001 00001111 b530a980 b530a980 e19079f7 e19079f7 2ab08f24 2ab08f24 7466d3c8 7466d3c8 c295b971 c295b971 fc536f04 fc536f04 bfd80261 bfd80261 1ff7e1f7 1ff7e1f7
+0 01 40000350 001 00000110 6479ebc2 6479ebc2 f25ee717 f25ee717 47396650 47396650 88bbd11e
+1 01 40000768 010 00001000 8eded597 1110 dcbb3413 1100 7bcdd8c2 1011 6f228dbe 0110 e3e7a2fb 1000 af8f7b83 1111 faf39015 1110 133230e4 1111 3eb89111 1111 00000768 0028 0ff1f2e3 c6197e6e f925cd13 938342be 479ff36f 5c7147c8 201ee9f0 274d866c 57674a99 0234d3e3
+0 01 40000360 010 00000110 506a4979 a74ef866 e1f76d8a 537355ca a711d1c9 a3cfece1 d7db5c18
+0 10 400002d0 010 00000001 ff35f05f e2b3ecb5
+0 01 40000008 001 00001101 76324739 76324739 c9f641c0 c9f641c0 2bee0c7b 2bee0c7b 3a372aa4 3a372aa4 f5d8f1c5 f5d8f1c5 457978f1 457978f1 fbe34719 fbe34719
+1 01 40000154 000 00001100 a7155c4e 0001 a7155c4e 0010 a7155c4e 0000 a7155c4e 1000 8ce7ba24 0001 8ce7ba24 0010 8ce7ba24 0100 8ce7ba24 1000 e8f61b1a 0001 e8f61b1a 0010 e8f61b1a 0100 e8f61b1a 0000 000000b0 0001 00000150 0018 8dfd9a8c 74771cca e84064e4 b933ba52 851bf136 60dcc160
+0 10 400002dd 000 00001111 9004b7a2 9004b7a2 9004b7a2 ff35f05f ff35f05f ff35f05f ff35f05f e2b3ecb5 e2b3ecb5 e2b3ecb5 e2b3ecb5 4e854a13 4e854a13 4e854a13 4e854a13 9004b7a2
+1 01 400004b6 001 00000110 40780000 1100 3fac7415 0011 3fac7415 1000 b668061d 0001 b668061d 1000 44d35972 0010 44d35972 1100 000004b0 0018 c7ddad44 695cfa69 7ad8aa3c e22abbf9 08ad0908 58aafc52
+1 01 40000524 000 00000100 50f5e05b 0001 50f5e05b 0000 50f5e05b 0100 50f5e05b 1000 000000f4 0001 00000520 0010 452b7335 e8600917 2d6abbaf 9e824dca
+0 10 40000626 001 00000011 aff9f1a0 0458b9c5 0458b9c5 aff9f1a0
+1 01 40000304 010 00001010 719d2ceb 1001 bd473532 1010 70090830 0110 d1a04bb7 1111 81a27035 1110 7d8a1a50 0101 39ba2b13 1101 ec2015e2 1101 63fe1d06 1111 cd523a9e 1111 1e1179b7 1100 00000300 0030 42899f64 e8665d63 8c492c1b 0b124974 4f2fd83a 49603b4c 357f5f2e 58f7b6cb c30456c5 800da5b2 f579548a c09db806
+1 01 400005b8 010 00001111 56a3f7ce 0111 b1a404c0 1110 ebb5e1a0 1110 97cf0915 1101 63154bee 1111 a0b958f0 1100 a814987a 1111 6f4f6100 0111 fb3418a4 1011 599240b4 0100 65080649 1101 0df2ab0a 1101 9b19faf2 1011 46baae2c 1011 bdc05b0a 0101 d2edde0a 1111 000005b8 0040 1e7faf1e b27955ad 51ae2884 3f7fca41 1f6b6d64 13bfb1d8 3e81cd1b bc232188 275225cf 159e4772 269160a0 05403e0d 56c84039 b45e0b26 35fbec74 9b76c6cc
+1 01 400001dc 001 00001101 016adf69 0001 016adf69 1100 e7a11561 0010 e7a11561 1100 a0c91e8a 0010 a0c91e8a 1000 9219af32 0010 9219af32 1100 a42a7c04 0010 a42a7c04 1100 b210b539 0010 b210b539 0100 0e401abf 0011 0e401abf 1100 000001d8 0020 0fe073ca 26ecc027 27c5436c 593174ac 09198aa9 02cf74bb f025530d 72074426
+0 10 40000782 000 00000011 faf3903c faf3903c faf3903c faf3903c
+0 01 400006e8 000 00000010 70e582ba 70e582ba 70e582ba
+0 10 400005fc 010 00000111 30adf0af 65080949 0df28b0a 9bd4faf2 4643ae2c 74c0ae0a d2edde0a 28728cbe
+0 10 400002a8 001 00000011 abccf0aa abccf0aa 8bcff0ab 8bcff0ab
+0 01 40000160 010 00000011 79f771b0 d8553d12 270bea20 49e0bd28
+0 01 40000164 001 00000100 d8553d12 d8553d12 270bea20 270bea20 49e0bd28
+1 01 40000760 001 00001001 2d975eac 0011 2d975eac 1100 b374770f 0010 b374770f 1100 4ba1991b 0001 4ba1991b 1000 c020e782 0001 c020e782 1000 4dc7dd54 0011 4dc7dd54 1100 00000760 0018 f62628af 98b33dba 0d96d42a ba03053a d6604935 26368816
+0 10 4000047a 000 00000111 1eaba367 1eaba367 09a6a8d2 09a6a8d2 09a6a8d2 09a6a8d2 1eaba367 1eaba367
+0 01 40000074 000 00001110 c9acadd0 c9acadd0 c9acadd0 c9acadd0 dba3cbc4 dba3cbc4 dba3cbc4 dba3cbc4 5ce42d17 5ce42d17 5ce42d17 5ce42d17 4f494d25 4f494d25 4f494d25
+0 01 40000488 010 00001100 8777c3cc fcf2d5fd f00b8b74 f68fdb3e fe053ca4 87937072 29b4047f 20e6e0bb 327bd117 c17498e3 582f2016 4078221e 3f827415
+1 01 400004cc 001 00001100 d14928c6 0001 d14928c6 0100 9a300a0d 0001 9a300a0d 1100 bc02adc5 0001 bc02adc5 0000 38b387d3 0011 38b387d3 1000 a262557b 0011 a262557b 1100 54f65c75 0011 54f65c75 1000 0000082e 0011 000004c8 0020 aa252cf5 39f39ec0 35de23a6 a35fed01 df99d598 681620f8 7dc0d45a bfc14874
+0 10 4000051c 001 00000111 de0f0c05 de0f0c05 ff7f4c6d ff7f4c6d 28439394 28439394 af81c28e af81c28e
+1 01 400002e1 000 00000110 10f04600 0010 10f04600 0100 10f04600 1000 d25906ac 0001 d25906ac 0010 d25906ac 0100 d25906ac 0000 000002e0 0008 95937ea7 cebe800b
+0 10 40000645 000 00000111 e56c4ff5 e56c4ff5 e56c4ff5 b7dece8e b7dece8e b7dece8e b7dece8e e56c4ff5
+0 10 400002cc 001 00000011 fb88f026 fb88f026 e2742d42 e2742d42
+1 01 4000059d 000 00000011 9e7a2b00 0010 9e7a2b00 0100 9e7a2b00 1000 000000be 0000 00000598 0010 2b787113 d801f4ef f05378fb 82c84044
+0 01 40000632 001 00000010 cf1c0811 a1b087cc a1b087cc
+0 10 400007c6 001 00001111 cb0afd3c 684476f8 684476f8 254e69d9 254e69d9 29496110 29496110 02106016 02106016 0fdeb72f 0fdeb72f ef511e20 ef511e20 8c26773a 8c26773a cb0afd3c
+1 01 4000069c 010 00001110 75ecbb8e 1110 a4ee2c3a 1011 784ecd03 1111 5d8e2dd5 1111 e12de844 1011 aa9c2ef1 1011 39de2727 1111 085a6d2f 1111 ca0c9074 0111 64e61a21 1011 d877d42d 1110 36558dc7 0111 117558ea 1111 f68544f2 1111 933be333 0010 00000698 0040 01b17361 f5be4763 664461c0 97d57cef 7353c554 2a4c5735 c60012a6 e6f4c45b 04f99091 7dae0a0f 5543fe21 bb22c2a3 ed22cafc 496d59da 62c0159c cc15291b
+1 01 400006d4 001 00000111 01104089 0011 01104089 0000 cabd5be8 0010 cabd5be8 1100 038fbc11 0011 038fbc11 0000 a5a8385f 0011 a5a8385f 0100 000006d0 0018 394229ff c4137212 e5fe2d7a 6c0fb73d e6e18f62 3b6431cf
+1 01 400005c4 010 00001010 4526fb57 1101 a530343a 1111 5f0e66ca 1111 b95584ba 1111 765cabdd 0001 cdcf4fa0 1111 b27197ea 0110 cdc6da13 1101 d8f114d6 0101 e5478804 1111 fbb8bce0 1111 000005c0 0030 abbd95c4 96a12af7 b182cfa2 abee0e5f f84f987f ef295cb5 57716bbd c7a339b9 c4ba9afe 0c100291 905cfeff 341dc3e3
+1 01 400005ca 001 00001111 c0820000 0000 e953085c 0011 e953085c 0100 2cacd26f 0001 2cacd26f 1100 1c2aeedf 0011 1c2aeedf 1100 0c72abc8 0011 0c72abc8 1100 876ec813 0011 876ec813 1100 7ace8304 0011 7ace8304 1100 5f9de301 0011 5f9de301 1000 0000e8b5 0001 000005c8 0028 4830a1f8 a3341917 4960b070 75cd9b73 baee9474 af533465 50f25566 ef6ca4a4 2e9563b2 4a196441
+1 01 4000061c 010 00001011 e6070f16 0000 d97f7f2f 1010 fc8fba5a 0101 9a7aa174 1011 d5e5fa53 1111 6fcda125 1110 5ebf0b99 1111 92fa6586 1111 f49be0d5 0101 a68a6f42 1110 454fa793 1111 4d54ff5a 0111 00000618 0038 cc32d86a 24c4706c 9df726ac 353f6e39 e697896b 7e7b6e05 7c3a3ad0 9114437f a46757e0 824b5153 250fcf51 5aa9b88a 0a572648 e872facc
+0 10 400000ce 000 00000111 d390d435 d390d435 376982f0 376982f0 376982f0 376982f0 d390d435 d390d435
+0 01 400005b0 000 00001011 f1e2924d f1e2924d f1e2924d f1e2924d de218de2 de218de2 de218de2 de218de2 80a3f7ce 80a3f7ce 80a3f7ce 80a3f7ce
+0 10 40000708 001 00001111 bb0a0553 bb0a0553 d8245cc3 d8245cc3 3aa6ef4c 3aa6ef4c 1d16ebf6 1d16ebf6 a3f7d486 a3f7d486 838d28ae 838d28ae 968b2a26 968b2a26 2719b079 2719b079
+1 01 40000780 010 00001100 a94a4394 0000 6cba444f 0100 75270134 0001 19a01ab3 1011 cc9a9a4b 0110 f519549a 0011 d5db0a20 1111 81fe98cb 1010 346e7b65 0111 333962a9 1000 9d038bf6 1100 e553d431 1111 5b904244 1101 00000780 0038 754165f3 88a80e2d 7797e087 75caee0d 7dbf1e7c 0d31a8e8 f81ed98a 8ff27de4 d548c953 b6183ff0 c693b59f 86c609dd e56df8bc 28f4ab36
+1 01 40000652 001 00001011 d0cc0000 1100 d843b752 0001 d843b752 1100 f03f90e1 0011 f03f90e1 0100 86d6088f 0010 86d6088f 1000 3aa9bf41 0011 3aa9bf41 1100 5f024336 0010 5f024336 1100 00000c18 0011 00000650 0020 d548d73e 7bcf13c7 62eba6e2 db021cbb b76823c6 d7be326e 3a74c0c0 69d2f261
+1 01 400001b4 010 00001111 d71352e0 0010 81853994 1110 d55ee16d 1111 c9abe0e7 1011 f0ec3bce 1111 e69c5dcf 1111 8272fb04 1101 6b8034c9 0101 ebd68b7a 1010 267f3d2d 0101 5199a703 1100 66d3fa51 1011 1690e3bd 1001 912c171a 1111 f33070aa 1101 aea2bd78 0111 000001b0 0048 843268bc c4d0b8d2 decdc687 2533f3f1 4d47420c 70bd037a 6e40325a 3bc502d4 562566a6 9b421622 128983e2 0936edda 7071f86f 20962c85 46768539 399203ec 02916ada c81294a3
+1 01 40000264 010 00001010 9c260b92 1011 729237da 1110 1e7ca5b6 0110 7594f37d 1000 49fb1994 1111 ad7c5ca1 1111 85877017 0001 21d41819 1111 5466362b 1011 2fadbe07 1111 aaf3cc54 1011 00000260 0030 e19374ec bb4d4e1b 4fa7f76b b923eabd b3144dba 9d497bf5 8afb1089 448a1619 32723a9c 9530cf43 7c544807 21d7e787
+1 01 4000052c 001 00001010 1bcc4f88 0001 1bcc4f88 1100 b2569a93 0011 b2569a93 0100 6df0ad50 0011 6df0ad50 0100 902ff0cd 0011 902ff0cd 1000 fa8e283e 0001 fa8e283e 1000 00007ffd 0010 00000528 0020 d710748b 4de04d56 b77de4e7 2c8c4ea6 59cb0bc2 0150885f 0f61f4c4 a91a57f2
+0 01 4000024c 010 00001110 46b1a386 b1ccf038 b295144f 227deee9 0f0044be 2f1d39c3 9cc40b92 7292379a 397ca5a2 75309ce3 49fb1994 ad7c5ca1 2d863317 21d41819 54de362b
+0 10 40000041 000 00000111 974c601c 974c601c 974c601c 08b89004 08b89004 08b89004 08b89004 974c601c
+1 01 400003c7 000 00000110 84000000 1000 621cae08 0000 621cae08 0000 621cae08 0100 621cae08 1000 00007b96 0001 00007b96 0000 000003c0 0010 e23ec5f0 5a109b26 8ed9ec9c 4b532ea4
+0 10 400004d0 010 00000001 9a30770d f56502c5
+0 01 4000067f 000 00001010 daeef123 41297fb0 41297fb0 41297fb0 41297fb0 8e22f123 8e22f123 8e22f123 8e22f123 2e6ca8a2 2e6ca8a2
+0 01 4000039b 000 00001111 ff02ea5e 074a611d 074a611d 074a611d 074a611d 75a5f36a 75a5f36a 75a5f36a 75a5f36a da47b242 da47b242 da47b242 da47b242 ab1df098 ab1df098 ab1df098
+0 10 400000c6 001 00000011 b8ec0a85 5b560151 5b560151 b8ec0a85
+1 01 4000034c 001 00001100 222dee8b 0001 222dee8b 1100 79876e29 0010 79876e29 1100 38a9359c 0011 38a9359c 1100 18123292 0011 18123292 1100 23a9a696 0011 23a9a696 1100 2cc220c2 0010 2cc220c2 1100 0000a210 0011 00000348 0020 c525769d 9fb90b93 4a7b2827 2550fcf4 45276c8d df112bf7 d4d69464 acbcc9db
+0 01 40000366 001 00001111 a74ea210 e1f76d8a e1f76d8a 537355ca 537355ca a711d1c9 a711d1c9 a3cfece1 a3cfece1 d7db5c18 d7db5c18 1f7c97ec 1f7c97ec 2d1248a2 2d1248a2 41cb6612
+1 01 40000320 001 00000000 0000f99a 0011 00000320 0008 e787e2ba 065654ae
+1 01 400007e0 001 00000011 b6060a9c 0010 b6060a9c 1100 5662c984 0011 5662c984 0100 000007e0 0008 292d1894 db785e18
+1 01 40000212 000 00001110 60670000 0100 60670000 1000 7d42eddb 0001 7d42eddb 0010 7d42eddb 0100 7d42eddb 0000 75ac3b98 0001 75ac3b98 0010 75ac3b98 0100 75ac3b98 0000 f75f984c 0001 f75f984c 0000 f75f984c 0100 f75f984c 1000 0000000d 0000 00000210 0018 46cb7887 07109960 7597c8da 6b578c9d 37432b84 0fbcc909
+1 01 400007a8 010 00000000 1702802f 0011 000007a8 0008 710468a4 956a3b66
+0 01 40000010 010 00000111 2bee0c7b 3a372aa4 f5d8f1c5 457978f1 fbe34719 ac7d80ef 6100daad 181b2991
+1 01 40000040 001 00001100 04aa619b 0011 04aa619b 1100 16eaff61 0011 16eaff61 1000 43441eab 0011 43441eab 0100 a093e6c9 0001 a093e6c9 1000 526ebc01 0011 526ebc01 1100 c2998498 0011 c2998498 1100 00008979 0011 00000040 0020 f819ad4b 9daaf7d3 28a2c863 c91b3146 042a95e1 8c2feef5 22fee0f3 2901445a
+1 01 40000500 010 00001010 84fbf120 0100 e02767fe 1111 fa0c5168 1101 1a1a89ee 1111 7294a49a 0001 ee13ecd7 1110 2a455da6 1110 ed67f69b 0111 72c1dc21 1101 077caae8 1111 26424e07 0101 00000500 0030 e1af486d 7dae8923 4557b126 e3868e8d bccf8e07 d2039687 e79cc8e1 8ad4b000 895e23fe dc5d18b8 de8558d4 998dd3cd
+0 10 400000ac 010 00000111 efe1f0f8 1d7b0e0a c65b1e70 492aaad6 3fadd77f 532b2eca 1ff08d9f a038d271
+1 01 400001b0 010 00000001 7b195195 1101 64269172 1111 000001b0 0008 80b21b4b 77f16da5
+0 10 40000008 010 00000011 76324739 c9f641c0 cbba2646 6e50a5a4
+0 01 4000011a 000 00001111 7099f8e0 7099f8e0 5c82f5e6 5c82f5e6 5c82f5e6 5c82f5e6 c5e285b0 c5e285b0 c5e285b0 c5e285b0 8c63b902 8c63b902 8c63b902 8c63b902 dc266741 dc266741
+1 01 400005a2 001 00000010 d9db0000 1100 c57fc899 0011 c57fc899 1000 000005a0 0008 6b90df26 b35e112e
+0 10 400000ed 000 00001111 8186db8b 8186db8b 8186db8b 3b439579 3b439579 3b439579 3b439579 b26942af b26942af b26942af b26942af 28b8b976 28b8b976 28b8b976 28b8b976 8186db8b
+0 10 4000036c 010 00001111 537355ca a711d1c9 a3cfece1 d7db5c18 1f7c97ec 2745bd55 081e840a 515e2dbf 222d688b 79876ec2 38a9359c 18123292 23a9a696 2cc22079 a74ea210 e1f76d8a
+0 01 4000020d 000 00000100 b80cd5cd b80cd5cd b80cd5cd 60674dbb 60674dbb
+0 10 400004f8 010 00000111 af93d3c5 9fa45c78 54ff5c75 8529082e 50fd2da6 8eca1952 d74bf56c d0c4db0a
+0 01 4000055c 010 00000110 45b48910 1aa58500 86a001a9 be4fc05a f9108813 cccc5c5c ea242dc8
+1 01 4000025d 000 00000111 4f9b8e00 0010 4f9b8e00 0100 4f9b8e00 0000 e938d8b8 0000 e938d8b8 0010 e938d8b8 0100 e938d8b8 0000 00000015 0001 00000258 0010 0d21c831 f28c3c6e 612ac539 d1895e6f
+1 01 40000561 000 00001001 6d5c4c00 0010 6d5c4c00 0000 6d5c4c00 1000 e09ce7fe 0001 e09ce7fe 0000 e09ce7fe 0100 e09ce7fe 1000 001d4f3a 0001 001d4f3a 0010 001d4f3a 0100 00000560 0010 d2c43af7 2c9ec7c9 930b0814 e0d49405
+1 01 400002d2 001 00001000 eeca0000 1100 07cb04c6 0011 07cb04c6 1000 864cc6c2 0011 864cc6c2 1100 b86b8c2b 0011 b86b8c2b 1100 0eeb6fbe 0010 0eeb6fbe 0100 000002d0 0018 10062d1b 1eecdfdc cf1f43c6 5eb6d777 eb6e5937 d75b2378
+0 10 4000041c 010 00000011 01579a7a 05d4ca42 daf2eb05 abccf106
+1 01 400000c0 010 00000110 09f47a40 1111 005b5969 1011 a344fa4f 0011 dbc6b48a 0111 cee5e3c3 1101 05be207f 1111 fd553fc9 0111 000000c0 0020 439dea1e 7e74b22f 85cc456d e484f7e0 79f8fdcb af880e4a 90dc82fb 1ea7ee78
+1 01 40000484 010 00001001 7a3ee632 1111 038063b7 0111 f9a2ea8c 1110 0a81ca9b 0100 f7eb31d2 1011 e1955332 1101 2ddbdba6 1110 6b8aec40 1111 7758717f 1100 b9ce1bd0 0111 00000480 0030 eddc5981 dfaac495 4f4be93b 16c5765c 1b97ef6d 710e29ef b7a4093f 0906a28d 4633fea8 8119fc11 039c6e73 f7bd1576
+0 10 40000148 001 00000111 9eeb0252 9eeb0252 5bce58b4 5bce58b4 2ff6796a 2ff6796a 126b0e9e 126b0e9e
+1 01 400005b6 001 00001100 3da30000 1000 a0e0ee4b 0001 a0e0ee4b 1000 000e0f61 0011 000e0f61 1000 3fde2ca7 0000 3fde2ca7 1100 922914dc 0001 922914dc 1100 e676ea18 0000 e676ea18 1000 1f51fbe4 0011 1f51fbe4 1100 000005b0 0020 25b3a954 04e682ca 837ca577 5ceb1f9a 65ba1a20 11b872df 07de1f07 51039b94
+0 01 400000ca 000 00001101 3769fa4f 3769fa4f d3c6b48a d3c6b48a d3c6b48a d3c6b48a cee5f0c3 cee5f0c3 cee5f0c3 cee5f0c3 05be207f 05be207f 05be207f 05be207f
+1 01 400005f7 000 00001100 f5000000 1000 52abf8a1 0001 52abf8a1 0010 52abf8a1 0000 52abf8a1 0000 92ce2c25 0001 92ce2c25 0010 92ce2c25 0000 92ce2c25 0000 df8bf58d 0001 df8bf58d 0010 df8bf58d 0100 df8bf58d 1000 000005f0 0018 1660e35d 3716df15 6211f111 f7b3cacd 7696933a 7c73cf0a
+1 01 4000052c 010 00000011 23d2a80b 1110 cbc255a4 1111 6752e7eb 1111 1d159af8 1111 00000528 0018 43a4a68c 1a1e61a5 35a39de0 71cdaada e8f8a5e9 f4b60fa5
+1 01 400000a4 010 00000001 09c42a64 0111 cc07502a 1111 000000a0 0010 54f52583 c7f0792f bb5b5491 ab9c1ee0
+0 01 4000072b 000 00001101 6ab218eb 78163603 78163603 78163603 78163603 9851b5d3 9851b5d3 9851b5d3 9851b5d3 4fe08ecc 4fe08ecc 4fe08ecc 4fe08ecc 920cc461
+0 10 400001ec 001 00001111 f3307caa f3307caa 90a2bd78 90a2bd78 0e401abf 0e401abf dd51a2b4 dd51a2b4 42e187b1 42e187b1 66a1fa51 66a1fa51 16fb1ebd 16fb1ebd 912c171a 912c171a
+1 01 40000462 001 00000011 d1a00000 0000 dbfa731d 0001 dbfa731d 0000 0000b599 0011 00000460 0010 d1791bed ab5cb400 abd31bce 1905caa0
+1 01 40000214 010 00001111 b3e141af 0111 1a4ec3af 1111 dfe95c33 1111 90256dca 1111 b54467c3 1111 1327b3c2 1111 d9892b25 0011 35ae9208 0010 948b65cf 1111 9d4e2ce1 0011 321402b7 0011 83fec743 0111 ecf43df7 1011 f12ec596 1111 fb11a4b3 1000 c707b868 1110 00000210 0048 efc43129 86f9c726 67ec09dd 0a95a2ea 75513082 f100d8b9 7a29b41c 3cee3e56 7ee8b77b 25a31d81 21d31e31 5cfbb5eb a3b66575 6dab575f dfbfa4e5 1afcbdde 41d5e9be 82bd06c8
+1 01 4000065e 000 00000101 c05f0000 0100 c05f0000 0000 dc1a8c0b 0001 dc1a8c0b 0010 dc1a8c0b 0100 dc1a8c0b 1000 00000658 0010 94fff3cd 5f8ff9f1 f0d92127 d6b4555d
+0 01 400000b0 010 00001101 1d7b0e0a c65b1e70 492aaad6 3fadd77f 09f47a40 00ec5969 3769fa4f d3c6b48a cee5f0c3 05be207f 6c553fc9 46d00227 3b439579 b26942af
+1 01 40000514 010 00000111 6221eb38 0111 256a325d 1110 9d0ddd60 1101 b610d7c4 1111 7c3dfcc3 1111 733106c8 1000 6dbd9d4a 1111 8edbb757 1101 00000510 0028 9852cfb3 11566d49 d3e7cdca 0c5154d8 f8fae6fd 316664d2 d480027d 95cbe3f2 8c3a735b d6812812
+0 10 40000383 000 00000001 2d1248a2 2d1248a2
+0 01 40000650 001 00001110 d0ccfb61 d0ccfb61 d843f552 d843f552 b63f90e1 b63f90e1 865f089f 865f089f dc1a8c0b dc1a8c0b 5f0243ab 5f0243ab 1f7a0c18 1f7a0c18 11effb2d
+0 10 400001be 001 00001111 d55ee16d b07d47f6 b07d47f6 9b324ccf 9b324ccf b64165eb b64165eb 34e2c41e 34e2c41e 7b194b95 7b194b95 64269172 64269172 818539aa 818539aa d55ee16d
+1 01 4000065b 000 00000100 38000000 1000 9fe65d03 0001 9fe65d03 0010 9fe65d03 0100 9fe65d03 1000 00000658 0008 de50e231 d0931799
+0 10 40000288 001 00001111 2fadbe07 2fadbe07 aad3cc54 aad3cc54 4e587a3a 4e587a3a 29eee337 29eee337 a6838ea6 a6838ea6 f17c04e0 f17c04e0 21d41819 21d41819 54de362b 54de362b
+1 01 40000142 001 00000011 b4ff0000 1100 31c2483d 0010 31c2483d 0000 00009e77 0001 00000140 0010 5a3325f8 db6f1038 9ea9603f 31ba74f9
+1 01 40000094 010 00000000 155b6c4c 0111 00000090 0008 9b788d10 86f24044
+0 10 400004f9 000 00001111 af93d3c5 af93d3c5 af93d3c5 9fa45c78 9fa45c78 9fa45c78 9fa45c78 d74bf56c d74bf56c d74bf56c d74bf56c d0c4db0a d0c4db0a d0c4db0a d0c4db0a af93d3c5
+0 01 40000030 001 00000100 58e97803 58e97803 c0226577 c0226577 e85ff69c
+1 01 40000668 010 00001001 a19b8808 1111 dafdb1b0 1111 6ee8731d 0111 b4f1ad8a 1111 65334965 1110 4a2c0a0b 1011 35e6cfac 0101 e2337425 1101 bf6664d1 0001 7b13ea2e 1101 00000668 0028 eec2d346 f2df637f 5ff1bdf7 7a3142ec 71332bb4 a17022bc 307147f0 0e4ecc7a 16ffa65a 5102e7f0
+0 10 4000075c 001 00000111 43ff1f86 43ff1f86 0677ba82 0677ba82 0d3cdd46 0d3cdd46 01a77464 01a77464
+1 01 400003e8 010 00000101 0f7364ed 1111 8b6ae1cf 1111 face9ead 0010 6f0feeaf 1001 1d157342 1101 0e5577e6 1011 000003e8 0018 99e3810a 32b7ca95 018076af 41f5b95e 47b7a5ef b950e5eb
+0 10 4000074d 000 00000011 12f3e566 12f3e566 12f3e566 12f3e566
+1 01 40000446 001 00000010 e5070000 1000 2d14aafa 0011 2d14aafa 1000 00000440 0010 90034ced e1352784 de49a87c 68b74f1a
+0 01 40000498 010 00001000 e1953c32 2ddbdb72 6b8aec40 7758e0bb 32ce1bd0 c17498e3 582f2016 4078221e 3f827415
+0 01 400001e8 010 00001101 912c171a f3307caa 90a2bd78 0e401abf dd51a2b4 42e187b1 d3f5dafe 9209f3a6 cd893e49 b80cd5cd 60674dbb 02e141af 1a4ec3af dfe95c33
+0 01 40000016 000 00000100 3a372aa4 3a372aa4 f5d8f1c5 f5d8f1c5 f5d8f1c5
+1 01 400004b8 010 00001100 0b611d27 1011 b4e1c2bb 1101 5ef460c1 0111 ccae8bf7 1111 2a1bb495 0110 e5553e7a 0101 801572f1 1101 0b9f089b 1111 680d9f41 1111 6df9614b 1101 23fef439 1111 2ffa0f7e 1011 2312a285 1101 000004b8 0038 25501744 84a4fa62 a3274bd3 b9b4fd0a 1133e3f0 f675662f 31675b9e 2afed209 fa42da58 0ec4d596 7b0b8b8b c2c04110 620785f7 12a4fcd9
+1 01 40000780 001 00000100 f450c5f5 0001 f450c5f5 0000 b11d9a5d 0011 b11d9a5d 0100 0000374b 0000 00000780 0010 11b8ebf3 adf6368f 7797e087 75caee0d
+1 01 40000727 000 00001101 de000000 1000 b48a7801 0001 b48a7801 0000 b48a7801 0100 b48a7801 1000 2987a167 0001 2987a167 0010 2987a167 0100 2987a167 0000 28e60110 0001 28e60110 0000 28e60110 0100 28e60110 1000 000000f8 0001 00000720 0018 29e4882d 1a164a24 9df3bb25 e2522579 642964f3 3a211fb6
+1 01 400003d6 000 00001111 d7660000 0100 d7660000 0000 146d2998 0001 146d2998 0010 146d2998 0000 146d2998 1000 adb7899b 0001 adb7899b 0010 adb7899b 0100 adb7899b 1000 caf53471 0001 caf53471 0000 caf53471 0100 caf53471 1000 0000be6f 0001 0000be6f 0010 000003d0 0018 c98889e3 f5d0e9e7 8572b887 ccd64c6b cac05fe1 6a2ec1be
+0 01 400004f0 010 00001111 d74bf56c d0c4db0a af93d3c5 9fa45c78 5efb8ac9 e02767fe fa0c9568 1a1a89ee ff7f4c9a ee21eb38 256a328e 9d0df660 b610d7c4 7c3dfcc3 73422b07 6dbd9d4a
+1 01 400002dc 000 00000111 5362b2ba 0001 5362b2ba 0010 5362b2ba 0100 5362b2ba 0000 7591d3cf 0000 7591d3cf 0010 7591d3cf 0100 7591d3cf 1000 000002d8 0010 0e9cdc9b fba739c8 c9222ef2 d7f75a98
+1 01 4000030c 001 00000000 0000d583 0011 00000308 0008 37c74724 a6820b33
+1 01 40000506 001 00000110 50520000 1000 fd249026 0001 fd249026 1100 28f34782 0000 28f34782 0100 0d3f083d 0011 0d3f083d 0100 00000500 0018 9fddcc65 ccc5665f 868788d5 9266fb98 d5fa5d6c 919e11c2
+1 01 40000464 000 00001000 c757e19a 0001 c757e19a 0010 c757e19a 0000 c757e19a 1000 2bff50ee 0001 2bff50ee 0010 2bff50ee 0100 2bff50ee 1000 000000ba 0001 00000460 0010 b586ad7c 1b72025f d05137f6 1882db75
+0 01 40000148 000 00000111 9eeb0277 9eeb0277 9eeb0277 9eeb0277 5bce58b4 5bce58b4 5bce58b4 5bce58b4
+0 10 40000340 001 00000001 2745bd55 2745bd55
+1 01 4000031b 000 00001101 ad000000 1000 d9520623 0001 d9520623 0010 d9520623 0100 d9520623 1000 c335e334 0000 c335e334 0010 c335e334 0100 c335e334 1000 b266fc38 0001 b266fc38 0010 b266fc38 0100 b266fc38 1000 00000091 0001 00000318 0018 c3be8c7b ef1f1728 55b06e9d 2c31e3c4 c2c74788 184fb110
+0 01 400006b4 010 00001110 39de2727 085a6d2f c20c9074 64531a21 d877d461 1f558dc7 117558ea f68544f2 c10d4089 cabd5bb6 d3cebc11 8da8385f 8e912e01 70e582ba 39abc0e8
+1 01 4000024e 001 00000101 61790000 1000 9e8e62f2 0010 9e8e62f2 1000 43e90813 0001 43e90813 1100 0000df28 0010 00000248 0018 66c4bdc1 28918cc4 df13b899 4b8c8485 cb11c01a 21e17a1a
+1 01 40000679 000 00000100 5b106000 0000 5b106000 0000 5b106000 1000 00002995 0001 00002995 0010 00000678 0008 b7ef4b9d 601ae021
+1 01 400001a2 001 00000101 35520000 1100 1d43a0ec 0001 1d43a0ec 0000 b42d0c88 0011 b42d0c88 1100 0000c44f 0011 000001a0 0010 fc2b61a7 230afe89 5980da2e 6f6a1f1b
+0 10 400000c8 001 00000011 3769fa4f 3769fa4f d3c6b48a d3c6b48a
+0 01 400001a0 010 00001001 355247f6 9b324cec b42d0c88 34e2c44f 7b194b95 64269172 818539aa d55ee16d c940e0e7 f0ec3bce
+1 01 40000153 000 00001111 22000000 1000 2149262d 0001 2149262d 0000 2149262d 0100 2149262d 1000 317634f5 0000 317634f5 0010 317634f5 0100 317634f5 0000 40709180 0001 40709180 0010 40709180 0000 40709180 1000 00f0d78f 0001 00f0d78f 0010 00f0d78f 0100 00000150 0018 2960c30b bebb8ff3 803316e8 0b8bc0a6 2c6d841a c73b71a9
+1 01 400007a0 001 00001000 5bdf1733 0011 5bdf1733 1100 69249440 0011 69249440 0100 2d19073b 0000 2d19073b 0000 b9ceaabb 0010 b9ceaabb 1000 000025ab 0011 000007a0 0018 9904aa2f 3becd138 befd27a7 58de115f 387b5b3e ac656ba1
+0 10 40000526 000 00000011 7c3dfcc3 7c3dfcc3 7c3dfcc3 7c3dfcc3
+1 01 400000f6 001 00000101 31a40000 1100 65e92c78 0011 65e92c78 1100 fc885cb0 0011 fc885cb0 1100 000030e7 0011 000000f0 0018 d4c902d5 8817af77 e7048f4d 5abcc418 a49f9c87 59c5b021
+1 01 400006a4 010 00000101 7cc81a8a 1100 72592b2f 1111 e1feb30f 1111 f1fa6f6c 0111 5cf98a77 1011 8b6b2bc7 0011 000006a0 0020 513a8b50 0c531c7e cf13be37 cfca0500 109adeef 8393e8dc 0fa183d2 356ef703
+1 01 40000120 001 00000101 4cb1c750 0011 4cb1c750 0100 5f685a1f 0011 5f685a1f 1100 9952f96c 0011 9952f96c 1100 00000120 0010 823f3eb1 dae3ebc4 e25bdd92 5326223d
+0 10 40000351 000 00000001 79876ec2 79876ec2
+0 10 40000012 000 00000011 2bee0c7b 2bee0c7b 2bee0c7b 2bee0c7b
+1 01 40000063 000 00000111 26000000 1000 656a4ca8 0001 656a4ca8 0010 656a4ca8 0100 656a4ca8 0000 00bf5a27 0001 00bf5a27 0010 00bf5a27 0000 00000060 0010 c20e0cc7 d743ce18 53a7a731 a19b28a6
+0 01 400003f4 010 00001111 6f57ddaf 1d15f642 0eb277e6 1e3235ef c645f1b1 e4830c36 da03ae63 05d4ca42 daf2eb05 abccf106 01579a7a eed7bf78 ca423207 32612b51 c167a2bb e68e5d72
+1 01 40000222 001 00000001 6f7a0000 0000 00004582 0000 00000220 0008 75513082 f100d8b9
+1 01 400000ab 000 00000101 c1000000 1000 a1f64b13 0001 a1f64b13 0010 a1f64b13 0100 a1f64b13 1000 00000066 0000 000000a8 0010 81a1b8a8 98a9cca1 7ec56bcd 0f48b0fb
+0 10 400003cc 001 00000111 d7ed1696 d7ed1696 abd3f0f0 abd3f0f0 84bd40cd 84bd40cd 621c0f00 621c0f00
+1 01 4000002c 000 00000110 c280e14b 0001 c280e14b 0010 c280e14b 0100 c280e14b 1000 0094647b 0001 0094647b 0000 0094647b 0100 00000028 0010 f2bb8dd7 7903ba86 3f9d282b ec063cb4
+0 10 4000046c 010 00000001 0ed835ba 2bff50ee
+0 01 400007a2 001 00000100 5bdf1733 33249440 33249440 9d03802f 9d03802f
+0 10 400001bc 010 00000111 d55ee16d 355247f6 9b324cec b42d0c88 34e2c44f 7b194b95 64269172 818539aa
+0 10 4000047e 001 00000001 09a6a8d2 09a6a8d2
+0 10 400003ca 001 00000111 621c0f00 d7ed1696 d7ed1696 abd3f0f0 abd3f0f0 84bd40cd 84bd40cd 621c0f00
+1 01 40000105 000 00001010 095b6e00 0010 095b6e00 0100 095b6e00 0000 5c2ab32d 0001 5c2ab32d 0010 5c2ab32d 0100 5c2ab32d 1000 26f0fc54 0000 26f0fc54 0000 26f0fc54 0100 26f0fc54 1000 00000100 0010 35dbbfaa 433742d9 fcf3da41 c7391df6
+0 10 40000710 010 00000111 3aa6ef4c 1d16ebf6 a3f7d486 838d28ae 968b2a26 2719b079 bb0a0553 d8245cc3
+0 10 400003b9 000 00000111 ebf8fc6a ebf8fc6a ebf8fc6a 579bcb7b 579bcb7b 579bcb7b 579bcb7b ebf8fc6a
+0 01 40000308 010 00000110 bd2e35c2 0d09d583 d1a04bb7 81a27066 ad8a5050 d9520623 c335e39a
+0 01 400004b2 001 00001000 582f2016 4078221e 4078221e 0b821d27 0b821d27 b4e133bb b4e133bb 44f460c1 44f460c1
+0 01 40000150 010 00001101 22e6b61e 21495c2d 8c763424 40f69180 79f0d78f d8553d12 270bea20 49e0bd28 351bb377 f3113a56 3e1f8e71 6fbee704 b150e229 9ebe77c2
+0 10 40000420 001 00000111 eed7bf78 eed7bf78 ca423207 ca423207 32612b51 32612b51 c167a2bb c167a2bb
+0 01 40000786 000 00000010 131d9a5d 131d9a5d 3eb89134
+0 10 4000061c 001 00001111 8749187b 8749187b df8bf58d df8bf58d 9bb4adf2 9bb4adf2 e8e45686 e8e45686 8012ee73 8012ee73 864f662e 864f662e 3d297385 3d297385 304d1072 304d1072
+0 10 40000298 010 00001111 a6838ea6 f17c04e0 ab07196c daeef0a9 abccf0aa 8bcff0ab adfd570f ade92b12 5eb6e209 0c879f48 21d41819 54de362b 2fadbe07 aad3cc54 4e587a3a 29eee337
+0 10 400004fa 001 00000001 af93d3c5 af93d3c5
+0 01 4000050c 000 00001000 1af389ee 1af389ee 1af389ee 1af389ee ff3f083d ff3f083d ff3f083d ff3f083d ee21eb38
+1 01 400007e8 010 00000100 d2235d74 1101 fb627e85 0110 94d8d0e0 0111 f9c9e32a 1011 53d4fb01 0111 000007e8 0018 360a9eae 889a3f94 1698839d 65aeb5df 6efc47e7 6bce5642
+0 10 40000224 010 00000011 b54467c3 1327b3c2 80c92b25 90256dca
+0 01 400004f3 000 00001111 d74bf56c d0c4db0a d0c4db0a d0c4db0a d0c4db0a af93d3c5 af93d3c5 af93d3c5 af93d3c5 9fa45c78 9fa45c78 9fa45c78 9fa45c78 5efb8ac9 5efb8ac9 5efb8ac9
+0 10 400004e6 001 00000111 2f290f7e 23122d85 23122d85 8eca1952 8eca1952 23fef439 23fef439 2f290f7e
+0 01 40000017 000 00000101 3a372aa4 f5d8f1c5 f5d8f1c5 f5d8f1c5 f5d8f1c5 457978f1
+0 10 4000056c 001 00000011 f9108813 f9108813 be1d4f3a be1d4f3a
+0 01 40000210 001 00000111 60674dbb 60674dbb 02e141af 02e141af 1a4ec3af 1a4ec3af dfe95c33 dfe95c33
+1 01 4000060a 000 00000111 2e5d0000 0000 2e5d0000 1000 c8399b6e 0001 c8399b6e 0000 c8399b6e 0100 c8399b6e 1000 00007281 0001 00007281 0010 00000608 0010 3007949a 147a30c2 912b8cbd 3f5ec153
+0 01 400000a0 001 00000011 532b2eca 532b2eca 1fc42a64 1fc42a64
+0 10 4000007e 001 00001111 5ce42d17 2625c62b 2625c62b fc6a4ca8 fc6a4ca8 3a425a27 3a425a27 93b7f33c 93b7f33c 9419f385 9419f385 c9acadd0 c9acadd0 dba3cbc4 dba3cbc4 5ce42d17
+0 10 4000061c 001 00000011 8749187b 8749187b 304d1072 304d1072
+0 10 400003c8 001 00001111 621c0f00 621c0f00 d7ed1696 d7ed1696 d2f8ea35 d2f8ea35 1c66d6bf 1c66d6bf 14e82998 14e82998 adb7899b adb7899b abd3f0f0 abd3f0f0 84bd40cd 84bd40cd
+1 01 400002a5 000 00000101 200c8300 0010 200c8300 0100 200c8300 1000 00a92292 0001 00a92292 0010 00a92292 0100 000002a0 0010 1aa9f411 69c649df 3ade87b1 aed938c9
+1 01 40000110 001 00001100 b39d1033 0011 b39d1033 1100 6cf3cfcd 0001 6cf3cfcd 0100 af834a6e 0011 af834a6e 1100 e754f561 0001 e754f561 1100 dd0d94e1 0011 dd0d94e1 0100 4480531d 0011 4480531d 1100 0000b876 0011 00000110 0020 00b66062 6b96ecce 03b302a8 daf68f32 e54e8656 640619ba ba0447fd 79b06891
+1 01 40000014 010 00001100 4f1e228d 0010 60f7b2b5 1111 4482b3f3 1110 432b8f81 1010 911721d7 0111 874b7991 1110 339af9ed 1111 4cad40cb 1001 fa3aad04 1111 353c46e6 1110 edf9dc69 1101 c9767f02 1111 1c70991c 0011 00000010 0038 4590b127 a52b3c16 73d86d98 0cd97e8f d2bb932c df07f300 4937933e 60c480d2 94440e2a bff4fca0 d7d1fcbf d7157166 7a5cf0b8 6d8d83e4
+1 01 40000552 000 00001000 b72b0000 0100 b72b0000 1000 d996a0f7 0001 d996a0f7 0010 d996a0f7 0000 d996a0f7 1000 00e6b7e3 0001 00e6b7e3 0010 00e6b7e3 0000 00000550 0010 0eb35b18 234e0a55 92b682dc a38ee876
+0 01 40000058 001 00000010 640a8979 640a8979 0153c874
+0 10 40000138 000 00001111 c3daea3b c3daea3b c3daea3b c3daea3b f6b1ce30 f6b1ce30 f6b1ce30 f6b1ce30 53b880ce 53b880ce 53b880ce 53b880ce 66175d07 66175d07 66175d07 66175d07
+0 01 40000134 000 00000000 66175d07
+0 10 40000004 001 00000001 6e50a5a4 6e50a5a4
+1 01 4000040c 010 00000110 5455f08e 1110 a26d78c3 1101 9894ded7 1000 0904f482 1111 d2c3e794 1101 8acbbcc3 1101 4f21d5cf 0111 00000408 0020 47372883 90f1c8aa 29e35474 4faf0ef6 2c563551 547916ee 30e25f48 1a336648
+1 01 4000061c 010 00001101 0c21135d 1101 1ad8cc97 1010 5a01aff1 1111 059fb5ed 1111 a19dc7bf 0011 30981c85 1100 b1a919e0 1011 23ee8037 0110 fc58bf17 0101 9077e50c 1101 c0037f63 1111 a0ae0778 0111 dc3bee42 1111 0d078e6f 1001 00000618 0040 41dc4b28 7ca69d15 239cd492 b30762fd 2bf33013 9f0873e2 26225d65 687d498f 9391de45 e8ee28b6 0f66e131 dd49aa9e 89b4a8fe aac75fcb b1862471 931558e4
+1 01 4000015c 010 00000110 21f6ef38 1011 878f7cfb 1001 bef14607 1100 4d5556dc 0110 778d8b65 1111 f5deb084 1011 9874ff4d 1110 00000158 0020 ac344fc9 5757aa38 1a92362f df095c19 8bc58090 78068632 26d4f45d 2b0bcb47
+0 10 40000050 010 00000001 526ebc01 c2998498
+1 01 40000140 001 00000100 585eaf65 0011 585eaf65 0000 36b18a82 0011 36b18a82 0100 0000730c 0011 00000140 0010 827940bc 852d5380 83e7210d 446a7876
+0 10 40000278 010 00000111 ad7c5ca1 2d863317 2f38d8c3 9cc40b15 7292379a 397ca5a2 75309ce3 49fb1994
+1 01 400005a2 001 00000101 845f0000 1100 3a0ee8d0 0010 3a0ee8d0 0100 71b5a9c2 0000 71b5a9c2 0100 0000c284 0010 000005a0 0010 1198cc16 dcc9d53e 9dd2f99c d1d365fb
+1 01 400002a0 000 00000101 89fdda61 0000 89fdda61 0010 89fdda61 0100 89fdda61 1000 0000bfaf 0000 0000bfaf 0010 000002a0 0008 c09b6f31 cee1f764
+0 10 40000516 001 00000011 ee21eb38 ff3f083d ff3f083d ee21eb38
+0 01 4000055e 001 00001010 45b48910 6da54c00 6da54c00 e09c01fe e09c01fe be1d4f3a be1d4f3a f9108813 f9108813 cccc5c5c cccc5c5c
+1 01 4000052b 000 00000111 e1000000 1000 8beb7ded 0001 8beb7ded 0010 8beb7ded 0100 8beb7ded 1000 007f2bfb 0000 007f2bfb 0000 007f2bfb 0000 00000528 0010 695f0928 d78345a9 8c3a735b d6812812
+0 10 40000248 010 00000001 f12ec596 61b1a386
+1 01 40000508 000 00001011 52046dc2 0001 52046dc2 0010 52046dc2 0100 52046dc2 0000 5b769022 0001 5b769022 0000 5b769022 0100 5b769022 1000 1ec744e5 0001 1ec744e5 0010 1ec744e5 0100 1ec744e5 0000 00000508 0010 3c664018 4fa9f312 40fc935d 26099d3c
+1 01 40000264 010 00000011 28af4755 1111 e545cab2 1110 8a3e7297 0001 282189c2 1111 00000260 0018 8d5bf5d4 e01c9ade 535f79ec 4d66bec6 3e71e724 49a9595e
+1 01 400001e0 000 00000001 0000e88f 0000 0000e88f 0010 000001e0 0008 b6f24d34 5777ed29
+1 01 40000213 000 00001111 09000000 1000 21c8946a 0001 21c8946a 0010 21c8946a 0100 21c8946a 1000 44233422 0001 44233422 0010 44233422 0000 44233422 1000 af06c161 0000 af06c161 0010 af06c161 0100 af06c161 1000 00c6bf5f 0001 00c6bf5f 0000 00c6bf5f 0100 00000210 0018 54135d35 89f7a242 bbc61122 558f6857 6a0f09d3 eed07fd0
+0 10 40000554 001 00000001 d940a0f7 d940a0f7
+0 10 400006a0 010 00000011 a4112c3a 7cc8cd03 72592b2f e1feb30f
+1 01 40000050 010 00001111 faa68911 1111 cf70e71c 1111 88bba0a9 0111 0ac40364 1100 d2761440 0111 31e6eb60 1101 e703b71e 1101 f782bb56 1111 46696ec2 1111 cb6a45fb 1101 a18aa0a7 0111 d4c91305 1111 e43f9c29 1101 f0fae9cd 1110 fa7da72b 1111 364322fe 0111 00000050 0040 ae39c518 f6dc2cf0 8a38fe73 d892dcd9 8d7149d1 8103bd43 714b59f5 c15842a9 a2accb64 a7bf3500 bdabaf80 8bfa9847 f50c7e02 ef078f69 49b0919e b956216c
+1 01 4000041d 000 00001110 4722eb00 0010 4722eb00 0100 4722eb00 1000 710a4b7f 0001 710a4b7f 0010 710a4b7f 0100 710a4b7f 0000 4385720e 0000 4385720e 0010 4385720e 0100 4385720e 0000 45302a98 0001 45302a98 0010 45302a98 0100 45302a98 1000 00000418 0018 8f02ae22 486b8002 bc883009 94e28271 c6ee9fb2 92a424c3
+0 01 40000709 000 00001100 bb0a0553 bb0a0553 bb0a0553 d8245cc3 d8245cc3 d8245cc3 d8245cc3 3aa6ef4c 3aa6ef4c 3aa6ef4c 3aa6ef4c 1d16ebf6 1d16ebf6
+1 01 4000077c 010 00001110 f917e821 1001 b4c41edd 1011 a1d5699a 0110 b6fc73ce 1111 df138f40 0000 2877dafc 1011 c7bdf528 1110 501ada54 1101 40a5c49b 1111 291f2171 1101 48d74842 1011 4e6dc7c7 1111 f1ab03e1 1110 590bb298 1111 3a2a88db 0111 00000778 0040 8c194d58 47490186 5a02228f bec89fe1 299c77a2 8da39caf a8e4d680 25c21c2f a4b670c5 fff1abd2 f4a46f23 c3b886d9 41c39d5b 294af21b 85deff49 bb4ffea1
+0 10 40000348 010 00000111 515e2dbf 222d688b 79876ec2 38a9359c 18123292 23a9a696 2745bd55 081e840a
+1 01 400001b8 001 00001101 0d283198 0001 0d283198 1100 114fc582 0011 114fc582 0100 ff85361c 0011 ff85361c 1000 017db614 0011 017db614 1100 e6decb8c 0001 e6decb8c 1000 4ba61205 0011 4ba61205 1000 38effcd4 0011 38effcd4 1100 000001b8 0020 d444c46f 376e620b d4f750fb d07caa32 457f8c5d 8109b9a7 a7945467 50e71a69
+1 01 4000054c 001 00000011 c27f379d 0010 c27f379d 0100 d375a1b3 0011 d375a1b3 0100 00000548 0010 6ceca5b0 a9c25e21 c41b8dfc a34478d6
+0 10 40000440 001 00001111 9c8d91cf 9c8d91cf e5bff2c0 e5bff2c0 2db0aafa 2db0aafa 7fd64c0e 7fd64c0e aa05997e aa05997e 2b968346 2b968346 5f3474f0 5f3474f0 6858ba17 6858ba17
+0 01 40000250 010 00000111 9e076238 43e91413 227ddfe9 0f9b8ebe 2f38d8c3 28af4755 e545ca9a 397ca597
+0 01 4000066a 001 00000111 a19b8808 dafdb1b0 dafdb1b0 6ce8731d 6ce8731d b4f1ad8a b4f1ad8a 5b33491a
+0 01 40000659 000 00001101 383f90e1 383f90e1 383f90e1 9fe65d03 9fe65d03 9fe65d03 9fe65d03 dc1a8c0b dc1a8c0b dc1a8c0b dc1a8c0b 5f0243ab 5f0243ab 5f0243ab
+1 01 4000046a 001 00001100 e8410000 1100 73b2dc37 0011 73b2dc37 1100 2ea013a6 0011 2ea013a6 1100 612ab2f9 0011 612ab2f9 0000 a7d7f72a 0011 a7d7f72a 1100 d7101c7f 0000 d7101c7f 1100 d2fe7641 0001 d2fe7641 0000 00000468 0020 a6d8be26 9add78f5 9b9421a2 f6b00c68 bf7657dd ab6b3572 2e923e8b 99f22e88
+0 01 40000080 001 00000110 e43f4d29 e43f4d29 f0fae9b7 f0fae9b7 fa7da72b fa7da72b 8d4322fe
+0 10 40000698 010 00000111 d177c41d 75ecbb55 41e67fac e233f125 2e6ca8d1 7b137b2e c3aa7c9f a25c3aa8
+0 01 40000758 010 00001000 01a77464 43ff1f86 2d975eac b3747715 4bded51b c0bbc782 4dc7dd54 28228d35 e3965631
+0 01 400004da 001 00000101 680d9f41 6df9554b 6df9554b 23fef439 23fef439 2f290f7e
+1 01 40000107 000 00000111 4e000000 0000 7bfbac6c 0000 7bfbac6c 0010 7bfbac6c 0100 7bfbac6c 1000 00ce8419 0001 00ce8419 0010 00ce8419 0000 00000100 0010 35dbbfaa 433742d9 19b426a9 882ee7c1
+1 01 40000470 010 00001100 29f4ad35 1111 bf867d8a 1111 46bd5681 1111 c7643108 1111 89dff90a 0001 cbd379e3 1101 d0c7a849 1111 947f9ed8 1011 203296a6 0011 acc927fe 0111 4ba7052a 1111 bdb039d6 1111 77e3ddf2 0110 00000470 0038 cc6b49e4 d13ef367 45f04264 56c1313b 74e31ad9 dea0982e a0cc6d38 75dc236a 8318fa78 cada57c2 cd63edda 210a953e 29a41908 4b44d747
+0 01 40000361 000 00001000 2cc22079 2cc22079 2cc22079 a74ea210 a74ea210 a74ea210 a74ea210 e1f76d8a e1f76d8a
+1 01 4000050c 010 00001011 0ab17723 0110 8bea8885 1111 0dce8937 1111 aac90169 0101 1a1dc70c 1111 01b2a3a8 1001 c6fe8f1f 0100 96c3682b 1111 022c4dd2 1110 82d795ef 1111 6a4c7b2a 0100 08bfc35a 1111 00000508 0038 0f1f3a58 1dfc6780 1f9795d6 a459ca4c 3d70e1fc 4e58ee0b 8c6fb2fe 678968a3 d00800c1 c0492d25 b44bcd20 5202b6f9 6ef9bbe9 a36d2e3f
+1 01 4000009c 010 00001110 9faa4c56 1111 ddecc4bc 0111 91963f3f 1110 42b5c979 0011 89c2d202 1101 5410989b 1111 e17f29cd 1011 4dfa1e56 1111 d6b4cab1 1111 ca157001 0110 00a86fac 1011 4fd5ccfc 1011 a982813f 1100 1c3abcb7 1110 b4c42da1 1111 00000098 0040 bf367cad cef8e923 fb0d66cd c71cb355 9c1e5164 35e8b5bf 23782c96 ea421cf2 c673f408 7d38e2b6 83254afb 5b401bea 8cf55c8f 2e5778ea 4303e8bb 892e980c
+1 01 40000680 010 00001110 aa19f7f4 0110 e71bee86 0001 51e6098a 1101 de54ff41 1111 30803870 1111 450f48f0 0011 2a3b86b2 0111 d0dd4158 0101 aabee702 0111 55e5ab40 0111 74abe35f 0010 ae57d6af 0111 1874f670 0010 d2a41bed 1111 43584627 1101 00000680 0040 93c5dff0 38a302cf c9fd93b8 9d387eb8 2404f3da 0a77ea9e d8dddf1c e694fd53 2a62642a fdac69a7 75e39024 829e2784 b46f1be2 fef4e6ac a23c5e49 b3c583eb
+1 01 40000724 001 00001101 0fe12028 0001 0fe12028 1100 d869b6e3 0011 d869b6e3 0000 2f39d868 0010 2f39d868 1100 92350269 0001 92350269 1100 18f4a100 0001 18f4a100 1100 05a61300 0010 05a61300 1100 94935b3e 0011 94935b3e 1100 00000720 0020 3d73bdb5 96c41a50 836be855 ed51ccbc 031e6d3f f777c384 bfb1aa7c 8b903715
+1 01 40000782 000 00001010 20470000 0100 20470000 1000 4f376992 0001 4f376992 0010 4f376992 0100 4f376992 1000 8c6df7de 0000 8c6df7de 0010 8c6df7de 0000 8c6df7de 1000 00000093 0001 00000780 0010 f1416616 2104b66c 6d0d9b2d 1e201784
+1 01 4000055c 001 00000011 84bbf93f 0010 84bbf93f 0100 d6006d1f 0011 d6006d1f 1100 00000558 0010 1d74d5c6 e7880782 61dd44f8 db213362
+1 01 400007c6 000 00000100 cee80000 0100 cee80000 1000 001cbf0d 0001 001cbf0d 0000 001cbf0d 0100 000007c0 0010 ac1dad7d 979da595 aefc434f 6809b3cb
+0 10 4000005b 000 00000001 64bba0a9 64bba0a9
+1 01 400002e0 010 00000110 93fadbfe 0011 5dec9943 1111 d3d1fbbe 1111 28d70969 1011 e15fc7b5 1100 a0501876 0101 ecc3d56a 1001 000002e0 0020 ea73fec0 cc78c2b3 3966e663 203b0d23 acb462b4 7ad85570 0c9378ea 661f604c
+1 01 4000029a 000 00001111 66c00000 0100 66c00000 0000 84b8dfd6 0001 84b8dfd6 0010 84b8dfd6 0100 84b8dfd6 1000 11035f0d 0001 11035f0d 0010 11035f0d 0100 11035f0d 1000 5c396dc6 0001 5c396dc6 0010 5c396dc6 0000 5c396dc6 1000 00002ecd 0001 00002ecd 0010 00000298 0018 3fb94dd6 ce0547bd 30701987 6e102309 dc7a9bec 7b2d5e85
+0 10 400000bd 000 00000001 d6b4cab1 d6b4cab1
+0 01 400005bc 010 00000011 00a40f61 3fdee1b7 9229a0dc e630343a
+0 01 40000614 000 00001001 3d297385 3d297385 3d297385 3d297385 304d1072 304d1072 304d1072 304d1072 0c21185d 0c21185d
+0 10 400001eb 000 00000001 912c171a 912c171a
+0 10 4000051f 000 00000111 1a1dc70c 25c93269 25c93269 25c93269 25c93269 1a1dc70c 1a1dc70c 1a1dc70c
+0 10 400005b3 000 00000001 f1e2924d f1e2924d
+1 01 40000050 010 00000101 fc194dcb 1111 7bd1cd5c 0101 41f22a16 1100 d2787dec 1100 017cacda 0111 35b3f874 1110 00000050 0018 365a7de4 e860eaa3 b63b340a 3c11d4a3 58f41e3f 85317eb2
+1 01 4000050c 010 00001110 e146ac07 1111 717241c8 1110 863eb69d 1111 39ddf823 1110 8bd2062a 1111 718706aa 0111 ceae577c 1001 34c5bfac 1101 0cc1f529 1011 79177e47 1101 6ec7e73e 1110 c9e4f487 1111 8626dd7d 1110 b5d5b13d 1010 75581dbe 1110 00000508 0040 5a81f753 6ae54a23 c22d2651 fc11e1fe e5fa154e b7a094e5 cff4f8de 7819bebf 76778a22 cec1a278 4e7eb57e d59cf47b 4d5ea826 01fbc852 bfa8bd68 301d2a83
+0 01 400001e4 010 00001110 16fb1ebd 912c171a f3307caa 90a2bd78 0e401abf dd51a2b4 42e187b1 d3f5dafe 9209f3a6 cd893e49 b80cd5cd 09674dbb 21c8946a 444e3422 af06c133
+1 01 400004df 000 00001101 75000000 1000 c275a64b 0001 c275a64b 0010 c275a64b 0100 c275a64b 0000 b1a31ff4 0001 b1a31ff4 0010 b1a31ff4 0000 b1a31ff4 0000 958f2f81 0000 958f2f81 0010 958f2f81 0100 958f2f81 1000 0000001a 0001 000004d8 0018 e1b8c457 4cee84af 2c6c7116 94e42079 77853050 14dd24d1
+1 01 400000c6 001 00000110 1f8d0000 1100 16186367 0011 16186367 0000 ee5e7b4f 0001 ee5e7b4f 1000 b66f000a 0011 b66f000a 1100 000000c0 0018 7d40727c 6d5d297c 6f11f765 83c8a9a3 454c0f16 5029a56e
+0 10 40000776 000 00000111 28228d35 28228d35 4dc7dd54 4dc7dd54 4dc7dd54 4dc7dd54 28228d35 28228d35
+0 01 4000008c 010 00001000 8d4322fe bf8f72d5 7d5b6c4c b7a23973 9faa4c56 53ecc4bc 91963f64 c107c979 89c24b02
+0 01 40000284 000 00001011 54de362b 54de362b 54de362b 54de362b 2fadbe07 2fadbe07 2fadbe07 2fadbe07 aad3cc54 aad3cc54 aad3cc54 aad3cc54
+0 01 400006e1 000 00000000 8da8385f
+1 01 4000060a 000 00000001 5ef00000 0100 5ef00000 1000 00000608 0008 03726b8d a677f5f2
+1 01 40000320 010 00001001 ef79a7eb 1111 6b78d838 1100 06b4fad0 1011 1dfaea86 1011 19552466 0001 e0ad34fc 1100 74b526c5 1110 4f4c3580 1111 bce84a34 1011 88c86856 1111 00000320 0028 5a7e78e4 eef2cebb a0d0511f 096eb2d1 f680ebf5 925d98ed a92c34b0 e1090a8a 28539a2a 696ddebe
+0 10 40000074 001 00001111 cb6aadfb cb6aadfb db8aa0a7 db8aa0a7 d4c91305 d4c91305 267cacda 267cacda 35b3f860 35b3f860 e7035a1e e7035a1e f782bb56 f782bb56 46696ec2 46696ec2
+0 10 4000025c 010 00001111 0f9b8ebe 2f38d8c3 28af4755 e545ca9a 397ca597 282189c2 49fb1994 ad7c5ca1 2d863317 8dfec743 ece53df7 f12ec596 61b1a386 9e076238 43e91413 227ddfe9
+0 01 40000704 001 00001100 2719b079 2719b079 bb0a0553 bb0a0553 d8245cc3 d8245cc3 3aa6ef4c 3aa6ef4c 1d16ebf6 1d16ebf6 a3f7d486 a3f7d486 838d28ae
+0 10 40000258 010 00001111 227ddfe9 0f9b8ebe 2f38d8c3 28af4755 e545ca9a 397ca597 282189c2 49fb1994 ad7c5ca1 2d863317 8dfec743 ece53df7 f12ec596 61b1a386 9e076238 43e91413
+0 10 400001c4 001 00001111 017db614 017db614 e69c5d8c e69c5d8c 4b721205 4b721205 38effcd4 38effcd4 ebcb8bbd ebcb8bbd 817f892d 817f892d 51992e69 51992e69 ff40361c ff40361c
+0 10 4000064d 000 00000111 dc3bee42 dc3bee42 dc3bee42 98ae0778 98ae0778 98ae0778 98ae0778 dc3bee42
+1 01 40000261 000 00000011 be424500 0010 be424500 0100 be424500 1000 0000005b 0001 00000260 0008 7f167fb9 8ec46c14
+1 01 40000561 000 00001101 f5fb6a00 0010 f5fb6a00 0100 f5fb6a00 1000 bd6f4ffb 0001 bd6f4ffb 0010 bd6f4ffb 0100 bd6f4ffb 1000 51793ecf 0001 51793ecf 0010 51793ecf 0100 51793ecf 1000 00c515bc 0001 00c515bc 0010 00c515bc 0100 00000560 0010 f5934049 5899b7c9 28176ac1 59fb913d
+1 01 400006e0 000 00001111 5f7cf299 0001 5f7cf299 0010 5f7cf299 0000 5f7cf299 1000 801f1733 0001 801f1733 0010 801f1733 0100 801f1733 1000 1f2aefaf 0001 1f2aefaf 0000 1f2aefaf 0100 1f2aefaf 1000 87580ce0 0001 87580ce0 0010 87580ce0 0100 87580ce0 0000 000006e0 0010 9cbf81cf 30b7c51f 0671ae63 fd7c62ff
+1 01 40000048 001 00001101 f5af0693 0011 f5af0693 1000 9a9924ab 0010 9a9924ab 1000 3cb2b38f 0011 3cb2b38f 1100 734e1508 0011 734e1508 1100 ee715375 0011 ee715375 0100 6b9209d0 0001 6b9209d0 0000 4e33a0de 0010 4e33a0de 1100 00000048 0020 c2e151b8 921ca008 0e70339a c9f8cc41 bca6bf66 f7106b83 196b50fd 222efda9
+0 10 400005a0 001 00000011 845f05df 845f05df c50ee899 c50ee899
+0 01 40000770 000 00000001 4dc7dd54 4dc7dd54
+1 01 4000037c 010 00001000 eed287f9 1011 daec320e 0111 0a581f63 1100 fea918c9 1111 a75e0b8c 0110 03843c4a 1110 6a90a565 0101 bc89a28a 1111 987db192 0111 00000378 0028 5a3cfeaf 0a6cb19c f40ccb6b ab779e4c f247271e aa3a313c ff101782 b52be5e6 2bfa860b 8de4d6e7
+1 01 400000a7 000 00000011 64000000 1000 00f90509 0001 00f90509 0000 00f90509 0000 000000a0 0010 e5a31466 ad8d9d94 88e3b02c 2436eb27
+0 01 400006bc 010 00000010 c20c9074 64531a21 d877d461
+0 01 4000021e 001 00000101 af06c133 90c66d5f 90c66d5f b54467c3 b54467c3 1327b3c2
+1 01 400006b2 001 00000111 51ba0000 1100 ff91c6ef 0011 ff91c6ef 1100 97007e91 0011 97007e91 1000 25a2b8e0 0011 25a2b8e0 1100 0000e5a2 0011 000006b0 0018 6184dafb 3734b91a ce5e4582 72e5310e a5361739 c39534f0
+1 01 400004f4 001 00000001 594d141e 0011 594d141e 1100 000004f0 0008 cec21587 447d799b
+0 01 4000039c 000 00001110 077db192 077db192 077db192 077db192 75a5f36a 75a5f36a 75a5f36a 75a5f36a da47b242 da47b242 da47b242 da47b242 ab1df098 ab1df098 ab1df098
+0 01 40000538 010 00000110 c9e4f487 8626dd3e b55bb108 75581db6 3f0bd086 807f37b7 b775a1b3
+0 10 40000006 001 00001111 6e50a5a4 76324739 76324739 c9f641c0 c9f641c0 2bee0c7b 2bee0c7b 3a3722a4 3a3722a4 60f7b2b5 60f7b2b5 4482b3f1 4482b3f1 cbba2646 cbba2646 6e50a5a4
+0 10 40000724 001 00001111 0fe17328 0fe17328 b48ab6e3 b48ab6e3 2f39d867 2f39d867 9235b569 9235b569 18f48e00 18f48e00 05a61361 05a61361 94935b3e 94935b3e 1a68f5c7 1a68f5c7
+0 01 40000407 000 00001111 c645f1b1 e4830c36 e4830c36 e4830c36 e4830c36 5455f063 5455f063 5455f063 5455f063 a26dcac3 a26dcac3 a26dcac3 a26dcac3 98f2eb05 98f2eb05 98f2eb05
+0 10 40000178 000 00001111 3e1f8e71 3e1f8e71 3e1f8e71 3e1f8e71 6fbee704 6fbee704 6fbee704 6fbee704 f51bb084 f51bb084 f51bb084 f51bb084 9874ff56 9874ff56 9874ff56 9874ff56
+0 10 4000067a 001 00000011 5b33491a 4aee2995 4aee2995 5b33491a
+0 01 40000446 000 00001011 e5bff2c0 e5bff2c0 2db0aafa 2db0aafa 2db0aafa 2db0aafa 7fd64c0e 7fd64c0e 7fd64c0e 7fd64c0e aa05997e aa05997e
+1 01 40000384 000 00000111 6496fba2 0001 6496fba2 0010 6496fba2 0100 6496fba2 1000 de9c0939 0001 de9c0939 0010 de9c0939 0100 de9c0939 1000 00000380 0010 695bdb3b 98d671ff d1a3864b fef40db2
+1 01 40000528 001 00000111 b38e51ac 0011 b38e51ac 1100 bbd554fa 0011 bbd554fa 1100 d0d6f492 0011 d0d6f492 1100 3c728e9c 0011 3c728e9c 0100 00000528 0010 7ff028f3 42342bdf 2e025d13 5cb7befe
+0 01 4000040c 010 00000110 5455f063 a26dcac3 98f2eb05 0904f482 4722eb94 8a0a4b7f ca8572cf
+1 01 400004fc 010 00001010 21e35832 1111 4128eda5 0111 596bbacc 0111 2de50078 1110 713b50af 1011 036444f6 1111 d210734c 1111 c2aa8442 1111 ca9ca56b 1110 8fac71c8 0110 1c530c38 1111 000004f8 0030 6dc1470d d36533ac 238739f6 7df87d67 329a0f50 2373b41b 2750dd72 68c1462d 9da4d45f e81f2315 be6e00ff 18385ea2
+1 01 400005ae 001 00001000 c5aa0000 1100 78cd93da 0011 78cd93da 1100 b1ac2454 0010 b1ac2454 0000 6dfab211 0010 6dfab211 1100 0f228afd 0010 0f228afd 0100 000005a8 0018 5a676d46 3da42bd6 ff10006b 4dbd27fc f20d3be9 d26f9edc
+1 01 400001f4 010 00000010 e3b9c57b 0111 456e9368 1110 b1e0d2c8 0111 000001f0 0010 8c2d2df9 cf97e20f 92695c8b 692d8d69
+0 01 400006c8 000 00001101 1f558dc7 1f558dc7 1f558dc7 1f558dc7 117558ea 117558ea 117558ea 117558ea f68544f2 f68544f2 f68544f2 f68544f2 c10d4089 c10d4089
+0 01 40000580 010 00000101 c87c9681 5c38a5ba 50fc6f66 41284fd5 ac69d412 acb6e12e
+0 10 4000034c 010 00000111 222d688b 79876ec2 38a9359c 18123292 23a9a696 bc454a34 88c86856 515e2dbf
+0 10 400005b0 010 00001111 78cd93da 3d2124e2 6dfab24b 00228a61 c87c9681 5c38a5ba 50fc6f66 41284fd5 ac69d412 acb6e12e 05cc559d 9e7a2b0a 845f05df c50ee899 54b59be9 c5aac222
+0 01 40000600 010 00000000 df8bf58d
+1 01 400002d3 000 00000010 0b000000 0000 0000484a 0001 0000484a 0010 000002d0 0008 aea18839 f858bce8
+0 01 400005b0 010 00000110 78cd93da 3d2124e2 6dfab24b 00228a61 3fdee1b7 9229a0dc e630343a
+1 01 400005fa 001 00001000 cba80000 0100 b105592e 0011 b105592e 1100 a21c182a 0010 a21c182a 1000 bea47c10 0001 bea47c10 1100 b2578c22 0011 b2578c22 1000 000005f8 0018 8bbb7c8c 29e9865c 0a75b415 69376a64 b2b9be20 af57ed9c
+0 01 400000cd 000 00000100 ee82b44f ee82b44f ee82b44f b66f000a b66f000a
+1 01 400007f4 010 00000000 d800e4ab 1111 000007f0 0008 646e3080 eb75ac7e
+0 01 40000790 001 00001010 289adafc 289adafc c7bdf59a c7bdf59a 501a0a54 501a0a54 40a5c49b 40a5c49b 291f1771 291f1771 48244842
+0 01 4000019c 001 00000000 bd25b5ed
+1 01 40000244 001 00001010 e273483e 0001 e273483e 1100 e76ca31d 0010 e76ca31d 0000 4f1224d3 0010 4f1224d3 1000 e372e782 0011 e372e782 0100 55fcc89c 0010 55fcc89c 1100 0000c475 0010 00000240 0020 f96a7d3f fde02b36 7fc517e0 6cf10fdd cf88404c fddc578b 832a8109 831b59cf
+0 01 4000042d 000 00000011 c167a2bb c167a2bb c167a2bb e68e5d72
+0 01 400002f1 000 00001001 e15f6d7c e15f6d7c e15f6d7c 16503276 16503276 16503276 16503276 ec2f0e6a ec2f0e6a ec2f0e6a
+0 01 4000061d 000 00001111 0c21185d 0c21185d 0c21185d 1a58ccc5 1a58ccc5 1a58ccc5 1a58ccc5 5a01aff1 5a01aff1 5a01aff1 5a01aff1 059fb5ed 059fb5ed 059fb5ed 059fb5ed d5e5c7bf
+0 01 4000002d 000 00000101 339af9ed 339af9ed 339af9ed 4c9478cb 4c9478cb 4c9478cb
+1 01 400002fc 001 00001101 5c7f26e4 0010 5c7f26e4 1000 78378edd 0010 78378edd 1100 a9a67933 0001 a9a67933 1100 ba045c39 0011 ba045c39 0100 2408945d 0011 2408945d 1000 c3c2a4cc 0011 c3c2a4cc 1100 067ccae4 0001 067ccae4 1100 000002f8 0020 d96edb12 a99efd82 e1a079b5 8eccf89e 376fd4f6 5603e990 161c7aa7 581063ff
+0 10 40000710 001 00000111 3aa6ef4c 3aa6ef4c 1d16ebf6 1d16ebf6 a3f7d486 a3f7d486 838d28ae 838d28ae
+1 01 400005d4 001 00001011 68be0226 0011 68be0226 1100 a0d3f2e2 0011 a0d3f2e2 1100 1c0b741d 0010 1c0b741d 1000 b40bc45a 0011 b40bc45a 1100 af2e1a83 0011 af2e1a83 1100 2ddc4fa6 0011 2ddc4fa6 0100 000005d0 0020 689deff0 289767cd a5ade321 ca23a9fb b56088cc e0027bbe 810c64b0 b1141bbc
+1 01 40000028 010 00001000 8e51314a 1011 34bd5839 1111 570ea70d 1111 8042223d 1111 f05eaf7b 1111 5cf637f4 0011 05cb4528 1111 94720694 1101 b51457cb 1011 00000028 0028 e3281ddd afb63f69 56b13880 d76cc3c6 26b3f5a5 efa72c80 f5c2efad 9a77ea26 9342eb60 6b2f34bc
+1 01 400000b2 001 00001010 0c530000 1100 102ffe33 0011 102ffe33 1000 0b72c486 0010 0b72c486 1100 0b0ee30e 0011 0b0ee30e 1100 81b616d0 0001 81b616d0 1000 091e2ae8 0011 091e2ae8 0100 000000b0 0018 60b20c4c 4a289915 ba4a3ce3 64687201 33d69764 a6709089
+1 01 400006ee 001 00000000 47c00000 1100 000006e8 0008 5856da26 f578f539
+0 01 40000338 010 00001110 74b52606 4f4c3580 bc454a34 88c86856 515e2dbf 222d688b 79876ec2 38a9359c 18123292 23a9a696 2cc22079 a74ea210 e1f76d8a 537355ca a711d1c9
+1 01 40000481 000 00001101 44b4d800 0010 44b4d800 0100 44b4d800 1000 7ee7a388 0001 7ee7a388 0010 7ee7a388 0000 7ee7a388 1000 9f4386ee 0001 9f4386ee 0000 9f4386ee 0000 9f4386ee 1000 0044833e 0001 0044833e 0010 0044833e 0100 00000480 0010 e96acfbf 973c26cc 6d5e62fd e5f7608d
+1 01 40000070 010 00000011 cbae4a9a 1110 df276b08 0110 dcf5f407 1110 bf072143 1111 00000070 0010 dd9d2653 8cd15067 db3c136f 102e7361
+0 01 400000e4 010 00000011 b26942af 28b8b976 8186db8b b82eb762
+0 10 400003a4 010 00001111 da47b242 ab1df098 ce82f002 6917ad77 b1d8f055 ebf8fc6a 579bcb7b 2dec320e 6496fba2 de9c0939 695e0bfa 03843c56 da90f065 bc89a28a 077db192 75a5f36a
+0 10 40000688 010 00000001 51e6a88a de54ff41
+0 01 4000015a 001 00000100 8c763424 21f6ef38 21f6ef38 87f0d7fb 87f0d7fb
+1 01 4000074c 001 00001000 2d89a2f0 0011 2d89a2f0 1100 0941c07a 0011 0941c07a 1100 7f834353 0000 7f834353 1100 1dbf1414 0000 1dbf1414 1000 00006f54 0001 00000748 0018 51c9836d 6fcb9e51 fce60412 0e55f6ed e8f9e4a8 8601c84b
+0 10 400004ec 010 00001111 8eca191a d74bf56c 594d141e af93d3c5 21e35832 44f460c1 ccae8bf7 9d1bb474 a855c67a 801577f1 0b9f089b 680d9f41 75f9554b 2375a64b 2f291ff4 958f2f85
+1 01 40000130 001 00000111 1840dcfe 0011 1840dcfe 1100 cc811bfa 0000 cc811bfa 1100 59ddc974 0000 59ddc974 1100 fa85ac51 0001 fa85ac51 1100 00000130 0010 a47dc8cf eea2d89b 6ad6438d e4c99a7b
+0 01 400000a8 010 00001111 c107c909 89c24b02 0c53989b 105bfe33 0b72c456 0b0ee30e 811570d0 1f1e2ae8 4f696367 ee82b44f b66f000a b4c42da1 6c553fc9 46d00227 3b439579 b26942af
+1 01 400001d0 001 00000011 712bcebe 0011 712bcebe 1100 7da0f524 0011 7da0f524 1000 000001d0 0008 531147ad a6af7a14
+1 01 40000124 001 00000001 4f162301 0010 4f162301 1100 00000120 0008 486717db 931bf82b
+0 01 40000315 000 00001100 067c70e4 067c70e4 067c70e4 ad8a5050 ad8a5050 ad8a5050 ad8a5050 d9520623 d9520623 d9520623 d9520623 ef79a7eb ef79a7eb
+1 01 40000618 010 00000011 7e206f1d 1111 71840592 1111 59acf7e1 1010 d279fcf0 1011 00000618 0010 94cc90a6 ec93338b c4a87e3e f6473c66
+0 10 40000663 000 00001111 dc1a8c0b 5f0243ab 5f0243ab 5f0243ab 5f0243ab a19b8808 a19b8808 a19b8808 a19b8808 dafdb1b0 dafdb1b0 dafdb1b0 dafdb1b0 dc1a8c0b dc1a8c0b dc1a8c0b
+0 01 400000f0 001 00000101 b82eb762 b82eb762 31a41db4 31a41db4 65e92c78 65e92c78
+1 01 400000e1 000 00000111 1b028600 0010 1b028600 0100 1b028600 1000 f2a7ae96 0001 f2a7ae96 0010 f2a7ae96 0100 f2a7ae96 0000 00000005 0000 000000e0 0010 fa4b5414 957b34b9 98fa090e 92bf2494
+1 01 400005c3 000 00000100 10000000 1000 019c8c5d 0001 019c8c5d 0000 019c8c5d 0100 019c8c5d 1000 000005c0 0008 9b731cc6 974cb807
+1 01 40000014 010 00001100 6f383c1d 1101 abd98f94 0110 8d63cf1f 1111 874525cc 1011 38a07ba8 1110 b6384847 1111 6c4957d2 1101 e3d984a9 1111 68979a74 1111 dda5bd83 0100 e21f9013 0111 5653ecf4 1000 d73dcd10 1111 00000010 0038 f73a0645 7778f27a 45e29bf2 9f281a5f 738d4159 5b20b745 c9980687 6ccf2ce0 357883b8 6403d85f 9f0db39a f64a7a37 737c2326 807bf5e0
+1 01 40000048 001 00000101 f1336581 0011 f1336581 1100 f70d4467 0010 f70d4467 1000 15745cf4 0001 15745cf4 1100 00000048 0010 2f91f5ee ce815670 d659c133 40e5b024
+1 01 400001c8 001 00001011 f355380b 0011 f355380b 0100 267f6c37 0011 267f6c37 0000 059e0e96 0010 059e0e96 0100 5966ec4e 0001 5966ec4e 1100 86eb9ab6 0001 86eb9ab6 1100 dafd7f4f 0011 dafd7f4f 1100 000001c8 0018 784101b4 680a9b69 f339b7ba 5964a60f 2350e100 c52ab2fb
+0 10 40000400 010 00001111 1e3235ef c645f1b1 e4830c36 5455f063 a26dcac3 98f2eb05 0904f482 4722eb94 8a0a4b7f ca8572cf 45302a98 c167a2bb e68e5d72 7ca2f28c 7cf01984 3b2eddac
+1 01 4000006d 000 00000101 d9675300 0010 d9675300 0000 d9675300 1000 0081d820 0001 0081d820 0000 0081d820 0100 00000068 0010 38ee392e 3338140e 60ba3ddd a02171c8
+1 01 40000024 010 00000011 324d9873 0011 f359890a 0111 3be85a36 0111 105ebd78 1111 00000020 0018 e61d9be8 180caa77 3dfe5462 c74ff37a 5ae68345 d13cb655
+1 01 400003ac 000 00000101 b48b790f 0000 b48b790f 0010 b48b790f 0000 b48b790f 0000 0000aa40 0001 0000aa40 0010 000003a8 0010 52d4f808 c3163966 0d5f76db a43a80fc
+1 01 400003c0 001 00000111 70c419b3 0011 70c419b3 1100 95072b9d 0010 95072b9d 1100 017214c4 0011 017214c4 1000 93dc8f5d 0011 93dc8f5d 1000 000003c0 0010 8ee8833e d9ea90a0 11ad7308 b4c6203b
+0 10 40000562 001 00000001 f5fb6a1f f5fb6a1f
+1 01 40000770 010 00000100 45a8060e 1011 e94fbc56 0111 5503e248 1111 25379cf5 1010 147590bb 1100 00000770 0018 d43e1d03 70fc0353 127c5203 b8b6b6f9 667db056 1f9a39ec
+1 01 4000063a 001 00000000 aed80000 1100 00000638 0008 e2e535a2 f5825c9b
+0 10 40000251 000 00001111 9e72e782 9e72e782 9e72e782 55fcc813 55fcc813 55fcc813 55fcc813 227dc4e9 227dc4e9 227dc4e9 227dc4e9 0f9b8ebe 0f9b8ebe 0f9b8ebe 0f9b8ebe 9e72e782
+0 10 40000368 000 00001111 e1f76d8a e1f76d8a e1f76d8a e1f76d8a 537355ca 537355ca 537355ca 537355ca 2cc22079 2cc22079 2cc22079 2cc22079 a74ea210 a74ea210 a74ea210 a74ea210
+1 01 4000037e 001 00000110 182d0000 1000 7cf9ed5e 0011 7cf9ed5e 0100 354428c6 0011 354428c6 1000 4d96c867 0011 4d96c867 1100 00000378 0018 9377221d 9a931add 7a624e28 291fd7e8 1ac77a99 dcdf5d23
+0 01 4000061c 010 00000001 71840592 5958f7c5
+1 01 400002a4 010 00000001 e90366ec 1011 c4a59029 1101 000002a0 0010 9ac2fd89 5d71ca1e fb1aa6ad bfb590c8
+1 01 40000630 010 00000111 b9edfef2 1110 1668f82a 0100 61c6e61d 1101 7fb555c6 1111 70b15bb4 1111 993d2608 1101 49d3f124 1110 48a6807a 0110 00000630 0020 1a805317 fcafd7b9 be397e64 4cec54a0 f5d383f6 715eac82 d919a2d2 4e5c55be
+0 10 4000037c 000 00001111 187c87f9 187c87f9 187c87f9 187c87f9 a711d1c9 a711d1c9 a711d1c9 a711d1c9 a3cfece1 a3cfece1 a3cfece1 a3cfece1 d7db5c18 d7db5c18 d7db5c18 d7db5c18
+0 01 40000650 001 00001010 0dccfb6f 0dccfb6f d843f552 d843f552 383f90e1 383f90e1 9fe65d03 9fe65d03 dc1a8c0b dc1a8c0b 5f0243ab
+1 01 400002d2 001 00000101 b6820000 1000 0afc8050 0010 0afc8050 0100 df0088fe 0011 df0088fe 0100 00000ddf 0010 000002d0 0010 9186eced 75a1ebbb 31a11126 35ffaab9
+1 01 400005f2 001 00001111 15960000 0100 4266ef62 0001 4266ef62 1100 e5d101dd 0011 e5d101dd 1000 4d1a7dd3 0011 4d1a7dd3 0100 efc6e038 0010 efc6e038 1100 fbe3b880 0001 fbe3b880 1100 3441094c 0001 3441094c 1000 ef3747c1 0011 ef3747c1 0000 0000fe36 0011 000005f0 0028 c5b397cd 9fbce601 422ec27c 9a08fab9 b38388c7 3e3c6efb b468f811 a98ab002 f6afecf5 26c4b5dc
+0 01 40000633 000 00001110 b9edfe11 b16819e0 b16819e0 b16819e0 b16819e0 61c6801d 61c6801d 61c6801d 61c6801d 7fb555c6 7fb555c6 7fb555c6 7fb555c6 70b15bb4 70b15bb4
+1 01 4000060c 010 00001001 eaac3ac7 0101 64855978 0011 ec6fffdf 1011 266ed3a4 0111 aee374fe 1111 5f6e71d2 1110 b8ce62fd 1100 6ce0c261 1111 8f307fca 1111 8fcd771c 1111 00000608 0030 e992a445 3b9bb573 3a9b0906 69090130 9a402cb5 861f6d5d c2aad8b2 183af631 42f573e8 4cda3f97 3fd371bf 01c193ae
+0 01 4000017c 010 00001100 6fbee704 b150e229 9ebe77c2 a9413897 fb93c28e c1cc1904 7c91d4e4 538b6f0c bd25b5ed 355247f6 9b324cec b42d0c88 34e2c44f
+0 01 40000448 001 00001110 2db0aafa 2db0aafa 7fd64c0e 7fd64c0e aa05997e aa05997e 2b968346 2b968346 5f3474f0 5f3474f0 6858ba17 6858ba17 4c77481e 4c77481e c771e19a
+0 01 4000011a 001 00001000 af834a6e e754f561 e754f561 c50d94e1 c50d94e1 4f16231d 4f16231d 9952b876 9952b876
+0 10 4000039c 000 00000001 077db192 077db192
+1 01 40000030 001 00001100 c5f2835b 0001 c5f2835b 1100 1d74f257 0010 1d74f257 1100 59284d08 0011 59284d08 0000 69dd6a0e 0000 69dd6a0e 1000 0d8283d4 0010 0d8283d4 1100 239639e8 0011 239639e8 0100 000016e0 0010 00000030 0020 20114c53 f157299d 07679d8d 154e3da4 3f0263be 607f8b67 685deedb 72932b57
+0 01 4000021f 000 00000110 af06c133 90c66d5f 90c66d5f 90c66d5f 90c66d5f b54467c3 b54467c3
+0 10 40000228 001 00001111 1327b3c2 1327b3c2 80c92b25 80c92b25 9d14924c 9d14924c 948b65cf 948b65cf 0d632ce1 0d632ce1 109202b7 109202b7 90c66d5f 90c66d5f b54467c3 b54467c3
+0 01 40000140 001 00001011 b4ffaf65 b4ffaf65 12b18a82 12b18a82 9eeb730c 9eeb730c 5bce58b4 5bce58b4 22e6b61e 22e6b61e 21495c2d 21495c2d
+1 01 40000288 010 00001111 07a37615 1110 70d6e9b2 1001 8430b45a 1111 ed20a24d 1011 6aaecf98 1110 285298b0 0101 6137e92c 1011 068b58f3 1111 39e134e6 1111 6bee111d 1101 ca29361f 0111 da98319f 1111 ffc9e9b6 1111 0b7e12a0 0111 f6f213cb 1011 3ac14991 1101 00000288 0040 c55bb5b1 1da5dc5b 063322c7 bdd88a82 d8b9085a a507e17d 85d9d700 7a56b7af 48bc701f b05679fe ff85197a 64141a67 bc5b9872 a7b2bc66 a5a5d607 75325373
+1 01 40000516 001 00001001 97100000 1000 cc10b108 0011 cc10b108 0100 e153fa84 0011 e153fa84 1000 b7d53f20 0011 b7d53f20 0100 54eb5e4e 0001 54eb5e4e 1100 00004800 0011 00000510 0020 10d5dcfb 6c3e37bd a8105950 4c869876 6d5bbaf5 2d5a5b4e 32b4f47a a5316a16
+0 10 400006da 001 00000011 cabd5bb6 d3cebc11 d3cebc11 cabd5bb6
+1 01 400000a4 010 00000110 059936b1 1111 e619c09d 1111 8c7b81bf 0111 4bf0da39 0101 6282b8fc 0111 8a460ed8 1111 aa299703 0111 000000a0 0020 8f01ef4a 13974df0 c38af4d3 cdc1b224 96ee8b32 5813d51a 47792de2 98eb036c
+0 01 400004e2 001 00000100 2375a64b 2f291ff4 2f291ff4 958f2f85 958f2f85
+1 01 400007b8 010 00001101 a7b48fa6 1111 558d6f6c 0110 e95958f5 1111 9bcbd9a3 0110 f8eee882 1011 60155415 0101 6a1adb1c 0111 d214667d 0111 04f56176 0111 e1096d08 1011 b0d4edb9 1101 82bd9441 1111 23555353 0011 ae090351 1101 000007b8 0038 002af450 ca62b096 edbd6f9e a5e0a051 57d28c35 c5c68e71 82096c2a 61ba7ef6 ae3c457d 12ba7f24 643904e3 f226f36e d269072f 653e57b9
+0 01 4000044a 001 00001001 2db0aafa 7fd64c0e 7fd64c0e aa05997e aa05997e 2b968346 2b968346 5f3474f0 5f3474f0 6858ba17
+1 01 400000b0 010 00001111 9005c783 1101 a0e8f4f0 1111 af994b9e 0101 0a6379db 1010 f9ef01ed 1101 d293704e 1101 90e31c29 1111 ad70bc26 0101 537a377e 1111 51cb5350 0111 81b11ace 1011 d4ffb14b 1111 ab5bee0d 1101 28356362 1111 f3fd9e61 1111 88fab296 0101 000000b0 0040 bd5a4b26 09b9f691 8e397b1c 63b1063b 2888db56 628809dd 2c528439 6ebcc0ae 8ad4fc27 66554ea8 23b4b8c6 1c6b5d26 509095ea 9b26a709 faaede15 e6fd9acd
+1 01 400001f0 001 00000101 8aa9f0a0 0011 8aa9f0a0 0100 a3a72bac 0011 a3a72bac 1100 82fb8880 0001 82fb8880 1100 000001f0 0010 02789f8e d27a9a8e 2d6ff3aa 1262a273
+0 10 40000574 000 00000011 ea242dc8 ea242dc8 ea242dc8 ea242dc8
+0 01 400000d4 001 00001010 b4cb5350 b4cb5350 81551ace 81551ace d4ffb14b d4ffb14b ab5b860d ab5b860d 28356362 28356362 f3fd9e61
+0 01 40000535 000 00001111 6e728e9c 6e728e9c 6e728e9c c9e4f487 c9e4f487 c9e4f487 c9e4f487 8626dd3e 8626dd3e 8626dd3e 8626dd3e b55bb108 b55bb108 b55bb108 b55bb108 75581db6
+0 01 400003e0 001 00001111 caf58571 caf58571 7de5be6f 7de5be6f 0f7364ed 0f7364ed 8b6ae1cf 8b6ae1cf 769e9e11 769e9e11 6f57ddaf 6f57ddaf 1d15f642 1d15f642 0eb277e6 0eb277e6
+0 01 40000110 010 00000111 b39d1033 6ff364cd af834a6e e754f561 c50d94e1 4f16231d 9952b876 ad06e660
+0 10 400007c3 000 00000001 e95958f5 e95958f5
+1 01 400005e7 000 00000000 e9000000 1000 000005e0 0008 a8ce080d 22a49f19
+1 01 4000000c 010 00000001 63f266dc 1001 c34433a5 1111 00000008 0010 8c546af7 9d24fdf9 b04d81c5 d0ff9c56
+0 10 40000099 000 00000011 b7a23973 b7a23973 b7a23973 b7a23973
+1 01 400003e0 010 00001010 2123e656 1111 7d174452 1011 0031ef28 1111 56d6b113 1111 6e2d731b 0111 966890b9 0111 4f8498b6 1011 1f4adcdc 1011 501cba39 1011 eaad134d 0101 702bcedf 0100 000003e0 0030 0e194400 7ac308d5 dad49bd0 7f9137ab 63b2cd75 04a66552 e05a3105 dbea1de9 5dbec1c4 9fc6af60 9cd34333 4c3fa762
+0 10 40000780 010 00001111 14751edd 4f376992 8cfcf7ce 19641a93 289adafc c7bdf59a 501a0a54 40a5c49b 291f1771 48244842 4e6dc7c7 f1ab0331 590bb298 7d2a88db a7b48fa6 e38d6f6b
+0 10 40000742 001 00000001 8b1d4509 8b1d4509
+1 01 400001a1 000 00000100 55f2c200 0010 55f2c200 0000 55f2c200 1000 00005a8f 0001 00005a8f 0010 000001a0 0008 941734f1 51aa0f68
+0 10 40000188 010 00000111 a9413897 fb93c28e c1cc1904 7c91d4e4 538b6f0c bd25b5ed b150e229 9ebe77c2
+1 01 40000000 010 00000001 061b0dfe 1111 5ee3dc27 1111 00000000 0008 f9adb077 49118f21
+1 01 40000100 001 00000010 a7b75f48 0011 a7b75f48 1100 00005fbd 0011 00000100 0008 e0925c17 2c9ebf9c
+0 10 4000028a 001 00000011 07a37607 70d3ccb2 70d3ccb2 07a37607
+1 01 40000195 000 00001110 796be600 0010 796be600 0100 796be600 1000 95a7611d 0001 95a7611d 0010 95a7611d 0100 95a7611d 1000 013c6f15 0000 013c6f15 0010 013c6f15 0000 013c6f15 1000 4801b189 0001 4801b189 0010 4801b189 0000 4801b189 1000 00000190 0018 0b761c35 bd44a8e5 a8fbcc4a 1597a807 e2e7bf63 f453b4e9
+1 01 400004d4 010 00000111 d3921884 0101 ef90df9d 0011 488f364c 1101 abb22151 1001 f4dc12d2 1111 c248a7cf 1111 a50870e7 1101 d7894d97 0011 000004d0 0028 c3a57f10 6efd28e8 c1431493 e0229e12 d58ccb99 d7f27834 c0f5f23d ba82bd5d 7dcbef36 71d58fce
+0 10 400002bc 010 00000011 0c7e12a0 ad29361f da98319f ffc9e9b6
+0 01 400006e4 010 00000101 801f1733 1f2a82af 47c00ce0 1cb0f29b d0a275b8 3ed204fb
+1 01 400004d6 000 00001100 badd0000 0100 badd0000 1000 a947efb8 0001 a947efb8 0000 a947efb8 0100 a947efb8 0000 ccebcdca 0001 ccebcdca 0010 ccebcdca 0000 ccebcdca 0000 0025920e 0001 0025920e 0010 0025920e 0000 000004d0 0018 2bd355de 2e3ae84e 914d7639 92194622 f3c3a78a 06a73a41
+1 01 4000043f 000 00001000 a7000000 1000 e31932a7 0000 e31932a7 0010 e31932a7 0000 e31932a7 0000 853851d5 0001 853851d5 0010 853851d5 0100 853851d5 0000 00000438 0010 4163df06 704ee02a 1a1c3e6c 6bd1c14d
+1 01 4000031e 001 00000001 52c50000 1100 0000ac98 0011 00000318 0010 1af952b9 c8b5afd5 bfbc2447 bb28990d
+0 10 400000a8 001 00000001 e619c09d e619c09d
+1 01 400002d4 010 00001100 a1f525cf 1111 ac2709eb 1101 91c22eba 1111 0150034a 1111 5fae9ed5 1101 e75f5fe3 1110 efcb6e68 1010 ac7fb84b 1111 1f3f88ea 1111 9a9df41a 0101 e306f97f 1111 58d8921e 0100 def7520a 1111 000002d0 0038 7239138c 105bf571 904d51cf bdf2d4de 543b32bb f59f3d01 048c03d2 e69e8f6d c5dbfd84 bcbacf0d 30033a7b db36d440 3d3118c9 3f0de4d6
+1 01 400005ec 010 00001011 59c8ab23 1101 a2902f9e 1111 81a44f0a 1011 a1c50bbf 1111 ecfddfc3 0100 0f9c4d31 1111 a4d52c70 1100 698ba330 1111 3f8b67bb 1111 1a42a9fa 1111 2f5e1e71 1110 bee221a7 0111 000005e8 0038 c3172ca8 8fc1b050 413f610e 1fa028ef 3f6d9b9d 45e90d60 629d6923 842d97c0 0795466f beab8114 7cd91351 cb378c6c bc897d73 fd9a2017
+1 01 400007ac 010 00001111 7c9751b8 1101 c91744de 1001 e6778ffe 0101 8879c7bf 1110 82487cdc 1111 5411e851 1111 88bbffbd 1110 f9f510fc 1001 9ab29aaf 1101 af81ba12 0001 424fb47c 0010 7e833422 1111 e507196a 1010 f84a7335 1111 c8a1b4b6 1001 3add7e6f 0101 000007a8 0048 94f6db61 23f0499b 80886376 c11d8f63 e508d7a7 91c6bd70 52d3337f a46f5d15 7b9890ea b916041f f607894d 58fc0fcc bbfd85c6 5188881d 149c577b 7339582c 15cbf0d7 06302054
+1 01 400006b7 000 00000110 3e000000 1000 b2c2bab2 0000 b2c2bab2 0010 b2c2bab2 0100 b2c2bab2 0000 000007f4 0001 000007f4 0010 000006b0 0010 cbf9083a c386e4ca 17310b55 201119aa
+0 10 400005a3 000 00000111 845f05df c50ee899 c50ee899 c50ee899 c50ee899 845f05df 845f05df 845f05df
+0 10 40000720 010 00001111 1a68f5c7 0fe17328 b48ab6e3 2f39d867 9235b569 18f48e00 05a61361 94935b3e 968b2a26 2719b079 bb0a0553 d8245cc3 3aa6ef4c 1d16ebf6 a3f7d486 838d28ae
+1 01 400001f9 000 00001110 d0053f00 0010 d0053f00 0100 d0053f00 1000 bfc8bd28 0001 bfc8bd28 0010 bfc8bd28 0000 bfc8bd28 1000 35760951 0001 35760951 0010 35760951 0100 35760951 1000 53a9ede7 0001 53a9ede7 0000 53a9ede7 0000 53a9ede7 1000 000001f8 0010 17c4b771 7c2ce0a7 4cd11521 bc72f7b5
+1 01 4000017d 000 00000111 a0cf1000 0010 a0cf1000 0100 a0cf1000 1000 00fd26c0 0001 00fd26c0 0000 00fd26c0 0100 00fd26c0 1000 0000000e 0000 00000178 0010 6cc77b0b 283e4605 256e313c 76b9cc49
+0 01 40000029 000 00000000 b659890a
+0 10 40000572 001 00001111 cccc5c5c ea242dc8 ea242dc8 f64415d6 f64415d6 ad61d487 ad61d487 f5fb6a1f f5fb6a1f bd6f4ffb bd6f4ffb 51793ecf 51793ecf f9c515bc f9c515bc cccc5c5c
+1 01 400005c7 000 00001111 71000000 0000 c8d83803 0001 c8d83803 0010 c8d83803 0100 c8d83803 0000 70b277d2 0001 70b277d2 0010 70b277d2 0100 70b277d2 1000 484f79cb 0001 484f79cb 0010 484f79cb 0100 484f79cb 0000 004967d0 0001 004967d0 0010 004967d0 0100 000005c0 0018 9b731cc6 974cb807 c9aa47a4 6d38d5ba f4d04cae 55aaae80
+1 01 40000730 010 00001001 97b228c7 1111 2c505594 1110 40de0efa 1111 b864ccf8 1111 7d4b9870 1000 fa0ae8ea 1101 ef4809c3 0111 5a774373 1111 765e862c 0011 95957016 1111 00000730 0028 16330090 05cc32c7 332c22e5 3f1fe37f b060753e 9466cd21 dfa6ac10 f2abb708 17a08fe0 f1a8302a
+0 01 400006e0 001 00001000 5fa8f299 5fa8f299 801f1733 801f1733 1f2a82af 1f2a82af 47c00ce0 47c00ce0 1cb0f29b
+0 01 40000782 000 00001110 14751edd 14751edd 4f376992 4f376992 4f376992 4f376992 8cfcf7ce 8cfcf7ce 8cfcf7ce 8cfcf7ce 19641a93 19641a93 19641a93 19641a93 289adafc
+0 10 4000066a 001 00000011 a19b8808 dafdb1b0 dafdb1b0 a19b8808
+1 01 4000055c 010 00001101 f4db81f4 1111 4a77ef5d 1100 0901646a 1111 d982f6d8 1101 0f7a690b 0011 8f3be6c6 1111 61feb829 1111 640dd588 0101 30f79d70 1111 ea01842f 0111 e726682a 1101 7fcf876b 1100 f5b99475 1111 fa7dec9c 1111 00000558 0040 4c322ee0 ebe1f353 13570a8c 94aedc66 a8600fe4 157839af e8a51920 5067e28c 909bf8a5 18dc9654 402aaf09 4aee0547 c5e94604 2d6112ef bb0c86b5 d4ee35e8
+1 01 40000354 010 00001111 18e1800d 0110 69af7ab2 1111 44972db0 0011 05873aa7 1100 8d7e094c 1110 9c923fde 1111 9cbfcc42 1100 809fc63f 1101 aa20af4e 1000 6ca1fa56 1101 c847a250 1111 706d4b84 1111 f8e809bd 0111 f5890140 1011 f6463a8f 1101 c889e17c 1001 00000350 0048 6e9470f5 265b543a 8c453659 b0882d16 0e91fb1a 812212a3 6eb22cb5 f4bbdf8f 5d104fb4 adf6d79b d4901f13 b690f1c0 b0f4325f 4c0ffdc5 01452e40 0d7464ce 260ede53 21776559
+0 01 400003bc 010 00000111 579bcb7b 70c419b3 95072bcd 011c14c4 93ed8f5d d2f8ea35 1c66d6bf 14e82998
+0 01 40000640 000 00000111 70b15bb4 70b15bb4 70b15bb4 70b15bb4 993d7f08 993d7f08 993d7f08 993d7f08
+1 01 40000016 000 00000110 681f0000 0100 681f0000 1000 eb29d712 0000 eb29d712 0010 eb29d712 0000 eb29d712 1000 000000db 0001 00000010 0010 0b9ab792 ac7688ed 2be7908b 26e3d255
+1 01 40000724 010 00001101 9f46cb91 1000 10a29eff 1011 500fef1f 0111 a8f164de 0111 52cfa2a1 1111 d64571d5 1110 bc6195da 1011 29e2f8ee 1111 0b95cd2e 1111 93ad1649 0011 74ecab3c 1000 ce2f15f7 1010 c538459a 0111 e4ada17f 1011 00000720 0040 feb8c6d8 98e497c4 dd76983e 4f739ffe 6592d34b 3c1813a2 6fb23ddc 936370c7 6098dfc3 0b9cc32a a0af3789 7d835afa 6ca7d7cc 27ae1e0d 56e2d351 b7815e00
+1 01 4000001c 000 00000001 0000a41b 0001 0000a41b 0010 00000018 0008 691cb2c8 36a3d3f4
+0 10 40000094 010 00001111 7d5b6c4c b7a23973 9faa4c56 53ecc4bc 059936b1 e619c09d 897b81bf 90059883 a0e8f4f0 8a990e9e 0a297903 e43f4d29 f0fae9b7 fa7da72b 8d4322fe bf8f72d5
+0 01 400003f2 000 00000011 762d731b 762d731b 6f6890b9 6f6890b9
+0 01 40000794 010 00000010 c7bdf59a 501a0a54 40a5c49b
+1 01 4000052e 001 00001111 4f410000 0100 22eb04fa 0010 22eb04fa 1100 3511c4da 0011 3511c4da 1100 901d7e32 0010 901d7e32 1100 030a22d6 0011 030a22d6 1100 5fffba86 0011 5fffba86 1100 fbfd4519 0010 fbfd4519 1000 1b5c7319 0010 1b5c7319 1100 0000e6c3 0011 00000528 0028 03214a98 e491bbc4 4b9acaa5 5dae8925 5eb6ee00 b77dfbfe 7d7d38d6 04b224f9 9c5aba45 5bcf8f3a
+0 10 40000338 010 00000111 74b52606 4f4c3580 ef79ac98 6b78fc38 0652fad0 1d11ea86 c86da166 e0ad5d9b
+1 01 40000738 010 00000000 0b229696 1101 00000738 0008 d90bfbc0 91d0cb82
+1 01 40000391 000 00000010 6e6e7400 0010 6e6e7400 0100 6e6e7400 0000 00000390 0008 f0bca832 4d838490
+0 10 40000606 001 00000111 a4d5ad80 698ba330 698ba330 3f8b67bb 3f8b67bb 0f9c4d31 0f9c4d31 a4d5ad80
+0 10 4000007c 010 00000001 bf072143 dcf5f4a7
+1 01 40000552 000 00001001 50e40000 0000 50e40000 1000 9e0f38ee 0000 9e0f38ee 0010 9e0f38ee 0000 9e0f38ee 1000 9c6e7b45 0001 9c6e7b45 0000 9c6e7b45 0100 9c6e7b45 1000 00000550 0010 af433f00 9531a39c b45bddd2 8f43b4c0
+0 10 4000021a 001 00001111 444e3422 af06c133 af06c133 35760951 35760951 5309f3e7 5309f3e7 cd893e49 cd893e49 b80cd5cd b80cd5cd 09674dbb 09674dbb 21c8946a 21c8946a 444e3422
+0 10 40000120 010 00000001 c50d94e1 4f16231d
+1 01 4000031c 010 00001011 40660090 1111 a502d5f5 1001 fb2b56f4 0110 b16b8de9 1101 90ae9980 1101 2d144025 1001 c7023f52 0101 931cec21 0011 c26ab531 1111 071bcf04 1111 d09637b6 1011 ba553ce3 1010 00000318 0038 0e207deb 9e47f152 3fd582b6 c9055023 a34a043c 9cd151d2 bce6112b f677faec 221c1943 d3e25646 3a5cf843 6df707e4 d10ea61b c2178456
+0 10 400002f4 001 00001111 1f3f88ea 1f3f88ea ec9d0e1a ec9d0e1a e306f97f e306f97f 0150034a 0150034a 5fae99d5 5fae99d5 e75f5fbe e75f5fbe ef446e69 ef446e69 ac7fb84b ac7fb84b
+0 10 400002c4 001 00000001 3ac16991 3ac16991
+1 01 40000422 001 00000100 baf00000 1100 2f389928 0001 2f389928 1100 7ea9c260 0001 7ea9c260 1100 00000420 0010 28d6f4b2 37042726 2c720d33 e30d2990
+1 01 400004c0 010 00000101 42409b5e 1110 f8573ffa 1111 35e4e688 0011 7bdfb951 1111 7b8206ce 1111 72d107aa 1100 000004c0 0018 933a75ef 56904e3b 34af50e1 bf88affc fa75461d 4ca9c059
+1 01 400003ea 000 00001011 a9950000 0100 a9950000 0000 f261586d 0001 f261586d 0010 f261586d 0100 f261586d 1000 f591086c 0001 f591086c 0010 f591086c 0100 f591086c 1000 0000d625 0000 0000d625 0000 000003e8 0010 29c747e0 d8a46202 54e449fb c241cdfe
+1 01 4000009e 000 00001010 ec5e0000 0000 ec5e0000 1000 f045c00a 0001 f045c00a 0010 f045c00a 0000 f045c00a 1000 0ba37104 0000 0ba37104 0010 0ba37104 0000 0ba37104 0000 00000029 0001 00000098 0018 64b865d8 a7483115 da1ca1d5 abdbd06f 85bf65c8 981cc922
+0 01 40000214 010 00000100 21c8946a 444e3422 af06c133 90c66d5f b54467c3
+0 01 40000708 001 00000110 bb0a0553 bb0a0553 d8245cc3 d8245cc3 3aa6ef4c 3aa6ef4c 1d16ebf6
+0 01 4000007e 001 00001010 bf072143 e43f4d29 e43f4d29 f0fae9b7 f0fae9b7 fa7da72b fa7da72b 8d4322fe 8d4322fe bf8f72d5 bf8f72d5
+0 01 40000580 001 00000110 c801842f c801842f e726a52a e726a52a 7fcf6f66 7fcf6f66 f5b99475
+0 01 40000512 001 00000000 036444f6
+0 10 40000520 010 00000001 01d53f20 54eb0c4e
+1 01 40000150 010 00001101 74059143 1111 9bc24ef7 1100 fbbcdca7 0110 ac2d0247 1110 d64c3587 0101 1acd5b84 1101 765f5c82 0101 e91c819b 1111 1edecf5b 1111 df2986f7 1111 26143bc4 1101 b432e6b4 1101 6382ca0b 0100 6a86e7d0 1111 00000150 0038 6f0f8ee4 49f18a15 c79642fb 387ef824 de4f1c87 8158ebe6 81f7c4e1 456f8bc0 cd02c806 cd54c6bd 670fc604 636d6d27 ee61d414 b8b71d17
+0 01 400002d6 001 00001001 a1f525cf ac2788eb ac2788eb 91c22eba 91c22eba 0150034a 0150034a 5fae99d5 5fae99d5 e75f5fbe
+1 01 40000304 010 00001001 92baf5ed 1101 7ac9e5a1 0111 c352328f 1111 5f6f726c 1111 1fbd8eef 1111 6482e5a2 1110 8bc53bcb 1101 3f14c2f3 1011 5fe0175d 0111 194671e1 0010 00000300 0030 d90d703c 500cbfde 1d7f394e fbf33041 d413bb4c 0d2924e8 d79997e8 163296cf c0d965b4 aa9d6a29 4a37a0ae 26972287
+0 10 40000422 000 00000001 baf04b7f baf04b7f
+0 10 400000fe 001 00001111 fc885cb0 ab5b860d ab5b860d 28356362 28356362 f3fd9e61 f3fd9e61 81fadb96 81fadb96 b82eb762 b82eb762 31a41db4 31a41db4 65e92c78 65e92c78 fc885cb0
+0 10 4000008a 001 00000011 fa7da72b 8d4322fe 8d4322fe fa7da72b
+1 01 40000066 000 00000111 25d00000 0100 25d00000 1000 20cefad8 0001 20cefad8 0010 20cefad8 0100 20cefad8 1000 00003db3 0001 00003db3 0010 00000060 0010 59e1b991 17f7e452 15678cc7 0f4731b6
+1 01 40000502 000 00000010 06870000 0000 06870000 0000 000000ba 0001 00000500 0008 02405817 ec647750
+0 01 400004e4 010 00000111 f4dc12d2 c248a7cf a50819e7 d74b4d97 594d141e af93d3c5 21e35832 5e28eda5
+1 01 40000654 001 00000010 5e73ac51 0011 5e73ac51 1000 00009082 0011 00000650 0010 97f03bde da0df8a0 74897c3f cba287dc
+0 01 40000284 010 00000101 54de362b 07a37607 70d3ccb2 8430b45a edeea24d 6aaecfa6
+1 01 400000b0 010 00000000 2985aeae 1111 000000b0 0008 5d81acb4 1892e899
+0 01 400003a4 001 00001010 da47b242 da47b242 ab1df098 ab1df098 ce827902 ce827902 6917aa40 6917aa40 b1d8f055 b1d8f055 ebf8fc6a
+1 01 400000b4 001 00001010 801de939 0011 801de939 1100 a6228f17 0001 a6228f17 1100 06269903 0011 06269903 0100 ca367bc5 0011 ca367bc5 1100 e172f611 0011 e172f611 1100 0000e16e 0010 000000b0 0020 0d9e86d1 be53ca11 5cbc7d79 2fe0cdca f16022cf 23fffb6f 2d6bde30 a6f32e04
+1 01 4000002c 000 00000010 00c27d12 0001 00c27d12 0000 00c27d12 0100 00000028 0008 a7564ac4 62d54743
+1 01 40000380 001 00000100 26eeef81 0011 26eeef81 1100 0eee70a0 0011 0eee70a0 1100 00005630 0001 00000380 0010 eb3a0c54 36a7eab7 210f0542 42e37d79
+1 01 400002bc 001 00000010 44af67ac 0011 44af67ac 0100 0000c1a9 0011 000002b8 0010 21d25b37 b7529cdd 4cb1e9bc dc05dfff
+1 01 40000364 000 00000000 00000001 0000 00000360 0008 0e91fb1a 812212a3
+0 01 400001ff 000 00001101 bfe0bd28 35760951 35760951 35760951 35760951 5309f3e7 5309f3e7 5309f3e7 5309f3e7 cd893e49 cd893e49 cd893e49 cd893e49 b80cd5cd
+1 01 400000f4 010 00000010 b6d22e56 1100 40e0852a 1110 d44897e3 1110 000000f0 0010 7f0b10af 26361c90 8ffd92be 0c0b450f
+0 10 400001bc 010 00001111 d54fc582 0082e2c0 6a86e7d0 a9413897 fb93c28e c1cc1904 796be6e4 95a7611d 01256fed 4852b189 9b325a8f b42d0c88 34e2c44f 7b194b95 64269172 0d283998
+0 10 4000064a 001 00000111 49d3f178 dca68042 dca68042 70b15bb4 70b15bb4 993d7f08 993d7f08 49d3f178
+0 10 40000414 001 00001111 98f2eb05 98f2eb05 0904f482 0904f482 4722eb94 4722eb94 5032ba39 5032ba39 c6adf14d c6adf14d e42b0c36 e42b0c36 5455f063 5455f063 a26dcac3 a26dcac3
+1 01 4000020c 001 00001011 60e2e0d3 0001 60e2e0d3 1100 e6a51919 0011 e6a51919 1100 0b3e15a9 0011 0b3e15a9 1000 d11c4d81 0010 d11c4d81 1100 b058a719 0001 b058a719 1100 b8b76a22 0011 b8b76a22 1100 00000208 0020 17262ba5 5e45ac2e 50e6aa52 02f8e031 0d2ddd69 d05e231b 43707a9e f8625e37
+0 01 40000534 010 00001100 3511c4da 901d7e87 030a22d6 5fffba86 fb5845b6 1b5c7386 807fe6c3 5075a1b3 9e4038f7 9c6eb745 f4db81f4 4a776a1f 0901646a
+1 01 400004dc 010 00001010 ab43f1ee 1101 d3823912 1111 52302a6b 1101 5dcf0426 1111 aa79e619 1111 42db5aaa 0100 8fea5e1e 0101 ec9192f9 1001 791225c0 1011 84d879ec 1010 1202b688 1101 000004d8 0030 1a4e9921 628525fa e54ebfc6 ee8f9745 680020dd 77059916 aaa1e99c 0f77373b 851ac1cf 65fe8d6e bfda5cf2 5e8c624b
+1 01 400002f8 010 00000110 e4fdd33a 0001 ca597bdb 1111 cb142cd2 1111 026ffc68 1111 3200119b 1111 a680d4f2 1111 13333bb1 1111 000002f8 0020 01c86fad ea1e544f c6634bfa 06728f0d 11f55b16 e40a7d76 5af8cf3b c46a2bfd
+0 10 400004b8 010 00000011 0b821d27 b4e133bb 582f2016 4078221e
+1 01 40000494 010 00000101 4e75ea43 1101 c57f7e1b 0101 4c46e0da 1111 fdaa9cfc 1100 b801eff3 0111 8c5bd070 1010 00000490 0020 ca726670 941d3901 9eb0d241 5f0e184f 8e72410d c252e781 4ecb6379 5f186a9c
+0 10 400000f3 000 00000011 b82eb762 b82eb762 b82eb762 b82eb762
+0 01 40000386 001 00000110 0eee70a0 f5960130 f5960130 f6460b8f f6460b8f c86e747c c86e747c
+1 01 400002a3 000 00000011 49000000 1000 00db9098 0000 00db9098 0010 00db9098 0100 000002a0 0008 4b904b95 9c9ff901
+1 01 4000059c 010 00001111 a121aea5 1111 334a0bb3 1111 a590123c 0111 cec6401a 1101 e61037ed 1111 19fb3f0f 0011 60b2f244 0011 cb632b72 1011 133a3987 1001 bbe9db98 0110 9d1a4453 1011 e7d6aa4b 1111 8f648d2a 1111 424a58cf 1111 47abf721 1001 23895530 1010 00000598 0048 b2344c2c 7633ba95 3683b712 b0e379b4 765a12a2 1613741d b32247a0 cbced711 5e740cb6 dd599789 e0a42904 b1cb4918 745df2a1 cd5a52da 42be2447 83546abb ed80a7be 828e8089
+0 10 40000529 000 00000001 b38e4800 b38e4800
+0 10 400005a2 000 00000011 334a0bb3 334a0bb3 334a0bb3 334a0bb3
+1 01 40000668 001 00000100 e35d06c0 0011 e35d06c0 1000 d2c22395 0011 d2c22395 1000 00002d13 0011 00000668 0010 2f2f28f6 6b7a2481 3de092f8 ab7f47a7
+1 01 40000516 001 00001101 f0730000 0000 685c53c8 0001 685c53c8 1000 268c17a2 0011 268c17a2 1100 08308156 0011 08308156 0000 0a7d0c04 0011 0a7d0c04 1100 112ecb96 0011 112ecb96 1100 edc7bf70 0001 edc7bf70 0100 00009e6f 0011 00000510 0028 10d5dcfb 6c3e37bd 22302bf0 cb75e5cd 02056835 941801ac c723a273 4d8b6a1f f91d94c9 e6d06f9e
+0 01 400004bc 000 00001100 b4e133bb b4e133bb b4e133bb b4e133bb 42409bc1 42409bc1 42409bc1 42409bc1 f8573ffa f8573ffa f8573ffa f8573ffa 9d1be688
+1 01 40000592 001 00001111 08c50000 1100 cdc1f5b5 0011 cdc1f5b5 1100 27c09efa 0000 27c09efa 0000 6d2e458e 0010 6d2e458e 1100 c3a4e445 0010 c3a4e445 1000 6b96f11b 0011 6b96f11b 1100 896fc012 0010 896fc012 1100 b351c39b 0011 b351c39b 1000 0000d013 0000 00000590 0028 6e4f808a 9d2beff3 aecde42b 47864075 307ebb89 dad48446 fa29e1e4 cf677a7a b32247a0 cbced711
+0 01 400002cc 001 00000001 fb88f026 fb88f026
+0 10 400005ff 000 00000001 b1fd7dd3 b1fd7dd3
+1 01 4000024a 001 00000010 73c00000 1100 9b5c02c4 0011 9b5c02c4 1100 00000248 0008 c77bbf9c 62feb7bf
+1 01 400002c8 010 00001000 f64bf895 0110 513861e1 1101 9e419cac 1111 3dc0d2a3 1111 eb802c72 1111 9f006446 0111 f333d0eb 0011 bf5cfc94 0011 564a3907 1111 000002c8 0028 c73d8e8d 633fb408 ff1d5072 0022943d af1b4440 ed8b572b 6c1710aa 330a3bf8 e1eaf8ab d6884e14
+1 01 400003d3 000 00001101 9c000000 1000 ee8d84cb 0001 ee8d84cb 0010 ee8d84cb 0100 ee8d84cb 1000 4156ebfc 0001 4156ebfc 0000 4156ebfc 0100 4156ebfc 1000 f4e6417e 0001 f4e6417e 0010 f4e6417e 0100 f4e6417e 1000 000000c4 0000 000003d0 0018 2fb4e75e 19ccf6c2 4dc4668b 24cbc291 0e194400 7ac308d5
+1 01 400002ac 010 00001100 1ec45642 0101 883e304a 1101 17dceb4c 1111 c6d2bb7a 1010 a7bc9d4e 0101 4d07497e 1100 5683b657 1011 9a32ebc5 1100 c145bb28 1010 4a2d5412 1111 9e78f260 1001 17783597 1010 ac88fe83 1110 000002a8 0038 88ccfafe 22eaafc1 a78d9724 99d0c017 33a24701 fa1e3432 61585474 bfd401dd 2831eecd 43b1fa6c 7a9ed781 87ad1911 49ddd7f8 dbd0ea0e
+0 10 40000088 000 00000001 fa7da72b fa7da72b
+0 01 40000326 001 00001000 6be0175d b16b71e9 b16b71e9 90aeea80 90aeea80 2d6da125 2d6da125 e0025d52 e0025d52
+1 01 4000043c 010 00001101 93334e15 1000 e3599c1c 0110 5c55319e 0111 b4d944f0 1000 5bae79dd 0011 8b8ecfd6 1101 57d26257 1111 86d73fa6 1011 a1d35adc 1111 15bf4ebb 1100 dc318631 1011 f4f19e19 0111 1acb7f88 1111 739d87a2 1111 00000438 0040 02703628 9cbcaf22 b361a3bb b6bfc8cb 971bc74d 88e8353c e5102c2d 59e2e809 032b9121 f952292c fd5a197b 15950f26 745b0975 f8d8400d 047b66ea 5285edae
+1 01 400003ca 001 00000100 e6fc0000 1100 f9e60483 0000 f9e60483 0100 7d3f064b 0001 7d3f064b 1000 000003c8 0010 c4f1b045 c5f5c65b 497a87e3 3592071b
+0 10 40000148 001 00000111 9eeb730c 9eeb730c 5bce58b4 5bce58b4 b4ffaf65 b4ffaf65 12b18a82 12b18a82
+0 10 4000079d 000 00001111 40a5c49b 40a5c49b 40a5c49b 289adafc 289adafc 289adafc 289adafc c7bdf59a c7bdf59a c7bdf59a c7bdf59a 501a0a54 501a0a54 501a0a54 501a0a54 40a5c49b
+1 01 40000250 010 00001110 72f687cf 1111 d3cc99df 1111 a8cf713a 0111 2616f831 1101 ea2ad616 1111 2620a9c8 1011 7f6e96f6 1101 3f0afed5 0111 4c827bcd 1011 3158a2bb 1010 c9fd874a 0111 d00fb2ba 0111 5c9ebe16 1000 1932f8fd 1010 720f2079 0111 00000250 0040 56d29316 f866ee8e 00d1357d 3b75efcf fe937874 1e4c30dc e9fab129 2631e09a 3451f294 f0fad1a4 83429a9f 3c613a45 35676b27 bfbbe382 0b262f0f 87619ba3
+0 01 40000569 000 00001100 d9823ed8 d9823ed8 d9823ed8 f9c5690b f9c5690b f9c5690b f9c5690b 8f3be6c6 8f3be6c6 8f3be6c6 8f3be6c6 61feb829 61feb829
+1 01 400005a4 010 00000110 1c3f5300 1011 a6a2b75a 1111 f53fb104 1111 70863e2a 0101 9f8dc2e4 1110 af478b74 1101 62014f5b 1111 000005a0 0020 2ac0e13d 2bbdb764 7210a96f 03e83538 da709c83 a1116c33 07a6d341 963f0ad7
+0 10 400002e3 000 00000111 0150d0eb 5faefc94 5faefc94 5faefc94 5faefc94 0150d0eb 0150d0eb 0150d0eb
+1 01 400000ad 000 00000111 d3ed3100 0000 d3ed3100 0100 d3ed3100 1000 020f9fce 0001 020f9fce 0010 020f9fce 0000 020f9fce 1000 00000099 0001 000000a8 0010 017c5861 a664ba3c 4d32fdff 90fa93d5
+0 10 4000000c 001 00000011 63f641dc 63f641dc 76324739 76324739
+1 01 400006d7 000 00000011 f9000000 1000 009607d2 0000 009607d2 0000 009607d2 0100 000006d0 0010 305cd5e8 f24a3b76 5d66c43a 746fcc61
+1 01 400003af 000 00001100 83000000 1000 3b44d9c4 0000 3b44d9c4 0010 3b44d9c4 0100 3b44d9c4 1000 887fbad9 0001 887fbad9 0010 887fbad9 0100 887fbad9 1000 b908d10a 0001 b908d10a 0010 b908d10a 0100 b908d10a 1000 000003a8 0018 aa8b688e 018da3c9 8b65b42a 37531921 5d3f6a3f 5b6b389c
+0 01 40000763 000 00001000 2d975eac b3747715 b3747715 b3747715 b3747715 4bded51b 4bded51b 4bded51b 4bded51b
+0 01 40000148 000 00000010 9eeb730c 9eeb730c 9eeb730c
+1 01 400007a4 010 00001100 71ed0a46 1111 2f0adaef 1011 5a00ba02 1111 2eeb6ba9 0100 0199aade 1110 2e11f85d 1101 847305eb 1010 af0c8d15 1111 ce65f37a 1110 2993a0b2 1011 fdee39ee 1110 9d6ca962 0111 8f3402d9 1101 000007a0 0038 b3997af7 51aa348e be868e92 a3266fe4 7613f9ab 240eafc4 b915f81b d99651d1 f8b59e6e c10aaa6f 8b97d9a9 66d7f028 caf3eede 27917b05
+0 01 4000074e 001 00001110 74774373 ce41152c ce41152c 9538459a 9538459a e4a7a17f e4a7a17f 43ff1f54 43ff1f54 2d975eac 2d975eac b3747715 b3747715 4bded51b 4bded51b
+0 10 400003d0 010 00001111 7df8ea4b ee8d84cb 415629fc f4e6417e 2123e656 7de54452 0095ef28 f261586d f591086c 6f6890b9 4f1598b6 1fb2dcdc 70c419b3 95072bcd e6fc14c4 93e68f5d
+0 01 400002a7 000 00001111 06db90f3 39e134e6 39e134e6 39e134e6 39e134e6 6bc4f042 6bc4f042 6bc4f042 6bc4f042 883e364a 883e364a 883e364a 883e364a 17dceb4c 17dceb4c 17dceb4c
+1 01 4000017c 000 00001001 96255f99 0001 96255f99 0010 96255f99 0100 96255f99 1000 1d6cd0a2 0001 1d6cd0a2 0010 1d6cd0a2 0000 1d6cd0a2 1000 0000b5c8 0001 0000b5c8 0010 00000178 0010 c2d44f1c d5e6858c 0caa0167 d30a48bf
+0 10 400004b0 001 00001111 582f2016 582f2016 4078221e 4078221e 0b821d27 0b821d27 b4e133bb b4e133bb fdaadd40 fdaadd40 7701eff3 7701eff3 8cced0d0 8cced0d0 c17498e3 c17498e3
+1 01 4000027a 001 00000011 0fc10000 1100 ad21a3d6 0010 ad21a3d6 1100 00009c03 0011 00000278 0010 73faba69 f60dee38 107940c1 abecd2fe
+0 01 4000018e 000 00001000 fb93c28e fb93c28e c1cc1904 c1cc1904 c1cc1904 c1cc1904 796be6e4 796be6e4 796be6e4
+1 01 400002ea 000 00000011 e4f60000 0000 e4f60000 1000 00002f98 0001 00002f98 0010 000002e8 0008 175cf6ba fe63cb1d
+1 01 40000484 010 00000001 c4667f81 1111 ae617ae7 0111 00000480 0010 d55a26d6 60c29699 c484bfa8 29641fb2
+0 10 400004b0 000 00000001 582f2016 582f2016
+1 01 4000034a 001 00001011 c72f0000 0000 ae6ab81a 0001 ae6ab81a 1100 ecbcd26b 0011 ecbcd26b 1000 230e7395 0011 230e7395 1100 b2ce4e94 0011 b2ce4e94 1100 c51ec2f3 0011 c51ec2f3 1000 0000cbf1 0001 00000348 0020 5b741275 fc6f4914 6efe8eb2 dd83707a 19d9fde8 1834bfac 59f443aa 4ed416b2
+1 01 4000015c 010 00000100 67f61bee 1111 35780a36 1011 5b6d7d81 1010 ed17e628 1100 5dee9527 1101 00000158 0018 0d8592a4 ebc4a62d b8551892 b6563846 09612b91 dc7ad6a0
+1 01 400006c4 010 00000000 3eb01d0d 1111 000006c0 0008 c075b3f1 6d97f6dd
+0 01 4000019c 010 00001101 01256fed 4852b189 9b325a8f b42d0c88 34e2c44f 7b194b95 64269172 0d283998 d54fc582 ff40361c 017db614 e655380b 4b726c37 719e0ebe
+1 01 400001e0 001 00000101 9272d95a 0011 9272d95a 1100 f472ab19 0001 f472ab19 1100 130d84ef 0011 130d84ef 1100 000001e0 0010 0b919bfa 2bb14a66 2086ed76 f941c12f
+1 01 40000106 000 00000000 001e0000 0000 00000100 0008 e0925c17 2c9ebf9c
+1 01 400000e6 001 00000111 29fd0000 1100 3a86577b 0010 3a86577b 1100 100c657a 0011 100c657a 1100 f6076698 0011 f6076698 1100 0000cc6a 0011 000000e0 0018 55cd152f 129af832 6eb850a2 cc2d4987 bcfdc717 99621822
+1 01 4000071c 010 00001101 641a4b5f 0110 b2acc3d9 1011 b2e8c012 1110 aa098b14 0110 0a3bed37 1111 2b00d991 0101 7c7027ab 1011 787d9751 1101 48a1101d 0110 5d8d34f2 0010 f4887ef4 0110 92af7afc 1111 db2e159d 1100 e31cdf36 1111 00000718 0040 e5c06c93 5e2a3184 d6fdf274 72f3c7b8 25fac4fc 0949d273 56f84f46 1893268b 20e701cc a4bc9741 b06de5c7 2c74a25b 768c63c2 bf802556 6622aa53 0e251d8c
+0 01 400002ac 000 00001011 6bc4f042 6bc4f042 6bc4f042 6bc4f042 883e364a 883e364a 883e364a 883e364a 17dceb4c 17dceb4c 17dceb4c 17dceb4c
+1 01 4000069e 000 00000110 36e20000 0100 36e20000 1000 90e68f1a 0001 90e68f1a 0010 90e68f1a 0100 90e68f1a 1000 000000c0 0001 00000698 0010 f703f142 a562e451 98a545e7 ec12f92b
+0 01 40000440 001 00001101 9c599ccf 9c599ccf e555319e e555319e b4b0aafa b4b0aafa 7fd679dd 7fd679dd 8b8e99d6 8b8e99d6 57d26257 57d26257 86343fa6 86343fa6
+0 10 40000448 001 00000111 b4b0aafa b4b0aafa 7fd679dd 7fd679dd 9c599ccf 9c599ccf e555319e e555319e
+0 01 4000025c 010 00001110 26168e31 ea2ad616 26afa9c8 7f6ecaf6 390afed5 4c217bcd 31fba294 0fc1874a ad21a3ba 5cd49c03 19def82b 070f2079 70d3ccb2 8430b45a edeea24d
+0 10 40000379 000 00000111 6ca15c56 6ca15c56 6ca15c56 c847a250 c847a250 c847a250 c847a250 6ca15c56
+0 10 40000564 010 00000001 0901646a 4a776a1f
+1 01 400002e2 001 00001101 73380000 1100 819e4fd1 0011 819e4fd1 1000 19f494c9 0001 19f494c9 1100 9335f97e 0011 9335f97e 1100 3c91baf3 0011 3c91baf3 1100 b046b51c 0001 b046b51c 1100 c4fd808b 0010 c4fd808b 1100 0000139e 0011 000002e0 0020 fc2e6368 bf11e61c 8c53a329 d317048b 0d16767d ba64efea 89b913d6 e5339797
+0 10 400005fc 010 00000001 b1fd7dd3 a1c50bbf
+1 01 4000074b 000 00001111 84000000 0000 cca752d1 0001 cca752d1 0010 cca752d1 0000 cca752d1 1000 113fe794 0001 113fe794 0000 113fe794 0100 113fe794 1000 4dfd495b 0001 4dfd495b 0010 4dfd495b 0100 4dfd495b 1000 0064e4d9 0000 0064e4d9 0000 0064e4d9 0000 00000748 0018 26d390fe 4c16f6fd 1381162f 516a40e0 56e2d351 b7815e00
+0 01 40000398 010 00001111 bc89a28a 077db192 75a5f36a da47b242 ab1df098 83827902 3b44d940 887fbad9 b908d10a 579bcb7b 70c419b3 95072bcd e6fc14c4 93e68f5d 7df8ea4b ee8d84cb
+1 01 40000420 010 00000000 7d1fe52b 1110 00000420 0008 02afaf1c d7331444
+1 01 400001ac 010 00000001 68282681 1010 163efffc 0110 000001a8 0010 327abf14 cf9bb5c5 03dcf343 469a84b4
+1 01 40000406 000 00001011 5a490000 0000 5a490000 1000 493e60fb 0001 493e60fb 0010 493e60fb 0100 493e60fb 1000 02d8d943 0000 02d8d943 0010 02d8d943 0000 02d8d943 0000 00001971 0001 00001971 0000 00000400 0018 c27064e8 26405479 fac71fba 1a01ed6f 9b06affd 09a7dc5c
+0 10 40000364 001 00000011 8d7e0910 8d7e0910 058720f1 058720f1
+1 01 400003d2 001 00000110 72c60000 1100 2c240fda 0011 2c240fda 1100 288e0155 0001 288e0155 0100 87230966 0011 87230966 1000 000003d0 0010 b2de7699 602d8019 d9647d0d 576e71dc
+0 01 40000473 000 00000000 739d87a2
+0 01 40000414 001 00000111 98f2eb05 98f2eb05 0904f482 0904f482 4722eb94 4722eb94 7d1fe57f 7d1fe57f
+1 01 4000056a 001 00000001 b4e90000 0100 0000a682 0001 00000568 0008 c4be97db e7995514
+1 01 40000688 010 00000111 62432e31 1011 6085bfdf 1111 5ac58db0 1010 917fe121 0101 bd42a685 0111 e915051e 1111 c2905cf7 1001 d5e5ec84 1111 00000688 0020 a264b581 561ced7f 031cef31 fd463324 44324d1c d9e4380c c40a7bfd 4e1a2da1
+1 01 40000694 001 00000101 e6de3d74 0011 e6de3d74 1100 8521c87a 0001 8521c87a 1100 ba91d46f 0010 ba91d46f 1000 00000690 0010 47bfecbb e50440c9 4054c073 2257a9e2
+1 01 40000391 000 00000110 450d4600 0010 450d4600 0100 450d4600 1000 ae0da57f 0000 ae0da57f 0010 ae0da57f 0100 ae0da57f 1000 00000390 0008 b106483a 962d3fd4
+1 01 400006b8 010 00001001 9e08a742 1011 29b21522 1011 a5b125d7 1111 fec72328 0111 63dd9ca8 1110 9fd42ebd 1001 f803e354 0111 2e40bb90 0011 6ceddf6b 1111 dc119f6f 1111 000006b8 0028 5b7dbb20 e510e055 3e5c0ea6 07c6f02a d774838c 5d03dcc6 f96abb00 61afd931 f6abfe81 aa918fa0
+0 10 400005bc 010 00000001 62014f5b af472b74
+0 01 40000796 000 00000011 c7bdf59a c7bdf59a 501a0a54 501a0a54
+0 01 4000078c 000 00001101 19641a93 19641a93 19641a93 19641a93 289adafc 289adafc 289adafc 289adafc c7bdf59a c7bdf59a c7bdf59a c7bdf59a 501a0a54 501a0a54
+1 01 400003ba 000 00000110 576c0000 0100 576c0000 1000 d6af5bd8 0001 d6af5bd8 0010 d6af5bd8 0100 d6af5bd8 0000 00000006 0001 000003b8 0010 00f5958a 7f070bde e6246c28 142ba95d
+1 01 40000654 001 00000010 69b5e28d 0011 69b5e28d 1100 0000a6d9 0001 00000650 0010 6d348232 758645eb 9af2f46b c8e8f62c
+0 01 40000250 001 00001011 72f687cf 72f687cf d3cc99df d3cc99df 22cf713a 22cf713a 26168e31 26168e31 ea2ad616 ea2ad616 26afa9c8 26afa9c8
+1 01 40000634 000 00000101 6a924586 0001 6a924586 0010 6a924586 0000 6a924586 1000 00002890 0000 00002890 0010 00000630 0010 5493feed bf964698 0b18251d 67e784e9
+1 01 40000764 001 00000100 95cf3bf8 0011 95cf3bf8 1100 30c0be76 0001 30c0be76 1000 0000e98f 0011 00000760 0010 d2210a27 0848a0a0 1a3e3f8e c1028bac
+0 10 40000030 000 00001111 c5f2bd5b c5f2bd5b c5f2bd5b c5f2bd5b 1d74f274 1d74f274 1d74f274 1d74f274 f0a54d08 f0a54d08 f0a54d08 f0a54d08 691f9013 691f9013 691f9013 691f9013
+1 01 40000493 000 00001101 5d000000 1000 cafa86e2 0001 cafa86e2 0010 cafa86e2 0100 cafa86e2 1000 c089e517 0001 c089e517 0000 c089e517 0100 c089e517 1000 8e923c02 0000 8e923c02 0010 8e923c02 0100 8e923c02 1000 00000018 0000 00000490 0018 7ff8a91c 7f706f41 c7bd4b41 b9db2d79 8e72410d c252e781
+0 01 4000064e 000 00001010 dca68042 dca68042 0dccfb6f 0dccfb6f 0dccfb6f 0dccfb6f 69b5e28d 69b5e28d 69b5e28d 69b5e28d 383f90d9
+0 10 40000412 001 00000111 a26dca71 98f2eb05 98f2eb05 0904f482 0904f482 4722eb94 4722eb94 a26dca71
+1 01 4000044c 010 00000110 fc0010ed 0111 52fe8862 1010 bd9332e7 0101 27fad88b 1111 772cc4e4 1101 32518cf9 1111 505d84dc 0111 00000448 0020 797cd813 c66eb43c 4070197a 54c94793 55379147 bb2df692 f16f9d4a e5fb26d6
+1 01 4000007a 001 00000000 26af0000 0100 00000078 0008 bb292dfa aea82bae
+1 01 40000208 010 00000010 364dedb3 0011 dd2d5e0c 1001 59d2ee85 1110 00000208 0010 b678aede d3148114 24d7f808 321ab9a3
+1 01 400005f6 000 00000101 fbef0000 0000 fbef0000 1000 582046ce 0001 582046ce 0010 582046ce 0100 582046ce 1000 000005f0 0010 ea944dba 2fc96d05 9ab5e3c0 f90a844a
+1 01 400004b0 001 00000000 000097dd 0011 000004b0 0008 d91b7a58 b532ba3f
+1 01 40000614 010 00000010 3de71b20 0001 4aa4d06b 0111 ac5cb046 1010 00000610 0010 9590fea9 9d5cd955 6ee4ead2 2a107de8
+1 01 400000d6 000 00001011 ca600000 0100 ca600000 0000 2011256b 0001 2011256b 0010 2011256b 0100 2011256b 1000 4f6d7673 0001 4f6d7673 0010 4f6d7673 0100 4f6d7673 1000 00009959 0001 00009959 0010 000000d0 0018 1f3bdc9b d9d12487 96421409 b796c951 fd1f7678 660f386b
+1 01 40000422 000 00000001 1a050000 0100 1a050000 1000 00000420 0008 333ee19b b1abc193
+0 01 40000579 000 00000010 f60d1588 f60d1588 f60d1588
+1 01 40000022 000 00001001 a2640000 0100 a2640000 1000 818ca1d8 0001 818ca1d8 0010 818ca1d8 0100 818ca1d8 1000 45dc2f11 0000 45dc2f11 0010 45dc2f11 0000 45dc2f11 1000 00000020 0010 792890a1 082fe785 9a6ef979 16797b16
+1 01 40000682 001 00000010 806b0000 1000 c128c743 0001 c128c743 1100 00000680 0008 beee6c08 5d44c1c6
+0 10 400001a4 010 00001111 9b325a8f b42d0c88 68e2264f 7b3eff95 64269172 0d283998 d54fc582 1d82d0a2 6a86b5c8 a9413897 fb93c28e c1cc1904 796be6e4 95a7611d 01256fed 4852b189
+0 01 400002e0 010 00000000 7338d0eb
+0 01 40000232 001 00001111 9d14924c 948b65cf 948b65cf 0d632ce1 0d632ce1 109202b7 109202b7 8dfec743 8dfec743 e2733d3e e2733d3e 73c0a396 73c0a396 9b5c02c4 9b5c02c4 72f687cf
+0 01 400001f8 010 00000001 d0053f80 bfe0bd28
+1 01 4000063a 000 00001000 27ec0000 0100 27ec0000 1000 f71ee3f8 0000 f71ee3f8 0010 f71ee3f8 0100 f71ee3f8 1000 003de34a 0000 003de34a 0000 003de34a 0100 00000638 0010 7b91d9e0 629e85b3 5d336746 7231cc33
+0 01 40000180 001 00001001 1d82d0a2 1d82d0a2 6a86b5c8 6a86b5c8 a9413897 a9413897 fb93c28e fb93c28e c1cc1904 c1cc1904
+0 10 400002c4 010 00001111 56c1b657 9a32f842 c138bbe1 4a2d5412 9ec0d260 17803572 ac88fe46 7338d0eb 81ae4fd1 19f439c9 9335f97e 3c91baf3 b046881c c4fd803a ca59139e 4d07c1a9
+1 01 40000048 010 00000001 383dd0e4 0111 00f9ccc8 1011 00000048 0008 a37b4e3d 9347f7ae
+0 01 4000066c 010 00000110 d2fd2395 6ce82d13 b4f1ad8a 5b33491a 4aee2995 8019f7ac c128f143
+0 10 4000018e 000 00000001 fb93c28e fb93c28e
+1 01 4000010a 000 00001011 93700000 0100 93700000 1000 ee36c39e 0001 ee36c39e 0010 ee36c39e 0100 ee36c39e 0000 f4ad4f5e 0001 f4ad4f5e 0010 f4ad4f5e 0100 f4ad4f5e 1000 00000ee0 0001 00000ee0 0010 00000108 0010 cd9703d2 3d06f56f ad6ce0e7 dd7a5dc0
+0 10 400007ef 000 00000011 ae097e51 ae097e51 ae097e51 ae097e51
+0 10 4000023e 001 00001111 109202b7 b8b76a22 b8b76a22 b54467c3 b54467c3 1327b3c2 1327b3c2 80c92b25 80c92b25 9d14924c 9d14924c 948b65cf 948b65cf 0d632ce1 0d632ce1 109202b7
+1 01 400003f4 001 00000010 97c27b3f 0010 97c27b3f 1100 00002108 0001 000003f0 0010 8d483c9a 04908edf 6cf8afd3 a46bf128
+1 01 40000410 010 00000110 08d089f8 0111 cc21605f 1101 14c21473 1101 842a3434 1100 b23d79d7 1110 f2a43160 0101 b1b1a9e6 1110 00000410 0020 67a7564e 90716234 83523c9a 94e31627 2ce8f195 18c83c38 8e612594 121232c3
+0 10 40000722 001 00001111 b268c3d9 b2e8c028 b2e8c028 10098bff 10098bff 0a3bed37 0a3bed37 97006491 97006491 7ccf27ab 7ccf27ab 787d7151 787d7151 bca110da bca110da b268c3d9
+0 01 4000050a 001 00001110 2de500c2 714650af 714650af 036444f6 036444f6 9710734c 9710734c 6810b1c8 6810b1c8 268c17a2 268c17a2 01d58156 01d58156 0a7d0c04 0a7d0c04
+1 01 40000150 001 00001110 a9941d99 0011 a9941d99 1100 c73cfe8d 0011 c73cfe8d 1100 cb4ae733 0010 cb4ae733 0000 12fe8efb 0001 12fe8efb 1100 be880c04 0011 be880c04 1100 5589d1b9 0011 5589d1b9 1100 ea20f3d6 0011 ea20f3d6 1100 00004219 0001 00000150 0020 b0ec6782 db3ed02b e812c77d 49afba0c de8a6b42 788e7521 ebb54d8d c8bedd39
+0 10 400002fc 010 00000111 ca59139e 7338d0eb 81ae4fd1 19f439c9 9335f97e 3c91baf3 b046881c c4fd803a
+0 10 4000070c 010 00000011 d8245cc3 968b2a26 2719b079 bb0a0553
+0 10 40000332 000 00000011 2d6da125 2d6da125 2d6da125 2d6da125
+0 10 40000214 010 00000001 0bc815a9 59d2ee19
+1 01 40000614 001 00000011 cbfc2012 0011 cbfc2012 0000 71bd6d2b 0010 71bd6d2b 1000 00000610 0010 9847f00c 36f6b0f8 c7c9d99d 19af32f9
+1 01 400005d4 000 00000011 0809a067 0001 0809a067 0010 0809a067 0000 0809a067 1000 000005d0 0008 3f3d897f a22f96ad
+0 10 40000152 001 00000111 a9941d99 c73cfe8d c73cfe8d 8cbce724 8cbce724 12fe1bfb 12fe1bfb a9941d99
+1 01 4000026c 010 00000010 22132a47 0110 e0343ea6 1111 ebd7f8a7 1110 00000268 0010 0d44cc2a 7c157c1f ee2f7872 ce2cf9a1
+0 10 4000012c 010 00000011 ad06e660 c50d94e1 4f16231d 9952b876
+0 01 400002c8 010 00000011 9a32f842 c138bbe1 4a2d5412 9ec0d260
+1 01 4000065c 010 00001111 8eb7fd94 1111 c6c9887f 1111 95f7cef6 0011 65e01b72 1011 27dd720b 1111 57d1f8c5 0010 8f0d3de7 1111 5cb3f874 0110 3292655e 1101 d3696857 1111 2ff068b9 1111 cd6d973e 1011 2e0b531d 1110 b48e0613 0111 bff02910 1011 86b2614b 0111 00000658 0048 5f772044 82dc8af2 7c993622 b0ebc656 858ebb7d 6902d843 336046be 95cbbd4e e5f42a4b 55779530 ea349625 f6a70482 3ed95f9f 49419f29 76fb72b3 66d8571c 7d0efe85 e790e415
+0 01 400003f0 010 00000110 f591086c 97c27bb9 4f159808 1fb2dcdc 5032ba39 5aadf14d 493e60fb
+0 10 4000047d 000 00000011 c7643108 c7643108 c7643108 c7643108
+0 01 400000f0 010 00001111 f6076698 b6d2cc6a 40e08578 d44897b0 a7b75f48 7a5b5fbd 9370ac2d 2636c39e f4ad4f5e 6ff30ee0 af834a6e e754f561 c50d94e1 4f16231d 9952b876 ad06e660
+0 01 4000066c 001 00000111 27dd720b 27dd720b 6ce8f813 6ce8f813 8f0d3de7 8f0d3de7 5bb3f81a 5bb3f81a
+1 01 400002f4 010 00000111 d892d4b3 1001 89a543b0 1011 4b146fad 1001 5e502822 1111 31624f22 0100 b6d00609 1111 bb041b81 1001 ec7b1329 1111 000002f0 0028 d05a0663 1761ef99 65e2f2a4 be959af2 29a53fc4 5dc24b74 5be28165 b1d0ff58 4bdb5bdc 7650cb37
+1 01 4000047c 010 00000001 796743ae 1011 f1392eb8 1011 00000478 0010 7542dbec 4af01ce8 731b2937 9b5bc2cc
+1 01 400005ba 000 00001110 83d10000 0100 83d10000 0000 7f3ce264 0001 7f3ce264 0000 7f3ce264 0100 7f3ce264 1000 7cba188f 0001 7cba188f 0010 7cba188f 0100 7cba188f 1000 fa1c9728 0001 fa1c9728 0010 fa1c9728 0100 fa1c9728 1000 00000001 0001 000005b8 0018 3c31a211 72aadc54 e363befd dc55d818 71bd60da aba5e69e
+0 10 400003c8 001 00000011 e6fc14c4 e6fc14c4 93e68f5d 93e68f5d
+1 01 4000035e 001 00001000 b65a0000 1100 1a548749 0001 1a548749 1100 ef24b199 0001 ef24b199 1100 8db55fb4 0011 8db55fb4 1100 4bd9eeb2 0001 4bd9eeb2 0000 00000358 0018 d8c5affb 97a84c08 faf2c501 d99c44eb ec330c07 bfe67ad9
+0 10 40000419 000 00000001 14c2f473 14c2f473
+1 01 4000071d 000 00000000 0000bf00 0010 00000718 0008 5bfb4c0d 2e445d88
+1 01 400000dc 010 00000111 90a6c37d 1110 26b9dbc3 1111 2175a96d 1111 60f356f8 1101 0cb6fb3d 1100 90ef79be 0100 db5a44e5 1111 5a1f6aa4 0101 000000d8 0028 be410b9f 4e4cc644 2e6039b2 5d0b477c f1fd6722 488243e8 0a0ecc1d 2a1008ab 07bfd9bc fd87b3bf
+0 01 4000052e 000 00001110 bbc75470 bbc75470 22eb9e6f 22eb9e6f 22eb9e6f 22eb9e6f 3511c4da 3511c4da 3511c4da 3511c4da 901d7e87 901d7e87 901d7e87 901d7e87 030a22d6
+1 01 4000034e 001 00000101 d7db0000 1000 2690cd58 0011 2690cd58 1100 cc5458ea 0011 cc5458ea 1100 00008ce7 0010 00000348 0018 0c955985 5c1d37a6 789ffa2e c76f6b2a daf6d7b0 72a48ec6
+1 01 400006d0 010 00000111 c7fa5964 0111 39890da0 0101 bcca608e 0111 9090e09b 0111 275ddad5 1110 2a800398 1111 5cba4e02 1111 7348dd2a 1101 000006d0 0020 bef87a73 b11bc240 9e62b2eb b50426d3 5e7b506c ae807d21 c84d8ff9 e15156f6
+1 01 400000f8 001 00001110 2b78654e 0010 2b78654e 1100 9d4c2217 0001 9d4c2217 1100 1d7b0b1b 0011 1d7b0b1b 0100 7d6ee543 0011 7d6ee543 1100 0e57c27b 0001 0e57c27b 1100 dd948976 0011 dd948976 1100 069c4072 0011 069c4072 1100 00001d21 0011 000000f8 0020 d7632ff6 2a170aa3 5b1e8a0a 4491c15c a1029143 cc7fc952 0db70734 a8ecc250
+1 01 4000056e 001 00001110 7c930000 1000 3de7f89b 0011 3de7f89b 0100 10beebd3 0000 10beebd3 0000 535e2f0d 0010 535e2f0d 0100 6e366885 0010 6e366885 1100 51241c04 0010 51241c04 0100 fd96a386 0011 fd96a386 1100 91741aca 0000 91741aca 1100 00000568 0028 0d8abc30 6b7a1bb2 722276de 9c0b3e7f 14bb97b6 d9d13b9c 94953f3d f8899842 2ace87fd 1a59c3d4
+0 10 40000654 001 00001111 69b5e28d 69b5e28d 383f90d9 383f90d9 8eb7fd94 8eb7fd94 703d5bb4 703d5bb4 993d7f08 993d7f08 49d3f178 49d3f178 dca68042 dca68042 0dccfb6f 0dccfb6f
+0 01 4000017c 001 00001010 96255f99 96255f99 1d82d0a2 1d82d0a2 6a86b5c8 6a86b5c8 a9413897 a9413897 fb93c28e fb93c28e c1cc1904
+1 01 40000498 010 00001001 09db5678 1111 65e1904a 1111 6827b083 1011 39c68b88 1111 57198240 1001 caf50cbd 1111 e0941834 1110 fb6f89d5 1010 b57da665 1000 b9111ed8 1011 00000498 0028 44978f7d abad51c0 74a6eda5 8cad5a68 8eb4f86f f9b7c725 be35f380 8a469f22 78d3d4c3 c001ed69
+1 01 400006f4 001 00000100 25c26a64 0011 25c26a64 1100 9063ac40 0011 9063ac40 0000 00005606 0011 000006f0 0010 bf168fab 01d92cfc d5cdbc66 abf19033
+0 01 40000124 001 00001100 4f16231d 4f16231d 9952b876 9952b876 ad06e660 ad06e660 1840dcfe 1840dcfe cc815d07 cc815d07 59ddea3b 59ddea3b fa85ce51
+1 01 4000001a 001 00001101 ae040000 1100 dd899b84 0011 dd899b84 1000 c4a903f3 0001 c4a903f3 1100 54559689 0010 54559689 1100 12945278 0011 12945278 1100 7d8b5dca 0010 7d8b5dca 1000 4341fcaf 0010 4341fcaf 0100 0000d389 0001 00000018 0020 92c34766 7be3e0a6 436166ae 48e5daf5 490b507a a0e028ec ef38b9ea 82118676
+1 01 40000340 001 00001010 a958ba56 0001 a958ba56 1100 882d76eb 0010 882d76eb 0100 593e2e44 0010 593e2e44 1100 6cb94053 0010 6cb94053 1100 69d871c6 0011 69d871c6 1100 0000489e 0011 00000340 0018 987f932b 192dff88 474546b2 d37e7b47 5873eb30 899d1765
+1 01 40000172 000 00000101 55780000 0100 55780000 1000 f4030a64 0000 f4030a64 0010 f4030a64 0100 f4030a64 1000 00000170 0008 a5240972 54c54327
+1 01 400003f0 010 00001110 cdd52603 1111 9311dc38 1100 640b757f 1011 2e23ccaf 1111 e7e564ea 1011 4be6e944 1101 9e30e60d 0111 8fc5e528 0110 f34272f3 1111 ad19b772 0001 3526e819 1100 1067af43 1110 509dd839 0001 9469ff6d 1110 4a9636ce 1111 000003f0 0040 42988e27 8fdb5843 9d862bd6 c6f801a4 05333a49 79401a91 6484c8f2 65e80cd5 da5bdef5 089c2258 714806c9 e4cad5f2 8ac3d6d9 fb47d3d4 e6d1d98e 83997ce6
+1 01 4000024d 000 00001111 bec97700 0010 bec97700 0000 bec97700 0000 bec37faa 0001 bec37faa 0000 bec37faa 0100 bec37faa 1000 7abf1e58 0000 7abf1e58 0000 7abf1e58 0100 7abf1e58 1000 5aac9b2f 0001 5aac9b2f 0000 5aac9b2f 0100 5aac9b2f 0000 0000002f 0000 00000248 0018 ed536001 025cf3a5 fe1c8fb1 7ba7edcb 9928419c da761aa5
+1 01 40000499 000 00001000 02057700 0010 02057700 0100 02057700 0000 bb20a598 0001 bb20a598 0010 bb20a598 0100 bb20a598 1000 00008a27 0001 00008a27 0010 00000498 0010 9d4efac4 b8ff8275 3d602e15 68aa4b87
+0 01 40000587 000 00000000 fd96a386
+1 01 400007bd 000 00000011 5af4e500 0000 5af4e500 0100 5af4e500 0000 00000077 0001 000007b8 0010 861d06b4 8c586a39 ba61b7ef c9df71a5
+0 01 400004d0 010 00001101 7b8206ce 72d10884 6847dfb8 ab43cdee d3823912 5230126b 5dcf0426 aa79e619 d7db4d97 59ea141e ec93d3f9 79e325c0 842879a5 1202ba88
+0 10 400004e8 010 00001111 5dcf0426 aa79e619 d7db4d97 59ea141e ec93d3f9 79e325c0 42409bc1 f8573ffa 9d1be688 7bdfb951 7b8206ce 72d10884 6847dfb8 ab43cdee d3823912 5230126b
+0 10 40000604 010 00000111 a4d5ad80 698ba330 3f8b67bb 1a42a9fa 2f5e2012 71a46d6b ace3b0fe 0f9c4d31
+0 10 40000278 001 00000011 0fc1874a 0fc1874a ad21a3ba ad21a3ba
+1 01 40000704 010 00000110 308dd914 1101 0149fac8 1011 bc923b45 1111 99d9962f 1011 519016d8 1111 afbf4026 1100 a10cc980 1011 00000700 0020 c5e30a18 e497badb 120fec57 b06cfda4 f40d2ae4 c285be57 bc51f4f6 1a43eb54
+0 10 40000096 001 00001111 7d5b6c4c b7a23973 b7a23973 ecaa4c56 ecaa4c56 e43f4d29 e43f4d29 f0fae9b7 f0fae9b7 fa7da72b fa7da72b 8d4322fe 8d4322fe bf8f72d5 bf8f72d5 7d5b6c4c
+1 01 400002eb 000 00001001 0f000000 1000 dc3af25a 0001 dc3af25a 0010 dc3af25a 0000 dc3af25a 1000 76f6810e 0000 76f6810e 0010 76f6810e 0000 76f6810e 0000 0000005a 0001 000002e8 0010 200c5de3 cefebe3f ac1b6767 62a2a6a9
+0 01 400007ea 001 00000111 d2dd536f ae097e51 ae097e51 a5d8d0e0 a5d8d0e0 d800e4ab d800e4ab 47d4fb01
+0 10 40000032 000 00001111 c541fc5b c541fc5b 1d74f289 1d74f289 1d74f289 1d74f289 f0a54d08 f0a54d08 f0a54d08 f0a54d08 691f9013 691f9013 691f9013 691f9013 c541fc5b c541fc5b
+0 10 4000052c 001 00000001 bbc75470 bbc75470
+1 01 4000059c 001 00001011 5c627050 0010 5c627050 1100 8d50c1de 0001 8d50c1de 1100 a3c92d80 0001 a3c92d80 0000 a078e97b 0010 a078e97b 1100 91b5a2e0 0011 91b5a2e0 1100 4d0fbe9b 0001 4d0fbe9b 1100 00000598 0020 9b8a790b 3ef533b5 3aeb1a17 c14ea464 1b1cda3a a9a62898 b06f204a a20b6a3f
+1 01 40000690 001 00001000 e9daad8e 0011 e9daad8e 1100 fee112a8 0010 fee112a8 1100 54959d76 0000 54959d76 1000 c7bb440b 0011 c7bb440b 1100 00003368 0011 00000690 0018 8fa21095 80788c16 a9d47838 56db7b24 f9e7aa94 dc430749
+1 01 4000077a 001 00001001 68320000 1100 1e324b1d 0001 1e324b1d 1100 912ed663 0010 912ed663 1100 b6df848e 0011 b6df848e 1000 17999507 0001 17999507 1100 0000640e 0011 00000778 0018 5610bc93 bb29972c e7222645 5cb1f698 50785ad5 de0b0b86
+0 01 400004a4 001 00001101 39c68b88 39c68b88 57ced040 57ced040 caf50cbd caf50cbd e09418dd e09418dd fb78891e fb78891e b5821d27 b5821d27 b9e11ed8 b9e11ed8
+0 10 40000652 000 00000111 0dccfb6f 0dccfb6f 69b5e28d 69b5e28d 69b5e28d 69b5e28d 0dccfb6f 0dccfb6f
+1 01 40000221 000 00001110 8c9af500 0010 8c9af500 0000 8c9af500 0000 3c1a08bc 0001 3c1a08bc 0010 3c1a08bc 0000 3c1a08bc 1000 9026773d 0000 9026773d 0010 9026773d 0100 9026773d 1000 8417351f 0001 8417351f 0010 8417351f 0100 8417351f 1000 00000220 0010 f7b0e78e 3b1ea633 06799f37 da8fb726
+1 01 400002b0 001 00001111 31097fc7 0011 31097fc7 1100 11c28e41 0011 11c28e41 1100 a2707198 0011 a2707198 1100 2404e77f 0011 2404e77f 1100 fc0a75f4 0001 fc0a75f4 1100 f4a5cec7 0011 f4a5cec7 1100 7e520ef5 0011 7e520ef5 1100 5aa073ee 0011 5aa073ee 1100 000002b0 0020 a139bd48 fd64a6d9 f83bb057 deffc91b be6243e5 ef10e4be 6eee42f9 60153cd0
+0 01 4000075c 001 00000100 43ff1f54 43ff1f54 2d975eac 2d975eac 95cf3bf8
+0 10 40000094 010 00000111 7d5b6c4c b7a23973 ecaa4c56 e43f4d29 f0fae9b7 fa7da72b 8d4322fe bf8f72d5
+1 01 400006a2 001 00001101 6e1f0000 1000 d2ddd474 0011 d2ddd474 1100 622a645d 0001 622a645d 1100 2be193b4 0010 2be193b4 1100 0585e45f 0011 0585e45f 1000 05fef194 0000 05fef194 0100 7af0db03 0011 7af0db03 1100 00000411 0011 000006a0 0020 a11bbf42 a10714d9 f54c6ff8 cd8d08f4 36de1c87 2ef6e910 1c8cfef3 0a148bc9
+0 10 400004b8 001 00000011 b5821d27 b5821d27 b9e11ed8 b9e11ed8
+0 01 40000553 000 00001101 5075a1b3 9e4038f7 9e4038f7 9e4038f7 9e4038f7 9c6eb745 9c6eb745 9c6eb745 9c6eb745 f4db81f4 f4db81f4 f4db81f4 f4db81f4 4a776a1f
+1 01 40000238 001 00000001 55dcc046 0010 55dcc046 0100 00000238 0008 baa9df9c feaaa1c2
+1 01 400001fe 000 00001111 846c0000 0100 846c0000 1000 12060e6e 0000 12060e6e 0010 12060e6e 0100 12060e6e 1000 fe56320a 0001 fe56320a 0010 fe56320a 0000 fe56320a 0000 fc91765b 0001 fc91765b 0000 fc91765b 0000 fc91765b 1000 0000c141 0001 0000c141 0010 000001f8 0018 08f41a5b 8fdb1af9 8e6eb152 225b4301 bf2ea6af 6f81febe
+1 01 400000ce 001 00000011 34380000 1000 811da809 0011 811da809 1100 0000b764 0010 000000c8 0010 b3995e5a c6604265 3746dced adb6a808
+0 10 40000724 000 00001111 b2e8c028 b2e8c028 b2e8c028 b2e8c028 10098bff 10098bff 10098bff 10098bff 0a3bed37 0a3bed37 0a3bed37 0a3bed37 b268c3d9 b268c3d9 b268c3d9 b268c3d9
+1 01 40000368 010 00001000 2ea67a9c 1111 36e9a0d9 1011 cd110711 1111 b97df742 1111 059b9541 1111 1fb72621 1010 831c0dce 1010 469ad6eb 1011 f67ab17b 1111 00000368 0028 6b64bd6b d8d29e87 bb997bec 8c09e00e 6b8c534b d05653d7 d5166d03 c672af3e b70b01ec a852f39f
+1 01 40000166 001 00000001 3cad0000 0000 0000053c 0001 00000160 0010 de8a6b42 788e7521 710edd2e 44a445fd
+0 01 400004f4 010 00000010 59ea141e ec93d3f9 79e325c0
+1 01 40000343 000 00000110 85000000 1000 b9c030b6 0001 b9c030b6 0010 b9c030b6 0000 b9c030b6 0000 0000c495 0000 0000c495 0010 00000340 0010 ca4efa9c 9ede7d76 7c82e27e 494f0e77
+1 01 400007f5 000 00001000 b9aa9200 0010 b9aa9200 0100 b9aa9200 1000 3505c35e 0001 3505c35e 0010 3505c35e 0100 3505c35e 1000 00008da9 0000 00008da9 0010 000007f0 0010 4c923c2f 2697f068 5c6da5ea ea5bc581
+1 01 40000480 010 00001011 f80261de 1001 13e5fdf1 1101 06bd5980 0111 70c9a612 1111 80ee7207 1101 c43abb16 1111 565d870f 1011 6d368841 0101 4401ac32 0101 69b2f878 0011 19fb53fe 1001 6e528d18 1110 00000480 0030 211713e1 2454269a f16e39b5 ded4d66d b9af70f4 bc353f20 7c42b87d c4e8a3c5 8cd56e74 fda39078 199fe43f 6c03e172
+1 01 4000012b 000 00000100 c4000000 0000 0f504ea1 0001 0f504ea1 0010 0f504ea1 0100 0f504ea1 1000 00000128 0008 1aef67a1 92aa0e82
+1 01 40000280 010 00001010 dfce787c 0111 3ef10ef2 1011 88999ff7 1111 70688782 1111 cd1698b5 1110 92a6c4ef 1110 424786a5 0101 ee02d089 1101 8792d1b7 0111 05fa41f7 1010 3a693dd1 1110 00000280 0030 f6feafa7 7802043a 2fca4f40 c14bc5c1 18afc66b 26461b97 7898b7a9 4d61437d 319daf78 a2d6db30 323210ee d404d3b4
+0 10 40000754 010 00000001 4dfd495b 113fdf94
+1 01 40000432 001 00000011 4b410000 1100 9adcfef1 0011 9adcfef1 1100 0000b45c 0010 00000430 0010 8444a526 20c9a768 f1646a6b e03388f6
+1 01 40000660 001 00001010 ed3713fe 0011 ed3713fe 0100 e7e69676 0001 e7e69676 1100 1435fc80 0001 1435fc80 1000 63ebbfd2 0011 63ebbfd2 1000 0be4213a 0011 0be4213a 1100 0000b8e0 0011 00000660 0018 4eb55668 71c51217 5d29e7f2 71f95372 ca00c286 447c9d93
+0 01 40000114 000 00000100 6ff31d21 6ff31d21 6ff31d21 6ff31d21 af834a6e
+0 10 4000009a 000 00001111 b7a23973 b7a23973 ecaa4c56 ecaa4c56 ecaa4c56 ecaa4c56 bf8f72d5 bf8f72d5 bf8f72d5 bf8f72d5 7d5b6c4c 7d5b6c4c 7d5b6c4c 7d5b6c4c b7a23973 b7a23973
+1 01 40000346 001 00000010 cd1e0000 1000 45092821 0011 45092821 1000 00000340 0010 b3778cfd 01ad1666 be02b8aa 05f7f2ed
+1 01 40000698 001 00001001 4dbf5ff4 0000 4dbf5ff4 1100 629a7f94 0001 629a7f94 0000 ab1aaf8b 0011 ab1aaf8b 1100 186b7e25 0000 186b7e25 1100 3e379955 0001 3e379955 1000 00000698 0018 136e3595 ffb5f7d4 ab509bb5 48a66ca8 98cf127d 35cc1353
+0 01 40000520 010 00001010 01d58156 0a7d0c04 112ecb96 bbc75470 22eb9e6f 3511c4da 901d7e87 030a22d6 5fffba86 fb5845b6 1b5c7386
+1 01 40000766 001 00000111 c4b90000 1100 03f9f02c 0010 03f9f02c 1000 071a83bc 0011 071a83bc 1100 921c3b85 0011 921c3b85 1100 0000e3ca 0011 00000760 0018 1e863ba4 81843a92 704c605a 7792d766 586d43dd 0d64d950
+1 01 400003aa 001 00000101 eaad0000 0100 fb3f2cc1 0011 fb3f2cc1 1100 e2e80b1a 0000 e2e80b1a 1100 0000648b 0011 000003a8 0010 56f510c9 afc5027a db752a51 e89018aa
+0 10 40000554 000 00000001 9e4038f7 9e4038f7
+0 10 4000065a 001 00000111 383f90d9 8eb7fd94 8eb7fd94 0dccfb6f 0dccfb6f 69b5e28d 69b5e28d 383f90d9
+1 01 400002ae 001 00000011 95180000 1100 8f083f8f 0011 8f083f8f 1100 0000f9b3 0011 000002a8 0010 d46b74cb 5b0ccb11 e625c633 1afb38fa
+1 01 4000033c 010 00000001 2001d545 1111 06408b77 1111 00000338 0010 5cb1e406 743f1773 081f2aca 0be0584c
+0 01 400003c6 000 00001011 95072bcd 95072bcd e6fc14c4 e6fc14c4 e6fc14c4 e6fc14c4 93e68f5d 93e68f5d 93e68f5d 93e68f5d 72c6ea4b 72c6ea4b
+1 01 400005f8 010 00001111 6f7051ab 0111 f9f05326 1111 ca978e33 1111 6635ebfe 1110 60fdca47 1110 9fbfa540 1011 88487b11 1011 1761ef21 1100 c45e8a17 1110 96da17ae 1111 56d73e62 1111 098f9eba 0011 4eaf02a7 0110 eee33aeb 1101 dd4e6397 1111 568a2565 1100 000005f8 0040 14e4ee8f 9419fadf 4696cb8d 0064b15a 27b75b15 dda4c611 f6347cbd a29403f3 2a40cd90 490bf34a 5002bc28 26f8dea9 51139d88 c8520ca9 0ba433b4 b5fd4905
+0 01 4000016e 001 00000110 5dee8119 5578cf5b 5578cf5b f4030af7 f4030af7 26148ec4 26148ec4
+0 01 40000238 010 00000001 0ddcc0e1 109202b7
+0 01 40000337 000 00000011 e0025d52 74b5ec21 74b5ec21 74b5ec21
+0 01 400007aa 000 00000001 2f6ddaef 2f6ddaef
+1 01 400005d4 001 00000000 0000bf98 0010 000005d0 0008 a4038724 e2cc5835
+1 01 400003e8 010 00000001 347697c8 1101 d30467b2 0111 000003e8 0008 00f2fd9a 9a69bd67
+0 10 40000108 001 00001111 0e57ac7b 0e57ac7b dd948976 dd948976 069c4072 069c4072 6ff31d21 6ff31d21 af834a6e af834a6e e754f561 e754f561 a77b0b1b a77b0b1b 7d6ee543 7d6ee543
+1 01 4000079e 000 00000010 6f6f0000 0100 6f6f0000 0000 00000031 0001 00000798 0010 3a2b07b8 fece7d9d 9290026c 69052c49
+0 01 40000226 001 00001100 3c4408bc 902677c2 902677c2 8417351f 8417351f 9d14924c 9d14924c 948b65cf 948b65cf 0ddcc0e1 0ddcc0e1 109202b7 109202b7
+1 01 4000031e 001 00001101 90bb0000 0100 6552d5f4 0000 6552d5f4 1100 716d56a8 0001 716d56a8 1100 c047605c 0010 c047605c 1000 8ff81e20 0011 8ff81e20 1100 1adb3005 0001 1adb3005 1000 9f54095d 0011 9f54095d 0100 00006d3e 0011 00000318 0028 b1825875 243b0ff4 58b47e5a c58cca28 643333ca cdf5f22d 063a8c7c 4aeb47ac dfc658f3 2450cf73
+0 10 40000370 010 00000001 cd110711 b97df742
+0 01 40000556 000 00000110 9e4038f7 9e4038f7 9c6eb745 9c6eb745 9c6eb745 9c6eb745 f4db81f4
+0 10 4000066e 001 00000001 63ddbfd2 63ddbfd2
+1 01 40000170 000 00001000 717fdea8 0001 717fdea8 0010 717fdea8 0100 717fdea8 1000 26b2ffde 0000 26b2ffde 0000 26b2ffde 0100 26b2ffde 1000 00000023 0001 00000170 0010 c9c2a45d e313b559 eb193b0c 26712e62
+1 01 4000071a 001 00000101 4b690000 1000 77863aa0 0011 77863aa0 1100 8d43856c 0011 8d43856c 1100 000082be 0011 00000718 0010 c62738e1 2a802045 466fe2a4 87c21c40
+0 10 40000704 010 00000011 308db014 010afac8 bc923b45 968b2a26
+1 01 40000764 001 00000010 7b4fba41 0001 7b4fba41 1100 0000a82e 0011 00000760 0010 402e8bec 920b8a3a 656a1a3c b4aa7de5
+1 01 400007ac 000 00000001 0000b5e5 0001 0000b5e5 0010 000007a8 0008 6de78d25 8672d529
+1 01 400006b8 001 00001110 a668ca59 0011 a668ca59 1000 c0bc5760 0011 c0bc5760 1100 fd2c5bac 0000 fd2c5bac 1100 f081de6c 0001 f081de6c 0100 452b7038 0011 452b7038 0100 b604d1a2 0011 b604d1a2 0100 d42685ad 0010 d42685ad 1100 0000f1e0 0011 000006b8 0020 8221331b 16420690 67221f1d 3e9fd020 fe8f6a3e 88f5c833 f4cd9b83 f3f70f29
+0 01 400002a8 010 00001010 3a693de6 9518f042 8f083f8f 11c2f9b3 a2707198 2404e77f fc0ac1f4 f4a5cec7 7e520ef5 5aa073ee 4a2d5412
+0 10 40000484 000 00001111 13e57ff1 13e57ff1 13e57ff1 13e57ff1 9fbd5980 9fbd5980 9fbd5980 9fbd5980 70c9a612 70c9a612 70c9a612 70c9a612 f8b42ede f8b42ede f8b42ede f8b42ede
+0 10 40000504 010 00001111 1202ba88 2de500c2 714650af 036444f6 9710734c 6810b1c8 268c17a2 01d58156 0a7d0c04 112ecb96 bbc75470 22eb9e6f 3511c4da 901d7e87 030a22d6 842879a5
+0 10 40000214 000 00000111 0bc815a9 0bc815a9 0bc815a9 0bc815a9 59d2ee19 59d2ee19 59d2ee19 59d2ee19
+1 01 40000324 010 00000010 f9bd9a78 0111 11e7b3e1 1110 ed12a485 1110 00000320 0010 8142760d 5c6ba893 9431fa9f eb360f7d
+0 10 400000ee 001 00000001 0cb6657a 0cb6657a
+0 10 40000148 010 00001111 9eeb730c 5bce58b4 a9941d99 c73cfe8d 8cbce724 12fe1bfb be880c04 5589d1b9 ea20f33c 5dee8119 717fdea8 26b20af7 26148e23 96255f99 b4ffaf65 12b18a82
+1 01 40000275 000 00001100 cbf50e00 0010 cbf50e00 0100 cbf50e00 1000 fca71500 0001 fca71500 0000 fca71500 0100 fca71500 0000 cf5829ff 0000 cf5829ff 0010 cf5829ff 0100 cf5829ff 1000 000002b6 0001 000002b6 0010 00000270 0018 1f5068a2 a7e6a1cf 84a36d5c 11ccdc03 8397c5b7 6143eb22
+0 01 40000208 001 00001011 fc89ed5b fc89ed5b dde2c141 dde2c141 59d2ee19 59d2ee19 0bc815a9 0bc815a9 d11c4d22 d11c4d22 b058c119 b058c119
+0 01 40000619 000 00000001 c45e8a6b c45e8a6b
+0 10 40000074 010 00000011 cb276bfb dcaff4a7 bf072143 cb814a20
+1 01 40000738 010 00001000 55cfedc7 1110 a50f1697 1110 3cb242d6 1110 8f04deb0 1111 6b631a5e 1101 8e43ba85 0101 95c3dd0a 1110 13030c55 0000 132a12a3 1111 00000738 0028 f30dff31 56111f9e aa91af8d 87c3f50d ec86de5d b5f859b2 e5577944 d86aa9c7 67c181b8 cdcc608d
+1 01 400007c4 000 00001100 e9ecaa51 0000 e9ecaa51 0000 e9ecaa51 0100 e9ecaa51 1000 64891768 0001 64891768 0000 64891768 0100 64891768 1000 c0fe8e7e 0001 c0fe8e7e 0000 c0fe8e7e 0100 c0fe8e7e 0000 0000002d 0001 000007c0 0018 ae8be099 3a21faf7 6c764fc7 d5929c5f 84b590dc f02b1270
+1 01 40000310 000 00001100 295b89a1 0000 295b89a1 0010 295b89a1 0100 295b89a1 1000 1d2a8ef9 0001 1d2a8ef9 0010 1d2a8ef9 0100 1d2a8ef9 1000 fd0d6cc4 0000 fd0d6cc4 0010 fd0d6cc4 0100 fd0d6cc4 1000 0000006b 0001 00000310 0010 eee089d3 8fdc39b9 11a160f6 729b5452
+1 01 4000019e 001 00000100 14270000 1100 62c81b0f 0010 62c81b0f 1100 a9a54575 0011 a9a54575 1000 00000198 0010 c8aaae0b cef9f35b 4941d239 716f1b03
+0 01 400005b3 000 00001111 4d0f3f9b 9f8dc244 9f8dc244 9f8dc244 9f8dc244 afd12b74 afd12b74 afd12b74 afd12b74 7f3c4f64 7f3c4f64 7f3c4f64 7f3c4f64 7cba188f 7cba188f 7cba188f
+0 01 40000704 010 00001100 308db014 010afac8 bc923b45 99a6962f 519016d8 4bbfd486 77863aa0 8d43856c b2e882be 10098bff 0a3bed37 97006491 7ccf27ab
+1 01 400003a2 001 00001111 55ca0000 1100 e5970c4d 0011 e5970c4d 1100 ed714d86 0000 ed714d86 1100 db6451a1 0001 db6451a1 1100 694cb46b 0011 694cb46b 1000 7090f2e4 0011 7090f2e4 1100 7398b969 0011 7398b969 1100 bc388bcf 0011 bc388bcf 1100 0000e033 0011 000003a0 0028 2aba126c be1a3033 f3e2524e f79f0fe6 fd9c45d8 4d823cea 3bc3f7e6 0abadf76 a845b03b a365fa93
+1 01 40000624 010 00000010 142fd8c8 0001 eb99a4de 1111 2768ff38 0010 00000620 0010 a34bf1df 17b4a932 cd152972 df5d31af
+1 01 400007d0 001 00001000 ad8f6b53 0011 ad8f6b53 1100 b23f16c5 0011 b23f16c5 1100 4e179637 0000 4e179637 1100 614a3018 0011 614a3018 1100 0000e18a 0011 000007d0 0018 7398ef0f 6cb56064 2994d7e2 9754e512 107b83bb 0f9835e6
+0 01 40000430 010 00000011 4b415d72 9adcfef1 7cf0b484 932eddac
+0 01 4000046a 001 00000110 e8f19e19 1acb7f88 1acb7f88 739d87a2 739d87a2 bf867d8a bf867d8a
+1 01 40000162 001 00001000 391e0000 1000 682745a2 0010 682745a2 1100 47aee82f 0010 47aee82f 0100 9087f66e 0000 9087f66e 1100 3527cc68 0000 3527cc68 1100 00000160 0018 ae77e079 8c5273df fc09388b 0de82676 efda2d85 076925d2
+0 01 40000022 000 00001101 c4a925f3 c4a925f3 545596d8 545596d8 545596d8 545596d8 12945278 12945278 12945278 12945278 7dc25d12 7dc25d12 7dc25d12 7dc25d12
+1 01 40000238 000 00000101 73c11ff2 0001 73c11ff2 0010 73c11ff2 0100 73c11ff2 1000 0000c058 0000 0000c058 0010 00000238 0008 f60bb251 1488b301
+1 01 40000440 000 00000101 dd61841c 0001 dd61841c 0010 dd61841c 0000 dd61841c 1000 00000c6c 0000 00000c6c 0010 00000440 0008 74496217 ba43674b
+0 10 400001b4 010 00000111 64269172 0d283998 d54fc582 62c81b89 a9324575 b42d0c88 68e2264f 7b3eff95
+0 10 40000338 001 00000111 74b56d3e 74b56d3e 2001d545 2001d545 1a6da105 1a6da105 e054095d e054095d
+0 10 4000022c 001 00000011 8417351f 8417351f 902677c2 902677c2
+1 01 40000173 000 00000010 a5000000 1000 00003e21 0000 00003e21 0010 00000170 0008 95d5cf4b f68ddf68
+1 01 40000276 001 00001011 90e00000 1100 d1d2faf9 0010 d1d2faf9 1100 eb7a3c04 0011 eb7a3c04 1100 3587ab8a 0001 3587ab8a 1100 eaff9d09 0010 eaff9d09 0100 33dfe004 0010 33dfe004 1100 00001e87 0010 00000270 0020 1e1c233e b5b90e71 6aada710 74ab90b7 e9a9c571 55b65f44 d5b96d7a ad158971
+1 01 4000069e 001 00000001 b3b40000 1000 000043ee 0000 00000698 0010 1129a587 3bb8732e ab509bb5 48a66ca8
+1 01 4000041c 001 00000101 092ff3d1 0010 092ff3d1 1100 a89ec72e 0011 a89ec72e 1100 e120b130 0011 e120b130 1100 00000418 0010 7323d4e0 dcb20526 9e61c2f0 6e60e420
+0 10 40000620 001 00001111 56d73e62 56d73e62 b8ce9ec8 b8ce9ec8 eb99a4de eb99a4de eee3ffeb eee3ffeb dd4e6397 dd4e6397 568a4586 568a4586 27ec281d 27ec281d f71ee3c6 f71ee3c6
+0 01 400006d1 000 00000101 d4268564 d4268564 d4268564 f989f1e0 f989f1e0 f989f1e0
+0 10 40000404 001 00000011 4be6f144 4be6f144 e73264ea e73264ea
+1 01 4000033a 001 00000000 89300000 1100 00000338 0008 36bd0920 95cad5c7
+0 01 400001d0 000 00001100 719e0ebe 719e0ebe 719e0ebe 719e0ebe 5966f54e 5966f54e 5966f54e 5966f54e 86eb89b6 86eb89b6 86eb89b6 86eb89b6 dafd7f4f
+1 01 4000058a 001 00000101 246e0000 1000 74dc3b3d 0000 74dc3b3d 1000 09b4be12 0010 09b4be12 1100 00004db1 0011 00000588 0010 8b7bd612 c540420c 0c1f6898 8ac9c6b1
+0 10 400006d4 001 00001111 f989f1e0 f989f1e0 6cca608e 6cca608e dc90e09b dc90e09b fd2c25d7 fd2c25d7 3e81236c 3e81236c 632b7038 632b7038 9f04d1a2 9f04d1a2 d4268564 d4268564
+1 01 400006d0 010 00001010 a90ef882 1000 1d6c45b9 1111 0c8e43da 0101 4f544b3c 1110 9056361a 1111 53ffa623 0111 8d97fcbc 1111 a6144754 1100 602e3b47 1111 80bcfc2f 1111 f095c122 1101 000006d0 0030 c91d370e a96933bd 077c4cce 2e715a77 920d6926 f7009770 4f900fab 4b86d1ff b41c1b0d fbe0ae4e b328cc33 4d399331
+0 01 400000a4 000 00000011 059971b1 059971b1 059971b1 059971b1
+1 01 4000055d 000 00000010 68b72400 0010 68b72400 0100 68b72400 1000 00000558 0008 2ffc20a5 52751e68
+0 01 40000192 001 00000010 c1cc1904 796be6e4 796be6e4
+1 01 4000078c 010 00001100 3c953c38 1001 186d3e80 1000 a0fa4d1c 1110 a1565e51 0010 704d7fe4 1110 63dfc064 1101 88609bbe 1011 d762fab3 1010 ff88e7df 0101 671c339e 1111 768c77b7 0110 00cef883 1111 766770f0 1010 00000788 0038 b8790d6d a715a565 abbaa9aa bf7e68a4 3a49ce37 35e2dce4 570fbaef 98105030 b137327d 2c9a6dd7 2284cd41 e703d3de c993e45a 05ad4fae
+0 10 40000050 010 00000001 1574b3f4 734e1508
+0 10 400003fc 010 00000011 2e23ccaf cdd52603 93117bb9 6415757f
+1 01 400007a4 010 00001111 1ced6d00 0111 040789fc 1111 f8a2227e 0011 c7d00d78 1110 a9ebd160 1110 fdb03f5b 1111 8cf79957 1011 f676a417 0111 4343e071 1110 efdf10d2 1010 5799fb7c 1011 adce66e3 1110 e1edf84b 1111 52b6a456 1001 0d28f6ec 1011 b120d303 1111 000007a0 0048 efee7630 7684fab6 891a42bf c5b646f6 9d3b8b5a 2cdfa1cc 5f9afc4c 902c85fc b8643e72 35ba4cc9 0b442336 990dc7a0 d886ff18 5d970a59 ff8eb7b4 59f04e12 818a4872 68a69803
+1 01 4000044f 000 00001010 c7000000 0000 534564af 0001 534564af 0000 534564af 0100 534564af 0000 a0d9c2d2 0000 a0d9c2d2 0000 a0d9c2d2 0100 a0d9c2d2 1000 000019d8 0000 000019d8 0000 00000448 0018 797cd813 c66eb43c 3a3ecdf7 8271415e 55379147 bb2df692
+1 01 40000418 010 00001100 954a2ed7 1101 18768ef8 0101 3a185023 1111 07aa078f 1111 bb48c4f4 1111 8e757bbb 0110 fd284a57 1001 26e892d9 1111 3c64acb6 0101 8bd25042 1110 8fb6012b 1111 f1c166c4 1110 15f084e6 0111 00000418 0038 769cd162 f9787a71 97307689 1a4aa0f0 83e8ee22 418ebeff f1dc4cfb 4c8ca87c b263bf89 b9beaecc 40895053 97a14742 6a9c9a16 7be48845
+0 10 40000030 001 00000011 c541fc5b c541fc5b 1d74f289 1d74f289
+0 10 400001fc 000 00000001 846cbd28 846cbd28
+1 01 4000064c 010 00000110 13312ee3 1111 739e0e80 1101 5065dc21 1111 bb515e82 1111 097dceb4 0001 d0dd974d 0110 8caa63ce 1010 00000648 0020 85dc775e 1bfc5083 ddaacf94 78f451b3 d1a1bdeb 0202ead7 d9cff1fa 05668053
+1 01 40000466 000 00001101 9c1f0000 0100 9c1f0000 0000 4b1081e4 0000 4b1081e4 0010 4b1081e4 0100 4b1081e4 1000 68315b9e 0000 68315b9e 0010 68315b9e 0100 68315b9e 1000 e2b72faf 0001 e2b72faf 0010 e2b72faf 0000 e2b72faf 1000 00000460 0018 d2fe3f4e 7125faaa 740ed3d2 cb34b44a 204c9c2e 8a87de98
+1 01 400002ca 001 00000001 3a2a0000 1000 00008baa 0010 000002c8 0008 10ecd5d6 03f90201
+0 01 400002c0 010 00000100 fc0ac1f4 f4a5cec7 3a520ef5 5aa08bee 4a2d5412
+0 10 400002f5 000 00001111 d846885a d846885a d846885a 89fd43b0 89fd43b0 89fd43b0 89fd43b0 4b5913ad 4b5913ad 4b5913ad 4b5913ad 3c9181f3 3c9181f3 3c9181f3 3c9181f3 d846885a
+0 10 40000516 001 00001111 9710734c 6810b1c8 6810b1c8 268c17a2 268c17a2 842879a5 842879a5 1202ba88 1202ba88 2de500c2 2de500c2 714650af 714650af 036444f6 036444f6 9710734c
+0 10 4000061a 001 00000011 c45e8a6b 96da17ae 96da17ae c45e8a6b
+1 01 40000100 010 00001001 a9b652d5 1000 9660865a 1111 f32df5fe 1110 0e6fc17d 1001 f3dbe1f8 1111 66afdea3 1111 e5175b65 1101 e2fc7d22 0111 786041d9 1011 6da5299d 1111 00000100 0028 9538ea1d 74811c24 0fa07a21 94e241ab cdca9cf1 f6613e7b 0c634b07 87a6ce95 fb4d071a f6828cde
+0 01 40000016 000 00000100 681f221d 681f221d ae04d7b5 ae04d7b5 ae04d7b5
+0 10 40000416 001 00000001 cc21eb72 cc21eb72
+1 01 40000584 001 00001101 f1a793a5 0001 f1a793a5 1100 609e7657 0011 609e7657 0000 897b98ab 0011 897b98ab 1100 95c82647 0001 95c82647 0100 3dec194c 0011 3dec194c 1100 d50b45d9 0010 d50b45d9 1100 867e7f39 0001 867e7f39 1100 00000580 0020 28c520fc 458a083e 2fbc2ea3 a035b268 fe8b5b87 96d252b5 21cfab69 34fdb872
+0 01 40000726 001 00001100 b2e882be 10098bff 10098bff 0a3bed37 0a3bed37 97006491 97006491 7ccf27ab 7ccf27ab 55cfed51 55cfed51 a50f16da a50f16da
+0 01 40000012 000 00000110 c34433a5 c34433a5 681f221d 681f221d 681f221d 681f221d ae04d7b5
+0 01 4000066c 001 00001011 63ddbfd2 63ddbfd2 0be4213a 0be4213a 8f0db8e0 8f0db8e0 5bb3f81a 5bb3f81a 3292295e 3292295e d3696857 d3696857
+0 10 40000762 001 00000111 2d975eac 7b4f3b41 7b4f3b41 03dea82e 03dea82e 071a83bc 071a83bc 2d975eac
+1 01 400004ee 000 00000011 ce710000 0100 ce710000 1000 0000fb1e 0001 0000fb1e 0010 000004e8 0010 fc9bf4f5 48d2719a 65a67790 0649668b
+1 01 400006a0 010 00000111 6d98fb5c 1010 00c286e0 1101 1fa9d53a 1101 234cc812 1011 c7590e33 1110 363bc849 1001 8aea9b8c 1101 30950a09 1111 000006a0 0020 08917c85 24750819 2c5d9fbf a69b718b d3dcb4aa 275017ce 0dcfcdeb 7dd00a32
+0 01 400006b8 001 00000010 8aeaca8c 8aeaca8c 30950a09
+0 10 40000171 000 00000001 a527dea8 a527dea8
+1 01 40000468 001 00001011 a345db67 0001 a345db67 1000 89df3570 0010 89df3570 0100 f7f028a5 0011 f7f028a5 1100 7db7bdb5 0010 7db7bdb5 1100 261937b5 0001 261937b5 1100 54d7dd4c 0011 54d7dd4c 0100 00000468 0018 e14787ae 65bc16f8 221f0889 48e10fb1 f2d3f6b6 113b510f
+1 01 40000418 010 00001001 fe162a2e 1010 811a30e0 0111 65416c84 1110 bff409d7 1111 10ae64cb 1001 ee473b13 1111 67ff373c 1110 9e20ede0 1111 d664280f 1111 3ac5a3d9 1110 00000418 0028 341cc5f2 9d02613b d908d9e4 1694d595 7b03670d 26297859 f5f3bcdc 729c546e 49bda5bd 942965d3
+0 01 400003ec 001 00001101 f20467b2 f20467b2 cdd52603 cdd52603 93117bb9 93117bb9 6415757f 6415757f 2e23ccaf 2e23ccaf e73264ea e73264ea 4be6f144 4be6f144
+1 01 40000470 001 00001110 3a82acba 0010 3a82acba 0100 47b2b4de 0011 47b2b4de 1100 5393d355 0011 5393d355 1100 3a4d141f 0011 3a4d141f 1000 bfcca1ee 0011 bfcca1ee 1100 79a34e57 0011 79a34e57 1100 79730d81 0001 79730d81 1100 00001187 0011 00000470 0020 7354ba09 ab9fb9da e1b99e87 d47c51ad f8ed886f 869bedad 1baf656d 520b1690
+0 10 4000039c 000 00000111 077db192 077db192 077db192 077db192 bc89a28a bc89a28a bc89a28a bc89a28a
+0 01 40000320 010 00000111 6552c2f3 71bd9a78 11e7b3e9 ed12a420 1a6da105 e054095d 89306d3e 2001d545
+0 01 40000621 000 00001010 56d73e62 56d73e62 56d73e62 b8ce9ec8 b8ce9ec8 b8ce9ec8 b8ce9ec8 eb99a4de eb99a4de eb99a4de eb99a4de
+1 01 40000168 010 00000001 7b9a701a 1011 8356927b 1110 00000168 0008 5a34e998 c1ffa7a1
+1 01 400004f3 000 00000001 50000000 0000 00000023 0001 000004f0 0008 bfadc190 52186093
+1 01 4000043c 010 00000000 c49de3fc 1110 00000438 0008 558fba77 e1746958
+1 01 40000677 000 00000011 87000000 1000 008bfb0e 0001 008bfb0e 0010 008bfb0e 0000 00000670 0010 7c52ff3e 801e5bf0 675b22fa f2b7c758
+1 01 400000dc 010 00000011 5fd83dd5 1111 7a1c1744 0101 bc95ef04 1111 6a08891a 0110 000000d8 0018 6b650e20 e653ef02 884ef367 82a32a63 7b48671f 24d83868
+0 01 400006fc 010 00001111 46a55606 968b2a26 308db014 010afac8 bc923b45 99a6962f 519016d8 4bbfd486 77863aa0 8d43856c b2e882be 10098bff 0a3bed37 97006491 7ccf27ab 55cfed51
+1 01 4000064c 010 00000000 20eac370 1011 00000648 0008 fe593e89 39f3fd64
+1 01 400003a2 001 00000110 6c1b0000 1100 a1ea36bc 0010 a1ea36bc 1100 f8fd285e 0000 f8fd285e 0100 8c8671f0 0011 8c8671f0 1000 000003a0 0010 42d8a888 bf273041 4fe1a390 80174802
+0 10 400001ee 001 00000111 f3307caa 9272d95a 9272d95a f4721e19 f4721e19 130d84ef 130d84ef f3307caa
+1 01 400004f8 010 00000011 c4b7f11a 1101 58ee172f 1111 114a4812 0111 644bdd17 1111 000004f8 0010 eb2cbc17 37b8e7df 181bc8d6 10604aa9
+0 10 40000234 010 00000011 948b65cf 73c11ff2 1092c0b7 9d14924c
+0 10 400002f5 000 00000001 d846885a d846885a
+0 01 40000020 010 00001100 c4a925f3 545596d8 12945278 7dc25d12 c541fc5b 1d74f289 f0a54d08 691f9013 0d828328 d79639e8 f13dd0e4 0028ccc8 1574b3f4
+1 01 4000006e 001 00000010 de9c0000 0100 1db1c9dc 0001 1db1c9dc 1000 00000068 0010 61b6387c a60d5b58 c59ba77f ee27bb44
+1 01 400000c1 000 00000111 612c2500 0010 612c2500 0100 612c2500 1000 f61c9a08 0001 f61c9a08 0010 f61c9a08 0100 f61c9a08 1000 00000025 0000 000000c0 0010 c087cc03 c08f0ff1 b3995e5a c6604265
+0 01 400004a9 000 00001000 19ced0fe 19ced0fe 19ced0fe 6e528dbd 6e528dbd 6e528dbd 6e528dbd e09418dd e09418dd
+1 01 400003b4 010 00001011 64a2d9d4 0111 abecb9fe 1111 9ad6d424 1110 cb94d54e 1100 e4ddaba2 0101 e53cbd34 1110 d0e8c7c0 1111 b85f14b7 0111 51dfb5bd 1111 bf2b9a0f 1111 804aafd4 1011 1f70859e 1010 000003b0 0038 fb2b8b32 09db79b8 61b8f595 95a21c15 81e9cfa5 72dce83c 54f6b134 4a2200f1 fc33c9b2 0d0ef6a8 3985f697 9e8a09ec eb2d2222 6cbf976e
+1 01 400001e1 000 00000001 004ae900 0010 004ae900 0000 000001e0 0008 cb0cc11d bcf011fd
+0 10 4000021a 000 00000111 d11c4d22 d11c4d22 b058c119 b058c119 b058c119 b058c119 d11c4d22 d11c4d22
+0 01 40000034 010 00000011 1d74f289 f0a54d08 691f9013 0d828328
+0 10 400000a8 010 00000111 e619c029 d3ed81bf 02859fce 801de999 a6220e17 0a269903 f0ecc00a 059971b1
+1 01 400005f6 001 00000111 3b5e0000 0100 605c867b 0011 605c867b 1100 724e3bc2 0010 724e3bc2 1100 e7d5c911 0010 e7d5c911 1100 00002d7b 0011 000005f0 0018 4eb2fe1d cedf58bf 0d5af99d 54667fea bf06fd2a 47f90e0b
+1 01 4000061a 000 00000001 9af20000 0100 9af20000 0000 00000618 0008 21b2978f 2fcdc5a1
+0 01 400001dc 000 00001100 dafd7f4f dafd7f4f dafd7f4f dafd7f4f 9272e95a 9272e95a 9272e95a 9272e95a f4721e19 f4721e19 f4721e19 f4721e19 130d84ef
+0 01 400006c4 010 00001101 3e81236c 632b7038 9f04d1a2 a9268564 1d6c45b9 6c8e60da 4f544b9b 9056361a 2affa623 8d97fcbc a6140c2a 602e3b47 80bcfc2f f095ac22
+0 01 4000041b 000 00001001 fe4a2ad7 091a30e0 091a30e0 091a30e0 091a30e0 65416c23 65416c23 65416c23 65416c23 bff409d7
+0 10 40000694 010 00000011 fee11210 4dbf614b b3bb4494 e9daad8e
+0 01 40000208 000 00001111 fc89ed5b fc89ed5b fc89ed5b fc89ed5b dde2c141 dde2c141 dde2c141 dde2c141 59d2ee19 59d2ee19 59d2ee19 59d2ee19 0bc815a9 0bc815a9 0bc815a9 0bc815a9
+1 01 400000f4 010 00001010 30df93e8 1110 4b2678ac 1111 90cf45bc 1111 055801cd 1101 96ee330f 1111 0bb3c1d9 1111 36c3229e 1010 2ada113d 0011 8101aa0e 1001 9c4a0e3d 1100 c23a163f 1111 000000f0 0030 aad3ff25 b9325d3c 0b462ab5 56b8466b a959b185 e4904248 95925db1 322cc0a5 629687d2 3141420a 00da7715 02493ba5
+0 10 400006de 000 00000001 4f544b9b 4f544b9b
+0 10 400005ca 001 00000111 e7d6aa01 8f648d2a 8f648d2a 7cba188f 7cba188f fa1c9728 fa1c9728 e7d6aa01
+0 01 400006bb 000 00000100 8aeaca8c 30950a09 30950a09 30950a09 30950a09
+1 01 40000658 010 00000001 1ea7ca85 1111 a1536ce0 0101 00000658 0008 ca5909b8 75882567
+1 01 40000731 000 00000110 d95db300 0010 d95db300 0100 d95db300 0000 0abf7a29 0001 0abf7a29 0010 0abf7a29 0100 0abf7a29 1000 00000730 0008 ae514382 9d690f66
+1 01 4000020e 000 00000110 a2e80000 0100 a2e80000 1000 b2f96499 0001 b2f96499 0010 b2f96499 0100 b2f96499 1000 000000e7 0001 00000208 0010 ff6a581f fb383c76 783fe07b 0fdbbe71
+1 01 40000274 000 00001011 26a1409e 0001 26a1409e 0010 26a1409e 0000 26a1409e 0000 c4057831 0001 c4057831 0010 c4057831 0000 c4057831 1000 24f9d4ba 0000 24f9d4ba 0000 24f9d4ba 0100 24f9d4ba 0000 00000270 0010 a24fcbdf 84508bb4 2bbe1159 89c1dcac
+0 01 400004b0 010 00000110 e09418dd fb78891e b5821d27 b9e11ed8 42409bc1 f8573ffa 9d1be688
+1 01 400005d4 000 00001010 beb443de 0001 beb443de 0010 beb443de 0100 beb443de 1000 cac93d93 0001 cac93d93 0010 cac93d93 0100 cac93d93 1000 000c05dd 0001 000c05dd 0010 000c05dd 0100 000005d0 0010 618bb411 a9fe4132 21f13a83 e5fe1090
+0 10 4000029a 000 00000111 6a47cfa5 6a47cfa5 ee02df89 ee02df89 ee02df89 ee02df89 6a47cfa5 6a47cfa5
+0 10 40000691 000 00001111 e9daad8e e9daad8e e9daad8e fee11210 fee11210 fee11210 fee11210 4dbf614b 4dbf614b 4dbf614b 4dbf614b b3bb4494 b3bb4494 b3bb4494 b3bb4494 e9daad8e
+1 01 4000079c 010 00000111 39db3fdb 1011 adad9c50 1111 a51a8769 1010 c2d06d52 1011 b8360d19 1111 14054b0c 1111 68c57e77 0011 3925537d 1111 00000798 0028 685f2723 d92c90bb 178f269c 4269b58e 0f38e0dd 7fdacece a2321c82 4b0d0feb 27a7a54d cbbae993
+1 01 400005bd 000 00001011 1b47e300 0010 1b47e300 0000 1b47e300 1000 241cbb77 0000 241cbb77 0010 241cbb77 0100 241cbb77 0000 de731c21 0001 de731c21 0010 de731c21 0100 de731c21 1000 00000068 0001 000005b8 0018 d874b208 f1bf9c62 99de86c7 a3a22cab e4b9b8ed 7899b82c
+1 01 400007a2 000 00000010 03380000 0100 03380000 1000 000000d7 0001 000007a0 0008 b71927e7 4354aaec
+1 01 400005a3 000 00000000 d2000000 1000 000005a0 0008 539a712f 4e1840bd
+1 01 400000d0 010 00000011 e9bb7130 1001 9453306c 0110 73929ac1 1110 44ff7236 1111 000000d0 0010 6f339ba5 71beb2e9 cb52fa40 0e4fbe1f
+1 01 400002e6 000 00000000 002c0000 0100 000002e0 0008 1e077cca 8971e7e7
+1 01 400007f5 000 00000001 00a03100 0000 00a03100 0100 000007f0 0008 356a79a2 d7637dd3
+0 01 4000050c 010 00001000 714650af 036444f6 9710734c 6810b1c8 268c17a2 01d58156 0a7d0c04 112ecb96 bbc75470
+0 10 40000380 010 00000001 83ee0d81 46eed6eb
+1 01 40000439 000 00001011 7dfce300 0010 7dfce300 0100 7dfce300 1000 0b96201d 0001 0b96201d 0000 0b96201d 0000 0b96201d 1000 06891547 0000 06891547 0010 06891547 0000 06891547 1000 0000003f 0000 00000438 0010 f220cc39 27aca0da 025c4679 e844ef82
+0 10 400003d4 000 00001111 51dfb5bd 51dfb5bd 51dfb5bd 51dfb5bd bf2b9a0f bf2b9a0f bf2b9a0f bf2b9a0f 80e6afd4 80e6afd4 80e6afd4 80e6afd4 725f14b7 725f14b7 725f14b7 725f14b7
+0 01 4000022c 001 00000110 8417351f 8417351f 9d14924c 9d14924c 948b65cf 948b65cf 73c11ff2
+0 01 40000020 010 00000010 c4a925f3 545596d8 12945278
+1 01 400000f8 010 00001111 09a80c62 0110 f4e9dfbf 1110 1f6fe0a7 1101 f18a8c01 1101 1d04d048 1101 80ce1db0 0011 afcba6be 1001 74b1c701 1111 24971c6c 0100 217dc340 1000 067cd34a 0011 d4e11130 1110 67ce366b 1111 ea91fff8 1111 743a0c73 1011 02e4bb01 1111 000000f8 0040 023611c6 2aa7b0bd 077900c5 754725ee a8745d83 76506a16 d268e5e9 8e5c5906 f4bce5b8 8d0a5536 11b06bd7 8b7856e3 2f4337cf 076bffda 0f6c9c8e 70638d59
+1 01 40000282 001 00001101 493b0000 1100 48a22610 0000 48a22610 1100 eaf0ae70 0011 eaf0ae70 1100 e70bb2fc 0011 e70bb2fc 1100 f43b3cfc 0011 f43b3cfc 1000 96669858 0011 96669858 1100 8ed58703 0010 8ed58703 1100 0000b504 0011 00000280 0020 29483165 bb77efa4 a0ee2940 3bcd8fd4 ab144247 424c3c41 f0f0a492 57b5ed31
+1 01 40000508 000 00001010 7a6cca76 0001 7a6cca76 0010 7a6cca76 0000 7a6cca76 1000 9329b820 0001 9329b820 0010 9329b820 0000 9329b820 1000 0037511d 0000 0037511d 0000 0037511d 0100 00000508 0010 94cedbc6 c9acb322 c74f7652 bfbc558f
+0 01 400006fe 001 00001100 46a55606 968b2a26 968b2a26 308db014 308db014 010afac8 010afac8 bc923b45 bc923b45 99a6962f 99a6962f 519016d8 519016d8
+0 01 40000110 001 00000011 afdb11be afdb11be 74b1c701 74b1c701
+0 01 40000247 000 00000011 e2733d3e 73c0a396 73c0a396 73c0a396
+1 01 4000072e 000 00000011 fabc0000 0000 fabc0000 0000 0000f1a9 0001 0000f1a9 0010 00000728 0010 25fac4fc 0949d273 458e772d 0a234fed
+0 10 400007cc 000 00001111 57fefb7c 57fefb7c 57fefb7c 57fefb7c af76a417 af76a417 af76a417 af76a417 4343e03c 4343e03c 4343e03c 4343e03c ef891068 ef891068 ef891068 ef891068
+1 01 400001b0 000 00001111 283a770b 0001 283a770b 0010 283a770b 0000 283a770b 1000 16f889b8 0001 16f889b8 0010 16f889b8 0100 16f889b8 1000 1b22cdee 0001 1b22cdee 0010 1b22cdee 0000 1b22cdee 1000 0a2544a0 0001 0a2544a0 0010 0a2544a0 0100 0a2544a0 1000 000001b0 0010 ccf9cd34 accd2ee3 cd53a11a 4e3110d9
+0 10 400007d8 010 00000011 52173456 0d4af6ec adce6653 e1edf84b
+1 01 40000490 010 00001000 9fcccb99 0101 716e462a 1110 4d5c25a8 1111 4dce573c 1110 3e911497 1011 87829ce2 1000 28ae3bef 1111 2bdc45cf 1010 5b470849 1111 00000490 0028 ddfee9ef 48f6a7a5 2f76cc53 6686f9a7 2555354f c327c6c1 0d1f74da e20bbf8a 4ef42ffd 278b23ca
+0 01 40000330 010 00000000 1a6da105
+1 01 40000256 001 00001101 68a50000 0100 4c7efee7 0000 4c7efee7 1100 3d378a1e 0001 3d378a1e 1100 62e7d83e 0011 62e7d83e 1100 df06e970 0011 df06e970 1100 b507488f 0011 b507488f 1100 f83cb66b 0010 f83cb66b 1100 00003868 0001 00000250 0028 b92fe72f 503b414c 491253a6 9a4c1918 8ae02e49 a60c77f7 c6c24386 4a244abe 1022229e a154f8f0
+1 01 40000136 001 00000010 b2a30000 1100 dc2c876d 0011 dc2c876d 1000 00000130 0010 712c1f6a a1b35120 a6a0df69 a58e8575
+1 01 400005a0 010 00000111 c887934c 0001 4bd91eb2 1010 8492a7a0 1111 66c28465 1101 2c4951a5 0011 bc98f1a6 0101 d340dd48 0011 f203ad96 1101 000005a0 0020 be2cb128 ae41a111 bfbfa9b3 658c612e 06c36365 82453c3c 56ebede5 f9e76c05
+1 01 40000258 010 00001010 de412bb2 0101 01d388f9 0011 ae906638 1011 7bfa824c 1111 ef879208 1111 6e066276 0100 04a4a34c 0101 da665d95 1111 4d1bd28c 1010 3e323bef 0111 7fae9c4e 1011 00000258 0030 6792a3d2 4b81979f 0b7e4a23 5d06a9c1 f38d4796 e3c4b77b 9552ba9f ac805a12 a63ad4ef 325a3dbb 8a461e9a 0d897691
+0 01 400005a8 010 00000001 8492a7a0 66c2a265
+1 01 400006a1 000 00001111 5407a100 0010 5407a100 0000 5407a100 0000 354e6bb5 0001 354e6bb5 0010 354e6bb5 0100 354e6bb5 1000 8abab0c6 0001 8abab0c6 0010 8abab0c6 0000 8abab0c6 1000 c313ff92 0001 c313ff92 0000 c313ff92 0000 c313ff92 1000 0000007b 0000 000006a0 0018 e1e574e2 eeecf8ca 2b9586ad f9a21ad9 d3dcb4aa 275017ce
+0 10 40000320 010 00000001 6552c2f3 71bd9a78
+0 01 400005f4 001 00000011 fb5e4f0a fb5e4f0a 605c867b 605c867b
+0 01 40000188 010 00000111 a9413897 fb93c28e c1cc1904 796be6e4 95a7611d 14276fed 62c81b89 a9324575
+1 01 4000066c 000 00001010 0fa13bb0 0001 0fa13bb0 0000 0fa13bb0 0000 0fa13bb0 1000 c7ae27e2 0001 c7ae27e2 0000 c7ae27e2 0100 c7ae27e2 1000 0024ebf5 0001 0024ebf5 0010 0024ebf5 0100 00000668 0010 059b996c 01a26cf8 6334c51c 241bd547
+1 01 40000020 001 00001100 abb45a2d 0011 abb45a2d 0100 c6117d53 0010 c6117d53 1100 eb6d9254 0011 eb6d9254 1000 f2f93d34 0001 f2f93d34 1100 ef822505 0010 ef822505 0000 27a073a8 0010 27a073a8 1100 0000b7e8 0011 00000020 0020 ce5763a1 c838158f 200de696 cfb1e5d9 d5cbf7fb 9d755cb8 6d1d81e2 8ad60dac
+0 01 4000052c 010 00000100 bbc75470 22eb9e6f 3511c4da 901d7e87 030a22d6
+0 10 40000540 010 00000111 5fffba86 fb5845b6 1b5c7386 807fe6c3 5075a1b3 9e4038f7 9c6eb745 68b724f4
+0 10 40000272 001 00000111 e0a43e4c da665d95 da665d95 4dd2d231 4dd2d231 eb323bef eb323bef e0a43e4c
+0 10 4000053c 010 00000111 030a22d6 01d58156 0a7d0c04 112ecb96 bbc75470 22eb9e6f 3511c4da 901d7e87
+1 01 40000770 000 00001001 7998f3e6 0001 7998f3e6 0010 7998f3e6 0100 7998f3e6 1000 8439b682 0001 8439b682 0010 8439b682 0100 8439b682 1000 00008815 0001 00008815 0010 00000770 0010 d8738dce c20aeddb 50362dfc d46ee720
+1 01 400000b6 000 00001110 8d990000 0000 8d990000 1000 b5ecbb64 0001 b5ecbb64 0000 b5ecbb64 0100 b5ecbb64 0000 6172fee5 0001 6172fee5 0010 6172fee5 0100 6172fee5 1000 8cb585f3 0001 8cb585f3 0010 8cb585f3 0100 8cb585f3 1000 00000003 0001 000000b0 0018 d5463e90 d2676928 3d424e82 db4e0861 b30d43c8 df38e6de
+0 01 4000002c 010 00001111 f2f95d34 c541255b 27a07389 f0a5b7e8 691f9013 0d828328 d79639e8 f13dd0e4 0028ccc8 1574b3f4 734e1508 41715375 d278c8d0 4e33a0da 25d0f860 20cefad8
+1 01 4000042a 000 00001010 254c0000 0100 254c0000 1000 afc8d09f 0001 afc8d09f 0010 afc8d09f 0000 afc8d09f 1000 dcbc17d9 0001 dcbc17d9 0010 dcbc17d9 0100 dcbc17d9 0000 00000097 0001 00000428 0010 2661c56d 6f35e5d8 c83b9faf 0e96c1d8
+1 01 400001bc 001 00001101 7c5bd6b6 0011 7c5bd6b6 1000 42c4c683 0011 42c4c683 1100 343ea867 0000 343ea867 1100 b9021966 0001 b9021966 1100 d80d337d 0011 d80d337d 1100 59459a36 0010 59459a36 1100 ee86d9ae 0001 ee86d9ae 1100 000001b8 0020 e0ddaac2 e866e030 ebb7978e a3c0b25a 3ec4618c fcb975a1 eeb81a1e 69b62a8e
+0 10 40000514 010 00000111 9710734c 6810b1c8 268c17a2 844a4812 644bdd17 7ae5ca76 9346b820 033744f6
+0 10 40000342 001 00000111 06408b77 cd2d30b6 cd2d30b6 453e2821 453e2821 6cb9401a 6cb9401a 06408b77
+0 10 40000240 010 00000001 8dfec743 e2733d3e
+0 10 4000067c 010 00000011 3292295e c7ae21e2 8724ebf5 5bb3fb0e
+0 10 40000308 001 00000011 b6d00609 b6d00609 bb80d481 bb80d481
+1 01 40000084 010 00001000 f0fd8455 1111 0fe80a2a 0011 ec0ad7ec 1111 2fa15005 1011 2834da5f 0010 0232db21 0111 88b09823 1011 642148c3 0011 30126e24 1011 00000080 0028 fde7ed8c ea7838ba e061b417 987fe444 7e1f62df 0ab1982f a0ea5a2b 329c4b9b 5c8e01f2 e0ef684f
+1 01 40000690 001 00001111 23b9033a 0001 23b9033a 1100 dba232b6 0011 dba232b6 1100 fb2d957e 0011 fb2d957e 1100 dc30e325 0010 dc30e325 1100 57522c08 0010 57522c08 1100 291b5534 0011 291b5534 1000 e13eb6ac 0011 e13eb6ac 1100 4ea74788 0010 4ea74788 1100 00000690 0020 d913c5a7 d3dc6c73 ced465d9 e533be9b 74a7cef9 c0f8e14c 4ecf311c 7bc31e9c
+0 01 4000004c 010 00000100 0028ccc8 1574b3f4 734e1508 41715375 d278c8d0
+1 01 400005f0 010 00000011 8e844a56 1011 4fa22c41 1101 a5536aa7 1111 e403f796 1101 000005f0 0010 51d56ff5 1e7b07d2 3c1e605e f8e8d959
+1 01 400004b4 010 00000101 0209ae67 0100 42c24184 0111 93620d2e 1111 a2031428 1001 88775341 0010 ef00317f 0110 000004b0 0020 7b6dcdf1 ffa81017 97d6e94c f2c22c18 197c66c6 bb600ae6 53fdc5f5 eb9b1a48
+0 01 400003e2 001 00001001 1f238556 7de54452 7de54452 3476efc8 3476efc8 f20467b2 f20467b2 cdd52603 cdd52603 93117bb9
+1 01 40000506 000 00001101 5e000000 0000 5e000000 0000 43f7b16e 0001 43f7b16e 0010 43f7b16e 0000 43f7b16e 1000 2b2c5af2 0001 2b2c5af2 0010 2b2c5af2 0100 2b2c5af2 0000 e7cd8ec5 0001 e7cd8ec5 0000 e7cd8ec5 0000 e7cd8ec5 1000 00000500 0018 181bc8d6 10604aa9 538dfa27 7220131b 2d4254da 1e1bba58
+1 01 400004a7 000 00001010 65000000 0000 326479c6 0001 326479c6 0010 326479c6 0100 326479c6 1000 bac9811b 0001 bac9811b 0010 bac9811b 0100 bac9811b 1000 00004c8f 0001 00004c8f 0010 000004a0 0018 2555354f c327c6c1 73f91758 a58cc8cb bbb0d6a6 f17f5ed0
+0 10 40000236 001 00001111 948b65cf 73c11ff2 73c11ff2 1092c0b7 1092c0b7 b8b7f522 b8b7f522 3c4408bc 3c4408bc 902677c2 902677c2 8417351f 8417351f 9d14924c 9d14924c 948b65cf
+0 01 40000764 000 00000100 7b4f3b41 7b4f3b41 7b4f3b41 7b4f3b41 03dea82e
+1 01 400005da 001 00000010 9dbf0000 1100 be869684 0011 be869684 1100 000005d8 0008 43c5b4bc 42580ced
+0 10 40000574 001 00000111 61feb829 61feb829 f65e2f88 f65e2f88 6e366870 6e366870 8fe7f89b 8fe7f89b
+1 01 400007b4 000 00001001 0e3083e9 0001 0e3083e9 0000 0e3083e9 0000 0e3083e9 0000 ff555180 0001 ff555180 0000 ff555180 0100 ff555180 1000 0000376b 0001 0000376b 0010 000007b0 0010 67cf6dfe f11dc6b7 8ae904c3 4432b3c2
+0 01 40000088 010 00000100 fa7d0a2a ec0ad7ec 2f8f5005 7d5bda4c b732db21
+1 01 40000702 001 00001001 394e0000 1100 692c74d0 0011 692c74d0 1100 076e6138 0001 076e6138 1100 22e70b5a 0011 22e70b5a 1100 547190a6 0011 547190a6 1100 0000b940 0011 00000700 0018 45b8ae54 3a04db59 715e2941 c4347182 350b7195 2f96e364
+0 01 400006e2 001 00000010 9056361a 2affa623 2affa623
+1 01 4000046c 000 00000010 00125d1f 0001 00125d1f 0010 00125d1f 0100 00000468 0008 83ce59fc 711a3e34
+1 01 400002a0 001 00000100 7620e7fc 0011 7620e7fc 0100 72503a8c 0011 72503a8c 1100 0000b52c 0011 000002a0 0010 152e3ace 52bea8b7 e88f53b5 d77fbb3f
+0 01 4000004a 001 00001000 f13dd0e4 0028ccc8 0028ccc8 1574b3f4 1574b3f4 734e1508 734e1508 41715375 41715375
+1 01 400004b0 010 00001010 acb76135 0111 6c00b02b 1111 fc755e88 1111 d89bedb7 0111 7210277e 1101 91854e08 1010 e111bc69 0011 1ae3d445 1111 f4fd809d 1111 89110710 1111 4b8aed14 1111 000004b0 0030 4a8517a4 90cfa0b8 5ed76a04 17f1215e 7fb0f2af 4ae297b8 f5b6b74d 28e29bf4 20a7ef02 69113a8f f108eb9c 2717beaa
+0 10 40000111 000 00000011 afdb11be afdb11be afdb11be afdb11be
+0 01 400005fa 000 00000101 a5536aa7 a5536aa7 e4033b96 e4033b96 e4033b96 e4033b96
+0 01 400006cc 010 00001110 9f04d1a2 a9268564 1d6c45b9 6c8e60da 4f544b9b 9056361a 2affa623 8d97fcbc a6140c2a 602e3b47 80bcfc2f f095ac22 46a55606 394e2a26 692c74d0
+0 10 40000014 001 00000001 681f221d 681f221d
+0 01 40000664 010 00001010 8ce66376 149b1b80 0fddbfb0 c7ae21e2 8724ebf5 5bb3fb0e 3292295e d3696857 2ff068b9 cde6973e 2e0b53df
+0 10 400005cc 001 00001111 8f648d2a 8f648d2a 424a58cf 424a58cf beb443de beb443de 9dbf3d93 9dbf3d93 be869684 be869684 7c1cbb8f 7c1cbb8f de731c21 de731c21 e7d6aa68 e7d6aa68
+1 01 400001ae 001 00000111 adc60000 1100 cef323fc 0010 cef323fc 0000 979df876 0010 979df876 0100 a9f2c773 0011 a9f2c773 0100 000029dc 0010 000001a8 0018 3be14558 1291bcad b7991e8b 74de6d58 f3d6f853 51d096bc
+0 10 400004ec 010 00001111 ce71e619 d7dbfb1e 59ea1423 c4b7d31a 58ee172f 72109b7e 91574efa 9d00bc69 1ae3d445 f4fd809d 89110710 4b8aed14 ab43cdee d3823912 5230126b 5dcf0426
+0 10 400004e8 010 00001111 5dcf0426 ce71e619 d7dbfb1e 59ea1423 c4b7d31a 58ee172f 72109b7e 91574efa 9d00bc69 1ae3d445 f4fd809d 89110710 4b8aed14 ab43cdee d3823912 5230126b
+1 01 400003c9 000 00001010 65a9fe00 0010 65a9fe00 0100 65a9fe00 1000 a9a835da 0001 a9a835da 0010 a9a835da 0100 a9a835da 0000 1e1979e5 0001 1e1979e5 0000 1e1979e5 0000 1e1979e5 1000 000003c8 0010 66ca6ccc 8221f17f a74d6191 7188c4d4
+1 01 4000011d 000 00000011 38c9ad00 0010 38c9ad00 0000 38c9ad00 1000 000000fe 0000 00000118 0010 e7f66a3b 65d41a15 11b06bd7 8b7856e3
+1 01 40000570 010 00000011 70d30ade 1101 ba6f00dc 0011 5364cd3c 1101 23561f41 1001 00000570 0010 12725c91 15a0c866 5ef4c6b2 2615af65
+0 10 40000096 001 00001111 7d5bda4c b732db21 b732db21 88aa9823 88aa9823 e43f4d29 e43f4d29 f0fd8455 f0fd8455 fa7d0a2a fa7d0a2a ec0ad7ec ec0ad7ec 2f8f5005 2f8f5005 7d5bda4c
+0 10 4000073a 001 00000001 55cfed51 55cfed51
+0 10 400004b0 010 00001111 5bb76135 6c00b02b fc755e88 939bedb7 bfcca1ee 79a34e57 79735981 70c91187 80cc9699 716e4616 4d5c25a8 4dce5741 3e011497 87c6f878 326479c6 bac9811b
+0 10 400002d0 010 00000011 4a2d5412 9ec0d260 17803572 ac88fe46
+1 01 4000001a 000 00000000 00000000 0100 00000018 0008 c4cc8e6a ae4e80a4
+1 01 40000604 010 00000001 27b36b6c 1111 4c67fb7d 1101 00000600 0010 2ac1e783 3c000fb2 04804083 dafdc608
+0 01 40000488 001 00000110 79735981 79735981 70c91187 70c91187 80cc9699 80cc9699 716e4616
+0 01 400003a8 010 00000011 edfdf098 8c6471f0 69e8b46b 70a2d9d4
+0 10 400001d4 001 00000111 ee86f5ae ee86f5ae 86eb89b6 86eb89b6 dafd7f4f dafd7f4f 59459abe 59459abe
+0 10 40000258 010 00000111 4c4171b2 3d3788f9 8dfec743 e2733d3e 73c0a396 9b5c77c4 bec387aa 7aa599df
+1 01 4000058c 001 00000101 54245d3b 0011 54245d3b 1000 5191e12a 0011 5191e12a 1000 36a6836a 0001 36a6836a 1100 00000588 0010 89866549 f1cd0213 73f24dc7 8003d367
+0 01 4000001d 000 00001011 dd639b84 dd639b84 dd639b84 c4b45a2d c4b45a2d c4b45a2d c4b45a2d c6117dd8 c6117dd8 c6117dd8 c6117dd8 eb949254
+0 10 40000477 000 00000111 47b2b4de f782aca5 f782aca5 f782aca5 f782aca5 47b2b4de 47b2b4de 47b2b4de
+1 01 4000059c 000 00000101 a8ef3c40 0001 a8ef3c40 0010 a8ef3c40 0100 a8ef3c40 1000 0000c720 0001 0000c720 0010 00000598 0010 f30ea4d6 9cbea756 03b07ad7 540e1656
+0 10 4000001e 001 00000111 dd639b84 c34433a5 c34433a5 681f221d 681f221d ae00d7b5 ae00d7b5 dd639b84
+1 01 4000061c 010 00000110 5a6f355b 1111 f58b6d8d 1111 b9fdf990 1111 aed8c5d8 0010 8fa0e6ec 1010 2a7fc216 1000 49ebcdf8 1010 00000618 0020 5dff12d9 aacf416b 1e007715 5065b259 177e1d46 e8ce3774 8ba61441 dbdd9d11
+0 10 4000078e 001 00000111 3c646438 912ed6dd 912ed6dd b637848e b637848e 1799f707 1799f707 3c646438
+0 01 40000218 010 00000100 d11c4d22 b058c119 b8b7f522 3c4408bc 902677c2
+1 01 40000330 000 00001010 79c2ca19 0000 79c2ca19 0010 79c2ca19 0100 79c2ca19 1000 181c93f1 0001 181c93f1 0010 181c93f1 0000 181c93f1 0000 00c4c230 0001 00c4c230 0010 00c4c230 0100 00000330 0010 66687cf8 803d0b0f fe6b3e56 d4b1ba96
+0 10 40000603 000 00000111 e7d5c933 27b36b6c 27b36b6c 27b36b6c 27b36b6c e7d5c933 e7d5c933 e7d5c933
+0 10 40000396 000 00000011 ae0da565 ae0da565 ae0da565 ae0da565
+1 01 40000628 010 00000000 7440c45b 1110 00000628 0008 8c0c6356 db915437
+1 01 40000446 001 00000010 71290000 1100 b0bf7a60 0010 b0bf7a60 1000 00000440 0010 5aabf7b4 406abf8e fe2f8933 539eab85
+0 01 4000026f 000 00001001 f806b6d5 e0a43e4c e0a43e4c e0a43e4c e0a43e4c da665d95 da665d95 da665d95 da665d95 4dd2d231
+1 01 400007b2 000 00001011 78e30000 0100 78e30000 1000 a5d21529 0001 a5d21529 0010 a5d21529 0100 a5d21529 0000 8514e6d0 0001 8514e6d0 0010 8514e6d0 0100 8514e6d0 1000 0000d91b 0001 0000d91b 0010 000007b0 0010 d356463b b92658a8 604d7fc9 f7c6b5c9
+1 01 40000294 001 00001011 183cdda9 0011 183cdda9 1100 d3860ae9 0011 d3860ae9 1000 a82c8447 0011 a82c8447 1000 74554959 0011 74554959 1100 2f75373e 0011 2f75373e 1000 87a40515 0011 87a40515 1000 00000290 0020 35c97ce9 47b3e417 702c522d 58c180fc 43f68687 700cb692 31b3cfe8 5cd1dac0
+1 01 40000728 010 00001100 5b4bf225 0111 f4f8fa7c 1111 16368ac5 1111 da58f440 1011 4de88fe6 1111 a6986cab 0111 9eb6f460 0010 2085f863 0110 19e73690 0111 5f3f322b 1111 69130680 1111 9b10f687 0011 d3d20ed9 1111 00000728 0038 a2b70ff5 dde6cde2 871084a5 d0dad96c 93ac9440 eaf4a417 775bb8ce aa70578e 0293801f b4388bdd 0d09608a 9ea0bc08 04edf390 ef9d9be4
+1 01 400000a4 000 00001111 e28274d7 0000 e28274d7 0010 e28274d7 0100 e28274d7 1000 ba61f5ff 0001 ba61f5ff 0010 ba61f5ff 0100 ba61f5ff 0000 9de064c9 0001 9de064c9 0010 9de064c9 0100 9de064c9 1000 679a4c5b 0001 679a4c5b 0000 679a4c5b 0100 679a4c5b 1000 000000a0 0018 1a7f66ae 80c53065 19a19ee9 785e412e 8f2b9b88 588d425b
+1 01 400004ee 001 00001110 39be0000 0100 a60c88d7 0011 a60c88d7 0000 4d2ab1fb 0001 4d2ab1fb 1100 580ca68f 0011 580ca68f 1000 0b7960cc 0001 0b7960cc 0100 3f801d93 0011 3f801d93 0100 63886bc4 0010 63886bc4 0000 591e3321 0011 591e3321 0100 000004e8 0028 5def9ebe bee0db75 b06c881a 3c5926ee 646f3bcb cadacff7 40177338 6fa477c8 e2a9e6cf e99f0ec5
+0 01 4000071f 000 00000011 77863aa0 8d43856c 8d43856c 8d43856c
+1 01 400003c5 000 00000100 0227ca00 0000 0227ca00 0000 0227ca00 1000 0000ec35 0001 0000ec35 0010 000003c0 0010 e1433d38 55644e3d 46ad56fe 4ba50e6d
+0 10 400006fe 001 00000111 46a55606 602e3b47 602e3b47 80bcfc2f 80bcfc2f f095ac22 f095ac22 46a55606
+0 01 4000027c 001 00001011 eb323bef eb323bef 7f3b9c4e 7f3b9c4e 48a29df2 48a29df2 eaf0ae70 eaf0ae70 e70bb2fc e70bb2fc f4163cfc f4163cfc
+1 01 4000016d 000 00000111 7f6e6d00 0000 7f6e6d00 0100 7f6e6d00 0000 b6e72bea 0001 b6e72bea 0010 b6e72bea 0000 b6e72bea 1000 000000fa 0001 00000168 0010 7575bf80 3778c62a c6c3c7cd 9312b8cd
+1 01 40000234 010 00000111 0f92181d 1111 925e45de 1111 ceebd3bd 0110 b0aef603 1111 3a18ef91 0111 a263dca4 1010 0526af5e 1111 dae7a1ac 1110 00000230 0028 54e29b29 f9b5ec4e 9bd61970 06fd8d4e c277179e 9e707878 cb795119 b6d500ab 40f83dfe 461ef364
+0 10 400006e7 000 00000001 2affa623 2affa623
+1 01 40000170 001 00001011 82ae0104 0011 82ae0104 1100 ac6ecfb9 0011 ac6ecfb9 1100 4055228f 0011 4055228f 0100 b26c10fa 0010 b26c10fa 1000 16bbeff9 0010 16bbeff9 1000 9f7cb05f 0011 9f7cb05f 0100 00000170 0018 1ad36ce5 21f217f7 f6cf9c93 023e2178 9299481f ecc580ae
+1 01 40000538 010 00001110 9c2cedf3 0101 043d8159 1111 eeaa3a90 1011 548643dd 1111 8f4adb08 1000 58811fd4 1111 b3f36526 0111 19d030db 0111 f3f47aa7 1110 531584b0 1111 f1132acd 1111 7efd5948 1111 d5723b4c 1111 075bf203 1011 7ea51a86 1111 00000538 0040 6f92146f e4f37af1 11b62400 cba1ff22 33fc5588 4baa4e1a 8310bd0a 9a951c97 acf2ec40 16e7ee83 b6af1e64 242ceb7f d75e5490 be771dc7 d0f7b328 6e50db6e
+1 01 400006d4 010 00000000 d474d466 1111 000006d0 0008 3432b7c8 6d5a2fc2
+1 01 400004c3 000 00001101 39000000 1000 f026d6cf 0001 f026d6cf 0000 f026d6cf 0100 f026d6cf 0000 f0e375c0 0000 f0e375c0 0010 f0e375c0 0000 f0e375c0 1000 00b4599b 0001 00b4599b 0010 00b4599b 0100 00b4599b 1000 0000003f 0001 000004c0 0018 c24e5325 e55b099f f17feb20 8f0a417e 51016802 186b7c65
+1 01 4000014c 000 00001100 814043e2 0001 814043e2 0000 814043e2 0100 814043e2 1000 fd322d19 0001 fd322d19 0000 fd322d19 0100 fd322d19 1000 91d69a2a 0000 91d69a2a 0010 91d69a2a 0000 91d69a2a 0000 00000047 0000 00000148 0018 c2fb894d 43da9fdc 1a3d6f14 3a2e10ad e812c77d 49afba0c
+1 01 40000202 001 00001011 f86b0000 1000 d67e6704 0000 d67e6704 1100 7583ae87 0010 7583ae87 1100 64bc0c21 0001 64bc0c21 0000 5ece0f20 0011 5ece0f20 0100 63d1e1eb 0011 63d1e1eb 1000 0000e18a 0000 00000200 0020 92ad88e0 9f9581b1 28bd5766 454edcdd 17b2bea8 44d850dc 0d2ddd69 d05e231b
+0 01 4000073c 001 00001100 a5986cab a5986cab 3cb2f4ee 3cb2f4ee 8f85f8b0 8f85f8b0 6be73690 6be73690 5f3f322b 5f3f322b 69130680 69130680 4dfdf687
+0 10 40000355 000 00000011 cc54489e cc54489e cc54489e cc54489e
+1 01 40000239 000 00000010 484cd200 0010 484cd200 0100 484cd200 1000 00000238 0008 590e80f2 9f1b4caf
+0 01 400002b6 000 00000100 11c2f9b3 11c2f9b3 a2707198 a2707198 a2707198
+0 10 40000689 000 00000111 cde6973e cde6973e cde6973e 2e0b53df 2e0b53df 2e0b53df 2e0b53df cde6973e
+0 01 400000c7 000 00000010 f61c9a03 90e3e129 90e3e129
+1 01 40000710 010 00001100 57ffa588 1110 052077e0 1111 74f7c555 1111 9a67ec0c 1101 0ed7d7b9 0110 88384025 1111 f50db62b 0111 470ef102 1101 521e08f3 1110 6b86aab7 1011 be0c9e25 1011 979946ca 0011 f212fc03 1111 00000710 0038 d94089d1 aeeed62e f4cd23c5 e2e31a11 6cc27edd f24fa29a a358eae8 50e25b33 41e88121 c7c8ad11 3ae3c13a 01d51f2b 4ed5cab0 a022fabc
+1 01 4000046e 000 00000101 e7cb0000 0100 e7cb0000 1000 67ba8d33 0001 67ba8d33 0010 67ba8d33 0100 67ba8d33 0000 00000468 0010 ceb4612f cc5d1154 9a8ebb6f 938d87ba
+1 01 40000046 001 00000011 95b00000 1100 ef3f8614 0011 ef3f8614 0000 0000abcc 0000 00000040 0010 8a8c161f 73f0ac41 5764ff84 81ba1c5a
+0 10 40000428 000 00000001 254cc4cb 254cc4cb
+0 10 4000053a 000 00001111 902c7ef3 902c7ef3 043d8159 043d8159 043d8159 043d8159 22eb9e6f 22eb9e6f 22eb9e6f 22eb9e6f 3511c4da 3511c4da 3511c4da 3511c4da 902c7ef3 902c7ef3
+0 01 400007c8 001 00001010 ef891068 ef891068 57fefb7c 57fefb7c adce6653 adce6653 e1edf84b e1edf84b 52173456 52173456 0d4af6ec
+0 01 40000290 001 00001001 f4163cfc f4163cfc 183cdda9 183cdda9 d3d50ae9 d3d50ae9 a8028447 a8028447 74554959 74554959
+0 01 40000491 000 00000111 80cc9699 80cc9699 80cc9699 716e4616 716e4616 716e4616 716e4616 4d5c25a8
+1 01 4000039c 001 00000100 91583070 0011 91583070 1000 c2e9491b 0010 c2e9491b 1100 0000c83b 0011 00000398 0010 7128f729 b4951acd 2debd735 b566dbc8
+1 01 40000232 001 00000010 e5e40000 1000 edad759f 0011 edad759f 1100 00000230 0008 38214b62 938128be
+1 01 40000238 010 00001111 cf86b834 1111 31d9ce21 0011 c4f75981 1111 b8b2c9bb 1101 9ad30920 0011 3ffb33a5 1111 edf14cd2 1011 8e2b9522 1000 08703ea0 1000 eb9935c5 1111 f24c8249 1110 8b3918d4 0111 d60d62de 1111 b1667b23 0001 7edaa08c 1111 903190b3 1001 00000238 0040 3705ffb7 7fc39261 3613dc5e d0fbba97 f1c94694 40238a8d 047af6f9 847999ad 48bc85ae b952925f 087c8caf 91f73172 d46aaf47 d724c1da 5e330b08 4dec1965
+1 01 40000564 001 00001101 babe6367 0011 babe6367 1100 5a55d398 0010 5a55d398 1100 88d0bcde 0011 88d0bcde 1100 edf65050 0000 edf65050 1000 600b6748 0000 600b6748 1100 39b98622 0001 39b98622 1100 eaf23b49 0001 eaf23b49 1000 00000560 0020 b7bd30ab 38f88474 3fcc31d9 8f190612 dd834337 b61d6e49 f3392a30 87d49399
+0 10 40000249 000 00000011 a2c00920 a2c00920 a2c00920 a2c00920
+1 01 40000658 010 00000111 52ecbefc 1110 aa96d381 1011 e2c7336f 1001 edd00844 0011 2d3b3933 1101 9aafae45 1101 8a5be964 1101 60ad974a 0111 00000658 0020 a9a85287 5429e32c 975c20ee 07a22854 7ee0c6ac e79e3a5d 65c99fac fd73a63f
+1 01 40000484 001 00001011 2e7eabe3 0011 2e7eabe3 0100 6a60b44c 0000 6a60b44c 1100 7407340b 0001 7407340b 1100 dc303310 0011 dc303310 1100 3f33399f 0011 3f33399f 1100 a9d1471d 0011 a9d1471d 1000 00000480 0020 838f31f9 672ddb47 e7dcf69b b8cf2728 588dbcfc 1c8fb368 b93eeab5 90d7a248
+1 01 4000071c 010 00000001 3e591daa 1110 3a457308 1101 00000718 0010 d1abc7b4 5419197e 981d82d0 d125cff0
+0 01 4000026c 010 00001110 f806b623 7edaa08c 90665db3 4dd2d231 eb323bef 7f3b9c4e 48a29df2 eaf0ae70 e70bb2fc f4163cfc 183cdda9 d3d50ae9 a8028447 74554959 2f50373e
+1 01 4000055f 000 00000010 f6000000 1000 000092b3 0001 000092b3 0010 00000558 0010 f4b25210 2e297c6f caf50433 d77b0003
+1 01 400007ae 001 00001010 10e00000 0100 12b8a0cf 0010 12b8a0cf 1100 5b414f21 0001 5b414f21 1000 d7522946 0011 d7522946 1000 b0122c36 0001 b0122c36 1100 526e1cfa 0001 526e1cfa 1100 000007a8 0020 3594ecca 0552a308 2639c697 a10d7054 e66b568b 9cb97a65 b4b013eb ba9abb7e
+1 01 400002da 001 00001101 57940000 1100 4faa9e9b 0011 4faa9e9b 1000 744c13b2 0011 744c13b2 0000 d77ba0bf 0001 d77ba0bf 1100 f88cdc6b 0001 f88cdc6b 0100 cfab6df8 0011 cfab6df8 0100 53ba65c2 0011 53ba65c2 1100 000072d9 0011 000002d8 0020 7ed0c81d dd908bc3 b63cb681 20fdbc78 b27077d1 3e7dbe38 dcd08596 3a4d69df
+0 01 400002cd 000 00000101 5aa08bee 5aa08bee 5aa08bee 4a2d5412 4a2d5412 4a2d5412
+0 10 400002b4 010 00000111 11c2f9b3 a2707198 2404e77f 74554959 2f50373e 87690515 9518f042 8f083f8f
+0 10 400006c6 001 00001111 3e81236c 632b7038 632b7038 9f04d1a2 9f04d1a2 a9268564 a9268564 d474d466 d474d466 6c8e60da 6c8e60da 4f544b9b 4f544b9b fd2c25d7 fd2c25d7 3e81236c
+0 10 40000606 001 00000001 27b36b6c 27b36b6c
+0 01 4000006a 001 00001111 20cefad8 d99c3db3 d99c3db3 1d814adc 1d814adc cb276bfb cb276bfb dcaff4a7 dcaff4a7 bf072143 bf072143 e43f4d29 e43f4d29 f0fd8455 f0fd8455 fa7d0a2a
+1 01 400003d5 000 00001101 5c5b5f00 0000 5c5b5f00 0100 5c5b5f00 1000 54ef6f24 0000 54ef6f24 0010 54ef6f24 0000 54ef6f24 1000 a5bcaaed 0000 a5bcaaed 0000 a5bcaaed 0100 a5bcaaed 0000 00bc8221 0000 00bc8221 0010 00bc8221 0100 000003d0 0018 79fddb1b 8982d5d6 0375f2bc 0d698eb9 1cb6adbf 4240a1a2
+1 01 4000047b 000 00001001 33000000 1000 36b92dbd 0000 36b92dbd 0000 36b92dbd 0100 36b92dbd 0000 f0b432e4 0001 f0b432e4 0000 f0b432e4 0100 f0b432e4 0000 00000057 0001 00000478 0010 145841b5 a27fdb60 b0aa7dd8 3c0ff59e
+0 01 40000474 010 00001010 47b2b4de 3393d355 3ab9141f bfb4a1e4 797eab57 6a605981 7407110b dc303310 3f33399f a95c471d 4dce5741
+1 01 400003c8 001 00000101 b1090dd7 0010 b1090dd7 1000 1cb73a0a 0011 1cb73a0a 1100 d67f6dc5 0011 d67f6dc5 1100 000003c8 0010 a4bc214c 348b2a6a 146c538d 9f0a7acc
+0 10 400001b4 010 00000001 169df8b8 283e230b
+0 10 40000536 001 00000001 3511c4da 3511c4da
+1 01 40000078 010 00001000 b6f97ae3 1011 6889ae3c 0100 ad96a481 0011 d6b1ef18 1111 1671a2de 1111 8bf45908 1111 bc7355e3 1111 67d58615 1111 9e4b6a1e 1111 00000078 0028 54591a1b 81e408ea f3b7e3cc fdf3d48f 9e34bfde 33a0b7f5 13f4e310 a2de3d72 29fd3048 72a8f59f
+1 01 40000218 000 00000001 0000b04e 0001 0000b04e 0000 00000218 0008 93a21df1 41eea65a
+0 10 40000468 000 00001111 a3108167 a3108167 a3108167 a3108167 e7cb5d1f e7cb5d1f e7cb5d1f e7cb5d1f 32518cf9 32518cf9 32518cf9 32518cf9 dc1f84dc dc1f84dc dc1f84dc dc1f84dc
+1 01 40000142 001 00000010 119c0000 1100 f517180d 0011 f517180d 1000 00000140 0008 fdf30b07 005b496f
+0 10 4000057e 001 00001111 ea366849 f11392b3 f11392b3 babe6367 babe6367 5a55d34c 5a55d34c 88d0bcde 88d0bcde eda51a86 eda51a86 600b00dc 600b00dc 39b92f22 39b92f22 ea366849
+1 01 40000724 001 00000010 8f01a879 0011 8f01a879 0100 0000b2d8 0001 00000720 0010 98ae12cc 239812c0 dab20245 083f7b91
+0 10 40000650 010 00000001 739efb80 5065dc21
+0 10 4000004c 010 00000001 0028ccc8 f13d8614
+1 01 40000040 010 00001111 ffac549e 1110 9006af12 1110 f2625efc 1111 7daa6825 1011 8ce967fa 0110 0932f9a3 1101 5191ceb6 1101 69d7e48b 0110 f31fefe8 1111 d9dbc4b1 1111 122ed7af 1110 477a71d5 1010 2f0de926 1111 86c9c92d 0111 3a83a68a 0010 18e14390 1111 00000040 0040 5f824cb7 2948519b 9bf6e577 7137a9fe 2463c82e 5ce5bea9 bf3a5fcd 56d349ed 26e367b8 aa809a9d 70e7506d c1aab7d0 9e25c814 4816a7e6 bcbb6850 0aa184f7
+0 10 40000534 001 00000111 3511c4da 3511c4da 902c7ef3 902c7ef3 043d8159 043d8159 22eb9e6f 22eb9e6f
+0 10 40000684 001 00000011 2ff068b9 2ff068b9 d3696857 d3696857
+1 01 400000e0 001 00001100 02f98c50 0000 02f98c50 0100 d8deaaed 0011 d8deaaed 0100 26a58cd6 0011 26a58cd6 0100 d26c2540 0011 d26c2540 1000 0c2188f4 0000 0c2188f4 1000 1d0e94c6 0011 1d0e94c6 1100 0000f0d2 0001 000000e0 0020 1124e8bf 1727f298 d5bfe2f9 499989fa 95ef453d f4602a57 8139fe43 6f601895
+0 01 40000312 001 00001011 295b8929 1d2a8ef9 1d2a8ef9 fd0d6c50 fd0d6c50 8bbb006b 8bbb006b 6552c2f3 6552c2f3 71bd9a78 71bd9a78 11e7b3e9
+1 01 40000678 010 00000011 2f6b1913 1111 b454a373 1011 a086bc9d 1111 ca40a33a 1111 00000678 0010 7b248b53 79dcb0d2 9feeaeb0 9874b6a9
+0 10 40000128 010 00000011 67ce366b ea91fff8 780dd34a d4e1119d
+0 01 4000058a 000 00001111 24747657 24747657 547b5d3b 547b5d3b 547b5d3b 547b5d3b 51c8e12a 51c8e12a 51c8e12a 51c8e12a 36a6196a 36a6196a 36a6196a 36a6196a d50b459d d50b459d
+0 10 40000741 000 00000011 f212fc03 f212fc03 f212fc03 f212fc03
+0 10 400005f5 000 00000111 4fa24f41 4fa24f41 4fa24f41 8e904a56 8e904a56 8e904a56 8e904a56 4fa24f41
+1 01 40000330 010 00000001 5e40fd04 0111 74e390b2 1111 00000330 0008 6835c247 5d7a26da
+1 01 400006d0 000 00001001 27b1a97e 0000 27b1a97e 0010 27b1a97e 0100 27b1a97e 1000 c37cdd4d 0001 c37cdd4d 0000 c37cdd4d 0100 c37cdd4d 1000 0000834b 0000 0000834b 0010 000006d0 0010 170fde14 82a1eeae ce1b456c 189ffaad
+0 10 40000419 000 00000111 fe4a2ad7 fe4a2ad7 fe4a2ad7 091a30e0 091a30e0 091a30e0 091a30e0 fe4a2ad7
+1 01 400007e3 000 00000001 7b000000 1000 00000081 0000 000007e0 0008 3b4e6127 55f69931
+0 01 40000404 001 00000000 4be6f144
+0 01 400001fe 001 00000010 846cbd28 f8060e51 f8060e51
+0 10 400002ec 010 00000011 dcab6df8 733813b2 d77b4fbf 0f8c396b
+0 01 4000031d 000 00000110 8bbb006b 8bbb006b 8bbb006b 6552c2f3 6552c2f3 6552c2f3 6552c2f3
+0 10 400006b8 010 00001111 8aeaca8c 30950a09 a086bc9d ca40a33a cde6973e 2e0b53df 23b9ad3a dba232b6 fb2d957e dc30e394 57522c8b 294e5534 e13eb6ac 4ea74792 c7590e5f 36fec649
+1 01 40000158 010 00001101 a7e3c961 1101 3cd38560 0101 d7998fd9 1111 9aeff74d 0111 7810afbc 1011 564b294e 1111 a7ad7758 1111 3b9bd399 1111 2babc0f2 0101 d2018604 1110 f0e7d47e 0110 039a95e3 1010 a6c6954f 0101 601a5bab 0111 00000158 0038 6b64776f f857a532 7cba821e a004d192 1383de3b 3fcfc944 4c3a5123 0d2a967a 9c1f4640 8a5439bd 18bf7bee cd4a1907 46d77843 af470c28
+0 01 400002e6 000 00000101 d77b4fbf d77b4fbf 0f8c396b 0f8c396b 0f8c396b 0f8c396b
+0 10 400005f5 000 00000111 4fa24f41 4fa24f41 4fa24f41 8e904a56 8e904a56 8e904a56 8e904a56 4fa24f41
+0 10 4000024d 000 00001111 3ffb33a5 3ffb33a5 3ffb33a5 c4f75981 c4f75981 c4f75981 c4f75981 b8b2efbb b8b2efbb b8b2efbb b8b2efbb a2c00920 a2c00920 a2c00920 a2c00920 3ffb33a5
+1 01 400004e8 010 00000001 2ab534bf 1111 b4010420 1110 000004e8 0008 bbecdaf3 5de79b8a
+0 10 400005e4 001 00000001 e92e1a83 e92e1a83
+1 01 400000d8 010 00000101 6b14a71a 1111 fe22dff8 1111 3093ed8b 1100 725e0bc6 1100 02919a83 0110 8ed949f6 1101 000000d8 0018 c1e1fbb4 3205ea5e 25e8afd1 d1117f07 dd69db64 9de2f96d
+1 01 400003cc 010 00000110 df8cdf5e 1111 ab37fd49 1011 20f2c3f5 0111 7d7446a3 0111 6f8a9917 1110 967ba6c8 1011 de586e20 1011 000003c8 0020 ddb4b88e 8c82a509 ffbe9337 90ae35e6 1c7b41b0 540a70bc 776d6b81 769d4e59
+1 01 400004ec 000 00001101 397faf72 0001 397faf72 0010 397faf72 0100 397faf72 1000 77cfa8d6 0001 77cfa8d6 0010 77cfa8d6 0100 77cfa8d6 1000 e716694f 0001 e716694f 0010 e716694f 0100 e716694f 1000 00001e67 0000 00001e67 0010 000004e8 0018 fb766b7e 88f9a2d9 37701947 9d03f7d0 19670b4a f97d447a
+1 01 40000583 000 00001010 b5000000 1000 1114f566 0001 1114f566 0010 1114f566 0100 1114f566 1000 5cb990d9 0001 5cb990d9 0010 5cb990d9 0100 5cb990d9 0000 0000bda9 0001 0000bda9 0010 00000580 0010 92f1b12e 3be062bc 7d296bc0 86517ef2
+0 10 40000364 000 00000001 ef240999 ef240999
+0 01 400001e8 010 00000011 130d84ef f3307caa 90a9f0a0 a3a72bac
+0 01 40000788 000 00000001 1799f707 1799f707
+0 10 4000021c 000 00000011 b058c119 b058c119 b058c119 b058c119
+1 01 40000170 010 00000111 a892ec8c 0111 798d81d2 1111 658fd7cc 1111 95ce272b 0111 4ac38db1 1111 710b55af 1011 2a38c9ff 1010 d4c216ee 1111 00000170 0020 1465358c 87ffcf09 2e78173a ddb86de7 dbca8b2e caef645d 8e4d6c1a 5b12d67f
+1 01 400004e2 000 00001001 19a30000 0000 19a30000 1000 9bd7dfd0 0001 9bd7dfd0 0010 9bd7dfd0 0100 9bd7dfd0 1000 a4866704 0001 a4866704 0000 a4866704 0100 a4866704 1000 000004e0 0010 4162cd64 b38c4039 22ff2cc8 11d6f216
+1 01 400000b4 000 00000110 dffcbc37 0001 dffcbc37 0000 dffcbc37 0100 dffcbc37 1000 0078c605 0000 0078c605 0000 0078c605 0100 000000b0 0010 628c38a1 5a0a6688 c5124589 7c4e2c06
+1 01 40000177 000 00000000 5f000000 0000 00000170 0008 1465358c 87ffcf09
+1 01 40000062 001 00000010 d2780000 1100 791df8e8 0011 791df8e8 1100 00000060 0008 29b097e7 c1cdaaeb
+0 01 400006b1 000 00001001 c7590e5f c7590e5f c7590e5f 36fec649 36fec649 36fec649 36fec649 8aeaca8c 8aeaca8c 8aeaca8c
+0 01 40000428 010 00000001 254cc4cb af47d09f
+0 01 400005d0 000 00001000 424a58cf 424a58cf 424a58cf 424a58cf beb443de beb443de beb443de beb443de 9dbf3d93
+0 10 40000398 001 00001111 bc89a28a bc89a28a 917d3070 917d3070 83ee0d81 83ee0d81 46eed6eb 46eed6eb f67ab17b f67ab17b f6460b8f f6460b8f 450d467c 450d467c ae0da565 ae0da565
+1 01 40000247 000 00001000 88000000 1000 5ce47f13 0001 5ce47f13 0010 5ce47f13 0100 5ce47f13 1000 82e77f31 0000 82e77f31 0010 82e77f31 0000 82e77f31 1000 00000240 0010 be85583e 8e969d76 546880e8 38662eaf
+1 01 40000674 001 00000000 0000b904 0001 00000670 0008 3110139d 670a5e2d
+1 01 400006ba 001 00000010 ddcb0000 1100 6d299934 0000 6d299934 1100 000006b8 0008 4ba3fc8a 3a8f3820
+1 01 4000030d 000 00001010 0c931000 0010 0c931000 0000 0c931000 1000 4b3b9b89 0000 4b3b9b89 0000 4b3b9b89 0100 4b3b9b89 1000 77f2270c 0001 77f2270c 0000 77f2270c 0100 77f2270c 1000 00000308 0010 7b464471 fd12a366 e9a9d22e 3ff96702
+1 01 40000308 010 00000110 01b1e53b 1111 9d66679c 1111 95482d7e 1011 6f4b6fed 1111 69f214c6 1100 af98dd3f 1011 e2544a59 1101 00000308 0020 265a00b5 bf32043b 8c29ff75 eccdb0fd 54c74c6c c97f181b e185e580 a1af23bc
+1 01 400000f4 010 00001111 39dd70cd 1010 be2c6586 1010 fe2afe02 1111 fbfdf0ab 0001 6dc57d0b 1111 06de4dbe 0111 53529b88 1010 d8b26ef2 1101 9e6e61e0 0111 db7fbf01 1111 90a83597 1110 27efdb44 1111 c569f0a5 1111 37dcfb3d 1100 e74ff550 1111 839ebf3d 0011 000000f0 0048 e3b841c9 860f9c31 12d588e8 e21194b2 d439059a dfefc447 8af6ef6b 433d6bc8 4e874895 85ade5b3 57502db6 99a9d63f f0524964 92bad326 90b9c80d be26f907 7677cf61 7f280804
+0 01 40000121 000 00000001 27efdb44 27efdb44
+1 01 40000274 010 00001100 4123430c 1111 ddc0e623 1110 f2906699 1111 566c17d4 1111 fe026920 1111 7f7081ef 0111 1af52320 0111 9908ac0e 1101 b8dcc111 0111 3aee7515 1111 ca2acf20 1111 00561938 1011 e5026413 0111 00000270 0038 844561a4 3be332a1 1e71b2f4 157bcd60 c7f916be 0de61d86 69864563 15763622 6abe009b 04a54f6f 95660fdf b93ec942 6e00e64c 2e0a912e
+1 01 40000424 001 00001101 9f88053c 0011 9f88053c 1100 90db791f 0011 90db791f 0100 3adc3ab7 0011 3adc3ab7 0100 bb65beb5 0011 bb65beb5 1100 4d88ad5d 0010 4d88ad5d 1000 db6bc262 0011 db6bc262 1100 079b52e2 0011 079b52e2 1100 00000420 0020 f57dc1e9 0bf4015d a2a858c4 83add335 e1d0487c f88c10f1 bca229ab 4fe55f1a
+0 10 40000493 000 00001111 dc303310 3f33399f 3f33399f 3f33399f 3f33399f a95c471d a95c471d a95c471d a95c471d 4dce5741 4dce5741 4dce5741 4dce5741 dc303310 dc303310 dc303310
+1 01 400000aa 001 00000110 54460000 0100 cff3582d 0011 cff3582d 1100 cca99af3 0010 cca99af3 1100 7baad7a4 0011 7baad7a4 1100 000000a8 0010 2144eec0 d4c61193 10d0d12f 6b15ae25
+0 10 400006e5 000 00000001 2affa623 2affa623
+0 10 40000124 010 00000001 c569f0a5 27efdb44
+0 10 40000584 001 00000001 1114f566 1114f566
+1 01 400005e9 000 00000100 401a9700 0010 401a9700 0000 401a9700 1000 00004b51 0001 00004b51 0010 000005e8 0008 0012759f ca96f1ee
+0 10 40000404 001 00001111 4be6f144 4be6f144 4930e60d 4930e60d 54c5e563 54c5e563 f34272f3 f34272f3 cc21eb72 cc21eb72 fe4a2ad7 fe4a2ad7 091a30e0 091a30e0 e73264ea e73264ea
+0 01 4000035c 001 00000011 b65ac2f3 b65ac2f3 1a542049 1a542049
+0 01 40000544 001 00000101 548643dd 548643dd 8f5c7386 8f5c7386 58811fd4 58811fd4
+1 01 4000068a 000 00000010 11890000 0100 11890000 1000 000000fe 0001 00000688 0008 b29c01b6 2d6e1227
+1 01 4000074c 010 00001101 c7dd3258 1110 abbadc75 1110 cb572be5 1011 101f471e 1110 7e7e4428 1101 b07bf46f 0111 02e65529 1111 e2116677 1001 bc7da10b 1011 1b1bb446 1111 9dfd8ba0 1101 b513a2c2 1111 3cd3978d 1110 2dd8b6e1 1111 00000748 0040 513c69b0 84eb61bf 4b21dc37 2e621ea6 891d7d6d 594fc2e5 cbc4da81 1c5d7ed1 46f2f51b a6967838 c739fd7f 5371a767 031f26d1 d3cab68c 14b540c9 07c2532f
+1 01 400003f1 000 00001100 bc451a00 0010 bc451a00 0000 bc451a00 0000 4a441a1d 0001 4a441a1d 0000 4a441a1d 0100 4a441a1d 1000 b046e5b5 0001 b046e5b5 0010 b046e5b5 0000 b046e5b5 0000 00002ab6 0001 00002ab6 0000 000003f0 0010 e290fb36 cfdb36b6 d58b065d ebde1c6d
+0 01 40000128 010 00000010 37dc366b e74ff550 7440bf3d
+0 01 4000057c 010 00000110 ea366849 b5241c2f 1114f566 24b990d9 547bbda9 51c8e12a 36a6196a
+0 01 40000678 010 00001000 2f6b1913 b492a373 a086bc9d ca40a33a 1189973e 2e0b53fe 23b9ad3a dba232b6 fb2d957e
+0 10 40000058 010 00000011 519153b6 d2d7e4d0 15e967f4 093215a3
+1 01 40000356 001 00001110 94fc0000 0100 b7e8c446 0010 b7e8c446 1000 a88d0404 0011 a88d0404 1100 72151026 0011 72151026 1000 dedafa3e 0011 dedafa3e 1100 b57a43e1 0011 b57a43e1 1100 f41ee6bf 0011 f41ee6bf 0100 323d8c2b 0001 323d8c2b 1100 00000350 0028 1cd5d072 1edf6e59 0b23bb65 38b65d1d a7e3e7fa cfdcc7bd 665d905a 537f970e aea1217a b1b643a1
+1 01 4000035c 010 00001011 2a0f5049 0101 bfbeb95e 1011 08b839bc 0111 43e8be44 1111 24e6da7a 1111 f0b48b15 1110 71211db7 1101 bbcdcea4 1100 c6b09ba4 0101 8512b20e 0011 564cd10e 1101 ac3a8a77 0111 00000358 0038 d5c67034 de4321ae da6cc87b 12ee6a90 b3be91d8 5c2fcd3d 69396289 5fa45cb5 c989664f 2bdd7972 54bc1dd8 019d3650 c4965206 90111340
+1 01 400000ac 000 00001101 3711a03a 0000 3711a03a 0010 3711a03a 0000 3711a03a 1000 c2fe7a10 0001 c2fe7a10 0010 c2fe7a10 0100 c2fe7a10 1000 535cb8b1 0001 535cb8b1 0010 535cb8b1 0100 535cb8b1 1000 000060bf 0000 000060bf 0010 000000a8 0018 08b694aa f95ada08 120ea40f 934a8e81 e1b0ab2e 783bc241
+0 01 400004dc 000 00000011 ab43cdee ab43cdee ab43cdee ab43cdee
+1 01 4000076c 010 00001110 7c0fc88c 1111 a856aa55 1111 21942513 1111 88639d9c 1111 00ebe780 1101 b28ccaab 0100 b695c4f6 1111 b5bc3673 1111 36906291 0011 c69048e4 1100 e9e0e248 0110 ed8e0a5d 0111 a2a361d7 1011 b6d26ce7 0111 4ae07e33 1110 00000768 0040 fd0f6473 4395f255 b4cd72f4 333a36cd 7ea9e9a8 2167894e 7fc4d55c 4a34ca54 583bc668 abc2811e fb9ee704 21ac3257 597a681e 49151e47 2bcbf26f 2dfff321
+0 01 40000480 010 00000100 bfb4a1e4 797eab57 6a605981 7407110b dc303310
+0 01 400000bc 010 00000001 6172fee5 8cb585f3
+0 01 400006a8 001 00001011 e13eb6ac e13eb6ac 4ea74792 4ea74792 c7590e5f c7590e5f 36fec649 36fec649 ddcbca8c ddcbca8c 6d290a09 6d290a09
+1 01 40000788 001 00000011 7d6295ac 0010 7d6295ac 1100 ac5d766b 0011 ac5d766b 1100 00000788 0008 30d30f39 b4a3e43d
+0 01 4000049d 000 00001010 4dce5741 4dce5741 4dce5741 3e011497 3e011497 3e011497 3e011497 87c6f878 87c6f878 87c6f878 87c6f878
+0 01 400007c4 010 00001011 4343e03c ef891068 57fefb7c adce6653 e1edf84b 52173456 0d4af6ec 7b20d303 c8bd94b6 d2dd536f ae097e51 a5d8d0e0
+0 10 40000170 010 00000001 a792ec8c 798d81d2
+1 01 400006fb 000 00000110 50000000 1000 2691113c 0001 2691113c 0010 2691113c 0100 2691113c 1000 00006684 0001 00006684 0000 000006f8 0010 af645966 a6c39173 816e7b0b 871c0652
+0 01 40000735 000 00001111 6bbfaab7 6bbfaab7 6bbfaab7 bee89e25 bee89e25 bee89e25 bee89e25 a59846ca a59846ca a59846ca a59846ca f212fc03 f212fc03 f212fc03 f212fc03 8f85f8b0
+1 01 40000156 001 00000000 a72c0000 1000 00000150 0008 b3e2558c 354d2509
diff --git a/fpga/src/memsec/tb/testdata/prince/xts/initial_memory.txt b/fpga/src/memsec/tb/testdata/prince/xts/initial_memory.txt
new file mode 100644
index 0000000..0a441c0
--- /dev/null
+++ b/fpga/src/memsec/tb/testdata/prince/xts/initial_memory.txt
@@ -0,0 +1,512 @@
+58e3b6bb
+11a7994e
+2a095b43
+45517e62
+f49efb59
+972ce548
+19f80d12
+0a58729e
+2e72e433
+01adf29b
+244c3c1e
+39c7ac42
+42959aad
+9233aaa6
+572fd0c5
+5b35a6bf
+1e5e9836
+e7741a88
+132a9c0a
+bc5919e6
+69c1b0b5
+b0a8a9fb
+859e0c83
+3ea6a8c5
+73c62cb1
+6fd6820b
+d4e296db
+a1ead0d3
+91d64a6f
+9c7d4616
+0df5bccb
+8fb123a6
+69c7330d
+591ed2fb
+2b7573c8
+9893b3c3
+89e2797b
+5757da95
+8b2343ac
+8bec7713
+2d43fed9
+e67c2425
+f723021d
+c19f57e4
+fd2e8237
+8067bc33
+468bd486
+fdceca5d
+321b1550
+f17742e7
+c6e558a1
+2df6e857
+f7494cbc
+8a1d46bb
+1f41ac19
+307ad1a4
+fba996f9
+17c9f131
+0d481a99
+5dc7e90f
+e8672e9d
+350669df
+517c085d
+8d1ba594
+f9d809f7
+4a80742d
+5eba968e
+022a05de
+f331bf84
+8acbc13d
+0e92ea81
+0cb9a3f6
+a04eba85
+72211519
+6bf699a2
+d45578ea
+1fa0b27b
+8fea3c8f
+1c934036
+95ad3348
+5411aba8
+431719e0
+a9b7e041
+6d65ae64
+2c0db855
+bb49236d
+ea990107
+a936a3e6
+a24004b5
+85e25e01
+ee497a51
+87ad41d9
+ea20463c
+14807c31
+e011f0d5
+b623b89a
+2f40ba98
+b4554a04
+b48db590
+6d4b5046
+f639d8c3
+6acf7bc6
+787ba65e
+3ed6eb7e
+61990410
+ebd237d0
+7b491b19
+a21d4e88
+658aa337
+8d71d188
+14a6e36f
+7e739e7f
+9383057a
+66b9714d
+8ffd8af4
+025c001a
+ad377c2d
+02c50f02
+8dd66b42
+1977ca09
+bda3a21a
+d41ce688
+102df7f5
+ec011daf
+9acfe365
+328bf393
+ee59622a
+8df6a415
+fb7fcf95
+a69c0abe
+c8e97f31
+27c386a4
+163cb2d6
+2982e44e
+5af2bffc
+97a83975
+c573a269
+5460db92
+49fefd47
+9d287308
+9daca144
+dfe37bc4
+1f4c8312
+c7498027
+bd5e0427
+546c01f7
+b0c571b9
+4758d0ba
+07d74dd4
+856bcaa9
+24b1270e
+77c84bf0
+5c82ec10
+d42378b8
+9a0d4f6f
+0ce59c3b
+936eb756
+774d5fb1
+cd25aa68
+4419c004
+8391e832
+4898ae7c
+7decbb10
+396ba5cd
+da82f0fe
+c8a0e078
+2a288578
+edda59cd
+0b9f785c
+723399fa
+e2f7ae85
+727ffe23
+ee9636b7
+ac41a167
+fb8a49e4
+ffa0831b
+a14b4125
+72684d6c
+06ff49e7
+edb1abb8
+d55d1b97
+ae7afd4c
+88481970
+26aba5d5
+3f391489
+9834b122
+2a1e2180
+24502aed
+215a1df8
+a0865e52
+b991a153
+a8f1171e
+02028dae
+d1eb7a03
+261ff31f
+d5548dfe
+734d1525
+20f95103
+5555aef5
+c5bc327f
+a60ece32
+cf182dc0
+d09a33ae
+3529f8b6
+738c0653
+7daa0977
+3e9457e1
+ac7ba135
+8fbf931f
+be220299
+f4afcba7
+63b578a8
+8ee700d2
+3c5cf8b5
+624ef473
+742df212
+1073c0b3
+25f9ec82
+0f7f8c22
+d905a64d
+55d69889
+efc4e960
+1fe8f2d7
+1f7a1f86
+0d5cb464
+692b4bad
+a574402b
+45e595b6
+4fc4165d
+1fb1ad3d
+1bd745fc
+0b51fe6e
+6cf2d2a9
+1dec5264
+35b66fdf
+f05b4251
+ef2b0b4a
+dc70e764
+f7384574
+f0dd9d75
+b4c1db29
+53da4b3e
+f5fccb1a
+bc2ae718
+a79e23f7
+38ff9586
+ddf60b31
+d207b2ce
+e9ea67a0
+db06a958
+7163e3af
+4684d341
+348aeb3e
+324064fb
+06c65fc6
+36236b2b
+b6ffffd8
+4175b2ac
+eb203346
+bb2b58ad
+3f41cf15
+3266650e
+4453d122
+44fda7d0
+01301ae7
+74f4cac5
+2e1f949a
+4050ea91
+f42fe891
+78c5ee19
+e65969e7
+e156398f
+d822ddf6
+9b4fc5c6
+f4a9be0c
+cbd2723c
+d63d8e1c
+d43d5984
+dff7279d
+43e50b7a
+5eb3a2aa
+b3c29796
+d49ec02f
+605ad002
+588d6091
+3ecc99a6
+c2057975
+12f96931
+2e8daa71
+faf8fa6c
+acbd9062
+c75d5582
+2750a24c
+fde3cece
+f386d340
+b9a55b6f
+38a08b53
+0a9f6ad5
+4614ade0
+8d409b84
+d0485cef
+59cfcc93
+5d95c6b0
+f0f1a2c7
+eee3d8e6
+994803ef
+7b373aaf
+453848e4
+717b766f
+8953d2fd
+4afa836b
+77c07e08
+32603d16
+0d6915f5
+291e4d12
+3e2e1647
+6ee4b61c
+cda2e6a2
+64db7dfb
+7aee767d
+6102626e
+f861fffe
+61016ae0
+468162e3
+0c868362
+22c85dd7
+50c93b3d
+17a01c34
+bc2efc6a
+8b3170f3
+cf692f10
+cd105e9f
+89bd393f
+e7c31ec4
+9f544fe9
+df0f41fd
+3fb98b4f
+cf7dba00
+3ec011ea
+6b297f78
+917f6af0
+7c432e37
+2800999f
+dcfc2ab9
+4fac17fa
+c69c1b3e
+cfeee7a0
+85329dae
+10be5adc
+f1cfdb08
+8eb28522
+8ed5ea5f
+ce2ea6ba
+60dba3b9
+397eb61e
+5c6a45c6
+01e345ce
+88db72bf
+9731e50a
+daef80a3
+e2f21003
+0ecaf605
+cc66b60f
+b55894e2
+bb588f00
+4538c68d
+86e9d7d0
+1ccdf9df
+87413ee5
+d55cf220
+ef200fb9
+f469ff8b
+4a3973e6
+49ffa491
+51a5ad82
+df1db832
+1f6df31c
+351aaca4
+92304905
+b08af84a
+aafae3ce
+a0601f5c
+e105c2b6
+845a1b79
+c199b806
+f5e0e6d8
+d48c8bb8
+6ee9f9b3
+8e14480e
+ed9dcd67
+0011d7bc
+ff9be982
+2e3f92ff
+1d6cdd21
+a57c312c
+64f2fbde
+7e410f34
+c2e5444b
+be276bb2
+eaec3a21
+a125d464
+4d73f1d0
+e3b31c54
+093e9de3
+dda72d59
+8d09163d
+61324e84
+be92667a
+5380cef9
+efc97ddf
+9801b16f
+09cf1590
+0442eefd
+f2fa41eb
+b6335c0b
+406db2e4
+2139f001
+b96b8122
+c66c1127
+f42fa72d
+5d18b020
+4a90db94
+89b5a448
+60929e7a
+07537bc4
+baf08810
+d7a47d65
+4a835f34
+0d79b830
+831b4868
+ccd10911
+7eaf45db
+f3098e05
+17b98382
+a745ebe7
+3c5cface
+1d627090
+f35c91ed
+fef792f9
+bb4765b1
+2be4a16c
+ccaef4da
+ab650389
+0b311ea6
+73760afa
+d23b1dbe
+401c508c
+80b0d21d
+c17ece16
+c5d5f12f
+6ee7edaf
+d859e831
+00655dc6
+d4d4bccf
+a8374d50
+e6fd2d43
+100147e8
+4e9f5dd2
+7e678f24
+d0b8d794
+c600104e
+4944b43e
+9166f76a
+63fc8869
+ae4da131
+24ce8e0f
+bbe72931
+5b4b8fff
+de3b73b1
+e2fbad25
+954b304d
+ee5e90d6
+f2f45127
+c14793a3
+5c727970
+35975f15
+c4572059
+e25c9940
+e4c0ebff
+1bf3f3be
+4dbe1e4c
+b9c98f93
+1d368cec
+7f9dd8f8
+c69839b0
+971c5f0a
+6f7964d1
+6c7fbdbd
+1bc1031b
+3483255a
+e887c309
+61f8cd20
+a9c3aa99
+0ace103c
+f204edef
+edc81556
+8baadc7b
+27b4ec1a
+96a9bb91
+04655521
+7edecc58
+5c7b01fc
+feedb172
+fd3829b0
+098a01e1
+b1d96b76
+a1afc7da
+0e04b59a
+e63ddfff
+0e0aca77
+dc0bad4e
+d04f41b5
diff --git a/fpga/src/memsec/tb/testdata/prince/xts/test_cases.txt b/fpga/src/memsec/tb/testdata/prince/xts/test_cases.txt
new file mode 100644
index 0000000..89c8a97
--- /dev/null
+++ b/fpga/src/memsec/tb/testdata/prince/xts/test_cases.txt
@@ -0,0 +1,2247 @@
+0 01 40000004 000 00000100 daeef001 daeef001 daeef001 daeef001 abccf002
+0 01 40000004 000 00000101 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002
+0 01 40000000 000 00000000 abccf000
+0 01 40000000 000 00000001 abccf000 abccf000
+0 01 40000000 000 00000010 abccf000 abccf000 abccf000
+0 01 40000000 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 01 40000000 000 00000100 abccf000 abccf000 abccf000 abccf000 daeef001
+0 01 40000000 000 00000101 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001
+0 01 40000001 000 00000000 abccf000
+0 01 40000001 000 00000001 abccf000 abccf000
+0 01 40000001 000 00000010 abccf000 abccf000 abccf000
+0 01 40000001 000 00000011 abccf000 abccf000 abccf000 daeef001
+0 01 40000002 000 00000000 abccf000
+0 01 40000002 000 00000001 abccf000 abccf000
+0 01 40000002 000 00000010 abccf000 abccf000 daeef001
+0 01 40000003 000 00000000 abccf000
+0 01 40000003 000 00000001 abccf000 daeef001
+0 01 40000003 000 00000010 abccf000 daeef001 daeef001
+0 01 40000003 000 00000011 abccf000 daeef001 daeef001 daeef001
+0 01 40000004 000 00000000 daeef001
+0 01 40000004 000 00000001 daeef001 daeef001
+0 01 40000004 000 00000010 daeef001 daeef001 daeef001
+0 01 40000004 000 00000011 daeef001 daeef001 daeef001 daeef001
+0 01 40000004 000 00000100 daeef001 daeef001 daeef001 daeef001 abccf002
+0 01 40000004 000 00000101 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002
+0 01 40000000 001 00000000 abccf000
+0 01 40000000 001 00000001 abccf000 abccf000
+0 01 40000000 001 00000010 abccf000 abccf000 daeef001
+0 01 40000000 001 00000011 abccf000 abccf000 daeef001 daeef001
+0 01 40000000 001 00000100 abccf000 abccf000 daeef001 daeef001 abccf002
+0 01 40000000 001 00000000 abccf000
+0 01 40000000 001 00000001 abccf000 abccf000
+0 01 40000000 001 00000010 abccf000 abccf000 daeef001
+0 01 40000000 001 00000011 abccf000 abccf000 daeef001 daeef001
+0 01 40000000 001 00000100 abccf000 abccf000 daeef001 daeef001 abccf002
+0 01 40000002 001 00000000 abccf000
+0 01 40000002 001 00000001 abccf000 daeef001
+0 01 40000002 001 00000010 abccf000 daeef001 daeef001
+0 01 40000002 001 00000011 abccf000 daeef001 daeef001 abccf002
+0 01 40000002 001 00000100 abccf000 daeef001 daeef001 abccf002 abccf002
+0 01 40000002 001 00000000 abccf000
+0 01 40000002 001 00000001 abccf000 daeef001
+0 01 40000002 001 00000010 abccf000 daeef001 daeef001
+0 01 40000002 001 00000011 abccf000 daeef001 daeef001 abccf002
+0 01 40000002 001 00000100 abccf000 daeef001 daeef001 abccf002 abccf002
+0 01 40000000 010 00000000 abccf000
+0 01 40000000 010 00000001 abccf000 daeef001
+0 01 40000000 010 00000010 abccf000 daeef001 abccf002
+0 01 40000004 010 00000000 daeef001
+0 01 40000004 010 00000001 daeef001 abccf002
+0 01 40000004 010 00000010 daeef001 abccf002 daeef003
+0 01 40000004 010 00001111 daeef001 abccf002 daeef003 abccf004 daeef005 abccf006 daeef007 abccf008 daeef009 abccf00a daeef00b abccf00c daeef00d abccf00e daeef00f abccf010
+0 10 40000000 000 00000001 abccf000 abccf000
+0 10 40000000 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000000 000 00000111 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001
+0 10 40000000 000 00001111 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003
+0 10 40000001 000 00000001 abccf000 abccf000
+0 10 40000001 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000002 000 00000001 abccf000 abccf000
+0 10 40000002 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000004 000 00000001 daeef001 daeef001
+0 10 40000004 000 00000011 daeef001 daeef001 daeef001 daeef001
+0 10 40000004 000 00000111 daeef001 daeef001 daeef001 daeef001 abccf000 abccf000 abccf000 abccf000
+0 10 40000000 000 00001111 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003
+0 10 40000004 000 00001111 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003 abccf000 abccf000 abccf000 abccf000
+0 10 40000008 000 00001111 abccf002 abccf002 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001
+0 10 4000000c 000 00001111 daeef003 daeef003 daeef003 daeef003 abccf000 abccf000 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001 abccf002 abccf002 abccf002 abccf002
+0 10 40000010 000 00001111 abccf004 abccf004 abccf004 abccf004 daeef005 daeef005 daeef005 daeef005 abccf006 abccf006 abccf006 abccf006 daeef007 daeef007 daeef007 daeef007
+0 10 40000014 000 00001111 daeef005 daeef005 daeef005 daeef005 abccf006 abccf006 abccf006 abccf006 daeef007 daeef007 daeef007 daeef007 abccf004 abccf004 abccf004 abccf004
+0 10 40000018 000 00001111 abccf006 abccf006 abccf006 abccf006 daeef007 daeef007 daeef007 daeef007 abccf004 abccf004 abccf004 abccf004 daeef005 daeef005 daeef005 daeef005
+0 10 4000001c 000 00001111 daeef007 daeef007 daeef007 daeef007 abccf004 abccf004 abccf004 abccf004 daeef005 daeef005 daeef005 daeef005 abccf006 abccf006 abccf006 abccf006
+0 10 40000020 000 00001111 abccf008 abccf008 abccf008 abccf008 daeef009 daeef009 daeef009 daeef009 abccf00a abccf00a abccf00a abccf00a daeef00b daeef00b daeef00b daeef00b
+0 10 40000024 000 00001111 daeef009 daeef009 daeef009 daeef009 abccf00a abccf00a abccf00a abccf00a daeef00b daeef00b daeef00b daeef00b abccf008 abccf008 abccf008 abccf008
+0 10 40000028 000 00001111 abccf00a abccf00a abccf00a abccf00a daeef00b daeef00b daeef00b daeef00b abccf008 abccf008 abccf008 abccf008 daeef009 daeef009 daeef009 daeef009
+0 10 4000002c 000 00001111 daeef00b daeef00b daeef00b daeef00b abccf008 abccf008 abccf008 abccf008 daeef009 daeef009 daeef009 daeef009 abccf00a abccf00a abccf00a abccf00a
+0 10 40000030 000 00001111 abccf00c abccf00c abccf00c abccf00c daeef00d daeef00d daeef00d daeef00d abccf00e abccf00e abccf00e abccf00e daeef00f daeef00f daeef00f daeef00f
+0 10 40000034 000 00001111 daeef00d daeef00d daeef00d daeef00d abccf00e abccf00e abccf00e abccf00e daeef00f daeef00f daeef00f daeef00f abccf00c abccf00c abccf00c abccf00c
+0 10 40000038 000 00001111 abccf00e abccf00e abccf00e abccf00e daeef00f daeef00f daeef00f daeef00f abccf00c abccf00c abccf00c abccf00c daeef00d daeef00d daeef00d daeef00d
+0 10 4000003c 000 00001111 daeef00f daeef00f daeef00f daeef00f abccf00c abccf00c abccf00c abccf00c daeef00d daeef00d daeef00d daeef00d abccf00e abccf00e abccf00e abccf00e
+0 10 4000003d 000 00001111 daeef00f daeef00f daeef00f abccf00c abccf00c abccf00c abccf00c daeef00d daeef00d daeef00d daeef00d abccf00e abccf00e abccf00e abccf00e daeef00f
+0 10 4000005d 000 00001111 daeef017 daeef017 daeef017 abccf014 abccf014 abccf014 abccf014 daeef015 daeef015 daeef015 daeef015 abccf016 abccf016 abccf016 abccf016 daeef017
+0 10 4000007d 000 00001111 daeef01f daeef01f daeef01f abccf01c abccf01c abccf01c abccf01c daeef01d daeef01d daeef01d daeef01d abccf01e abccf01e abccf01e abccf01e daeef01f
+0 10 40000000 010 00000001 abccf000 daeef001
+0 10 40000000 010 00000011 abccf000 daeef001 abccf002 daeef003
+0 10 40000004 010 00000001 daeef001 abccf000
+0 10 40000004 010 00000011 daeef001 abccf002 daeef003 abccf000
+0 10 40000000 001 00000001 abccf000 abccf000
+0 10 40000000 001 00000011 abccf000 abccf000 daeef001 daeef001
+0 10 40000002 001 00000001 abccf000 abccf000
+0 10 40000002 001 00000011 abccf000 daeef001 daeef001 abccf000
+0 10 40000002 001 00000001 abccf000 abccf000
+0 10 40000002 001 00000011 abccf000 daeef001 daeef001 abccf000
+0 10 40000000 000 00000001 abccf000 abccf000
+0 10 40000000 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000001 000 00000001 abccf000 abccf000
+0 10 40000001 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000002 000 00000001 abccf000 abccf000
+0 10 40000002 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000002 000 00000111 abccf000 abccf000 daeef001 daeef001 daeef001 daeef001 abccf000 abccf000
+0 10 40000003 000 00000001 abccf000 abccf000
+0 10 40000003 000 00000011 abccf000 abccf000 abccf000 abccf000
+0 10 40000008 010 00000001 abccf002 daeef003
+0 10 40000010 010 00000011 abccf004 daeef005 abccf006 daeef007
+0 10 4000000c 010 00000001 daeef003 abccf002
+0 10 40000014 010 00000011 daeef005 abccf006 daeef007 abccf004
+0 10 40000008 001 00000001 abccf002 abccf002
+0 10 40000008 001 00000011 abccf002 abccf002 daeef003 daeef003
+0 10 4000000a 001 00000001 abccf002 abccf002
+0 10 4000000a 001 00000011 abccf002 daeef003 daeef003 abccf002
+0 10 4000000a 001 00000001 abccf002 abccf002
+0 10 4000000a 001 00000011 abccf002 daeef003 daeef003 abccf002
+0 10 40000009 000 00000001 abccf002 abccf002
+0 10 40000009 000 00000011 abccf002 abccf002 abccf002 abccf002
+0 10 4000000a 000 00000001 abccf002 abccf002
+0 10 4000000a 000 00000011 abccf002 abccf002 abccf002 abccf002
+0 10 4000000a 000 00000111 abccf002 abccf002 daeef003 daeef003 daeef003 daeef003 abccf002 abccf002
+0 01 40000001 000 00000011 abccf000 abccf000 abccf000 daeef001
+0 01 40000001 000 00000011 abccf000 abccf000 abccf000 daeef001
+1 01 40000000 000 00000011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 00000000 0010 fc8db674 fa700754 2a095b43 45517e62
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 00000000 0010 d323201b 51175c7c 2a095b43 45517e62
+1 01 40000000 000 00001011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 00000000 0010 d323201b 51175c7c f8c62cd4 6009b728
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 d323201b 51175c7c 2e7968f0 d2158ba7
+1 01 40000004 000 00000011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 00000000 0010 af6c59f8 6185214a 2e7968f0 d2158ba7
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 00000000 0010 af6c59f8 6185214a e945d0fd e39758fe
+1 01 40000004 000 00001011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 00000000 0010 af6c59f8 6185214a fd2e2bbb 7ecae967
+1 01 40000004 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 aaccaacc 0001 aaccaacc 0010 aaccaacc 0100 aaccaacc 1000 00000000 0020 af6c59f8 6185214a fd2e2bbb 7ecae967 aaa6a497 7249fdf2 19f80d12 0a58729e
+1 01 40000008 000 00000011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 00000000 0010 af6c59f8 6185214a b48e5432 1a83e704
+1 01 40000008 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 00000000 0010 af6c59f8 6185214a 9fbe9614 2fe2bcfc
+1 01 40000008 000 00001011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 00000000 0020 af6c59f8 6185214a 9fbe9614 2fe2bcfc 7542afe8 f26083e8 19f80d12 0a58729e
+1 01 40000008 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 ff00f0ff 0001 ff00f0ff 0010 ff00f0ff 0100 ff00f0ff 1000 33003300 0001 33003300 0010 33003300 0100 33003300 1000 aaccaacc 0001 aaccaacc 0010 aaccaacc 0100 aaccaacc 1000 00000000 0020 af6c59f8 6185214a 9fbe9614 2fe2bcfc 8a3554df 3e89cf05 19f80d12 0a58729e
+1 01 4000000c 000 00000011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 00000000 0010 af6c59f8 6185214a f4d1483e 70db6aa9
+1 01 40000008 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 78563412 0001 78563412 0010 78563412 0100 78563412 1000 00000000 0010 af6c59f8 6185214a 1bf2dec3 a020e60c
+1 01 40000008 000 00001011 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 78563412 0001 78563412 0010 78563412 0100 78563412 1000 bc7af3ef 0001 bc7af3ef 0010 bc7af3ef 0100 bc7af3ef 1000 00000000 0020 af6c59f8 6185214a 1bf2dec3 a020e60c 34a38923 872bbb44 19f80d12 0a58729e
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0000 cccccccc 0000 cccccccc 0000 00000000 0010 af6c59f8 6185214a 1bf2dec3 a020e60c
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0000 cccccccc 0000 cccccccc 1000 00000000 0010 6273cc1a 5675c58f 1bf2dec3 a020e60c
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0000 cccccccc 0100 cccccccc 0000 00000000 0010 ed94b29f dfb7940f 1bf2dec3 a020e60c
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0010 cccccccc 0000 cccccccc 0000 00000000 0010 cd2f9f1b c8062e8a 1bf2dec3 a020e60c
+1 01 40000000 000 00000011 cccccccc 0001 cccccccc 0000 cccccccc 0000 cccccccc 0000 00000000 0010 f5b42165 641170f0 1bf2dec3 a020e60c
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0000 cccccccc 0100 cccccccc 1000 00000000 0010 f5b42165 641170f0 1bf2dec3 a020e60c
+1 01 40000000 000 00000011 cccccccc 0001 cccccccc 0010 cccccccc 0000 cccccccc 0000 00000000 0010 f5b42165 641170f0 1bf2dec3 a020e60c
+1 01 40000000 000 00000011 cccccccc 0000 cccccccc 0010 cccccccc 0000 cccccccc 1000 00000000 0010 f5b42165 641170f0 1bf2dec3 a020e60c
+1 01 40000000 000 00000011 cccccccc 0001 cccccccc 0000 cccccccc 0100 cccccccc 0000 00000000 0010 f5b42165 641170f0 1bf2dec3 a020e60c
+1 01 40000000 000 00000011 cccccccc 0001 cccccccc 0000 cccccccc 0000 cccccccc 1000 00000000 0010 f5b42165 641170f0 1bf2dec3 a020e60c
+1 01 40000001 000 00000011 cccccc00 0010 cccccc00 0100 cccccc00 1000 000000ff 0000 00000000 0010 f5b42165 641170f0 1bf2dec3 a020e60c
+1 01 40000002 000 00000011 cccc0000 0100 cccc0000 1000 0000ffcc 0000 0000ffcc 0000 00000000 0010 f5b42165 641170f0 1bf2dec3 a020e60c
+1 01 40000003 000 00000011 cc000000 1000 00ffcccc 0000 00ffcccc 0000 00ffcccc 0000 00000000 0010 f5b42165 641170f0 1bf2dec3 a020e60c
+1 01 40000009 000 00000011 cccccc00 0010 cccccc00 0100 cccccc00 1000 000000ff 0000 00000000 0010 f5b42165 641170f0 052026ce 4d1158d0
+1 01 4000000a 000 00000011 cccc0000 0100 cccc0000 1000 0000ffcc 0000 0000ffcc 0000 00000000 0010 f5b42165 641170f0 052026ce 4d1158d0
+1 01 4000000b 000 00000011 cc000000 1000 00ffcccc 0000 00ffcccc 0000 00ffcccc 0000 00000000 0010 f5b42165 641170f0 052026ce 4d1158d0
+1 01 40000000 000 00000011 33000000 0000 33000000 0000 33000000 0000 33000000 1000 00000000 0010 adb2fcb1 495793da 052026ce 4d1158d0
+1 01 40000000 000 00000011 00330000 0000 00330000 0000 00330000 0000 00330000 0000 00000000 0010 adb2fcb1 495793da 052026ce 4d1158d0
+1 01 40000000 000 00000011 00003300 0000 00003300 0000 00003300 0000 00003300 0000 00000000 0010 adb2fcb1 495793da 052026ce 4d1158d0
+1 01 40000000 000 00000011 00000033 0000 00000033 0000 00000033 0000 00000033 0000 00000000 0010 adb2fcb1 495793da 052026ce 4d1158d0
+1 01 40000000 000 00000011 33333333 0000 33333333 0000 33333333 0000 33333333 0000 00000000 0010 adb2fcb1 495793da 052026ce 4d1158d0
+1 01 40000004 000 00000011 33000000 0000 33000000 0000 33000000 0000 33000000 1000 00000000 0010 2307be97 5107a349 052026ce 4d1158d0
+1 01 40000004 000 00000011 00330000 0000 00330000 0000 00330000 0000 00330000 0000 00000000 0010 2307be97 5107a349 052026ce 4d1158d0
+1 01 40000004 000 00000011 00003300 0000 00003300 0000 00003300 0000 00003300 0000 00000000 0010 2307be97 5107a349 052026ce 4d1158d0
+1 01 40000004 000 00000011 00000033 0000 00000033 0000 00000033 0000 00000033 0000 00000000 0010 2307be97 5107a349 052026ce 4d1158d0
+1 01 40000004 000 00000011 33333333 0000 33333333 0000 33333333 0000 33333333 0000 00000000 0010 2307be97 5107a349 052026ce 4d1158d0
+1 01 40000008 000 00000011 33000000 0000 33000000 0000 33000000 0000 33000000 1000 00000000 0010 2307be97 5107a349 0a880ac3 a2f89ab1
+1 01 40000008 000 00000011 00330000 0000 00330000 0000 00330000 0000 00330000 0000 00000000 0010 2307be97 5107a349 0a880ac3 a2f89ab1
+1 01 40000008 000 00000011 00003300 0000 00003300 0000 00003300 0000 00003300 0000 00000000 0010 2307be97 5107a349 0a880ac3 a2f89ab1
+1 01 40000008 000 00000011 00000033 0000 00000033 0000 00000033 0000 00000033 0000 00000000 0010 2307be97 5107a349 0a880ac3 a2f89ab1
+1 01 40000008 000 00000011 33333333 0000 33333333 0000 33333333 0000 33333333 0000 00000000 0010 2307be97 5107a349 0a880ac3 a2f89ab1
+1 01 40000009 000 00000011 33000000 0000 33000000 0000 33000000 1000 00000000 0000 00000000 0010 2307be97 5107a349 0a880ac3 a2f89ab1
+1 01 40000009 000 00000011 00220000 0000 00220000 0000 00220000 0000 00000000 0000 00000000 0010 2307be97 5107a349 0a880ac3 a2f89ab1
+1 01 40000009 000 00000011 00003300 0000 00003300 0000 00003300 0000 00000000 0000 00000000 0010 2307be97 5107a349 0a880ac3 a2f89ab1
+1 01 40000009 000 00000011 33333300 0000 33333300 0000 33333300 0000 00000033 0000 00000000 0010 2307be97 5107a349 0a880ac3 a2f89ab1
+1 01 4000000a 000 00000011 55000000 0000 55000000 1000 00000000 0000 00000000 0000 00000000 0010 2307be97 5107a349 abc739f8 14222316
+1 01 4000000a 000 00000011 00330000 0000 00330000 0000 00000000 0000 00000000 0000 00000000 0010 2307be97 5107a349 abc739f8 14222316
+1 01 4000000a 000 00000011 33330000 0000 33330000 0000 00003333 0000 00003333 0000 00000000 0010 2307be97 5107a349 abc739f8 14222316
+1 01 40000000 000 00000011 cccc0000 0000 cccc0000 0000 cccc0000 0100 cccc0000 1000 00000000 0010 772f5db7 bb19b08e abc739f8 14222316
+1 01 40000000 000 00000011 cccc0000 0000 cccc0000 0000 cccc0000 0100 cccc0000 0000 00000000 0010 772f5db7 bb19b08e abc739f8 14222316
+1 01 40000000 000 00000011 cccc0000 0000 cccc0000 0000 cccc0000 0000 cccc0000 1000 00000000 0010 772f5db7 bb19b08e abc739f8 14222316
+1 01 40000000 000 00000011 cccc0000 0000 cccc0000 0000 cccc0000 0000 cccc0000 0000 00000000 0010 772f5db7 bb19b08e abc739f8 14222316
+1 01 40000000 000 00000011 77aa3355 0000 77aa3355 0000 77aa3355 0100 77aa3355 1000 00000000 0010 e6958240 e1715785 abc739f8 14222316
+1 01 40000002 000 00000011 00000000 0100 00000000 1000 0000cccc 0000 0000cccc 0000 00000000 0010 ec19e1f6 aed0c2a3 abc739f8 14222316
+1 01 40000002 000 00000011 11110000 0100 11110000 0000 0000aaaa 0000 0000aaaa 0000 00000000 0010 6bb07f7e e3edf276 abc739f8 14222316
+1 01 40000002 000 00000011 cccc0000 0000 cccc0000 1000 0000aaaa 0000 0000aaaa 0000 00000000 0010 98a936c9 e43c60a1 abc739f8 14222316
+1 01 40000002 000 00000011 33550000 0000 33550000 0000 000077aa 0000 000077aa 0000 00000000 0010 98a936c9 e43c60a1 abc739f8 14222316
+1 01 40000005 000 00000011 cc000000 0000 cc000000 0000 cc000000 1000 000000cc 0000 00000000 0010 d1d811ea a39c0f54 abc739f8 14222316
+1 01 40000005 000 00000011 aa111100 0000 aa111100 0000 aa111100 0000 000000aa 0000 00000000 0010 d1d811ea a39c0f54 abc739f8 14222316
+1 01 40000007 000 00000011 00000000 1000 00cccc00 0000 00cccc00 0000 00cccc00 0000 00000000 0010 02c79a44 d898075e abc739f8 14222316
+1 01 40000007 000 00000011 cc000000 0000 00aaaacc 0000 00aaaacc 0000 00aaaacc 0000 00000000 0010 02c79a44 d898075e abc739f8 14222316
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 46be9ce6 8ebc6daa abc739f8 14222316
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 d91efb58 de327890 abc739f8 14222316
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 93313a99 61c55b37 abc739f8 14222316
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 39c7c7a3 2bf15d9f abc739f8 14222316
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 00000000 0010 40af1e92 154b8aae abc739f8 14222316
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 1000 00000000 0010 40af1e92 154b8aae abc739f8 14222316
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0100 88776655 1000 00000000 0010 40af1e92 154b8aae abc739f8 14222316
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 00000000 0010 40af1e92 154b8aae abc739f8 14222316
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 00000000 0010 40af1e92 154b8aae abc739f8 14222316
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 00000000 0010 40af1e92 154b8aae abc739f8 14222316
+1 01 40000000 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0100 88776655 1000 00000000 0010 40af1e92 154b8aae abc739f8 14222316
+1 01 40000000 000 00000111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 1000 00000000 0010 40af1e92 154b8aae abc739f8 14222316
+1 01 40000001 000 00000111 f0f0f000 0010 f0f0f000 0100 f0f0f000 1000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 30ab38a5 49a31d63 53093b4a 7da0d049
+1 01 40000001 000 00000111 f0f0f000 0010 f0f0f000 0100 f0f0f000 0000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 30ab38a5 49a31d63 53093b4a 7da0d049
+1 01 40000001 000 00000111 f0f0f000 0010 f0f0f000 0000 f0f0f000 1000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 30ab38a5 49a31d63 53093b4a 7da0d049
+1 01 40000001 000 00000111 f0f0f000 0010 f0f0f000 0000 f0f0f000 0000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 30ab38a5 49a31d63 53093b4a 7da0d049
+1 01 40000001 000 00000111 f0f0f000 0000 f0f0f000 0100 f0f0f000 1000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 30ab38a5 49a31d63 53093b4a 7da0d049
+1 01 40000001 000 00000111 f0f0f000 0000 f0f0f000 0100 f0f0f000 0000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 30ab38a5 49a31d63 53093b4a 7da0d049
+1 01 40000001 000 00000111 f0f0f000 0000 f0f0f000 0000 f0f0f000 0000 776655f0 0000 776655f0 0010 776655f0 0100 776655f0 1000 00000088 0001 00000000 0010 30ab38a5 49a31d63 53093b4a 7da0d049
+1 01 40000002 000 00000111 f0f00000 0100 f0f00000 1000 6655f0f0 0000 6655f0f0 0000 6655f0f0 0100 6655f0f0 1000 00008877 0001 00008877 0010 00000000 0010 882ab813 b39f56d4 115f2495 0ba045f6
+1 01 40000002 000 00000111 f0f00000 0100 f0f00000 0000 6655f0f0 0000 6655f0f0 0000 6655f0f0 0100 6655f0f0 1000 00008877 0001 00008877 0010 00000000 0010 882ab813 b39f56d4 115f2495 0ba045f6
+1 01 40000002 000 00000111 f0f00000 0000 f0f00000 1000 6655f0f0 0000 6655f0f0 0000 6655f0f0 0100 6655f0f0 1000 00008877 0001 00008877 0010 00000000 0010 882ab813 b39f56d4 115f2495 0ba045f6
+1 01 40000002 000 00000111 f0f00000 0000 f0f00000 0000 6655f0f0 0000 6655f0f0 0000 6655f0f0 0100 6655f0f0 1000 00008877 0001 00008877 0010 00000000 0010 882ab813 b39f56d4 115f2495 0ba045f6
+1 01 40000003 000 00000111 f0000000 1000 55f0f0f0 0000 55f0f0f0 0000 55f0f0f0 0000 55f0f0f0 1000 00887766 0001 00887766 0010 00887766 0100 00000000 0010 0fdcfad5 6f18859b 5df00bab 7f826bf7
+1 01 40000003 000 00000111 f0000000 0000 55f0f0f0 0000 55f0f0f0 0000 55f0f0f0 0000 55f0f0f0 1000 00887766 0001 00887766 0010 00887766 0100 00000000 0010 0fdcfad5 6f18859b 5df00bab 7f826bf7
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 00000000 0010 af6c59f8 6185214a 5df00bab 7f826bf7
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 1000 00000000 0010 af6c59f8 6185214a 5c03ce53 80e60958
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0100 88776655 1000 00000000 0010 af6c59f8 6185214a a0726d98 1b0884dd
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 00000000 0010 af6c59f8 6185214a 7e77928b 768fd39f
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 af6c59f8 6185214a c87e3be1 26fe680b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 af6c59f8 6185214a c87e3be1 26fe680b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 af6c59f8 6185214a c87e3be1 26fe680b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 00000000 0010 af6c59f8 6185214a c87e3be1 26fe680b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 00000000 0010 af6c59f8 6185214a c87e3be1 26fe680b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 00000000 0010 af6c59f8 6185214a c87e3be1 26fe680b
+1 01 40000004 000 00000111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0100 88776655 1000 00000000 0010 af6c59f8 6185214a c87e3be1 26fe680b
+1 01 40000004 000 00000111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 1000 00000000 0010 af6c59f8 6185214a c87e3be1 26fe680b
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 af6c59f8 6185214a 50de85d3 ff1f5cdd
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0000 3333cccc 0010 3333cccc 0000 3333cccc 1000 00000000 0010 af6c59f8 6185214a 50de85d3 ff1f5cdd
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0010 88776655 0000 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 af6c59f8 6185214a 50de85d3 ff1f5cdd
+1 01 40000000 000 00001111 f0f0f0f0 0001 f0f0f0f0 0010 f0f0f0f0 0100 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0010 88776655 0000 88776655 1000 3333cccc 0000 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 af6c59f8 6185214a 50de85d3 ff1f5cdd
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 af6c59f8 6185214a 50de85d3 ff1f5cdd
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0000 88776655 0010 88776655 0100 88776655 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 5879fdce 29357338 50de85d3 ff1f5cdd
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0010 f0f0f0f0 0000 f0f0f0f0 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 40af1e92 154b8aae 50de85d3 ff1f5cdd
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0001 88776655 0010 88776655 0000 88776655 0000 88776655 0001 88776655 0010 88776655 0100 88776655 1000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 40af1e92 154b8aae 50de85d3 ff1f5cdd
+1 01 40000000 000 00001111 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 f0f0f0f0 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 88776655 0000 3333cccc 0001 3333cccc 0010 3333cccc 0100 3333cccc 1000 00000000 0010 40af1e92 154b8aae 50de85d3 ff1f5cdd
+1 01 40000000 001 00001101 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 00000000 0020 bb7bd05b e2436830 b7351744 cf833ee2 b66bcd9f e7f5c492 d37d4ca1 5dbed53d
+1 01 40000000 001 00001111 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 00000000 0020 bb7bd05b e2436830 b7351744 cf833ee2 b66bcd9f e7f5c492 bcc8cbae 0147c76c
+1 01 40000000 001 00001011 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 00000000 0020 d8c23db9 50249417 08391382 4ac71fc8 7bd9be9e c0b867aa bcc8cbae 0147c76c
+1 01 40000000 001 00001101 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 00000000 0020 d8c23db9 50249417 08391382 4ac71fc8 7bd9be9e c0b867aa 88fe6f22 daa240ab
+1 01 40000000 001 00001111 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 88776655 0000 88776655 0100 88776655 0010 88776655 0000 88776655 0001 88776655 0000 88776655 0000 88776655 1000 00000000 0020 d8c23db9 50249417 08391382 4ac71fc8 7bd9be9e c0b867aa 3b4440c3 cad2586d
+1 01 40000007 000 00000011 55000000 1000 00887766 0000 00887766 0000 00887766 0000 00000000 0010 6753a868 32292c2e 08391382 4ac71fc8
+1 01 40000006 000 00000011 66550000 0100 66550000 0000 00008877 0000 00008877 0000 00000000 0010 3ae61beb 6d4daef1 08391382 4ac71fc8
+1 01 40000005 000 00000011 77665500 0010 77665500 0000 77665500 0000 00000088 0000 00000000 0010 8b169d2e 95f14386 08391382 4ac71fc8
+1 01 40000004 000 00000011 88776655 0001 88776655 0000 88776655 0000 88776655 0000 00000000 0010 8b169d2e 95f14386 08391382 4ac71fc8
+1 01 40000003 000 00000011 55000000 1000 00887766 0000 00887766 0000 00887766 0000 00000000 0010 dbdb2377 3ccb518b 08391382 4ac71fc8
+1 01 40000002 000 00000011 66550000 0100 66550000 0000 00008877 0000 00008877 0000 00000000 0010 c098eac3 504377a4 08391382 4ac71fc8
+1 01 40000001 000 00000011 77665500 0010 77665500 0000 77665500 0000 00000088 0000 00000000 0010 6da7f325 dfda872d 08391382 4ac71fc8
+1 01 40000000 000 00000011 88776655 0001 88776655 0000 88776655 0000 88776655 0000 00000000 0010 d3216b01 27189627 08391382 4ac71fc8
+1 01 40000006 000 00000011 66550000 0000 66550000 0000 00008877 0000 00008877 0000 00000000 0010 d3216b01 27189627 08391382 4ac71fc8
+1 01 40000006 000 00000011 66550000 0000 66550000 1000 00008877 0000 00008877 0000 00000000 0010 274b7acb e2ea7099 08391382 4ac71fc8
+1 01 40000007 000 00000011 55000000 0000 00887766 0000 00887766 0000 00887766 0000 00000000 0010 274b7acb e2ea7099 08391382 4ac71fc8
+1 01 40000007 000 00000011 55000000 1000 00887766 0000 00887766 0000 00887766 0000 00000000 0010 d3216b01 27189627 08391382 4ac71fc8
+1 01 400005bc 010 00001011 7f404bcf 1111 2212d372 0110 c287391e 0111 90b8ff55 1011 a771fbaa 1110 f43acc89 1101 b3968232 1110 f6ef7384 0011 d957efc2 1111 9090d290 1111 0e6fda6c 1010 1529395d 1011 000005b0 0040 bb588f00 4538c68d 63a3f43c 36f75e43 02c1ac60 b1f8a5cc 3d531460 dedbaf63 72541e51 a59f2c2a 26781f03 d4cd9969 79c44179 54c466a8 0a97a993 abbdeb7f
+1 01 4000021e 001 00000010 ce2b0000 1100 d5d4f627 0011 d5d4f627 1100 00000210 0020 163cb2d6 2982e44e a973f1f2 51c50a65 ee8cf2a9 1fe6d82d 49fefd47 9d287308
+0 01 400001a4 010 00001101 daeef069 abccf06a daeef06b abccf06c daeef06d abccf06e daeef06f abccf070 daeef071 abccf072 daeef073 abccf074 daeef075 abccf076
+1 01 4000033a 001 00001111 66510000 0000 10771956 0011 10771956 1000 0870c081 0011 0870c081 0100 4de5798a 0000 4de5798a 0100 4146dfe2 0001 4146dfe2 1100 914add5b 0011 914add5b 0100 cf3f041c 0001 cf3f041c 0100 3aabfe9c 0011 3aabfe9c 1100 0000ee9e 0011 00000330 0030 738c0653 7daa0977 318caae9 88ac3732 66a30ea2 1ce6d384 272aca1e c4b32cbe 6c040782 4bd4037e 5cda3df7 5b541102
+1 01 400000ea 001 00000001 2c8f0000 0100 0000bc6d 0011 000000e0 0010 fba996f9 17c9f131 aa56bc11 6bb92813
+1 01 400006f2 001 00000001 a9c70000 1000 0000a91a 0011 000006f0 0010 01fe2557 8e685aab 401c508c 80b0d21d
+0 10 400006f8 010 00000111 abccf1be daeef1bf abccf1b8 daeef1b9 abccf1ba daeef1bb a9ccf1bc daeea91a
+1 01 4000015a 000 00001110 70260000 0100 70260000 0000 e23a29e4 0001 e23a29e4 0000 e23a29e4 0100 e23a29e4 1000 4729e27d 0001 4729e27d 0010 4729e27d 0000 4729e27d 0000 18921cf0 0000 18921cf0 0010 18921cf0 0100 18921cf0 0000 00000051 0001 00000150 0020 2c0db855 bb49236d f6d03717 841644fd 56b7a54c d1682f29 1631135b 5ed063c1
+0 10 400007c2 001 00000011 abccf1f0 daeef1f1 daeef1f1 abccf1f0
+0 01 40000634 001 00000000 daeef18d
+0 10 40000510 010 00000111 abccf144 daeef145 abccf146 daeef147 abccf140 daeef141 abccf142 daeef143
+1 01 40000060 010 00001101 6061a1a6 0111 73713708 1010 65623885 1101 71e91c58 1101 9ebdd76e 1111 06c4d1e8 1110 51286919 1110 6abb16b3 1100 1b5d04c1 1111 fd6bed84 1110 498f7dde 1101 b2afecdd 1010 55d035e7 1111 509997d2 1100 00000060 0040 de87fbed 45dcb53a 500eb270 2a7c8fa0 7c92eeee a51cc361 b8c05e07 f42625e2 52afd467 b19f6b22 93d3ea06 26f5d0cd 1d8f5782 1d2b917e 8b2343ac 8bec7713
+0 10 40000191 000 00001111 abccf064 abccf064 abccf064 daeef065 daeef065 daeef065 daeef065 abccf066 abccf066 abccf066 abccf066 daeef067 daeef067 daeef067 daeef067 abccf064
+1 01 400005fe 001 00000111 9d290000 0100 28beb558 0011 28beb558 1000 7dd92c5b 0010 7dd92c5b 1000 5d9f19d3 0011 5d9f19d3 1100 00006a13 0000 000005f0 0020 aafae3ce a0601f5c 05ad4fde a632aced 75b4e8e8 29849864 3d189f27 6f1eddb3
+1 01 400002ac 010 00001111 8fd6c258 0001 8c9c793c 1111 c71bff9c 1011 3e43e0fc 1000 316fd5d9 1101 2dc02419 1111 eb17e54a 1111 3b8cf54b 1010 9168c13f 1101 d8839bca 0111 01fa1fe2 1110 40ebf501 1111 2669c93e 0101 7104d196 0111 6300cff5 1111 9b704fe6 1111 000002a0 0050 0b9f785c 723399fa de0f7e2c 93ae0466 21952cfa 6449ee8a 8f5a1e33 c238b3e9 8661bf55 be0752e8 ba594b0d 62d1487e ea12dbc7 f073ae2b b76ca329 91976461 0aee64ec b16d307c 6d8e8f94 0d0b4b2b
+1 01 4000033b 000 00001001 ad000000 1000 a2a7f4a9 0001 a2a7f4a9 0000 a2a7f4a9 0000 a2a7f4a9 1000 5cdec51e 0000 5cdec51e 0000 5cdec51e 0100 5cdec51e 1000 00000015 0001 00000330 0020 738c0653 7daa0977 e6972e63 13f9cbe1 09782fc8 27aa449c 272aca1e c4b32cbe
+1 01 4000018f 000 00000001 1c000000 1000 00000091 0001 00000180 0020 2f40ba98 b4554a04 39cde67e 0737bfef 4800d261 639ac522 787ba65e 3ed6eb7e
+1 01 40000197 000 00001110 55000000 1000 7376c22b 0001 7376c22b 0010 7376c22b 0100 7376c22b 0000 1c0a45ce 0000 1c0a45ce 0010 1c0a45ce 0100 1c0a45ce 1000 b4d04e74 0000 b4d04e74 0010 b4d04e74 0000 b4d04e74 1000 0000fbb7 0000 0000fbb7 0010 00000190 0020 dd289cf2 33362065 961e40d1 71811718 67a39852 d99eaea6 7b491b19 a21d4e88
+0 10 40000504 010 00000111 daeef141 abccf142 daeef143 abccf144 daeef145 abccf146 daeef147 abccf140
+0 10 4000060b 000 00000011 5d9f19d3 5d9f19d3 5d9f19d3 5d9f19d3
+1 01 400007b3 000 00000011 59000000 1000 0068b16a 0001 0068b16a 0010 0068b16a 0100 000007b0 0010 0a2f79b4 0fc7b6ae f204edef edc81556
+1 01 4000013c 010 00000100 c6312a9b 0111 7b281164 1001 d4514169 1011 fb701dc0 0111 2743525b 1011 00000130 0020 1fa0b27b 8fea3c8f 9ab5b370 457051f5 17e2c42c 79f2f548 12bc3b76 280caeb2
+1 01 40000018 010 00001111 def82a5b 0101 6b47cee5 1111 08840149 0111 73a1c153 1111 ce1ca1f5 1111 4ef10df6 1011 22e4da6c 0111 abe03567 1111 afb635bd 1111 546dbb49 1111 a4c66a28 1011 c4b18d4d 1111 25cdc807 1101 fb9dd6f6 0001 a87f41d9 1111 0da6cc12 1110 00000010 0050 7bd9be9e c0b867aa 54277575 53c6fbe7 1233a378 e3ff7b65 37e1153a 2ea039c3 45c7329a 8a115337 55cd3bdb 0765d04e 34be554f ba6e5db0 e74e8f61 fe01153c 9feb00bf b570c1c2 859e0c83 3ea6a8c5
+0 10 40000354 010 00001111 3aabfe9c abccee9e daeef0d7 abccf0d8 daeef0d9 abccf0da daeef0db abccf0dc daeef0dd abccf0de daeef0df 5cdec081 dae5f015 4146f0e2 da4add5b ab3ff01c
+0 10 40000558 010 00001111 abccf156 daeef157 abccf158 daeef159 abccf15a daeef15b abccf15c daeef15d abccf15e daeef15f abccf150 daeef151 abccf152 daeef153 abccf154 daeef155
+1 01 40000008 001 00001011 56cabcfd 0001 56cabcfd 0000 7d4c0775 0001 7d4c0775 1000 17259941 0011 17259941 1100 53079ff8 0011 53079ff8 1100 d3119e2a 0011 d3119e2a 1100 10a6621c 0011 10a6621c 0000 00000000 0020 d3216b01 27189627 25ad7fa6 15358e7a 47bc67d2 701ae6ba a5534849 eca29584
+1 01 400002ac 010 00000111 dcc4ace1 1111 c0099686 0111 7191bb37 1111 b2ebc2ae 1100 463dd864 1111 70e97602 1100 7d1efa98 1101 cbf71453 0111 000002a0 0030 0b9f785c 723399fa 51f4a688 3bfffc51 05ff8838 efbd482f 186b7ce1 ac5af24a a2a2192e 1f1336db 9d5d434f 08eca6c9
+0 10 400003cc 010 00000011 daeef0f3 abccf0f0 daeef0f1 abccf0f2
+1 01 4000034e 000 00000101 30e90000 0100 30e90000 0000 2f3bce12 0001 2f3bce12 0010 2f3bce12 0000 2f3bce12 0000 00000340 0020 09782fc8 27aa449c 25157b0c 942432d9 a6353ed5 f08d0391 5cda3df7 5b541102
+1 01 400007c7 000 00001000 26000000 1000 27eab520 0000 27eab520 0000 27eab520 0100 27eab520 1000 b1717f83 0001 b1717f83 0010 b1717f83 0100 b1717f83 0000 000007c0 0010 fbf50c32 42c28d80 02d7e4af 959169dd
+0 01 400006e3 000 00001100 abccf1b8 daeef1b9 daeef1b9 daeef1b9 daeef1b9 abccf1ba abccf1ba abccf1ba abccf1ba daeef1bb daeef1bb daeef1bb daeef1bb
+0 01 400007e4 010 00000000 daeef1f9
+0 10 40000714 010 00000001 daeef1c5 abccf1c4
+0 01 40000404 010 00001000 daeef101 abccf102 daeef103 abccf104 daeef105 abccf106 daeef107 abccf108 daeef109
+1 01 40000314 010 00001000 4baa0f3b 0111 75aa20d3 1010 cbf4cf1f 1101 597448eb 1110 3381856c 1111 1cf75e7a 1110 56654c6f 1101 d42e93ec 0110 34aba800 0110 00000310 0030 a1d138a0 5dd91fe0 ebf8dd61 9c3cf60a afb2eb06 bccf0059 9af73cb5 3b2df2a7 7b494b98 256c4af8 e6972e63 13f9cbe1
+0 01 40000560 010 00000111 abccf158 daeef159 abccf15a daeef15b abccf15c daeef15d abccf15e daeef15f
+1 01 40000664 001 00000100 a08db0e1 0001 a08db0e1 1000 3a61bdb9 0011 3a61bdb9 0100 000077cb 0011 00000660 0010 60d5205a 251886ec 0211c485 485f9f4b
+0 01 40000748 001 00001100 abccf1d2 abccf1d2 daeef1d3 daeef1d3 abccf1d4 abccf1d4 daeef1d5 daeef1d5 abccf1d6 abccf1d6 daeef1d7 daeef1d7 abccf1d8
+1 01 40000324 010 00001010 09f95456 1101 1e8fd540 0111 a136ca59 1111 4fe9f4ce 1111 1d479007 1111 4fb8c1d5 1111 81c1410e 1110 e081e899 0011 2ba40c31 1111 1d6e91cf 1101 f8644ca5 0111 00000320 0030 84046f14 4ec606dd 4dc0c432 58c9ac5a 3c201fb1 c085b922 93d9d367 84bb78c3 a1928709 5b690018 00ce1b6c 8dcb2324
+1 01 400000ce 001 00001000 d8780000 0100 6d182db9 0011 6d182db9 1100 85d3fad6 0011 85d3fad6 1000 1d074de7 0011 1d074de7 1000 56a01a37 0000 56a01a37 1100 000000c0 0020 321b1550 f17742e7 367ac15a a34e8022 a9a408ed 4f773ad0 00ecf282 32cb8b81
+1 01 40000046 001 00000100 13690000 0100 27027493 0011 27027493 1000 6f603a14 0011 6f603a14 1100 00000040 0010 6b4c041b 8528224a 01b53020 2172c8e5
+0 10 40000268 010 00000011 abccf09a daeef09b abccf098 daeef099
+0 01 400006f1 000 00001100 a9ccf1bc a9ccf1bc a9ccf1bc daeea91a daeea91a daeea91a daeea91a abccf1be abccf1be abccf1be abccf1be daeef1bf daeef1bf
+1 01 400006f2 001 00001100 98320000 1000 e567f371 0001 e567f371 1100 e5500c8e 0011 e5500c8e 1100 75570218 0011 75570218 0100 50a9cde3 0011 50a9cde3 1100 7e767518 0010 7e767518 1100 b96082c9 0010 b96082c9 1000 000006f0 0020 cd1afa33 d3f98a90 a1b46458 195875f0 4d17fd35 9f3be01a a60b098e 6da6ae41
+1 01 40000394 001 00001000 5088289c 0011 5088289c 1100 ffef6579 0010 ffef6579 1100 35125f69 0011 35125f69 1100 57f20c74 0000 57f20c74 0100 00000ceb 0010 00000390 0020 c6692f0b bb7adf72 c7251492 d89bfead eaf6a410 df2a52fe 35b66fdf f05b4251
+1 01 400001f0 001 00001000 f2503555 0011 f2503555 0100 51a5e58e 0011 51a5e58e 1100 035e2835 0011 035e2835 1100 8e43afb3 0011 8e43afb3 1000 00007d3a 0011 000001f0 0020 0828bcee d81c9650 58434a33 0fe89ccd 9f9d65cd 1ee1cd58 c8e97f31 27c386a4
+1 01 40000478 000 00001000 8b8f4f8c 0001 8b8f4f8c 0000 8b8f4f8c 0100 8b8f4f8c 0000 6fc26325 0001 6fc26325 0010 6fc26325 0000 6fc26325 1000 00000069 0000 00000470 0020 588d6091 3ecc99a6 597c939e 8d5acd4e 2e8daa71 faf8fa6c acbd9062 c75d5582
+0 01 40000548 010 00001110 abccf152 daeef153 abccf154 daeef155 abccf156 daeef157 abccf158 daeef159 abccf15a daeef15b abccf15c daeef15d abccf15e daeef15f abccf160
+1 01 4000010c 010 00000001 ad79f9e8 1111 9f5fb202 1111 00000100 0020 f9d809f7 4a80742d 7bcef30c 81ccfbbf e2c1e133 f442bdd0 0e92ea81 0cb9a3f6
+1 01 40000240 010 00001101 c91bfb58 1110 23535939 0011 f0fcc7f2 1110 60359a9d 1101 0b3f44e8 1010 2b2e1e9f 1110 83d08d87 1110 6fd9c4cf 1110 24ac4aef 0111 a07c18da 1011 d58a7db8 1111 d293398a 1111 64207eac 1011 c1bd2040 1110 00000240 0040 79f54785 cd2f18b5 0324ef44 19ce52c8 4dfe128d 22625f00 f8513d33 c28644d5 c0a3dcdd bf15eb4e c04762ee 9469e536 cf22dff1 51cdf037 cd25aa68 4419c004
+1 01 40000598 010 00000011 f811572c 1010 afa88516 0111 f7cb1e0f 1111 626f842c 1111 00000590 0020 01e345ce 88db72bf bc75df80 b60d0937 5c8aa281 f9d0e432 cc66b60f b55894e2
+0 01 40000191 000 00001011 abccf091 abccf091 abccf091 55eef065 55eef065 55eef065 55eef065 ab76c22b ab76c22b ab76c22b ab76c22b 1c0a4567
+1 01 4000038e 001 00001110 a5ca0000 1100 99f01435 0010 99f01435 1000 d4938bcc 0011 d4938bcc 1000 dbcbc06f 0011 dbcbc06f 1000 cb5860cb 0001 cb5860cb 0100 cd639293 0011 cd639293 0100 2fb89799 0010 2fb89799 1100 a143d459 0011 a143d459 1100 00000380 0030 0d5cb464 692b4bad d530a5a0 abfeea8d e98a7f55 0913db35 31f57432 32907924 cc700de3 27233ec8 72e77fba 50a1c5c4
+0 10 40000154 001 00001111 daeef055 daeef055 ab26f056 ab26f056 e23af0e4 e23af0e4 7bccf064 7bccf064 d4ee4169 d4ee4169 ab701dc0 ab701dc0 27ee525b 27ee525b abccf054 abccf054
+1 01 4000051c 001 00001100 d43a8757 0010 d43a8757 0000 08b1b404 0001 08b1b404 1100 8eb1d489 0011 8eb1d489 1100 22e64751 0011 22e64751 1100 811fab35 0011 811fab35 1100 c5c12109 0011 c5c12109 1100 0000e8cf 0001 00000510 0030 0c868362 22c85dd7 ce7c1d25 733d9767 83a46662 38f5574c 7e5177b7 7982495e 1c5ea154 757305dd 9f544fe9 df0f41fd
+1 01 4000027c 010 00000110 efc5a926 1101 60bc24c3 1101 bcc8ad80 1111 116af1fd 1011 ab5b53e5 1011 a61a7b15 1011 a67a8951 1101 00000270 0030 cf22dff1 51cdf037 afd87a46 73055b14 71be443d e601610f d69b8edd dc07a5ce 97a7a50f 7c2df7e9 2a288578 edda59cd
+1 01 40000734 010 00000010 dcb40742 0111 4cd78259 0101 f1283c48 0101 00000730 0010 5a09cba7 3dc634ce b7ed313a 57879814
+1 01 40000489 000 00000110 ff38e200 0010 ff38e200 0100 ff38e200 1000 d9937868 0000 d9937868 0010 d9937868 0100 d9937868 1000 00000480 0010 2e8daa71 faf8fa6c 8ef8686e b41ac61a
+1 01 40000016 001 00001101 eac50000 1100 de98340c 0001 de98340c 1100 b17c633a 0001 b17c633a 1000 6bd206eb 0011 6bd206eb 1100 4e552c50 0011 4e552c50 1000 908e05ea 0010 908e05ea 0000 999ff214 0001 999ff214 1100 000011c8 0011 00000010 0030 0c869167 35678a9c a83b5eb5 045e9c83 cd52335c 37ea5fab 9c8a5bd4 155640c0 ce653401 0a61a036 55cd3bdb 0765d04e
+0 01 40000268 001 00001011 d58a7db8 d58a7db8 d293398a d293398a 64cc7eac 64cc7eac c1bd209d c1bd209d abccf09e abccf09e efc5f026 efc5f026
+0 01 400002d5 000 00001010 01fa1fb5 01fa1fb5 01fa1fb5 40ebf501 40ebf501 40ebf501 40ebf501 da69f03e da69f03e da69f03e da69f03e
+1 01 40000391 000 00001001 fe3da400 0000 fe3da400 0000 fe3da400 0000 e6feab84 0001 e6feab84 0010 e6feab84 0100 e6feab84 1000 00367e35 0001 00367e35 0010 00367e35 0000 00000390 0010 0dea6505 09fc5a7c a683067a a32e09bd
+0 01 400002f0 010 00001100 abccf0bc daeef0bd abccf0be daeef0bf abccf0c0 daeef0c1 abccf0c2 daeef0c3 abccf0c4 daaa0f3b 75cc20c6 cbf4f01f 597448c8
+1 01 40000600 000 00001111 8cc21a89 0001 8cc21a89 0000 8cc21a89 0100 8cc21a89 0000 b33f8967 0001 b33f8967 0010 b33f8967 0100 b33f8967 0000 2825a06b 0001 2825a06b 0010 2825a06b 0000 2825a06b 1000 00a3fe5e 0000 00a3fe5e 0000 00a3fe5e 0100 00a3fe5e 1000 00000600 0010 1fd66912 3b26c253 eccbca58 d35df755
+1 01 400002e8 001 00001110 aaf39585 0001 aaf39585 1100 d1272af1 0011 d1272af1 0100 c7953ef4 0001 c7953ef4 1100 df9d56a4 0000 df9d56a4 1100 adab2147 0011 adab2147 1100 958e1879 0011 958e1879 1100 a1859c38 0001 a1859c38 1100 000062b0 0010 000002e0 0030 0aee64ec b16d307c e8b828b9 666fecf8 b87fb0c0 230f80b1 43dc255e b1c8e12d 6e1a6ebf dfd17fdc 261ff31f d5548dfe
+0 10 400001b6 001 00001111 daeef06d abccf06e abccf06e daeef06f daeef06f b4cc4e68 b4cc4e68 daeefb69 daeefb69 abccf06a abccf06a daeef06b daeef06b abccf06c abccf06c daeef06d
+1 01 40000192 001 00000110 a0180000 1100 99f71b04 0001 99f71b04 1100 c142f644 0011 c142f644 1100 a3b9f8f9 0011 a3b9f8f9 1100 00000190 0010 ff360786 bc35c8e2 82788d88 b347980d
+1 01 4000031e 001 00001001 719e0000 0000 44775bb6 0011 44775bb6 1100 32a72333 0011 32a72333 0100 0872ef3a 0011 0872ef3a 1100 338433bf 0010 338433bf 1000 0000f723 0010 00000310 0030 a1d138a0 5dd91fe0 ebf8dd61 9c3cf60a 727794f0 d13e5422 82dcbfc3 e6e0f62f 5ddd432d 62b3fcb4 93d9d367 84bb78c3
+0 01 400002da 000 00000100 40ebf501 40ebf501 da69f03e da69f03e da69f03e
+1 01 400000cc 001 00001011 f6bdd54d 0011 f6bdd54d 1100 36655225 0011 36655225 1100 df5e0016 0011 df5e0016 1100 bdb29a82 0011 bdb29a82 1100 2445723c 0011 2445723c 1000 f1f1cac9 0010 f1f1cac9 1000 000000c0 0030 321b1550 f17742e7 c1f86ef3 e49b5c2b a9b57b8e 084367aa d195faa9 b63133e4 dde2b16e 2db2e716 aa56bc11 6bb92813
+0 01 400000f0 001 00001100 abccf03c abccf03c daeef03d daeef03d abccf03e abccf03e daeef03f daeef03f abccf040 abccf040 daeef041 daeef041 abccf042
+1 01 4000010a 001 00000001 867e0000 1100 00000b4c 0001 00000100 0010 f9d809f7 4a80742d 3d06521b c2942c3c
+1 01 4000073a 001 00001100 21cd0000 0000 1d9fbb88 0010 1d9fbb88 1100 22a77a81 0001 22a77a81 1100 df8ff74f 0001 df8ff74f 0100 06408611 0010 06408611 1000 475866ae 0011 475866ae 1100 f2c59425 0001 f2c59425 1100 00000730 0030 5a09cba7 3dc634ce 0d1ad1a4 392c7ad8 ea2e38ca cf597a8e af2e148f c978b9b2 4c23a962 7d0e110c 954b304d ee5e90d6
+1 01 400005c6 000 00000111 1e420000 0100 1e420000 1000 e9861024 0001 e9861024 0010 e9861024 0000 e9861024 0000 00000a47 0001 00000a47 0010 000005c0 0010 4bb9b81f 784b907d b089e654 9b6be1cf
+0 10 40000270 010 00001111 64cc7eac c1bd209d abccf09e efc5f026 c91bfb90 daee5939 f0fcc792 6035f09d 0bcc4494 2b2e1e95 83d08d96 6fd9c497 abac4aef a0ee18da d58a7db8 d293398a
+1 01 40000614 010 00000110 f7371214 1110 cdbbb32b 1111 bf54e9b4 1111 bf01ae72 1111 61e9703b 1110 81f02c93 1101 fe425705 1111 00000610 0020 a381b8dd f7015c35 06116148 678cb80c 411f60dd 5bad9c34 3912510a 53a054d3
+1 01 400001f8 010 00000111 b4ded0a4 1011 cf3de79b 1111 094aede5 1110 0831b2f1 1111 6cbcb14b 1111 416a0737 1100 a31b9549 0111 f5a1a984 1111 000001f0 0030 0828bcee d81c9650 be514926 029e8549 5a55a772 0cebabea 2c18f580 07a57e8b c64ebbfc 43c2f6af a973f1f2 51c50a65
+1 01 400000bc 001 00001000 17d173cd 0011 17d173cd 1100 15f51dce 0011 15f51dce 1000 3a0f1bfa 0000 3a0f1bfa 0100 198e7aa8 0011 198e7aa8 0000 000052f1 0011 000000b0 0020 fd2e8237 8067bc33 97e43c8a 327f41a8 6217158d c79e52d5 3a7327bc 7be6980a
+1 01 40000444 010 00000001 2e724522 0001 0d8e3f8c 1111 00000440 0010 32276161 a3ffb3ae 2155be69 2c77d666
+0 01 40000550 010 00000010 abccf154 daeef155 abccf156
+0 10 400005cc 010 00000111 a7710a47 f43af189 b3968275 abcc7384 d957efc2 ab12d370 1e42391e 90cc1024
+1 01 40000544 010 00001111 bdab852a 1001 b3cafec5 1011 4e64115e 0011 52e5fca3 1111 46354af6 0101 da794a23 1101 aeb97adf 0100 a76783e0 1011 d7cdeb92 1111 4d091b9d 1111 418038b5 1011 3e189d15 0110 fb82c657 0001 a80225cc 1111 5fca9000 0111 84ee4c78 1001 00000540 0050 99e255d0 1d924249 f4366e68 7e2ac28c 43b60607 cdb4adfd f7685a89 2c23e99d c814cb77 09240545 b20e8144 3befea1e fda1b535 9bc660a3 271ee80b 85a7441f fb735610 4a075ddd 397eb61e 5c6a45c6
+0 10 400005a4 000 00000111 626f842c 626f842c 626f842c 626f842c f7cb1e0f f7cb1e0f f7cb1e0f f7cb1e0f
+1 01 40000264 010 00001010 96c60b10 1101 79b3e18c 1101 7a4a8a1a 0100 802c2247 1111 abd8941a 1111 bb07278e 1111 98a1bfff 1110 bad457ea 1111 cebac4ba 0100 b2307083 1111 dfc4fb50 1111 00000260 0030 380b3103 689d0a33 5ffb96a6 cf615253 8b996bcf c15d21cd 66b8634a 447febdf 1768f995 1aac421f d2709c40 fe7f9d5c
+0 01 40000030 000 00000110 abe411c8 abe411c8 abe411c8 abe411c8 abe03567 abe03567 abe03567
+1 01 400002f6 001 00001100 caec0000 0100 42db133b 0001 42db133b 1000 d99e0b43 0011 d99e0b43 1100 b2ddf87b 0010 b2ddf87b 1100 06e57ae3 0011 06e57ae3 0000 389e1ac6 0000 389e1ac6 1100 d82dfbfa 0011 d82dfbfa 1100 000002f0 0020 e315a52d 88ff6d6d 7306ab56 4b6ea138 c7e71f4f de3b3058 1c791b04 0e3f3697
+0 01 40000678 010 00001101 abccf19e daeef19f abccf1a0 daeef1a1 abccf1a2 daeef1a3 abccf1a4 daeef1a5 abccf1a6 daeef1a7 abccf1a8 daeef1a9 abccf1aa daeef1ab
+1 01 400002a8 010 00001110 b177054a 1111 ab1c3972 0101 170ed6e4 1111 f8bd216e 1111 54d936ca 1000 a5b6e852 1111 e696ecaf 1011 ab9c97ad 1111 dcbb61d5 1011 7e393b38 1111 ec95970d 1011 054dcca3 1101 0961e7fd 1111 b6182f10 0110 82cb2bec 1110 000002a0 0050 0b9f785c 723399fa 5bb0fcd1 90c22f55 99a67175 86bd7a75 368de000 34555fbf bd4a0782 af704c71 036fbf94 a232bcba f45b38d1 a0dcdbc3 2459231e fd47bf5d 601c6fef 491dbe6a e8b828b9 666fecf8
+0 01 400002b2 001 00001001 170ed6e4 f8bd216e f8bd216e 54ebf0ae 54ebf0ae a5b6e852 a5b6e852 e6e9ecaf e6e9ecaf ab9c97ad
+0 10 4000070e 000 00000001 daeef1c3 daeef1c3
+1 01 400007d3 000 00001100 19000000 1000 ae339cb1 0001 ae339cb1 0010 ae339cb1 0100 ae339cb1 1000 04677bb8 0001 04677bb8 0000 04677bb8 0100 04677bb8 0000 dad9e7f1 0000 dad9e7f1 0010 dad9e7f1 0100 dad9e7f1 1000 000007d0 0010 e2d0b31a 66507b21 8721aec9 65ea49fc
+1 01 40000474 010 00000100 610982eb 0011 e7142f01 0101 c9d2793d 0101 29dad99f 0111 6b596d43 1011 00000470 0020 ad303c8f 09ca8c2a 0bdfff33 387ee6b0 c8eb7b60 18e4c7fb 8ef8686e b41ac61a
+0 10 40000518 000 00000011 abccf146 abccf146 abccf146 abccf146
+1 01 40000192 001 00001011 9c2a0000 1100 8750b74c 0010 8750b74c 0100 15580b4b 0011 15580b4b 1000 9ced3039 0001 9ced3039 1000 1fdaef55 0011 1fdaef55 1100 e5a99ec5 0010 e5a99ec5 1100 00000969 0010 00000190 0020 0e291fa6 e3d4e97d a273356f e634880e f8e6f6c3 98820da3 d8c1d9ab 22dbd653
+0 01 4000013c 010 00000001 da312a9b 7bccf064
+1 01 400003a4 010 00000001 72ab5fde 1111 081ce075 1111 000003a0 0010 d0af5d28 9f02206f 6cc083f8 6ea11deb
+0 01 400005c6 001 00001110 1e42391e 90cc1024 90cc1024 a7710a47 a7710a47 f43af189 f43af189 b3968275 b3968275 abcc7384 abcc7384 d957efc2 d957efc2 9090d290 9090d290
+1 01 400000b8 001 00000101 45b3b6f2 0011 45b3b6f2 1000 58231043 0011 58231043 1100 1973b377 0010 1973b377 1100 000000b0 0020 fd2e8237 8067bc33 c8a750c9 b9f9c927 be1d0f7d 26ce5a22 3a7327bc 7be6980a
+1 01 40000608 010 00000111 d3205c08 0011 dfb919d8 1111 af3673e1 1101 1162be21 1111 6436397e 1110 15272cc1 1010 aefdd74e 1111 cc81af1e 1111 00000600 0030 1fd66912 3b26c253 cab1588b bac16765 11a8298c 418c18b8 f359848a 89eb9171 af2de955 aa55c760 3912510a 53a054d3
+0 01 40000394 010 00001110 e6feab84 dbef7e35 35585fcb ab639293 72ab5fde 081ce075 daeef0eb abccf0ec daeef0ed abccf0ee daeef0ef abccf0f0 daeef0f1 abccf0f2 daeef0f3
+1 01 40000038 000 00001000 5c1066b2 0000 5c1066b2 0010 5c1066b2 0000 5c1066b2 0000 56662ae8 0000 56662ae8 0000 56662ae8 0100 56662ae8 0000 00000096 0000 00000030 0020 ce653401 0a61a036 8031cb54 2b7f2897 6b4c041b 8528224a 01b53020 2172c8e5
+1 01 4000025c 010 00000011 db6e20a3 1110 95b8cbb9 1001 261e0c7e 1111 620ffcf9 1110 00000250 0020 4dfe128d 22625f00 975f64c9 02526927 9360b971 fd846706 c72dc39a ae4beff6
+0 01 40000774 010 00000111 daeef1dd abccf1de daeef1df abccf1e0 daeef1e1 abccf1e2 daeef1e3 abccf1e4
+0 01 400001f0 010 00000101 ab503555 51a5e58e b45ed0a4 cf3de79b 094aed3a 0831b2f1
+1 01 4000073c 001 00000110 7857e22a 0011 7857e22a 1100 55def957 0011 55def957 1000 7c2b15ee 0011 7c2b15ee 1100 00006223 0011 00000730 0020 5a09cba7 3dc634ce f878ffbb 4e5b7536 252f541f 7d3646da 3c29c887 ace5139f
+1 01 40000568 010 00000111 30bd762c 1110 e8490636 0111 15bccf57 1010 72fa5140 1111 9ff461e7 1111 f3ceaae0 0010 afa5290f 1110 edba9447 1001 00000560 0030 c814cb77 09240545 7f0da4dd 91c81baa 268efa34 841f097b 5efb6f19 6e392e1c 6dbb2b34 1d7e249b 397eb61e 5c6a45c6
+1 01 4000047f 000 00000101 18000000 0000 ed974bef 0000 ed974bef 0010 ed974bef 0100 ed974bef 1000 000000ee 0001 00000470 0020 ad303c8f 09ca8c2a 0bdfff33 387ee6b0 c72834e7 852974f9 8ef8686e b41ac61a
+1 01 4000045c 010 00001111 0f670b17 1111 e286dc26 1111 9d63bdeb 0111 798cca7e 1111 71002579 1010 bed4b2b5 1001 1eaff2b9 1011 7c830739 0101 923dd740 1111 98ad19dc 1111 d07a7e7f 1011 32407239 0111 d85eec0f 0111 ce3a3e9d 1111 88144c7f 1111 69b482d8 1111 00000450 0050 d63d8e1c d43d5984 630b0aee 9549b466 dcfbe65f 79481816 f3b27aa2 c7684bda f704f2b7 3c8d7e99 b42428f1 2bdb38c6 87d68004 71ab01d5 4096df4e e928b89a f4fa40f6 885cc9e8 8b5da05d 526ade2a
+0 10 40000162 000 00000001 abcce27d abcce27d
+0 01 4000023e 001 00001011 daeef08f c91bfb90 c91bfb90 daee5939 daee5939 f0fcc792 f0fcc792 6035f09d 6035f09d 0bcc4494 0bcc4494 2b2e1e95
+0 10 40000531 000 00000001 c5c12109 c5c12109
+0 10 400002e7 000 00001111 6300cff5 aaf34f85 aaf34f85 aaf34f85 aaf34f85 da272af1 da272af1 da272af1 da272af1 82cb2b96 82cb2b96 82cb2b96 82cb2b96 6300cff5 6300cff5 6300cff5
+1 01 400000c8 010 00000011 bce39e2f 1111 f9118bf6 0011 9dab26bb 0100 d0b15cfd 1010 000000c0 0020 be1d0f7d 26ce5a22 d8b9dcf8 86a24713 9c2cde37 dbdc6ce1 d195faa9 b63133e4
+0 10 400007bc 001 00000011 daeef1ef daeef1ef abccf1ee abccf1ee
+0 10 4000065b 000 00000111 abccf196 daeef197 daeef197 daeef197 daeef197 abccf196 abccf196 abccf196
+0 10 400004e0 010 00000001 abccf138 daeef139
+1 01 40000776 001 00000001 c90b0000 0000 000026bd 0011 00000770 0010 c4572059 e25c9940 25ceacf0 5f6a577f
+0 01 400004c6 000 00001110 daeef131 daeef131 abccf132 abccf132 abccf132 abccf132 daeef133 daeef133 daeef133 daeef133 abccf134 abccf134 abccf134 abccf134 daeef135
+0 10 40000694 010 00000011 daeef1a5 abccf1a6 daeef1a7 abccf1a4
+1 01 4000067a 001 00001000 ac030000 1100 c9573c9c 0001 c9573c9c 1100 3275187e 0001 3275187e 0100 a38b145b 0011 a38b145b 1100 4ceabe1c 0010 4ceabe1c 0100 00000670 0020 0442eefd f2fa41eb 0ac88fe5 58eb01b3 f5a17920 b1d42411 ef4e029c 1a20eb08
+0 01 400006a8 010 00000011 abccf1aa daeef1ab abccf1ac daeef1ad
+0 10 400004b6 001 00000011 daeef12d abccf12c abccf12c daeef12d
+1 01 40000588 001 00001000 696cb15d 0010 696cb15d 1100 7afa33d6 0010 7afa33d6 1000 e42a094e 0011 e42a094e 0100 7b16dbde 0011 7b16dbde 1100 00007f3b 0010 00000580 0020 6dbb2b34 1d7e249b bd971f3d 13309813 2047d03c 3db92cd1 3b517b47 85fd0853
+1 01 400007e0 001 00001011 07ad55f3 0011 07ad55f3 1100 4e164040 0011 4e164040 1100 1c481b64 0011 1c481b64 1100 b47bebe9 0001 b47bebe9 1100 7fb0a2bb 0011 7fb0a2bb 1100 5e3c46f5 0010 5e3c46f5 1100 000007e0 0020 ac12cd35 667e9c9b d4754cbe 85c98a59 0d63eeb2 d9682156 dc0bad4e d04f41b5
+0 10 400000c4 001 00001111 da0ff031 da0ff031 bce39e2f bce39e2f f6bd8bf6 f6bd8bf6 36ab5225 36ab5225 d05e5c16 d05e5c16 bdb29a82 bdb29a82 24a0723c 24a0723c 1973b3ce 1973b3ce
+1 01 400006cc 010 00000111 0e523ae7 0011 8aa9fc95 0010 210d16ea 0111 4475dd5e 0111 d6daae89 1111 755da235 1011 b9e23c97 1110 cea36d54 1110 000006c0 0030 f3098e05 17b98382 1d1aa816 146ea215 19af982e 01885a4d 1cb6c058 238ef981 aa51e70f 82d996ca 14057c9b cdca8185
+1 01 40000292 001 00000000 6e270000 1100 00000290 0010 8b3c4f42 6605a7d5 2a288578 edda59cd
+1 01 4000022b 000 00001111 4e000000 0000 49d3093d 0001 49d3093d 0000 49d3093d 0100 49d3093d 1000 9cdff35d 0001 9cdff35d 0010 9cdff35d 0000 9cdff35d 0000 35e60695 0000 35e60695 0010 35e60695 0100 35e60695 1000 00a68952 0001 00a68952 0010 00a68952 0100 00000220 0020 ee8cf2a9 1fe6d82d dac909b3 e41ad1ff e70595b5 2b62950c e728dbe8 3a8192f1
+1 01 40000325 000 00000001 00eecd00 0010 00eecd00 0100 00000320 0010 9bf40792 af1b8e2b 82dcbfc3 e6e0f62f
+1 01 400006fe 001 00001001 0b110000 1100 3441659e 0011 3441659e 1100 2507e08d 0000 2507e08d 1100 4c56a1f2 0011 4c56a1f2 1100 dd51c0e5 0001 dd51c0e5 1100 0000fb71 0001 000006f0 0030 cd1afa33 d3f98a90 e46490a6 0532be58 25681ddd e2de8352 d3e85b45 1d7563ac 96655929 a9dbf469 a8374d50 e6fd2d43
+1 01 400004ec 010 00000001 700a40b2 1110 217b8785 1101 000004e0 0020 32603d16 0d6915f5 1100f897 3b5c59d1 047fc1dc 3efd431d 64db7dfb 7aee767d
+0 01 400005a8 010 00000101 abccf16a daeef16b abccf16c daeef16d abccf16e 7f404bcf
+1 01 40000414 001 00001010 7ec367ae 0010 7ec367ae 1100 b615948f 0010 b615948f 1000 ed5a86c8 0001 ed5a86c8 1100 c396a303 0011 c396a303 1100 98dcec76 0011 98dcec76 0100 0000bc56 0011 00000410 0020 f24e96a0 0e80c5eb ad84a686 02d27569 11b0784b 40a6d83e 62c9b122 e7f800d6
+1 01 400001ac 000 00000110 3987ab3c 0001 3987ab3c 0010 3987ab3c 0100 3987ab3c 0000 00c071a0 0001 00c071a0 0010 00c071a0 0100 000001a0 0020 f8e6f6c3 98820da3 230cbc8c cfa0d582 df5327c8 082d5b39 14a6e36f 7e739e7f
+0 01 400000c8 001 00000011 bce39e2f bce39e2f f6bd8bf6 f6bd8bf6
+1 01 40000700 001 00000101 834b8b43 0011 834b8b43 0100 101302e0 0001 101302e0 1100 158a06b9 0010 158a06b9 0000 00000700 0010 f7c5c767 2c15edc0 6e294bd3 301290d2
+0 01 400004b6 001 00000001 daeef12d abccf12e
+1 01 4000020e 001 00001100 752e0000 1100 2b7b4a38 0001 2b7b4a38 1100 19900332 0011 19900332 1100 82c438bb 0001 82c438bb 0100 1094f08c 0011 1094f08c 1100 b560f2ef 0001 b560f2ef 1100 6d49ea23 0011 6d49ea23 1100 00000200 0030 5a55a772 0cebabea 4b1ac648 307226c4 ee69238d f897eb8c af9cbad5 525078de b8a04fc6 2236eb6a dac909b3 e41ad1ff
+0 01 400006f0 010 00001001 98ccf1bc e567a971 e5500c8e 0b110218 344b8b43 101375e0 4c5606f2 dd51f1e5 abccf171 daeef1c5
+0 10 40000452 001 00000111 abccf114 daeef115 daeef115 abccf116 abccf116 0f670b17 0f670b17 abccf114
+1 01 40000430 010 00000001 cd3a333a 1111 b8e89ff5 1100 00000430 0010 4399c427 1a47ee82 e65969e7 e156398f
+0 01 400006c2 001 00001000 abccf1b0 daeef1b1 daeef1b1 abccf1b2 abccf1b2 daee3ae7 daee3ae7 abccfcb4 abccfcb4
+1 01 400007f0 001 00000100 2a5250d0 0011 2a5250d0 1100 131d27be 0001 131d27be 1100 000091d7 0011 000007f0 0010 91b6e82d 03ab156c c61cda7e ebb80828
+1 01 40000488 001 00001001 801e8a7c 0011 801e8a7c 0100 f1ccf5e6 0011 f1ccf5e6 1100 2061bccf 0011 2061bccf 1000 1538c5bd 0011 1538c5bd 1100 a6287216 0011 a6287216 1100 00000480 0020 87d68004 71ab01d5 b09939a9 58ce1751 61dbf76a 069b7284 a8c23dea 62707618
+0 01 4000048c 001 00001001 f1ccf5e6 f1ccf5e6 203abccf 203abccf 1538c5bd 1538c5bd a6287216 a6287216 daeef127 daeef127
+0 01 400002ea 001 00000111 aaf34f85 da272af1 da272af1 c795f0f4 c795f0f4 dfecf0bd dfecf0bd 42ab213b
+0 01 40000147 000 00001001 d4ee4169 ab701dc0 ab701dc0 ab701dc0 ab701dc0 27ee525b 27ee525b 27ee525b 27ee525b abccf054
+0 01 40000447 000 00000111 daeef122 0d8e3f8c 0d8e3f8c 0d8e3f8c 0d8e3f8c daeef113 daeef113 daeef113
+1 01 40000540 001 00000010 d0bec821 0010 d0bec821 0100 0000cfe5 0010 00000540 0010 0f754465 2890b22b f4366e68 7e2ac28c
+0 01 40000674 000 00000100 daeef19d daeef19d daeef19d daeef19d ac03f19e
+1 01 40000730 010 00001110 ba29dbee 1110 a4ab925c 1111 77fe61bc 1111 9aecac6f 1101 175c9ae5 1011 b062eca8 1111 1b6dbd72 0011 021127bc 1111 367ba176 1011 0ebe366d 0111 c93284ab 1111 72d0c8c0 0011 313d21db 1001 2a94bd92 0101 08952b90 1101 00000730 0040 26f9e3f1 5fa85ce2 9b373097 0d33e017 96233345 b26524ab 848d1d8d 204f2fce 3471e87a a75efe7e 27d8cdf5 5967205a 4dbd3b43 e7fed4c3 a6c11ecd 159e41b3
+0 01 4000028c 010 00001100 dfc4fb50 6e277b15 a67af051 abccf0a6 daeef0a7 abccf0a8 daeef0a9 b177054a dc1cac72 170ed6e4 f8bd216e 54ebf0ae a5b6e852
+1 01 40000294 010 00000001 3d940440 1001 349d7aba 1011 00000290 0010 1a2ddc56 05a62385 ce4fc364 ed07ab7a
+1 01 4000064c 010 00001111 2d1fe006 1111 9f5860b6 1111 93226528 1100 b1381893 1011 5379f1d8 1111 a87fca98 1111 b23a80ff 1111 921b1df5 1110 28b97a21 1111 a1da19ed 0110 73d10120 1110 6971703f 0111 ee5461cc 1100 ce9f0c54 1100 673510c2 0110 60575756 1111 00000640 0050 a125d464 4d73f1d0 73ede9c8 9d279139 619e63b4 2a9987c1 a786a4d7 d62757e7 56a88ce7 a5dac9c1 99510671 ee1b9c04 8c494fbe dfd1f69b 28084960 683223b5 0e39f624 310dc545 441c4953 b9855bab
+1 01 40000528 010 00000000 fa353387 0101 00000520 0010 83a46662 38f5574c 0ca3344b 3aa37230
+0 01 40000544 010 00000110 bdeecf2a b3ccfec5 daee115e 52e5fca3 da35f1f6 da79f123 dab9f157
+0 01 400004cc 000 00000001 daeef133 daeef133
+0 01 400001a0 010 00000011 1fdaef55 e5a99e69 abcc096a da87ab3c
+1 01 40000672 001 00001001 789f0000 1100 f439affa 0001 f439affa 0100 50cf885d 0011 50cf885d 1100 7894596b 0011 7894596b 1000 1797ee29 0010 1797ee29 0000 00004251 0010 00000670 0020 99e16ff6 072be7b9 862ba49f 5285cd66 78aa1109 8e6e30b4 441c4953 b9855bab
+0 10 40000618 010 00000111 6436392b 15542cb4 28c2b589 7d3f8967 289f5c08 dfb919d8 af36f1e1 1162be21
+1 01 40000744 010 00001101 a0d6923c 1110 02ef9233 1101 e3195f45 1111 82fd869e 1011 0d4d27ca 0111 99770b44 1111 c448d829 0101 4e457330 1110 f3e06962 1101 3e1b1508 1111 07833572 1101 f13493db 1101 18ea1682 1101 ad384774 1111 00000740 0040 6914ca83 a6f3907d ad4a4823 d94907c6 d90b56c3 ded5cd0c 828d90ac 1cf20062 b437867b 7549d305 da436cfb 5d371602 f93bcd55 709c0092 608b6393 c6caf256
+0 01 40000564 001 00000001 d7cdeb92 d7cdeb92
+1 01 4000046c 001 00001111 c71527f1 0010 c71527f1 1100 9f94668b 0000 9f94668b 0100 c75c3f47 0001 c75c3f47 1100 e5735234 0011 e5735234 0000 cf21a231 0011 cf21a231 0100 c4c2c62e 0011 c4c2c62e 0100 3769e7d4 0000 3769e7d4 1000 79fb809f 0010 79fb809f 1100 00000460 0030 dcfbe65f 79481816 6b31330d 7c319c20 ba6d43d2 dc46e6d7 6b907c9d 86771ad1 64d8a3ee 072107fc 009bc76c bc70a855
+0 01 4000011c 010 00001000 daeef047 abccf048 daeef049 abccf04a daeef04b abccf04c daeef04d abccf04e da312a9b
+1 01 400004c8 001 00001111 021629e6 0011 021629e6 0100 1a71ce88 0001 1a71ce88 1100 126edf94 0011 126edf94 1000 88dfb94a 0010 88dfb94a 1100 5f6aed00 0011 5f6aed00 0100 3567157f 0000 3567157f 1100 0fdb2d4d 0011 0fdb2d4d 1000 2f898cec 0000 2f898cec 1100 000004c0 0030 eee3d8e6 994803ef ae58c1de 813bc025 6365d0f7 02df781b d3fd20aa 0acfc9db cd572eb0 a0dda96c 1100f897 3b5c59d1
+0 10 40000664 010 00001111 b23a80ff 921b1db9 28b97a21 789f199c 733901fa 50cf885d 7854596b abccf190 daeef191 abccf192 2d1fe006 9f5860b6 9322f195 b1cc1893 5379f1d8 a87fca98
+1 01 4000019e 000 00000010 9ad70000 0100 9ad70000 1000 000000df 0001 00000190 0020 0e291fa6 e3d4e97d e51cf813 76a81a38 1fb4b160 589e4229 230cbc8c cfa0d582
+0 01 400001dc 010 00000111 daeef077 abccf078 daeef079 abccf07a daeef07b ab503555 51a5e58e b45ed0a4
+1 01 4000006c 010 00001111 7146f3a0 1110 a8c864a0 1000 1020e929 1011 d5db1737 1110 f9ea1aab 1110 41ac7679 1110 fdaaf9b2 0111 e024b88d 1111 d2232de0 0111 908149a2 1011 2459cf40 1011 b8e5d0d5 1111 01a9faf7 1111 10a84305 1101 b8ce3567 1111 657afdfb 1011 00000060 0050 de87fbed 45dcb53a a5f85e29 9a97f9ec 4f49c3ed 91b1a252 7a8c9acc 71acddc1 4fe53695 29b3f837 deec606a 410c2492 6dd5f95d 5eadaf14 3c31a17c b8a0f57d a53ea036 d3a6c5fd 1a519b26 f75dda29
+1 01 400002a9 000 00001000 18e1cd00 0000 18e1cd00 0100 18e1cd00 1000 1f495a87 0001 1f495a87 0010 1f495a87 0100 1f495a87 1000 0000923c 0001 0000923c 0010 000002a0 0020 0b9f785c 723399fa 8e6cdd95 8b78bb14 cd1c3d75 99441be9 368de000 34555fbf
+1 01 40000690 001 00001111 8393d5e9 0000 8393d5e9 1000 7d13bcee 0010 7d13bcee 0000 2ed24ae8 0011 2ed24ae8 1100 f352b356 0001 f352b356 1100 93f22f56 0011 93f22f56 0000 b3540d9d 0001 b3540d9d 1100 c061ab12 0011 c061ab12 0100 f47721a6 0011 f47721a6 1100 00000690 0020 6abaac08 54c5a55f 45576b96 dc97d406 2516b278 a0b8065f 0383879d 5432a643
+0 01 4000035d 000 00001000 daeef0d7 daeef0d7 daeef0d7 abccf0d8 abccf0d8 abccf0d8 abccf0d8 daeef0d9 daeef0d9
+0 10 400000fe 001 00001111 daeef03f f1ccca38 f1ccca38 daeef039 daeef039 ab8ff03a ab8ff03a daeebc6d daeebc6d abccf03c abccf03c daeef03d daeef03d abccf03e abccf03e daeef03f
+1 01 400005fa 001 00001001 f0a70000 0100 bd1649e6 0011 bd1649e6 1100 757a0c35 0010 757a0c35 1100 2ea5458a 0011 2ea5458a 0100 1d5fd161 0010 1d5fd161 1100 00001582 0001 000005f0 0020 aafae3ce a0601f5c b20c6907 714972f1 316e85f6 28e83b85 0d3f1785 dbc1ffff
+1 01 400007dc 000 00001100 89aa9bb4 0001 89aa9bb4 0010 89aa9bb4 0100 89aa9bb4 1000 694d6b56 0001 694d6b56 0010 694d6b56 0000 694d6b56 1000 3064bbff 0001 3064bbff 0010 3064bbff 0100 3064bbff 1000 000000b6 0001 000007d0 0020 e2d0b31a 66507b21 45360ecf fde4de5e 5792f61c 5d78dbbd 8823b998 f3dd9512
+0 10 400003d3 000 00000111 abccf0f4 daeef0f5 daeef0f5 daeef0f5 daeef0f5 abccf0f4 abccf0f4 abccf0f4
+0 01 400001d0 000 00000101 abccf074 abccf074 abccf074 abccf074 daeef075 daeef075
+0 10 4000053f 000 00001111 daeef14f c5c12109 c5c12109 c5c12109 c5c12109 daeef1cf daeef1cf daeef1cf daeef1cf abccf14e abccf14e abccf14e abccf14e daeef14f daeef14f daeef14f
+0 10 40000508 000 00000011 abccf142 abccf142 abccf142 abccf142
+1 01 4000012c 010 00001000 c9a4bdf8 1111 1a22f14d 1111 10948302 1100 31093f6b 1011 3adf5d40 1110 9d568154 1111 dacff010 0010 5e033fd5 1001 450d711c 1101 00000120 0030 a04eba85 72211519 b3e3493f 7b13b89b 93784902 64bf0105 754fa3bb a8c24733 e5f77ab0 70459545 3f77815b fdf1b635
+0 10 40000578 001 00000001 9ff461e7 9ff461e7
+1 01 40000481 000 00000100 30735600 0010 30735600 0000 30735600 1000 0000f0d2 0001 0000f0d2 0000 00000480 0010 85470463 64aba06c 009bc76c bc70a855
+1 01 4000039c 010 00000110 ad370542 0101 45ec6b98 0111 a8d6528f 1111 8ae5d1be 1011 5f8ec9bc 1101 b6804150 1011 0bd8faab 1110 00000390 0030 0dea6505 09fc5a7c 7b8a82c2 c21afb68 f06ab7f5 2153cbc3 a0090fa8 508d34de 2d7b9ea0 c586d7ba f7384574 f0dd9d75
+0 01 4000031c 010 00001000 cbf4f01f 44775bb6 09eecd33 0872ef3a 33363359 4fe9f7ce 1d479007 4fb8c1d5 81c141a9
+1 01 4000020a 001 00001011 e2950000 1100 d3b155d7 0000 d3b155d7 1100 075a521e 0011 075a521e 1000 584adea8 0011 584adea8 0100 8ee85c23 0011 8ee85c23 0000 d2e13bab 0001 d2e13bab 1100 0000af9a 0001 00000200 0030 5a55a772 0cebabea 9a3a2b69 86c33236 4a293d4c da63568d 2c5391e5 cdc10920 456c5029 01660884 dac909b3 e41ad1ff
+0 01 40000098 010 00000011 b8e5d0d5 01a9faf7 10a8f005 b8ce3567
+0 10 400006b9 000 00001111 abccf1ae abccf1ae abccf1ae daeef1af daeef1af daeef1af daeef1af abccf1ac abccf1ac abccf1ac abccf1ac daeef1ad daeef1ad daeef1ad daeef1ad abccf1ae
+0 10 400000cc 010 00000011 f6bd8bf6 1973b3ce da0ff031 bce39e2f
+1 01 400003aa 000 00001010 2ea70000 0000 2ea70000 1000 f26ed05e 0001 f26ed05e 0010 f26ed05e 0100 f26ed05e 1000 fd0a1b59 0000 fd0a1b59 0000 fd0a1b59 0100 fd0a1b59 1000 0000007b 0000 000003a0 0020 f06ab7f5 2153cbc3 4cee0f7a a4f726dc 0b0a029d a60830c9 f7384574 f0dd9d75
+0 10 40000330 001 00000011 4fe9f7ce 4fe9f7ce 1d479007 1d479007
+1 01 4000055c 010 00001010 99c9229d 1010 a74804ff 0111 8a919bd1 0111 35a1cf9d 1011 ac609f1b 1111 1c72a8a6 0000 7a53bacf 1011 891691c1 1111 2f5afe83 1001 452ee6dc 1101 91717fc5 1101 00000550 0040 43b60607 cdb4adfd 13ecd219 f51b3fdc 7585a318 b7c321e8 9356c462 91915838 961b4669 5f778523 82beca54 016d692b 76de27f1 f5373f71 bd971f3d 13309813
+0 01 4000032e 001 00001111 33363359 4fe9f7ce 4fe9f7ce 1d479007 1d479007 4fb8c1d5 4fb8c1d5 81c141a9 81c141a9 5cdee899 5cdee899 2ba40c31 2ba40c31 1d6ef0cf 1d6ef0cf da644ca5
+1 01 400000f0 010 00000010 0ba0b6cc 1111 dc7f9af7 1111 54c6bcf8 1101 000000f0 0010 26b2bf9f 2975822a 8bf909e4 a46adf2f
+0 10 40000110 010 00000011 9f5fb202 daeef045 abccf046 daeef047
+0 10 400001e0 010 00001111 abccf078 daeef079 abccf07a daeef07b ab503555 51a5e58e b45ed0a4 cf3de79b abccf070 daeef071 abccf072 daeef073 abccf074 daeef075 abccf076 daeef077
+0 10 40000510 001 00000011 abccf144 abccf144 daeef145 daeef145
+0 10 400007cc 010 00000011 da717f83 abccf1f0 26eef1f1 27eaf1f2
+0 10 4000054d 000 00000001 daee115e daee115e
+0 01 4000073d 000 00001001 9aece26f 9aece26f 9aece26f 17a79ae5 17a79ae5 17a79ae5 17a79ae5 a0d692a8 a0d692a8 a0d692a8
+1 01 4000050c 001 00001110 912a3a1f 0000 912a3a1f 1100 40005efc 0011 40005efc 0100 1d6d16a1 0011 1d6d16a1 1000 929eecd8 0010 929eecd8 1100 eda6354d 0001 eda6354d 1100 e97fce64 0011 e97fce64 0100 538c6030 0011 538c6030 1100 0000dd54 0011 00000500 0030 6102626e f861fffe 35b9e279 04edf8a2 4a925d39 4ade172d 112c77fc cfd2c51b 9c2370bd 2fae5a92 2d35d396 aceab2f1
+0 10 40000424 001 00000011 dadcec76 dadcec76 c396a303 c396a303
+0 10 4000076e 001 00000011 0783f172 3e1b1508 3e1b1508 0783f172
+0 01 4000079c 010 00000010 daeef1e7 abccf1e8 daeef1e9
+1 01 4000039c 010 00000000 c9b20f3b 1111 00000390 0010 0dea6505 09fc5a7c 60d9e739 2cbeaf8d
+1 01 40000403 000 00001001 e5000000 1000 5e18d0dd 0001 5e18d0dd 0010 5e18d0dd 0100 5e18d0dd 1000 9e85f6a1 0001 9e85f6a1 0010 9e85f6a1 0100 9e85f6a1 1000 00000013 0001 00000400 0010 b37e8e61 a30fac12 f2900360 5766971e
+0 10 40000564 010 00000001 d7919bd1 a74804ff
+0 10 40000404 001 00000011 5e18d0dd 5e18d0dd e5ccf100 e5ccf100
+0 01 400004d8 010 00001101 ab6aed00 3567f137 0fcc2d4d 2f89f139 abccf13a 700a403b 217bf185 daeef13d abccf13e daeef13f abccf140 daeef141 abccf142 912af143
+0 10 400006c0 010 00000001 abccf1b0 daeef1b1
+0 10 40000560 010 00001111 a74804ff d7919bd1 35bdcf9d ac609f1b 1518cf5c 7afabacf 891691c1 2fcaaa83 abbec850 bdeecf2a b3ccfec5 daee115e 52e5fca3 da35f1f6 da79f123 99b92257
+0 10 40000216 001 00000001 194adea8 194adea8
+0 10 40000664 000 00000011 b23a80ff b23a80ff b23a80ff b23a80ff
+0 10 400005f4 010 00000011 daeef17d aba7f17e bd1649e6 abccf17c
+1 01 400007b8 000 00000001 00000b94 0001 00000b94 0010 000007b0 0010 0a2f79b4 0fc7b6ae e5ddc467 a5331717
+1 01 400002bc 010 00001001 1c543fe3 0111 9710d2f1 1010 ef6683e5 0111 aa476095 1111 9b30ed0b 0110 6842624f 0101 13c15fbd 1101 50caf908 1111 4aec796a 1100 82e05aac 1111 000002b0 0040 cd1c3d75 99441be9 68dbc65c d1d4381c 1f1f8ed8 22b66d46 13f479f6 475e0686 401a4d33 ece332f1 50400f12 f7f0e2cf d57c317a a7112b73 e8b828b9 666fecf8
+0 10 40000390 010 00000011 99cc14e4 e6feab84 dbef7e35 c9b20f3b
+0 01 400002c8 001 00001110 aa476095 aa476095 7e30ed38 7e30ed38 ec42974f ec42974f 13c11fbd 13c11fbd 50caf908 50caf908 4aec2f3e 4aec2f3e 82e05aac 82e05aac 6300cff5
+0 01 400005e4 000 00001010 0eeeda79 0eeeda79 0eeeda79 0eeeda79 15cc395d 15cc395d 15cc395d 15cc395d daeef17b daeef17b daeef17b
+0 01 400007c8 010 00001001 27eaf1f2 da717f83 19ccf1f4 ae339cb1 ab67f1b8 89aa9bb4 69ad6b56 3064bbff 1c481bb6 b47bf1e9
+0 10 40000294 000 00000111 3d7af040 3d7af040 3d7af040 3d7af040 6e277b15 6e277b15 6e277b15 6e277b15
+1 01 400003fe 001 00001010 45580000 1100 02ca9525 0011 02ca9525 1100 7bbf4241 0011 7bbf4241 1100 45011127 0010 45011127 1000 7df2a4bf 0011 7df2a4bf 1100 b5a0b81b 0010 b5a0b81b 1000 000003f0 0030 348aeb3e 324064fb cea22d68 ff953299 c8c91ead b8c1e212 3c98f993 de8d6211 d633b315 edbf8af8 ad84a686 02d27569
+1 01 40000316 000 00000010 71910000 0100 71910000 1000 0000003d 0001 00000310 0010 ac106ad7 b5cd2d58 02b88c07 513a7618
+0 01 40000268 010 00001111 620ffc8c d24a398a 802c2247 abd8941a bb07278e 98a1bf26 bad457ea bcbaad80 b2307083 dfc4fb50 6e277b15 3d7af040 34cc7aba daeef0a7 abccf0a8 daeef0a9
+0 10 40000784 010 00001111 daeef1e1 abccf1e2 daeef1e3 abccf1e4 daeef1e5 abccf1e6 daeef1e7 abccf1e8 daeef1e9 abccf1ea daeef1eb 59ccf1ec da68b16a abcc0b94 daeef1ef abccf1e0
+0 10 400000c5 000 00000011 da0ff031 da0ff031 da0ff031 da0ff031
+1 01 40000520 010 00000011 4a27a02a 0111 2e471783 1100 8381310f 0111 b3cbd9fc 1111 00000520 0010 fd9e7152 9874ffb9 66c2efef ed5657e1
+0 01 400002dd 000 00001111 4aec2f3e 4aec2f3e 4aec2f3e 82e05aac 82e05aac 82e05aac 82e05aac 6300cff5 6300cff5 6300cff5 6300cff5 aaf34f85 aaf34f85 aaf34f85 aaf34f85 da272af1
+0 10 400005a0 010 00000001 f7cb1e0f 626f842c
+0 01 4000048c 001 00001100 f1ccf5e6 f1ccf5e6 203abccf 203abccf 1538c5bd 1538c5bd a6287216 a6287216 daeef127 daeef127 abccf128 abccf128 daeef129
+1 01 40000799 000 00000000 0000c600 0010 00000790 0010 c69839b0 971c5f0a 44101505 649cf969
+1 01 40000530 001 00000000 0000a9ca 0000 00000530 0010 1c5ea154 757305dd 9f544fe9 df0f41fd
+0 10 40000594 010 00000001 7b16dbde ab2a094e
+0 10 400007c6 000 00000001 26eef1f1 26eef1f1
+0 10 400006fc 010 00000011 0b110218 98ccf1bc e567a971 e5500c8e
+0 10 40000610 010 00001111 af36f1e1 1162be21 6436392b 15542cb4 aefdd74e cc81af1e 81f0f193 fe425705 abccf18c daeef18d abccf18e daeef18f 757a0c89 7da5458a 1d5fd108 dfb91982
+1 01 400000e0 010 00001000 1d198f43 0111 f1c4f49d 1111 82c65971 1111 f689da6d 1111 ad63f8cd 1010 b2734fe8 0111 61f3656f 1111 dde52d6f 1000 7dc0adca 0101 000000e0 0030 8094065a b4d20d72 7b31bb69 9e5fd16a 60aed998 129597a5 adb79ef1 975b59e8 7257b4d2 1354d771 3d06521b c2942c3c
+0 01 400005b2 000 00000010 abccf16c abccf16c daeef16d
+1 01 4000037c 000 00001110 c8e43a2c 0001 c8e43a2c 0000 c8e43a2c 0100 c8e43a2c 1000 e97e2216 0001 e97e2216 0010 e97e2216 0100 e97e2216 1000 17134533 0001 17134533 0010 17134533 0100 17134533 1000 00273f9d 0001 00273f9d 0010 00273f9d 0000 00000370 0020 55d69889 efc4e960 546a7e06 8f2e9b2b 371f33e9 1ae090e8 92ff29ed 9e871383
+1 01 400006ca 001 00001100 f51d0000 0100 f9ccf6d3 0011 f9ccf6d3 0000 6be52e7e 0011 6be52e7e 1100 28505708 0001 28505708 1000 a48c0f62 0011 a48c0f62 0000 2d4d160c 0011 2d4d160c 0100 0418fc01 0010 0418fc01 1100 000006c0 0030 f3098e05 17b98382 038833cd 622d278d be2e60c8 5bca6223 e5c0b064 ec2c5a21 994a2ddf ec0444ae 14057c9b cdca8185
+1 01 40000206 001 00000011 ecc10000 1100 6b8ab56c 0011 6b8ab56c 1000 000051fc 0011 00000200 0010 9b4226f2 118f39ef 0ff66ad7 d6bbd2e3
+0 10 4000068c 001 00000001 daeef1a3 daeef1a3
+1 01 4000030e 001 00000000 350d0000 1100 00000300 0010 c7e71f4f de3b3058 dbccc560 75d0ecbe
+0 10 400006bb 000 00000111 abccf1ae daeef1af daeef1af daeef1af daeef1af abccf1ae abccf1ae abccf1ae
+0 01 4000036b 000 00001110 abccf0da daeef0db daeef0db daeef0db daeef0db abccf0dc abccf0dc abccf0dc abccf0dc daeef0dd daeef0dd daeef0dd daeef0dd abccf0de abccf0de
+0 01 4000031e 001 00001100 cbf4f01f 44775bb6 44775bb6 09eecd33 09eecd33 0872ef3a 0872ef3a 33363359 33363359 4fe9f7ce 4fe9f7ce 1d479007 1d479007
+1 01 40000140 001 00001111 c4da25b9 0001 c4da25b9 1100 cd9ab79c 0011 cd9ab79c 1100 12b7d241 0000 12b7d241 1100 a01ad1bc 0011 a01ad1bc 1000 df122bd7 0000 df122bd7 1100 8fb7d7c4 0001 8fb7d7c4 0100 e14a3a88 0000 e14a3a88 1100 85fcf442 0011 85fcf442 1100 00000140 0020 73ddca45 feab7754 73258bf8 d5b22fbf 4e00eb69 f1164feb d03c6518 6c202f15
+0 01 400002d8 001 00001000 50caf908 50caf908 4aec2f3e 4aec2f3e 82e05aac 82e05aac 6300cff5 6300cff5 aaf34f85
+0 10 4000049c 010 00000111 daeef127 30c2562e 37ee7ed2 79fb807c f1ccf5e6 203abccf 1538c5bd a6287216
+0 10 40000149 000 00000111 12b71dd5 12b71dd5 12b71dd5 a00dd1bc a00dd1bc a00dd1bc a00dd1bc 12b71dd5
+0 10 400000d0 000 00000011 36ab5225 36ab5225 36ab5225 36ab5225
+0 10 40000070 010 00000011 a8bdd76e 10c4e929 d5db171e f9ea1a1f
+0 01 400001b2 001 00000101 abc071a0 daeef06d daeef06d abccf06e abccf06e daeef06f
+0 10 40000396 000 00000111 e6feab84 e6feab84 99cc14e4 99cc14e4 99cc14e4 99cc14e4 e6feab84 e6feab84
+1 01 4000038a 000 00000101 1de70000 0100 1de70000 1000 89ad1b86 0001 89ad1b86 0010 89ad1b86 0100 89ad1b86 1000 00000380 0010 371f33e9 1ae090e8 ccbee50b deb06a48
+1 01 400001fc 010 00001000 aa6e1521 1011 d4aeabc6 1111 066d5658 1011 7eb1b66c 0111 e799138a 0111 c8cca349 1101 988a4797 0111 c0debe64 1101 2a9527cf 1011 000001f0 0030 0828bcee d81c9650 d38a04d8 2a8b256f 44dd9cef 13d2e4d7 661726de 96e0fe88 c9243577 ab32cbe3 d74b4293 fd3f0038
+1 01 400007cc 001 00001010 31172560 0001 31172560 1100 246a953e 0001 246a953e 0100 425cfa49 0001 425cfa49 1000 b65e90c4 0001 b65e90c4 1100 db1b1f8c 0011 db1b1f8c 1100 000070f7 0011 000007c0 0030 fbf50c32 42c28d80 2ba0540a 4b981a3f 33ef5a35 811d6bfd 870f1e20 817892b8 fb3aa41d e3b7b5b8 8823b998 f3dd9512
+0 01 40000194 001 00001011 9950b704 9950b704 15420b4b 15420b4b 9ad7f839 9ad7f839 1fdaefdf 1fdaefdf e5a99e69 e5a99e69 abcc096a abcc096a
+0 01 4000028b 000 00001110 b2307083 dfc4fb50 dfc4fb50 dfc4fb50 dfc4fb50 6e277b15 6e277b15 6e277b15 6e277b15 3d7af040 3d7af040 3d7af040 3d7af040 34cc7aba 34cc7aba
+0 10 40000177 000 00001111 daeef05d abccf05e abccf05e abccf05e abccf05e daeef05f daeef05f daeef05f daeef05f abccf05c abccf05c abccf05c abccf05c daeef05d daeef05d daeef05d
+0 10 40000374 001 00000011 daeef0dd daeef0dd abccf0dc abccf0dc
+1 01 40000368 010 00000110 7d100c49 1101 783aa6b5 1111 d1176c53 1111 7c3d09d9 0111 eb1c88a8 0011 7afb995e 1111 584d4e60 1111 00000360 0030 1073c0b3 25f9ec82 b4a3dda2 ea80b240 f517e012 d64c7524 46e188b9 9176bcb6 b5ae6f02 1d2a47b6 ccbee50b deb06a48
+0 10 400005f3 000 00000111 abccf17c daeef17d daeef17d daeef17d daeef17d abccf17c abccf17c abccf17c
+0 10 40000018 000 00001111 de989e0c de989e0c de989e0c de989e0c b147623a b147623a b147623a b147623a 17259941 17259941 17259941 17259941 eac59ff8 eac59ff8 eac59ff8 eac59ff8
+0 01 40000640 010 00000100 abccf190 daeef191 abccf192 2d1fe006 9f5860b6
+0 01 4000014c 000 00000101 a00dd1bc a00dd1bc a00dd1bc a00dd1bc df12f054 df12f054
+1 01 40000241 000 00001001 baeebc00 0010 baeebc00 0100 baeebc00 1000 0efedd0d 0001 0efedd0d 0010 0efedd0d 0100 0efedd0d 1000 007f6f62 0000 007f6f62 0010 007f6f62 0000 00000240 0010 ae3daf99 8f549e8b f72a264e b0e44ded
+1 01 400006c3 000 00001010 db000000 0000 389d65dc 0000 389d65dc 0010 389d65dc 0100 389d65dc 1000 330677a1 0001 330677a1 0010 330677a1 0100 330677a1 1000 0000e024 0001 0000e024 0010 000006c0 0010 4f3d9f7a 0c50d2aa 429f8cb5 0d1dc05b
+0 01 40000164 010 00000000 da921c59
+0 10 40000078 001 00000011 d5db171e d5db171e f9ea1a1f f9ea1a1f
+0 10 40000224 010 00000001 6d49ea23 b560f69a
+0 10 40000555 000 00000001 da35f1f6 da35f1f6
+1 01 4000053c 010 00001100 e2bd50fb 1111 12b7a6df 1001 ac3a6f90 1110 c2628b98 1111 e5e332d3 0111 74a591d1 1111 1a998cad 1110 c59bc369 0111 634c76ce 0001 c0f3709b 1111 274d4997 1111 b5e7dce0 1110 2a0f6a7f 1111 00000530 0040 1c5ea154 757305dd bd394503 46ae6336 32e8f4fb 00d8306a 23c5a9ba 7f501e5f d6aa1239 51a2dd39 f845bed7 ba448ee1 525c34ab dcb7206c ce9f646f c66ba305
+1 01 400001ac 010 00001101 39398978 1111 8a8dda43 1110 e2c86746 0111 632c93e5 1110 82803442 0111 03fabd5c 1011 92061f58 1100 e82954b8 1110 30ae5d0f 1101 803f66d6 0111 c072513e 0111 58413487 1111 24de68f7 1111 0307637b 1011 000001a0 0050 1fb4b160 589e4229 e1b2de66 5ba49f8c b92e324b cf25bbbe 65c76e55 e8f85f06 d0c05037 42f47407 38cd0067 854943d0 52aaea31 7301318d 4c188527 6a7966d2 c37898d9 edacb5ab 102df7f5 ec011daf
+1 01 400001d4 001 00001100 8341ce44 0010 8341ce44 1100 fdc1e35f 0010 fdc1e35f 0100 9363ab83 0010 9363ab83 1000 cf1bc84e 0010 cf1bc84e 1100 ea841afa 0011 ea841afa 0100 52495099 0011 52495099 1100 0000d56e 0011 000001d0 0020 8551ecd2 cc0b6091 1bf69410 57e82d73 e0500814 afb5828a a58fb559 29e4eddc
+0 01 400005d1 000 00001010 f43af189 f43af189 f43af189 b3968275 b3968275 b3968275 b3968275 abcc7384 abcc7384 abcc7384 abcc7384
+0 10 400001a8 010 00000001 abcc096a 39398978
+0 01 40000770 010 00001100 f134f1db 18eaf182 ad384774 daeef1df abccf1e0 daeef1e1 abccf1e2 daeef1e3 abccf1e4 daeef1e5 abccc6e6 daeef1e7 abccf1e8
+1 01 40000623 000 00001001 58000000 1000 245dde68 0001 245dde68 0000 245dde68 0000 245dde68 1000 e3b9644b 0000 e3b9644b 0010 e3b9644b 0100 e3b9644b 1000 00000050 0000 00000620 0010 19ae8a8c 12d7a561 a8cf9394 2aac9a3e
+1 01 40000360 010 00001001 6a703b3b 1111 f41a548e 1111 b438aeeb 0000 4ed2cc16 1011 fd89c792 1110 1a4a65d7 1111 03376230 1111 880dcecd 1101 c1d61ff4 1110 a2dbf27a 1110 00000360 0030 13530b18 f76bae87 1b730205 33dd2953 0743dec0 604cf8d9 faf899b0 a4367d2e 3adedb89 e98cbd98 ccbee50b deb06a48
+1 01 4000062c 010 00000110 1e28dc26 1011 a5289648 1111 f528f107 1101 c94a47df 1110 5e85a9a7 1110 d8e71400 1110 39f3d12a 1011 00000620 0030 19ae8a8c 12d7a561 6da89e2c 4b5a2d70 9c87a640 76ba0ec2 4b05aa87 7c8363f3 1f569f80 a7f1326d 73ede9c8 9d279139
+1 01 40000670 010 00001011 41c6cc1c 1111 1a548a98 0110 4a12db15 0111 ffab7cee 1111 cd624ae2 1111 86621679 1111 d207ed6d 1111 b5a013ff 0101 d16ab3c7 0100 180cccec 1111 9da1cd76 1101 4fe15596 1010 00000670 0030 0fc5d79f d6099197 805af782 3b9623cb bb40046f 3a24ace5 c779c7ad a134c14a 503daeb3 7c199265 c1226a2a 714c38d3
+1 01 40000212 001 00000011 acc50000 1100 299a2760 0011 299a2760 1000 0000cffb 0010 00000210 0010 f2c459c5 c02f5f5e 9419c6e8 146f2683
+0 10 4000041d 000 00000111 ed5af1c8 ed5af1c8 ed5af1c8 b6cc9406 b6cc9406 b6cc9406 b6cc9406 ed5af1c8
+1 01 4000065b 000 00000110 cb000000 1000 ca7c1f10 0000 ca7c1f10 0010 ca7c1f10 0100 ca7c1f10 0000 0000e7ff 0001 0000e7ff 0010 00000650 0020 619e63b4 2a9987c1 532a2569 99b957ac dc1c5c4a e7ed49e6 99510671 ee1b9c04
+0 01 400000e8 010 00001001 82c65971 f689da6d ada0f8cc dc734fe8 61f3656f ddeef03f abc0f0ca daeef041 867ef042 ad79f94c
+1 01 40000497 000 00001111 a1000000 1000 a4469ce8 0001 a4469ce8 0000 a4469ce8 0100 a4469ce8 1000 10bac98e 0001 10bac98e 0010 10bac98e 0100 10bac98e 0000 94976e1f 0001 94976e1f 0010 94976e1f 0000 94976e1f 0000 0085c497 0001 0085c497 0010 0085c497 0100 00000490 0020 9dc63e75 0bc28893 f0e07976 025d42b0 54a05658 1527d254 4614ade0 8d409b84
+0 10 40000608 001 00001111 1d5fd108 1d5fd108 dfb91982 dfb91982 af36f1e1 af36f1e1 1162be21 1162be21 6436392b 6436392b 15542cb4 15542cb4 757a0c89 757a0c89 7da5458a 7da5458a
+1 01 400003f8 001 00001111 c944a5a3 0011 c944a5a3 1100 af70ff69 0001 af70ff69 1100 3c0772da 0000 3c0772da 1100 99fa5091 0001 99fa5091 1100 704467ac 0001 704467ac 1100 9f81f59c 0001 9f81f59c 0100 b057723e 0010 b057723e 0100 bed595ee 0001 bed595ee 1100 000003f0 0030 348aeb3e 324064fb 0c2171e9 31e3ba7e 5a677a98 8c41c48d 7b41c209 9224cfaa 023cfd70 c7df27f5 ad84a686 02d27569
+1 01 400005ce 001 00001011 19390000 1100 4afbbf48 0010 4afbbf48 1100 ff561b40 0011 ff561b40 1100 628712e8 0001 628712e8 0000 9f913840 0000 9f913840 0100 d691bc4e 0000 d691bc4e 0000 00000b93 0010 000005c0 0030 4bb9b81f 784b907d ebc94f85 eba69b9b 8db5e118 dba0b4f8 7c0cd002 4fb1d80d e6669b07 7957ca42 0a97a993 abbdeb7f
+0 01 400003a4 010 00000111 a8d6528f 2e1cd1be f26ed05e fd0a4150 0bd8faed abccf0ee daeef0ef abccf0f0
+1 01 4000074c 001 00001100 ba743445 0010 ba743445 1100 35793f5c 0011 35793f5c 0100 025dca1a 0011 025dca1a 0100 30da722a 0011 30da722a 1000 ce62603d 0001 ce62603d 1100 4b43e418 0011 4b43e418 1100 0000e3ab 0011 00000740 0030 6914ca83 a6f3907d cfe847dc 3f0eafa6 c3c08a9f a39358aa e7669526 142231b3 1b4d8e38 d30c1ce0 da436cfb 5d371602
+0 10 40000784 001 00000001 daeef1e1 daeef1e1
+1 01 400006e0 001 00000100 4f8546c9 0011 4f8546c9 1000 773a048d 0010 773a048d 1100 0000f745 0011 000006e0 0010 e5fe60b2 86d92d18 03551e35 065e23a8
+0 01 40000323 000 00001011 44775bb6 09eecd33 09eecd33 09eecd33 09eecd33 0872ef3a 0872ef3a 0872ef3a 0872ef3a 33363359 33363359 33363359
+0 01 40000208 010 00001001 6bb1b66c d399138a acc55249 298a2760 c0decf64 2ae127cf b560f69a 6d49ea23 abccf08a 49d3f03d
+1 01 4000073d 000 00001110 9b2faf00 0000 9b2faf00 0000 9b2faf00 1000 98e59113 0001 98e59113 0000 98e59113 0100 98e59113 1000 c4a91560 0000 c4a91560 0000 c4a91560 0000 c4a91560 1000 b462147c 0000 b462147c 0010 b462147c 0000 b462147c 1000 00000730 0020 26f9e3f1 5fa85ce2 807be36c e08b0dbd 06520434 6f7540a0 f50c7e11 926f7ca9
+0 01 40000142 001 00000110 c4da81b9 cd9ab79c cd9ab79c 12b71dd5 12b71dd5 a00dd1bc a00dd1bc
+0 10 40000684 010 00001111 86621679 d207ed6d daa0f1ff 836af1a4 180cccec 9da14a76 4f525556 abcc2f56 b354f19d ab61ab12 f47721a6 abccf1ac daeef1ad abccf1ae daeef1af cd624ae2
+0 10 400004c4 000 00000111 daeef131 daeef131 daeef131 daeef131 abccf130 abccf130 abccf130 abccf130
+1 01 40000694 001 00000010 bdaa7bae 0011 bdaa7bae 1000 0000d9a7 0011 00000690 0010 5dd3ea23 5eb5faa3 6ff14adf b193eaf0
+0 01 400006c0 010 00000110 abccf1b0 389d65b1 330677a1 daeee024 6be52e7e 280d1608 ab750f62
+1 01 40000283 000 00000100 dd000000 1000 569724ba 0001 569724ba 0000 569724ba 0000 569724ba 0000 00000280 0010 3ff9c20e ab23706a d2709c40 fe7f9d5c
+0 01 4000037a 001 00001111 03376230 880d99cd 880d99cd c1d61f60 c1d61f60 a2dbf233 a2dbf233 1de73f9d 1de73f9d 89ad1b86 89ad1b86 99cc14e4 99cc14e4 e6feab84 e6feab84 dbef7e35
+0 10 400006fd 000 00000011 0b110218 0b110218 0b110218 0b110218
+1 01 40000710 000 00001010 fa9b0fb2 0001 fa9b0fb2 0010 fa9b0fb2 0100 fa9b0fb2 0000 7658c605 0001 7658c605 0010 7658c605 0100 7658c605 0000 00fda786 0001 00fda786 0010 00fda786 0100 00000710 0010 0d4408ec 9588962d 57bbf2d5 5a98db99
+0 10 400007c8 001 00000111 27eaf1f2 27eaf1f2 31177f60 31177f60 abccf1f0 abccf1f0 26eef1f1 26eef1f1
+1 01 4000071e 001 00001001 a3930000 1100 b98e7844 0010 b98e7844 1000 e330e4f4 0000 e330e4f4 1000 928dde6e 0010 928dde6e 1000 9a94a05d 0011 9a94a05d 0100 0000c6fd 0010 00000710 0030 0d4408ec 9588962d e36ea628 eae275a0 dc3aae6e e0865594 957a98a4 87917532 413da4a3 c71ae8d3 807be36c e08b0dbd
+0 10 400002c4 001 00000001 ab6683e5 ab6683e5
+1 01 4000015a 001 00001111 59a90000 0100 ab942f90 0001 ab942f90 1100 fc809155 0011 fc809155 1100 63bfcf89 0000 63bfcf89 1100 807d2b23 0000 807d2b23 0100 2caf1326 0010 2caf1326 1100 4fe09903 0010 4fe09903 1000 e0c2d4b4 0011 e0c2d4b4 1100 0000b5fe 0010 00000150 0030 4e00eb69 f1164feb 31ca19c6 38558f08 9c6288fe fb4f2e63 a0236b05 e251e636 83311760 5d91e64e f6efcb9b 7cbe73b7
+1 01 40000084 010 00000100 1c1dd38a 1111 2af53a36 1111 7f44aaf6 1110 b8f3dde4 1011 71c1d652 1011 00000080 0020 02354f79 f9983956 4275288c 94d535ce bf8130bb 0d88af2c 3c31a17c b8a0f57d
+0 01 400001c4 010 00000110 9206f071 e8295472 30aef00f ab3f66d6 8341ce3e 58c1e387 93deabf7
+0 01 40000378 001 00000000 03376230
+0 10 40000568 010 00000011 b5e7dc9d 2a0f6a7f c0f3709b 274d4997
+1 01 40000328 001 00000001 1b1227ae 0011 1b1227ae 1100 00000320 0010 9bf40792 af1b8e2b 054c025e 32da243e
+0 10 400005a8 001 00000001 abccf16a abccf16a
+1 01 400006d8 000 00000111 c7387664 0000 c7387664 0010 c7387664 0000 c7387664 1000 41a04ad9 0001 41a04ad9 0010 41a04ad9 0000 41a04ad9 1000 000006d0 0010 be2e60c8 5bca6223 cbe7750d 356ac618
+1 01 40000739 000 00000101 a6951a00 0010 a6951a00 0100 a6951a00 1000 00f35b9b 0000 00f35b9b 0010 00f35b9b 0000 00000730 0010 413da4a3 c71ae8d3 b6444687 d03471a2
+0 01 40000330 010 00000001 4fe9f7ce 1d479007
+0 01 4000010b 000 00001001 867ef042 ad79f94c ad79f94c ad79f94c ad79f94c 9f5fb202 9f5fb202 9f5fb202 9f5fb202 daeef045
+1 01 400002d4 001 00001110 cb3624b7 0010 cb3624b7 1100 2b2fca90 0010 2b2fca90 1100 a7329250 0010 a7329250 1100 c0032f0c 0011 c0032f0c 1100 47ce671a 0011 47ce671a 1000 2c4c97a0 0010 2c4c97a0 1100 e9c835c9 0010 e9c835c9 1100 000027c7 0010 000002d0 0030 73a3c0e7 75359060 c5a1004b 4224d91a 3c31bb95 77a1a4f1 0d22f834 04adc59a 5e048d09 5a818889 7306ab56 4b6ea138
+1 01 4000019b 000 00001011 0d000000 0000 30e6c450 0001 30e6c450 0000 30e6c450 0100 30e6c450 1000 94192db5 0001 94192db5 0010 94192db5 0000 94192db5 1000 008caf93 0001 008caf93 0000 008caf93 0100 00000190 0020 0e291fa6 e3d4e97d 973eb987 9f434d1d 71c35fd8 54e9c637 e1b2de66 5ba49f8c
+1 01 400005e1 000 00000011 819d9a00 0000 819d9a00 0100 819d9a00 1000 000000b8 0001 000005e0 0010 80a76cf4 8de86127 0a97a993 abbdeb7f
+0 10 40000074 001 00000011 10c4e929 10c4e929 a8bdd76e a8bdd76e
+1 01 40000468 010 00000011 9bf1c56e 1111 1eef0722 1111 e36569c8 1110 f1cca4b6 1001 00000460 0020 dcfbe65f 79481816 49e06c19 b87c17b1 2ee60479 78a64c88 6b907c9d 86771ad1
+0 10 40000243 000 00001111 baeebc90 0efedd0d 0efedd0d 0efedd0d 0efedd0d f0fc6f92 f0fc6f92 f0fc6f92 f0fc6f92 6035f09d 6035f09d 6035f09d 6035f09d baeebc90 baeebc90 baeebc90
+0 01 4000072e 001 00000011 da94a05d ba29c6cc ba29c6cc a4ab925c
+0 10 4000027e 001 00000111 98a1bf26 802c2247 802c2247 abd8941a abd8941a bb07278e bb07278e 98a1bf26
+0 01 400001e8 001 00001111 52495099 52495099 daeed56e daeed56e ab503555 ab503555 51a5e58e 51a5e58e b45ed0a4 b45ed0a4 aa3d1521 aa3d1521 d4aeabc6 d4aeabc6 06c15658 06c15658
+1 01 4000015e 000 00000011 39590000 0100 39590000 1000 0000a8f6 0001 0000a8f6 0010 00000150 0020 4e00eb69 f1164feb d7583bcd afd55bb7 ee31d342 ab30c334 a0236b05 e251e636
+1 01 40000270 010 00001100 1f6ed60d 1110 4c80fe62 1011 5d4a7b86 0111 0ed55295 1111 e1b57640 0011 7cb32fca 1110 1c30c147 1111 fc70a669 1110 6a597c63 1001 bb3b1ab6 0110 1ebd083f 1110 4e692b89 1110 47cfe42d 1110 00000270 0040 953db095 40c81a54 67b4114e e87c87e4 41aec933 0fb07d34 06e2edfd be936f3f 01d47b95 e96d7464 8ee03d11 6103871c 89fa787d c520897a 8e6cdd95 8b78bb14
+0 10 400003e0 010 00000011 abccf0f8 daeef0f9 abccf0fa daeef0fb
+0 01 400004b2 001 00001101 abccf12c daeef12d daeef12d abccf12e abccf12e daeef12f daeef12f abccf130 abccf130 daeef131 daeef131 ab1629e6 ab1629e6 1a71f188
+1 01 400000b4 010 00001011 ece1cd16 1110 abffa1d5 1111 2e22e79f 1011 458aa378 1111 ed5f877b 0101 8e8bb1eb 0100 b69534e4 1110 389e2e83 1101 847a80a7 1111 b85d8177 1100 676d6219 1111 fc4f68e1 1100 000000b0 0040 c0c9d40b 9e4eeaba 75417d2d 4bdbc77c 30c88a25 c70502c5 631b481a bf917a3d f6a65de7 38aef052 d8f9d023 322f2a3e 0d7bf43e c83a6dbe 7b31bb69 9e5fd16a
+1 01 4000051d 000 00001100 14056300 0010 14056300 0100 14056300 1000 e4ad8d23 0000 e4ad8d23 0000 e4ad8d23 0100 e4ad8d23 1000 efc127b5 0001 efc127b5 0000 efc127b5 0100 efc127b5 0000 0000d98e 0000 0000d98e 0010 00000510 0020 4a925d39 4ade172d b5e48ef6 4de3e0ae c4bda9a7 839b776e 2c2b60b5 a2ca595d
+0 01 40000320 000 00001100 44775bb6 44775bb6 44775bb6 44775bb6 09eecd33 09eecd33 09eecd33 09eecd33 1b1227ae 1b1227ae 1b1227ae 1b1227ae 33363359
+0 10 4000029e 001 00000001 4e692ba7 4e692ba7
+1 01 400004c0 001 00000010 c558d442 0011 c558d442 0100 0000176f 0001 000004c0 0010 de6cc990 f9972161 ae58c1de 813bc025
+1 01 4000005c 000 00001100 7a950b23 0001 7a950b23 0010 7a950b23 0000 7a950b23 1000 8bb2e3eb 0000 8bb2e3eb 0000 8bb2e3eb 0000 8bb2e3eb 1000 8400761d 0000 8400761d 0010 8400761d 0000 8400761d 1000 000000e2 0001 00000050 0020 9feb00bf b570c1c2 8e75bc37 647ed139 e5a30f7d ed06372c 41b183a9 f512990b
+0 01 4000024c 010 00001011 6035f09d 0bcc4494 2b2e1e95 83d08d96 db6e2097 95ac4ab9 261e0c7e 620ffc8c d24a398a 1f6ed647 4cd8fe62 bb4a7b86
+1 01 400006c6 001 00000000 f7530000 0100 000006c0 0010 50132bcc ff9e5132 429f8cb5 0d1dc05b
+1 01 40000562 001 00001010 25ff0000 1000 257024bc 0010 257024bc 0100 f9315288 0000 f9315288 1100 0d64140d 0010 0d64140d 1100 134ae9b4 0011 134ae9b4 1100 3c1e70a6 0011 3c1e70a6 1100 00000560 0020 4664f055 05899c44 6b39958b c4c8245d fe524405 1fac2b14 82beca54 016d692b
+1 01 400005e4 010 00001100 631aa7bd 1111 d1162c93 0111 b55602eb 0110 2f29dbf1 1101 1256a573 1110 80af029c 1111 81298f56 1011 dad636d8 1111 d476d590 1111 c095c80a 1101 86310317 1111 d7e7a6ae 1111 2ec293f5 1010 000005e0 0040 8bae8d27 fb713830 f8af606b 58e886d9 7d8b6a83 75963fb9 dbfb160f 6242c0b7 4357d919 15cdf39a 81039bff 606630ee 823fba78 6bb6a3ec f359848a 89eb9171
+1 01 400007d1 000 00001101 45b61f00 0000 45b61f00 0000 45b61f00 1000 fcc3cdb1 0000 fcc3cdb1 0010 fcc3cdb1 0100 fcc3cdb1 0000 413ac2b3 0001 413ac2b3 0010 413ac2b3 0100 413ac2b3 1000 00672586 0001 00672586 0000 00672586 0100 000007d0 0010 50b86ddc 6750d372 2552de58 837c5fdc
+0 01 400005d3 000 00000001 4afbbf89 ff561b40
+1 01 4000044b 000 00000011 e3000000 1000 00ed0386 0001 00ed0386 0010 00ed0386 0100 00000440 0010 32276161 a3ffb3ae e5fb54a0 88f2353a
+0 01 400006ec 010 00000100 daeef1bb 98ccf1bc e567a971 e5500c8e 0b110218
+1 01 40000788 001 00001100 198471a7 0010 198471a7 1100 460e27a0 0011 460e27a0 1100 31f9d7c1 0000 31f9d7c1 0100 4b9cc062 0011 4b9cc062 1100 3da04624 0011 3da04624 0100 4ed0aa01 0011 4ed0aa01 1000 00009363 0011 00000780 0030 4dbe1e4c b9c98f93 03619ea4 c038be5b 213ca24b ec9168ee d428be6d 45ef80c1 e9efe9b9 2dac309b e887c309 61f8cd20
+0 10 400006fa 001 00000011 e5500c8e 0b110218 0b110218 e5500c8e
+0 10 40000766 000 00000011 f3e0e3ab f3e0e3ab f3e0e3ab f3e0e3ab
+0 10 400007bc 010 00000111 daeef1ef abcc9363 daeef1e9 abccf1ea daeef1eb 59ccf1ec da68b16a abcc0b94
+1 01 4000016c 010 00000110 1e3c874a 0101 4d12e5ae 1111 c35facf5 1011 c97dde82 1011 b6f93da3 0111 613583ef 0101 bddac600 0101 00000160 0030 ee31d342 ab30c334 3eb084ec be82d5d9 1e8be273 b8102ba1 2324d468 29d98e60 8a604d0e d7534bcb 39cde67e 0737bfef
+1 01 40000030 010 00000001 0a867cdb 1100 a8f80748 0101 00000030 0010 188e2db9 12cca33d 8031cb54 2b7f2897
+1 01 400000e0 010 00001101 ac8b0386 1011 55b12180 1110 acf8d88d 1111 78114131 1011 b185c51f 1110 dc61386e 0111 1b39fe5e 1101 b3a102bd 1001 053c7430 1001 0340710e 1111 33cc2626 1010 36834a47 1101 feb7aa55 0111 cb3c8ad9 1101 000000e0 0040 e047fe60 56ffeb35 36d990e0 0f65bd14 242f9cff e6f48b49 1c9ff3d4 75903e61 910c053d b2f20bc8 f5e9e813 9f04686c b404bd6f d2dd736f 0e92ea81 0cb9a3f6
+0 10 400002b4 001 00000011 f8bd216e f8bd216e 170e923c 170e923c
+1 01 40000606 001 00001000 7eab0000 0100 de75cde7 0010 de75cde7 1100 132a4eed 0011 132a4eed 0100 5f79c667 0010 5f79c667 1100 141781be 0011 141781be 1000 00000600 0020 fcb3949e d18af7c5 6ad26fad 9e798a4e 84542033 6e127f63 f359848a 89eb9171
+0 01 40000464 000 00000111 da63bdeb da63bdeb da63bdeb da63bdeb 9bf1c56e 9bf1c56e 9bf1c56e 9bf1c56e
+1 01 40000082 000 00000110 5e1f0000 0100 5e1f0000 1000 2f8132b8 0001 2f8132b8 0010 2f8132b8 0000 2f8132b8 1000 0000004d 0001 00000080 0010 606eabfc a1f02b69 4f0a72f2 b60cc71a
+1 01 40000338 001 00000010 2269dc93 0010 2269dc93 1000 000013cb 0011 00000330 0010 5ddd432d 62b3fcb4 8c9185c1 86aac4b7
+0 10 400004be 000 00000011 daeef12f daeef12f daeef12f daeef12f
+0 01 400003c6 001 00001000 daeef0f1 abccf0f2 abccf0f2 daeef0f3 daeef0f3 abccf0f4 abccf0f4 daeef0f5 daeef0f5
+0 01 40000134 000 00000101 1094f04d 1094f04d 1094f04d 1094f04d 31cc3f6b 31cc3f6b
+1 01 4000012c 010 00001011 ace0cf18 1110 92f71b53 1011 18edc86c 1110 44d95c2e 1110 8abea435 1010 676d9072 0101 4e9da865 1111 04d43c20 1111 c7ead005 1011 04c2450c 1111 f3dd4146 1111 b87c299f 0111 00000120 0040 a04eba85 72211519 e473f8fc 9bf1937f cdb74c4f 773ec8be 0010fb6f 7aecfeb2 9d057fdc 07a26f39 672ae27c 38fd6adb 30abdcf7 11451948 11f962a5 b0538e79
+0 01 40000195 000 00000101 9950b704 9950b704 9950b704 15420b4b 15420b4b 15420b4b
+1 01 400006df 000 00000011 8b000000 0000 0056d827 0001 0056d827 0010 0056d827 0100 000006d0 0020 be2e60c8 5bca6223 cbe7750d 356ac618 9626852c a6d7805d 03551e35 065e23a8
+0 10 400005ba 001 00001111 abccf16e 7f404bcf 7f404bcf f7cb1e0f f7cb1e0f 626f842c 626f842c abccf16a abccf16a daeef16b daeef16b abccf16c abccf16c daeef16d daeef16d abccf16e
+0 01 40000318 001 00001111 75cc203d 75cc203d cbf4f01f cbf4f01f 44775bb6 44775bb6 09eecd33 09eecd33 1b1227ae 1b1227ae 33363359 33363359 4fe9f7ce 4fe9f7ce 1d479007 1d479007
+1 01 4000014e 001 00000000 1c720000 1100 00000140 0010 9d057fdc 07a26f39 4abdd7b5 d731ba9a
+1 01 4000042e 000 00000101 151b0000 0100 151b0000 1000 7dfd2431 0001 7dfd2431 0000 7dfd2431 0100 7dfd2431 1000 00000420 0020 11b0784b 40a6d83e 97aec22d 6817706a bd5f8f7c 393b5b86 e65969e7 e156398f
+1 01 40000504 010 00001100 7aea64ed 1111 f6f0c79f 1111 ed6db7e2 0111 47bce78b 1111 d584fac3 1111 fecad03d 1111 1ee45d40 1100 8477276a 1111 4c5db71c 0111 a907f30d 1110 7345d4ad 1100 6720c7a7 0011 b1a57dba 1111 00000500 0040 ba1b57d9 434876e0 481e52ec 8ae5e3a8 5fd8c061 4c424ef8 5ae16cc0 99d24977 525da0d2 1e392abb 9d363310 e3613e03 9cad5def 4da574d4 bd394503 46ae6336
+1 01 40000174 000 00001000 e2eadace 0001 e2eadace 0010 e2eadace 0100 e2eadace 0000 3d254e6c 0000 3d254e6c 0000 3d254e6c 0100 3d254e6c 1000 0000007a 0001 00000170 0010 dddd79ed 13acf470 96c01e5b 835f61f5
+1 01 400000de 001 00000000 1ae80000 1000 000000d0 0010 f6a65de7 38aef052 bdc9259d d98d3ca3
+0 01 4000009c 001 00001001 01a9faf7 01a9faf7 10a8f005 10a8f005 b8ce3567 b8ce3567 65ccfdfb 65ccfdfb daeef02b daeef02b
+1 01 400005a3 000 00000101 21000000 1000 5803f02a 0001 5803f02a 0000 5803f02a 0100 5803f02a 1000 000000a5 0001 000005a0 0010 4369f7f5 21cbec6b bdf19fb3 6e2b7576
+0 10 400005dc 001 00001111 d991efc2 d991efc2 ab12d370 ab12d370 1e42391e 1e42391e 90cc1024 90cc1024 19390a47 19390a47 4afbbf89 4afbbf89 ff561b40 ff561b40 abcc73e8 abcc73e8
+0 01 40000068 010 00000101 6562f0e2 7146f358 a8bdd76e 10c4e929 d5db171e f9ea1a1f
+0 01 40000187 000 00001001 dadaf000 abccf062 abccf062 abccf062 abccf062 1ceef063 1ceef063 1ceef063 1ceef063 9c2af091
+0 01 400003fc 010 00000101 af70f069 3c079525 99fa4291 704411ac 7d81a49c b5577204
+0 01 400003e8 010 00000011 abccf0fa daeef0fb abccf0fc daeef0fd
+0 10 400007e2 001 00000001 69ad70f7 69ad70f7
+1 01 400007b6 001 00001100 e3af0000 1100 a0cd67db 0010 a0cd67db 0000 88fb3fbe 0011 88fb3fbe 1100 930eaf7b 0011 930eaf7b 0100 ada20a69 0011 ada20a69 1100 f90b0259 0010 f90b0259 1000 67b04318 0011 67b04318 1100 000007b0 0020 69919887 20ee92cc f456a2c0 4f7716c5 92acc138 9cd04200 148f9a27 4ce0d3b2
+1 01 400005ea 001 00001110 e7d80000 0000 f3f12c9f 0001 f3f12c9f 1100 064612d5 0001 064612d5 1100 5c4d0f4b 0001 5c4d0f4b 0100 ee0a2583 0011 ee0a2583 1000 cdcde29a 0010 cdcde29a 1100 1db616c0 0001 1db616c0 1100 ed9b7428 0011 ed9b7428 1100 000005e0 0030 8bae8d27 fb713830 332e0fdf f52fa6fb 22c3cc37 9131bd4a 183fba78 bb322a98 3903cd87 dbbe6108 6ad26fad 9e798a4e
+0 10 400006dc 010 00001111 414d4ad9 4f56d827 773a04b9 cea3f745 daeef1bb 98ccf1bc e567a971 e5500c8e 0b110218 abccf1b0 385365b1 330677a1 daeee024 6be52e7e 280d1608 c7757662
+1 01 40000666 001 00001101 86b40000 0100 720ca118 0010 720ca118 1100 dd5f7a43 0011 dd5f7a43 1000 ea6f6e08 0011 ea6f6e08 1000 5c45da8c 0010 5c45da8c 1100 52cad69b 0011 52cad69b 1100 da5d2187 0010 da5d2187 0100 0000a4e8 0011 00000660 0030 0f733645 3f1b8136 4c453e22 a766afaa a0465827 efd17359 7609870d 2069b41c 9187d9f4 2180aba6 c779c7ad a134c14a
+1 01 400003cc 001 00001110 d1a49cc8 0011 d1a49cc8 1100 341ffe17 0011 341ffe17 1100 c1bd03f4 0010 c1bd03f4 1100 ce923404 0010 ce923404 1100 c37e79d8 0011 c37e79d8 1100 46a69d45 0011 46a69d45 1100 ce151552 0011 ce151552 1000 0000f5aa 0011 000003c0 0030 b4c1db29 53da4b3e 90c4e9f1 8cef0cf7 461e0789 aedbe25b f5a63bcc b1048bd0 8e1a8412 2df56a4e 49734691 8999c9e8
+0 01 40000762 000 00000100 4b43e418 4b43e418 f3e0e3ab f3e0e3ab f3e0e3ab
+0 01 400007c4 010 00000110 ada20a69 f9ea02f2 67b04318 456af13e 42c3cd49 413ac2b3 db671f86
+1 01 400003ac 001 00000011 dada2b51 0000 dada2b51 1100 4148e297 0000 4148e297 1100 000003a0 0020 f06ab7f5 2153cbc3 adce7595 2efc1486 a69f36c8 39a9c660 f7384574 f0dd9d75
+0 01 40000034 010 00000000 abf83548
+1 01 40000218 001 00001000 f2a167e3 0011 f2a167e3 1100 681bafbd 0010 681bafbd 0000 0bca8b1e 0011 0bca8b1e 1100 9ecc8b77 0000 9ecc8b77 0100 0000f3fc 0001 00000210 0020 f2c459c5 c02f5f5e 8dffa6aa 4775809f f8a6f967 477eeccf 233119b7 6b14a3a1
+1 01 400004dc 001 00001110 13209ac8 0011 13209ac8 1100 75edb826 0000 75edb826 1000 f9823697 0011 f9823697 1100 796042df 0011 796042df 1100 558f66fa 0011 558f66fa 1100 c52f5d80 0010 c52f5d80 0100 18b17267 0011 18b17267 1000 00004364 0011 000004d0 0030 6365d0f7 02df781b 5332b6c2 8f4ecaed 248c2849 57b1652f 0c5b96ee 65325687 24678fea 107477f7 52f293e1 295aeaf9
+1 01 400005d0 010 00000101 f6604001 1111 cd048cf7 1101 f143f0d5 1101 d64b3257 0101 f98259d5 1110 297f13b1 0101 000005d0 0020 284b07a9 70f49526 82b4bf26 e390e099 1291be19 698412ee 332e0fdf f52fa6fb
+1 01 40000010 001 00001111 36b5203e 0001 36b5203e 1000 66ccd35b 0011 66ccd35b 1000 30f60260 0001 30f60260 1000 ac2b544b 0011 ac2b544b 1100 fefceb83 0011 fefceb83 1100 284f1a07 0011 284f1a07 1100 88e4e538 0011 88e4e538 1100 cf1a701c 0000 cf1a701c 1100 00000010 0020 74af393a 5f30d868 2bef2b34 c1685b93 74aa0679 54011849 d1c82eff 07955d35
+1 01 4000040c 001 00001010 5c01e79f 0011 5c01e79f 1000 c0709880 0001 c0709880 0000 62680667 0011 62680667 1000 af83843c 0011 af83843c 1100 6ed9f70b 0001 6ed9f70b 1100 000024a8 0001 00000400 0030 5a677a98 8c41c48d e1ca3104 100e53e2 f001c067 5117c983 8f53cebc e4521841 6c8d1959 90955805 97aec22d 6817706a
+0 01 400002fc 001 00001101 d99e0b43 d99e0b43 b2ddf838 b2ddf838 daee7ae3 daee7ae3 389ef0c2 389ef0c2 350dfbfa 350dfbfa abccf0c4 abccf0c4 71910f3b 71910f3b
+1 01 400006c8 000 00000001 00008181 0000 00008181 0010 000006c0 0010 50132bcc ff9e5132 09aa3da3 9dfd509c
+1 01 40000722 001 00000110 673d0000 1100 7d2e0a7e 0011 7d2e0a7e 1100 d63e57c1 0010 d63e57c1 1100 4866e7e0 0001 4866e7e0 1100 00000720 0010 fccef1c6 3eb4959f eec6c482 a393e680
+0 10 400007d6 001 00000011 42c3cd49 456af13e 456af13e 42c3cd49
+1 01 400004de 000 00001010 0b290000 0000 0b290000 1000 a04a3ddd 0001 a04a3ddd 0010 a04a3ddd 0100 a04a3ddd 0000 8900255a 0001 8900255a 0010 8900255a 0100 8900255a 1000 00000049 0001 000004d0 0020 6365d0f7 02df781b a05520cb 8111848a 5e3acd9f 5ff7cfb3 5225708f 125314e8
+1 01 400006c0 010 00001000 c20a2ca6 1111 799c05b6 1111 3529c318 1101 a3109595 1011 38e8d274 1111 404c2bfd 1111 24efd172 1111 b801b8b9 1100 a10f4fbb 1110 000006c0 0030 8bd721b5 8d0d5e54 4b0db15b 8d1cfd42 9ede5a49 da69de7c a8412999 5424087e 2ac0f0cb 700d12f5 03551e35 065e23a8
+1 01 4000041c 001 00001000 be0aed54 0001 be0aed54 1100 7a830bd8 0011 7a830bd8 1100 4ff63f60 0001 4ff63f60 1100 31cac515 0011 31cac515 1100 00003658 0011 00000410 0020 f001c067 5117c983 5dbd09da 38883eb5 5d86d910 d4903b65 61c5fbd4 0dbc1323
+1 01 400001d8 001 00000100 9f763efb 0001 9f763efb 0000 62ece398 0010 62ece398 1000 00009828 0011 000001d0 0020 8551ecd2 cc0b6091 e7327c1e 020ae83f 97323f3e a063f206 a58fb559 29e4eddc
+0 10 40000204 010 00000011 06c15658 6bb1b66c d399138a d4aeabc6
+1 01 400001a7 000 00001010 c8000000 0000 c0ec4c10 0001 c0ec4c10 0010 c0ec4c10 0100 c0ec4c10 0000 369d1b2a 0000 369d1b2a 0010 369d1b2a 0100 369d1b2a 1000 0000e546 0001 0000e546 0010 000001a0 0020 71c35fd8 54e9c637 421609f8 1fa97c4b 4f620470 f6448569 65c76e55 e8f85f06
+0 10 4000009c 001 00000111 01a9faf7 01a9faf7 b8d0dde4 b8d0dde4 7199d652 7199d652 b8e5d0d5 b8e5d0d5
+1 01 40000220 010 00001010 180c88fa 1100 6ba3acab 0101 2bb220be 1111 72c382fe 0110 fce2cba5 1001 0cd3ce5c 1110 e5b24577 0111 b840aa4c 1011 6132612a 0111 55a2f608 0011 695c7f81 1010 00000220 0030 38e03353 df207e3c 7f823588 7087d46e 50224773 e88bf225 396ab7b8 8eb8020b baa30b8b 71440224 06db1b65 fb57d70c
+1 01 400002f0 000 00000001 0000ca11 0001 0000ca11 0000 000002f0 0010 d9a86662 4896d360 7306ab56 4b6ea138
+1 01 4000034c 000 00001111 a5a10e56 0001 a5a10e56 0010 a5a10e56 0100 a5a10e56 1000 b3f1c198 0001 b3f1c198 0000 b3f1c198 0100 b3f1c198 1000 7f59399a 0000 7f59399a 0000 7f59399a 0100 7f59399a 1000 7f59178c 0001 7f59178c 0010 7f59178c 0100 7f59178c 1000 00000340 0020 a1928709 5b690018 15c6c92c 0b006f6d d3bcb8ac 87f97809 f546e83b a4edaac2
+0 01 40000654 010 00001001 9322f195 cbcc1893 537c1fd8 a87fe7ff b2b480ff 720ca1b9 ddb97a43 eac66e08 5c45dafa 52cad69b
+0 10 4000008a 000 00000011 2af53a4d 2af53a4d 2af53a4d 2af53a4d
+1 01 400002d0 010 00001010 6759978d 1001 09308f5f 1111 dbed4f20 0111 483454c0 1111 21f48015 1101 5fee7644 0001 cc2c31be 0011 5246b8c3 1110 81127e43 1110 790ffc6b 1101 7418998f 1111 000002d0 0030 038fca7b 8c9154b8 ff00ad80 9cf880a2 a1a3d52e ebe20f1b a12dc3c5 0da00ad6 98b31a16 d3232bac 7e8d72c2 e0caef19
+1 01 400004a8 001 00001011 d44e7d32 0011 d44e7d32 0000 c8020158 0011 c8020158 1100 7148415f 0010 7148415f 1100 fb801511 0000 fb801511 0100 5076dbec 0010 5076dbec 1000 38c78350 0011 38c78350 0100 000004a0 0020 54a05658 1527d254 4b0e2ab2 c85f29c3 229d7848 d3e92afc 962362c8 a6470a56
+0 10 40000603 000 00000001 1db636c0 1db636c0
+0 10 400001ac 010 00000001 369d1b78 abec4c10
+0 01 400005d8 000 00001010 f14373d5 f14373d5 f14373d5 f14373d5 d94bef57 d94bef57 d94bef57 d94bef57 f9825990 f9825990 f9825990
+0 01 40000265 000 00000011 261e0c7e 261e0c7e 261e0c7e 620ffc8c
+1 01 40000632 001 00001110 d44a0000 0100 eae75462 0011 eae75462 1000 1e32562c 0011 1e32562c 1100 0582d523 0001 0582d523 0100 dbc26e22 0011 dbc26e22 1100 55ed6686 0000 55ed6686 1100 133a25ab 0000 133a25ab 1100 6bcc9051 0010 6bcc9051 1000 00000630 0020 cf5a9566 a320ab26 9091c9a3 9fb3e806 7591f4ca 25c26ebf 24edffbe 0bedb6ba
+0 01 400006d2 001 00000000 38e8d274
+1 01 4000009e 001 00000110 3d240000 1000 c6952eab 0000 c6952eab 1100 cecc415b 0010 cecc415b 0100 de2d48fb 0001 de2d48fb 1100 00000090 0020 bf8130bb 0d88af2c 65d60245 9a4164d1 f5a139d2 c064280d c949872f 648c169d
+1 01 4000061c 010 00001100 19356b94 1111 e80de26b 1110 de87187e 1110 ea144ae2 1111 6f39ec1f 1111 5b64f334 1100 e4c495d5 1100 857ec370 0011 955ee13a 1110 9ccf9c47 0011 5f00726f 1101 7f8d65a4 1111 c31e83d6 1111 00000610 0040 84542033 6e127f63 5688d6e4 72ccbdbd 3b275e8f 0037682f 5fbeb03b 2c792d7d f714be3b 77c631d8 0fdc821b a045373c c068232d 778ff584 01e035e2 caffbad5
+0 10 40000650 001 00000001 9f5860b6 9f5860b6
+1 01 40000508 010 00001010 47bd7bfe 1011 a86fa300 1011 b8e6204e 0011 f6425b0a 0110 acbe29b2 0111 380cc8d9 1011 a4b4b49c 1110 b952bbe2 0111 d81a8381 1110 f9ce0ca4 0010 eb8b746c 1110 00000500 0040 ba1b57d9 434876e0 23908bb0 caed89e1 8c4c83bb 5f9da96b 1330b842 ed76db38 1db89f9a 0da7fe2a 70831e82 ca6220e6 553c03c2 06496e5d bd394503 46ae6336
+1 01 400002a6 000 00000110 87300000 0000 87300000 0000 599efadd 0001 599efadd 0010 599efadd 0000 599efadd 1000 000000ba 0001 000002a0 0010 89fa787d c520897a c056f884 6fdd9f60
+1 01 40000250 010 00001100 162df0a3 0101 9f2c2188 1011 0b4e1904 0110 afd9e3b0 1000 fb2bc4ec 1111 fb76a53c 1111 f83fa4ad 1100 79a2a593 1011 000ed491 1011 63a358f4 0111 dbb06c85 1111 1785f440 1111 3c92365e 1100 00000250 0040 acda0f62 929e7098 3c313858 511b2bda d288f568 d1e8001a 04f991b9 318dbce5 568e0436 0f0bf70a dd379fbe 55805a26 bcb8b015 5591f795 06e2edfd be936f3f
+0 10 400003f0 010 00000111 abccf0fc daeef0fd c944a5a3 af70f069 46a69d45 ceee1552 abccf5aa daeef0fb
+1 01 40000640 001 00001110 8e11144e 0011 8e11144e 1000 959388f7 0010 959388f7 1000 40e05392 0011 40e05392 1000 e9572773 0001 e9572773 1100 13a64efa 0001 13a64efa 1100 0e4b890d 0011 0e4b890d 1100 74fc5511 0001 74fc5511 1000 00003f1e 0011 00000640 0020 9e6c26be 29a2e51b 5da3f199 983f8480 7bd23620 e6dede7f b0e39f68 0d36a989
+0 01 40000264 000 00000010 fb76a53c fb76a53c fb76a53c
+1 01 40000641 000 00000001 0065f400 0000 0065f400 0100 00000640 0010 e028599f 654f30a0 5da3f199 983f8480
+0 10 400007c4 010 00000011 ada20a69 f9ea02f2 67b04318 ab0eaf7b
+0 01 400002b2 001 00000110 170e923c f8bd216e f8bd216e 54ebf0ae 54ebf0ae a5543fe3 a5543fe3
+1 01 400005b9 000 00000011 ab9d2f00 0010 ab9d2f00 0000 ab9d2f00 1000 0000003e 0001 000005b0 0010 bb588f00 4538c68d b4ea59cd 895d5e6f
+1 01 4000021e 001 00000110 fd460000 1100 5ef721cd 0010 5ef721cd 1100 aad5ac8f 0011 aad5ac8f 0100 d1792b79 0001 d1792b79 0100 00000210 0020 f2c459c5 c02f5f5e c688b17a 2e4cf164 0d60f23a 3db5eefd 460671f8 75db6350
+0 01 40000034 001 00000010 abf83548 abf83548 afb666bd
+1 01 4000046f 000 00001110 17000000 1000 d0d0d31e 0001 d0d0d31e 0000 d0d0d31e 0100 d0d0d31e 0000 29c7ab73 0001 29c7ab73 0000 29c7ab73 0100 29c7ab73 1000 9a4ce0b5 0000 9a4ce0b5 0000 9a4ce0b5 0100 9a4ce0b5 1000 00009e3d 0001 00009e3d 0000 00000460 0020 dcfbe65f 79481816 c9b9d2b8 23c440f4 48233ef8 4e23cf06 a7a14f72 2ae21235
+0 10 40000576 000 00001111 3c1e70a6 3c1e70a6 891691c1 891691c1 891691c1 891691c1 2fcaaa83 2fcaaa83 2fcaaa83 2fcaaa83 134ae9b4 134ae9b4 134ae9b4 134ae9b4 3c1e70a6 3c1e70a6
+1 01 40000000 010 00001000 6ca08231 1101 190e7d9f 1111 d93ec2aa 1001 a964212e 1101 9c344698 1100 f89ddae5 0111 9807873b 1110 c8504637 0101 ace930de 1001 00000000 0030 99a80dfc 8a5bf019 7d3b2ad0 c8210a24 c684a8d1 a1200e45 a43ac45a 32342721 01dedfa7 0078f70c d1c82eff 07955d35
+0 10 40000004 000 00000011 190e7d9f 190e7d9f 190e7d9f 190e7d9f
+0 10 4000042c 010 00000001 151b3658 31cac515
+0 10 40000793 000 00000111 abf9f1e4 4b9cc062 4b9cc062 4b9cc062 4b9cc062 abf9f1e4 abf9f1e4 abf9f1e4
+0 01 400000a2 001 00000101 c695f005 b8cc4167 b8cc4167 de2dfdfb de2dfdfb daeef02b
+0 10 400000ce 001 00000111 b69534f6 458aa378 458aa378 da5ff07b da5ff07b bc8b9e2f bc8b9e2f b69534f6
+1 01 40000623 000 00000110 1b000000 0000 1bb62e0a 0001 1bb62e0a 0000 1bb62e0a 0100 1bb62e0a 1000 0000b33b 0000 0000b33b 0000 00000620 0010 f6c32efd a1aea27d 5fbeb03b 2c792d7d
+1 01 40000158 010 00001100 b2a167ac 1111 2e1cd213 1111 6448e6d4 1110 d7fb3f28 1011 4e993d02 1111 5bda7ad1 1111 06e26f15 1101 00bfbe8a 1011 a8d48d4e 1111 f82bd7fc 1111 73a389a8 0101 bf180652 1111 d60757d7 1111 00000150 0040 30abdcf7 11451948 4ab873bb 69fd1933 30374e50 fb2cd168 4719ba53 2cdd1021 7ad993e7 d7acac5d 02497066 609cb158 9d379bed aa9164d8 bcf03cf5 27914808
+1 01 40000106 001 00000011 4ca70000 1100 69545067 0000 69545067 1100 00005a57 0010 00000100 0010 af2172a5 cbf87d42 5c5fe9e6 2b3f2575
+1 01 400005fe 001 00000000 71390000 1100 000005f0 0010 22c3cc37 9131bd4a d1381774 6dbfd4f2
+0 10 400000c7 000 00000001 da5ff07b da5ff07b
+1 01 40000024 001 00001101 43bbe3bb 0001 43bbe3bb 0100 bd68f9c9 0010 bd68f9c9 0000 9f3f8ec1 0001 9f3f8ec1 1100 ecd6b367 0011 ecd6b367 0100 c8786af3 0011 c8786af3 1100 9a234934 0011 9a234934 1100 72630202 0001 72630202 1100 00000020 0020 21e43080 001420e1 8f41873b 0b2042df 2839dd38 308d349e bbdf9d7d 9883996d
+0 10 4000031c 000 00000111 cbf4f01f cbf4f01f cbf4f01f cbf4f01f 75cc203d 75cc203d 75cc203d 75cc203d
+0 01 40000214 010 00001101 298a2760 f2a167e3 fd46afcf 5ef7211e 6dd5ac8f 2b792079 49c3823d fcccf3a5 0cd3ce8d abb24577 b8eeaa4c ba32612a 0efef608 69fc7f92
+1 01 400004fc 001 00000001 ed530a5d 0010 ed530a5d 1100 000004f0 0010 24678fea 107477f7 c8f9a91c 0b9e5a9b
+1 01 400004b8 001 00000101 5bbf3678 0011 5bbf3678 1000 8c1aebc2 0001 8c1aebc2 1100 30f9f203 0010 30f9f203 1100 000004b0 0020 229d7848 d3e92afc 2845e16f 4b8275b3 0ee1b8be a54fdfd3 ae58c1de 813bc025
+1 01 40000644 010 00000101 92ac214b 1110 f80fbb30 1111 9c0bbeb9 1111 72cf83a5 0110 40cd6673 1111 d7093266 1111 00000640 0020 698b80d5 d5a49008 8a257163 db0b3997 72bf54fe d90fb2c3 6b03098f 9c6900ed
+0 10 400004a2 001 00001111 abcc6e1f da85c497 da85c497 abcc7d32 abcc7d32 c8020158 c8020158 7148412c 7148412c da80f12d da80f12d 5bcc3678 5bcc3678 8c1a83c2 8c1a83c2 abcc6e1f
+1 01 40000528 010 00001100 4e316e62 1111 5de8d510 1011 ad857660 0111 8a73d459 1111 3e73ba13 0010 3b2c1057 1111 3ccb5db6 1011 c2f3e592 1111 b3e8d29e 1101 bb1de35d 1011 95e0ea72 0111 e651be7e 1000 071af21e 1111 00000520 0040 1db89f9a 0da7fe2a 09d36d68 5fadde73 b8df811d 841de080 7c63a317 38791f1c 538c21d5 23413ec6 a76149a3 87b00fa7 3185c837 9b43bf51 2282dbbc 16bba5c3
+0 10 400001b5 000 00000111 dac86746 dac86746 dac86746 8a8de546 8a8de546 8a8de546 8a8de546 dac86746
+0 10 400000d5 000 00001111 847a80a7 847a80a7 847a80a7 b85d9a82 b85d9a82 b85d9a82 b85d9a82 1a6d6219 1a6d6219 1a6d6219 1a6d6219 389e5283 389e5283 389e5283 389e5283 847a80a7
+0 10 400007e0 001 00000011 69ad70f7 69ad70f7 3064bbff 3064bbff
+0 01 400003ec 000 00000110 daeef0fb daeef0fb daeef0fb daeef0fb abccf0fc abccf0fc abccf0fc
+0 10 4000012d 000 00000011 ace0cff8 ace0cff8 ace0cff8 ace0cff8
+0 10 400001fa 001 00000001 b45ed0a4 b45ed0a4
+0 01 40000786 001 00001101 daeef1e1 198471e2 198471e2 460e27a0 460e27a0 abf9f1e4 abf9f1e4 4b9cc062 4b9cc062 aba04624 aba04624 4eeeaa01 4eeeaa01 abcc9363
+1 01 400004c4 010 00000011 e983ed14 1100 e29499d7 1011 4563c8f6 1111 ab600699 1111 000004c0 0020 6be8326f 4d15ee5e d5014e06 771ed1e3 9626fea3 aa9363c3 a05520cb 8111848a
+1 01 40000773 000 00000010 b8000000 1000 0000a6b5 0001 0000a6b5 0010 00000770 0010 692d3c73 dfda6e3b 608b6393 c6caf256
+1 01 400005c0 010 00000101 b62b7dc0 1101 eab22722 0101 34608157 1011 93bec1cf 1111 33aedf00 1111 81d93c3a 0011 000005c0 0020 cb468b7a 41312d26 e237b122 0d95ced9 31525a2f 30b691ea 82b4bf26 e390e099
+0 01 40000704 001 00000000 101375e0
+1 01 4000045a 000 00001111 a5ab0000 0100 a5ab0000 1000 c7f4afab 0001 c7f4afab 0000 c7f4afab 0100 c7f4afab 1000 78505851 0001 78505851 0010 78505851 0100 78505851 1000 72ca1903 0001 72ca1903 0000 72ca1903 0100 72ca1903 1000 0000b6be 0000 0000b6be 0000 00000450 0020 d63d8e1c d43d5984 bcfc4e0e f37666a9 f09effee 450c53ff c9b9d2b8 23c440f4
+1 01 40000291 000 00001010 c7948a00 0010 c7948a00 0100 c7948a00 1000 41dc459e 0000 41dc459e 0000 41dc459e 0100 41dc459e 0000 dfb71afa 0000 dfb71afa 0010 dfb71afa 0100 dfb71afa 1000 00000290 0010 dd12c0e7 4ba6c3de ba7edb86 4d271076
+0 10 40000264 000 00000001 fb76a53c fb76a53c
+0 01 400006a9 000 00001101 ab61ab12 ab61ab12 ab61ab12 f47721a6 f47721a6 f47721a6 f47721a6 abccf1ac abccf1ac abccf1ac abccf1ac daeef1ad daeef1ad daeef1ad
+1 01 40000412 001 00000010 28f50000 0100 81bd0639 0011 81bd0639 1100 00000410 0010 b3436542 c5155ac7 5dbd09da 38883eb5
+0 10 40000334 001 00000011 1d479007 1d479007 4fe9f7ce 4fe9f7ce
+0 01 40000376 001 00000010 1a4a65d7 03376230 03376230
+1 01 40000606 000 00000110 37d10000 0100 37d10000 1000 c0636aa5 0000 c0636aa5 0010 c0636aa5 0100 c0636aa5 1000 000000ae 0000 00000600 0010 5d046fdf 341e86df 6b1351a8 9bdc75fb
+0 10 40000440 010 00000001 abccf110 daeef122
+0 01 40000080 010 00001111 5e1f76c1 2f1d32b8 2af53a4d 7f44aae0 b8d0dde4 7199d652 b8e5d0d5 3da9faf7 c695f005 b8cc4167 de2dfdfb daeef02b abccf02c ece1cd2d abffa1d5 2e23e79f
+0 01 400004d0 010 00000101 ab600699 88dfb935 ab6aed00 0b209ac8 754a3ddd 8900255a
+1 01 40000420 001 00000001 28e45c2f 0010 28e45c2f 1100 00000420 0010 7a47c5cd f6f26a1d 61c5fbd4 0dbc1323
+1 01 400001f9 000 00000110 01790000 0000 01790000 0000 01790000 0000 baeec804 0001 baeec804 0010 baeec804 0100 baeec804 0000 000001f0 0010 0828bcee d81c9650 c3266c94 b4076915
+0 01 400005ae 000 00000101 daeef16b daeef16b abccf16c abccf16c abccf16c abccf16c
+0 10 40000694 001 00001111 bd0c7bae bd0c7bae 9da1d9a7 9da1d9a7 4f525556 4f525556 cd62a4e8 cd62a4e8 86621679 86621679 d207ed6d d207ed6d daa0f1ff daa0f1ff 836af1a4 836af1a4
+1 01 40000320 010 00000111 e486ee67 1110 56596094 1110 1d1449d5 0100 524bf577 1011 326995f7 1010 88ef8440 0011 ea5c6abc 1011 48379fb4 1100 00000320 0020 8110eff3 4c67c9db f0fb2320 7b01a937 fb15081f 8e2dd068 e80e29a1 b449764e
+1 01 40000128 010 00001010 a0f26e75 1011 d1fc741f 0111 93c28ffb 1111 427671b7 1010 f16e87cf 1001 c6d901ae 0101 ad9f767b 1001 8fa9b72c 1111 b949e7f3 0100 1669af1e 1110 06ab06fb 1110 00000120 0040 a04eba85 72211519 e6e6f18d 76bb7d35 47b02016 1147c397 54ce43bc 48edbef9 3666d1f1 9fc83eff 3a1ce056 e9e46d6f c7355191 ed32197f 4ab873bb 69fd1933
+1 01 40000298 001 00000110 79962ef6 0011 79962ef6 1100 5f572847 0010 5f572847 1100 eb3b4384 0011 eb3b4384 0100 0000eb0d 0011 00000290 0020 dd12c0e7 4ba6c3de 72048c6f a45b4f86 c00b0aba adac7985 c056f884 6fdd9f60
+1 01 40000602 001 00000111 65a90000 0100 d6aebb09 0011 d6aebb09 1000 d14d3a0c 0011 d14d3a0c 1000 5574130c 0010 5574130c 1100 00007cad 0011 00000600 0020 22fc3040 d51b84fa 5a7b94c7 c55b62bc 9eba8c8b 501ad1b3 5688d6e4 72ccbdbd
+0 01 4000068e 001 00000111 daa0f1ff 836af1a4 836af1a4 bd0c7bae bd0c7bae 9da1d9a7 9da1d9a7 4f525556
+0 10 40000582 000 00000111 452e29dc 452e29dc 9171f1c5 9171f1c5 9171f1c5 9171f1c5 452e29dc 452e29dc
+1 01 40000550 001 00001111 c7555f81 0011 c7555f81 1000 36f4bb3f 0011 36f4bb3f 1100 ef15facb 0000 ef15facb 1100 a421cfb7 0010 a421cfb7 1000 3ec81041 0011 3ec81041 1000 f6b1afeb 0011 f6b1afeb 1100 923c3deb 0011 923c3deb 0100 af61f4b2 0010 af61f4b2 1000 00000550 0020 3f65b00f 2a154171 b9a054ae bf4e2f7f e658982c 2cbb8f8b 31b6c2bf 7fcec907
+1 01 40000612 000 00001000 d5c60000 0000 d5c60000 1000 1f3d0f46 0001 1f3d0f46 0010 1f3d0f46 0000 1f3d0f46 1000 0023d006 0001 0023d006 0010 0023d006 0100 00000610 0010 af21de2e 3e20ba8b eaf380e5 508163f1
+0 10 40000588 000 00000001 696cb162 696cb162
+0 10 40000214 001 00000011 298a2760 298a2760 acc55249 acc55249
+1 01 4000078c 000 00001010 df172882 0001 df172882 0000 df172882 0000 df172882 1000 2cbaf808 0001 2cbaf808 0000 2cbaf808 0100 2cbaf808 1000 0030e42d 0001 0030e42d 0000 0030e42d 0100 00000780 0020 4dbe1e4c b9c98f93 8b0bd6fc f1fa1151 70b68233 d6067e23 d428be6d 45ef80c1
+1 01 40000569 000 00000011 9e970a00 0010 9e970a00 0100 9e970a00 1000 000000b9 0001 00000560 0010 e658982c 2cbb8f8b 89ba1160 e06583be
+0 01 40000047 000 00000110 c4698d4d 27cd7493 27cd7493 27cd7493 27cd7493 6f603a14 6f603a14
+0 10 40000464 010 00000111 72cabd03 9bf1c56e 17ef0722 e3d0691e 29c7f273 9a4c5234 9221a23d 78505851
+0 01 4000006c 000 00000001 7146f358 7146f358
+0 10 40000498 010 00000011 a44672e8 dabac98e 203abccf a138c5bd
+1 01 400000d0 010 00001100 ea785921 1011 1758c899 0111 8fa49cd7 1111 10d71fa6 1100 7bb59a17 1110 2e7a437a 1101 19becb71 1101 b08baaa5 1101 e8a1531c 1111 bd92dd49 1011 80382a08 0010 5dd5315e 1101 32627f66 0111 000000d0 0040 34545fad 50691600 d2acc417 8fba2856 12b08c97 a59b3e74 06a5cc91 2fb11597 6811fc0e 08a6a8b9 e1b5388a ade213a8 30e4f0f7 fe2d9b7c 5c5fe9e6 2b3f2575
+0 01 40000652 001 00001111 13cf83fa 40cd6673 40cd6673 d7093266 d7093266 537c3f1e 537c3f1e a87fe7ff a87fe7ff b2b480ff b2b480ff 720ca1b9 720ca1b9 ddb97a43 ddb97a43 eac66e08
+0 10 40000496 000 00001111 a138c5bd a138c5bd a44672e8 a44672e8 a44672e8 a44672e8 dabac98e dabac98e dabac98e dabac98e 203abccf 203abccf 203abccf 203abccf a138c5bd a138c5bd
+0 01 40000744 001 00001011 c4d692a8 c4d692a8 b4ef1433 b4ef1433 ba743445 ba743445 82793f5c 82793f5c da5dca1a da5dca1a 3077722a 3077722a
+1 01 400004d4 010 00001101 74d9612f 1111 1a99e101 0111 8e2de701 1001 4ffd5964 1001 6b16c7f8 1111 9d66539e 1111 870171d7 0111 15718d36 1111 061cd1fa 0011 7a0d5e12 0111 d5761a7c 1111 42751975 0110 93e50006 1111 da9e3048 1011 000004d0 0040 a0912b94 70b91d89 c6fe3c5e 2056d985 1bd09409 d7720e0c 605a4f10 a4c8521f 5fa9b07d 68cbf220 69b5d94b 2b5a0e02 5c020397 d412053b 9cc2d45a 75cc282b
+1 01 40000489 000 00000010 5fe11100 0010 5fe11100 0100 5fe11100 1000 00000480 0010 85470463 64aba06c ae14eaed 60a23a0d
+0 10 40000522 001 00001111 a4b4b46a 2e52bbe2 2e52bbe2 4e316e62 4e316e62 5d45d510 5d45d510 eb857660 eb857660 8a73d459 8a73d459 abccba4e abccba4e 3b2c1057 3b2c1057 a4b4b46a
+0 01 40000308 010 00001000 389ef0c2 350dfbfa abccf0c4 71910f3b 75cc203d cbf4f01f e486eeb6 56596033 1b1427ae
+0 10 4000066e 000 00000011 ddb97a43 ddb97a43 ddb97a43 ddb97a43
+1 01 40000148 010 00001110 086d7548 1110 0f60f80e 0101 c210d952 1111 81374779 0100 d3392c9a 1111 7d8fce34 1110 91dfb60d 1110 7eed633d 1000 22d02992 1010 c040a0a0 1101 abe16e4d 1110 4a621c65 0111 d4428f23 1110 89fda27e 1111 09de4e2d 1011 00000140 0050 3666d1f1 9fc83eff 6ed4456e 5ffa09f3 7df66b97 571dde2b 24bdc912 432cf301 585fc83b 8eec3f91 4d0ae3fa 3440914a 308be6fa 5acd28e7 81a33f1e f671dba7 f77b8c41 65baea90 bcf03cf5 27914808
+0 01 40000472 000 00001000 e3d0691e e3d0691e 29c7f273 29c7f273 29c7f273 29c7f273 9a4c5234 9a4c5234 9a4c5234
+0 01 40000158 010 00001010 d3392c9a 7d8fce13 91dfb6f6 7ebf3f28 22992902 c0407aa0 abe16e15 00621c65 d4428f4e 89fda27e 09a34e2d
+1 01 4000023c 010 00001100 7ebd3bd7 1111 e1ec269e 1110 447ad7ab 0110 a0967813 1111 7f314c5b 1101 f910fba7 1110 cab57edb 1101 6d548647 0111 67ba159f 1101 09384c51 1111 c1b25a93 1111 ac9b0800 1111 7b4af238 1101 00000230 0040 50224773 e88bf225 26312e2b 28be2f73 009e3c12 83da3dcd 52baaa54 6404acd8 859c91dd 621e33d4 5f844b04 9bddf9df 05e6180d a2d6da96 0d802812 a7cd4473
+0 10 40000565 000 00000111 f6b1afeb f6b1afeb f6b1afeb 3ef31041 3ef31041 3ef31041 3ef31041 f6b1afeb
+0 01 40000198 000 00001000 15420b4b 15420b4b 15420b4b 15420b4b 30e6f850 30e6f850 30e6f850 30e6f850 94da2db5
+1 01 4000004c 010 00001101 7aeb6dbf 1110 24ceee4f 1011 222a50b9 1101 e4df0b4e 0001 4c5db37c 1111 d3084a4d 0011 367fe76f 1001 fe5b741e 0111 4c48675b 0101 b645f3e3 1111 78b4a5c8 0101 9094402e 1000 65d1f34e 1111 b208694c 1110 00000040 0050 6b4c041b 8528224a 9438a3ad c01726b3 3d9c57af ca0e70b3 c43f5c4a ea0cdf3e c200aa5f 6139d417 35b01701 26f19b38 3b686c89 d87e1569 0a3d03eb 112ae0c5 50e0c83e 037f4044 4f0a72f2 b60cc71a
+0 10 40000264 001 00000001 c1b25a93 c1b25a93
+1 01 40000110 001 00000111 fea6e095 0001 fea6e095 1100 7d2bd9dc 0011 7d2bd9dc 1100 9d11f3c2 0011 9d11f3c2 1100 f1502344 0011 f1502344 1100 00000110 0010 fbd2745c eb9bb644 de3b3e6f ff3bff9a
+0 10 40000794 010 00001111 4b30c02d aba04624 4eeeaa01 abcc9363 daeef1e9 abccf1ea daeef1eb 59ccf1ec e3afb16a abcc6794 88fb3fbe abccf1e0 daeef1e1 198471e2 df0e2782 2cbaf108
+1 01 40000498 010 00000000 d2171256 1111 00000490 0010 9dc63e75 0bc28893 b6c664e6 8f164fa4
+0 10 400006b2 000 00000011 abccf1ac abccf1ac abccf1ac abccf1ac
+1 01 40000438 010 00000011 194840b5 1111 c5f5d096 1011 b0b044db 0111 de4e6c29 1110 00000430 0020 bd5f8f7c 393b5b86 1997aade cc3cf695 9afacc43 774cb9fa e5fb54a0 88f2353a
+1 01 40000068 001 00001101 42b88d6e 0010 42b88d6e 1000 4effa4b5 0011 4effa4b5 0000 198e035d 0011 198e035d 1100 4984b66c 0001 4984b66c 1100 c59f4826 0011 c59f4826 1100 b08fa2ec 0001 b08fa2ec 1100 cf364a31 0011 cf364a31 1100 00000060 0030 c200aa5f 6139d417 69887314 a426eca4 b757afa5 d5864126 82927240 e56a6f2b bb103560 4b3a81ab 4f0a72f2 b60cc71a
+0 01 40000374 001 00000111 1a4a65d7 1a4a65d7 03376230 03376230 880d99cd 880d99cd c1d61f60 c1d61f60
+0 01 40000612 000 00000110 d5797cad d5797cad 1f620f46 1f620f46 1f620f46 1f620f46 6423d006
+0 01 40000148 010 00001011 086d7520 1660af0e c210d952 f3374146 d3392c9a 7d8fce13 91dfb6f6 7ebf3f28 22992902 c0407aa0 abe16e15 00621c65
+0 10 400006b8 000 00000011 abccf1ae abccf1ae abccf1ae abccf1ae
+1 01 40000368 010 00000100 9fc7dd93 1110 b013282d 1111 050c80ab 1111 8ccbc459 1111 199dafd8 1111 00000360 0020 13530b18 f76bae87 33057bbe d4dc3e3b 35ed7277 f0bb7afb 338e7a09 baf41f94
+1 01 4000065c 010 00001000 f3ce6bff 1011 56ee1a47 1111 2f3431c6 1111 83a62edb 1100 33058095 1111 e49e1152 0111 74f40ecc 1011 5b97a61c 1110 b59585fe 1110 00000650 0030 72bf54fe d90fb2c3 9df34983 e6f02e8d fc169735 f2594385 a1dc083a 1c7b00dd 1a3ff7a0 2f549480 de44e68e 7aaaaf4c
+0 10 400002c4 000 00001111 ab6683e5 ab6683e5 ab6683e5 ab6683e5 aa476095 aa476095 aa476095 aa476095 7e30ed38 7e30ed38 7e30ed38 7e30ed38 97e9d2af 97e9d2af 97e9d2af 97e9d2af
+1 01 4000066a 001 00000010 fe780000 1100 7b8914f2 0001 7b8914f2 1100 00000660 0010 fc169735 f2594385 ce68dbc4 4071145a
+0 10 400000fa 001 00000001 1b392a5e 1b392a5e
+1 01 4000012e 001 00001101 519b0000 1000 00e56d1c 0011 00e56d1c 1100 5266f554 0010 5266f554 1000 eeb391b3 0011 eeb391b3 1000 3b129894 0001 3b129894 0000 7b88505e 0011 7b88505e 0100 f2cf5782 0011 f2cf5782 0000 0000819c 0010 00000120 0030 a04eba85 72211519 cf1ca886 dac51ecc 814b71cd 5c42a029 8083e8b2 c1fae225 e43ff21c 63b0df9d e276520a b973c96d
+1 01 40000638 001 00001110 a312165f 0011 a312165f 0000 adcde3fa 0011 adcde3fa 1100 c960d54f 0011 c960d54f 1100 1d5039ef 0010 1d5039ef 0100 f95b9fb0 0010 f95b9fb0 1000 30827161 0011 30827161 1100 88706018 0011 88706018 1100 0000594c 0001 00000630 0030 f714be3b 77c631d8 8c45993f 2cf2fba6 d8894f23 a0c7a7c2 7a813e82 ce472188 8c42e5fa 0410a9bd 9df34983 e6f02e8d
+0 10 4000036f 000 00000001 b013282d b013282d
+1 01 40000313 000 00001100 72000000 1000 90b0489d 0001 90b0489d 0010 90b0489d 0000 90b0489d 1000 fee921cc 0000 fee921cc 0010 fee921cc 0000 fee921cc 0000 04442606 0001 04442606 0000 04442606 0000 04442606 1000 00000310 0010 cf331e01 6812aea1 b712e7b0 961736a5
+1 01 40000778 001 00000000 000052ed 0011 00000770 0010 692d3c73 dfda6e3b 4c166cf9 4bc5bae1
+0 10 40000080 001 00000001 cf364a31 cf364a31
+1 01 40000201 000 00001100 0dc11600 0000 0dc11600 0100 0dc11600 1000 eb28be0d 0000 eb28be0d 0010 eb28be0d 0100 eb28be0d 1000 f5c0714b 0001 f5c0714b 0000 f5c0714b 0100 f5c0714b 1000 0000dd1e 0001 0000dd1e 0010 00000200 0010 06bdeb1c e7948440 6e5be5e8 f2663ebd
+1 01 400001ea 000 00000100 fd040000 0100 fd040000 1000 009607ca 0001 009607ca 0010 009607ca 0100 000001e0 0010 97323f3e a063f206 8799af63 d6e30a0d
+0 01 40000618 000 00001101 6423d006 6423d006 6423d006 6423d006 19356b94 19356b94 19356b94 19356b94 e80de24e e80de24e e80de24e e80de24e 1bb6180a 1bb6180a
+0 10 400000ac 010 00000111 daeef02b abccf02c ece1cd2d abffa1d5 2e23e79f c695f005 b8cc4167 de2dfdfb
+1 01 4000001a 001 00000010 1cb30000 1000 6b7a9f63 0001 6b7a9f63 1000 00000010 0010 c684a8d1 a1200e45 4276ca33 b37fc2ff
+1 01 400007de 000 00001111 51fc0000 0000 51fc0000 1000 7a45be45 0000 7a45be45 0010 7a45be45 0000 7a45be45 1000 ac8e5edb 0001 ac8e5edb 0010 ac8e5edb 0100 ac8e5edb 1000 59c3f0ff 0000 59c3f0ff 0010 59c3f0ff 0000 59c3f0ff 1000 0000f227 0001 0000f227 0010 000007d0 0020 50b86ddc 6750d372 16fe1aa7 ef343d43 acafa34d f5c3e051 d1ce6acb dea7572a
+0 10 40000724 010 00001111 7d2e0a7e d63e57ca 4866a0e0 ba29c6cc a4ab925c a6951abc 9bec5b6f 344b8b43 101375e0 4c5606f2 dd51f1e5 ab9b0fb2 da58c605 abfda786 a393f1c7 673d78c8
+1 01 4000000c 010 00000011 973dcf48 0101 5e86a113 1100 26b27b98 0111 c8dd7d31 0111 00000000 0020 99a80dfc 8a5bf019 10c659df dc220742 84d5203a f191b363 6ad6f330 29fb97cf
+1 01 400000e8 001 00001101 3a2ad937 0011 3a2ad937 1100 b172da2d 0011 b172da2d 0100 f2744af5 0001 f2744af5 1100 445cea66 0011 445cea66 0100 38c13b62 0001 38c13b62 1100 5eccb03b 0010 5eccb03b 1000 39d4c64c 0001 39d4c64c 1100 000000e0 0030 12b08c97 a59b3e74 7c503b3a c65c1ca1 c1689c91 a1c09a32 9bb3d1a0 6d5e689d a2e079b8 d249b233 5c5fe9e6 2b3f2575
+1 01 40000455 000 00000011 309e3c00 0010 309e3c00 0000 309e3c00 0000 0000003a 0000 00000450 0010 32d34bb7 06716297 bcfc4e0e f37666a9
+0 01 4000018b 000 00001001 d60757d7 1ceef063 1ceef063 1ceef063 1ceef063 9c2af091 9c2af091 9c2af091 9c2af091 9950b704
+1 01 40000218 010 00001110 9e41964e 0011 bd824d20 1111 4efa376d 1111 a18be1d8 1111 6d8815cb 0111 ecf1a316 1111 84c59b68 0111 08fb90c2 0111 219a44ba 0101 760068bf 1111 b5bc77d7 0011 22f358bd 1110 e64029f0 0100 0c373766 1110 7464fe80 1010 00000210 0050 f2c459c5 c02f5f5e f0ed7f3d a62aa7c4 f8789c49 d1dc9037 3ab67592 3f8c9fb7 4c8936a9 68e29491 c64e9a86 4e1975d4 0ff5e122 a12db7dd 77a355b8 4898403e c49fe7d6 6eb725af 5f844b04 9bddf9df
+0 01 400006ec 010 00000110 daeef1bb 98ccf1bc e567a971 e5500c8e 0b110218 344b8b43 101375e0
+1 01 4000027e 001 00000011 76590000 1100 8ffb3183 0011 8ffb3183 0100 0000a384 0001 00000270 0020 568e0436 0f0bf70a 759bfa41 c9d68cd2 2a6d0d95 704f1465 06e2edfd be936f3f
+1 01 40000714 000 00000111 e325e25e 0001 e325e25e 0010 e325e25e 0000 e325e25e 1000 6c6bb93a 0001 6c6bb93a 0000 6c6bb93a 0100 6c6bb93a 1000 00000710 0010 00646a8c f083390d 8b7b291b a7260176
+1 01 40000308 001 00000000 00009df9 0011 00000300 0010 c7e71f4f de3b3058 670caef7 d996a9f8
+1 01 40000098 010 00001110 c580fc86 1110 b6286943 1111 99131774 1011 03ce999b 1011 dea0d432 0110 39204ef3 1011 c029c732 0010 a6b3a33e 1101 0e6a615c 0111 883fc458 0011 2ae5d223 1011 6830dcbb 0001 cb4c81cc 1111 b0ab6043 0111 e0a5837f 1111 00000090 0050 bf8130bb 0d88af2c 5562cab0 1bc42a23 4665770f d4bb3c8f b7ed910a 6650dae2 7028e6ce 49ec0437 950bdd2d f6c110a0 aa876bba 3b3743aa b705544d a716a2ec 8a7d4731 067e9469 d2acc417 8fba2856
+1 01 400006a0 001 00001100 d5fa6a89 0011 d5fa6a89 1100 bfb964df 0011 bfb964df 1100 76161f92 0011 76161f92 1000 7a51aa56 0011 7a51aa56 1100 925160f3 0011 925160f3 0100 d4a8063d 0011 d4a8063d 0100 0000b874 0011 000006a0 0020 7d942708 764634fc 57ee7484 632041f1 916e2620 3ff5b6e5 acf74818 8c68a2d4
+0 01 40000366 001 00001111 f41a548e 9fc7dd49 9fc7dd49 b013282d b013282d 050c80ab 050c80ab 8ccbc459 8ccbc459 199dafd8 199dafd8 880d99cd 880d99cd c1d61f60 c1d61f60 a2dbf233
+1 01 40000542 001 00001110 9a270000 1000 fb0bef4b 0011 fb0bef4b 1100 69718a61 0001 69718a61 1100 9d4f39dd 0011 9d4f39dd 1100 4a0d876b 0001 4a0d876b 1000 a79740f5 0011 a79740f5 1100 8dcadb99 0010 8dcadb99 1100 37222c24 0011 37222c24 1100 00000540 0020 f95c9908 db001841 654ad490 203a6406 dd8dba41 c206abd9 95e16136 4b5e23d3
+1 01 40000328 010 00000010 cc1a0887 1111 cdbdc881 1111 c2ce0d6a 1111 00000320 0020 8110eff3 4c67c9db f1a8e2f7 74ff8461 a394372e 6d1252a9 e80e29a1 b449764e
+0 01 400006c8 001 00000110 35298118 35298118 a3ee9595 a3ee9595 38e8d274 38e8d274 404c2bfd
+1 01 400006c4 010 00001111 08c536c6 0111 794e3d03 1100 7e83c5c8 1001 698b401c 1111 c2858122 1011 bb6ce3ce 0111 c82cb5df 0111 f60d77f3 0111 091dd7b4 1110 1e87a35f 1111 8e0ea913 1111 81b1f7c1 1011 2cbabbaf 1011 b4c39e42 1101 41034706 1111 51293bcd 1111 000006c0 0050 997e7f5e 528423fb e8eb390c 54225eaf db9c29d7 70593ce4 93326b3c 1558ed93 d77fc44e fab93c05 20bfaa6b 39610839 94cb3d5d 71a50d6e f3b00ca6 fe4b695e c8a647f7 3c28039e 6e294bd3 301290d2
+0 01 4000003a 001 00001011 9a234934 7263bb02 7263bb02 a4cc6a28 a4cc6a28 c4698d4d c4698d4d 27cd7493 27cd7493 7aeb6d14 7aeb6d14 247fee4f
+0 01 40000253 000 00000111 7410fea3 cab521db cab521db cab521db cab521db 83548647 83548647 83548647
+1 01 400004c2 001 00000001 4e870000 1100 00008c0c 0011 000004c0 0010 5632d01d ad004155 d5014e06 771ed1e3
+1 01 4000029c 001 00001000 dee7c66c 0011 dee7c66c 0100 3a91276c 0011 3a91276c 1000 88dba5fb 0011 88dba5fb 0100 bfc7325d 0011 bfc7325d 1100 0000e572 0011 00000290 0020 dd12c0e7 4ba6c3de 2c7e0d96 4dd97cb2 e82cebb5 964dd4a2 213b5891 271d5a70
+1 01 40000704 000 00000000 000000ff 0000 00000700 0010 c8a647f7 3c28039e 6e294bd3 301290d2
+1 01 40000336 000 00001110 fff70000 0000 fff70000 1000 e2645f84 0001 e2645f84 0000 e2645f84 0100 e2645f84 1000 b70ff5e6 0001 b70ff5e6 0010 b70ff5e6 0000 b70ff5e6 1000 ea2c8041 0001 ea2c8041 0010 ea2c8041 0000 ea2c8041 0000 000000f3 0001 00000330 0020 563cbe57 e63980c4 f6d60a6c 29e5eb4f 0d1b11f1 6040c246 15c6c92c 0b006f6d
+1 01 40000532 001 00001100 28f90000 1000 1e8d5348 0011 1e8d5348 1100 04f1b240 0011 04f1b240 1000 21450110 0011 21450110 1100 59cf7656 0001 59cf7656 1000 9a2fc218 0010 9a2fc218 1100 4d4e00e1 0010 4d4e00e1 1100 00000530 0020 cd02e917 882c8bb5 fb1afc84 d286e895 746e003d f8763ab4 c635b434 e5e198ab
+0 10 4000007f 000 00000011 b08ff3ec b08ff3ec b08ff3ec b08ff3ec
+0 01 40000534 001 00001010 1e8d5348 1e8d5348 04ccb240 04ccb240 21450110 21450110 59be5d56 59be5d56 9a2fc24b 9a2fc24b 4d4e0061
+0 10 400001b3 000 00000011 8a8de546 8a8de546 8a8de546 8a8de546
+0 10 4000056c 010 00000011 af64f4b9 3ef31041 f6b1afeb 9e970aeb
+1 01 40000384 010 00001111 35725a08 1111 10b9178b 0110 23dc3fc7 0111 546c2dd5 0101 5250d30e 1111 e00edae8 1110 b4fe95dd 1111 0be20c87 1111 8611d3be 1001 d0ccf5e6 1011 d92dbfd6 1110 69760a6c 0111 cb21823a 1011 4d7ce02b 0111 3dfa3211 1011 34a9e03b 1111 00000380 0050 94bcba9a f7e4525d aa883243 1d2eb848 9e340ebf 501f93da 61a271e4 404742fe 2a8f5129 2420b4aa 1793bd87 2ee9de74 6c139728 341bcc25 188f0684 e382cc57 d65d3ae5 cea4d4e8 90c4e9f1 8cef0cf7
+1 01 40000786 001 00000101 e5330000 1100 ac8b1d83 0011 ac8b1d83 1100 e0e3751c 0011 e0e3751c 1100 00001bba 0011 00000780 0020 ecc23193 c7deca1c 018d2d92 7715de9d b01c27ce e1b632a9 d428be6d 45ef80c1
+1 01 40000144 001 00001001 62186e39 0011 62186e39 1100 b3ab5e2e 0010 b3ab5e2e 1100 271e8f96 0001 271e8f96 1100 2f0e8407 0010 2f0e8407 1100 4512116f 0011 4512116f 1000 00000140 0020 8d2d3970 8e7c753e 0b738054 7cd5907a eb7b3b5f d01233f9 24bdc912 432cf301
+0 10 40000368 010 00000111 9fc7dd49 b013282d 050c80ab 8ccbc459 199dafd8 880d99cd 6a703b3b f41a548e
+1 01 400000fc 010 00001101 5df30fff 1101 e8e92154 1111 25297f6b 1011 1339a833 0101 3b1281a1 1111 585174ac 0101 200bdeb7 0111 efad506d 1111 4a714ce1 0111 6556012f 1011 c08443df 1101 15ac3770 1111 51b1f1e6 1111 b235cf50 0111 000000f0 0050 c1689c91 a1c09a32 ec53ebed 5119083f f6fd602f 125e9d29 98c392de dfa22958 6c873980 b7dcd90d ada5fe23 3cf085ea bfae5cde ec9dc298 0a37ba88 94bd3315 e0c4046f 50758141 8083e8b2 c1fae225
+0 01 40000704 010 00000011 101375e0 4c5606f2 dd51f1e5 ab9b0fb2
+0 10 40000568 010 00000001 9e970aeb af64f4b9
+1 01 40000488 001 00001011 b3a94ce0 0011 b3a94ce0 1100 f6cb8097 0011 f6cb8097 1100 4a5de61c 0011 4a5de61c 0100 2f4654d6 0010 2f4654d6 1100 a69994de 0010 a69994de 0100 aa078541 0011 aa078541 1000 00000480 0020 85470463 64aba06c 7f0ea531 8e8803f7 c9af1c24 da7f6b23 ea574cf0 9ee87093
+0 01 40000490 000 00001001 205de61c 205de61c 205de61c 205de61c 2f4654bd 2f4654bd 2f4654bd 2f4654bd d2999456 d2999456
+1 01 400007da 000 00000000 00250000 0000 000007d0 0010 50b86ddc 6750d372 16fe1aa7 ef343d43
+1 01 400005a0 001 00000110 df77025e 0011 df77025e 1100 cc263020 0011 cc263020 0100 e8d034c0 0010 e8d034c0 0100 00007f9a 0011 000005a0 0010 14e6f806 c60cc83f e5b01d1c 76143ed8
+0 01 4000066c 001 00000101 7b8980f2 7b8980f2 ea9e1152 ea9e1152 74450ecc 74450ecc
+1 01 400005c8 001 00001000 0675be99 0011 0675be99 1100 ff30c1ce 0011 ff30c1ce 1100 6053477c 0010 6053477c 1100 59e013e3 0000 59e013e3 1100 0000839b 0010 000005c0 0020 cb468b7a 41312d26 7ade1894 d7494c63 1e2dc0f9 de9ca1c2 a4eb7183 eb529546
+0 10 40000371 000 00001111 050c80ab 050c80ab 050c80ab 8ccbc459 8ccbc459 8ccbc459 8ccbc459 199dafd8 199dafd8 199dafd8 199dafd8 880d99cd 880d99cd 880d99cd 880d99cd 050c80ab
+1 01 40000350 010 00001000 b32a5fc7 1101 d07109c8 1111 3a0d7196 0010 8b5963b0 1010 dccd7d2b 1010 bc7f619d 1111 36226f86 1111 908f6de8 1011 99b2f8d3 1111 00000350 0030 36eb78ce 8c74be95 cce2842d 79dcdcb9 41c5a7da 31d9acf5 54800849 33bf5e19 d2036a20 d6d04eb5 338e7a09 baf41f94
+1 01 40000328 010 00001101 02eece6d 1101 0646b81e 1101 224104a5 1011 7507e9cc 1111 9dacc421 1111 3679bd3b 0110 308ca1a4 1111 ab4c36ca 1010 ea458efa 1111 3b39f813 1100 fa4ed391 1011 5094329e 0011 86d4db39 1110 e61c4fe8 0111 00000320 0040 8110eff3 4c67c9db 4a510200 bfe7911a 4c5323a0 ebf61494 21501b00 1d2b0688 3877a8e5 7fd247f0 34485f98 a0601c8f c3203068 e81df4f8 dc603030 1b2f281c
+1 01 400007ea 000 00001011 01c10000 0000 01c10000 1000 57d94b71 0001 57d94b71 0010 57d94b71 0000 57d94b71 1000 5522caa2 0000 5522caa2 0000 5522caa2 0100 5522caa2 1000 0000fc9f 0001 0000fc9f 0010 000007e0 0020 acafa34d f5c3e051 24711ddc 2170f086 1d7ea2f6 f62d9e00 c61cda7e ebb80828
+0 10 40000762 001 00000001 4b43e418 4b43e418
+0 01 400002f9 000 00000100 7418998f 7418998f 7418998f d99e0b43 d99e0b43
+1 01 40000462 001 00000101 5e670000 0100 41eb1d42 0011 41eb1d42 1100 7eb71ed8 0011 7eb71ed8 0100 0000af5a 0011 00000460 0010 4471024d ec581af1 ecc46868 fc72f043
+0 01 40000087 000 00000100 2f1d32b8 2af53a4d 2af53a4d 2af53a4d 2af53a4d
+0 01 4000030c 001 00001111 350dfbfa 350dfbfa 72ccf0c4 72ccf0c4 9091489d 9091489d 75cc213d 75cc213d 04f4f006 04f4f006 e486eeb6 e486eeb6 56596033 56596033 02ee086d 02ee086d
+0 01 40000292 001 00000110 c7948a63 3ddc1a40 3ddc1a40 79962ef6 79962ef6 5fe7c66c 5fe7c66c
+0 10 40000281 000 00000111 3cfb3183 3cfb3183 3cfb3183 7cb32f84 7cb32f84 7cb32f84 7cb32f84 3cfb3183
+0 10 4000051f 000 00000111 38e4c8d9 febe29b2 febe29b2 febe29b2 febe29b2 38e4c8d9 38e4c8d9 38e4c8d9
+0 10 4000075d 000 00000001 ce62c83d ce62c83d
+1 01 400001e8 010 00001000 04a97c79 1000 87e9dbdb 1010 754c4174 1100 60f9d980 1101 bc8a19c7 0011 6cd93ae6 1100 81d90636 1000 4da1e23b 1110 a7014fe6 1011 000001e0 0030 97323f3e a063f206 82576078 b9ee8797 aa615bce bd447157 13dda998 9c279d61 116af327 e84efc06 c417b89f 83d2d0c8
+0 10 4000065a 001 00000001 d7093266 d7093266
+1 01 400003b8 010 00001000 d490a17f 0111 a556493d 0011 59ed0c24 0101 b8c6041e 1110 562a70bf 0111 972c9b31 1110 4f60387f 1100 e4560734 1111 cea41011 1111 000003b0 0030 6c139728 341bcc25 0bcd8dac 827bf668 acc425f8 240d4836 c20475c3 55fa29b6 2178077b b99a6430 f61e3c5e 6d64eb19
+1 01 40000438 010 00000101 4c8d15af 1100 6da0d661 1111 09caea14 0110 bd997835 0111 9b7dd2a6 1101 a09f5643 1110 00000430 0020 bd5f8f7c 393b5b86 2ccb8807 dfe51d33 0a0ed9a4 9befa4da 50f9f9e5 49675c4f
+1 01 400001d8 001 00001010 227e123d 0011 227e123d 0100 60c6bd5d 0011 60c6bd5d 1100 ce89b353 0010 ce89b353 1100 22a09f25 0011 22a09f25 0000 c5b82e55 0010 c5b82e55 1100 0000c8e4 0000 000001d0 0020 8551ecd2 cc0b6091 0d7e9c18 c37abdb4 3f9678f8 75de2eeb 3a1c052c 79ff5348
+0 10 400006cb 000 00000111 794e8118 7eee95c8 7eee95c8 7eee95c8 7eee95c8 794e8118 794e8118 794e8118
+0 01 40000070 001 00000100 198e035d 198e035d 4984e96c 4984e96c c59f4826
+1 01 40000437 000 00000100 35000000 0000 bb8db815 0001 bb8db815 0010 bb8db815 0100 bb8db815 1000 00000430 0010 bd5f8f7c 393b5b86 581ea193 455e7cb5
+1 01 400006da 000 00000111 89f90000 0100 89f90000 0000 bc6880f0 0001 bc6880f0 0010 bc6880f0 0100 bc6880f0 1000 00004d13 0000 00004d13 0010 000006d0 0020 db9c29d7 70593ce4 f784cef6 7bd46424 9fb8b7b4 665b6903 20bfaa6b 39610839
+0 01 40000420 001 00001111 28e45cd8 28e45cd8 4ff6ec60 4ff6ec60 31cac515 31cac515 151b3658 151b3658 7dfd3331 7dfd3331 b8e8f10d b8e8f10d bb8db815 bb8db815 6da0d661 6da0d661
+1 01 40000351 000 00001110 f11e9500 0010 f11e9500 0100 f11e9500 1000 41efd273 0001 41efd273 0010 41efd273 0100 41efd273 1000 57032efa 0000 57032efa 0000 57032efa 0100 57032efa 1000 f35ace53 0001 f35ace53 0010 f35ace53 0000 f35ace53 1000 00000350 0010 574d1f60 7a0952e5 6030eaa2 d52e7a41
+1 01 40000348 010 00001101 110aa3f7 0110 4995d4df 1101 5c0fc1b5 1011 c71cfa6b 1111 96d29fdc 1111 0479e895 0111 f08a9455 1110 20e88dd0 1111 26159f3d 1111 76f47243 1100 7f21653d 0011 e6e78c40 0111 d694f456 1111 a268b941 1111 00000340 0040 3877a8e5 7fd247f0 9283343e 152dfe59 d5dc34a4 89434c2d a64c85f5 a9ca96b0 a5df9bb6 ede00aeb f65db2a6 3e74693a 4ab1894c cbbeb45d 36a5f5c5 cf6f1046
+0 01 40000560 010 00000101 3ef31041 f6b1afeb 9e970aeb af64f4b9 134ae9b4 3c1e70a6
+1 01 400001a6 001 00001111 f97d0000 0100 0869dde8 0001 0869dde8 1100 262f833e 0001 262f833e 0100 d5772f73 0011 d5772f73 0100 7080324e 0010 7080324e 1100 4137577e 0000 4137577e 1000 bada776d 0000 bada776d 1100 4c84c264 0010 4c84c264 1100 0000c37b 0011 000001a0 0030 e187160e 8e9cab08 9324ae36 d69fb9ec 4624b424 88d4998e 6ab2a760 020edbe4 757e06c5 2b17d390 38cd0067 854943d0
+0 10 400000fc 010 00000111 5df3b0ff 7bb59a86 2e7a217a 3a2ad937 b072da2d f27453f5 bd5cea66 38c12a62
+0 10 400003ec 000 00000001 daeef0fb daeef0fb
+1 01 40000036 000 00000100 bd380000 0000 bd380000 1000 001d53bf 0001 001d53bf 0010 001d53bf 0100 00000030 0010 2d7dbe24 49786860 0f34e9aa 4b3b2cd2
+1 01 400003ac 010 00001110 a38a9a2d 0110 d6763b8d 1111 043c6ffa 0011 6437cfce 1111 a39b7109 0111 68767649 0110 a1696ac7 1111 fe4cf0c1 1110 b37810d2 1110 9c89f043 1101 e9faddd1 0111 75adc202 0111 7fecd3b8 1110 b4b8d000 1111 6894b0ba 1101 000003a0 0050 2a8f5129 2420b4aa 32c1d6c0 f3cb63c9 d9b5fbe3 7a8713ef 3ad04a70 3ad640a1 e8c4f84b 1b43e275 4b245c28 a764aa6e 095af96d 9aacfdca 3ee7ff59 8b233995 148c1bc9 e0be17a2 49734691 8999c9e8
+1 01 40000373 000 00000010 69000000 1000 0000adf7 0001 0000adf7 0010 00000370 0010 cdbb8be7 61a729e9 36a5f5c5 cf6f1046
+1 01 40000746 001 00001011 4ef40000 1100 0bcdb614 0011 0bcdb614 1100 67a5dd15 0001 67a5dd15 0000 a1c96eaa 0011 a1c96eaa 1100 30b44917 0000 30b44917 0100 03f103ad 0011 03f103ad 1100 000093d7 0001 00000740 0020 739b4448 584c0da5 f4abf0a6 abf61e3d 1ea04c66 70d7db37 338ab4b4 56a23ca3
+0 01 400007c8 001 00000011 f9ea02f2 f9ea02f2 67b04318 67b04318
+1 01 400004ba 001 00001111 c7dd0000 1100 55add254 0001 55add254 0100 98143c79 0011 98143c79 1100 73ad0b5c 0011 73ad0b5c 1000 4b32b85e 0011 4b32b85e 1100 ff1b25dd 0010 ff1b25dd 1100 2db4f934 0011 2db4f934 0100 074abce4 0011 074abce4 1100 000076d7 0011 000004b0 0030 229d7848 d3e92afc 5493d942 98363e99 5a6527eb cb394744 17947b42 cd82a99e 0f69e9e2 7f339a14 539eec9f d995691f
+1 01 400006bd 000 00000010 7762c200 0000 7762c200 0000 7762c200 1000 000006b0 0010 916e2620 3ff5b6e5 347991b4 152a5df0
+0 10 4000019e 001 00000011 30e6f850 15420b4b 15420b4b 30e6f850
+1 01 400006dc 000 00000100 aedef148 0001 aedef148 0000 aedef148 0000 aedef148 1000 0000004a 0000 000006d0 0020 db9c29d7 70593ce4 8940679c 181414e4 9fb8b7b4 665b6903 20bfaa6b 39610839
+1 01 40000277 000 00000101 07000000 1000 a4d92676 0001 a4d92676 0000 a4d92676 0100 a4d92676 1000 0000001b 0001 00000270 0010 48d5d4ce 31d7f719 60a8917e 820ef14e
+1 01 400002f8 010 00001000 047e0d93 0011 5c1dbdbe 1101 c6eefdea 1010 45592861 1111 ea43fb67 0111 2ef883eb 1111 5827ae55 0111 d28247d8 1111 879eaa47 1111 000002f0 0030 98b31a16 d3232bac fa90d1ea b65b7d59 70c3f46b 55c39847 99c3944a 5e112d47 7453edfd 1f7be093 d58b1254 52679357
+0 01 400004da 000 00001100 ab9976d7 ab9976d7 8e209a01 8e209a01 8e209a01 8e209a01 4f4a3d64 4f4a3d64 4f4a3d64 4f4a3d64 6b16c7f8 6b16c7f8 6b16c7f8
+1 01 400004c8 010 00000000 b8db9a40 1001 000004c0 0010 5a6527eb cb394744 0b9322fe 2bfada4b
+0 10 40000724 010 00000011 7d2e0a7e d63e57ca 4866a0e0 673d78c8
+1 01 4000035f 000 00001100 9b000000 1000 cd842d61 0001 cd842d61 0010 cd842d61 0000 cd842d61 1000 136ad3fd 0001 136ad3fd 0010 136ad3fd 0100 136ad3fd 0000 afc7e97e 0000 afc7e97e 0010 afc7e97e 0100 afc7e97e 1000 00000350 0020 d5dc34a4 89434c2d 052c08b5 d8bc4484 7e712942 f4ee2541 b80ef014 14b18d95
+1 01 4000012c 010 00001001 08a406c1 1001 58a7887d 0111 427e8092 1101 dd4c6f53 1111 16d75734 1001 702d5e26 1111 70f596bd 1111 48b0e2f2 1110 d5d320f8 1111 9727b67f 1111 00000120 0040 bfae5cde ec9dc298 c2e602bc a33acbe4 aed3f0c5 17852b65 cb1fbaf4 99d5e77f 008d2df0 4ef8aafc 7bd80854 987d280e d1f9e66b 5b3d7b78 24bdc912 432cf301
+0 01 40000614 010 00001000 1f620f46 6423d006 19356b94 e80de24e 1bb6180a ea144ae2 6f39ec1f 5b649648 e4c45462
+0 01 400005df 000 00001100 d94bef57 f9825990 f9825990 f9825990 f9825990 637fa7b1 637fa7b1 637fa7b1 637fa7b1 15162c93 15162c93 15162c93 15162c93
+1 01 400002a6 001 00000001 fc620000 0100 00001067 0011 000002a0 0010 e7c57f3c 882fd7ad af9dc693 2cd87794
+0 10 400000f8 010 00000001 38c12a62 5df3b0ff
+1 01 40000456 000 00000001 9f370000 0100 9f370000 1000 00000450 0010 9f230b37 f179dfd0 bcfc4e0e f37666a9
+1 01 40000034 010 00001101 8b93a87a 1101 a32fe356 0111 380cb67c 1101 e9d1db71 1111 2c415d2b 1110 0c20fc62 1111 5c0e576f 1000 261d1351 1111 f3b783c9 1111 b7eedb92 1011 039d3102 1000 0a14d45c 1101 0d577eac 0110 4cdaa18c 1111 00000030 0040 690d0579 b0c0956a 24c53757 d4b90ed6 2c6c0037 0ef03daf f44e8b61 d04443fe e1a104f8 f3113d9e 6638ae13 67bd2ed1 85564075 dff82466 e7a77a31 ce5cf8cd
+0 10 40000590 010 00000111 ab2a094e 7b16dbde f8cc7f66 daa88516 452e29dc 9171f1c5 696cb162 7aee3363
+0 01 400003da 001 00001000 ceadc202 7fecd3d8 7fecd3d8 b4b8d000 b4b8d000 689415ba 689415ba abccf5aa abccf5aa
+1 01 4000015a 001 00001111 9f7b0000 1100 bfd69a34 0010 bfd69a34 1000 dbafd9bf 0000 dbafd9bf 1100 b89f8bb3 0011 b89f8bb3 1000 826d3602 0011 826d3602 1100 d8f734fb 0000 d8f734fb 1100 3ec25cbd 0011 3ec25cbd 1100 77d204dd 0011 77d204dd 0100 0000f417 0001 00000150 0030 d1f9e66b 5b3d7b78 a94da5b8 96248dac 9196d442 c4915b50 ae10d7f4 d3ec0f3f c48f34cb 84fa0dbc c4b4c7d6 2cbab8cb
+0 10 400000ea 000 00000011 3a2ad937 3a2ad937 3a2ad937 3a2ad937
+1 01 40000368 010 00001011 08c2e5f4 1111 ea38e1a8 1111 1073440e 0110 51c792ca 1111 51079b65 1011 a58d352d 1110 a918e7c9 1111 425d6e74 1111 84a28f8b 1101 bc1b629b 1111 e9ac46cf 1011 566a8a58 1011 00000360 0040 7e712942 f4ee2541 20e97241 c6b0152c 756665f8 e7b58fd6 4d55e44f ed93609e b7571cfa 6c78050d fd0749fd 3b5a850c bd4feb06 a4caa57a 61a271e4 404742fe
+0 01 40000156 001 00000110 4537116f 9f7b2c9a 9f7b2c9a bf8f9a13 bf8f9a13 dbafb6f6 dbafb6f6
+0 10 400000f6 001 00000111 bd5cea66 38c12a62 38c12a62 5df3b0ff 5df3b0ff f27453f5 f27453f5 bd5cea66
+0 10 400005e8 001 00000001 15162c93 15162c93
+0 01 40000634 010 00001110 e4c45462 1e32165f adcde3fa c960d54f 9250396f f90f9f30 30827161 88706018 40cd664c d7093266 f37c6bff 56ee1a47 2f3431c6 fe78a1b9 7b8980f2
+1 01 400004ce 001 00001010 242b0000 0100 f3cbd043 0001 f3cbd043 1100 5958bd92 0011 5958bd92 1000 be385b34 0011 be385b34 0100 5c0f9b7e 0011 5c0f9b7e 1100 cb9009ff 0011 cb9009ff 1000 000004c0 0030 5a6527eb cb394744 f032a1f9 9e9ef588 b92d7247 5c8cdfdf 74c67dcc 9d26bb0e fa5b68ea f37ec33b 605a4f10 a4c8521f
+0 01 40000007 000 00000001 190e7d9f d97766aa
+0 01 400003aa 000 00001110 d01cf5e6 d01cf5e6 d98a9a5e d98a9a5e d98a9a5e d98a9a5e d6763b8d d6763b8d d6763b8d d6763b8d cbd86ffa cbd86ffa cbd86ffa cbd86ffa 6437cfce
+0 01 40000738 010 00000010 a6951abc 9bec5b6f 98e59a13
+1 01 400000fe 001 00001000 e6b10000 0100 501fbb40 0011 501fbb40 1000 068e1625 0010 068e1625 0100 053e5db2 0010 053e5db2 1100 256a5c22 0011 256a5c22 1100 000000f0 0020 c1689c91 a1c09a32 d85eac10 ae8cdcfd 44c346eb ba2a93f6 9b813de8 01c8da79
+0 10 40000446 001 00000001 de997835 de997835
+1 01 40000684 010 00001010 df7eca79 1111 95e05a41 1011 59eaf645 1111 b367c913 1001 2471361f 1111 8b03ea6c 1001 c14ffabe 1110 b27d59ff 1101 aae5a6eb 1111 d15d44ed 0111 f9a962dd 1010 00000680 0030 b1a74528 c4c475bd 74412c7f e98f38b6 993aba64 5f52fead 96eb4210 efcff11b d2f2363e 88731c8e 26cd19ca 3e3b8a84
+0 10 400001a4 010 00000111 e57d9e93 08694ce8 362f1b3e 8a772f73 70803246 412c936e bada3442 94da2db5
+0 10 40000395 000 00000011 56508a58 56508a58 56508a58 56508a58
+0 10 40000528 010 00000111 4e316e62 5d45d510 28857660 1e8d5348 04ccb240 21450110 a4b4b46a 2e52bbe2
+0 10 400006ae 000 00001111 f9516256 f9516256 b27d6aff b27d6aff b27d6aff b27d6aff aae5a6eb aae5a6eb aae5a6eb aae5a6eb 765d44ed 765d44ed 765d44ed 765d44ed f9516256 f9516256
+0 10 4000039a 001 00001111 e00eda35 b4fe95dd b4fe95dd a918e7c9 a918e7c9 425d6e74 425d6e74 84a2178b 84a2178b bc1b629b bc1b629b e96c46cf e96c46cf 56508a58 56508a58 e00eda35
+0 01 4000025c 001 00000010 67ba209f 67ba209f 09384c51
+0 01 400003d6 001 00001000 e4faddd1 ceadc202 ceadc202 7fecd3d8 7fecd3d8 b4b8d000 b4b8d000 689415ba 689415ba
+0 01 40000758 000 00000111 03f103ad 03f103ad 03f103ad 03f103ad ce62c8d7 ce62c8d7 ce62c8d7 ce62c8d7
+0 01 40000208 010 00001101 a7c04fe6 d399dd1e acc55249 298a2760 f2a1964e bd824d20 4efa376d a18be1d8 2b8815cb ecf1a316 fcc59b68 0cfb90c2 ab9a45ba 760068bf
+0 10 40000234 001 00000001 0cfb90c2 0cfb90c2
+0 01 40000120 001 00000001 65cc012f 65cc012f
+1 01 4000033a 001 00001001 94990000 1100 6e394bcb 0011 6e394bcb 1000 31885d57 0011 31885d57 1100 b6c60c15 0011 b6c60c15 0100 aead2f0b 0011 aead2f0b 1100 0000dfb7 0011 00000330 0020 4c5323a0 ebf61494 0d5c949b 9f7408bf 6add7e33 bf889225 a9913cdc 8c99de5c
+1 01 400001d5 000 00001000 641cdf00 0000 641cdf00 0100 641cdf00 1000 beab2816 0001 beab2816 0010 beab2816 0000 beab2816 0000 00009030 0001 00009030 0010 000001d0 0010 92f8e915 05874cdd 00f72123 9b024f7b
+0 01 400005f3 000 00001100 0646f1d5 124da54b 124da54b 124da54b 124da54b eeaf2583 eeaf2583 eeaf2583 eeaf2583 7139e256 7139e256 7139e256 7139e256
+1 01 40000388 010 00000101 49321e94 1111 94a143be 0111 98a34ecf 1110 e45aefc0 1111 77137bfb 1101 c06e3611 1111 00000380 0020 b7571cfa 6c78050d 82e2870f 2aebf5d5 90a71c27 675ded4a 56c11102 60e38985
+1 01 40000736 001 00000110 46e60000 1000 731985ac 0010 731985ac 1100 42faff6f 0001 42faff6f 0100 e853eb30 0001 e853eb30 1100 00000730 0020 3cd81df0 dd229466 dd8b85c9 58ba3e39 ad94d4d8 2f16d37a f4abf0a6 abf61e3d
+0 10 4000021a 000 00001111 f2a1964e f2a1964e bd824d20 bd824d20 bd824d20 bd824d20 acc55249 acc55249 acc55249 acc55249 298a2760 298a2760 298a2760 298a2760 f2a1964e f2a1964e
+1 01 40000458 010 00000001 15725855 1111 21c6463c 1111 00000450 0010 9f230b37 f179dfd0 ac49a415 fef7e7f6
+1 01 40000002 001 00001000 4ab80000 1000 e4875b60 0001 e4875b60 1000 942c642b 0011 942c642b 0100 5d067d82 0010 5d067d82 0000 862c57df 0011 862c57df 1100 00000000 0020 154e0d8d 185751d9 66009fea 8aa0a3a7 d0510ff3 c63b3179 6ad6f330 29fb97cf
+1 01 40000398 001 00000110 f69b3b17 0010 f69b3b17 1100 efd71a04 0011 efd71a04 1100 b9396124 0011 b9396124 1000 000042af 0010 00000390 0020 90a71c27 675ded4a 49b375d1 67411ca5 3ef1d30d 6ea4e7f8 32c1d6c0 f3cb63c9
+0 10 4000028c 010 00000111 fc70a650 c7948a63 3ddc1a40 79962ef6 5fe7c66c 3cfb3183 7cb32f84 1c30c147
+1 01 400005de 001 00000111 a5780000 0000 f43c5d16 0011 f43c5d16 1100 6dadb208 0011 6dadb208 1100 7abc4693 0011 7abc4693 0100 00005575 0011 000005d0 0020 1e2dc0f9 de9ca1c2 a4eb7183 eb529546 9b17ce84 846641c4 13129283 29b899b7
+0 01 4000040a 001 00001101 704411ac 5c81e79f 5c81e79f b5f57280 b5f57280 81bd0639 81bd0639 af83843c af83843c be0af154 be0af154 28e45cd8 28e45cd8 4ff6ec60
+1 01 40000554 010 00001010 f47d2b21 0101 f8b288e1 1001 9ec41872 0111 494f3376 1001 3f0b73b2 1111 b810a616 1111 85bdc632 1011 547ebef0 1011 427ab9c8 1111 d249acb3 1110 a1bc704c 1111 00000550 0030 1eac3f53 0e08aec0 31b39496 67bd49e5 0de17baf b0ba7af5 64a70f0a 3b566435 45669851 bb8ca702 b71a3258 5bf1374d
+1 01 4000022f 000 00001010 25000000 1000 71692ac4 0001 71692ac4 0010 71692ac4 0000 71692ac4 1000 aa0be58b 0001 aa0be58b 0010 aa0be58b 0000 aa0be58b 1000 0000f147 0001 0000f147 0010 00000220 0020 f8789c49 d1dc9037 9c633bd2 c112919f 23bf32cf fe5a801c 59cf9491 3f09c92d
+0 10 400006c8 010 00000011 794e8118 7eee95c8 c20a2ca6 79c536c6
+0 10 400006e0 001 00000001 a10d4df3 a10d4df3
+1 01 4000063c 010 00001101 ba52e1b0 1111 bdd2c234 0110 ad47722e 0111 41f9b916 0111 295a846d 0111 7cce52be 0111 28c57f1b 1110 64f942d6 1111 d9c70e11 0101 ef1c948e 0110 45e722d8 1111 bf6fe6aa 1111 0cd5cae6 1110 735a5f66 0111 00000630 0050 f714be3b 77c631d8 840ed4d8 f87622d3 8fc6fad5 e36fb7ac 529013c6 231cf185 a26a325b e9250ed8 25b18863 424d06e5 ae03a48f 2ff838ba f7fef21b d86e95b5 19bb0672 d6d59e45 de44e68e 7aaaaf4c
+1 01 400001f1 000 00000111 98ed2f00 0010 98ed2f00 0100 98ed2f00 1000 d9e3b081 0001 d9e3b081 0010 d9e3b081 0000 d9e3b081 1000 000000e3 0001 000001f0 0010 cb3246d0 c4499c76 3218654b 3c3fa7af
+0 10 4000078c 001 00000011 e0e3751c e0e3751c ac8b1d83 ac8b1d83
+0 01 400004c2 000 00001110 98143c79 98143c79 73830b5c 73830b5c 73830b5c 73830b5c b832b840 b832b840 b832b840 b832b840 ff2b25f6 ff2b25f6 ff2b25f6 ff2b25f6 f3cbf943
+1 01 4000057c 000 00000011 eff5e2f7 0001 eff5e2f7 0010 eff5e2f7 0100 eff5e2f7 0000 00000570 0010 45669851 bb8ca702 9c10e2c5 9496f50c
+0 10 40000114 010 00000111 7d0bdeb7 efad506d f1714ce1 50e9bb40 258e166b 053e5d33 256a5c22 fe51aaac
+1 01 4000060a 001 00000011 c7600000 1100 208dfddd 0001 208dfddd 1100 0000fdd1 0001 00000600 0020 22fc3040 d51b84fa 9f9e2411 30cb50c1 b06b7a5f 2af6560c eaf380e5 508163f1
+0 10 400007c6 000 00000001 ada20a69 ada20a69
+1 01 4000060a 000 00000011 95870000 0100 95870000 0000 0000f9ce 0001 0000f9ce 0010 00000600 0010 22fc3040 d51b84fa f6c2e053 f24ae117
+0 01 400007a4 010 00000111 daeef1e9 abccf1ea daeef1eb 59ccf1ec e3afb16a abcc6794 88fb3fbe ab0eaf7b
+0 10 400000ec 001 00000111 b072da2d b072da2d 7bb59a86 7bb59a86 2e7a217a 2e7a217a 3a2ad937 3a2ad937
+1 01 40000628 001 00001100 1842d4a0 0010 1842d4a0 0100 85fec6db 0011 85fec6db 1100 02f103c8 0000 02f103c8 1100 f9779854 0011 f9779854 1100 e74b6dec 0011 e74b6dec 1000 0cbc9608 0011 0cbc9608 1000 000061a8 0011 00000620 0030 f6c32efd a1aea27d aa95f5c0 081ada6e 37ca86a6 ba27539a ba7fbb00 b86ad085 30c2374a 57e88050 529013c6 231cf185
+0 10 40000460 000 00000011 78675851 78675851 78675851 78675851
+0 01 40000365 000 00000101 206ad3fd 206ad3fd 206ad3fd 08c2e5f4 08c2e5f4 08c2e5f4
+0 01 400004d6 000 00000100 594abd92 594abd92 ab385b34 ab385b34 ab385b34
+0 10 400000dd 000 00000111 10d76219 10d76219 10d76219 8fa49cd7 8fa49cd7 8fa49cd7 8fa49cd7 10d76219
+1 01 40000454 010 00000111 51aac7f0 1111 1fa4c02b 1001 1614b2d1 1111 98fc39c3 1101 b91ced8a 1110 3b40f322 1111 8acbd9c7 1110 92e16387 1111 00000450 0030 24f3694b 73dc1a08 d9d52f75 f6f29e94 95551bdd bc964d88 ca1c369b 1ee37c4c 766921e4 fb18a026 a7a14f72 2ae21235
+0 10 400007b0 000 00001111 59ccf1ec 59ccf1ec 59ccf1ec 59ccf1ec e3afb16a e3afb16a e3afb16a e3afb16a abcc6794 abcc6794 abcc6794 abcc6794 88fb3fbe 88fb3fbe 88fb3fbe 88fb3fbe
+0 01 4000073c 010 00001000 9bfa5b6f e8539a30 4ef492a8 0bcdb614 ba743415 a1c96eaa dab4ca1a 03f103ad ce62c8d7
+1 01 40000078 010 00000011 eff076c3 1110 dd0573ff 1111 3366dac2 1100 8c86c5a1 0011 00000070 0020 b757afa5 d5864126 9cc1b988 ab709c1c 3c08849d b132a9eb 4f0a72f2 b60cc71a
+1 01 400006aa 000 00000111 59a10000 0100 59a10000 1000 0d503660 0001 0d503660 0010 0d503660 0100 0d503660 1000 00004bb0 0001 00004bb0 0000 000006a0 0020 d2f2363e 88731c8e f32d6e16 62f68aac d842c58f 02c85b48 347991b4 152a5df0
+1 01 40000248 010 00000101 247f606a 1111 b800c9cc 1010 d9401805 1111 733f6d03 1111 33363d71 1110 f158b89e 0111 00000240 0020 0ff5e122 a12db7dd 968ca98b 7522754b a8b89414 26356da7 36099883 dbfd0aa7
+1 01 40000626 000 00000111 c4da0000 0100 c4da0000 0000 c0083f7b 0001 c0083f7b 0010 c0083f7b 0100 c0083f7b 0000 0000dbeb 0001 0000dbeb 0010 00000620 0010 e3c5b499 2b02a8cb 11ca86f3 020ebabb
+0 10 40000110 010 00000001 fe51aaac 7d0bdeb7
+0 01 40000510 010 00001000 47bc204e d5425bc3 febe29b2 38e4c8d9 a4b4b46a 2e52bbe2 4e316e62 5d45d510 28857660
+1 01 400001ec 010 00001100 7ff3c86d 0011 d88e9190 0101 39f9d7fb 1011 5517eb82 1110 137dd901 0111 8664b478 0011 c4f6d449 1100 f92e343e 1111 2f917b09 1111 68c98b92 1010 688ee46a 0010 23104f0b 1111 ab96063a 1111 000001e0 0040 3f9678f8 75de2eeb 0c9e91cf 29574a11 9cd6bf8a 70b2b1ed 580c881d a72321d4 2dbf2cde a8a542b4 f968e258 383c5da2 3a1d1b70 af86b5ff 4185ebf9 a1ca0c0f
+1 01 400003ec 010 00000000 62e4d068 1110 000003e0 0010 148c1bc9 e0be17a2 c203fc6a 67939d1d
+0 01 40000494 000 00001100 2f4654bd 2f4654bd 2f4654bd 2f4654bd d2999456 d2999456 d2999456 d2999456 aaba8541 aaba8541 aaba8541 aaba8541 abcc6e1f
+1 01 400003d4 001 00001001 af45bed2 0011 af45bed2 1100 60098dd3 0011 60098dd3 1000 86326d7e 0011 86326d7e 1000 67806c91 0011 67806c91 1100 310c7cfd 0001 310c7cfd 1100 000003d0 0020 8bf7fdeb 557c13d3 1c65cf52 de34c045 92790954 2b030575 c203fc6a 67939d1d
+0 10 40000430 001 00000001 7dfd3331 7dfd3331
+0 01 4000043c 010 00001001 6da0d661 abcaeadb de997835 9b7d3fa6 a09f5686 abccf114 51aac7f0 1f72582b 1614b2d1 98fc58c3
+0 10 400001b0 001 00000111 8a772f73 8a772f73 70803246 70803246 412c936e 412c936e bada3442 bada3442
+1 01 4000047f 000 00001001 b0000000 1000 d16dd6db 0001 d16dd6db 0010 d16dd6db 0100 d16dd6db 1000 cffab1a3 0000 cffab1a3 0000 cffab1a3 0100 cffab1a3 1000 00000095 0001 00000470 0020 766921e4 fb18a026 8cfd899d 7943a45e add1408e 4152bdb0 bc6e8c72 5ac7991e
+0 10 400002b3 000 00000111 170e923c f8bd216e f8bd216e f8bd216e f8bd216e 170e923c 170e923c 170e923c
+0 10 4000009a 000 00000011 c580fcd5 c580fcd5 c580fcd5 c580fcd5
+1 01 40000358 010 00001100 89bd008b 1111 eb4460b6 1100 efecc769 1101 360a8906 1111 12e99442 1111 69e77d51 1111 261bcb5d 1111 a3748790 1111 b29b1e13 1111 00534dd6 1111 83ac5aaa 1100 863430ab 1110 151f182a 1111 00000350 0040 d5dc34a4 89434c2d 98aa6a60 fb2a8f4f c73fa4bf 6e8e04dc 8c50fa27 70ace2dc 1122dd43 4781377b e61cd6d7 876965a8 b12feaf9 18828a1e d1a0f933 93077356
+0 10 400004bd 000 00000011 8cad8354 8cad8354 8cad8354 8cad8354
+0 01 40000448 010 00001010 9b7d3fa6 a09f5686 abccf114 51aac7f0 1f72582b 1614b2d1 98fc58c3 b91ced42 3b40f322 8acbd95a 92e16387
+1 01 400001cc 001 00001111 dcaefea3 0011 dcaefea3 1100 f19d408f 0010 f19d408f 0100 de810ed2 0011 de810ed2 1100 a11e2952 0001 a11e2952 1100 dc1847a6 0011 dc1847a6 1100 0c10d16a 0011 0c10d16a 0000 d0903030 0001 d0903030 0100 bb847e19 0001 bb847e19 1100 000001c0 0030 757e06c5 2b17d390 f12092c5 96d092f6 7262f852 876e6dd7 d50706a4 a50154fc 19524bd8 af9896a5 42cc0a99 d79f90f1
+1 01 400002b6 001 00001011 d05f0000 1100 af5d7f8f 0011 af5d7f8f 0100 387fba7a 0010 387fba7a 1000 5c7bc6fa 0011 5c7bc6fa 1100 956e094e 0011 956e094e 1100 e2dfb1c7 0011 e2dfb1c7 1100 00003637 0011 000002b0 0020 6f830a39 8653bd62 a17ce267 b5f77108 506089ef 93e04655 468ca54b dd98d262
+1 01 40000354 000 00000010 00e3fd79 0001 00e3fd79 0010 00e3fd79 0000 00000350 0010 8f783ce0 45818442 98aa6a60 fb2a8f4f
+1 01 400002ec 010 00001000 32965c49 1111 59531039 1001 6cf34144 0101 40826d8f 1111 9fb0000f 1111 f8ed207c 1110 27faa343 0111 4c1b9232 1111 ed28ed7d 1111 000002e0 0030 a1a3d52e ebe20f1b 51fcb180 7a6c5031 b58da043 5c55af93 c547c6b9 f5a25eed 3202284f 055ee15c 2a66c908 9412b9e9
+1 01 40000608 010 00000111 0e11b354 1111 530d8c39 1111 0af13d96 1111 4dad7512 1110 be9551f0 1101 3134f4f4 1011 2408889f 1111 af0efcd7 1011 00000600 0030 22fc3040 d51b84fa 61bfc414 730ba9d0 6773dde6 51d09db2 8709400e 339e9fc5 ea53d13e 3b510dd1 11ca86f3 020ebabb
+1 01 40000777 000 00001010 63000000 1000 6cfaf66c 0001 6cfaf66c 0010 6cfaf66c 0100 6cfaf66c 0000 f0c7c0b4 0000 f0c7c0b4 0010 f0c7c0b4 0100 f0c7c0b4 1000 00005679 0001 00005679 0000 00000770 0020 53e04675 81ff6003 7808d7fd 674f810a 88fef47f fd1d394e 018d2d92 7715de9d
+0 10 40000137 000 00000011 427ef592 427ef592 427ef592 427ef592
+1 01 4000000c 001 00000110 e0c2a427 0011 e0c2a427 1000 2c9adbc1 0011 2c9adbc1 1100 ed18ea08 0001 ed18ea08 1100 0000465b 0011 00000000 0020 154e0d8d 185751d9 ec0249e4 307b0cb5 c88e75aa 617d8147 7f50775d c17b3d11
+0 01 4000063e 001 00001001 0c529608 c9d261a8 c9d261a8 9247722e 9247722e f9f9b916 f9f9b916 305a846d 305a846d 88ce52be
+1 01 40000479 000 00001100 0f518900 0010 0f518900 0100 0f518900 1000 ff210d25 0001 ff210d25 0000 ff210d25 0000 ff210d25 0000 2b5e14f5 0001 2b5e14f5 0010 2b5e14f5 0000 2b5e14f5 1000 0000ab19 0001 0000ab19 0010 00000470 0020 766921e4 fb18a026 b04f5799 f263a04c 63a2f1b2 641525c8 bc6e8c72 5ac7991e
+1 01 400005df 000 00000101 16000000 0000 cf2267a2 0001 cf2267a2 0010 cf2267a2 0100 cf2267a2 0000 000000c4 0001 000005d0 0020 1e2dc0f9 de9ca1c2 a4eb7183 eb529546 5040624b c6ca594c 13129283 29b899b7
+0 01 400006f4 001 00000000 2c67bbaf
+1 01 40000014 010 00001101 175d658e 1101 663bea79 1110 8aac17a6 1111 f938fb99 0010 269b908b 0101 9a998e42 0111 409e4e58 0111 d005535c 0111 2f6190f6 1111 a67b6577 1111 0398e1a6 1101 e11e4a55 1111 e4b0d587 1111 5ce468cc 1111 00000010 0040 6ee038bc 2c15da6b be191719 7809dd0e f73638ab 2eabee7e 681c7445 b26aaa4b 47b5587f a8f95d41 a77e5940 35e9ef55 375eee2b 418784a2 8e69d8ef 1576071b
+0 01 40000450 001 00001100 abccf114 abccf114 51aac7f0 51aac7f0 1f72582b 1f72582b 1614b2d1 1614b2d1 98fc58c3 98fc58c3 b91ced42 b91ced42 3b40f322
+0 10 400007a2 001 00001111 abcc9363 daeef1e9 daeef1e9 abccf1ea abccf1ea daeef1eb daeef1eb 59ccf1ec 59ccf1ec e3afb16a e3afb16a abcc6794 abcc6794 88fb3fbe 88fb3fbe abcc9363
+1 01 400001d8 001 00001111 dc5fb6e3 0001 dc5fb6e3 1100 43a94a14 0011 43a94a14 1100 b9258d49 0011 b9258d49 0100 0f26c50a 0001 0f26c50a 0100 5478d357 0001 5478d357 0100 2a0006b6 0010 2a0006b6 1100 a051cd76 0011 a051cd76 1100 87f0e9f8 0011 87f0e9f8 0000 000001d0 0030 7262f852 876e6dd7 7f428935 0b766a9b 5586d751 0aadb941 38e98ca0 f6a5ffd8 d4b6cb6a 72bb3c2d 580c881d a72321d4
+1 01 400002a4 010 00001101 5a2a3ee4 1111 1ecee403 1110 6a8b8c4e 1011 0afaee1d 1111 b7efac9c 1111 a154c66a 1111 4e031a6d 0101 46b7ad7c 1001 dbbaca98 1110 1f51f972 0111 d86014dc 0011 aaa5993b 1011 b7ddb0c4 1111 10c2b407 1111 000002a0 0040 40cbd7be 40d72991 0b124a2a aa7642d0 e26043e9 e2915828 839d077f 54e3dd65 d8c373cc d152d421 0cb90db1 46227e66 e8efd4d5 4b9ba015 84e53f41 0e9ecd4d
+0 10 40000789 000 00000111 ac8b1d83 ac8b1d83 ac8b1d83 e0e3751c e0e3751c e0e3751c e0e3751c ac8b1d83
+1 01 40000452 001 00001110 51b50000 0100 4f340efb 0011 4f340efb 1000 fc0788e1 0001 fc0788e1 1100 92f7bdf8 0011 92f7bdf8 1100 36c80942 0010 36c80942 1100 f71e84e6 0011 f71e84e6 1000 cd038dae 0001 cd038dae 1000 04654328 0010 04654328 1100 00000450 0020 88d57667 2c750d3e d3cb013f 30fb75d6 ec62be38 46bdbe48 e50a6c2a 9ac33d4e
+1 01 40000274 010 00001001 c66328af 1111 18fe29da 0110 7bf39dc2 1111 bd8d04b4 1111 ca552c0f 1111 3e955396 1100 7cba8d2f 0111 a6592ad2 1001 eabe5830 1001 c7045d31 1110 00000270 0030 94e1673a bb4dbc6b 39a6991c 0fe07a86 90dcce95 c794af2c d373a1d3 918b78b5 79dedef8 ffe27a8c ba215279 6b15ca1c
+1 01 400004ee 000 00001111 5d560000 0100 5d560000 1000 8a1c0779 0000 8a1c0779 0010 8a1c0779 0100 8a1c0779 1000 d2e85a2b 0001 d2e85a2b 0010 d2e85a2b 0100 d2e85a2b 1000 1ec28dc4 0000 1ec28dc4 0010 1ec28dc4 0100 1ec28dc4 1000 0000c4e7 0000 0000c4e7 0000 000004e0 0020 fa5b68ea f37ec33b 43e53861 71b38447 3c10cccb 7204cf4d 57559083 2292d348
+0 10 4000069c 001 00000011 c14ffa56 c14ffa56 8ba1d96c 8ba1d96c
+0 10 400004e4 000 00000111 6b16c7f8 6b16c7f8 6b16c7f8 6b16c7f8 cb4a09ff cb4a09ff cb4a09ff cb4a09ff
+1 01 400001ee 001 00000100 5bbd0000 1100 906d1bc7 0011 906d1bc7 0100 c2720a1c 0011 c2720a1c 1100 000001e0 0020 5586d751 0aadb941 e43b5975 95fe202a 2eb74b9d 2e066006 580c881d a72321d4
+0 01 40000790 010 00000110 2cba1bba 4b30c02d aba04624 4eeeaa01 abcc9363 daeef1e9 abccf1ea
+1 01 400003c2 001 00000100 a64f0000 1000 30993b2b 0010 30993b2b 1100 da529163 0011 da529163 1100 000003c0 0010 3fb110e2 2a5c1bb5 1ef7f4dc 967225f5
+1 01 4000053e 000 00001000 75980000 0100 75980000 0000 b378379c 0001 b378379c 0010 b378379c 0100 b378379c 0000 0098919c 0000 0098919c 0010 0098919c 0100 00000530 0020 cd02e917 882c8bb5 cf502151 4a50df40 c4bd87a2 bf97ce07 c635b434 e5e198ab
+1 01 40000702 001 00001111 3afa0000 0100 14006042 0011 14006042 0100 520e4c25 0011 520e4c25 1000 b814b572 0010 b814b572 1100 98bc535e 0011 98bc535e 1100 2a8ec7ed 0001 2a8ec7ed 1000 93d3c8a1 0011 93d3c8a1 1100 edecd7f3 0010 edecd7f3 1100 0000678f 0011 00000700 0030 11e1fddf 5cdcceb5 0c08bd37 56babf72 c3ca1280 0cab62bd 17d122e3 9ef71c14 4e355995 7e361bd3 eec6c482 a393e680
+0 10 4000076e 001 00000001 0783f172 0783f172
+0 01 400001c1 000 00000000 4c84c25c
+0 10 4000016c 010 00001111 d8f77aa0 3ec25cbd 00d204dd d4428f17 89fda27e 702d5e26 70f596bd 48b0e220 d5d320f8 9727b67f 4537116f 9f7b2c9a bf8f9a13 dbafb6f6 b8bf8bb3 826d3602
+1 01 400006b8 001 00001011 0a4e25bb 0000 0a4e25bb 1000 bd81f880 0011 bd81f880 1100 e493ae2d 0000 e493ae2d 1000 4eeeb378 0001 4eeeb378 0100 ede7ef6e 0011 ede7ef6e 1000 9d6008f7 0011 9d6008f7 1100 000006b0 0020 d842c58f 02c85b48 be11c757 9d244fbe 2a9f9edc 358c1c28 19e79b15 9adf3d6a
+0 10 400002ce 001 00000111 7e3014dc 467bc67c 467bc67c dbbaca4e dbbaca4e e251f972 e251f972 7e3014dc
+1 01 400003f8 010 00000100 cb1ce5ba 1111 dbf0fbb7 0111 6d02a23e 1101 bcd636d3 1111 19a3a483 1010 000003f0 0020 348aeb3e 324064fb 442505d2 61c34a83 89cd5f48 ab65cdf1 e954ebe2 1a34bbf8
+0 01 40000094 010 00000110 7199d652 c580fcd5 b6286943 99951774 03cc999b dea0d4fb 39ee4ef3
+1 01 40000730 010 00000011 1d2def04 1111 ce71d01c 1001 9e5fe3cc 1111 2667d9d1 1111 00000730 0010 26b2b487 4df6f65c 59a75832 5a8a2f12
+0 10 40000118 001 00000111 efad506d efad506d f1714ce1 f1714ce1 fe51aaac fe51aaac 7d0bdeb7 7d0bdeb7
+1 01 40000322 000 00001100 d7a50000 0000 d7a50000 1000 dcca1175 0001 dcca1175 0010 dcca1175 0100 dcca1175 1000 5be21a97 0000 5be21a97 0010 5be21a97 0000 5be21a97 0000 008ed5c5 0000 008ed5c5 0010 008ed5c5 0100 00000320 0010 2951f4ea cfa7ec2a 50f12c2b 84a35b70
+0 10 4000052b 000 00001111 4e316e62 5d45d510 5d45d510 5d45d510 5d45d510 a4b4b46a a4b4b46a a4b4b46a a4b4b46a 2e52bbe2 2e52bbe2 2e52bbe2 2e52bbe2 4e316e62 4e316e62 4e316e62
+1 01 40000354 001 00000000 0000db64 0011 00000350 0010 a1dec422 3014d143 98aa6a60 fb2a8f4f
+1 01 4000025c 000 00000100 6c0bcfbb 0001 6c0bcfbb 0000 6c0bcfbb 0000 6c0bcfbb 1000 000000ce 0000 00000250 0020 a8b89414 26356da7 781fe6a8 718f7bf7 05e6180d a2d6da96 0d802812 a7cd4473
+1 01 40000315 000 00001011 c863aa00 0010 c863aa00 0100 c863aa00 1000 4c2e4154 0001 4c2e4154 0010 4c2e4154 0100 4c2e4154 0000 19fc5d0b 0001 19fc5d0b 0010 19fc5d0b 0100 19fc5d0b 1000 000000a9 0001 00000310 0020 9cf75ba9 32f10726 55b84a39 fd97afcb 7bcc7399 fd1e7b2c 50f12c2b 84a35b70
+1 01 40000108 010 00000000 23a20b96 1111 00000100 0010 44c346eb ba2a93f6 5c3503f6 b8db632e
+1 01 400004e8 010 00001001 a2e46935 1101 b4340bdd 1111 5f193fc2 1111 80fc802b 1111 0d34d2de 0111 2f608cda 0011 bb548428 0001 04795453 1011 4fd32fd3 1001 e6e864d7 1111 000004e0 0030 fa5b68ea f37ec33b ed53dbd1 d4db2747 5de76645 822de7da a05ddfe4 1e5d3bc7 97c3082f 7519894a 5300c4d3 225d723d
+1 01 40000414 000 00000111 cf5d8bf7 0001 cf5d8bf7 0000 cf5d8bf7 0000 cf5d8bf7 1000 49916d5c 0001 49916d5c 0010 49916d5c 0100 49916d5c 1000 00000410 0010 cf88b3b1 40ad4a19 09970611 7b102940
+1 01 40000568 010 00001111 53b40787 1011 fb06dda5 1101 25c8bf8b 0101 c8b9a359 1110 39a00fb1 0001 46f4d747 0111 51319842 0110 08d3ffe1 1111 e8d965fc 1101 f6e5471d 1111 f3a17a61 1111 386a5508 1001 096906dc 1101 be861f67 1111 debe0ca6 0110 f07ffd84 1111 00000560 0050 0de17baf b0ba7af5 9dc55ed5 273c0874 a4fbc0fd 031647f4 478f6f67 483f5fcf f86b9125 a07d104b c26f74c9 e55d2e9c 2a9ab3ce 707c9401 3de26bc5 6cb7e727 51954d30 d1f2ccaf e5b01d1c 76143ed8
+1 01 40000708 000 00001000 58589c9f 0001 58589c9f 0000 58589c9f 0100 58589c9f 1000 ad79df05 0001 ad79df05 0000 ad79df05 0100 ad79df05 1000 000000dd 0000 00000700 0020 11e1fddf 5cdcceb5 d60bcbf0 58fac994 c3ca1280 0cab62bd 17d122e3 9ef71c14
+1 01 4000018c 000 00001000 c065de3c 0001 c065de3c 0000 c065de3c 0100 c065de3c 0000 a6ed4e83 0001 a6ed4e83 0010 a6ed4e83 0000 a6ed4e83 1000 0000007b 0001 00000180 0020 f77b8c41 65baea90 d16a670b ad9973b6 e0054d6a b5273472 973eb987 9f434d1d
+0 10 40000123 000 00000011 65cc012f 65cc012f 65cc012f 65cc012f
+0 10 400005fc 010 00000111 7139e256 f42267a2 6dadb2c4 15bc4693 f3f15575 0646f1d5 124da54b eeaf2583
+1 01 40000434 000 00001100 b5d4780a 0001 b5d4780a 0010 b5d4780a 0100 b5d4780a 1000 49d78f2b 0000 49d78f2b 0010 49d78f2b 0100 49d78f2b 1000 94086fa2 0001 94086fa2 0010 94086fa2 0000 94086fa2 0000 0000003f 0000 00000430 0020 f45469c7 1adeca78 0f61905f 63c39129 0a0ed9a4 9befa4da 50f9f9e5 49675c4f
+0 01 40000542 000 00000010 5978379c 5978379c 9a98914b
+1 01 40000344 001 00000000 00003384 0011 00000340 0010 11f10908 f8ee57ba a9913cdc 8c99de5c
+1 01 400001d8 001 00001110 d7d5493e 0011 d7d5493e 0100 7b947389 0011 7b947389 0100 7e4ffaaa 0011 7e4ffaaa 1100 d10b082e 0001 d10b082e 0100 dfd3fcfb 0011 dfd3fcfb 0100 350e3f3e 0010 350e3f3e 1000 a78a8781 0011 a78a8781 1100 0000aab3 0011 000001d0 0030 7262f852 876e6dd7 d4bbaf11 7d8e2bd7 fc819e43 849c8007 34c4027e c722ba51 aabbe65c 1e2cf7e5 580c881d a72321d4
+0 01 40000400 010 00000101 6d02953e bcd636d3 1944a4ac 5c81e79f b5f57280 cfbd06f7
+0 10 40000671 000 00000111 ea5a5f66 ea5a5f66 ea5a5f66 74450ecc 74450ecc 74450ecc 74450ecc ea5a5f66
+0 10 400003e9 000 00000011 abccf5aa abccf5aa abccf5aa abccf5aa
+0 01 40000558 001 00000010 f8cadbe1 f8cadbe1 37c41872
+0 10 4000018c 001 00000111 1c65f03c 1c65f03c 09a34e2d 09a34e2d bf180652 bf180652 d60757d7 d60757d7
+1 01 40000570 010 00001001 c19e1a07 1111 33f8bce8 1011 8d4201e8 0111 029be459 1101 092b890d 0001 9d103260 1111 b3c7dab6 1111 381eca00 0110 a9a617f5 0111 0b125b22 0111 00000570 0030 2c286d9c 9af5acd8 5e610b3a 2a98beff 7780ea1b 51e3cd43 e155f541 a3fe63f2 03d0e08a bad2cda3 3de26bc5 6cb7e727
+1 01 40000626 001 00001111 d68b0000 1100 a5ef9874 0011 a5ef9874 1100 171a0893 0010 171a0893 1100 675f303a 0011 675f303a 0100 980a1bcd 0010 980a1bcd 1100 c1591e6f 0011 c1591e6f 1100 decb7a94 0000 decb7a94 1100 460587f3 0001 460587f3 0100 00003d38 0000 00000620 0030 307298ee 0f5a9c08 35da28f5 454ebb78 a8398b5d c1e5e55e ba6f25c3 5ca264a6 5b703866 b4e8de93 529013c6 231cf185
+1 01 400000f6 000 00001001 d3ae0000 0100 d3ae0000 0000 90c96da1 0001 90c96da1 0010 90c96da1 0000 90c96da1 1000 a247bc88 0001 a247bc88 0000 a247bc88 0100 a247bc88 1000 000000f0 0010 d02302d9 e305f04e 5537f53e 3d2cab29
+0 01 400005a0 010 00000101 dfbe0c5e f07ffd84 abd034a5 daee7f9a abccf16c daeef16d
+0 10 40000675 000 00000001 74450ecc 74450ecc
+0 10 40000144 010 00000001 70f596bd 702d5e26
+1 01 400004a5 000 00001100 8bd3f300 0010 8bd3f300 0100 8bd3f300 0000 179b12e7 0001 179b12e7 0010 179b12e7 0100 179b12e7 1000 186c6e7b 0000 186c6e7b 0000 186c6e7b 0100 186c6e7b 1000 0000bf92 0000 0000bf92 0010 000004a0 0020 9be182aa 032e27d4 1b2d6cd3 e510f8f5 e41334fa d8db3bb3 5493d942 98363e99
+0 01 400006a4 010 00001111 aae5a6eb 59a144ed 0d503660 ab5160b0 daa8063d 0accb874 bd81f880 e40a2ca6 79ee3678 ed4eef6e 9d6008f7 698b401c c24c8122 24f9e3ce ae688048 a10d4df3
+1 01 400003df 000 00001101 16000000 1000 28d0d3eb 0001 28d0d3eb 0010 28d0d3eb 0100 28d0d3eb 1000 87a9ff1b 0001 87a9ff1b 0010 87a9ff1b 0100 87a9ff1b 1000 dfdb7415 0001 dfdb7415 0010 dfdb7415 0100 dfdb7415 1000 0000005a 0001 000003d0 0020 8bf7fdeb 557c13d3 75de4baa 08540b9f 860a3dcb 8080f0ec 1ee4e218 c0c53b0e
+0 10 40000358 010 00000011 89bd008b eb44e895 5c1ec1b5 c71cdb64
+1 01 40000721 000 00000100 f51fa100 0000 f51fa100 0100 f51fa100 1000 000004b6 0001 000004b6 0010 00000720 0010 e6c46082 8420350b eec6c482 a393e680
+0 01 40000097 000 00001100 7199d652 c580fcd5 c580fcd5 c580fcd5 c580fcd5 b6286943 b6286943 b6286943 b6286943 99951774 99951774 99951774 99951774
+0 10 40000326 001 00000111 dcca1175 02ee1a6d 02ee1a6d 068ed51e 068ed51e d786eea9 d786eea9 dcca1175
+1 01 40000323 000 00001001 90000000 1000 acf6e164 0001 acf6e164 0010 acf6e164 0100 acf6e164 0000 4c6fdc4b 0001 4c6fdc4b 0010 4c6fdc4b 0100 4c6fdc4b 0000 000000dc 0001 00000320 0010 d687212c 40f31e6d da4a65f0 dd513a05
+0 10 400001d6 001 00000001 de810ed2 de810ed2
+0 10 40000384 001 00000011 86343074 86343074 83ace7c9 83ace7c9
+1 01 4000075c 010 00000111 a140135e 0111 04867d85 1010 0245356c 1011 2b75852c 1111 377db3f3 1111 3877ed9d 0111 4ed9aaee 1001 546d2198 1110 00000750 0030 1ea04c66 70d7db37 b807eca2 34b9260a 2944b870 41d176a5 2a1dabfb cd76df87 6c9af01e 9c6b93b8 300ea7b5 02d789d7
+1 01 4000000c 001 00000000 000051f1 0010 00000000 0010 154e0d8d 185751d9 2e31162f 6cb1fda6
+1 01 40000012 001 00000101 d2170000 1100 a8bf6f33 0011 a8bf6f33 1100 0be79e92 0011 0be79e92 0100 0000cb56 0010 00000010 0010 ce1bfb9a 3e0e0fce 75a02e07 d96b245b
+1 01 4000017c 000 00001101 739d10f1 0001 739d10f1 0010 739d10f1 0100 739d10f1 1000 9aeee566 0001 9aeee566 0010 9aeee566 0100 9aeee566 0000 8d7747b2 0001 8d7747b2 0010 8d7747b2 0100 8d7747b2 1000 00006068 0001 00006068 0010 00000170 0020 c48f34cb 84fa0dbc d5db768a 8852b75a c3ee9eed f3a487b5 375b9bcb b30105b1
+0 01 40000530 001 00001000 28857660 28857660 1e8d5348 1e8d5348 04ccb240 04ccb240 21980110 21980110 5978379c
+1 01 40000231 000 00001110 9093ef00 0010 9093ef00 0000 9093ef00 1000 01adbce8 0000 01adbce8 0000 01adbce8 0100 01adbce8 1000 cb388cb3 0001 cb388cb3 0000 cb388cb3 0000 cb388cb3 1000 3d438e0d 0000 3d438e0d 0000 3d438e0d 0000 3d438e0d 1000 00000230 0010 93b0cd6f 64915ad2 fff068d2 06798930
+1 01 40000274 010 00000011 b760cfcf 1100 e70cb435 1111 b4a2514d 1100 b57f3f35 0111 00000270 0020 b65092bf 54f88df8 701b86c6 b896c050 95533c2d 64c36eaf d373a1d3 918b78b5
+1 01 400007dc 001 00001110 0d327a37 0011 0d327a37 1100 b677c9a1 0010 b677c9a1 1000 95c76b05 0011 95c76b05 0100 1e93a295 0010 1e93a295 0100 1e459dd0 0011 1e459dd0 1100 5b03b75e 0011 5b03b75e 0100 16cf4449 0011 16cf4449 1100 00001a9a 0011 000007d0 0030 50b86ddc 6750d372 f97dd0ca 1518a62c 469aed23 29e456a0 a9584a81 df154f86 0196a834 3c3dadee b432e1e8 6e8045a4
+1 01 40000100 000 00001110 76516742 0001 76516742 0010 76516742 0000 76516742 1000 751f6482 0001 751f6482 0010 751f6482 0100 751f6482 1000 2fecad65 0000 2fecad65 0010 2fecad65 0100 2fecad65 1000 004edc86 0000 004edc86 0010 004edc86 0000 00000100 0010 a7a363a9 4e3f8022 4fbd01e6 5b16cbd6
+1 01 4000037c 010 00001011 bae36371 1000 c1c66c4f 0101 d5d42cea 1111 363b823d 0111 b2b9dc92 1011 7a804eb7 1110 7e788d65 0111 0f5dccfd 1111 253271fb 1111 338fee3a 1111 44a0f350 1011 30a491e5 1001 00000370 0040 1122dd43 4781377b a5288c8f a1dfae36 4aa7ec36 f139d078 925e5f95 96996173 d85206cf c1034a17 a8c6ae39 8dbae27e 3bfdad43 51d3c4e1 e7a093eb d0d0ac15
+0 10 40000663 000 00001111 561c9447 45e722d8 45e722d8 45e722d8 45e722d8 bf6fe6aa bf6fe6aa bf6fe6aa bf6fe6aa 0cd5caf2 0cd5caf2 0cd5caf2 0cd5caf2 561c9447 561c9447 561c9447
+1 01 400005a0 001 00000010 e49ed2fc 0011 e49ed2fc 1100 000045de 0010 000005a0 0010 bdd20156 87931590 e5b01d1c 76143ed8
+1 01 40000260 010 00001010 17b654ed 1001 642cbb8f 0111 9724c18a 1011 002e048c 1100 a03ab7b8 0110 d7454dd5 1101 70c887ba 0111 e61aa16f 1111 96331245 1111 257a0fed 1100 a433cbe5 1111 00000260 0030 d7123c8d 99a5d724 e85ad83d 49770eb6 6f7373cb 2b4601db 59f7c5ff 39a48ed2 4d4a1744 a0299516 f57803cd 7857818a
+1 01 400007a8 010 00001001 cb4e9542 1101 7665fa3e 0111 ad43e8b5 1101 6b0f1502 1101 efbd22a7 1100 a20dea12 0001 c0a255df 1111 3a89c479 1111 347b4c8b 1111 5dffc48e 1011 000007a0 0030 e9efe9b9 2dac309b 3683efb8 a36dd619 29763c66 61db156f 4160fa33 c1700e3f 61059864 41183f92 d515f189 e9308ff1
+0 01 40000264 001 00001111 c12cbb8f c12cbb8f 979bc18a 979bc18a 002ea538 002ea538 003ab791 003ab791 d74528d5 d74528d5 e7c887ba e7c887ba e61aa16f e61aa16f 96331245 96331245
+1 01 400002a8 010 00000100 6a61a605 1100 f2f47b12 1110 95449fed 1000 c6463a6e 1111 3262dad9 1111 000002a0 0020 40cbd7be 40d72991 6e55aa99 fba18ba7 43e7dd86 2fb48e4a 63a6b7ff dc22cf39
+1 01 4000022c 010 00000000 5b0d1fc3 1110 00000220 0010 f8789c49 d1dc9037 d18b302f 110a52eb
+0 01 400002aa 000 00000010 6a61e467 6a61e467 f2f47b4e
+0 01 4000047a 000 00000100 0f518934 0f518934 b021a225 b021a225 b021a225
+0 01 400002b8 010 00000100 3262dad9 3803ba6d 467bc67c dbbaca4e e251f972
+0 10 40000224 010 00000111 a18be1d8 2b8815cb 5b0d1f16 90c5efc4 01ade58b cb9af1b3 3d0068bf 4efa376d
+0 01 4000077f 000 00001111 f0c7c0df abccf179 abccf179 abccf179 abccf179 e533f1e1 e533f1e1 e533f1e1 e533f1e1 ac8b1d83 ac8b1d83 ac8b1d83 ac8b1d83 e0e3751c e0e3751c e0e3751c
+1 01 400000f2 000 00000011 3b640000 0100 3b640000 1000 0000f9b4 0001 0000f9b4 0010 000000f0 0010 672234cc 229dac1d 5537f53e 3d2cab29
+1 01 400000e0 010 00001001 abf4641b 0101 ecd3776d 1101 9743f752 0101 11180503 1101 39b63fa8 1111 2889840a 1111 f390df0d 0111 6456d2ea 1110 1bbed544 1001 38e20e46 1111 000000e0 0030 a03a37a7 1f73d812 c50d7610 039bbe1b b92a4909 34957ab2 0ae4d541 c421b0ab b39a0e0e 54f30d01 4fbd01e6 5b16cbd6
+0 10 40000556 001 00000011 a77d4021 4ae05f6b 4ae05f6b a77d4021
+1 01 40000769 000 00001000 578ccd00 0000 578ccd00 0100 578ccd00 1000 edb3f1ad 0001 edb3f1ad 0010 edb3f1ad 0100 edb3f1ad 1000 00005a2b 0000 00005a2b 0010 00000760 0020 2944b870 41d176a5 678f4bb9 3c77a353 7291daff 5f5f612b 300ea7b5 02d789d7
+0 10 4000008a 000 00000011 2af53a4d 2af53a4d 2af53a4d 2af53a4d
+1 01 40000616 001 00001010 93030000 1100 4dca3b51 0001 4dca3b51 0100 51272715 0010 51272715 1100 e0ecf408 0011 e0ecf408 1100 68fd9940 0011 68fd9940 1100 055de712 0011 055de712 1100 00000610 0020 3d82e3e2 3400f94e 737cdd80 f0c683cb fe57dce8 dfe83deb 1e6729ae 5254e72e
+1 01 4000009c 001 00001001 f75c74ca 0010 f75c74ca 0100 e3db3e0f 0011 e3db3e0f 1100 f7c4dda4 0001 f7c4dda4 1000 1685a2eb 0011 1685a2eb 1100 8c71393f 0011 8c71393f 1100 00000090 0020 bf8130bb 0d88af2c 4d6c7c64 9976c271 ab534e07 40ad64da aa123dc3 2aff71c8
+0 10 40000694 010 00000001 2471361f b36af113
+0 10 4000021d 000 00000001 ab96063a ab96063a
+0 10 400002e6 001 00001111 47006744 2c4c31be 2c4c31be 32965c49 32965c49 59127e39 59127e39 79f3f044 79f3f044 40826d8f 40826d8f 9fb0000f 9fb0000f 21f42f15 21f42f15 47006744
+1 01 400005c4 001 00000100 d8f5c347 0001 d8f5c347 0100 785c4a58 0011 785c4a58 1000 0000b868 0011 000005c0 0010 b3013ff1 285559e4 4b52065c 839ccfdf
+0 10 4000030c 001 00000011 ed28ed7d ed28ed7d 4c1b9232 4c1b9232
+0 01 400003bc 010 00001000 3d9b7109 a6767624 30993bc7 da529163 b37810c8 9c89fe43 af45bed2 60ad8dd3 16ec6d7e
+0 01 4000004a 001 00001010 5ce468cc 5ceb6d14 5ceb6d14 261d1351 261d1351 f3b783c9 f3b783c9 b7ccdb92 b7ccdb92 035db37c 035db37c
+1 01 400007e9 000 00000100 7eecff00 0000 7eecff00 0100 7eecff00 1000 0000468a 0001 0000468a 0010 000007e0 0010 469aed23 29e456a0 ed8312c3 6db66e6e
+0 10 400006d8 001 00000011 24f9e3ce 24f9e3ce ae688048 ae688048
+1 01 40000590 001 00000110 6b8ad364 0010 6b8ad364 1100 d637837f 0010 d637837f 1100 e9aa6a62 0001 e9aa6a62 0100 000096dd 0011 00000590 0010 7b4f5905 2e670be4 019a2fd8 26256406
+0 10 4000045c 010 00001111 92f7bdf8 36c809c3 f71c84e6 cd40f3ae 0465435a 92e16387 29c7f273 0f518934 b021a225 abcaeadb de997835 9b7d3fa6 a09f5686 abb5f114 4faa0efb fc0758e1
+1 01 40000330 010 00001011 e8d0de9d 1011 27d1ec34 0111 57aaefb6 1011 04e65f09 1011 20912d9e 1101 e0242dba 1110 ea3245d6 1011 8cdbcaff 1111 3c3b1fa0 1101 2c2cbd37 0111 c7268b86 1010 13e8520b 1111 00000330 0030 9b53f8d8 c15f4c0e 7998281d ba9aba62 de0b5b58 e750f9e3 b7ae1d91 4707c67c 935ba8b2 d83b2c60 18e69af3 0d6c2233
+0 10 400003f8 010 00000011 cb1ce5ba aff0fbb7 abccf0fc daeef0fd
+1 01 4000071e 001 00000011 58730000 0100 35b44887 0000 35b44887 1100 0000853e 0011 00000710 0020 c3ca1280 0cab62bd 2430c390 81c8752e 0b7ae01d 7ef9d873 eec6c482 a393e680
+0 10 400007aa 001 00000011 cb4ef142 da65fa3e da65fa3e cb4ef142
+0 01 40000002 001 00000001 4aa05531 e40e7d60
+1 01 4000025a 000 00000111 f8960000 0000 f8960000 1000 f7c33abb 0001 f7c33abb 0010 f7c33abb 0000 f7c33abb 1000 0000a78a 0001 0000a78a 0000 00000250 0020 a8b89414 26356da7 38410351 813c381c 428e5192 106b587e e85ad83d 49770eb6
+1 01 40000130 000 00001101 624bec1f 0001 624bec1f 0000 624bec1f 0100 624bec1f 1000 a5a12bf7 0001 a5a12bf7 0010 a5a12bf7 0100 a5a12bf7 1000 045e1f80 0001 045e1f80 0010 045e1f80 0100 045e1f80 1000 0000ce20 0001 0000ce20 0010 00000130 0010 26a0615a 39c70ff2 24a686f7 d2c41a8f
+0 01 400003d2 001 00001010 9c89fe43 af45bed2 af45bed2 60ad8dd3 60ad8dd3 16ec6d7e 16ec6d7e 28d0d3eb 28d0d3eb 87a9ff1b 87a9ff1b
+0 10 40000786 001 00000011 e533f1e1 abccf179 abccf179 e533f1e1
+1 01 400002f8 010 00000010 b411bcf5 0001 67b11608 1010 537a4f74 1001 000002f0 0020 b58da043 5c55af93 f35e7831 032d415a 1419cf27 56dee1da 2a66c908 9412b9e9
+0 10 400007e0 010 00000011 b6adc9f7 acc76b05 7eeca2b6 1e45468a
+0 01 40000210 001 00000111 68c58b49 68c58b49 298ae460 298ae460 23104f0b 23104f0b ab96063a ab96063a
+1 01 4000059c 001 00001000 5f77ca4c 0011 5f77ca4c 1100 e56e3dd8 0010 e56e3dd8 1100 6133b872 0011 6133b872 1000 08cad227 0011 08cad227 0100 00006ce3 0001 00000590 0020 7b4f5905 2e670be4 9cc10a65 0d679e70 2d39954d 2d1360a7 a26aa1ba 1f18bb7e
+1 01 40000116 001 00000000 aaac0000 1000 00000110 0010 c3ac31a5 48ca5a20 ada5fe23 3cf085ea
+1 01 40000532 001 00000100 b96c0000 1100 cfe038e3 0011 cfe038e3 1100 9895a94a 0011 9895a94a 1100 00000530 0010 64c4fea0 1bee63c4 02935236 0fff5183
+1 01 400000e3 000 00001110 c6000000 1000 1f29c0ec 0001 1f29c0ec 0000 1f29c0ec 0100 1f29c0ec 1000 e32d8e5d 0001 e32d8e5d 0010 e32d8e5d 0100 e32d8e5d 1000 45f4ff6e 0001 45f4ff6e 0000 45f4ff6e 0100 45f4ff6e 1000 0000650b 0001 0000650b 0010 000000e0 0020 24776906 51e266e6 f12eec88 13e5fadd be1d2f6d 5cd64d34 0ae4d541 c421b0ab
+0 10 400000ec 010 00000001 45f4da6e e32d8e5d
+1 01 4000001a 000 00000111 9eb30000 0100 9eb30000 0000 509b42af 0001 509b42af 0010 509b42af 0000 509b42af 0000 0000756f 0001 0000756f 0000 00000010 0020 ce1bfb9a 3e0e0fce d762177b e41d0a0b 81d07576 e4487f6c 681c7445 b26aaa4b
+1 01 40000748 010 00000100 348762dd 1111 999a0c3b 0111 9da14fa1 0111 9e0c4708 1111 131cce50 1111 00000740 0020 ad94d4d8 2f16d37a 7ea0138e 82735b8d cb51bb26 d82056ef 9e5d4681 0e12d15a
+1 01 4000020e 000 00001111 37ad0000 0100 37ad0000 1000 132e8e12 0001 132e8e12 0000 132e8e12 0100 132e8e12 1000 85b44ee5 0001 85b44ee5 0010 85b44ee5 0000 85b44ee5 1000 77947e0c 0001 77947e0c 0010 77947e0c 0100 77947e0c 1000 00007e91 0001 00007e91 0000 00000200 0020 2dbf2cde a8a542b4 42ac228f 4798816f 108847cf eb0f46d1 8878a2cf 2438aa3b
+0 01 400006a9 000 00001111 59a144ed 59a144ed 59a144ed 0d503660 0d503660 0d503660 0d503660 ab5160b0 ab5160b0 ab5160b0 ab5160b0 daa8063d daa8063d daa8063d daa8063d 0accb874
+1 01 400000d3 000 00000101 c1000000 1000 1f4d40a8 0001 1f4d40a8 0010 1f4d40a8 0100 1f4d40a8 0000 000000ad 0001 000000d0 0010 dbfcac28 6c231b64 599ff0bd bc08900c
+1 01 40000340 010 00000110 81b1cb80 1001 caa9615e 0110 99a6b3cd 0110 1805180b 1100 19e3a923 1111 8f11b4ce 1101 3ad9f89e 1110 00000340 0020 525f24dd 5f0373ed 5d611eec 0b1c7e0b 8bb756bc 4f189bd1 57ace9ab a74dc7c6
+1 01 40000238 010 00000100 0a502850 1110 6f90e928 0111 b223d377 1111 424a1300 1111 c69f33f9 1100 00000230 0020 93b0cd6f 64915ad2 2ce88762 984a37cc 9ac1f6d8 ffc9528d afe2b1c3 433212ec
+1 01 40000464 001 00001010 deea9272 0011 deea9272 0000 2b8ebee0 0011 2b8ebee0 1100 83e2bdab 0010 83e2bdab 1100 cc25a73f 0001 cc25a73f 1100 b530e3e0 0011 b530e3e0 0100 0000a53a 0010 00000460 0020 740c217d 3c1d21f3 596f4a62 bd4d644a ce469474 38c0321b 15a0001d 068fa643
+0 01 400005dc 010 00001110 d94bef57 f42267a2 6dadb2c4 15bc4693 f3f15575 0646f1d5 124da54b eeaf2583 7139e256 1da936c0 d6d1bb09 0e11b354 530d8c39 0af13d96 93037546
+1 01 40000218 001 00001000 c45becf9 0000 c45becf9 1000 50af2d69 0011 50af2d69 1100 0473d028 0011 0473d028 1000 2f7bd706 0010 2f7bd706 0100 00006ae7 0011 00000210 0020 108847cf eb0f46d1 4171960f df754b49 d142f9ed 134caa25 486affde f046d44c
+0 01 40000704 010 00001101 10006042 58584c9f ad79b505 98bc535e 2a58e2ed 93d3c8a1 ed73d7c7 35b4678f 7d2e853e d63e57ca 4866a0e0 1d2def04 ceab921c 9e5fe3cc
+0 01 4000009b 000 00000110 c580fcd5 b65c7443 b65c7443 b65c7443 b65c7443 e3db3e0f e3db3e0f
+0 01 400007d4 010 00000110 42c3cd49 413ac2b3 0d327a37 b6adc9f7 acc76b05 7eeca2b6 1e45468a
+1 01 400002a1 000 00000110 9f936a00 0010 9f936a00 0100 9f936a00 1000 86174e8a 0001 86174e8a 0000 86174e8a 0000 86174e8a 1000 000002a0 0010 5b367d5c b4e39b6b 6e55aa99 fba18ba7
+1 01 4000038a 000 00000001 282b0000 0100 282b0000 1000 00000380 0010 4aa7ec36 f139d078 56a496e0 c12a8858
+1 01 400002ec 001 00001011 26c60cc3 0011 26c60cc3 1000 681bc18d 0011 681bc18d 1100 6814f1ba 0000 6814f1ba 1100 9b76b680 0010 9b76b680 0000 9106176b 0010 9106176b 1100 2e89b752 0011 2e89b752 0100 000002e0 0030 a1a3d52e ebe20f1b 65b030af cac9e511 31befd87 9427e8e7 fe6bd1f3 00081e62 8f270791 132c2f29 2a66c908 9412b9e9
+0 10 40000424 010 00001111 4ff6ec60 31cac515 151b3658 7dfd3331 b5d4780a 49d78f15 6da06fa2 6d02953e bcd636d3 1944a4ac 5c81e79f b5f57280 cfbd06f7 49916d5c be0af154 28e45cd8
+0 01 4000003c 001 00000000 0398bba6
+0 10 4000068b 000 00000011 95075a41 95075a41 95075a41 95075a41
+1 01 400000a4 010 00000100 40a36c78 1100 71b4bd25 1111 de7a04c2 1111 c4a0ade0 0111 b3b101a7 1100 000000a0 0020 ca07ebb2 5fddef37 bb9c7233 9a638bae 1cac965a 15c8a410 950bdd2d f6c110a0
+0 01 400005c0 001 00000000 b62bd3c0
+0 01 40000436 001 00001001 b5d4780a 49d78f15 49d78f15 6da06fa2 6da06fa2 abcaeadb abcaeadb de997835 de997835 9b7d3fa6
+1 01 40000288 010 00000000 0dbc0f48 0111 00000280 0010 4d4a1744 a0299516 6972d37b a0f43712
+0 10 400002e2 001 00000011 21f42f15 47006744 47006744 21f42f15
+1 01 40000714 000 00001010 4c21ee03 0001 4c21ee03 0010 4c21ee03 0100 4c21ee03 1000 75b0a22f 0001 75b0a22f 0010 75b0a22f 0100 75b0a22f 0000 005d9e11 0000 005d9e11 0010 005d9e11 0100 00000710 0010 5fa10e26 bc30bb8c 4afada96 5f5cf2cd
+0 01 40000225 000 00000001 a17bd7d8 a17bd7d8
+1 01 4000039c 000 00000011 338a7602 0001 338a7602 0010 338a7602 0100 338a7602 0000 00000390 0010 d85206cf c1034a17 7f9e106b b570ca5a
+1 01 4000001c 010 00001010 f085a014 1101 a8641289 1111 b0de208e 1101 8edb34ee 1111 a821ff3c 1111 0267f81d 1001 3277ca78 1101 5a43fa92 0110 0c027f02 1111 9ef573e6 1110 00c70ba4 0001 00000010 0040 ce1bfb9a 3e0e0fce e1116ed7 a72e48bf 41a9b6e4 3a67a33f dab37b18 5edcf6bb 2768440d 390f2150 ef797190 8e3e349d b495dcbe bb3c93d6 8e69d8ef 1576071b
+0 01 400006a8 010 00001010 59a144ed 0d503660 ab5160b0 daa8063d 0accb874 bd81f880 e40a2ca6 79ee3678 ed4eef6e 9d6008f7 698b401c
+1 01 40000794 001 00000011 b49ce3ae 0011 b49ce3ae 0100 beac672a 0011 beac672a 1100 00000790 0010 f16860ca 6d5498d2 d2e9c941 54e1afe6
+0 01 40000720 010 00001001 35b4678f 7d2e853e d63e57ca 4866a0e0 1d2def04 ceab921c 9e5fe3cc 2667d9d1 e8539a30 4ef492a8
+1 01 4000037c 010 00001101 4313f65f 1111 57ec533b 1111 751b8401 1011 e53b015e 0111 8c07dd7f 0111 8d9b8ae2 0110 df1ae90c 0111 68860f7b 0100 da393b36 1010 d75e5c1d 1100 86fcf391 0011 e87e75f2 0010 57559dfd 1111 b8302d5a 1111 00000370 0050 1122dd43 4781377b 4ef68d2d 29485ae4 766789f8 170aac01 66540984 9ac7d10c 0bba85e0 d3990132 ed6d639e bb479cf6 f578d7da adf3c952 bf3320a7 0d8dc43d f310e9a9 7619bd2b 3ad04a70 3ad640a1
+0 10 40000678 010 00000111 5b97a69b b59585ee 561c9447 45e722d8 bf6fe6aa 0cd5caf2 ea5a5f66 74450ecc
+1 01 400003e6 000 00001000 d8a20000 0100 d8a20000 0000 39000d25 0001 39000d25 0010 39000d25 0100 39000d25 1000 0081d34c 0001 0081d34c 0010 0081d34c 0000 000003e0 0010 08ad2318 8d7f1c33 8334cae2 d618d4b0
+1 01 4000049c 001 00001011 0c4c01ac 0011 0c4c01ac 1100 fbde1805 0011 fbde1805 1100 a6b871a7 0001 a6b871a7 1100 e86d448a 0010 e86d448a 1100 f27a9477 0011 f27a9477 1100 e4d66e35 0011 e4d66e35 1100 00000490 0030 c9af1c24 da7f6b23 eeb151d5 e3ef3fef bb43fa5e bfdb348e c3ab652f e65d8a46 9ac8bee3 4f270230 5493d942 98363e99
+0 01 40000126 001 00001001 c084f0df 15ac3770 15ac3770 08b1f1c1 08b1f1c1 624b881f 624b881f a5a12bf7 a5a12bf7 045e1f80
+1 01 400003ee 001 00000000 4a180000 1100 000003e0 0010 08ad2318 8d7f1c33 7449c6f3 a64a7a5f
+0 01 40000148 000 00001000 48b0e220 48b0e220 48b0e220 48b0e220 d5d320f8 d5d320f8 d5d320f8 d5d320f8 9727b67f
+1 01 40000300 010 00000101 65008549 1001 37f69734 0111 ba94c0d8 0111 73c6dbdc 1011 8fe910f7 1000 158b3520 1101 00000300 0020 59569785 b232e0bd d6111e30 62945982 9ce275f9 2dcb790d 55b84a39 fd97afcb
+0 10 40000468 000 00000001 2b8ebee0 2b8ebee0
+0 01 4000009a 001 00001000 c580fcd5 b65c7443 b65c7443 e3db3e0f e3db3e0f 40a399a4 40a399a4 71b4bd25 71b4bd25
+1 01 4000070c 001 00001000 c73be85c 0010 c73be85c 1000 533b6b91 0010 533b6b91 1000 8df22263 0011 8df22263 1100 dc4f5ed8 0011 dc4f5ed8 0100 00005b28 0011 00000700 0020 11e1fddf 5cdcceb5 e070739f d40c32aa b73c6202 08f3c37f c7f675fc 31933f25
+0 10 4000031c 010 00001111 19fc5d0b 9086eea9 dcf6e164 026fdc4b 068ed5dc e8cede9d 75d1ec34 5799efb6 04795f09 6589b749 45f69734 4c94c0d8 7328dbdc 8f27ae55 158baa20 872e4154
+0 01 40000044 010 00001100 e4b0d5a4 5ce468cc 5ceb6d14 261d1351 f3b783c9 b7ccdb92 035db37c 0a144a5c 36577e6f 4cdaa18c 7148a4b5 198e035d 4984e96c
+1 01 4000075c 010 00000011 2127996d 1111 56b23b3b 0101 03016cba 1101 c7720bbc 1110 00000750 0020 cb51bb26 d82056ef 9b120ac6 5c6a0e0d 001d3354 7a176b17 81f07f00 de4f0643
+0 01 40000460 001 00001100 36c809c3 36c809c3 f71c9272 f71c9272 2b8ebee0 2b8ebee0 83e2bd5a 83e2bd5a cc25633f cc25633f 2930e3e0 2930e3e0 0f51a534
+1 01 40000659 000 00000010 c4266000 0000 c4266000 0100 c4266000 0000 00000650 0010 a26a325b e9250ed8 fc54f0dd 04cd5af5
+0 01 40000511 000 00000011 47bc204e 47bc204e 47bc204e d5425bc3
+1 01 40000326 001 00001000 c8d00000 1100 69eae3dc 0011 69eae3dc 0000 eea58695 0011 eea58695 0100 41b84df0 0011 41b84df0 0000 50c76388 0011 50c76388 1100 00000320 0020 e167672c a91e1b0e 398f75df 90c3c87f f7daeead 924f6b3b 7998281d ba9aba62
+1 01 400002b7 000 00000111 c9000000 0000 eeb431cd 0000 eeb431cd 0010 eeb431cd 0100 eeb431cd 1000 003da8e6 0001 003da8e6 0010 003da8e6 0100 000002b0 0010 43e7dd86 2fb48e4a bfbe3a46 3cf6a8b2
+0 01 400001c8 010 00000010 e8295472 dcaefea3 ab9d40d6
+0 10 40000790 010 00000001 2cba1bba 4b9ce3ae
+1 01 40000212 000 00001101 8d000000 0100 8d000000 1000 cecab23c 0001 cecab23c 0010 cecab23c 0000 cecab23c 1000 07b1b372 0001 07b1b372 0000 07b1b372 0100 07b1b372 1000 c21b5051 0001 c21b5051 0010 c21b5051 0000 c21b5051 1000 00000210 0010 c1371dbc 71ddd875 076af79d 366abe8c
+0 01 40000750 001 00000010 a1a14fa1 a1a14fa1 9e0c4708
+1 01 40000496 001 00000111 e86c0000 0100 eaac3750 0000 eaac3750 1100 4ef94954 0011 4ef94954 1100 dd0567f6 0001 dd0567f6 1000 00001d9b 0011 00000490 0020 148f8b3c e9cd9f08 a7567d0d 431fb79c 7ee6b437 44068d48 c3ab652f e65d8a46
+1 01 40000332 001 00001000 3ad20000 1000 86516d1d 0001 86516d1d 0100 b71f75a9 0011 b71f75a9 1000 4890c780 0001 4890c780 0100 5c5e4c2a 0001 5c5e4c2a 1100 00000330 0020 c89d92ce 8f10bdc4 f4cf5554 7f3e617d a0c28211 8a5e2a60 5d611eec 0b1c7e0b
+1 01 40000303 000 00001011 05000000 1000 bf4b7a91 0001 bf4b7a91 0000 bf4b7a91 0000 bf4b7a91 1000 4d5982d1 0001 4d5982d1 0010 4d5982d1 0100 4d5982d1 1000 0079b24e 0000 0079b24e 0010 0079b24e 0100 00000300 0010 ec13e163 440e06af c8543de4 4e2ffece
+0 10 400002ac 000 00000011 f2f47b4e f2f47b4e f2f47b4e f2f47b4e
+0 01 400001b8 001 00001011 412c936e 412c936e bada3442 bada3442 4c84c25c 4c84c25c 9206c37b 9206c37b e8295472 e8295472 dcaefea3 dcaefea3
+1 01 400000ce 001 00001010 e17f0000 1000 7ef90f70 0011 7ef90f70 1100 9c8e0341 0010 9c8e0341 0100 fc547d41 0001 fc547d41 1100 0cfb4584 0011 0cfb4584 1100 b469d24a 0010 b469d24a 1000 000000c0 0030 aa876bba 3b3743aa f78d2bc2 5efa6563 50bb499d ac2aa491 7d9ee1dd a19eb35b 497f7d39 0b7c45c1 f12eec88 13e5fadd
+1 01 4000022c 010 00001011 56919396 1011 b2320461 1111 9913e8dc 0000 314e51a4 1011 36f7ddb9 0110 b678651a 0111 57ea4651 1111 b6415c10 1111 8edcbc94 0101 fd38e703 1111 04b575d9 1111 6e6af8e5 1111 00000220 0040 d142f9ed 134caa25 075818dc b140a234 dcd9d2bf 0d669aa4 8facc466 c552d945 ab63235d f1db9fea 49ad2202 c5318a2d e250a90d 4ae06a30 945beb8b 7b23c801
+1 01 40000588 010 00000001 3715c595 1110 1ad74023 1101 00000580 0010 7780ea1b 51e3cd43 cd56af22 d2a96d90
+0 01 400000ec 001 00000100 45f4da6e 45f4da6e 39b6650b 39b6650b 2889840a
+0 10 40000524 010 00000011 2e52bbe2 4e316e62 5d45d510 a4b4b46a
+0 01 40000517 000 00001001 d5425bc3 febe29b2 febe29b2 febe29b2 febe29b2 38e4c8d9 38e4c8d9 38e4c8d9 38e4c8d9 a4b4b46a
+0 10 40000330 010 00000011 3ace4df0 5051631d b79975a9 04905f80
+0 01 40000640 001 00001100 c90561f3 c90561f3 9247722e 9247722e f9f9b916 f9f9b916 305a846d 305a846d 88ce52be 88ce52be 28c57f4c 28c57f4c 642642d6
+1 01 400006c4 010 00001010 03ed9b99 1011 f44e2147 1011 d217c276 1011 c2082785 1111 21b3027b 1110 2ff06808 1111 e21a22b7 1111 f6bf6b3f 0101 e47db19d 0111 4f729aef 1111 46cab04c 0111 000006c0 0030 fe30e13f fffa9b7b e4a984bd a8b4420a 179fa53e 2eec34e5 d213e8fc e9645788 47e7f8fc 6b5d07fa 241f6775 1c0ffe4a
+0 01 4000047e 001 00001000 b021a225 2b6d14f5 2b6d14f5 cffaab19 cffaab19 b3a94c95 b3a94c95 f6cb8097 f6cb8097
+1 01 40000396 001 00000000 092f0000 1100 00000390 0010 f7c0f1e5 d21a272a ed6d639e bb479cf6
+1 01 400000b2 001 00001011 d2b60000 0100 3cfbf15a 0010 3cfbf15a 1100 81f44396 0011 81f44396 1100 f61025cd 0000 f61025cd 1000 b7cab7a9 0010 b7cab7a9 1000 2f32ea4f 0011 2f32ea4f 1100 00003c39 0000 000000b0 0020 f546d9a7 c60e86d6 e3341c73 5a07a65d 9441d0f5 fded318e f78d2bc2 5efa6563
+1 01 4000007e 001 00001110 4d670000 1100 00497315 0001 00497315 1000 bb3da9d2 0011 bb3da9d2 0100 adbcdf7b 0000 adbcdf7b 1000 99f3c76f 0001 99f3c76f 1000 ab3c9384 0001 ab3c9384 1000 9b781f6f 0001 9b781f6f 1100 82777fb3 0000 82777fb3 1100 00000070 0030 b757afa5 d5864126 6b3690db 656753fe 357f337b e8dd6be0 f7ca1871 2d65fda1 77417eb7 f33916bd 03560fe9 aacdb248
+1 01 40000571 000 00000001 00976700 0010 00976700 0000 00000570 0010 928ce2b3 ae86670f 5e610b3a 2a98beff
+0 10 40000324 010 00000001 c8d0e164 9086eea9
+1 01 40000128 001 00001000 e927ef04 0011 e927ef04 1100 6408fee3 0001 6408fee3 0000 6737e2b7 0011 6737e2b7 1100 a8c87696 0001 a8c87696 1100 00007e71 0000 00000120 0020 bfae5cde ec9dc298 2a941ccf 84bc1e40 63999485 c1520ca1 24a686f7 d2c41a8f
+0 01 400003f8 001 00000000 cb1ce5ba
+0 10 40000496 001 00000001 2f6c54bd 2f6c54bd
+1 01 400006d6 000 00001101 ba3b0000 0100 ba3b0000 0000 3b4db545 0001 3b4db545 0010 3b4db545 0000 3b4db545 0000 bed22231 0001 bed22231 0000 bed22231 0100 bed22231 1000 2a85c4dc 0001 2a85c4dc 0010 2a85c4dc 0000 2a85c4dc 1000 000006d0 0020 3978c035 0a21d775 509bc8a6 95cbcc02 2d774e1c 853103b0 241f6775 1c0ffe4a
+0 01 40000164 010 00000011 b8bf8bb3 826d3602 d8f77aa0 3ec25cbd
+1 01 400002b8 001 00001100 8d49712a 0011 8d49712a 1100 0ab110b4 0010 0ab110b4 1100 274f3291 0000 274f3291 1100 8499ec6f 0011 8499ec6f 1100 50f6c43f 0011 50f6c43f 1100 f7917957 0011 f7917957 0100 00004766 0010 000002b0 0030 43e7dd86 2fb48e4a ad8d8397 c822bdd7 3878e87e ed1b1531 e124a622 da35cdc2 06c6ac4a 63ffb2c1 84e53f41 0e9ecd4d
+1 01 4000078c 001 00001101 6fcc1471 0011 6fcc1471 1000 79dfce1c 0010 79dfce1c 1100 09535685 0010 09535685 1100 5ba8b92a 0010 5ba8b92a 0100 517ee97e 0010 517ee97e 1100 45278606 0011 45278606 1100 b2d4551b 0011 b2d4551b 1000 00000780 0030 88fef47f fd1d394e 23383f0c 010a6b70 d589d81e 268ea213 18f9e940 29d15049 453d376c 13f4dba5 3683efb8 a36dd619
+1 01 40000381 000 00000010 a272b700 0010 a272b700 0000 a272b700 1000 00000380 0010 5499b402 5825d8a6 66540984 9ac7d10c
+1 01 400001f0 001 00000101 382d356d 0001 382d356d 1100 e51f8ad3 0010 e51f8ad3 1100 c05fbdc9 0001 c05fbdc9 1000 000001f0 0010 02446db3 64648e06 0cdd531a e3f98f50
+1 01 40000294 010 00000010 f5aee24c 1110 8eb8efab 1111 839ed412 0111 00000290 0010 24fac64a cffdf453 467919f8 e004a223
+1 01 40000149 000 00000100 11fbbc00 0010 11fbbc00 0000 11fbbc00 1000 00006397 0000 00006397 0010 00000140 0010 008d2df0 4ef8aafc 73a929d5 9256e2d5
+1 01 40000711 000 00000110 65f78b00 0010 65f78b00 0100 65f78b00 1000 8e0ecf42 0000 8e0ecf42 0000 8e0ecf42 0000 8e0ecf42 1000 00000710 0010 5cdb3f63 5fd0c683 c7f675fc 31933f25
+1 01 40000300 010 00000011 bba86707 1010 8cd1df81 1001 2cc068dc 0111 345d81a7 1101 00000300 0010 12c7400a 62a285eb eabb7c83 71013f68
+1 01 40000544 010 00001100 3b2723df 0101 a62433db 1010 56581d91 0100 1de174a1 1110 578ef739 1111 7e20faaf 1001 81170519 1011 4b16140e 1110 7d5e4799 0101 f2e15e56 1110 a7cadae4 1111 6328d474 1111 b1de2eb8 1111 00000540 0040 d2905009 03970054 fe0926b2 6adb880b 1c359428 af6dec51 49a63162 dee607cb 0cee0a26 80b7d8b9 b276bc54 4bbc4a64 bd409640 795e0052 5e610b3a 2a98beff
+1 01 400001b8 010 00001011 49f30040 1111 9c2c516a 1110 071c9e12 1111 e49a02f5 1011 369a181c 1100 021010d7 1110 e9ddd8f5 0111 a93f83e2 1011 013c13a9 0111 a391f7cf 1001 f696d433 1111 7e2240c1 1010 000001b0 0040 4624b424 88d4998e e6e07f94 d173e3eb 30a1b5ec 275ff305 f2acfd7a c956b2bc 8fbd0644 43fb2e60 c8305f51 a523c2a9 c9f9d162 de902c51 34c4027e c722ba51
+1 01 400007d2 000 00000111 eec70000 0100 eec70000 1000 80bff005 0001 80bff005 0010 80bff005 0100 80bff005 1000 0000dd0c 0001 0000dd0c 0010 000007d0 0010 9d48328c 2fcef331 36e304c8 1e43ba07
+1 01 40000414 010 00000110 ca56045c 1100 8ad4b4ac 0101 ad4ee8f2 1101 7b3fc799 1011 406e8b88 1111 4556a25b 0111 5308f0ca 0111 00000410 0020 7b522d81 ee1a1a84 ab4f185f 3d7ea9b9 40d27f0c f2f9fe6b d2b42252 52072a43
+1 01 4000077c 001 00001110 b711a990 0010 b711a990 1100 758a2f0a 0000 758a2f0a 1100 cfda1761 0011 cfda1761 1000 790b9194 0011 790b9194 1100 1780ace2 0010 1780ace2 1100 265ca580 0001 265ca580 1100 ff8fc057 0001 ff8fc057 1100 0000cd66 0001 00000770 0030 7291daff 5f5f612b 389f0b0f d6e05a5d 1504db50 b5ca871b 04110767 9bd56ab6 8c43baf2 f3fba4a0 b378287c 3b48c45c
+1 01 40000636 001 00001101 71880000 0100 998a49f5 0010 998a49f5 1100 0cfed6ad 0010 0cfed6ad 1000 f39283db 0011 f39283db 0100 7e00d29f 0010 7e00d29f 0100 c418b875 0011 c418b875 1100 45447a76 0001 45447a76 1100 0000ce44 0011 00000630 0030 1057e4b2 ffccfb92 c4e329e5 4799e5e6 740261ef d5b9e6eb d40004aa 81ecdf18 c1201870 ac74245a fc54f0dd 04cd5af5
+0 01 4000019b 000 00000001 15420b4b 30e6f850
+1 01 4000044c 010 00001111 d526ca55 0011 68ed7818 0111 d82e55eb 1110 149c7ab3 1011 f711fd81 0110 1c16bb34 1110 55005542 1011 c7933c16 1001 fb08adf6 1111 66df4455 0011 5b2af998 1111 a848c8cd 1111 24dd9b1f 1111 66edf041 1110 e0a6c6d2 0010 22d35556 1111 00000440 0050 0a0ed9a4 9befa4da db4efd3b 29ef73f4 c15b7e3f 2a3c9cdb 7ecda64a 68c58011 169e84bf 40a859b9 a9ef147c 7abae136 c12cb24f a33201ea 58d707bc 383164d2 91438be2 a10161e8 2bc2ab9e ee96f978
+1 01 40000208 001 00001111 a6f39c1e 0011 a6f39c1e 0000 6126953a 0010 6126953a 1100 16b48fab 0011 16b48fab 1000 88bb12c4 0010 88bb12c4 1000 2b6ab38f 0010 2b6ab38f 1100 0e4e0d7f 0010 0e4e0d7f 1100 a9056bfe 0001 a9056bfe 0100 075a3b2e 0011 075a3b2e 1100 00000200 0030 2dbf2cde a8a542b4 8f4adcd7 357e5499 309d52ec 81ea0cae 68282722 364511d6 57474a04 7c584f31 075818dc b140a234
+1 01 4000015a 001 00001111 973e0000 1100 ca15f507 0001 ca15f507 0000 db8b849f 0011 db8b849f 1100 71fa74a6 0010 71fa74a6 1100 9e371eb1 0011 9e371eb1 1100 27b659af 0010 27b659af 1100 c227fb3f 0010 c227fb3f 1100 81992437 0001 81992437 1100 0000d984 0010 00000150 0030 d1f9e66b 5b3d7b78 44fc4986 a5aab8d8 12e63ef2 4017aba5 477b5e45 a0603c6d 80144e39 4d7f02e3 63ef8c6f 95ed2166
+0 10 40000030 010 00000001 0205531d 32779078
+0 10 40000230 010 00000011 b2320461 01ade58b 315051a4 3df7dd28
+1 01 40000504 001 00000100 acc08c67 0011 acc08c67 0000 90c38482 0001 90c38482 1000 00006fce 0011 00000500 0010 137eb7f3 159ca2d6 d44e9404 284560dd
+0 10 400000a0 010 00001111 e3db3e0f 40a399a4 71b4bd25 de7a04c2 abb6ade0 3cfbf13e 81f44396 f623c458 00664a15 2f3da9d2 adf53a4d 9944aa6f abd0dd84 9b78d66f 8277fcd5 b65c7443
+0 01 400005b2 000 00000001 abccf16c abccf16c
+0 01 4000007e 000 00001000 4d6773ff 4d6773ff 00664a15 00664a15 00664a15 00664a15 2f3da9d2 2f3da9d2 2f3da9d2
+1 01 400005bf 000 00000000 4f000000 1000 000005b0 0010 bb588f00 4538c68d 41d90c56 aac83c07
+0 10 400003bc 010 00000011 3d9b7109 b8302d5a cbd86ffa 6437cfce
+0 01 40000170 010 00001100 c227fbbd 81990437 d442d917 739d10f1 09eee566 8d7747b2 d6076068 1c65f03c a62a4e83 9950b77b 15420b4b 30e6f850 94da2db5
+0 01 40000058 000 00000111 b7ccdb92 b7ccdb92 b7ccdb92 b7ccdb92 035db37c 035db37c 035db37c 035db37c
+0 10 400001a4 010 00001111 e57d9e93 08694ce8 362f1b3e 8a772f73 70803246 49f30040 9c2c5142 09eee566 8d7747b2 d6076068 1c65f03c a62a4e83 9950b77b 15420b4b 30e6f850 94da2db5
+0 10 400002e3 000 00001111 21f42f15 47006744 47006744 47006744 47006744 2c4c31be 2c4c31be 2c4c31be 2c4c31be 26960cc3 26960cc3 26960cc3 26960cc3 21f42f15 21f42f15 21f42f15
+1 01 40000158 001 00001110 2c47512c 0010 2c47512c 0100 e502be8a 0011 e502be8a 1000 04a3a502 0001 04a3a502 0100 ce655b20 0000 ce655b20 0000 c56fcc86 0011 c56fcc86 1100 c526da1f 0011 c526da1f 1100 189181ab 0001 189181ab 1100 000024a9 0011 00000150 0030 d1f9e66b 5b3d7b78 5963f0bd 3fd710b9 7c29b56b d36e40ba bdcc0e11 5c9df933 c9208c79 565c8db8 63ef8c6f 95ed2166
+1 01 40000115 000 00001010 afc1de00 0010 afc1de00 0000 afc1de00 1000 d6d2938e 0001 d6d2938e 0010 d6d2938e 0100 d6d2938e 0000 ce43fb1c 0001 ce43fb1c 0010 ce43fb1c 0100 ce43fb1c 0000 00000110 0010 7fd5769f f5f0a924 0b0b3875 32c97a50
+1 01 4000024c 010 00000100 fc3a080c 1111 722f0f03 1110 8debe33e 1111 41fe80b5 0101 6e9dc95c 1111 00000240 0020 ab63235d f1db9fea b8e0c107 1fe47e39 a8d83641 eb064803 843ccf90 23091ddc
+1 01 400004b0 010 00001101 3b22bc25 1100 72462def 1100 a64d07ec 0001 9f890b82 0111 2b152b2b 1111 a634794e 1011 1577a777 1111 01b96c7b 1111 439827a0 1101 a5e0f776 1101 a34106ab 1011 a7342ad2 1111 d2d70feb 1111 163a0a86 1111 000004b0 0040 9ddcd66d 09b98ab2 7d8b967a 5531c08f 9ced957c 80c500d3 e7626fe7 181b82b9 8a8effef b5752644 f36f2392 b177eca7 e8bfd832 2d1a4d81 ed53dbd1 d4db2747
+1 01 400005ec 001 00001011 2ed332bf 0001 2ed332bf 1100 641c3878 0011 641c3878 1000 69fa29ff 0011 69fa29ff 1000 f059e2c2 0011 f059e2c2 1100 4a600a9b 0011 4a600a9b 1100 636be011 0001 636be011 0000 000005e0 0030 5040624b c6ca594c da141944 a78aac8d 253f7e3d 2194dc4a cb6f6fb0 7c80e4a9 1c92d964 6a81e290 61bfc414 730ba9d0
+1 01 400000e8 001 00000010 b2c95cc9 0000 b2c95cc9 1100 0000340e 0001 000000e0 0010 497f7d39 0b7c45c1 4536fafc d1119fa4
+1 01 400003a7 000 00000011 0b000000 1000 00654dc0 0000 00654dc0 0000 00654dc0 0100 000003a0 0010 46a7afe1 2931ae82 1d7e6368 230e2163
+1 01 40000550 001 00000011 a09859de 0011 a09859de 0000 9c762556 0011 9c762556 0000 00000550 0010 febbdfd6 1c5c73cc 49a63162 dee607cb
+1 01 400007f2 001 00000100 80880000 1000 10abf3a4 0011 10abf3a4 1000 a262d2bb 0011 a262d2bb 0100 000007f0 0010 fb715bb8 28f12450 8c665882 af5d90ce
+1 01 400001ea 001 00000000 4f9a0000 0100 000001e0 0010 c9f9d162 de902c51 1ce29420 ee7f3a51
+1 01 40000427 000 00000011 42000000 1000 00467ea4 0001 00467ea4 0010 00467ea4 0100 00000420 0010 25765305 f2c99cca d1eed323 eb7897d3
+0 10 40000160 010 00000111 dba38402 71fa74b3 c56fcc86 c526da1f 1891fbab 819924a9 d442d917 739d10f1
+0 01 400000e0 010 00001100 b4f4d21b 1f2921ec b2c98e5d 45f4da0e 39b6650b 2889840a 9090df0d 6456d288 1be96744 38e20e46 2fecad96 256adc22 fe51aaac
+0 01 40000208 000 00001111 f92e9c1e f92e9c1e f92e9c1e f92e9c1e 61269509 61269509 61269509 61269509 16008fab 16008fab 16008fab 16008fab 888a123c 888a123c 888a123c 888a123c
+0 10 400005ce 001 00000111 ff30b868 b62bd3c0 b62bd3c0 1ef53947 1ef53947 78754a58 78754a58 ff30b868
+0 01 400001d0 010 00000011 abddd8f5 a98183e2 dc3c13a9 a39473cf
+0 01 4000056b 000 00000101 f2e15e87 a7cadae4 a7cadae4 a7cadae4 a7cadae4 6328d474
+1 01 400000b0 010 00000101 c6b2a22a 1100 5f60dc63 0111 1d126388 1100 3f325e97 1111 fbd0c791 0111 7dd5c0ac 1011 000000b0 0020 da4acd82 4e525d69 5cab5f4e c3cdba1e 2beb777f 8066fec7 f78d2bc2 5efa6563
+1 01 40000186 001 00001100 9cb40000 1000 287e5466 0010 287e5466 1100 fed28937 0011 fed28937 1100 41d69690 0010 41d69690 1100 8d884ba6 0000 8d884ba6 1000 b42eb3b4 0011 b42eb3b4 0100 c4d563e4 0001 c4d563e4 1100 00000180 0020 4552d41a 5b328cd1 e6199549 4cb44f86 aac5c632 9e91f1bd 413bcef7 9d80bbbb
+0 10 400003fa 001 00000011 cb1ce5ba aff0fbb7 aff0fbb7 cb1ce5ba
+1 01 40000728 010 00000011 5dd9dd31 0111 54db8dc5 1101 5e9023d7 1011 4747afa9 1100 00000720 0020 0b7ae01d 7ef9d873 e4b94df9 5dc9d247 dbd868ea 0955e527 59a75832 5a8a2f12
+0 10 4000065c 010 00000111 f3c76b11 c99283db 9200d22e c418b875 45448476 88cece44 28c57f4c 642642d6
+0 10 400007b2 001 00001111 ad43f1b5 6b0fb102 6b0fb102 efbd6794 efbd6794 88fb3f12 88fb3f12 45278606 45278606 b2ee551b b2ee551b cb4ef142 cb4ef142 da65fa3e da65fa3e ad43f1b5
+1 01 40000086 001 00001111 b5910000 1100 7938d02a 0010 7938d02a 1000 c6d5ce81 0011 c6d5ce81 1100 79a2ff0c 0011 79a2ff0c 1100 4f6fdd14 0011 4f6fdd14 1000 4a1d5c1a 0011 4a1d5c1a 1100 8c259fd2 0011 8c259fd2 1100 3edf5aef 0001 3edf5aef 0100 0000f79d 0001 00000080 0030 b21880c3 ad084dae 4f7a77c4 63f14aed a8bff5b1 7f2d7361 293c8ecc ee869bb8 c0cc66a5 6c405fe1 bb9c7233 9a638bae
+1 01 400004d8 010 00001101 eac397e2 1011 fbf8392a 1101 cf5fa5a0 1111 bdde574e 0010 5c672872 1110 7e197cc4 1111 ba92a8f0 0010 2d3e183f 0111 83195d06 1110 785c474d 1101 2ea20f78 1011 0d21e6fe 1011 42c72537 0011 53148ced 0111 000004d0 0040 8a8effef b5752644 898cc606 8111c537 b641491d e40eb73f 30664ba1 f70d941f 3c197fe7 2b8c6742 bda39c51 bb7111ff 85a2711a 4b0939e3 7c2d6211 2d359c79
+1 01 400006ad 000 00000110 4684d800 0010 4684d800 0100 4684d800 0000 3a4ed5a8 0000 3a4ed5a8 0010 3a4ed5a8 0100 3a4ed5a8 1000 000006a0 0020 d2f2363e 88731c8e 090bbeb8 8b4c55c5 62d92edc e2665220 be11c757 9d244fbe
+1 01 400001cc 010 00001110 a2d36fa4 1101 d43bfd97 1101 44ac506b 1111 688936dd 1110 bf45d3e0 1110 525c2b5e 1101 9e1a181f 1101 d2c215b4 0110 29ebfab2 1101 cb917cd6 1101 9b54782f 0100 ade4f184 0011 26f59c84 1101 ffd26299 1011 a3c42842 0111 000001c0 0050 30a1b5ec 275ff305 85a05191 4fbbdb4c f07c4c42 135b546c 06feb77d 00128201 f14b9169 482e42eb 4b9e2ed9 a9e4e5d9 d4f694be c233b3a1 ca96ab07 8c8dbdc7 76c61dfe dc554f63 8f4adcd7 357e5499
+1 01 40000034 001 00000100 33476c68 0011 33476c68 0100 37052063 0010 37052063 1100 00008974 0000 00000030 0010 4ba89be2 9d0a5a96 93bde66a d5a44fab
+1 01 400004f8 001 00000011 76e3f458 0010 76e3f458 1000 ce232200 0001 ce232200 1100 000004f0 0010 3c197fe7 2b8c6742 3e63d250 37cf5763
+1 01 40000788 001 00000001 f159c964 0010 f159c964 0100 00000780 0010 1504db50 b5ca871b afbc4ba7 c89ea336
+1 01 40000408 010 00000101 30c0e917 1110 ab71532f 1111 cd5027ce 1110 4b636193 0111 58da3294 1111 2b658d2a 1111 00000400 0020 89cd5f48 ab65cdf1 9ce9d8cf 27275bf9 3a4bf520 7c75767a 58174e6c 440b3cdd
+0 01 40000264 000 00000000 c12cbb8f
+1 01 4000003c 010 00000111 7ce162cf 1001 495ce051 0101 6cb53e0c 0101 a269fdf5 1110 95b0ad6e 1111 fabbd264 1110 9dcabcfc 0111 56a5a12c 1111 00000030 0030 4ba89be2 9d0a5a96 b865e9a8 230567af d6e2215f fdd6c8c6 e653d6b1 0285010e e1f85360 38981e23 54dbde9a 44c14f10
+1 01 4000044c 010 00000010 3728f966 0101 5f1704c6 0111 32a6b8c2 1111 00000440 0020 0a0ed9a4 9befa4da 1c894cbb 793dcd50 487b5ccf eae9a823 7ecda64a 68c58011
+0 10 40000322 001 00000111 9086eea9 c8d0e164 c8d0e164 026fe3dc 026fe3dc 06a58695 06a58695 9086eea9
+1 01 400004c4 001 00001111 c790c365 0011 c790c365 0000 510175d5 0001 510175d5 1100 e78ca5fe 0011 e78ca5fe 1100 25064436 0011 25064436 1000 fea688ff 0010 fea688ff 1100 49dc7995 0011 49dc7995 0000 977035c2 0010 977035c2 1100 5562032c 0010 5562032c 0000 000004c0 0030 35356829 1f4b0115 727159bd 12370574 2ef4dd91 4b70deb1 674e66fa 2ba3c0f9 5b6bc2a9 ca7b9599 30664ba1 f70d941f
+1 01 400006a2 001 00001010 78f40000 1100 76d993d1 0000 76d993d1 1100 18b97ba1 0011 18b97ba1 1000 5c9343b6 0011 5c9343b6 1000 96bf6f61 0001 96bf6f61 1000 02d89a0e 0011 02d89a0e 1100 000006a0 0020 585af17f c008514a bf4a5d82 5f7ffc60 5c6bf266 4e6705d2 be11c757 9d244fbe
+1 01 4000024e 000 00001001 2f140000 0000 2f140000 1000 149dd499 0000 149dd499 0000 149dd499 0000 149dd499 0000 e1cc014f 0001 e1cc014f 0000 e1cc014f 0100 e1cc014f 1000 00000240 0020 ab63235d f1db9fea 025202fa 030b3856 bbe2fad5 5467c87c 843ccf90 23091ddc
+1 01 40000728 010 00001001 e49df584 1111 27d06eb7 1111 88bd51b1 1101 b1aed767 1001 e99415f7 1111 a48e4c89 1111 5a8727bc 0111 af3bfd55 1010 36e236f2 1101 4c4e661d 1101 00000720 0030 0b7ae01d 7ef9d873 ad1472cc 37b67c1d 9d77fe19 56f895ff 75e2b2b7 4144a287 a177349d dc8dea36 70be028f e29007f8
+1 01 400002f4 000 00000111 f17a2719 0001 f17a2719 0010 f17a2719 0100 f17a2719 1000 f10c6011 0001 f10c6011 0000 f10c6011 0000 f10c6011 0000 000002f0 0010 1165988f a9505a6e c2105fad 568e5e33
+0 10 40000688 000 00000001 95075a41 95075a41
+0 10 400003bc 000 00000001 3d9b7109 3d9b7109
+0 10 40000268 010 00000111 979bc18a 002ea538 003ab791 d74528d5 e7c887ba e61aa16f 17384c8a c12cbb8f
+1 01 400002e4 000 00000010 00c00407 0000 00c00407 0010 00c00407 0100 000002e0 0010 4b58e381 401b6fbf 65b030af cac9e511
+0 01 400007e5 000 00000011 acc76b05 acc76b05 acc76b05 7eeca2b6
+0 01 40000534 010 00000010 cfe038e3 9895a94a 21980110
+1 01 4000026a 001 00000101 ebe40000 0100 9f444e6c 0011 9f444e6c 1100 3cc03d18 0001 3cc03d18 1000 0000e2c4 0010 00000260 0020 428e5192 106b587e 805c5e3e f5ce4d8a 7ff42b6e c5ce789a 59f7c5ff 39a48ed2
+1 01 4000012c 001 00000001 27521949 0010 27521949 0000 00000120 0010 bfae5cde ec9dc298 61e5b47d 9145d352
+0 10 400004f4 001 00001111 803e183f 803e183f 7619f4de 7619f4de ce238c00 ce238c00 cf5f03a0 cf5f03a0 163a5786 163a5786 5c672835 5c672835 7e197cc4 7e197cc4 5f19a8c2 5f19a8c2
+0 01 4000006d 000 00000000 7148a4b5
+0 01 400001ef 000 00000011 29eb3fb2 cb9187d6 cb9187d6 cb9187d6
+1 01 400001bc 010 00001011 34674849 1111 3ec36d61 1010 40426a36 1101 ed791d38 1010 b968ad12 0110 138d8789 1111 31b01c78 1111 5cd058e0 0111 728411a3 1111 42130e2e 0110 fba23fb3 1011 c6991e1e 1100 000001b0 0040 4624b424 88d4998e acb8cb5e cd384d94 346b5976 db6e960f 889dc56b 43eb3e3e 6f2adc43 56a1f303 c4008493 b2475b7d f8d92886 12af0f73 ca5c58b9 c3b5098e
+0 01 40000629 000 00001110 055de712 055de712 055de712 171a08eb 171a08eb 171a08eb 171a08eb 025f303a 025f303a 025f303a 025f303a 98881b54 98881b54 98881b54 98881b54
+1 01 40000210 010 00001100 d9ab04e8 0101 1e9db01e 1110 f6b42baf 1111 8dd8bde6 0010 ccb3fd87 1111 b5a6bffd 1110 6500b5da 1110 b525e5b8 1110 aa609795 1011 f71f7466 1111 f5b45d30 1110 be20c364 1100 17e378db 1111 00000210 0040 24cf28f6 1b63d09e 420149e2 db0af060 496484b7 a7ed1ac0 f700f2ae 8b0edee6 9d52eb00 d8f685d6 7b42e671 da49fb24 fcacd773 a1ca6d1b 025202fa 030b3856
+1 01 4000068c 010 00001010 3c09b65f 0101 d00e353c 0011 6f8fcb49 1111 6b20bb92 1110 d8606ca8 1100 7a16aa35 1101 b2cd8af4 1111 194db2fc 1101 06d65763 0011 a6ea51d1 1110 dc7f58bb 0111 00000680 0040 b1a74528 c4c475bd f8ad7787 911c03e8 a8aecd4b 690fd0bb cc809e59 e0a4ffed c688ea23 7390349d 446a19b4 89c57e7a 1ef4151d a4af24b9 be11c757 9d244fbe
+1 01 400001fc 001 00000110 ed401c0b 0011 ed401c0b 1100 f0fcaa42 0000 f0fcaa42 1100 6a9f97ed 0010 6a9f97ed 1000 00007605 0010 000001f0 0020 d4f694be c233b3a1 21760ee4 d5496a90 f72d2081 8b6de060 9565f623 30d9a495
+0 10 40000660 010 00001111 561c9447 45e722d8 bf6fe6aa 0cd5caf2 ea5a5f66 74450ecc 5b97a69b b59585ee c99283db 9200d22e c418b875 45448476 88cece44 28c57f4c 642642d6 f3c76b11
+0 01 4000027c 010 00000010 e61aa16f 96331245 257a2c0f
+1 01 4000056c 010 00001101 bc421f99 0100 bb6a55a4 0010 82047b1c 1110 d61fc8d4 1111 4fde4489 0011 069ec997 0110 73b57703 1111 64e61c74 0111 077e096c 0100 3e3e5856 1101 b7d55a9e 0100 561d538c 1010 3b461fbf 1111 2129f7ac 0111 00000560 0050 0cee0a26 80b7d8b9 be2d276f 83195e02 b5a89c24 646e5fc5 02b20986 55c6acea eaeab411 286bcaca 5d5e3d21 1e52df6e bf910d89 ca0e17dc 6f390f27 63e18a4e 27f8ab99 b12f522e a26aa1ba 1f18bb7e
+1 01 40000383 000 00000111 5d000000 1000 a89bfb81 0001 a89bfb81 0010 a89bfb81 0100 a89bfb81 1000 00f6431e 0001 00f6431e 0010 00f6431e 0100 00000380 0010 dbebc29d 6b9f9ad8 f7a985cd 580e0326
+1 01 40000754 001 00001001 74c70c38 0010 74c70c38 1100 e85a5f52 0011 e85a5f52 1000 58658469 0011 58658469 1100 5b2e43ac 0011 5b2e43ac 1100 ded9beba 0001 ded9beba 1100 00000750 0020 275f4f11 3716659b e97909bb 9c2290dc a77fc12e 605f5a75 81f07f00 de4f0643
+1 01 40000614 000 00000000 0000005d 0001 00000610 0010 70e20f59 8018fd52 737cdd80 f0c683cb
+1 01 400005ff 000 00000111 18000000 1000 d0f2627b 0001 d0f2627b 0010 d0f2627b 0100 d0f2627b 1000 007a1360 0001 007a1360 0010 007a1360 0100 000005f0 0020 253f7e3d 2194dc4a 64e23196 0906c1a3 2e1f0a4b 9d48c3b8 61bfc414 730ba9d0
+1 01 40000682 000 00001000 3b4a0000 0100 3b4a0000 1000 b2301116 0001 b2301116 0010 b2301116 0100 b2301116 1000 00c0c555 0000 00c0c555 0010 00c0c555 0000 00000680 0010 aee45546 a6761926 4d01d74f 057023a5
+1 01 400000ba 000 00001110 41990000 0100 41990000 1000 656106da 0000 656106da 0010 656106da 0100 656106da 1000 cac2b73c 0000 cac2b73c 0010 cac2b73c 0100 cac2b73c 1000 128b436a 0000 128b436a 0000 128b436a 0100 128b436a 1000 0000003a 0001 000000b0 0020 da4acd82 4e525d69 86d3829a 4bb64214 0a2fd01c 7c725335 826b8263 af27e4c9
+1 01 4000078d 000 00001000 3474d700 0000 3474d700 0000 3474d700 1000 c7466bbb 0001 c7466bbb 0010 c7466bbb 0100 c7466bbb 0000 000057da 0001 000057da 0000 00000780 0020 1504db50 b5ca871b b3468654 fd637824 a52b8251 4d9c085a b378287c 3b48c45c
+0 10 400001ac 001 00000011 362f1b3e 362f1b3e 08694ce8 08694ce8
+1 01 40000068 010 00000011 1c1b5121 1111 e5338fc7 1111 875ae94c 1010 43b4a3b3 1100 00000060 0020 85564075 dff82466 bd810caf 4092dcc3 522c3c6c 3b90966c 6b3690db 656753fe
+0 10 400001aa 001 00000001 08694ce8 08694ce8
+0 10 40000204 001 00000001 6ac49742 6ac49742
+1 01 400003c0 001 00000100 895ca43f 0011 895ca43f 1100 a102f6d3 0001 a102f6d3 0100 000085b7 0010 000003c0 0010 e9b4ca54 6ab3a893 2da3df44 7e77f6ae
+1 01 40000604 001 00000101 f1448ef2 0010 f1448ef2 1100 6d573ab0 0011 6d573ab0 0100 beee05f9 0011 beee05f9 1100 00000600 0010 b80ab16d a03b3d18 19fdfb0f 55c9a711
+0 10 40000634 001 00000011 98881b54 98881b54 025f303a 025f303a
+1 01 400002b4 010 00000101 131b6a02 1111 4b9e1d4c 1101 ed5fc89e 0101 dc994adb 1001 47ace013 0111 58a9cc49 1111 000002b0 0020 a47e64ea 373a1db2 03a3976b 782285db 9dfea631 e0f2ca37 cfab4603 1ea9d384
+1 01 400004be 000 00001000 f5a40000 0100 f5a40000 1000 c6ad4ebb 0001 c6ad4ebb 0010 c6ad4ebb 0000 c6ad4ebb 1000 00a6820d 0001 00a6820d 0000 00a6820d 0100 000004b0 0020 9ddcd66d 09b98ab2 b68182bd 0e4e50e0 bb708848 7bc8a484 727159bd 12370574
+0 01 4000060f 000 00000001 beee05f9 0af13d96
+0 10 4000025a 001 00000011 6efef8b5 6e9dc95c 6e9dc95c 6efef8b5
+0 01 40000350 010 00000111 19e3a923 8f11bdce 3ad9f88b 13e8520b efec2d69 360a8906 12e99442 69e77d51
+1 01 40000200 001 00001111 7607dd39 0010 7607dd39 1100 0124d8ac 0001 0124d8ac 1000 0c350d99 0010 0c350d99 1100 9a6fb3e7 0011 9a6fb3e7 0100 a367426b 0010 a367426b 1100 89788909 0010 89788909 0000 1623d91d 0011 1623d91d 1100 5cf52e7a 0000 5cf52e7a 1100 00000200 0020 66f54697 b817306a 0ce79787 b8d8a13a 68590956 bf4a3ed8 30a0ad3a 2873db60
+1 01 4000008c 001 00000000 0000de59 0001 00000080 0010 b21880c3 ad084dae 0c3d0401 161b450d
+0 10 40000204 010 00000011 01c497ac 0c350d1e 616fb3e7 7607dd99
+1 01 400003ad 000 00000110 98136b00 0000 98136b00 0100 98136b00 1000 9fa68f45 0000 9fa68f45 0000 9fa68f45 0100 9fa68f45 0000 000003a0 0020 46a7afe1 2931ae82 c049635e 352aa811 24f06303 8324b393 3ad04a70 3ad640a1
+0 10 40000428 010 00000011 31467ea4 1508f0ca 7be4c799 426e8b88
+0 10 40000626 000 00000111 68fd9940 68fd9940 e0ecf408 e0ecf408 e0ecf408 e0ecf408 68fd9940 68fd9940
+0 01 40000276 001 00001111 d745e2d5 e7c887ba e7c887ba e61aa16f e61aa16f 96331245 96331245 257a2c0f 257a2c0f a4bc0f48 a4bc0f48 fcba8d2f fcba8d2f a6948ad2 a6948ad2 f5aee230
+1 01 40000760 010 00000010 75163cf1 1111 b9579376 1111 ed3e676c 1100 00000760 0010 8fcf312d 26e4095b 2a4ab890 4af3edb0
+1 01 400005d0 001 00001001 e0bc0700 0011 e0bc0700 1100 317e6e26 0011 317e6e26 1000 f2526b3f 0010 f2526b3f 1100 07d32b1f 0011 07d32b1f 1100 5ceb7c0a 0011 5ceb7c0a 1100 000005d0 0020 91eccd1f fa590b6e ba043313 0edc2214 379507e8 ed1f4a42 da141944 a78aac8d
+1 01 400002e8 000 00001100 90f60143 0001 90f60143 0010 90f60143 0100 90f60143 0000 c1d75b62 0001 c1d75b62 0010 c1d75b62 0100 c1d75b62 1000 f1278929 0001 f1278929 0000 f1278929 0100 f1278929 1000 00000074 0001 000002e0 0020 4b58e381 401b6fbf bb0fcdfa 283f8dab e4e4958a c2d58fb4 c2105fad 568e5e33
+1 01 4000026f 000 00000101 e4000000 0000 89809500 0001 89809500 0010 89809500 0100 89809500 1000 000000ae 0000 00000260 0020 428e5192 106b587e 805c5e3e f5ce4d8a c9340b76 a79a1d38 59f7c5ff 39a48ed2
+0 10 400006f8 001 00000001 b4c30c42 b4c30c42
+0 01 40000524 001 00000101 2e52bbe2 2e52bbe2 4e316e62 4e316e62 5d45d510 5d45d510
+1 01 40000628 010 00001100 06ee3858 1111 2ae9cc2a 0110 bda98a51 0101 1dae6d19 0011 1b557fd0 1111 7a1fcbb6 1101 284aa389 1111 c65603af 1011 4706f0a8 1111 e500964a 1100 373ef9c2 1100 f905e8de 1100 8e893e7d 1001 00000620 0040 fe57dce8 dfe83deb 7a81a165 080d84e3 3ad6cafb b94953a6 5fc951d5 a5bb7468 09e68b2e 2006412a 3e3ccceb 7d4f5719 e0f1bb65 8cc7a3b9 7bbdd1e8 bbde5238
+1 01 40000256 001 00000001 cdaf0000 0100 0000b5a4 0011 00000250 0010 61dbd432 4aa4e13c ecd4a7b6 20f42ce5
+1 01 400000c9 000 00001001 48ecd700 0010 48ecd700 0100 48ecd700 1000 552add34 0001 552add34 0010 552add34 0100 552add34 0000 00e9653f 0001 00e9653f 0010 00e9653f 0100 000000c0 0020 0a2fd01c 7c725335 7aa68659 c8fd75d6 6fdcbbc2 6edffd2c 7d9ee1dd a19eb35b
+1 01 40000630 001 00000000 00000a27 0001 00000630 0010 05c14209 50a65467 5fc951d5 a5bb7468
+1 01 4000040c 001 00000001 bde0376e 0010 bde0376e 1000 00000400 0010 89cd5f48 ab65cdf1 3f176208 cddf7c2e
+1 01 40000254 000 00000010 007b0013 0001 007b0013 0010 007b0013 0100 00000250 0010 19eebf4e c098ebe1 ecd4a7b6 20f42ce5
+0 01 400006af 000 00001110 5c845763 a6ea5161 a6ea5161 a6ea5161 a6ea5161 027f58bb 027f58bb 027f58bb 027f58bb 0accb874 0accb874 0accb874 0accb874 bd81f880 bd81f880
+1 01 400005a0 010 00000000 60120c11 0001 000005a0 0010 6faec2b9 ddff2552 a26aa1ba 1f18bb7e
+1 01 40000734 010 00000100 88f8674b 0101 92083ecd 1110 8ebc6b6e 1111 8f3a12cb 1111 4fffa10f 1001 00000730 0020 ada44c7b 0b130b66 75902cdb 9fe8b1fa 0b167d7a b35d9b8c 70be028f e29007f8
+1 01 40000794 001 00000001 217b46ae 0011 217b46ae 0000 00000790 0010 a19b1174 05cbf5e5 b378287c 3b48c45c
+0 01 40000710 010 00001100 65f78b5e 8ef22263 934f5ed8 ed5d5b28 35b4678f 7d2e853e e49df584 27d06eb7 88bd23b1 b1f8924b 92083ef7 8ebc6b6e 8f3a12cb
+0 01 4000067c 001 00000100 b59585ee b59585ee 3b4aa4e8 3b4aa4e8 b2301116
+1 01 40000458 010 00000010 1f85331b 1011 026f130a 1111 e75f82c5 0111 00000450 0020 487b5ccf eae9a823 b9b77c5f 8b8f1a7e 98bbfd15 6a98f1ca a9ef147c 7abae136
+0 10 40000109 000 00000111 2fecad96 2fecad96 2fecad96 256adc22 256adc22 256adc22 256adc22 2fecad96
+0 01 4000043a 001 00001110 49d78f15 6da06fa2 6da06fa2 abcaeadb abcaeadb de997835 de997835 9b7d3fa6 9b7d3fa6 a028ca66 a028ca66 ab1704c6 ab1704c6 32a6b8c2 32a6b8c2
+0 10 4000007b 000 00000011 eff07626 eff07626 eff07626 eff07626
+0 01 4000079e 001 00000010 517ee901 45278606 45278606
+1 01 40000786 001 00001101 57e80000 1100 5a4ad029 0011 5a4ad029 0100 a25d519d 0001 a25d519d 1100 144ba412 0011 144ba412 1000 5c4d74a1 0011 5c4d74a1 0100 60689444 0011 60689444 1100 ff35f274 0010 ff35f274 1100 0000b438 0010 00000780 0030 38f2b742 513d8032 84adfaf3 0ffbe153 4293dc44 515c2966 23f84eb9 a8a7fd8d e74df88a 61f5fbd7 3683efb8 a36dd619
+1 01 400002ba 000 00000000 00ba0000 0100 000002b0 0010 a47e64ea 373a1db2 77e8f94c cef6e3ab
+0 10 40000252 001 00000111 722f0f03 e17b0013 e17b0013 6efeb5a4 6efeb5a4 6e9dc95c 6e9dc95c 722f0f03
+0 01 40000508 010 00001110 90f02537 e6148ced 47bc204e d5425bc3 febe29b2 38e4c8d9 a4b4b46a 2e52bbe2 4e316e62 5d45d510 b96c7660 cfe038e3 9895a94a 21980110 5978379c
+0 01 400002e4 010 00001011 47c00444 2cf60143 c1d75b62 f127c129 f17a2774 4082b611 9106170f bb896749 8cf69781 4dc068dc 345db2a7 8f27ae55
+1 01 400007dc 000 00000111 5f12373a 0001 5f12373a 0010 5f12373a 0100 5f12373a 1000 b65f9bb2 0000 b65f9bb2 0010 b65f9bb2 0000 b65f9bb2 1000 000007d0 0020 9d48328c 2fcef331 f2ce4c5c a9043f2a 0c2efcd3 c1a8db3f ed8312c3 6db66e6e
+1 01 400000b2 001 00001100 827f0000 1100 a9766fef 0011 a9766fef 1100 a943e795 0000 a943e795 1100 bd1fe4ec 0011 bd1fe4ec 1000 23e36936 0000 23e36936 1100 2d95e2f2 0011 2d95e2f2 1100 c743b65b 0001 c743b65b 1100 000000b0 0020 e4f226de 2b144a76 9a09e2b4 f57bf5c2 d97a8791 c19b0c75 6cd739c3 049bb545
+1 01 400006bc 010 00001001 a359b5b8 1011 924a3907 1001 3d987552 1111 29ef1206 0100 c60b175a 1110 439597b1 1111 36cc7ef9 0000 ea3ea3be 1011 dc957442 1110 232b46d4 1000 000006b0 0040 1ef4151d a4af24b9 bdca6635 90af160e 44fac3ac 4b331b45 1bb9c2f2 d0c8a363 3cc25872 b9147c24 987990b2 b5386aed 6165b8ad 3b95850f 241f6775 1c0ffe4a
+0 01 400006e9 000 00001111 4f729aef 4f729aef 4f729aef 8ecab04c 8ecab04c 8ecab04c 8ecab04c 81ccf7c1 81ccf7c1 81ccf7c1 81ccf7c1 2c67bbaf 2c67bbaf 2c67bbaf 2c67bbaf b4c30c42
+0 10 40000285 000 00000001 257a2c0f 257a2c0f
+1 01 40000670 010 00001010 13bbc0a7 1111 dfeffab7 0011 bb7cbd2f 1100 513ccbc8 1100 fa80aa2b 1110 925a32b4 1111 34f047c6 1000 3fa8481a 0101 701e70d1 1010 dbd06fb7 0101 84ade8b0 0111 00000670 0030 7fc54bc6 73f41fdd b69ec81e 826539fa 3a496153 009f8492 4e56cee1 95891968 3c163907 8b23a11c f7ef8164 4ee81c1b
+0 01 40000622 001 00000000 e0ecf408
+1 01 4000009e 001 00000011 655d0000 1100 41c58b12 0001 41c58b12 1100 00000b46 0011 00000090 0020 a8bff5b1 7f2d7361 4c16706b 8455e962 982ac04e 8fa5c57e bb9c7233 9a638bae
+1 01 400007b8 010 00001111 6cc798c1 1111 8c207024 0011 51d7ef4d 1101 9be81c07 1011 eb4ccae8 1100 1282cc06 0111 c7e588b4 1111 a5b518b4 1011 e43a5392 1101 195c449e 0011 f65efd61 1111 841a5d4c 1101 68c680b3 0011 4209251a 1111 844565f1 0001 4c6c9796 0111 000007b0 0050 29763c66 61db156f 346326bc d5db3695 3c97b85c f2ec5466 4a61a022 7cc2b109 6f1eafde 3931ef3d a4b1757e 59bc9fd4 35eae44b f2881a22 6a47c7e2 99982d7c e8ef96f8 59b8964e 8c665882 af5d90ce
+1 01 4000078c 010 00001000 78e3b0ea 0111 a55a0e2a 0111 aa6833b8 0100 2d839d1c 1111 1ca9d1b5 1101 c79e075d 0110 b97a9212 0111 7460c1b8 1101 7c544498 1111 00000780 0030 38f2b742 513d8032 375fb208 66451f66 993ca448 00834d51 d25757f9 62468485 bf9ec09a 6d813e4d 963106f7 99151598
+0 01 400006ea 001 00000110 4f729aef 8ecab04c 8ecab04c 81ccf7c1 81ccf7c1 2c67bbaf 2c67bbaf
+0 10 4000037c 001 00000111 4313f65f 4313f65f 261bcb5d 261bcb5d a3748790 a3748790 b29b1e13 b29b1e13
+0 01 4000063c 010 00001101 7a1fd6b6 284aa389 c60003af 4706f0a8 e5008476 373ece44 f9057f4c 8e26427d f3c76b11 561c9447 45e722d8 bf6fe6aa 0cd5caf2 13bbc0a7
+1 01 4000075d 000 00001100 a20c2900 0010 a20c2900 0100 a20c2900 1000 17958f56 0001 17958f56 0010 17958f56 0100 17958f56 1000 54188ac6 0001 54188ac6 0000 54188ac6 0100 54188ac6 0000 00000ea1 0001 00000ea1 0000 00000750 0020 275f4f11 3716659b c0cca4dc 8d674a7a 68cba157 06c23fa0 a6ed3389 b94ba581
+0 01 40000412 000 00000000 cd502780
+1 01 400007ee 000 00000110 c2260000 0000 c2260000 1000 3b2b0899 0001 3b2b0899 0010 3b2b0899 0000 3b2b0899 1000 00000023 0001 000007e0 0020 35eae44b f2881a22 59b580ff d495554b a9b41f28 8d2dc3ca 8c665882 af5d90ce
+0 10 400007d0 000 00000111 c7e588b4 c7e588b4 c7e588b4 c7e588b4 a5bf18b4 a5bf18b4 a5bf18b4 a5bf18b4
+0 10 400007e8 000 00000111 7eec80b3 7eec80b3 7eec80b3 7eec80b3 c209251a c209251a c209251a c209251a
+1 01 4000071c 010 00000001 48ea0d21 1010 086c673a 0111 00000710 0020 5cdb3f63 5fd0c683 11f1e8d6 1499537f 95bac29a 248666bf ad1472cc 37b67c1d
+1 01 40000646 001 00000000 67ac0000 1100 00000640 0010 71d6998a b5322ca5 3e3ccceb 7d4f5719
+1 01 400003bb 000 00001100 08000000 1000 a7263ff2 0001 a7263ff2 0010 a7263ff2 0000 a7263ff2 1000 06fed0d4 0000 06fed0d4 0000 06fed0d4 0100 06fed0d4 1000 6fb99f0e 0000 6fb99f0e 0010 6fb99f0e 0000 6fb99f0e 1000 000003b0 0020 24f06303 8324b393 0fe16dea b5f2063f 17519742 f9741e33 2da3df44 7e77f6ae
+0 10 400007ca 001 00000111 eb4c4c8b 5d82cc06 5d82cc06 51d7554d 51d7554d 9b891c07 9b891c07 eb4c4c8b
+0 10 40000354 010 00001111 8f11bdce 3ad9f88b 13e8520b efec2d69 360a8906 12e99442 69e77d51 261bcb5d a3748790 b29b1e13 4313f65f 5c5e5d2a e0a96184 eaa6b3d6 1805caff 19e3a923
+1 01 4000004f 000 00001110 47000000 1000 09dc2697 0001 09dc2697 0010 09dc2697 0100 09dc2697 1000 3abb4613 0000 3abb4613 0010 3abb4613 0100 3abb4613 1000 fad8b211 0001 fad8b211 0010 fad8b211 0100 fad8b211 1000 0000cedb 0000 0000cedb 0000 00000040 0020 d6e2215f fdd6c8c6 5f3d07a4 0431b501 aba4f278 b0e20cfd 3ee36433 b907ffb8
+0 10 4000050e 001 00000001 e6148ced e6148ced
+0 10 4000005e 001 00000001 035db37c 035db37c
+0 01 400003e3 000 00001001 28d0d3eb 87a2ff1b 87a2ff1b 87a2ff1b 87a2ff1b 39000d25 39000d25 39000d25 39000d25 4a18d34c
+1 01 40000742 001 00000000 a61e0000 1100 00000740 0010 a7d889e3 4f2ea0c7 70be028f e29007f8
+0 01 400001a0 000 00000101 94da2db5 94da2db5 94da2db5 94da2db5 e57d9e93 e57d9e93
+0 01 40000599 000 00001001 56aa5362 56aa5362 56aa5362 3b461fbf 3b461fbf 3b461fbf 3b461fbf e529f711 e529f711 e529f711
+1 01 4000043a 001 00001011 b7eb0000 1100 52c8a525 0011 52c8a525 1100 0961fa64 0010 0961fa64 1100 c08658ac 0011 c08658ac 1000 ab15a504 0011 ab15a504 1100 e106441a 0011 e106441a 1100 00005041 0011 00000430 0030 f45469c7 1adeca78 d25c1ea8 79d81834 d3f239fb efd4ae49 e00dbec2 e1ed5bf3 829bbac1 8000c6f1 b9b77c5f 8b8f1a7e
+0 01 400006a8 010 00001011 194d7bfc 5c845763 a6ea5161 027f58bb 0accb874 a381b5b8 920a2c07 3d987552 f4ef2147 c60b1776 439597b1 213b0222
+0 01 40000584 010 00000010 73b57703 37e61c74 1a7eca23
+0 10 40000496 001 00000001 2f6c54bd 2f6c54bd
+0 01 40000546 001 00001011 9a2791df a64e3361 a64e3361 9d5839dd 9d5839dd 1de159de 1de159de 578e2556 578e2556 7ecadbaf 7ecadbaf 81c40519
+0 10 400006ba 001 00001111 0accb874 a381b5b8 a381b5b8 7a166a35 7a166a35 b2cd8af4 b2cd8af4 194d7bfc 194d7bfc 5c845763 5c845763 a6ea5161 a6ea5161 027f58bb 027f58bb 0accb874
+1 01 40000298 001 00000110 3bcb340a 0011 3bcb340a 1100 b3645e2f 0011 b3645e2f 1100 0f628b09 0001 0f628b09 0100 0000ce2c 0001 00000290 0020 24fac64a cffdf453 89e3192a 39b7c014 7ade49ab 20a1f1b7 6e55aa99 fba18ba7
+0 10 40000478 000 00001111 a848c8cd a848c8cd a848c8cd a848c8cd 24dd9b1f 24dd9b1f 24dd9b1f 24dd9b1f cc254455 cc254455 cc254455 cc254455 5b2af998 5b2af998 5b2af998 5b2af998
+1 01 40000500 000 00001100 933aaa08 0001 933aaa08 0010 933aaa08 0000 933aaa08 1000 c0e3627b 0000 c0e3627b 0000 c0e3627b 0100 c0e3627b 1000 b26b3e93 0000 b26b3e93 0010 b26b3e93 0100 b26b3e93 0000 00000068 0001 00000500 0010 fff4901d 8fd70058 fd9e5e59 5c826437
+1 01 4000076c 000 00000111 8b8dd0bb 0001 8b8dd0bb 0010 8b8dd0bb 0100 8b8dd0bb 1000 b0771106 0001 b0771106 0010 b0771106 0100 b0771106 0000 00000760 0020 68cba157 06c23fa0 d5f8e8ef bf826398 18b58d9c 8c772490 389f0b0f d6e05a5d
+0 01 40000108 001 00001101 2fecad96 2fecad96 256adc22 256adc22 fe51aaac fe51aaac af0bdeb7 af0bdeb7 efd2938e efd2938e f143fb1c f143fb1c 65cc012f 65cc012f
+1 01 400005d0 010 00000111 03d1d6e8 1111 a6081bde 0111 ead419ef 1001 43c41e10 0011 62ba6646 1101 a33888ed 1101 5c660256 0111 a4246342 1101 000005d0 0020 5972002d 90049702 a36ee2dc 070ac450 9ff22f8e 066017af b4e1c28a a0d07440
+1 01 40000223 000 00000100 1a000000 1000 a776ec9f 0000 a776ec9f 0000 a776ec9f 0100 a776ec9f 0000 00000220 0010 9f02ad23 d01b320b f700f2ae 8b0edee6
+0 10 400006c6 001 00000001 3d987552 3d987552
+0 01 400000f7 000 00001011 2889840a 9090df0d 9090df0d 9090df0d 9090df0d 6456d288 6456d288 6456d288 6456d288 1be96744 1be96744 1be96744
+0 01 4000002b 000 00000101 8edb34ee a821ff3c a821ff3c a821ff3c a821ff3c 0205531d
+1 01 4000064e 001 00001101 1d3d0000 1100 32a3b52e 0011 32a3b52e 1100 7741e73d 0001 7741e73d 0100 c471090c 0011 c471090c 1100 262446c5 0011 262446c5 1100 d6ffa173 0001 d6ffa173 1100 313fa019 0011 313fa019 0100 00000bfd 0010 00000640 0030 71d6998a b5322ca5 a18f3689 917dc9f5 173c5877 768364de a0fb71c7 0192ee81 bfd77f7d 9942df8d 081044d0 befcca89
+0 01 400000d4 001 00000110 848e03a8 848e03a8 fc549c41 fc549c41 0cfb4584 0cfb4584 b4f4d21b
+0 10 400004bb 000 00000001 c7dd36ec c7dd36ec
+0 01 4000008e 001 00001011 c6d5ce59 79a2ff0c 79a2ff0c 4f78dd14 4f78dd14 4a1d5c1a 4a1d5c1a 655d9fd2 655d9fd2 41c53e12 41c53e12 40a30b46
+1 01 400007ef 000 00001001 e4000000 1000 b71fc352 0001 b71fc352 0010 b71fc352 0100 b71fc352 1000 8bab0d21 0001 8bab0d21 0010 8bab0d21 0100 8bab0d21 0000 00000012 0000 000007e0 0020 35eae44b f2881a22 da057afa b7fc2a8b 33ad7b78 b884f528 8c665882 af5d90ce
+0 10 40000777 000 00000111 4eeaa6ee b8771106 b8771106 b8771106 b8771106 4eeaa6ee 4eeaa6ee 4eeaa6ee
+0 01 4000050c 010 00000110 e6148c68 47bc204e d5425bc3 febe29b2 38e4c8d9 a4b4b46a 2e52bbe2
+0 01 400000be 001 00000011 bd61e4ec 23e3b791 23e3b791 2d95e2f2
+0 10 400002f0 001 00000111 f127c129 f127c129 f17a2774 f17a2774 4082b611 4082b611 9106170f 9106170f
+0 01 40000058 010 00001101 fad8b211 035db37c 0a144a5c 36577e6f 1c1b5121 e5338fc7 878ee95d 43b4e96c eff07626 4d6773ff 00664a15 b591a9d2 79f5d04d c6d5ce59
+0 01 400004d4 001 00001001 fea68876 fea68876 ea387995 ea387995 9770352a 9770352a cf5f03a0 cf5f03a0 163a5786 163a5786
+0 01 4000048c 001 00000110 f6cb8097 f6cb8097 205de61c 205de61c 2f6c54bd 2f6c54bd eaac9456
+1 01 4000070c 010 00000001 9a73c16b 1011 058bbc8f 0101 00000700 0020 11e1fddf 5cdcceb5 ae216be6 83153a7b b66dbba8 fb3465a0 11f1e8d6 1499537f
+0 10 4000079c 010 00000111 1ca9f2b5 758af179 57e81761 794ad029 a2e3b0ea 145a0e2a ff6874a1 2d839d1c
+1 01 400006d2 001 00001010 f2c30000 1100 ba70f815 0010 ba70f815 0100 ba033a1d 0001 ba033a1d 1100 f80aa9a4 0010 f80aa9a4 1100 d2ecccab 0001 d2ecccab 1100 6f9deb13 0011 6f9deb13 1100 000006d0 0020 6ec0763a 113dc51f ebdfab2f cecb0e9d 1e25809b 5a9b4ddd 241f6775 1c0ffe4a
+1 01 400001d0 010 00001110 8fc4e130 0011 ba0cee48 1001 0a6694b1 1111 8864deb7 0110 19080b9a 1101 8f2bd40a 0011 5d4828b4 0111 7d729a56 0110 369bf847 1110 276b4248 1011 39fc0687 1101 96f16469 0110 ba181113 1011 2819509c 1101 16d4193d 1001 000001d0 0040 aff37ca2 e7901868 7a2dea7b cdadd155 e685b9f9 b7500f28 43d3faba ef57129c 77a9358f 2d4dfd28 8d80301d 2b0f8c9c 0c0d4b0f d9c61300 019da26a 4c2d00b1
+1 01 400003f8 001 00000001 43f29e81 0011 43f29e81 1100 000003f0 0010 348aeb3e 324064fb 718de704 01126e6b
+1 01 4000056c 010 00000100 cb506061 1111 aba74a1c 0111 0ea398ce 1110 e735f28b 1111 75c519b7 0111 00000560 0020 0cee0a26 80b7d8b9 ae7cdc2c e45db6d1 238469f9 e1c2806e 073d925a 43af5b72
+0 01 400003c0 010 00000101 06fea43f 6f029fd3 da528563 b37810c8 9c89fe43 af45bed2
+1 01 400004a3 000 00000010 b8000000 1000 0000f6e1 0001 0000f6e1 0000 000004a0 0010 31c771e4 afd18185 c3ab652f e65d8a46
+1 01 4000075a 001 00000101 8e610000 1100 40e03088 0011 40e03088 1000 b5ea57a7 0010 b5ea57a7 1000 0000cc88 0011 00000750 0020 275f4f11 3716659b 5511d0d0 67a70d1f 3261dd2f f87e141d d5f8e8ef bf826398
+0 01 40000480 001 00001101 66edf0f5 66edf0f5 cffac619 cffac619 22d35556 22d35556 f6cb8097 f6cb8097 205de61c 205de61c 2f6c54bd 2f6c54bd eaac9456 eaac9456
+0 01 40000144 001 00001111 70f596bd 70f596bd 11b0bc20 11b0bc20 d5d363f8 d5d363f8 9727b67f 9727b67f 4537116f 4537116f 9747519a 9747519a e58fbe8a e58fbe8a dba38402 dba38402
+1 01 40000320 010 00000110 391216b3 0101 d0845d91 0111 23062c01 1110 ad220005 1111 bc6efbed 1101 8813e086 1111 1c335b7f 1111 00000320 0020 23aeb3f3 d1665427 ab6d8798 072ed66e 8c53cf9f 1e8d7a05 cf03f115 9bc3c68a
+1 01 400000ec 010 00000101 a5c795de 0011 7e953c0f 0110 c32a4429 1101 139eb906 0011 7d1c832e 0001 47ed91d7 1110 000000e0 0030 497f7d39 0b7c45c1 9a30a3d2 992008a0 2fdbaf45 c28bbc57 c5878d99 5d14e713 889a4c3e be6e58ea 4fbd01e6 5b16cbd6
+1 01 40000724 010 00000100 aeb3e83c 1111 3cf3ce2c 1110 2bf8f0a2 0011 eb49cbea 1111 c8c7dee4 1101 00000720 0020 4bce3c54 b855c613 3b4e9399 987d453d 30e426f3 7022ae89 75902cdb 9fe8b1fa
+0 01 40000481 000 00000010 66edf0f5 66edf0f5 66edf0f5
+0 01 40000715 000 00000001 8ef22263 8ef22263
+1 01 40000638 001 00001010 3b3e16dc 0001 3b3e16dc 1000 0556f506 0011 0556f506 0100 bf99e503 0011 bf99e503 1100 bcd6496a 0011 bcd6496a 1100 1e8ae077 0011 1e8ae077 1100 00003f0e 0010 00000630 0020 05c14209 50a65467 78a030e5 226d0695 e07a62c2 8d6ced2b 2d7af757 d5d14baf
+0 01 40000747 000 00001010 4ff4fd0f 36e262f2 36e262f2 36e262f2 36e262f2 4c4e0c1d 4c4e0c1d 4c4e0c1d 4c4e0c1d a1a14fa1 a1a14fa1
+1 01 40000079 000 00000101 df324100 0010 df324100 0100 df324100 1000 00f8c08c 0001 00f8c08c 0010 00f8c08c 0100 00000070 0010 522c3c6c 3b90966c 125624d1 3b074a5f
+1 01 400003ce 001 00000001 66790000 1100 00006af5 0011 000003c0 0020 17519742 f9741e33 370a0ed8 9f3b0166 995408ba 8e71aca3 75de4baa 08540b9f
+1 01 40000284 001 00001100 77fa99de 0011 77fa99de 1000 a8588ba0 0011 a8588ba0 1100 8b7d372b 0010 8b7d372b 1100 e82c78da 0010 e82c78da 1100 aafeb909 0011 aafeb909 1000 e14d58ae 0011 e14d58ae 0100 0000ad11 0010 00000280 0020 af644ae7 2608d270 cb9f8820 009214ca 49025779 16317a32 07ccd6a7 bf8a89f1
+0 01 40000455 000 00000001 32a6b8c2 32a6b8c2
+0 01 4000050e 000 00000011 e6148c68 e6148c68 47bc204e 47bc204e
+0 10 4000008c 010 00000111 c6d5ce59 79a2ff0c 4f78dd14 4a1d5c1a 655d9fd2 00664a15 b591a9d2 79f5d04d
+0 01 40000018 010 00000111 66b39e92 f0854214 a8641289 b0de1a8e 8edb34ee a821ff3c 0205531d 32476c68
+1 01 40000519 000 00001011 a3016b00 0010 a3016b00 0000 a3016b00 0000 2b02c390 0000 2b02c390 0010 2b02c390 0100 2b02c390 0000 73f11406 0000 73f11406 0010 73f11406 0100 73f11406 0000 000000f5 0001 00000510 0020 8c4c83bb 5f9da96b 11019133 2c7fdb66 7c5503db 8c6d98fb 09d36d68 5fadde73
+0 01 40000242 000 00001011 17e378db 17e378db 57ea4651 57ea4651 57ea4651 57ea4651 b6415c10 b6415c10 b6415c10 b6415c10 2f3a080c 2f3a080c
+1 01 400007d9 000 00001110 2dad8200 0010 2dad8200 0100 2dad8200 1000 d07969d6 0001 d07969d6 0000 d07969d6 0100 d07969d6 1000 845bde89 0001 845bde89 0010 845bde89 0100 845bde89 0000 508a6635 0001 508a6635 0000 508a6635 0000 508a6635 1000 000007d0 0020 6f1eafde 3931ef3d 7c2f0898 9d0f30c7 62afba8a cc8ec218 da057afa b7fc2a8b
+0 10 4000026a 000 00001111 97e4c18a 97e4c18a 9f444e6c 9f444e6c 9f444e6c 9f444e6c 17384c8a 17384c8a 17384c8a 17384c8a c12cbb8f c12cbb8f c12cbb8f c12cbb8f 97e4c18a 97e4c18a
+1 01 40000726 001 00001100 d2d20000 1000 0cb1ee4d 0001 0cb1ee4d 0000 199743c1 0001 199743c1 1100 f4042928 0011 f4042928 1100 994e6555 0011 994e6555 0000 38597def 0011 38597def 1100 165a1874 0001 165a1874 1100 00000720 0020 99472d4a 5c20073b 9a7ec161 11e8e664 5ff85b77 899e88c9 591f07eb 7f8af253
+1 01 4000043c 000 00000010 0026ddde 0001 0026ddde 0010 0026ddde 0000 00000430 0010 f45469c7 1adeca78 b3b91feb 65edcba9
+1 01 40000468 010 00000101 9ea50003 1111 0c438ede 1111 5639c02b 1001 d59b94a2 0111 e5aa8aa1 0111 65612467 1111 00000460 0020 98bbfd15 6a98f1ca 5ffa52dc 179d7ea0 975469c5 0e00a066 8c074f9b 664b56fc
+0 01 400004b4 001 00000010 7246f12d 7246f12d c7dd36ec
+0 01 400004e0 001 00000011 cf5f03a0 cf5f03a0 163a5786 163a5786
+1 01 4000076d 000 00000001 00861800 0010 00861800 0000 00000760 0010 3261dd2f f87e141d 9bf344a5 fea95aa4
+1 01 400006aa 001 00000001 b2a50000 1000 000036ea 0011 000006a0 0010 c688ea23 7390349d 951d43c1 abddd33d
+0 01 40000544 010 00001011 9a2791df a64e3361 9d5839dd 1de159de 578e2556 7ecadbaf 81c40519 4b161476 3f5e7399 f2e15e87 cb506061 63a74a1c
+0 10 40000380 010 00001111 5decb73b a89bfb81 28f6431e b207dd7f 7a9b8acf 092fe90c 0f86ccfd da8a3b02 d75eee3a 0bd6f391 306575e5 98139dfd b8a62d5a cbd86ffa 0837cfce a79b3ff2
+1 01 4000046e 001 00000110 d98c0000 1000 399e0f6a 0011 399e0f6a 1000 98a92f0d 0010 98a92f0d 1000 181badd2 0011 181badd2 0000 00000460 0020 98bbfd15 6a98f1ca fb283412 07f7f657 f6d38f1b 86c81681 964a5973 bb8e0c36
+1 01 4000010c 010 00000111 89f521ce 1111 fd867bcb 0111 38372fac 0110 89602218 1111 eae563c4 1111 cf15facc 0111 97f65e04 0000 15a88288 0110 00000100 0030 889a4c3e be6e58ea c6f68b1b 193de9f8 f8a26b40 d3cafb8f 87f3d66b 7c49a8fe e53c4185 6350b7af 6a15b401 1ff12976
+1 01 400004b0 000 00001100 19403c31 0001 19403c31 0010 19403c31 0100 19403c31 1000 113d87de 0001 113d87de 0010 113d87de 0100 113d87de 1000 6df89a1d 0001 6df89a1d 0010 6df89a1d 0100 6df89a1d 1000 000000a2 0000 000004b0 0010 cc27c0e5 177f3394 a2b76921 821b9610
+0 10 4000076c 010 00000001 8b8d18bb ed3e0ba1
+0 10 4000038c 010 00001111 b207dd7f 7a9b8acf 092fe90c 0f86ccfd da8a3b02 d75eee3a 0bd6f391 306575e5 98139dfd b8a62d5a cbd86ffa 0837cfce a79b3ff2 5decb73b a89bfb81 28f6431e
+0 10 400006dc 010 00001111 f80aa931 d2ecc4ab 6f9deb13 4f729aef 8ecab04c 81ccf7c1 2c67bbaf b4c30c42 41034706 920a2c07 3d987552 f4ef2147 c60b1776 f2c397b1 2170f822 ba03a31d
+1 01 4000052c 010 00000011 edad36ef 1110 ff88a89c 1111 476d5c8a 1101 469be7ca 1101 00000520 0020 7c5503db 8c6d98fb ecc2772e 9feee8e7 b21b27b5 fba6a470 8baf8c9b 570f9719
+0 10 400007ac 010 00001111 7c544498 ad43f1b5 6b0fb102 6cc798c1 88fb7024 758af179 57e81761 794ad029 a2e3b0ea 145a0e2a ff6874a1 2d839d1c 1ca9f2b5 459e0706 b27a9212 7460f1b8
+0 01 40000134 010 00001011 a8c82b96 045e1f80 16d9ce20 702d5e26 70f596bd 11b0bc20 d5d363f8 9727b67f 4537116f 9747519a e58fbe8a dba38402
+0 01 400004cc 010 00001101 e78ca5fe 25984436 fea68876 ea387995 9770352a cf5f03a0 163a5786 5c672835 7e197cc4 5f19a8c2 803e183f 7619f4de ce238c00 9375aa08
+1 01 400000dc 001 00001100 ec2f049a 0011 ec2f049a 1100 99e2b1aa 0011 99e2b1aa 1100 4e3aaee8 0011 4e3aaee8 1100 c692b92b 0011 c692b92b 0100 053ed5a0 0011 053ed5a0 1000 0e73c381 0001 0e73c381 1100 0000b54b 0011 000000d0 0030 6fdcbbc2 6edffd2c e268d656 97afa5f3 af4433eb a2ac2705 171c8505 a5d65122 766bc5dc 72f917a7 c5878d99 5d14e713
+1 01 40000448 000 00001101 fb5aa7c4 0001 fb5aa7c4 0010 fb5aa7c4 0000 fb5aa7c4 1000 ee77a378 0001 ee77a378 0010 ee77a378 0100 ee77a378 1000 1d1a1cfe 0001 1d1a1cfe 0010 1d1a1cfe 0100 1d1a1cfe 1000 000037f9 0001 000037f9 0000 00000440 0020 d3f239fb efd4ae49 98de6e6a 89b3efc1 05c56f6c 4c55dccb b9b77c5f 8b8f1a7e
+0 10 40000259 000 00000001 6efeb5a4 6efeb5a4
+1 01 40000212 001 00000001 a4260000 1000 00000067 0011 00000210 0010 3a728afa 68a4ead6 30a0ad3a 2873db60
+0 10 40000754 001 00001111 74c70c08 74c70c08 8e615f52 8e615f52 400c3088 400c3088 a61e12cb a61e12cb 4ff4fd0f 4ff4fd0f 36e262f2 36e262f2 4c4e0c1d 4c4e0c1d a1a14fa1 a1a14fa1
+0 01 4000022c 001 00000001 b525e596 b525e596
+1 01 40000168 010 00001110 0391ddc1 0110 264fa928 1101 553cd02b 1111 69e2e7fa 0110 7d13df1f 1111 91f25601 1011 32eb46f5 1110 39d621a8 1101 8ad2c922 1111 e45950ab 0111 54c91cc0 1011 4bc35cb1 1110 99a19c0a 1101 630e2d75 1111 6419e3d8 1100 00000160 0050 7c29b56b d36e40ba 0bf0e773 f797f92a 87f02d5d 9f609f21 e14f4238 e2da1409 d11229fb 563b56c5 58e99607 4d84e5f8 3174df10 e25255e7 867c7038 cc8838b8 e7cf45bd 64046ddd 9324ae36 d69fb9ec
+1 01 40000702 001 00001100 5f8c0000 0000 2607383a 0011 2607383a 0100 1b2c1665 0001 1b2c1665 1100 35cef343 0001 35cef343 0100 688a7bdb 0011 688a7bdb 0100 2b081c76 0001 2b081c76 1100 bbeadcac 0011 bbeadcac 1100 00000700 0020 f013ac40 5809748f 99fd01c3 7c13a90d 86746f02 2bb3c656 465675a5 5063b443
+1 01 400002c8 001 00000010 eefcda5e 0011 eefcda5e 0100 0000f1fd 0011 000002c0 0010 9dfea631 e0f2ca37 070c4137 3c2decdf
+0 10 4000063c 010 00000011 7a56f506 02a93027 98886d19 3b557fdc
+0 01 400004f0 010 00001001 5f19a8c2 803e183f 7619f4de ce238c00 9375aa08 c0e3e6fe 906b3e37 e6148c68 47bc204e d5425bc3
+0 10 40000574 000 00000011 0ea398b8 0ea398b8 0ea398b8 0ea398b8
+1 01 4000073c 010 00000001 c6a34bd9 1110 98b84235 0111 00000730 0020 5ff85b77 899e88c9 c025c594 92b3772c 4f3dd4f8 f4300341 70be028f e29007f8
+1 01 400000a8 001 00001001 099b0d45 0000 099b0d45 1100 2f1ee2de 0011 2f1ee2de 1000 8b8b5be7 0001 8b8b5be7 1100 1124cccc 0010 1124cccc 1100 6f4f7987 0011 6f4f7987 0000 000000a0 0020 982ac04e 8fa5c57e 68198d6c 305ed216 0e5711c9 0067fc5e fe7f0c27 d287a1f1
+0 10 40000054 010 00000011 3abb46fc fad8b211 035db37c 09dc2697
+1 01 400007c4 000 00001101 608f2e23 0001 608f2e23 0010 608f2e23 0100 608f2e23 1000 301defc0 0000 301defc0 0010 301defc0 0100 301defc0 1000 96720082 0001 96720082 0010 96720082 0100 96720082 1000 0000ff07 0000 0000ff07 0010 000007c0 0020 8a91881f c7056d90 2660afcd ea9ceb87 11efbb22 c0059569 7c2f0898 9d0f30c7
+0 01 400004bc 010 00001001 f5a40b82 c6154ebb a6a6c30d 5101a7d5 e78ca5fe 25984436 fea68876 ea387995 9770352a cf5f03a0
+0 01 400002a4 001 00001101 862a3e2c 862a3e2c 6a61e467 6a61e467 f2f47b4e f2f47b4e 95faee1d 95faee1d 131b6a02 131b6a02 4bba714c 4bba714c 0a5f109e 0a5f109e
+0 10 400001d8 010 00000011 0a6694b1 7264dea3 138de130 bab01c48
+1 01 400005ee 001 00000001 86770000 1100 00006fe1 0011 000005e0 0020 9ff22f8e 066017af 81fddf7c 91538011 a2765d2f 813ff435 64e23196 0906c1a3
+1 01 40000024 010 00000100 8b9d3cc4 1111 ac0a91e4 1010 e5d853e4 1010 325b25a6 1111 cab21879 1110 00000020 0020 9c1b3ebe 55c851e9 a01e0355 bceddf56 fce3e643 11204232 b865e9a8 230567af
+1 01 4000064e 001 00001001 7baa0000 1000 03875598 0010 03875598 1100 f5d30ff7 0010 f5d30ff7 0100 85222a80 0011 85222a80 1000 4adbdb42 0010 4adbdb42 1100 0000c3dd 0011 00000640 0030 e07a62c2 8d6ced2b a908378c 6e3bd898 ed92c62a 520f789f 0e8e18ec 7a394769 99d0dbd9 ce67daab 081044d0 befcca89
+1 01 40000020 010 00000011 02ff11b3 1101 b89e160b 1110 4a4a2ea3 1111 30af3947 1111 00000020 0010 abc4c49c 756f4f7c 2195200f 6f9736c8
+1 01 4000051b 000 00000011 9c000000 1000 00ff834c 0001 00ff834c 0010 00ff834c 0100 00000510 0010 8c4c83bb 5f9da96b 248db808 3e11752e
+0 01 4000018c 010 00000110 fe5950ab 54d61cc0 4bc35c7b 99a1b30a 630e2d75 64192db5 e57d9e93
+1 01 40000228 010 00000111 92c5eead 0011 0a20752e 1111 d50a0099 0111 5cf628bc 0100 fd86ca73 1001 5d2f2085 0011 12ab5638 1100 a6167db8 0000 00000220 0030 9f02ad23 d01b320b b121c244 00be245a 4c83c5ea f71cf0cd 19addc3f 31ba8488 b6361a56 ed0251ed 025202fa 030b3856
+0 10 400004c6 001 00000011 a6a6c30d c6154ebb c6154ebb a6a6c30d
+1 01 400001ee 001 00000010 05440000 0100 a1d724e9 0011 a1d724e9 0100 000001e0 0020 e685b9f9 b7500f28 96a53af2 5bc337e8 dce0d695 90064569 8d80301d 2b0f8c9c
+0 01 40000732 000 00001110 f4042928 f4042928 c8c76555 c8c76555 c8c76555 c8c76555 38597def 38597def 38597def 38597def c6a34b74 c6a34b74 c6a34b74 c6a34b74 a6b84235
+1 01 40000270 010 00001100 9b8118df 1011 990becdf 1101 eeb89574 0001 99460938 1111 f827f4e1 1100 ef85cd57 0111 5f2b3de3 1011 d2ea2294 1011 ad98a149 0111 c568bcb3 1110 8350bc16 1101 87606173 1111 d651cbaf 1010 00000270 0040 319e2040 e0ec6933 0d403858 18c175f8 6d647bf8 91683830 11dd99f7 f2c90b0c 627c4ece 2b3ac932 f5b38011 6fc829dd 550fa4e9 952b47b5 6e55aa99 fba18ba7
+0 10 4000068f 000 00000001 59a8f61a 59a8f61a
+1 01 40000314 001 00000111 c96e94d4 0001 c96e94d4 1100 7643d3b4 0011 7643d3b4 0100 fb8c132c 0001 fb8c132c 1100 3cc68d5c 0010 3cc68d5c 1100 00000310 0020 42a2b956 5aaf5c83 cde5e939 5411a61b ca0d2f22 956d404f ab6d8798 072ed66e
+1 01 40000344 010 00000110 8833df4f 1111 8a86e227 1100 a85a1347 1111 741b2643 1111 8cb13c1a 1011 05df1876 0001 f9229569 1111 00000340 0020 5178cb08 e6a21afc e7630f59 8c0011cd 354174fe a169f164 1aa769ef aa27c2b2
+0 01 4000063e 001 00001011 7a56f506 bf99e503 bf99e503 bcd6496a bcd6496a 1e8ae077 1e8ae077 7b3d3f76 7b3d3f76 0387552e 0387552e f9d30f3d
+1 01 40000340 010 00000111 d470341e 1011 d1294207 0011 539f5eec 1111 ebd608c8 0101 78a45e79 1111 365dcbe8 1110 187e5f92 1100 6bab565e 0011 00000340 0020 4e7b5ee8 be415b49 bd2b73e6 c9fc549b c9642fb9 2063a001 913f8473 5d43a648
+1 01 40000004 010 00000001 9a9ccc2c 1110 ad87c669 1001 00000000 0010 c547697b 228c1621 9b475710 113a50f4
+1 01 400006ea 001 00000110 b0130000 1000 1545f224 0011 1545f224 1100 4737dc20 0001 4737dc20 0100 dd943054 0011 dd943054 1100 000006e0 0020 1e25809b 5a9b4ddd 5f689b9c b5a6c883 2b1b5933 908005c8 f3b00ca6 fe4b695e
+0 10 4000017c 010 00000111 919d5601 dba38402 71fa74b3 c591dd86 264fda28 553cd02b 81e2e7a9 7d13df1f
+1 01 400004c4 010 00000100 bf2f860a 1101 cb8380c4 1111 5ca64800 1100 6050eced 1110 edaa8bd3 1111 000004c0 0020 6af5e5b2 53d11a88 f2b6ac0c 45288cbc f27e9874 134df541 674e66fa 2ba3c0f9
+0 10 40000694 001 00001111 6fd0cbb7 6fd0cbb7 6bade8b0 6bade8b0 d860fa56 d860fa56 fa80aae8 fa80aae8 925a32b4 925a32b4 3407c541 3407c541 59a8f61a 59a8f61a 706a703c 706a703c
+1 01 40000242 001 00001111 e4200000 1100 dc110793 0011 dc110793 0100 aef8198c 0001 aef8198c 0000 092f5a7d 0001 092f5a7d 0100 6011bd12 0011 6011bd12 1100 1c9d42c5 0011 1c9d42c5 1100 e4775a55 0010 e4775a55 0100 115ef877 0000 115ef877 1000 00007be9 0001 00000240 0030 a68b5a58 e7f24783 2b370b53 c5a58a51 6a3f70e6 b6629c6d cfbcbb5e f15f799c bdc5e23c 330c6c4c 805c5e3e f5ce4d8a
+0 10 40000050 010 00000001 09dc2697 3abb46fc
+0 10 400005d6 001 00001111 31081bde ea526bef ea526bef 07d31e10 07d31e10 b62bd3c0 b62bd3c0 1ef53947 1ef53947 78754a58 78754a58 ff30b868 ff30b868 03d1d6e8 03d1d6e8 31081bde
+0 10 40000674 001 00000001 7445fab7 7445fab7
+1 01 4000038c 010 00001110 a65b846e 1110 02338aec 1101 1d1d7bab 1101 d857c0d8 0111 71ac0ed4 1111 6085d6c6 1110 6b0731ef 1101 30422e87 0011 05e93150 1001 a46a4afd 0011 45837024 1111 d84297ef 1110 dc860653 1110 381eb614 1111 7a589ba0 1011 00000380 0050 dbebc29d 6b9f9ad8 4173c5ae cd65c88f 0647b478 9f3fadb8 875cf739 c3174b8f c4a3237e f47bf406 f945d694 bf728576 3a5b9168 c1c44772 cedb34a3 447ab947 5a406fbb 8a5599d0 370a0ed8 9f3b0166
+0 01 40000754 001 00000011 74c70c08 74c70c08 8e615f52 8e615f52
+0 01 400001a1 000 00000100 64192db5 64192db5 64192db5 e57d9e93 e57d9e93
+0 10 40000601 000 00001111 d0f2627b d0f2627b d0f2627b f1448e60 f1448e60 f1448e60 f1448e60 0e573ab0 0e573ab0 0e573ab0 0e573ab0 beee05f9 beee05f9 beee05f9 beee05f9 d0f2627b
+0 10 400002a8 001 00000011 6a61e467 6a61e467 f2f47b4e f2f47b4e
+0 01 4000053c 000 00000100 21980110 21980110 21980110 21980110 5978379c
+1 01 40000128 010 00001110 3ecff5c2 0110 047d5551 1010 1c2be13a 1111 ddc1d64a 0001 0e4cb8f1 0101 98be3f80 1011 80f841b5 1001 a47c475d 1010 aa2a2152 0100 519c2df4 0011 30168259 1001 bf4822bb 1001 eab93829 1101 ff21b222 0111 aafa20b0 1111 00000120 0050 e53c4185 6350b7af e0822e4e ec16b573 7747218f 1e895b2c 1988437f 7daaddc7 faf814eb e7394d30 42c38a60 e8016cf4 e381b877 21d84f41 9bc75312 895a131e ccfa8c86 f6cfb0b6 0bf0e773 f797f92a
+0 10 4000060c 010 00001111 beee05f9 0af13d96 9303755d becad051 512727f4 e0ecf408 68fd9940 06ee3858 17e9cceb 02a93027 98886d19 3b557fdc 7a56f506 d0f2627b f1448e60 0e573ab0
+0 10 40000684 010 00001111 925a32b4 3407c541 59a8f61a 706a703c 6fd0cbb7 6bade8b0 d860fa56 7a166a35 b2cd8af4 b24d7bfc 5c8436ea a6ea5161 027f58bb 0accb874 a381b5b8 fa80aae8
+1 01 4000013e 001 00000011 b5530000 1000 4b8eca02 0001 4b8eca02 1100 000013c4 0011 00000130 0020 7747218f 1e895b2c 658cf8ce 9860180b bd602db6 2645a90a 42c38a60 e8016cf4
+0 01 400000f0 010 00001011 0e733c81 c32ab54b 9090b906 6456d22e 47ed9144 38e20e46 2fecad96 89f521ce fe867bcb af372fb7 89602218 eae563c4
+0 10 400001c0 010 00001111 3e1c6d12 40420236 ed9a1d72 a268ada4 138de130 bab01c48 0a6694b1 7264dea3 19080e9a fb1ad40a c64828b4 29449ab2 36d724e9 27544248 39fcf187 edf1640b
+0 10 40000284 010 00000011 7785cd57 5f583de3 d27d2294 f8271245
+0 10 400000a9 000 00001111 099bbd25 099bbd25 099bbd25 2f7ae2de 2f7ae2de 2f7ae2de 2f7ae2de 41c53e12 41c53e12 41c53e12 41c53e12 40a30b46 40a30b46 40a30b46 40a30b46 099bbd25
+0 01 4000054d 000 00001001 9d5839dd 9d5839dd 9d5839dd 1de159de 1de159de 1de159de 1de159de 578e2556 578e2556 578e2556
+0 10 40000320 001 00001111 3cc68db3 3cc68db3 c8845d91 c8845d91 23062cdc 23062cdc ad220005 ad220005 bc6e4ded bc6e4ded 8813e086 8813e086 1c335b7f 1c335b7f 04905f80 04905f80
+1 01 4000054c 010 00000100 6adaa28a 1001 e6fe40c0 1110 d74d8f61 1101 2c9cb225 1001 5d2c53dc 1011 00000540 0020 d2905009 03970054 7d333c69 bef9beae c7de6cf0 5cb6b1be ce968f4c 375a4174
+0 10 40000417 000 00000001 ca636193 ca636193
+0 10 400005b0 000 00000111 abccf16c abccf16c abccf16c abccf16c daeef16d daeef16d daeef16d daeef16d
+1 01 40000410 010 00001010 a597f584 0110 2cd9f4f1 0001 4f11d5ae 0110 49b13438 0101 1ad50395 1110 231dde50 1111 13a26ead 0111 414bde0d 1111 4d21bf32 1111 84875ff3 1110 0a701ec0 1110 00000410 0030 733d7a68 aebc02b4 331d8424 e5676131 46842d9a 8f64744c 87ee01e5 cf2e2c44 723c1813 a61aa06a 4290193e 32b97b29
+1 01 400004e6 000 00000101 2caf0000 0000 2caf0000 0000 d9ca01e5 0001 d9ca01e5 0000 d9ca01e5 0000 d9ca01e5 1000 000004e0 0010 5b6bc2a9 ca7b9599 33e1007a c80e3430
+1 01 40000747 000 00000101 9d000000 1000 d8e166de 0000 d8e166de 0000 d8e166de 0100 d8e166de 1000 00000076 0001 00000740 0010 712c5985 1016c327 6b430a9f 00f6a437
+1 01 400002bc 010 00001111 839872e6 1101 692acebb 1011 c33d33b1 1111 4af77387 1011 73e23a6b 1111 dd98f0cc 0110 3f3d5db5 1111 5af99fd2 1111 6213c567 0011 83d189f0 1111 f44e245a 1111 6db55353 1011 24ee9777 0001 9fef11ae 1111 2b37bb4c 1111 ac6aaad0 0101 000002b0 0050 a47e64ea 373a1db2 fbbbb73c a77e06af ee3c0068 0fe2c9c2 4a997b0b 4dbc920a 67af1f64 25c8ac7e 0b709876 a4d8bbee 8caae993 a3621b60 b689d409 ac4d9846 216bbfd9 189c5910 a39139ae dc899bd1
+0 01 400001e8 001 00000011 c64828b4 c64828b4 29449ab2 29449ab2
+0 01 40000598 010 00001101 56aa5362 3b461fbf e529f711 617fb872 abcad227 daee7fe3 abccf16c daeef16d abcc2f6e 4f404b3e b62bd3c0 1ef53947 78754a58 ff30b868
+0 10 40000368 000 00000011 12e99442 12e99442 12e99442 12e99442
+0 01 400004a4 010 00001010 a6b81de1 e86d44e7 f27a9477 19403c31 113d87de 6df89a1d f5a40b82 c6154ebb bf2fc30a cb8380c4 5ca6a5fe
+1 01 400007bb 000 00001101 f4000000 1000 4d4968df 0001 4d4968df 0010 4d4968df 0100 4d4968df 1000 262f909f 0001 262f909f 0000 262f909f 0000 262f909f 1000 fde539be 0001 fde539be 0010 fde539be 0000 fde539be 1000 0000007c 0001 000007b0 0020 29763c66 61db156f 4b7bedf1 41f0d5cb b30442e2 81ce9cea cc9b3ec5 7b43750f
+1 01 4000055d 000 00000101 78947c00 0010 78947c00 0000 78947c00 0000 008d008c 0001 008d008c 0010 008d008c 0100 00000550 0020 c7de6cf0 5cb6b1be 78a26fce 7f0ecfd7 8fd69004 8ddc6f81 ae7cdc2c e45db6d1
+1 01 40000398 010 00001001 1cbc6f0b 0111 acbf502d 1111 61ab73d0 1101 c1141786 1110 7cbd8645 1111 67f2f1e9 1100 4d9c5142 1011 48a56ceb 0010 49f6c476 1011 9592e18c 0001 00000390 0030 0647b478 9f3fadb8 0cc1411a 55333bf6 e655d50f 06dbc9cc b90b68e6 e3a0ea8b c5cef789 3376b414 a056462f 5e1975db
+0 10 400006e0 010 00001111 d2ecc4ab 6f9deb13 b0729aef 1545f224 8137f720 dd943054 b4c30c42 41034706 920a2c07 3d987552 f4ef2147 c60b1776 f2c397b1 2170f822 ba03a31d f80aa931
+0 01 400000ed 000 00001111 05f4d5a0 05f4d5a0 05f4d5a0 0e733c81 0e733c81 0e733c81 0e733c81 c32ab54b c32ab54b c32ab54b c32ab54b 9090b906 9090b906 9090b906 9090b906 6456d22e
+0 10 400001cf 000 00000001 a268ada4 a268ada4
+1 01 40000770 001 00001110 4938299a 0001 4938299a 1000 f4c5f634 0011 f4c5f634 1100 cbcc2257 0000 cbcc2257 1100 37d0d4bd 0001 37d0d4bd 0100 61ad9958 0011 61ad9958 1100 0c08c3cf 0001 0c08c3cf 1100 8f40b8a4 0011 8f40b8a4 1000 000033f1 0011 00000770 0020 f2c105e2 756e2173 132cbdf7 e0ba37ee 8df235f5 8287da89 51343e74 8930e5cc
+0 01 400004fe 001 00000101 ce238c00 9375aa08 9375aa08 c0e3e6fe c0e3e6fe 906b3e37
+0 10 40000368 000 00001111 12e99442 12e99442 12e99442 12e99442 69e77d51 69e77d51 69e77d51 69e77d51 efec2d69 efec2d69 efec2d69 efec2d69 360a8906 360a8906 360a8906 360a8906
+1 01 40000490 010 00001010 5cc557ea 1111 5647119e 1111 75e2f626 1111 9879cf40 1111 3befd51f 1111 6647121a 1010 ba40480f 1011 85935d92 1011 5a735930 1101 a3abfc5a 1111 30a81456 0111 00000490 0030 ff488fe4 d283646f e7e73ca8 59c60293 515fd3f2 b70453b3 17965c1b 43f1567e 6ba5e614 0f2d0fe7 cfae41f4 9bc6b37c
+0 10 400001e6 001 00000111 fb1ad40a c64828b4 c64828b4 29449ab2 29449ab2 19080e9a 19080e9a fb1ad40a
+0 01 40000514 001 00000000 d5425bc3
+0 01 40000337 000 00001001 8813e086 1c335b7f 1c335b7f 1c335b7f 1c335b7f 04905f80 04905f80 04905f80 04905f80 d45e341e
+1 01 40000002 000 00001010 d6ff0000 0100 d6ff0000 1000 73c99bf5 0001 73c99bf5 0010 73c99bf5 0000 73c99bf5 1000 837a7a08 0001 837a7a08 0010 837a7a08 0100 837a7a08 1000 00000038 0001 00000000 0010 30cc47bb 2377c70d 98244150 0e9a70f6
+0 01 400001bd 000 00001011 34674849 34674849 34674849 3e1c6d12 3e1c6d12 3e1c6d12 3e1c6d12 40420236 40420236 40420236 40420236 ed9a1d72
+1 01 4000061c 010 00001010 ac1146c6 1010 bf4c4840 1001 f71bdfff 0111 1ee87db3 1111 61dceb35 0111 018b97c6 1111 2e194c9a 1101 2ca74dc7 0111 90a73197 1011 0393fcf2 1111 8b986963 1111 00000610 0040 70e20f59 8018fd52 f827b126 db256284 266f2a05 be2764d1 9bd77976 a18f5cca 5f7c8da7 37966e21 5426b1db 6aa57af3 9b640998 0dbc5a40 a908378c 6e3bd898
+0 01 4000013a 000 00001100 044c1ff1 044c1ff1 b5d93f80 b5d93f80 b5d93f80 b5d93f80 4b8e5e02 4b8e5e02 4b8e5e02 4b8e5e02 a4f513c4 a4f513c4 a4f513c4
+1 01 40000448 010 00001100 2c1844db 1111 7e818076 0111 970590e3 1111 0d73d5ed 1111 c95e5980 1011 4a8f1a0b 1010 872d0c37 0011 642b29fa 0111 c73e71a5 1111 24c14475 1111 a277b328 1011 ecfaa9f5 1101 8bb3024d 1101 00000440 0040 d3f239fb efd4ae49 8089c71b 742a1e3b 34c542b4 80f52818 e4520d8e 7592ac4a cd73cbde f3ccc11f a3f0035f 6e498b16 0074dc62 5e52cbde 2483a45f c15f8854
+1 01 400004e0 010 00001000 c175dc23 0111 e92f754d 1111 4c8cfb9c 0000 ec6af390 1111 d71e179d 1111 12df51f9 1011 b9198901 1110 c86b09f2 0111 f1762af8 0101 000004e0 0030 72557923 974e7fb7 9f7d7c81 261d7dd5 a2905806 85372686 f7a615ff 52e0efb3 d2a6a82c 730894b5 fd9e5e59 5c826437
+0 10 400007d3 000 00001111 c7e5ffb4 a5bf18b4 a5bf18b4 a5bf18b4 a5bf18b4 2dad8292 2dad8292 2dad8292 2dad8292 d07944d6 d07944d6 d07944d6 d07944d6 c7e5ffb4 c7e5ffb4 c7e5ffb4
+1 01 4000050a 001 00001100 b6000000 0100 f60883c1 0001 f60883c1 1100 918dd922 0011 918dd922 1000 990d7539 0001 990d7539 0100 185ec91b 0011 185ec91b 0100 7b06cde6 0001 7b06cde6 1100 1ad8e624 0010 1ad8e624 1000 00000500 0030 d2a6a82c 730894b5 0d8d56c5 730cf067 824e6cf6 3dfd39d0 6f68b31c 918e53fe 894757c1 6154289a ecc2772e 9feee8e7
+1 01 4000053e 001 00000101 1b0c0000 1100 edfa0b5d 0010 edfa0b5d 1100 82b3eb78 0011 82b3eb78 0100 000034c1 0000 00000530 0020 b21b27b5 fba6a470 4baf299c 06d6548f 9eccddde 133973d7 7d333c69 bef9beae
+1 01 400005a9 000 00001001 4602f800 0010 4602f800 0100 4602f800 1000 68b77f04 0001 68b77f04 0010 68b77f04 0100 68b77f04 1000 007ee436 0000 007ee436 0010 007ee436 0100 000005a0 0020 6faec2b9 ddff2552 1cd59b24 20ac3ff5 7d472439 346a8d6c 41d90c56 aac83c07
+1 01 400005a2 001 00001011 4f780000 1100 13a22fe4 0010 13a22fe4 1100 a13e3837 0010 a13e3837 1100 3c5286d6 0010 3c5286d6 1100 c410f38f 0011 c410f38f 1100 5eeea009 0011 5eeea009 1000 00002a07 0011 000005a0 0020 d090b39f f8956814 569c21a9 c6dfd8f2 d9e996f6 dcb41a5b 381d936e 7ea7bdbd
+0 10 40000260 001 00001111 17384ce9 17384ce9 c12cbb8f c12cbb8f 97e4c18a 97e4c18a 9f444e6c 9f444e6c 9b8018df 9b8018df 990be2df 990be2df e7c88774 e7c88774 99460938 99460938
+0 01 4000059f 000 00001110 3b461fbf 4f78f711 4f78f711 4f78f711 4f78f711 13a22f72 13a22f72 13a22f72 13a22f72 a13e3827 a13e3827 a13e3827 a13e3827 3c528604 3c528604
+0 10 40000390 010 00000001 02338aec 1d1de9ab
+0 01 400004ac 001 00001101 857a5d92 857a5d92 5a733c30 5a733c30 a3abfc5a a3abfc5a 6da81456 6da81456 f5a40b82 f5a40b82 c6154ebb c6154ebb bf2fc30a bf2fc30a
+0 01 40000030 010 00000001 325b25a6 cab21868
+1 01 400000a0 010 00000011 427b7192 1111 a5d1f2e8 1101 dc0b1ae2 1110 6522ee1b 0111 000000a0 0010 a76f8a24 b7d8310f 26257a82 a8d65e62
+1 01 400005f8 010 00001011 5d716eac 1101 7582f045 1111 0ecf1929 1110 fdf2044e 1011 a54977da 1011 ed394c5a 1111 a67f5421 1001 64960c53 1101 e91f7c72 0110 0004a90b 1000 d81d1ef9 1011 3fb56157 1011 000005f0 0040 a2765d2f 813ff435 829bb3ec 8316339b d97e5b0a 594e9833 515fb03d a0214d08 a8395f8a 980f434d e8da6b1c 18c94c56 fb14d1ed 455d65e7 9bd77976 a18f5cca
+0 01 400001c2 000 00000101 3e1c6d12 3e1c6d12 40420236 40420236 40420236 40420236
+0 01 40000720 001 00001110 356c673a 356c673a d2b3e83c d2b3e83c 3cf3ce4d 3cf3ce4d 1997f0c1 1997f0c1 f4042928 f4042928 c8c76555 c8c76555 38597def 38597def c6a34b74
+0 10 4000073c 010 00000111 c6a34b74 356c673a d2b3e83c 3cf3ce4d 1997f0c1 f4042928 c8c76555 38597def
+0 10 4000017a 001 00000111 7d13df1f 919d5601 919d5601 553cd02b 553cd02b 81e2e7a9 81e2e7a9 7d13df1f
+1 01 400003ba 001 00000110 32da0000 1000 e3445335 0001 e3445335 1000 cfd7ddff 0010 cfd7ddff 1100 770b1b81 0011 770b1b81 1100 000003b0 0020 c5cef789 3376b414 c0593055 32fbe79b e9c58ee3 57e8bb59 370a0ed8 9f3b0166
+0 01 40000380 001 00001100 5decb73b 5decb73b a89bfb81 a89bfb81 28f6431e 28f6431e a65b847f a65b847f 02338aec 02338aec 1d1de9ab 1d1de9ab 0fbc6f0b
+1 01 40000772 000 00000000 00f70000 0100 00000770 0010 6d2487f1 8c3bec68 132cbdf7 e0ba37ee
+1 01 4000077c 001 00000111 c019e370 0011 c019e370 1000 016c96c7 0000 016c96c7 0100 bf401e76 0010 bf401e76 0000 b633f7e5 0001 b633f7e5 0000 00000770 0020 6d2487f1 8c3bec68 8c9c5932 cc35a788 4df12e96 9d4ca247 2263e50f 5e195e1e
+1 01 40000394 001 00000011 2daf7b8d 0011 2daf7b8d 0100 6c8abd63 0001 6c8abd63 1000 00000390 0010 50c41174 f37960d3 c7f278fc f86a816b
+0 10 40000438 000 00001111 0a701e15 0a701e15 0a701e15 0a701e15 52c8ddde 52c8ddde 52c8ddde 52c8ddde 4d21bf32 4d21bf32 4d21bf32 4d21bf32 84875f0a 84875f0a 84875f0a 84875f0a
+0 01 40000310 000 00000101 8f27ae55 8f27ae55 8f27ae55 8f27ae55 c96eaad4 c96eaad4
+0 01 4000050a 001 00001001 90003e37 f6088cc1 f6088cc1 91bcd922 91bcd922 d50d5b39 d50d5b39 9c5ec91b 9c5ec91b 7b0683e6
+1 01 4000011d 000 00001011 10c9da00 0010 10c9da00 0100 10c9da00 0000 7d030bbe 0001 7d030bbe 0000 7d030bbe 0100 7d030bbe 1000 58e6e4d1 0000 58e6e4d1 0010 58e6e4d1 0100 58e6e4d1 1000 00000086 0001 00000110 0020 f8a26b40 d3cafb8f e3eb5163 f00bf279 c9190873 3886ba81 a60185c7 8c722045
+0 10 40000676 001 00000111 7445fab7 bb7ca69b bb7ca69b 513c85ee 513c85ee 13bbc0a7 13bbc0a7 7445fab7
+1 01 400005d0 010 00000100 149aecc8 1111 311bcb33 1110 30e88a2a 1111 3a5add43 1111 6e33f696 0011 000005d0 0020 78fb1bea 845f94bc f2c3850a a79ec893 8ab65381 2258a59b 81fddf7c 91538011
+1 01 40000160 010 00001010 a6cdd038 1110 bbf3eaf0 1101 d46585c3 1101 653a0670 1110 cf01a3d5 1001 5c423381 1111 cbd80f7e 1111 2f7e9d89 1101 75ceb5b0 1101 199f7e45 1111 d4ee3a27 1100 00000160 0030 8f430cd7 7774947d 44ab6c4f bdd67553 27ca5527 ee7a2bea 376a3394 e73d1dff d647aa30 af22fd1f 7d49bd69 081d1808
+0 10 400004fa 000 00001111 b91989de b91989de ce6b09f2 ce6b09f2 ce6b09f2 ce6b09f2 d71e179d d71e179d d71e179d d71e179d 123e51f9 123e51f9 123e51f9 123e51f9 b91989de b91989de
+0 01 4000036c 000 00000011 69e77d51 69e77d51 69e77d51 69e77d51
+1 01 40000237 000 00000101 33000000 0000 75586293 0000 75586293 0010 75586293 0000 75586293 1000 000000b6 0001 00000230 0010 4c83c5ea f71cf0cd 5891ba9d 05d6dfdb
+1 01 40000644 010 00000111 c7084579 0011 43431776 1111 2470043a 1011 30ad84bb 1010 3ea2965d 1010 cf22bb7a 1100 0febd33c 1111 b9682b92 0111 00000640 0030 4a695cb5 6552577f cd377c1a 585ecc73 ebba605d a78b7497 418a93ea 1c61b300 70515c0a 7023f863 081044d0 befcca89
+1 01 40000600 010 00001110 81b1748a 1011 afb4594b 0101 df2b4c35 1110 d7060601 1110 0bffd625 0001 76864f14 1111 e03863bd 1111 12138a03 1111 d8426200 0001 16acaf8c 1001 57e34c1c 0010 8b9721dd 1001 47fec204 1110 4c585029 1011 932a7303 0111 00000600 0040 b0f9ac89 c4489268 983c5c4e dea65430 a417f47f b69bb835 ec804d1b 25289514 9c72b0ef b829bb96 51c6cf6a 305ada4c 13f6ce9e cb0cc9d2 084aad2a 71699a03
+1 01 400002fe 001 00001000 5ba30000 1100 ca4ecae2 0010 ca4ecae2 0100 8f485652 0011 8f485652 1100 10fc2bf8 0011 10fc2bf8 0100 268f6ba1 0011 268f6ba1 1100 000002f0 0020 216bbfd9 189c5910 20cead08 799656e4 335bc6ea 3695297b 1202c269 f1c3b2b0
+0 01 4000042e 001 00000110 414bde0d 4d21bf32 4d21bf32 84875f0a 84875f0a 0a701e15 0a701e15
+1 01 40000309 000 00000100 16728900 0000 16728900 0100 16728900 1000 000075a6 0000 000075a6 0010 00000300 0010 335bc6ea 3695297b 51e75db6 cb2fd438
+1 01 40000732 001 00000101 63ce0000 1100 5a10df24 0011 5a10df24 1100 a7871e6a 0011 a7871e6a 1100 000019a3 0010 00000730 0010 927b929a 401f81b4 625efd80 83e90bdc
+0 10 40000354 010 00000001 365dcb1a 78a45e79
+0 01 400005f4 010 00000110 694d29ff 5d71e2ac 7582f045 81cf748a fdb4044b df2b4cda d706065a
+1 01 40000688 001 00000001 cc39cc12 0011 cc39cc12 0000 00000680 0010 3a496153 009f8492 85cf5323 cc178c58
+1 01 40000208 010 00000011 e39e87f7 1011 48017e42 1100 3ccee52f 1111 5660548c 0011 00000200 0020 0c0d4b0f d9c61300 a0c635f9 f380a0f5 76f2b812 98acc4db 30a0ad3a 2873db60
+1 01 400006f8 001 00000100 622b6bcc 0011 622b6bcc 1100 d521a18e 0011 d521a18e 1000 0000baf6 0011 000006f0 0020 2b1b5933 908005c8 724a73e9 13cbd25d 0028724b 23328b5a 99fd01c3 7c13a90d
+1 01 40000112 000 00000111 281a0000 0100 281a0000 1000 7e1a027d 0001 7e1a027d 0010 7e1a027d 0100 7e1a027d 0000 0000df0f 0001 0000df0f 0010 00000110 0010 dc8c0c96 e81cffad ccd94b64 7743625b
+0 01 40000579 000 00000110 e735f28b e735f28b e735f28b 02c519b7 02c519b7 02c519b7 02c519b7
+0 10 4000006f 000 00000111 e5338fc7 1c1b5121 1c1b5121 1c1b5121 1c1b5121 e5338fc7 e5338fc7 e5338fc7
+1 01 4000017d 000 00000010 39f71c00 0010 39f71c00 0000 39f71c00 0000 00000170 0010 27ca5527 ee7a2bea e90f9614 01df20b9
+0 01 400000a4 001 00001000 a5d10be8 a5d10be8 dc0b1a25 dc0b1a25 2f22ee1b 2f22ee1b 8b8bade7 8b8bade7 1124ccef
+1 01 40000453 000 00001101 d1000000 1000 c37de302 0001 c37de302 0000 c37de302 0100 c37de302 1000 0b0412b0 0001 0b0412b0 0000 0b0412b0 0100 0b0412b0 0000 d8b879d0 0000 d8b879d0 0010 d8b879d0 0100 d8b879d0 1000 0000005f 0000 00000450 0020 fcd08b85 a1c0a6f2 cb1dccb7 d835e13d cd73cbde f3ccc11f a3f0035f 6e498b16
+0 01 40000226 001 00001101 b576bf2e 6500eead 6500eead 0a20752e 0a20752e aa0a0099 aa0a0099 f7f67466 f7f67466 75b46273 75b46273 be2020b6 be2020b6 e42078db
+1 01 40000288 001 00000111 042bd24e 0010 042bd24e 1100 96181091 0011 96181091 1000 70c1c62a 0000 70c1c62a 1100 42633e1f 0000 42633e1f 1100 00000280 0020 6d647bf8 91683830 34b9a4d6 222449e2 4e7285c3 4ef90bcb f5b38011 6fc829dd
+0 01 400004da 001 00000111 ea387995 9770352a 9770352a cf75dc23 cf75dc23 e92f754d e92f754d d96728e5
+0 10 4000025e 001 00001111 119dc95c e42078db e42078db 57110793 57110793 b6415c8c b6415c8c 2f2f087d 2f2f087d 6011bd12 6011bd12 1c9d42c5 1c9d42c5 6e775aa4 6e775aa4 119dc95c
+0 01 40000788 000 00001111 8f4ab8e5 8f4ab8e5 8f4ab8e5 8f4ab8e5 a2e333f1 a2e333f1 a2e333f1 a2e333f1 145a0e2a 145a0e2a 145a0e2a 145a0e2a ff6874a1 ff6874a1 ff6874a1 ff6874a1
+0 10 400001b3 000 00000011 8a772f73 8a772f73 8a772f73 8a772f73
+1 01 40000788 010 00000000 abb5be3d 1111 00000780 0010 4df12e96 9d4ca247 5c02e8c4 2a906df1
+1 01 4000035b 000 00001011 6b000000 1000 241d4450 0001 241d4450 0010 241d4450 0100 241d4450 1000 1bb5fe9e 0001 1bb5fe9e 0010 1bb5fe9e 0100 1bb5fe9e 1000 0017b8c7 0000 0017b8c7 0010 0017b8c7 0000 00000350 0020 c9642fb9 2063a001 7d113306 23bcb4af 674a36b0 0d461680 8c50fa27 70ace2dc
+1 01 40000542 000 00000101 797c0000 0000 797c0000 1000 8fa69395 0001 8fa69395 0000 8fa69395 0100 8fa69395 1000 00000540 0010 ed348f8b 551398bd 7d333c69 bef9beae
+1 01 400006d7 000 00000111 97000000 1000 6415e875 0001 6415e875 0010 6415e875 0100 6415e875 1000 00ec1081 0000 00ec1081 0010 00ec1081 0100 000006d0 0010 22309100 200feb2f 0a021cf0 8223d519
+0 10 40000272 001 00000001 9b8018df 9b8018df
+0 10 4000001c 001 00001111 f0854214 f0854214 d6ff5531 d6ff5531 739c9bf5 739c9bf5 837a7a08 837a7a08 e03d5138 e03d5138 d217dbc1 d217dbc1 a8bf6f33 a8bf6f33 66b39e92 66b39e92
+1 01 40000624 001 00001010 7f69f53e 0011 7f69f53e 0100 8a7b3fca 0010 8a7b3fca 0100 ed75dae0 0001 ed75dae0 0100 2965659a 0000 2965659a 1100 86de005b 0010 86de005b 0000 0000af09 0011 00000620 0020 5b35fd4d 23a0d42e 0892c63d 5755cf8d 995ff6f9 c3f77b5d 916b86bd 2e76fad6
+0 01 40000288 010 00000110 042bd2e3 967d1091 70c1a149 4263bc09 83505816 87606173 d662cb09
+1 01 4000034b 000 00000001 53000000 1000 000000b3 0001 00000340 0010 4e7b5ee8 be415b49 5e27d578 715bd34f
+1 01 4000011e 001 00001111 08310000 1100 cc77d284 0011 cc77d284 1000 2e341ad1 0011 2e341ad1 1000 2666c6e2 0011 2666c6e2 1100 de9dda32 0011 de9dda32 1100 eab33383 0010 eab33383 1100 2db0b735 0001 2db0b735 0100 6f0556a7 0001 6f0556a7 1100 00006cb1 0011 00000110 0030 dc8c0c96 e81cffad 94a0be67 ed97f4ee 0d6bb921 dad067eb ffdc4b14 3db09d7e 2e538e4e b5095187 56dd82dd c84a8ff5
+1 01 400004c6 001 00000100 bb3d0000 1100 48c7a0ed 0011 48c7a0ed 1100 b0f595b2 0010 b0f595b2 1100 000004c0 0010 ee5e20c9 49641c13 0898d422 43e8b4f0
+0 10 400000ac 000 00000011 2f22ee1b 2f22ee1b 2f22ee1b 2f22ee1b
+0 01 400005d8 010 00000001 30e88a2a 3a5add43
+0 10 400000de 000 00000011 ec2f049a ec2f049a ec2f049a ec2f049a
+0 01 4000013a 001 00001010 6f051fa7 b5d96cb1 b5d96cb1 4b8e5e02 4b8e5e02 a4f513c4 a4f513c4 112abc20 112abc20 d5d32df4 d5d32df4
+1 01 400000b4 001 00001110 41eb01d0 0000 41eb01d0 1100 73cd1d4b 0011 73cd1d4b 1000 4fab1808 0010 4fab1808 0100 5a447cf3 0010 5a447cf3 1000 c5deb4bc 0001 c5deb4bc 1100 33ecb10a 0010 33ecb10a 1100 e2a9514f 0011 e2a9514f 0100 0000ebb4 0011 000000b0 0030 1647dee3 cdaff709 3b9d100e 5d0e968b b7224639 e20a0398 cf32cd42 1d52733e eda35723 2ddef9ef e268d656 97afa5f3
+0 01 400002a2 001 00000110 d662cb09 862a3e2c 862a3e2c 6a61e467 6a61e467 f2f47b4e f2f47b4e
+1 01 400001ac 001 00000101 9e4f4c2f 0001 9e4f4c2f 1100 1e578fa8 0010 1e578fa8 1100 831ffe8f 0010 831ffe8f 0000 000001a0 0020 e7cf45bd 64046ddd 5bed83da 18cfe89d df76797b 810cacb7 acb8cb5e cd384d94
+1 01 400007ac 010 00001011 e34bdad2 1011 6ffd5e6f 1111 bbca642c 0010 5df66a7e 1110 bfa5275e 0111 fe7fcae1 0011 8d0e0523 1011 7bc0b23f 0111 68484316 1010 49673424 1111 12eb45e3 1111 0772d1a1 1111 000007a0 0040 bf9ec09a 6d813e4d d8289e0d 56acf2c3 317e2af0 1f38a148 b3fb2712 82ce80c2 d0324449 d0dbde5a 002427e8 941132a6 529bbe45 63f35dc4 90aa64cf 6cdf60e2
+1 01 40000006 001 00000101 e0020000 1000 cafd9b41 0011 cafd9b41 1100 03de367c 0011 03de367c 1100 0000dd9c 0000 00000000 0020 b833e645 a49b8d2a 9348fa98 bcfc7033 ce1bfb9a 3e0e0fce e1116ed7 a72e48bf
+0 01 40000133 000 00000111 eab3333a a8b02b35 a8b02b35 a8b02b35 a8b02b35 6f051fa7 6f051fa7 6f051fa7
+1 01 400003e0 000 00001010 b3f49d31 0000 b3f49d31 0010 b3f49d31 0100 b3f49d31 1000 5e586f41 0001 5e586f41 0010 5e586f41 0100 5e586f41 1000 0085b978 0001 0085b978 0010 0085b978 0100 000003e0 0010 a3e4e3f1 78eae5f4 946e3316 60a2293f
+0 01 40000064 010 00000100 36577e6f 1c1b5121 e5338fc7 878ee95d 43b4e96c
+1 01 400005f6 000 00001111 5b650000 0100 5b650000 1000 7a975bd1 0001 7a975bd1 0010 7a975bd1 0100 7a975bd1 1000 3606d14b 0000 3606d14b 0010 3606d14b 0000 3606d14b 1000 ff26f18a 0001 ff26f18a 0000 ff26f18a 0100 ff26f18a 0000 0000e678 0001 0000e678 0010 000005f0 0020 2a2ad09a a69d5b3b 64e49bf4 04818092 e8033e06 a0f5db42 983c5c4e dea65430
+0 10 40000237 000 00000001 f7f67466 f7f67466
+1 01 400003c0 001 00001110 872df0cc 0011 872df0cc 0100 4f9f97d1 0011 4f9f97d1 0100 9a961554 0011 9a961554 1100 d5467c97 0011 d5467c97 0100 42a108bd 0011 42a108bd 1100 f5f18e99 0011 f5f18e99 1100 aef649ba 0001 aef649ba 1000 0000c059 0011 000003c0 0020 7239cfb8 86eeb0bf 81d80d25 7e8dce25 fc2025a0 e58059f9 5e71b85c 4081cf9f
+0 10 4000051e 001 00000001 7b0683e6 7b0683e6
+0 01 4000037c 000 00000101 4313f65f 4313f65f 4313f65f 4313f65f 5decb73b 5decb73b
+1 01 4000029d 000 00001011 18991200 0010 18991200 0000 18991200 1000 26b09b1a 0001 26b09b1a 0010 26b09b1a 0000 26b09b1a 0000 76c87063 0001 76c87063 0010 76c87063 0000 76c87063 1000 00000070 0001 00000290 0020 4e7285c3 4ef90bcb d36c4712 facb8a86 97a7a899 0f2f4b8a d0046c42 22888567
+0 01 400004e0 000 00001111 cf75dc23 cf75dc23 cf75dc23 cf75dc23 e92f754d e92f754d e92f754d e92f754d d96728e5 d96728e5 d96728e5 d96728e5 ec6af390 ec6af390 ec6af390 ec6af390
+0 10 40000260 010 00000111 17384ce9 c12cbb8f 97e4c18a 9f444e6c 9b8018df 990be2df e7c88774 99460938
+1 01 40000757 000 00000111 20000000 1000 26490e74 0001 26490e74 0010 26490e74 0100 26490e74 1000 00252922 0001 00252922 0010 00252922 0100 00000750 0010 ffc4df88 be300697 5cb3ee5f 4370afd1
+1 01 400007ef 000 00000001 ff000000 0000 00000023 0001 000007e0 0020 62afba8a cc8ec218 da057afa b7fc2a8b 31c0ed2d fa0d0c8a 8c665882 af5d90ce
+1 01 400005e8 001 00000000 0000818f 0000 000005e0 0010 8ab65381 2258a59b 81fddf7c 91538011
+0 10 4000036c 010 00000111 69e77d51 261bcb5d a3748790 b29b1e13 4313f65f 1bb5fe9e 360ab806 12e99442
+1 01 40000396 001 00001100 a3190000 1100 3e32f042 0011 3e32f042 1100 a722cb10 0011 a722cb10 1000 e2f2967e 0001 e2f2967e 1100 8a5ca5a4 0011 8a5ca5a4 1000 61e4b939 0010 61e4b939 0000 6b8ab387 0011 6b8ab387 0000 00000390 0020 cd92d4d9 d9044602 633d01ce c6f11efd 93db28fa 36d7e3b5 9ffee8db c7d5e783
+0 01 40000374 010 00001100 a3748790 b29b1e13 4313f65f 5decb73b a89bfb81 28f6431e a65b847f 02338aec a3197b8d 3e32f042 a7bfcb10 e2f2d67e 8a14a5a4
+0 10 4000069c 001 00000001 d860fa56 d860fa56
+0 10 4000058f 000 00000001 1a7eca23 1a7eca23
+1 01 4000005e 001 00000100 e9530000 1000 e4d6b3ef 0011 e4d6b3ef 1100 d3513db0 0011 d3513db0 0100 00000050 0020 aba4f278 b0e20cfd 8fc3f415 3a6b5038 cb24806b f88c2be4 bd810caf 4092dcc3
+0 10 40000628 010 00000011 1e7b3fb3 8b75ebe0 d8ec1e00 1669f53e
+1 01 400006fc 000 00001111 56a8abce 0001 56a8abce 0010 56a8abce 0000 56a8abce 0000 566d7445 0001 566d7445 0010 566d7445 0100 566d7445 1000 e6dadb42 0001 e6dadb42 0010 e6dadb42 0000 e6dadb42 1000 3ec889d2 0001 3ec889d2 0010 3ec889d2 0000 3ec889d2 1000 000006f0 0020 2b1b5933 908005c8 74a3b3d5 0e401ec4 87305eaa c36659c6 1ce1582e bc9f01cd
+1 01 40000614 010 00000111 aec8131c 1111 a9aed076 0111 068f4242 1110 b8d36865 1110 bba9a6d5 1101 bdd9ffef 1111 f9302259 0111 b2f864c0 1110 00000610 0030 26755aca 898c601e 9a34d794 1e68bd3c c6cfeaf5 a18a7661 3b2f9d45 4a7828cd 486572b2 7f50df44 916b86bd 2e76fad6
+0 10 400003ab 000 00000111 7cbdb945 67f2b387 67f2b387 67f2b387 67f2b387 7cbdb945 7cbdb945 7cbdb945
+0 01 40000241 000 00001000 e42078db e42078db e42078db 57110793 57110793 57110793 57110793 b6415c8c b6415c8c
+1 01 400005a0 001 00001001 d3fadf66 0011 d3fadf66 0000 79644254 0010 79644254 1100 2aedbae5 0001 2aedbae5 0100 66cb931c 0001 66cb931c 1000 b6b43490 0000 b6b43490 0000 000005a0 0020 8ef48c44 4970a5c3 fc529af5 96288d34 d9e996f6 dcb41a5b 381d936e 7ea7bdbd
+0 10 40000069 000 00000001 1c1b5121 1c1b5121
+1 01 40000680 001 00000000 00002c37 0011 00000680 0010 2e1050fd 9c7ddae6 85cf5323 cc178c58
+1 01 40000618 010 00001011 a1c3f7bc 0010 bcbf1b60 1111 c702dc0c 1001 2eeb0bd1 0111 a85ece61 0111 f36f92ee 1111 90c4e305 1101 2ea358c0 1110 140867ee 1111 06a61a88 1111 4382def6 0101 347e1263 1111 00000610 0040 26755aca 898c601e de3394b7 63a1a6da 7065dede 04f41ce6 b34c56c1 4f0d8700 fbb8c37c eccc489d 2d1e69a8 689af998 dfaedd2e 2537f1c4 cd377c1a 585ecc73
+1 01 400000de 001 00000001 336a0000 1000 00000a2a 0000 000000d0 0020 eda35723 2ddef9ef 05da1f3e cff5ad4c af4433eb a2ac2705 171c8505 a5d65122
+0 10 40000196 001 00000001 4bc35c7b 4bc35c7b
+0 01 4000030a 001 00000010 16722bf8 268f75a1 268f75a1
+1 01 40000410 010 00001000 4010fab2 1101 c4b174c7 1110 1a53225b 1101 6b8ce6ef 0111 689b442a 1111 a742d29a 1101 c2d7d378 1110 96cfd62f 1110 38e2f7c3 0111 00000410 0030 c7a5256e 1365e209 08b60d57 4ebb569e 079cff5d 113aef29 09b0e7dd a7bcc614 98662309 63395d28 4290193e 32b97b29
+0 10 40000424 000 00001111 a742de9a a742de9a a742de9a a742de9a c2d7d3ad c2d7d3ad c2d7d3ad c2d7d3ad 96cfd60d 96cfd60d 96cfd60d 96cfd60d 689b442a 689b442a 689b442a 689b442a
+0 01 4000072c 000 00000010 1997f0c1 1997f0c1 1997f0c1
+1 01 40000208 010 00001100 b65b333d 1101 e3a6429b 1110 d3d65e39 1101 2e3e7d35 0110 2c2d6b80 1101 f441f02f 0010 a76cd7de 1111 8ab9d555 1101 ee90ab8b 1110 5a5fcf59 1111 25adbb0a 1011 6556f219 1011 b2c45ecc 1011 00000200 0040 0c0d4b0f d9c61300 927517d1 e9db6eba b07d8329 398f8798 dd0deb09 958ccdbf 44f0de76 a3d3363a 8492bc15 b7113e31 15719b66 6daa068e 7468e03b edd194aa
+1 01 40000374 001 00000000 000036a4 0001 00000370 0010 898ae97e 9e376502 4ef68d2d 29485ae4
+0 10 400005a3 000 00001111 4f78df66 79644272 79644272 79644272 79644272 a1ed38e5 a1ed38e5 a1ed38e5 a1ed38e5 6652861c 6652861c 6652861c 6652861c 4f78df66 4f78df66 4f78df66
+0 10 400004c0 000 00000001 c6154ebb c6154ebb
+1 01 400002b7 000 00001100 a1000000 1000 0681c334 0001 0681c334 0010 0681c334 0100 0681c334 0000 64448f64 0000 64448f64 0010 64448f64 0100 64448f64 1000 cb111a1a 0000 cb111a1a 0010 cb111a1a 0100 cb111a1a 1000 000002b0 0020 da3316b0 ed6220af b93b779e 2ad9211f d506b7c3 c25a9989 4a997b0b 4dbc920a
+1 01 400001f6 000 00000000 00970000 0100 000001f0 0010 f5f26f95 0d09a09d 8d80301d 2b0f8c9c
+0 01 40000399 000 00001111 3e32f042 3e32f042 3e32f042 a7bfcb10 a7bfcb10 a7bfcb10 a7bfcb10 e2f2d67e e2f2d67e e2f2d67e e2f2d67e 8a14a5a4 8a14a5a4 8a14a5a4 8a14a5a4 7cbdb945
+0 10 4000047c 010 00000011 65612467 a225b328 ecfa2ff5 8bb3ad4d
+0 01 40000171 000 00000000 cf3cd0d5
+1 01 400006d4 010 00000111 1bfeebb8 1101 52b1b511 0001 37c76e48 0100 54cf692d 1011 36b68564 0100 72383616 1101 ca1361ff 1011 7aecc90c 1111 000006d0 0030 2a2264c6 8854c889 98fe543a 7d063193 74d187cc 6299c9a8 42e086a5 185e731d 252cecc8 25195363 74a3b3d5 0e401ec4
+0 10 40000018 001 00000111 66b39e92 66b39e92 f0854214 f0854214 d217dbc1 d217dbc1 a8bf6f33 a8bf6f33
+1 01 400005c8 001 00000100 767d187d 0010 767d187d 1100 202f5e4a 0000 202f5e4a 0100 0000c436 0011 000005c0 0020 b3013ff1 285559e4 fead315e f4a5e61d 0b45b994 8a7da51e f2c3850a a79ec893
+0 10 400007c2 000 00000011 26d7cae1 26d7cae1 26d7cae1 26d7cae1
+0 01 4000042c 000 00000100 96cfd60d 96cfd60d 96cfd60d 96cfd60d 4de2f7c3
+1 01 4000050c 001 00001111 3c64b55b 0011 3c64b55b 1100 83efa87f 0011 83efa87f 0100 5dc2ae86 0010 5dc2ae86 0000 40c40712 0011 40c40712 1100 e39eb05c 0001 e39eb05c 1100 79268afe 0011 79268afe 1100 0f2fefff 0011 0f2fefff 1100 c79831d1 0010 c79831d1 1100 00000500 0030 d2a6a82c 730894b5 e091c856 bf7854e8 e1a943e9 256de076 b4b2d508 0f595f81 65852163 74ef166a a9c90952 2a9eb744
+1 01 40000689 000 00000000 00005600 0010 00000680 0010 2e1050fd 9c7ddae6 cad37a4e e7d56e8a
+0 01 4000035e 000 00000101 241d4450 241d4450 1bb5fe9e 1bb5fe9e 1bb5fe9e 1bb5fe9e
+1 01 400005d8 001 00000010 535c9187 0011 535c9187 1100 0000d2d8 0011 000005d0 0010 0b45b994 8a7da51e 6d26c452 d12256fb
+0 10 400004c6 001 00001111 bb3dc30a 48c7a0ed 48c7a0ed b0f595fe b0f595fe 6050ec36 6050ec36 edaa8bd3 edaa8bd3 ea387995 ea387995 9770352a 9770352a c6154ebb c6154ebb bb3dc30a
+0 01 40000058 010 00001110 fad8b211 e95db37c e4d6b3ef 36513db0 1c1b5121 e5338fc7 878ee95d 43b4e96c df324126 4df8c08c 00664a15 b591a9d2 79f5d04d c6d5ce59 79a2ff0c
+0 10 40000758 010 00000001 26490e74 40252922
+0 10 400006db 000 00000011 6415e811 6415e811 6415e811 6415e811
+0 01 400002f3 000 00000100 9fef11ae 2b37bb4c 2b37bb4c 2b37bb4c 2b37bb4c
+0 10 40000102 001 00000111 47ed9144 38e20e46 38e20e46 2fecad96 2fecad96 89f521ce 89f521ce 47ed9144
+0 01 40000515 000 00001000 d50dae39 d50dae39 d50dae39 40c40712 40c40712 40c40712 40c40712 e39e835c e39e835c
+0 01 400000fc 010 00001110 6456d22e 47ed9144 38e20e46 2fecad96 89f521ce 281a7bcb af1a027d 8960df0f 0831dac4 cc03d284 2ee61ad1 2666c6e2 de9dda32 eab3333a a8b02b35
+0 10 400006e8 010 00000111 72389a16 ca4561ff 7aecc90c dd943054 622b6bcc d503abce 54ec692d 6fb6eb13
+1 01 40000618 001 00001001 e97f205f 0010 e97f205f 0100 f7b9df24 0011 f7b9df24 1100 a55bb95b 0011 a55bb95b 1000 70e200a5 0011 70e200a5 0100 21dc0344 0011 21dc0344 1000 00000610 0020 26755aca 898c601e fd8dbbf5 bc72e4f2 298643fc 20add884 5acdef82 8ef400ec
+0 01 4000004e 000 00001000 47b0ad6e 47b0ad6e 09dc2697 09dc2697 09dc2697 09dc2697 3abb46fc 3abb46fc 3abb46fc
+0 01 400001b4 010 00001110 7080fe46 49f30040 34674849 3e1c6d12 40420236 ed9a1d72 a268ada4 138de130 bab01c48 0a6694b1 7264dea3 19080e9a fb1ad40a c64828b4 29449ab2
+1 01 4000010e 001 00000011 2f290000 1100 6d30a7c1 0011 6d30a7c1 1100 00009d1a 0010 00000100 0020 889a4c3e be6e58ea 536f4646 76caf210 1bfb9834 d9ef205e 94a0be67 ed97f4ee
+0 10 40000274 010 00000011 990be2df e7c88774 99460938 9b8018df
+1 01 4000022a 001 00000000 41ac0000 1000 00000220 0010 44f0de76 a3d3363a 6fa8be08 565ead3d
+1 01 400000fa 001 00000111 8baa0000 0100 ae34ceab 0011 ae34ceab 1000 2cb464fc 0011 2cb464fc 0000 8b884c92 0010 8b884c92 0000 00005220 0010 000000f0 0020 766bc5dc 72f917a7 c080624d a3c069f8 e56f2023 373ba1f5 67ba8844 4ecb4641
+0 01 40000491 000 00000011 5cc557ea 5cc557ea 5cc557ea 5647119e
+1 01 40000128 010 00001110 4e1ebebd 1111 c9c2e7a3 1011 539662b5 0011 bc5619a0 1111 9fdf8a42 1101 d61bf365 1111 ee5abd13 1111 0702817c 1111 1d3a3e5d 1110 e8f4451c 1011 562b54f7 1101 21f6bad5 1111 a5606c0e 1110 b3a742c9 0100 525de210 1111 00000120 0050 0d6bb921 dad067eb 49681a48 b1af8c9d 498b35fa 8ff0c806 c4fc6c8b 7970825b 13294a75 c2a2f867 fa48a386 4afc7ac8 02941796 a7b86602 29948db3 25b8aca4 7bee3e88 5d67300e 44ab6c4f bdd67553
+1 01 40000456 001 00001101 3a240000 1000 d40987e9 0011 d40987e9 0100 ad2b85b2 0011 ad2b85b2 1100 6a9c640e 0011 6a9c640e 0100 41a8218b 0001 41a8218b 1100 ed9959d4 0000 ed9959d4 0100 94b565bc 0011 94b565bc 0100 0000f5db 0011 00000450 0030 0b4d6f9a d9c3f669 446c3043 55ac390b 1461ce25 44ff0c8a 526ad33e 36ab18fa 4a920236 870e8892 2483a45f c15f8854
+1 01 400005f2 001 00000111 90010000 1100 09aedaac 0010 09aedaac 0100 1de4e897 0011 1de4e897 0000 1d374b9f 0011 1d374b9f 1100 00006912 0010 000005f0 0020 cb716a85 392043f1 3b189560 d79ae6d0 3b10e08a 8a0ac4bb 983c5c4e dea65430
+1 01 400003d2 001 00001010 f3190000 1100 11f43709 0011 11f43709 0100 c53db6e7 0011 c53db6e7 0100 7c2e7da2 0011 7c2e7da2 1100 271212da 0001 271212da 1000 231fbce1 0011 231fbce1 0100 000003d0 0020 881ddab7 eae06906 9dd606fd 831c60ea bde1c40e 0a75ff3c 946e3316 60a2293f
+0 10 400004f6 000 00000111 123e51f9 123e51f9 d71e179d d71e179d d71e179d d71e179d 123e51f9 123e51f9
+1 01 40000028 010 00000011 44435fbb 0101 7b233917 1110 ce09478e 1111 534f27a6 1111 00000020 0020 abc4c49c 756f4f7c 98bfbe63 854c26e3 02da4f99 eec2872c b865e9a8 230567af
+0 01 400004dc 010 00000101 9770352a cf75dc23 e92f754d d96728e5 ec6af390 d71e179d
+0 10 400006b8 010 00001111 0accb874 a381b5b8 fa802c37 925a32b4 34075612 59a8f61a 706a703c 6fd0cbb7 6bade8b0 d860fa56 7a166a35 b2cd8af4 b24d7bfc 5c8436ea a6ea5161 027f58bb
+0 10 40000132 000 00000011 eab362b5 eab362b5 eab362b5 eab362b5
+0 10 40000208 010 00000111 b65b873d e3a642e7 d3d6e539 1e3e7d8c 2c2dd980 5cf5f051 ba071113 2819979c
+1 01 40000118 010 00000000 97bd0afb 1111 00000110 0010 1bfb9834 d9ef205e b10ee1d9 70d282bc
+0 10 40000310 001 00001111 8f27ae55 8f27ae55 c96eaad4 c96eaad4 8743d3b4 8743d3b4 fb8c5d2c fb8c5d2c bb4eca49 bb4eca49 8f485652 8f485652 16722bf8 16722bf8 268f75a1 268f75a1
+1 01 400004b4 010 00000011 7dd2dab7 0110 5d788e13 1111 d1b51605 1011 1d9d4ee4 1101 000004b0 0020 0ee10d69 446e9a0b 86b76cdb da647586 7b8ba167 b8403676 0898d422 43e8b4f0
+0 10 40000419 000 00001111 1a53d55b 1a53d55b 1a53d55b 2b8ce6ef 2b8ce6ef 2b8ce6ef 2b8ce6ef 4010f5b2 4010f5b2 4010f5b2 4010f5b2 c4b174f1 c4b174f1 c4b174f1 c4b174f1 1a53d55b
+0 10 40000682 001 00000001 fa802c37 fa802c37
+1 01 40000176 001 00000000 93380000 1100 00000170 0010 40c95355 12426a84 e90f9614 01df20b9
+0 01 40000308 010 00001111 16722bf8 268f75a1 8f27ae55 c96eaad4 8743d3b4 fb8c5d2c 3cc68db3 c8845d91 23062cdc ad220005 bc6e4ded 8813e086 1c335b7f 04905f80 d45e341e 88334207
+0 01 40000139 000 00001100 9fdf1f42 9fdf1f42 9fdf1f42 d61bf365 d61bf365 d61bf365 d61bf365 ee5abd13 ee5abd13 ee5abd13 ee5abd13 0702817c 0702817c
+0 10 400000f2 001 00000111 0e733c81 c32ab54b c32ab54b 90aab906 90aab906 ae56ceab ae56ceab 0e733c81
+0 01 400003a8 010 00001111 7cbdb945 67f2b387 4da65142 45836c24 3242c476 e3860635 cf2df0cc 779f97d1 9a961554 66467c97 f31908bd f5f43709 ae3db6e7 7c2e7da2 27f49dda 5e1fbce1
+0 10 400004d2 001 00000001 6050ec36 6050ec36
+1 01 4000060c 010 00000000 9e051b35 0110 00000600 0010 3b10e08a 8a0ac4bb f2d78463 0bf9020c
+0 10 40000104 010 00000001 38e24c46 47ed64fc
+1 01 400002ee 000 00000110 868d0000 0100 868d0000 0000 bb124a4a 0001 bb124a4a 0010 bb124a4a 0000 bb124a4a 1000 000000cd 0001 000002e0 0020 8caae993 a3621b60 ea28117e 648b62d8 e473e54f 9a056f71 20cead08 799656e4
+1 01 400005a3 000 00000101 17000000 1000 e829ceab 0001 e829ceab 0010 e829ceab 0100 e829ceab 1000 00000072 0001 000005a0 0010 375ef44a 38964287 7c0bc4c2 eb76d712
+0 01 40000220 010 00000111 a76cd7de 8ab9bf55 4190abad 5a5fcf59 250abb0a 65f6f219 b2b45ecc be2020b6
+1 01 40000110 010 00000011 119c7810 0101 21efdeb7 1111 4bda3cb4 0000 88bf30e4 1101 00000110 0010 176cbac9 99c8deac fe027661 6316de2a
+0 01 400003a6 000 00000000 8a14a5a4
+0 01 4000045f 000 00001001 ad2b85b2 1c9c640e 1c9c640e 1c9c640e 1c9c640e 41a8298b 41a8298b 41a8298b 41a8298b c79971a5
+1 01 4000013c 001 00000100 d612003e 0011 d612003e 0100 cb2be402 0011 cb2be402 1100 0000a82d 0001 00000130 0020 498b35fa 8ff0c806 6b4a4faf 54084c3f 7c3f7e47 c4b1d31a fa48a386 4afc7ac8
+1 01 40000460 010 00001010 983ef74d 1001 4faf3e1d 0100 be2a8f74 1111 1c5fb160 1110 39075c0f 1110 3c1220a4 1011 820ab7f9 1111 3ab16368 1110 657b4a32 1100 b003343f 1110 401ac96c 0011 00000460 0030 1fa9a720 e7b82463 4a842e81 35454684 0f272114 544e27cb eef654d4 f22c5f4a c6b679a6 802257bd d00aa5b5 6317597c
+1 01 400002af 000 00000011 48000000 1000 005266df 0001 005266df 0010 005266df 0100 000002a0 0020 97a7a899 0f2f4b8a 0d08c5c3 9df19e72 64e0e83f 37f1144f b93b779e 2ad9211f
+0 01 400002fe 000 00001111 5ba3170f 5ba3170f bb4eca49 bb4eca49 bb4eca49 bb4eca49 8f485652 8f485652 8f485652 8f485652 16722bf8 16722bf8 16722bf8 16722bf8 268f75a1 268f75a1
+1 01 400004da 001 00001110 fb120000 1100 e57bf88d 0001 e57bf88d 1100 8081f954 0010 8081f954 0000 72f4a56a 0011 72f4a56a 1100 5a834ccb 0011 5a834ccb 1100 96605447 0011 96605447 0100 5d40ebcb 0010 5d40ebcb 1100 76ef382a 0010 76ef382a 0100 000004d0 0030 f27e9874 134df541 6a6a3d40 f46966ac 77ffc6d0 93fe1b7b ba453aaf 9c2f81f9 93d6d792 c646784a f7a615ff 52e0efb3
+1 01 40000596 000 00001011 d08b0000 0100 d08b0000 1000 e4446022 0001 e4446022 0010 e4446022 0100 e4446022 1000 cc430a62 0000 cc430a62 0010 cc430a62 0100 cc430a62 1000 0000c71a 0001 0000c71a 0010 00000590 0020 b0826bec 45d55ecd d79920ed f0c7d165 84875330 dd3d334c 7c0bc4c2 eb76d712
+0 10 400001a2 001 00001111 64192db5 e57d9e93 e57d9e93 08694ce8 08694ce8 9e4f1b2f 9e4f1b2f 1e578f73 1e578f73 7080fe46 7080fe46 49f30040 49f30040 34674849 34674849 64192db5
+1 01 4000011c 010 00001100 1a6d19ac 1001 de783c87 1111 10d4fc08 1011 38464f93 0101 d1fab801 1100 0bc19b4b 0010 fe5bb9af 1111 11c7fdcc 1110 828fd9ee 1101 99cf2dbe 1111 449b6bfb 1111 c9650727 1111 cb1a9910 1011 00000110 0040 176cbac9 99c8deac d1fcdc28 0e14a932 9e04873b 4d03e387 1f65110e 19bb6eaf 9ea8a230 9bcdf4f2 fe287177 10d8b566 a2214bb3 0ba48f41 a654c077 40827055
+0 01 40000348 010 00001101 539f5eec a8d613b3 78a45e79 365dcb1a 6b7ef876 241d4450 1bb5fe9e 360ab806 12e99442 69e77d51 261bcb5d a37487a4 b29b1e13 4313f65f
+0 01 400003a8 000 00000101 7cbdb945 7cbdb945 7cbdb945 7cbdb945 67f2b387 67f2b387
+1 01 400005e4 010 00000011 8e2f772f 0001 d9daa771 1111 4db0b5cb 1111 4975dd22 1111 000005e0 0020 8a17c437 4fc277c8 e1370c91 3dc79786 03398414 5a30fbeb 3b189560 d79ae6d0
+0 01 4000016f 000 00000001 653a0628 cf3cd0d5
+1 01 4000058e 001 00000011 c2160000 0100 c4e14366 0011 c4e14366 1000 00008fee 0011 00000580 0020 eaeab411 286bcaca a4facf78 a6f2d6c3 46216a8a 271b3eaf d79920ed f0c7d165
+0 01 40000490 010 00000001 5cc557ea 5647119e
+0 01 40000499 000 00001110 75e2f626 75e2f626 75e2f626 9879cf40 9879cf40 9879cf40 9879cf40 3befd51f 3befd51f 3befd51f 3befd51f 66b812e1 66b812e1 66b812e1 66b812e1
+1 01 400002ba 000 00000000 00250000 0100 000002b0 0010 64e0e83f 37f1144f c2b566de 7c91384f
+1 01 400007ec 000 00000001 000048c2 0001 000048c2 0010 000007e0 0010 62afba8a cc8ec218 7502c8a9 8fc72d53
+0 01 40000090 010 00001001 79a2ff0c 4f78dd14 4a1d5c1a 655d9fd2 427b7192 a5d10be8 dc0b1a25 2f22ee1b 8b8bade7 41ebccef
+0 01 4000077d 000 00001110 c0d0e370 c0d0e370 c0d0e370 616c9958 616c9958 616c9958 616c9958 0c081ecf 0c081ecf 0c081ecf 0c081ecf abb5be3d abb5be3d abb5be3d abb5be3d
+1 01 40000360 000 00001111 73622db3 0001 73622db3 0010 73622db3 0100 73622db3 1000 972b0ccc 0001 972b0ccc 0010 972b0ccc 0100 972b0ccc 1000 0c3ee4f9 0001 0c3ee4f9 0010 0c3ee4f9 0000 0c3ee4f9 1000 b2934968 0001 b2934968 0010 b2934968 0100 b2934968 1000 00000360 0010 fd1755fa aa5e5b7a fb7ea495 6d796410
+0 10 4000061a 001 00001111 e07f2076 f7b9df24 f7b9df24 8126698a 8126698a fdb4e678 fdb4e678 df2b4cda df2b4cda d7051b5a d7051b5a a6f13d25 a6f13d25 aec8131c aec8131c e07f2076
+1 01 40000470 001 00000001 06004243 0011 06004243 1100 00000470 0010 72471d81 7bce2a75 eef654d4 f22c5f4a
+0 01 400000c2 001 00000111 5ae37c91 c5dee2bc c5dee2bc 33ecb15b 33ecb15b e1a9514f e1a9514f 7ee9ebb4
+1 01 40000164 010 00000010 a47c1e43 1111 865373ef 1001 42f02769 0000 00000160 0010 737550d5 f58755cc 1c9b2c09 0e58346a
+0 10 400000e0 010 00000011 99e2b1aa 4e3aaee8 b292b92b 05f4d5a0
+1 01 4000062a 001 00001101 b22d0000 1100 fcb594e5 0011 fcb594e5 1100 05328370 0001 05328370 0000 70975721 0010 70975721 1100 d1d1602b 0001 d1d1602b 1000 0b283314 0011 0b283314 1100 3faf33cd 0011 3faf33cd 1100 0000f65b 0011 00000620 0030 298643fc 20add884 0a1d3254 a30f6fd4 37cc8493 780b8bbb fbfef0ba 25fcb91d 110e2187 cfa7489c cd377c1a 585ecc73
+0 10 400006ac 001 00001111 5c8436ea 5c8436ea a6ea5161 a6ea5161 027f58bb 027f58bb 0accb874 0accb874 a381b5b8 a381b5b8 7a166a35 7a166a35 b2cd8af4 b2cd8af4 b24d7bfc b24d7bfc
+1 01 400002d8 010 00000010 5f1f7b32 0111 1ed9b7f0 1111 eea95b3e 0111 000002d0 0020 67af1f64 25c8ac7e 484527ee a9e40942 5945b3fc a6ce0146 ea28117e 648b62d8
+1 01 40000704 010 00000000 9e1dff95 1011 00000700 0010 8b92b107 e00bf559 1ce1582e bc9f01cd
+1 01 40000090 010 00001000 ed69ee2c 1111 d11e2a3e 1100 e356b154 0110 142d91e3 1110 58a21a02 0110 c7692dd8 1111 2050353e 0111 b975ce2b 1100 85bd0336 1001 00000090 0030 47cd6acc ba7ebb30 a276079a c886b92c 7990406b c9019a99 66ebc6fe d4d85e10 fa894daf 2f9971c6 3b9d100e 5d0e968b
+1 01 40000018 000 00001110 95ffc5f2 0001 95ffc5f2 0010 95ffc5f2 0100 95ffc5f2 1000 cfd5e571 0001 cfd5e571 0010 cfd5e571 0100 cfd5e571 1000 1199c77f 0000 1199c77f 0000 1199c77f 0100 1199c77f 0000 00f55593 0001 00f55593 0010 00f55593 0000 00000010 0020 ce1bfb9a 3e0e0fce afc7180f 447655a8 7ac93bd9 b8ae0784 98bfbe63 854c26e3
+1 01 40000754 001 00000111 99c5c30b 0011 99c5c30b 0100 29b65a5b 0011 29b65a5b 0100 27b809ea 0001 27b809ea 1100 25e26074 0011 25e26074 1100 00000750 0020 4707db60 70ffd2dc 86bfd7fe b667f9e4 261440f9 6eb3a69d 9bf344a5 fea95aa4
+0 01 400006a0 010 00001011 7a166a35 b2cd8af4 b24d7bfc 5c8436ea a6ea5161 027f58bb 0accb874 a381b5b8 920a2c07 3d987552 f4ef2147 c60b1776
+0 10 40000086 000 00000111 b591a9d2 b591a9d2 00664a15 00664a15 00664a15 00664a15 b591a9d2 b591a9d2
+1 01 40000550 010 00001110 70ac055b 1111 2c659051 1111 3e6f1421 0011 f50af29e 1110 20b8a752 0111 27e65496 1111 b64ea2bf 1010 50b9cb27 1101 077cb497 0111 98445f3a 0110 e11df047 1101 71c8597a 0100 026c83d9 1111 0a19bf93 1011 29934916 1111 00000550 0040 bc477f7d e951d064 9387c5ab 41924cfa 1c804c5e c7b77b5d 3a6b7e6f 06f5bd3a 2e489c48 63e406f0 1c3b761d 354e6cc7 e3a607e8 12bdcd78 ff065197 bcd6ff7a
+0 10 4000006e 001 00001111 e5338fc7 878ee95d 878ee95d 43b4e96c 43b4e96c df324126 df324126 4df8c08c 4df8c08c e4d6b3ef e4d6b3ef 36513db0 36513db0 1c1b5121 1c1b5121 e5338fc7
+0 01 40000220 010 00001001 a76cd7de 8ab9bf55 4190abad 5a5fcf59 250abb0a 65f6f219 b2b45ecc be2020b6 e42078db 57110793
+1 01 4000062c 001 00000000 0000e38d 0011 00000620 0010 298643fc 20add884 f65e2523 15ec9b15
+0 01 400002bc 000 00000000 64448fe6
+0 01 400005b0 010 00000000 c410f38f
+0 10 4000050f 000 00000111 3c64b55b 90003e37 90003e37 90003e37 90003e37 3c64b55b 3c64b55b 3c64b55b
+0 10 4000066a 001 00000001 bf6f0baa bf6f0baa
+1 01 40000348 001 00000100 3123bc57 0011 3123bc57 1100 b96e4e12 0011 b96e4e12 1100 00009829 0011 00000340 0020 4e7b5ee8 be415b49 2bc7d3b5 d86728bd cefda03e dadfdd52 7d113306 23bcb4af
+0 10 4000019c 001 00000111 630e2d75 630e2d75 54d61cc0 54d61cc0 4bc35c7b 4bc35c7b 99a1b30a 99a1b30a
+0 01 40000118 000 00000101 97bd0afb 97bd0afb 97bd0afb 97bd0afb 1abfdaac 1abfdaac
+0 10 400003cc 000 00000011 66467c97 66467c97 66467c97 66467c97
+1 01 40000566 001 00000000 72e40000 0100 00000560 0010 c0e85ac7 ad6f83fc 3a6b7e6f 06f5bd3a
+0 10 40000466 000 00000011 41af298b 41af298b 41af298b 41af298b
+0 10 400000cc 010 00000111 e1a9514f 7ee9ebb4 848e03a8 fc549c41 332f049a 5ae37c91 c5dee2bc 33ecb15b
+0 01 400006b0 010 00001110 a6ea5161 027f58bb 0accb874 a381b5b8 920a2c07 3d987552 f4ef2147 c60b1776 f2c397b1 1bfef8b8 6415e811 f8c71031 54ec692d 6fb6eb13 72389a16
+1 01 400004b0 001 00000001 03ab979a 0011 03ab979a 1100 000004b0 0010 cfb6a43f c29ec71b 86b76cdb da647586
+1 01 40000748 010 00000101 97c2a40a 0011 ee09bffc 1111 283a2f1f 1111 6c32dece 1111 62830e86 1101 34ee2741 1011 00000740 0020 712c5985 1016c327 251c4548 f163bf31 9ed89970 99df1eff 94491074 a9f79aef
+1 01 400007f1 000 00000101 53be7f00 0000 53be7f00 0100 53be7f00 1000 00e2f1fb 0001 00e2f1fb 0010 00e2f1fb 0100 000007f0 0010 bc03b807 e3b7dc03 8c665882 af5d90ce
+1 01 400001dc 001 00001101 922b0403 0011 922b0403 0100 97b943c1 0000 97b943c1 1100 04da6a16 0011 04da6a16 1100 edda3258 0010 edda3258 0100 e6ea7855 0011 e6ea7855 0100 eaec603e 0011 eaec603e 1100 e802ba41 0010 e802ba41 1100 000001d0 0030 aff37ca2 e7901868 8a85433c eed96494 bc99392f f8758676 e29fb05f 5db0d9c1 510a2589 744c03f6 8d80301d 2b0f8c9c
+0 10 4000004c 010 00000011 47b0ad6e 9e5c7351 e4b5d50c a269fdcc
+1 01 400005b2 001 00001010 2d290000 1100 2f348ce1 0011 2f348ce1 1100 af056950 0001 af056950 1100 a0eb7600 0010 a0eb7600 1100 70b36b77 0011 70b36b77 1100 067d52fa 0011 067d52fa 0100 000005b0 0020 e91b2b2c aa4f99c9 519c465d 252778c0 c501b0f8 cd50885d fead315e f4a5e61d
+0 10 40000123 000 00001111 de783c87 10e6fc08 10e6fc08 10e6fc08 10e6fc08 4e46be93 4e46be93 4e46be93 4e46be93 d1fae7a3 d1fae7a3 d1fae7a3 d1fae7a3 de783c87 de783c87 de783c87
+0 10 4000035a 001 00000001 6b7ef876 6b7ef876
+0 10 4000059e 001 00000111 cc430abf c43e4366 c43e4366 d08b8fee d08b8fee e4446022 e4446022 cc430abf
+0 01 400007f7 000 00000010 10e2f1fb ab62d2bb ab62d2bb
+0 01 400002a9 000 00001110 6a61e470 6a61e470 6a61e470 48f47b4e 48f47b4e 48f47b4e 48f47b4e 955266df 955266df 955266df 955266df a11b6a02 a11b6a02 a11b6a02 a11b6a02
+0 10 40000208 010 00001111 b65b873d e3a642e7 d3d6e539 1e3e7d8c 2c2dd980 5cf5f051 a76cd7de 8ab9bf55 4190abad 5a5fcf59 250abb0a 65f6f219 b2b45ecc be2020b6 ba071113 2819979c
+0 01 40000570 010 00000010 637cb497 0e445fb8 e11df247
+0 01 400005d4 010 00001110 311bcbde 535c9187 3a5ad2d8 62baf696 a338b22f d9daa771 4db0b5cb 4975dd22 5baedaff 7a97e897 1d374b9f 8126698a fdb4e678 df2b4cda d7051b5a
+1 01 4000064e 000 00001110 36f90000 0100 36f90000 1000 0fcdd106 0000 0fcdd106 0010 0fcdd106 0000 0fcdd106 1000 8313e339 0001 8313e339 0010 8313e339 0100 8313e339 0000 c65834f8 0001 c65834f8 0010 c65834f8 0100 c65834f8 1000 00000045 0001 00000640 0020 110e2187 cfa7489c 9caf3bfb 4cc89f53 b6eecb96 ecaf4c7c f29a8151 b89dd195
+1 01 40000576 001 00001100 4dc70000 0100 f994cf50 0011 f994cf50 1100 6b491274 0000 6b491274 0100 5419aa1e 0011 5419aa1e 1000 8d8216b8 0010 8d8216b8 1000 72dcc79a 0000 72dcc79a 1100 5fc9c564 0011 5fc9c564 1100 00000570 0020 ac61bd7f e9d9fb84 10774452 c4fc2531 29bd85d5 709cc19b 2dc28fef 1883b2eb
+1 01 400004f2 000 00001000 41320000 0000 41320000 1000 b1480971 0001 b1480971 0010 b1480971 0000 b1480971 1000 0041493f 0001 0041493f 0010 0041493f 0000 000004f0 0010 f1ad4be3 d81cd316 c7578599 da3d8b5d
+1 01 40000246 001 00001000 ab640000 1100 3234fa0a 0011 3234fa0a 1100 5b9d8987 0011 5b9d8987 1100 c1248872 0001 c1248872 0000 26c2028c 0001 26c2028c 0100 00000240 0020 dae897dd 299dd30b bbce81e5 79e17c55 bf43d645 89eb2315 cfbcbb5e f15f799c
+0 01 400006bc 010 00000100 a381b5b8 920a2c07 3d987552 f4ef2147 c60b1776
+1 01 400002a2 001 00000101 4e520000 1100 0c72a68a 0001 0c72a68a 1000 77198bbb 0010 77198bbb 1100 0000c6f2 0000 000002a0 0010 bcb84e4a 4704cb13 41df55b2 c622d5b8
+0 01 4000009d 000 00000111 142d91d2 142d91d2 142d91d2 42a21a92 42a21a92 42a21a92 42a21a92 c7692dd8
+1 01 400006dc 001 00001110 2f1f34b0 0011 2f1f34b0 0100 7b2ff919 0000 7b2ff919 1100 f2682cc0 0011 f2682cc0 1100 8efc3202 0011 8efc3202 0100 f0041bf0 0001 f0041bf0 1100 2af6f412 0011 2af6f412 1100 82f0875a 0010 82f0875a 1100 00003ef1 0011 000006d0 0030 2a2264c6 8854c889 40f2630e eb35b744 7b1b15b7 441eef19 c0e2081f 65597693 e4e10f48 20211120 c5ff997d 6cb63338
+0 01 40000447 000 00000101 c09958ac 2c1844db 2c1844db 2c1844db 2c1844db ee818076
+1 01 40000368 010 00001010 016253e7 1100 2646dcde 1111 ac40b9d4 1011 76310e43 1111 0ab7e78f 1101 971c56d5 1111 a6b6ee79 0110 0bd151ac 0111 2c249eb6 1111 d4453736 0110 d6dd6a95 1111 00000360 0040 fd1755fa aa5e5b7a 034187e5 52d6d706 e094dc3a c5b75a52 c6f6692c e25c2937 be6720a8 01618f7e c0ae0c73 ddb611ea 5e1c5209 b9ad7f25 633d01ce c6f11efd
+0 10 400006b0 000 00000001 a6ea5161 a6ea5161
+0 01 400003ec 010 00001110 4a18d34c abccf0fc daeef0fd 43f29e81 aff0fbb7 6d02953e bcd636d3 30c0e9ac bd71372f 4010f5b2 c4b174f1 1a53d55b 2b8ce6ef 689b442a a742de9a
+1 01 40000140 000 00000111 fe4b22b3 0001 fe4b22b3 0010 fe4b22b3 0000 fe4b22b3 1000 4fe18362 0000 4fe18362 0010 4fe18362 0100 4fe18362 0000 00000140 0010 d5e13c1a df23d47f a654c077 40827055
+0 10 40000270 010 00000011 9b8018df 990be2df e7c88774 99460938
+1 01 4000028e 001 00000101 af080000 1100 ece9553f 0011 ece9553f 1000 d190832d 0010 d190832d 0100 0000b409 0010 00000280 0020 6d647bf8 91683830 84eae2dd 8140dc0d 94d7418d 47c6e0f2 b64c4287 ff868813
+0 01 40000350 010 00000101 78a49829 365dcb1a 6b7ef876 241d4450 73622db3 972b0ccc
+1 01 40000024 010 00001110 53f36baa 1111 80c0a7dc 1110 a5b1110e 0111 20291f84 0111 a1891da5 0111 c88afbcf 1011 8080da04 1001 773ce774 1101 feb40106 1110 8163a8fe 1111 4f7002fb 1111 d783861c 1001 b01e91f4 1101 c1404f78 1110 9cfa3950 1010 00000020 0040 2adfc9a1 57f30550 49a06f92 4237d451 139d724a bae3e91a 11f26334 ef3a1cc3 08f468e4 cdacf82d 1d692e96 1e0be826 caba74dc 1538e02c 364dead2 d33051be
+1 01 400006ae 000 00001110 22440000 0100 22440000 1000 70134add 0000 70134add 0010 70134add 0100 70134add 1000 a091e860 0001 a091e860 0010 a091e860 0100 a091e860 0000 2c3a426a 0000 2c3a426a 0010 2c3a426a 0100 2c3a426a 1000 0000002f 0001 000006a0 0020 c688ea23 7390349d 7d5e63cb ad2ada04 f5fd1a85 0117b599 c87473c2 5ca4adc2
+1 01 400005b8 010 00000010 07c5c589 1111 31527dab 1011 9de3d03a 1111 000005b0 0020 e91b2b2c aa4f99c9 13f671a3 ebf5711a 6b8db58d 70d20ab3 fead315e f4a5e61d
+1 01 40000730 001 00001101 e642c38c 0010 e642c38c 0100 8936292e 0011 8936292e 1000 5313fbcf 0011 5313fbcf 1000 29ecd29c 0010 29ecd29c 0100 5f863863 0010 5f863863 0000 59a845d6 0010 59a845d6 1000 61c3013f 0010 61c3013f 1000 00000730 0020 12b486c5 14baf1d4 dc867ae7 5f71180b e167fa46 e1f85aba 3facf29a 5d1b4a02
+0 10 40000024 001 00001111 53f36baa 53f36baa 80c0a7bb 80c0a7bb 7bb1110e 7bb1110e ce291f84 ce291f84 53891da5 53891da5 c805fbcf c805fbcf 80027f04 80027f04 029912b3 029912b3
+1 01 40000416 000 00001011 339f0000 0000 339f0000 0000 ca8fdc96 0001 ca8fdc96 0010 ca8fdc96 0100 ca8fdc96 1000 f5f2a69a 0001 f5f2a69a 0010 f5f2a69a 0100 f5f2a69a 1000 000027f4 0001 000027f4 0010 00000410 0020 c7a5256e 1365e209 3e49988a fd9dcda8 3f8db3a5 9db4a796 09b0e7dd a7bcc614
+0 10 400000ef 000 00000111 05f4d5a0 b292b92b b292b92b b292b92b b292b92b 05f4d5a0 05f4d5a0 05f4d5a0
+0 01 400003af 000 00001110 67f2b387 4da65142 4da65142 4da65142 4da65142 45836c24 45836c24 45836c24 45836c24 3242c476 3242c476 3242c476 3242c476 e3860635 e3860635
+1 01 4000071c 010 00001110 538327b7 0111 2b0d1334 1101 802a0bc2 1110 cc07b2d5 1010 eb77c00e 1101 12a1a0ae 1111 3826475c 1111 ac2e0ec3 1111 96676d62 1111 bb61f56d 1000 fcdf3ad2 0101 528fd837 1011 b4c64a0d 0011 7856f9be 0100 29b99e78 0111 00000710 0050 86746f02 2bb3c656 bc1ac287 fd410560 14dd5d2d 8f738917 1dc512fa b4576daf 9ed90b3d 496e102a 7e0bb603 ce83f6ec 2fc768f3 0dc2c714 b68bac89 1638a981 218b26db 36494d79 94491074 a9f79aef
+1 01 400004ba 001 00000010 74d70000 1000 d6167ef8 0001 d6167ef8 0100 000004b0 0010 cfb6a43f c29ec71b 756d1edf 473c3e25
+0 10 400000d3 000 00000001 7ee9ebb4 7ee9ebb4
+0 10 40000726 001 00000001 802a0b3c 802a0b3c
+1 01 4000021a 001 00001000 24610000 1100 41d6271a 0011 41d6271a 1100 4f03db44 0010 4f03db44 1100 ceb2839e 0001 ceb2839e 0100 153d8af5 0011 153d8af5 0100 00000210 0020 b07d8329 398f8798 035f8e59 d98ddca4 77297d00 636b7926 05621260 20baffae
+1 01 4000054c 010 00000010 084f0952 1101 c2555036 1110 fd2e4195 1101 00000540 0020 ed348f8b 551398bd 62c27458 1ac8ec7d 7837f7ff 7efee1ee 9387c5ab 41924cfa
+1 01 40000211 000 00000111 1291c300 0000 1291c300 0100 1291c300 0000 b5203ef0 0001 b5203ef0 0000 b5203ef0 0100 b5203ef0 1000 00000009 0000 00000210 0010 858a8555 652b673a 035f8e59 d98ddca4
+1 01 40000464 000 00001101 ea0776d3 0001 ea0776d3 0000 ea0776d3 0000 ea0776d3 1000 3402729b 0001 3402729b 0010 3402729b 0100 3402729b 1000 2894d995 0000 2894d995 0010 2894d995 0000 2894d995 1000 00003f88 0001 00003f88 0010 00000460 0020 68464837 5e5803ab a5031d4b 4ff0f3de b28d8fa8 bc8a4cbb eef654d4 f22c5f4a
+1 01 400007aa 001 00000000 5c760000 0100 000007a0 0010 bf9ec09a 6d813e4d 153d0fff 4c41122f
+0 01 40000242 000 00000010 e42078db e42078db ab640793
+1 01 40000028 010 00000011 1ea86f75 1101 0dfb3f28 1110 3dc36ba5 1111 b0b0d335 1111 00000020 0020 2adfc9a1 57f30550 aa9ba13b 6e9f3850 0009a378 7be45f01 11f26334 ef3a1cc3
+1 01 40000340 010 00000110 5d6cb872 0111 d749df28 1111 72ee4b13 1001 5ed5dd14 1101 f2623787 0001 200ec40d 1101 abceb2c9 1111 00000340 0020 35215d72 8dccf718 0da37402 9ed348ea 5af44de3 3599e7fb a3dc61ab 17811957
+1 01 4000024a 001 00001000 ced50000 1100 af3dd323 0010 af3dd323 1100 07810088 0011 07810088 1100 1de3f883 0010 1de3f883 1100 64840ee4 0001 64840ee4 1100 00000240 0020 dae897dd 299dd30b 046cfb03 21c849da 1fe6a144 197d0638 f60f4364 035e36e5
+0 10 4000029e 001 00000011 18601273 8350b416 8350b416 18601273
+1 01 400006a8 010 00001011 435caaa1 1111 0054a8a1 0110 86276eb8 0111 bc21326c 0110 e7bbef72 1110 3affb550 1111 cb09f8d7 1010 5e9936c5 1011 7e3066da 1010 00cc6a11 0111 d9e790d1 0000 b6c1ef30 1111 000006a0 0040 c688ea23 7390349d a15b70cd abc88eaf 671048b3 347c1299 335c9ea7 0c212f7a b5ec33b5 bceae5fc aa2cb129 08ea4ee6 1b725d52 cf057efe 40f2630e eb35b744
+0 01 40000212 001 00000000 d391e539
+0 10 40000004 010 00001111 e09c9bf5 cafd9b41 03de367c d217dbc1 a8bf6f33 95ffc5f2 cfd5e571 029912b3 53f36baa 1ea8a775 0dfb3f0e 3dc36ba5 b0b0d335 c805fbcf 80027f04 d6ff5531
+1 01 40000648 000 00001110 de0ad28d 0001 de0ad28d 0010 de0ad28d 0100 de0ad28d 1000 d2a765e6 0001 d2a765e6 0010 d2a765e6 0100 d2a765e6 1000 31ced1b4 0001 31ced1b4 0010 31ced1b4 0000 31ced1b4 1000 00075045 0000 00075045 0010 00075045 0100 00000640 0020 110e2187 cfa7489c 7eff0c51 1d80746c 7acec1cc a358e6fe f29a8151 b89dd195
+0 01 4000023c 001 00001011 be2020b6 be2020b6 e42078db e42078db ab640793 ab640793 ced5fa0a ced5fa0a af3dd387 af3dd387 07810088 07810088
+0 10 40000566 000 00000011 27e45496 27e45496 27e45496 27e45496
+1 01 40000630 001 00000101 673c481f 0001 673c481f 1100 cdc19b0a 0011 cdc19b0a 1100 760c7e50 0011 760c7e50 0100 00000630 0010 2d3e6a49 10fc15ce 5c5ff0b3 2a6f4b1c
+1 01 40000730 010 00000000 fdd6459a 0110 00000730 0010 16262d8c 0ecdf739 7e0bb603 ce83f6ec
+0 10 400007bc 010 00000111 4da5275e 459e0706 b27a9212 7476f1b8 e354dad2 6ffd5e6f 6b0f6402 5df66ac1
+0 01 40000578 010 00000010 f994cf50 024919b7 546caa1e
+0 10 400001f8 000 00000001 39fcf187 39fcf187
+1 01 40000488 010 00001100 6a5574e6 1111 65712768 1111 406f5a41 0011 3ea14ffb 0100 48b1d890 1111 2f02dcf2 1111 94ce388e 1110 213e2fec 1011 7160a2ca 0111 f91a33fc 1101 cdfb7568 0001 6a6e652f 1101 632af259 1110 00000480 0040 c6b679a6 802257bd 9ccb1617 dd73dfc2 426adcde 4e5cea37 6c873efb e7bfdcfe baf99b0a 56393b44 37f4d961 62a63bc0 bce7f5d9 d00c773a eeea6bdf 2b5ada31
+0 10 400000b6 001 00000111 41ebccef 73431d4b 73431d4b bdab18ec bdab18ec 858bad36 858bad36 41ebccef
+0 01 400001f4 000 00001001 e802ba48 e802ba48 e802ba48 e802ba48 39fcf187 39fcf187 39fcf187 39fcf187 edf1640b edf1640b
+0 10 400003f4 010 00000111 daeef0fd 43f29e81 aff0fbb7 27f49dda 5e1fbce1 3985b978 4a18d34c abccf0fc
+0 10 40000554 010 00000011 fd2e9095 2cca1421 f50af2dc c255505b
+0 10 400000a9 000 00000001 dc50353e dc50353e
+1 01 4000074a 001 00001000 6fab0000 1000 db131dd3 0011 db131dd3 1100 9c116688 0011 9c116688 0000 884ead1c 0011 884ead1c 1100 32681e43 0011 32681e43 1100 00000740 0020 2fc768f3 0dc2c714 e7ff33e5 a2f9365d 95244040 e511b639 beba68cf 009fee21
+0 10 400004f8 010 00000111 b919493f ce6b09f2 cf75f923 72f4a56a 5a834ccb ec605447 4140eb9d b1ef0971
+0 01 400000a3 000 00001001 42a21a92 c7692dd8 c7692dd8 c7692dd8 c7692dd8 dc50353e dc50353e dc50353e dc50353e b975ee1b
+0 10 4000044e 000 00000111 ee818076 ee818076 2c1844db 2c1844db 2c1844db 2c1844db ee818076 ee818076
+0 01 400001aa 001 00001001 08694ce8 9e4f1b2f 9e4f1b2f 1e578f73 1e578f73 7080fe46 7080fe46 49f30040 49f30040 34674849
+1 01 40000423 000 00001101 7b000000 0000 e1c388db 0001 e1c388db 0010 e1c388db 0100 e1c388db 1000 7cf970c2 0001 7cf970c2 0000 7cf970c2 0000 7cf970c2 1000 cd727d01 0001 cd727d01 0010 cd727d01 0100 cd727d01 0000 0000005f 0001 00000420 0020 36b2e436 062e6887 f566011f 044852aa 1add383c 95e8df5c 4290193e 32b97b29
+1 01 4000065d 000 00000001 00327400 0010 00327400 0100 00000650 0010 7acec1cc a358e6fe 13c580d5 4db08628
+1 01 4000051c 010 00001000 1040cf2f 1111 b26cecda 1111 56752dc5 1111 b6fb59de 1110 83bcab95 1111 c3073904 1101 15e86977 1010 9bff609b 0011 4cea9c6a 1101 00000510 0030 e1a943e9 256de076 fbea3e30 0516a75d 4252cecb 8b8a631b cc7576a1 2e305bc9 f7f683ea 2139e962 e5348635 f19413d2
+1 01 400001f4 010 00001110 161eb68d 1110 ef20f627 1111 5b9756ed 0010 acdad298 1011 c79f2f9a 1111 04a64fa2 1111 27d6c391 0111 d6c127d5 1101 bbaf0338 0111 5ec69021 1000 3e57740a 1111 f9f7d72d 1101 a3292629 1011 2f163798 1001 bf0e6322 1110 000001f0 0040 cac5770d 2886933a 119683d3 24f7200a 3a0a34c0 e051117a 8a05c64b f4cf6199 61bbf450 7b59dff3 f1c4761c 87935caa 7bcb9f19 ca2d28c0 14ca13ef 607647cc
+1 01 40000076 001 00001101 56e00000 1100 dffa1e1a 0011 dffa1e1a 1000 488205d2 0010 488205d2 1000 6e06266a 0011 6e06266a 1100 863a8cc2 0011 863a8cc2 1100 6fb5bfbe 0010 6fb5bfbe 1100 dd8f2ce3 0011 dd8f2ce3 1000 00004e72 0001 00000070 0030 cd34fd6b c646b68a e80c5e2c 7d7b62a3 be0b2ba0 0163ac20 179dfa25 59ca5c5e 16ebcb4c a829872e a276079a c886b92c
+1 01 40000388 001 00001000 46b06399 0001 46b06399 1100 1e547da1 0010 1e547da1 1100 470dfe05 0011 470dfe05 1000 3ba50db2 0011 3ba50db2 0100 00000c59 0011 00000380 0020 be6720a8 01618f7e 65daf0bf 558ac9b1 4e807f28 d2179627 a0fabcbc d6f90c1a
+1 01 400003dc 010 00000010 df37ddc7 1001 0c909784 1011 81e4f4c0 1111 000003d0 0020 881ddab7 eae06906 97422f9d 01d78780 805ba5f3 1fc615a7 946e3316 60a2293f
+1 01 4000013e 000 00000011 55c30000 0000 55c30000 1000 0000bf86 0000 0000bf86 0010 00000130 0020 9ea8a230 9bcdf4f2 f1f2d0bc 1aae7756 0d49021d f0d23d96 a654c077 40827055
+1 01 40000610 010 00000110 adbb5774 1111 4189f21b 1001 72c88239 1101 fea16d51 0111 1e118195 1101 3cf5366f 1111 d782eca6 0011 00000610 0020 2a7788ff 394811fc 8f0fb285 60a71a16 abc17720 fb796095 235266ce 588eb563
+1 01 400004be 000 00001001 afa60000 0000 afa60000 1000 a13b8039 0000 a13b8039 0010 a13b8039 0100 a13b8039 1000 31c04af1 0001 31c04af1 0010 31c04af1 0100 31c04af1 1000 000004b0 0020 bce7f5d9 d00c773a 54a73c44 749bbed8 17f5824b 737a1014 0898d422 43e8b4f0
+1 01 40000198 010 00001111 bfba5265 1011 ca0cdce6 1101 a67bbb46 0110 c330e904 1111 334e1739 0111 53a759b2 1110 995f182a 1011 78b31765 0101 b2d6e072 1110 3729ee62 1111 ecf5b190 1100 a70de8dd 1110 81a9e1e1 1111 d9ccdf8e 1011 684681c6 1111 83209d21 1011 00000190 0050 3174df10 e25255e7 710c4fc7 09000248 5bf5663d 7245620a f0b21652 1a8363ca 469dcd8d eea6c524 ef97ad26 353a617e 0eb0bbbb 73db68ba e782a0aa 0a15be75 51370de0 bbc3b13c 8a85433c eed96494
+0 10 40000172 000 00000011 cf3cd0d5 cf3cd0d5 cf3cd0d5 cf3cd0d5
+1 01 4000068c 001 00001001 db4925bf 0011 db4925bf 1100 df717f73 0011 df717f73 1100 575b494b 0011 575b494b 1100 9b7b452d 0011 9b7b452d 1100 ad8020ce 0011 ad8020ce 1100 00000680 0020 2e1050fd 9c7ddae6 aab0d746 9dc58ffc 541914d4 71726137 9add34e8 4ac4c7c2
+0 10 4000011a 001 00000111 97bd0afb 1abfdaac 1abfdaac 6d9ca710 6d9ca710 21efdeb7 21efdeb7 97bd0afb
+0 10 40000560 001 00001111 4bb8a752 4bb8a752 27e45496 27e45496 b6e1a287 b6e1a287 50b96027 50b96027 637cb497 637cb497 0ec75fb8 0ec75fb8 f994cf50 f994cf50 024919b7 024919b7
+1 01 40000026 001 00000100 e0f90000 1100 aaf38d7e 0010 aaf38d7e 1100 1460654b 0001 1460654b 0100 00000020 0010 673bec92 0c08391d aedf57c9 7ee45735
+1 01 40000740 010 00000010 7bf2d795 1011 7b8f06ed 1101 16ee230a 1110 00000740 0010 869fb5b9 f2a41ba6 363319b6 e0e9fca7
+1 01 400001f5 000 00001000 4215e500 0010 4215e500 0100 4215e500 0000 8ea37f8b 0001 8ea37f8b 0010 8ea37f8b 0000 8ea37f8b 1000 00009a3d 0001 00009a3d 0010 000001f0 0010 b56d2bbd 7a4d519a 3ed53b19 a5ffef4e
+0 10 4000048e 001 00001111 65712768 5cc55a41 5cc55a41 56a1119e 56a1119e 48b1d890 48b1d890 2f02dcf2 2f02dcf2 657bf0f5 657bf0f5 b0033419 b0033419 6a5574e6 6a5574e6 65712768
+1 01 400000c8 010 00001110 e04c2733 0110 39175b4c 0111 daf1047c 1100 c9d030e9 1010 f56645a0 1111 89bad2fd 1111 6d253d3f 1110 929d25c7 1111 cdf1b48d 0000 1af7e55d 1111 72a8e0fd 1111 9abc30b4 0111 834a25e3 1011 8f4ad3d8 0111 213a05b2 1011 000000c0 0050 b7224639 e20a0398 04fa9c4c 1fda6a6d 76055b21 d6ced813 51bfc9df af911225 d04de50b cfa7ccb7 ea50898c 92ad627b 16beeb4d 66c36548 3fade53f 048a2550 da0beae0 9e8b0bb7 67ba8844 4ecb4641
+1 01 40000598 010 00001110 b3ab915d 0101 fa3c4c4e 0101 d438a527 1110 c0111ef2 0111 14c81a4a 1110 e49b49ca 1111 caeb8225 1111 b05a8eed 0001 758a3848 1101 8d278182 0110 75e3432a 1111 2c7dd72a 1011 03b41c6e 1111 87b4fadd 1110 c3e8d5aa 1111 00000590 0050 46216a8a 271b3eaf 59e2b9b8 00c0a709 a82f9b87 76911c7c c13b4ca9 40a922ce ed95f4eb cd45ff6c 0c67861e 771e45b8 83052143 74c9631e 7f2775df f730d16d 566cf615 9423fa16 6d26c452 d12256fb
+0 10 40000456 001 00000111 3a7dd502 c90987e9 c90987e9 ad2b85b2 ad2b85b2 d10590e3 d10590e3 3a7dd502
+1 01 400004dc 001 00001100 564f16cf 0001 564f16cf 1100 7245160a 0011 7245160a 1100 59af3e6a 0011 59af3e6a 1100 3a0b58f6 0011 3a0b58f6 1100 631fba29 0011 631fba29 1100 d7f5a85d 0011 d7f5a85d 1000 000059cf 0011 000004d0 0030 f27e9874 134df541 f265fda8 0638bf03 fca07a08 14f96452 a65f9ed0 209b92b1 5c663425 6b2a03cc c7578599 da3d8b5d
+1 01 4000072c 001 00000100 87c0b4d7 0000 87c0b4d7 1000 ac1dbc7c 0011 ac1dbc7c 1100 0000d707 0001 00000720 0020 14dd5d2d 8f738917 d8208c84 81d3b962 45946902 900292fe 7e0bb603 ce83f6ec
+0 10 400005e0 010 00000011 62baf696 a338b22f d9daa771 4db0b5cb
+0 01 40000729 000 00000111 ccf3b24d ccf3b24d ccf3b24d 8777f00e 8777f00e 8777f00e 8777f00e ac1dbc7c
+0 01 40000710 010 00000000 658a7bdb
+0 10 400005b4 010 00000111 2f348ced 758ac548 312781ab d438a51a e8111ef2 14c81a72 e49b49ca caeb8225
+1 01 40000079 000 00001010 3d934a00 0010 3d934a00 0000 3d934a00 1000 ada39d5d 0000 ada39d5d 0000 ada39d5d 0000 ada39d5d 1000 ad22eb04 0000 ad22eb04 0010 ad22eb04 0100 ad22eb04 1000 00000070 0020 cd34fd6b c646b68a c43b7cc8 32be85f0 178292d9 ba609667 179dfa25 59ca5c5e
+0 01 40000024 010 00000010 e0f96baa aaf38d75 0d603f4b
+1 01 40000440 010 00000101 b85c6791 1101 e33c1d57 1110 ecbb528d 1110 36e7b084 0110 01a6bb91 0110 57041625 1110 00000440 0020 7e6470a4 2655f437 752ebf8a f6c77be7 cae2d840 ca153e67 446c3043 55ac390b
+1 01 4000043e 000 00000010 0b4f0000 0000 0b4f0000 0000 000000d1 0001 00000430 0020 1add383c 95e8df5c 4290193e 32b97b29 0c756e7d 8ece4853 752ebf8a f6c77be7
+1 01 400006ac 010 00000000 6b31b889 1111 000006a0 0010 c688ea23 7390349d e83a91dd 5dec01b3
+1 01 400007ae 000 00001011 b2750000 0100 b2750000 1000 e91a1187 0001 e91a1187 0000 e91a1187 0100 e91a1187 1000 7f8038ec 0001 7f8038ec 0010 7f8038ec 0100 7f8038ec 0000 0000323a 0001 0000323a 0010 000007a0 0020 bf9ec09a 6d813e4d 09b5c02d 1f94851b 5b7cebe2 9cef4942 4d329760 f4ff0e84
+1 01 400006c6 001 00000110 ee360000 1100 b68f3c2e 0011 b68f3c2e 1000 ad161d45 0011 ad161d45 0100 72f1a347 0001 72f1a347 1000 000006c0 0020 55eb1db4 12142db9 6dd7dd7c ae5329f8 2f65b2a9 62a732d4 40f2630e eb35b744
+1 01 4000029e 000 00000011 fa330000 0100 fa330000 1000 0000f7f0 0001 0000f7f0 0010 00000290 0020 94d7418d 47c6e0f2 30c1697e 3ff673d0 135ecefb ef74f8a8 41df55b2 c622d5b8
+1 01 4000004a 001 00000001 9d7f0000 1100 0000c28e 0001 00000040 0010 08f468e4 cdacf82d ab2a3b36 8b4ceae9
+0 10 40000038 010 00000011 c805fbcf 80027f04 3dc36ba5 b0b0d335
+0 01 400000bc 001 00001110 bdab18ec bdab18ec 5ae37c91 5ae37c91 c5dee2bc c5dee2bc 334c275b 334c275b e1175b4c e1175b4c daf1ebb4 daf1ebb4 c98e30a8 c98e30a8 f56645a0
+1 01 400006e0 001 00000001 7dbbb8ca 0011 7dbbb8ca 1100 000006e0 0010 aed68732 96f5db26 c0e2081f 65597693
+0 01 400000cc 001 00001111 e1175b4c e1175b4c daf1ebb4 daf1ebb4 c98e30a8 c98e30a8 f56645a0 f56645a0 89bad2fd 89bad2fd 6d253daa 6d253daa 929d25c7 929d25c7 b292b92b b292b92b
+0 10 4000013a 001 00001111 11c7fd42 558f00ee 558f00ee de783c87 de783c87 10e6fc08 10e6fc08 4e46be93 4e46be93 d1fae7a3 d1fae7a3 eab39bb5 eab39bb5 fe5bb9af fe5bb9af 11c7fd42
+1 01 40000520 001 00000100 77a79597 0011 77a79597 1100 598fefbd 0001 598fefbd 1100 00007b41 0011 00000520 0010 a9b03aef fa20c7de 9bcfb70a 14d0224f
+0 01 400000ce 000 00001110 e1175b4c e1175b4c daf1ebb4 daf1ebb4 daf1ebb4 daf1ebb4 c98e30a8 c98e30a8 c98e30a8 c98e30a8 f56645a0 f56645a0 f56645a0 f56645a0 89bad2fd
+1 01 400006e0 001 00000001 289e3644 0001 289e3644 1100 000006e0 0010 3a2572ce a435d9aa c0e2081f 65597693
+1 01 40000020 001 00001000 09e23342 0001 09e23342 1100 f963740f 0010 f963740f 1100 1261e685 0011 1261e685 1100 c942c2a9 0010 c942c2a9 1100 00008c43 0011 00000020 0020 50b0d250 267e7003 e5521757 18eaf6f3 b4df76ab 87793c90 11f26334 ef3a1cc3
+1 01 40000103 000 00001110 7d000000 1000 25675129 0000 25675129 0010 25675129 0100 25675129 0000 3c5ff76b 0000 3c5ff76b 0010 3c5ff76b 0100 3c5ff76b 0000 39fc6758 0001 39fc6758 0010 39fc6758 0000 39fc6758 0000 0000e540 0001 0000e540 0010 00000100 0020 ffa8361d fe7a478b df3b05c1 df99d00c 39e57dcd 25978907 d1fcdc28 0e14a932
+1 01 400000e0 010 00000100 e9c586be 1111 ef7ff7ab 1111 26325138 1111 b10a7d6f 1000 61fa54ca 0111 000000e0 0020 8743b6ce 5e56a1dc 624dbd04 c6a21638 ec34f2e5 068e90b2 3fade53f 048a2550
+1 01 400006fe 001 00001101 1e010000 1100 7f4b8a6c 0010 7f4b8a6c 1100 8f200fa2 0011 8f200fa2 1100 50d3cbba 0011 50d3cbba 0000 4013a172 0011 4013a172 1100 3f54dd8c 0001 3f54dd8c 1100 007ea214 0011 007ea214 1100 00003528 0001 000006f0 0030 e4e10f48 20211120 8d86b93f 7195434f 7129df36 a219665b 6276e2f4 17f7904a 796bf558 0cd88f57 3fe2aa6f 3a7f648c
+0 10 4000010e 000 00000111 2f296758 2f296758 2f5ff796 2f5ff796 2f5ff796 2f5ff796 2f296758 2f296758
+1 01 4000031c 010 00000001 a38e0b70 1110 5f8c586a 1111 00000310 0020 42a2b956 5aaf5c83 7c27ef94 6447669e 9e3c326f 31d7c339 ab6d8798 072ed66e
+1 01 400005b8 010 00001001 b8dec69c 1101 a9ac2a08 1010 241fad89 1100 f9516f77 1111 5c30eb21 0111 5c2a48cb 1111 625a3d4f 1011 4d1af44d 0111 0d0e51a2 1111 64443e87 0110 000005b0 0030 ed95f4eb cd45ff6c aaab1abb 90214d7c e6171caa 6e05a35b a6add862 2975ba49 66e804f6 35624e66 bfc99981 4c853bfa
+0 01 40000185 000 00000100 199f7e45 199f7e45 199f7e45 d4eec922 d4eec922
+0 10 400006ec 010 00000011 f00461f0 289eb844 f2682cc0 72fc3202
+1 01 40000320 010 00000010 3f1bd256 0101 8ec1a861 1111 84680bb1 0101 00000320 0010 d8dce4a1 c0339e93 5c8b34f3 873c87c9
+0 10 400007e6 001 00000111 501a6b35 7eec80b3 7eec80b3 e40948c2 e40948c2 f65bde89 f65bde89 501a6b35
+1 01 40000060 000 00000010 00d3c6e9 0001 00d3c6e9 0000 00d3c6e9 0100 00000060 0010 084ef444 267a6293 bd810caf 4092dcc3
+0 01 400004fb 000 00000101 b919493f ce6b09f2 ce6b09f2 ce6b09f2 ce6b09f2 9376aaf8
+0 10 40000128 010 00001111 4e46be93 d1fae7a3 eab39bb5 fe5bb9af 11c7fd42 558f00ee 7ded05b2 38675146 2f5ff796 2f296758 6d9ce540 21efdeb7 97bd0afb 1abfdaac de783c87 10e6fc08
+1 01 4000062e 001 00001110 0cc30000 1000 21fcdce5 0010 21fcdce5 0000 c4421062 0010 c4421062 1100 0a710379 0011 0a710379 1100 2924578d 0001 2924578d 0100 c6c0d8df 0010 c6c0d8df 1000 c94c8a3a 0011 c94c8a3a 1100 c3ef58c7 0010 c3ef58c7 1000 00000620 0030 abc17720 fb796095 2c3fc81a f4f4d453 1be76d48 76729f28 a7d6414d bf303e7a 2d1f3c17 c0707d58 e5e3e36a 09f32f09
+1 01 40000522 001 00000010 66a20000 1100 38a3e53a 0011 38a3e53a 1100 00000520 0010 f1187a6e 8462201b 9bcfb70a 14d0224f
+1 01 400007cf 000 00001001 e3000000 1000 63a928f8 0000 63a928f8 0010 63a928f8 0100 63a928f8 0000 d09933a0 0001 d09933a0 0010 d09933a0 0100 d09933a0 1000 0000002c 0001 000007c0 0020 d0324449 d0dbde5a e8c1c0eb 5c3dcaad 65ee9f73 78640099 8ba05558 6405926a
+1 01 40000192 000 00001000 8de20000 0100 8de20000 1000 25032679 0001 25032679 0010 25032679 0100 25032679 1000 00da9e5a 0001 00da9e5a 0010 00da9e5a 0100 00000190 0010 971fb7a7 1dad515e 07958a9f df6e8e78
+1 01 40000268 000 00000111 3ab85dc4 0001 3ab85dc4 0000 3ab85dc4 0100 3ab85dc4 0000 b5ef0ad9 0001 b5ef0ad9 0010 b5ef0ad9 0100 b5ef0ad9 1000 00000260 0010 bdc5e23c 330c6c4c b4fc18ff 215f5603
+1 01 400000d6 000 00000011 60de0000 0100 60de0000 1000 000020a2 0001 000020a2 0010 000000d0 0010 0d28da3d 98e6ba6d cd305ed6 be3efda0
+1 01 40000068 001 00000100 3935644f 0011 3935644f 0100 85590895 0011 85590895 0100 0000f3e9 0000 00000060 0020 084ef444 267a6293 4af60a1a 150909b2 cd34fd6b c646b68a c43b7cc8 32be85f0
+0 10 400002a8 010 00001111 77198b70 48f47b4e 955266df a11b6a02 4b25c334 64448fe6 f8271245 7785cd57 042bd2e3 af081091 ecc1553f 42908309 8350b416 fa331273 4e52f7f0 0c2a708a
+0 01 40000737 000 00000000 38264707
+1 01 400004ea 000 00001001 fad70000 0100 fad70000 0000 696cb53b 0001 696cb53b 0010 696cb53b 0100 696cb53b 0000 009c5273 0001 009c5273 0010 009c5273 0000 009c5273 1000 000004e0 0020 fca07a08 14f96452 a81994bd d16fa47f 4bab6808 2aff1a75 c7578599 da3d8b5d
+0 01 4000048b 000 00000010 6a5574e6 65712768 65712768
+0 10 4000063a 001 00001111 0a710379 0b24338d 0b24338d 1e11b995 1e11b995 3cf5366f 3cf5366f b22deca6 b22deca6 0cb5e38d 0cb5e38d 673cdc1f 673cdc1f c442100a c442100a 0a710379
+0 10 400006d8 001 00001111 6415e811 6415e811 f81f34b0 f81f34b0 cb0af807 cb0af807 ee3636c5 ee3636c5 b6ef3c2e b6ef3c2e c6161d45 c6161d45 72c39747 72c39747 b6c1ef30 b6c1ef30
+1 01 400001a6 001 00001101 fb9f0000 1100 272f856a 0011 272f856a 1000 ee630401 0001 ee630401 1100 b9626641 0011 b9626641 0100 68287cf8 0011 68287cf8 1100 04b023ba 0000 04b023ba 1100 f88df3c0 0011 f88df3c0 1100 0000c37e 0011 000001a0 0030 b6ca2a46 f07e5812 f4df49ed 53d06338 7d98e36d e545727f b92cf8c7 0f674d59 32f40c97 99355612 e782a0aa 0a15be75
+0 10 40000164 010 00000001 a47c1e43 525de210
+1 01 40000510 010 00000100 98467adc 1110 5e0c6ad6 1010 7b9047d9 1011 d9dac806 0011 cff46a3d 1111 00000510 0020 ed8ddbd2 3a7d33e9 fdf2a816 3099aee2 1ba59df3 91a32ad9 9bcfb70a 14d0224f
+1 01 40000500 001 00000000 00003981 0011 00000500 0010 45affc12 46f6f2a0 e091c856 bf7854e8
+1 01 40000744 010 00001000 450499d8 1101 4aa0e998 1111 9995e141 1111 1887830d 1111 97c12d59 1101 0b92903f 1111 851b00de 1011 1e0d32c0 1111 cc660670 0011 00000740 0030 f23cdb28 72fd2472 c8b07c1e 85e651a7 bfaa50d2 f3433bb4 17db7add b78071d5 dbb80f28 c40a0cc4 9bf344a5 fea95aa4
+0 01 400005cc 010 00000100 5c2a48cb 62e83d4f 311af44d 0d0e51a2 3a443ed8
+1 01 4000008c 010 00001010 29eec311 1101 91ef1534 1101 63ae85a6 1101 13a8835e 1011 9f987ce6 1111 0c3e1b64 0110 5bfdb732 1111 7f30bc1f 0110 5e3e7427 1101 b41a65a2 0111 4aed565f 1011 00000080 0040 178292d9 ba609667 f85a848d aa68bcf1 9a1570c9 dacc7cbd 4008afd0 6da4b8b2 d7d7c81d 9817dd8f bd2fbcb0 26a12d8c 07fae722 9ee4ac39 3b9d100e 5d0e968b
+1 01 40000322 000 00000100 95690000 0100 95690000 1000 00048dab 0001 00048dab 0010 00048dab 0100 00000320 0010 c7054cb5 c462d145 5c8b34f3 873c87c9
+0 10 400006ec 010 00000111 f00461f0 2af6f412 82f08754 622b3ef1 1e01abce 289eb844 f2682cc0 72fc3202
+1 01 400003f2 001 00000010 20ac0000 1100 c9155a12 0011 c9155a12 1000 000003f0 0010 ff5d2093 9e805793 718de704 01126e6b
+1 01 400004d8 010 00000000 e8dafd43 1011 000004d0 0010 f27e9874 134df541 660a4332 9fa0ca6f
+1 01 4000051e 001 00000000 e1f40000 1100 00000510 0010 ed8ddbd2 3a7d33e9 a7946110 dfd19bbb
+0 01 400001cc 001 00001000 d968df8e d968df8e 684681c6 684681c6 83b09d21 83b09d21 0a6694b1 0a6694b1 722b0403
+1 01 400005a2 001 00001000 81430000 1100 0f68ca5b 0001 0f68ca5b 1100 9dd7c3e9 0011 9dd7c3e9 0000 035a819d 0001 035a819d 1100 ed60815e 0010 ed60815e 1100 000005a0 0020 9a89345e 3a023596 5efc08e3 77e7fd9a f0f6d007 a61bcb99 aaab1abb 90214d7c
+1 01 40000374 010 00001001 3dc106af 1111 a13392d7 1011 8bf7635a 1111 a896fc50 1011 2bc0f1e4 0111 12ed956d 1110 d779f8da 1111 e16ee2c7 1001 a7e62659 0111 729958da 1101 00000370 0030 5ef59117 f5c26a68 f29d15b7 a1de7eed 3ffa5404 d6f9e183 143e2c0a 2931c4e3 fb31efa2 50d2e323 ed3c400b 2ca3469b
+0 01 40000138 010 00001001 11c7fd42 558f00ee fecfbfb3 44e183fb c9650727 cbd39910 562bb6f7 21f6bad5 a5606c29 e5a7b222
+1 01 400006d0 000 00001111 f928c2fe 0001 f928c2fe 0010 f928c2fe 0100 f928c2fe 1000 7d58d5d9 0001 7d58d5d9 0010 7d58d5d9 0100 7d58d5d9 1000 e919c730 0001 e919c730 0000 e919c730 0100 e919c730 1000 e31e35f7 0001 e31e35f7 0000 e31e35f7 0000 e31e35f7 1000 000006d0 0010 39bb2e9d 04f8dd34 e6098a33 3f7276b8
+0 01 4000011e 001 00000110 1abfdaac de783c87 de783c87 10e6fc08 10e6fc08 4e46be93 4e46be93
+0 10 4000027c 010 00000111 99460938 17384ce9 c12cbb8f 97b8c1c4 b5ef0ad9 9b8018df 990be2df e7c88774
+1 01 4000030a 000 00001000 a3670000 0100 a3670000 0000 1ae4dcbe 0001 1ae4dcbe 0010 1ae4dcbe 0000 1ae4dcbe 1000 009b411c 0001 009b411c 0000 009b411c 0100 00000300 0020 335bc6ea 3695297b e2a17ad6 9dd07075 f6ba3e74 37b6fa92 7c27ef94 6447669e
+0 01 4000025f 000 00001010 119dc95c 17384ce9 17384ce9 17384ce9 17384ce9 c12cbb8f c12cbb8f c12cbb8f c12cbb8f 97b8c1c4 97b8c1c4
+0 10 40000792 001 00000001 145a0e2a 145a0e2a
+1 01 400001ba 001 00001100 bd550000 1100 de39a955 0011 de39a955 0000 ba7e012d 0011 ba7e012d 1100 51861baf 0011 51861baf 1000 0646a2fe 0001 0646a2fe 0100 ff8e7ade 0011 ff8e7ade 1100 a99ee90e 0001 a99ee90e 1100 000001b0 0030 7d98e36d e545727f d8bf19d0 5f9f94cd 11f8710a 2b2e2aae 8952808e f956948b d0b78383 e172be1d 8a85433c eed96494
+0 10 40000318 010 00000001 8743d3b4 a38e0b2c
+1 01 400001c4 010 00001101 77050e9a 1101 86286fbd 1110 fe88ead4 1110 6d5e30e7 0111 ef4a6d7b 1111 9c6ad775 1011 c7bda173 0111 af8f31b3 0111 9f46dabd 0110 9979e792 0111 f788f24e 1011 f3f0ef10 0101 51fcead5 1101 ed0f0a15 1110 000001c0 0040 d5b43839 c4684a9c ed736466 f41d69a9 dccbc0c0 723195e4 185fc07d 48cbee07 a55035ad 384c84ed e800b9e9 b68f8874 aa13d4cc 71e397c4 e07775bc 67dd540c
+0 01 4000001c 010 00000101 cfd5e571 09e21242 f96374aa 1261e685 c942c24b 3dc38c43
+1 01 400000b4 000 00001111 79e0516c 0001 79e0516c 0010 79e0516c 0000 79e0516c 1000 ffe491b0 0000 ffe491b0 0010 ffe491b0 0100 ffe491b0 1000 03a5082a 0001 03a5082a 0010 03a5082a 0100 03a5082a 1000 7fccf631 0001 7fccf631 0010 7fccf631 0100 7fccf631 0000 000000b0 0020 37d9da98 f388a462 a964f0f6 d7280d15 07a7f438 bae1c42a 04fa9c4c 1fda6a6d
+1 01 400000dc 010 00000001 21f9c58f 1000 c43efbb2 1111 000000d0 0020 0d28da3d 98e6ba6d 4aadce0d 8ab7436a 8c4a95f9 6ef5d587 624dbd04 c6a21638
+0 10 40000588 010 00000111 72dc4916 5fc9c564 c43e4366 d08b8fee e4ab605d cc3c0a4e 546caa1e 8db51693
+0 01 4000057c 010 00000100 024919b7 546caa1e 8db51693 72dc4916 5fc9c564
+0 10 400001d0 001 00001111 a95e30e7 a95e30e7 ef4a6d7b ef4a6d7b 9c66d775 9c66d775 72bda173 72bda173 ba7e012d ba7e012d 77051b9a 77051b9a 86286ffe 86286ffe fe88eade fe88eade
+0 01 4000025c 010 00001111 119dc95c 17384ce9 c12cbb8f 97b8c1c4 b5ef0ad9 9b8018df 990be2df e7c88774 99460938 f8271245 7785cd57 042bd2e3 af081091 ecc1553f 42908309 8350b416
+0 01 40000651 000 00001110 3187d1b4 3187d1b4 3187d1b4 3e075039 3e075039 3e075039 3e075039 c65834f8 c65834f8 c65834f8 c65834f8 0f327445 0f327445 0f327445 0f327445
+1 01 400003a6 001 00001101 c2fe0000 0100 a9793a7c 0001 a9793a7c 1100 d10b13cd 0001 d10b13cd 0100 acac6867 0001 acac6867 1100 90ab5be5 0001 90ab5be5 0100 34193881 0011 34193881 1000 28cfe464 0011 28cfe464 1100 0000d943 0001 000003a0 0030 1152e095 4e38fa17 18218909 e7ab8906 8005da47 a5d8e263 3f4e133c 38bb5aa8 2fd7eb61 0aea733c 81d80d25 7e8dce25
+0 01 4000029e 000 00000111 fa331273 fa331273 4e52f7f0 4e52f7f0 4e52f7f0 4e52f7f0 0c2a708a 0c2a708a
+0 01 40000302 001 00000000 bb4eca49
+1 01 40000437 000 00000111 15000000 1000 2538154e 0001 2538154e 0010 2538154e 0100 2538154e 0000 00b69e9d 0001 00b69e9d 0000 00b69e9d 0100 00000430 0010 24a684d5 5f6fc9cd 9fa6bfc4 8c5e7a49
+1 01 400001c8 010 00000110 ed3c8332 1111 038d3eee 0110 efe82c40 0110 9e1a3006 1111 ef3dccaf 1101 f04d1f98 1111 2ae50aa8 0111 000001c0 0030 d5b43839 c4684a9c 88093383 31b05297 c4ea3ffd a54e48b6 592b8dbd b6f8c537 53c6d4ad c3e7c47a e800b9e9 b68f8874
+1 01 400004c1 000 00000110 f321de00 0010 f321de00 0000 f321de00 1000 d7c35676 0001 d7c35676 0010 d7c35676 0000 d7c35676 1000 000004c0 0010 f7bee24e 4d039ece 0898d422 43e8b4f0
+0 10 400007d0 001 00001111 49a92824 49a92824 d09933a0 d09933a0 0772d12c 0772d12c d07944d6 d07944d6 26d7cae1 26d7cae1 8d8f0523 8d8f0523 30c0b23f 30c0b23f e3724382 e3724382
+1 01 40000444 000 00000111 1a9ab733 0001 1a9ab733 0010 1a9ab733 0100 1a9ab733 1000 a0b2a497 0000 a0b2a497 0010 a0b2a497 0100 a0b2a497 1000 00000440 0010 0a39b96d 30253586 b9bdb055 07ec7f65
+1 01 4000044c 001 00001001 72e53e52 0001 72e53e52 0000 182b92be 0001 182b92be 0100 354a677b 0011 354a677b 1100 d9b5856e 0001 d9b5856e 1000 82575a96 0011 82575a96 1100 00000440 0020 0a39b96d 30253586 50860057 a81bc624 5fa549ad 0882829a 439325a8 e94fe134
+0 10 40000084 001 00000111 863a8cc2 863a8cc2 6fb5bf4d 6fb5bf4d 29ee2c11 29ee2c11 ad22eb6a ad22eb6a
+0 01 400001da 001 00001001 ef3dd7af f04d1f98 f04d1f98 97e50aa8 97e50aa8 0446da16 0446da16 c679e792 c679e792 f7eaf24e
+1 01 40000470 010 00000010 badaa01f 1101 67fbf015 1101 fd865925 1110 00000470 0010 8104696e 502d81e4 97d34dfd 8cbb232d
+1 01 4000025c 010 00000010 786a9f29 1110 ac2578f6 1010 555d527b 1011 00000250 0020 1fe6a144 197d0638 5f16d9ac f82eafc0 27f5d5ae a6eaa852 b4fc18ff 215f5603
+1 01 4000035c 010 00000101 85238a28 1011 495cbf76 1111 244e4f92 1110 eb6e5eca 1111 53b7379a 1011 7036db4a 0111 00000350 0030 5af44de3 3599e7fb b833308b 71ad4d74 fe1371bb a5e62588 b21c6276 d207e790 fe1b7776 9ef809f1 f29d15b7 a1de7eed
+1 01 4000014a 001 00000001 8cb50000 1100 00006315 0011 00000140 0010 0d49021d f0d23d96 d4fadc2a e4ed5008
+0 01 4000041a 000 00000011 ca8fdc96 ca8fdc96 f5f2a69a f5f2a69a
+0 10 400006a8 010 00000011 435caaa1 6b31b889 7a166a35 b2cd8af4
+0 01 400004e0 010 00001100 7245160a 59af3e6a 3ad758f6 636cb53b 00405273 b1ef59cf b919493f ce6b09f2 93763981 c0e3e6fe 90003e37 3c64b55b 98467a7f
+0 01 40000340 010 00000100 d46cb872 d749df28 7223bc13 5ed54e14 78a49887
+1 01 400007e4 010 00000101 d98d6eec 1110 ba8411bd 1011 ed6fbd9e 1101 6161eca4 1011 33fc8f40 1111 dcdbc1aa 1001 000007e0 0020 95ac5730 f43142b6 8cb36b18 59c75246 6639c959 7d571749 5ceea5fb d3252f10
+0 10 4000011a 001 00001111 97bd0afb 1abfdaac 1abfdaac 7ded05b2 7ded05b2 38675146 38675146 2f5ff796 2f5ff796 2f296758 2f296758 6d9ce540 6d9ce540 21efdeb7 21efdeb7 97bd0afb
+0 10 40000704 001 00001111 8f200fa2 8f200fa2 3e2ccbba 3e2ccbba 4013a172 4013a172 3f547b8c 3f547b8c 007ea214 007ea214 bbeadc28 bbeadc28 488327b7 488327b7 7f4b8a45 7f4b8a45
+1 01 40000518 010 00000000 b8422321 1101 00000510 0010 ed8ddbd2 3a7d33e9 0f778a34 9393f4c5
+1 01 400006c6 001 00001100 1ecc0000 1100 0d3d4319 0001 0d3d4319 1100 67e9372b 0011 67e9372b 1100 2b1943bc 0011 2b1943bc 0000 28f6212a 0000 28f6212a 1100 4b2545a9 0011 4b2545a9 1100 5301984c 0010 5301984c 1100 000006c0 0020 ba05ea8e bc7746d1 338ac75d 78c56a88 53a73872 e34ac6d2 f911426d 72f0c824
+0 01 4000050d 000 00000101 3c64b55b 3c64b55b 3c64b55b 98467a7f 98467a7f 98467a7f
+0 01 40000601 000 00000001 8126698a 8126698a
+0 10 40000491 000 00000011 5cc55a41 5cc55a41 5cc55a41 5cc55a41
+0 01 4000054b 000 00000100 a64e3361 084f3952 084f3952 084f3952 084f3952
+0 01 400003ef 000 00001011 4a18d34c 20acf0fc 20acf0fc 20acf0fc 20acf0fc c9ee5a12 c9ee5a12 c9ee5a12 c9ee5a12 43f29e81 43f29e81 43f29e81
+0 10 40000198 001 00001111 bfda9e5a bfda9e5a ca0c2de6 ca0c2de6 75ce46b0 75ce46b0 199f7e45 199f7e45 d4eec922 d4eec922 fe5950ab fe5950ab 8de21cc0 8de21cc0 25032679 25032679
+0 01 40000762 001 00001101 1e0d32c0 b9180670 b9180670 ed3e0ba1 ed3e0ba1 8b8d18bb 8b8d18bb 49f7119a 49f7119a f4c5f634 f4c5f634 cbcc216c cbcc216c c0d0e370
+0 10 400002dc 000 00001111 1ed9b7f0 1ed9b7f0 1ed9b7f0 1ed9b7f0 aa98f03b aa98f03b aa98f03b aa98f03b 3f3d5db5 3f3d5db5 3f3d5db5 3f3d5db5 5a1f7b32 5a1f7b32 5a1f7b32 5a1f7b32
+0 10 40000116 001 00000111 21efdeb7 97bd0afb 97bd0afb 1abfdaac 1abfdaac 6d9ce540 6d9ce540 21efdeb7
+0 10 40000400 010 00000001 6d02953e bcd636d3
+1 01 400007c4 001 00001100 2b6170a6 0011 2b6170a6 1000 41625612 0010 41625612 1100 ec998a1c 0011 ec998a1c 1100 140a87ef 0011 140a87ef 1000 5466ddcb 0010 5466ddcb 1100 1fce0206 0011 1fce0206 0000 00009a89 0010 000007c0 0020 8a2a0a43 033e1f22 70081e39 71e0e9b8 6262d54c d768b47a abca4ded 614edf15
+1 01 40000383 000 00001111 a4000000 0000 7416acdb 0001 7416acdb 0010 7416acdb 0100 7416acdb 1000 2069cfb9 0001 2069cfb9 0010 2069cfb9 0000 2069cfb9 1000 25660948 0000 25660948 0010 25660948 0100 25660948 1000 00b6a266 0000 00b6a266 0010 00b6a266 0000 00000380 0020 0b7e0954 4850bc9e 3aeaac2d baae7331 b04b6583 8fb4f71a ed3c400b 2ca3469b
+1 01 4000037e 000 00001001 58610000 0000 58610000 1000 b3926e00 0001 b3926e00 0010 b3926e00 0100 b3926e00 0000 dbfa2ab2 0000 dbfa2ab2 0010 dbfa2ab2 0100 dbfa2ab2 1000 00000370 0020 fe1b7776 9ef809f1 d30b8631 279eb58d 7cd805e0 90ad555c 3aeaac2d baae7331
+0 01 400003bb 000 00001100 34423881 28cfe464 28cfe464 28cfe464 28cfe464 cf2df043 cf2df043 cf2df043 cf2df043 779f97d1 779f97d1 779f97d1 779f97d1
+0 10 40000391 000 00000011 e1dda2c7 e1dda2c7 e1dda2c7 e1dda2c7
+0 01 4000053e 000 00000001 4cea016a 4cea016a
+0 10 400003b7 000 00000011 45ab6ce5 45ab6ce5 45ab6ce5 45ab6ce5
+0 10 400005b2 001 00000001 ed608125 ed608125
+1 01 40000438 010 00001011 c230e476 1111 e07bd8de 0011 28892e66 1111 7f7ccfc9 1101 d1b1936d 0100 e439652e 1110 bfec1dec 1011 14f793a8 1111 d0c0d097 0101 c46928bd 1010 75c0987b 1101 b420e4f5 1111 00000430 0040 24a684d5 5f6fc9cd 5001653d 706935fb eefbdd5d 6002b652 fd8106c3 90f160f5 06a03f46 7171f859 2300d440 ed86b702 20dd3430 12afe6fe a5031d4b 4ff0f3de
+1 01 400003d0 010 00001010 8805937e 1011 7d0ec0a7 1111 7d5eee8b 1111 20b8fc57 1111 172713f6 1111 a105d158 1111 4a3b5e30 1011 02fedbd0 1010 63f9ddaa 0101 d23ad10b 1010 81ab32e1 1101 000003d0 0030 45182fe2 50bddc0f 07d853c7 e1423144 5334f4b1 33c8e067 c96d68be 145daac6 9c3b3a33 a9397ae9 9763e3a9 826ebef4
+0 01 4000027d 000 00001000 99460938 99460938 99460938 f8271245 f8271245 f8271245 f8271245 7785cd57 7785cd57
+0 10 400007e5 000 00001111 d98d6e35 d98d6e35 d98d6e35 baec11bd baec11bd baec11bd baec11bd ed6f489e ed6f489e ed6f489e ed6f489e f65bde89 f65bde89 f65bde89 f65bde89 d98d6e35
+0 01 40000503 000 00000001 93763981 c0e3e6fe
+1 01 40000310 000 00001000 3b2f8d81 0001 3b2f8d81 0000 3b2f8d81 0100 3b2f8d81 1000 e79b7d55 0000 e79b7d55 0010 e79b7d55 0100 e79b7d55 1000 000000e8 0000 00000310 0010 ff437576 d72e0e8f 7c27ef94 6447669e
+1 01 40000624 010 00000001 19ff8efb 1010 f56485e4 1011 00000620 0010 27238b2a b0459525 b064e0c8 633f4af1
+0 01 4000053a 001 00001101 469b609b 4cea016a 4cea016a 79fa0b9c 79fa0b9c 8fa6eb95 8fa6eb95 a64e3361 a64e3361 084f3952 084f3952 c255505b c255505b fd2e9095
+1 01 4000011b 000 00000011 6d000000 1000 00f93f4d 0001 00f93f4d 0010 00f93f4d 0100 00000110 0010 39e57dcd 25978907 c41d2346 3e510976
+1 01 400006a2 001 00000110 69ae0000 0100 46a38215 0011 46a38215 1100 0cd9cb06 0011 0cd9cb06 1100 cebeb0bf 0011 cebeb0bf 1100 000006a0 0010 e5be2633 aacf2001 a422be6f e5e87c41
+0 01 40000119 000 00000001 6dbd0afb 6dbd0afb
+0 01 4000067e 001 00001100 513c85ee fa802c37 fa802c37 925a32b4 925a32b4 34075612 34075612 db4925bf db4925bf df717f73 df717f73 575b494b 575b494b
+0 01 4000057c 010 00000101 024919b7 546caa1e 8db51693 72dc4916 5fc9c564 c43e4366
+1 01 400005ee 001 00001010 a0150000 1000 8e95f964 0001 8e95f964 1100 2abba0d3 0001 2abba0d3 1000 e90d5501 0010 e90d5501 1100 4be97d79 0011 4be97d79 1100 915b4500 0011 915b4500 1100 000005e0 0030 8a17c437 4fc277c8 2adffa03 6f76507e 3da1d4c6 1c29eb63 950602a7 8772a13f b754c000 aca8a76e f2d78463 0bf9020c
+0 01 400001dc 001 00000110 f04d1f98 f04d1f98 97e50aa8 97e50aa8 0446da16 0446da16 c679e792
+1 01 400000c9 000 00000001 00a13300 0010 00a13300 0000 000000c0 0010 07a7f438 bae1c42a 68e44e22 815e5372
+0 01 40000228 010 00000101 2f3d8a98 bf0e6359 250abb0a 65f6f219 b2b45ecc be2020b6
+0 10 40000053 000 00000011 d7dc261c d7dc261c d7dc261c d7dc261c
+0 01 40000077 000 00001111 56e0e96c 3d324a1a 3d324a1a 3d324a1a 3d324a1a adf8058c adf8058c adf8058c adf8058c ad22eb6a ad22eb6a ad22eb6a ad22eb6a 863a8cc2 863a8cc2 863a8cc2
+0 10 40000214 010 00000011 b5af0338 5e61d980 3e57740a d6c1e5d5
+0 01 4000057e 001 00001000 024919b7 546caa1e 546caa1e 8db51693 8db51693 72dc4916 72dc4916 5fc9c564 5fc9c564
+1 01 40000649 000 00001010 a5a5ed00 0010 a5a5ed00 0100 a5a5ed00 1000 c6c15d29 0001 c6c15d29 0010 c6c15d29 0100 c6c15d29 1000 0013d143 0001 0013d143 0010 0013d143 0100 0013d143 0000 00000640 0020 2d1f3c17 c0707d58 c6f432ea 7310f398 aae36ae1 460a9914 13c580d5 4db08628
+1 01 40000638 010 00000110 a55fc674 1111 eb55da97 1011 84f7dbc0 1101 64c98b53 1101 ea748436 0101 90e97bac 1011 35f8a3ee 0101 00000630 0030 1be76d48 76729f28 f1789b09 95b64cdb b20736d6 a45c89df f716f0c3 efad47cb 174b9c1f c3e5af58 13c580d5 4db08628
+1 01 400001d0 010 00000011 39f9ea9d 1101 7817097e 1100 385ddd55 0101 c2418c8d 1111 000001d0 0010 321c8561 1395f758 afe0a9b7 34b69425
+0 10 40000420 010 00000011 689b27f4 e1c388db 7cd7d3c2 96727d01
+0 10 40000556 001 00001111 fd2e9095 2cca1421 2cca1421 f50af2dc f50af2dc 79fa0b9c 79fa0b9c 8fa6eb95 8fa6eb95 a64e3361 a64e3361 084f3952 084f3952 c255505b c255505b fd2e9095
+0 01 400005e0 010 00001110 62baf696 a338b22f d9daa771 a0b0b5cb 8e95dd64 2aaedad3 e90d5597 4be97d79 915b4500 fdb4e678 df2b4cda d7051b5a adbb5774 41c8131b 72c82039
+1 01 40000160 001 00001011 a2ca692d 0011 a2ca692d 0100 604865dc 0010 604865dc 1000 8efa272b 0011 8efa272b 1100 5664d354 0011 5664d354 1100 ed1f8d7e 0011 ed1f8d7e 1100 b6220c3b 0010 b6220c3b 1100 00000160 0020 66d3c53c ebe2ee17 61f08899 7b570aaf 6260402d 8586c689 e90f9614 01df20b9
+0 10 400001c2 000 00000011 ba7e012d ba7e012d ba7e012d ba7e012d
+0 01 400007cc 010 00001000 ec998a1c 14a987ef 5466dda0 07720206 d0799ad6 f65bde89 d98d6e35 baec11bd ed6f489e
+1 01 40000680 001 00001011 82a8709c 0010 82a8709c 0100 c5060913 0011 c5060913 1100 eedf6957 0001 eedf6957 1000 8e94d4ee 0011 8e94d4ee 0100 44d10927 0010 44d10927 1100 8e5a30cc 0010 8e5a30cc 1100 00000680 0020 1d442152 6661a53c 6f3aab71 f9a22b44 cce01b68 88d83f72 9add34e8 4ac4c7c2
+0 01 400002ca 001 00000000 4afc7387
+1 01 400001ba 001 00000111 67d20000 1000 c45e67dc 0010 c45e67dc 1000 c4bf0a79 0001 c4bf0a79 0100 e322db5b 0011 e322db5b 1000 0000c4c0 0010 000001b0 0020 7d98e36d e545727f fcee5e60 f2604579 c17b346c 51d8f533 18f39038 906ed105
+0 10 40000472 000 00000111 bada3f1f bada3f1f 67fb2015 67fb2015 67fb2015 67fb2015 bada3f1f bada3f1f
+1 01 400003c0 010 00000101 2c414c0a 1101 e3bd444c 1101 850950e9 1010 3b312e93 1110 291fac0b 1011 d86406a4 1101 000003c0 0020 5206a7ec 72ad5281 b46dee5b f3762219 b7700645 2281564b 07d853c7 e1423144
+0 01 40000628 001 00000110 f52d85e4 f52d85e4 0cb5e38d 0cb5e38d 673cdc1f 673cdc1f c442100a
+1 01 40000389 000 00000010 fbd44c00 0010 fbd44c00 0100 fbd44c00 1000 00000380 0010 7cd805e0 90ad555c eae12aca af387190
+1 01 40000284 010 00001100 7ae51a04 1111 930a063e 1110 ad3a608f 1101 25cf532b 1101 c7cadb11 1011 98b44cbb 0111 808d05dd 1110 3967b4a5 1110 5023b4c5 1111 4e33c1e6 1011 998071aa 1011 b599af03 1011 4919e581 1011 00000280 0040 0da14554 bb8c9b7b 53a6a6cd 75382fc3 dfd3644a c5e7b7fd 45e4b906 df2b530b 673f7db5 037fd22d e744dd2c 5b43e5ef 3195187a 71f4f4e7 c2b566de 7c91384f
+1 01 4000037f 000 00000101 85000000 0000 29916510 0001 29916510 0010 29916510 0100 29916510 0000 000000bd 0001 00000370 0020 fe1b7776 9ef809f1 d30b8631 279eb58d f6566979 f807a6f2 eae12aca af387190
+0 10 40000710 001 00000011 3f547b8c 3f547b8c 007ea214 007ea214
+0 01 400003ac 000 00001011 670bb3cd 670bb3cd 670bb3cd 670bb3cd acac5167 acac5167 acac5167 acac5167 45ab6ce5 45ab6ce5 45ab6ce5 45ab6ce5
+1 01 4000010c 000 00000001 0000f653 0001 0000f653 0010 00000100 0010 ffa8361d fe7a478b 718876b4 3c54b32e
+1 01 4000029a 000 00000011 98080000 0100 98080000 1000 0000aa04 0001 0000aa04 0010 00000290 0010 dfd3644a c5e7b7fd b6290026 5d959fef
+1 01 40000280 001 00001001 122b8ef2 0010 122b8ef2 1100 ec84075c 0000 ec84075c 1000 fc862a38 0011 fc862a38 1100 8ebc0da8 0011 8ebc0da8 1100 5b3815a2 0011 5b3815a2 1100 00000280 0020 6db867af cd836445 7a9207cb a816c604 ba3334a2 17a7799f b6290026 5d959fef
+0 10 400005b1 000 00000011 ed608125 ed608125 ed608125 ed608125
+1 01 400004c8 001 00001011 9dac1199 0001 9dac1199 1000 dae6c672 0000 dae6c672 1100 37cbaaf7 0011 37cbaaf7 1000 fdc753c0 0011 fdc753c0 1100 4296f85c 0011 4296f85c 1100 6f1cfcb7 0011 6f1cfcb7 1100 000004c0 0020 f7bee24e 4d039ece 83b38442 80505f50 197c90e4 e0d68355 fe8e0ff5 bc423178
+0 01 4000017c 001 00001111 2f7e1c89 2f7e1c89 75ce46b0 75ce46b0 199f7e45 199f7e45 d4eec922 d4eec922 fe5950ab fe5950ab 8de21cc0 8de21cc0 25032679 25032679 bfda9e5a bfda9e5a
+0 01 400005da 001 00001010 0d0e51a2 3a443ed8 3a443ed8 62baf696 62baf696 a338b22f a338b22f d9daa771 d9daa771 a0b0b5cb a0b0b5cb
+0 01 40000215 000 00001011 b5af0338 b5af0338 b5af0338 5e61d980 5e61d980 5e61d980 5e61d980 3e57740a 3e57740a 3e57740a 3e57740a f9f7db2d
+1 01 40000316 000 00000001 97e90000 0000 97e90000 1000 00000310 0010 9dd28140 d90803a3 7c27ef94 6447669e
+1 01 400000f8 010 00001011 6ad9bab6 1111 beb279ea 0111 de96d5c9 1111 cea9185b 1011 1737bf32 1011 ea4d0af8 0001 1972c5f1 0111 ce05dad7 0111 b8a9555a 0011 bd59251c 1111 79939eb9 1111 606f08df 1111 000000f0 0040 ec34f2e5 068e90b2 05d6c21d 1f2e258c af99dbb8 6d7abb58 80cf70be e5deebe8 207c834c e6780b0b c1b93d1c 39b359aa 98f34300 fe9659bb 1f65110e 19bb6eaf
+0 01 4000066e 001 00001000 0cd5caf2 13bbc0a7 13bbc0a7 7445fab7 7445fab7 bb7ca69b bb7ca69b 513c85ee 513c85ee
+0 01 40000536 001 00001100 156d698a 469b609b 469b609b 4cea016a 4cea016a 79fa0b9c 79fa0b9c 8fa6eb95 8fa6eb95 a64e3361 a64e3361 084f3952 084f3952
+0 01 400006d8 000 00000010 4b2545a9 4b2545a9 4b2545a9
+0 10 40000520 010 00000011 cff46a3d 38a3e53a b6fb7b41 83bcab95
+0 10 4000007c 010 00000111 adf8058c e4d3b3e9 36513db0 1c35644f e5590895 878ee95d 56e0e96c 3d324a1a
+1 01 40000334 010 00001111 1fc88c30 0101 eb00cd0f 1001 14cb3cd4 1111 e5ad6131 0111 b10b7ba0 0111 97a4a78b 1000 86060c7b 1111 2940ac8b 0000 33532b0f 1011 17dc0c2a 0111 f001d979 0011 f4d68b1d 1111 73637546 1111 9f27d658 1011 6d33060e 1111 40e4386b 0011 00000330 0050 818c065b d5cc4b42 457f565c 34b4e686 41d78ff5 0e9c352e 90cb8d9e a4e077e2 4275d4e7 222153db 2e82ceb0 185065f9 8e1a6a38 52692d06 1094f8d7 7cb847e2 be586d3c fe31881b d30b8631 279eb58d
+0 01 40000685 000 00001100 c5060913 c5060913 c5060913 ee075657 ee075657 ee075657 ee075657 db94d4ee db94d4ee db94d4ee db94d4ee 44d10973 44d10973
+0 01 400002d4 010 00001010 3f3d5db5 5a1f7b32 1ed9b7f0 83a95b3e f44e245a 6df65353 c18d5b77 bbef4a4a 2b37bbcd 406ab6d0 5ba3170f
+1 01 4000050c 001 00001011 9396303c 0011 9396303c 1100 5ca4d4c0 0001 5ca4d4c0 0100 8d593a2f 0001 8d593a2f 0100 990d182b 0000 990d182b 1100 0269d71e 0011 0269d71e 1000 19aecdb0 0001 19aecdb0 1100 00000500 0030 45affc12 46f6f2a0 acab6a86 30fa8885 e552d29c 1b0da8f3 c07cbac2 4ac2beb3 86f9289c 4d000901 9bcfb70a 14d0224f
+1 01 40000350 010 00000101 e634d607 0110 f723e0cc 1111 7d003ffe 1111 3cbbaa27 1010 576aa9e7 1111 4113a7b2 1011 00000350 0020 ef1560a0 81246b8f b122b917 473d3fb6 3c6706b6 10cb5a9b 1094f8d7 7cb847e2
+1 01 40000640 010 00001100 e3c44149 1111 c89e0c19 1011 d7e20214 0111 e66f1d43 1111 40c97e9e 0001 0f4cad66 1111 11b71737 0111 714a81dc 0110 e681b950 1111 8a14edf7 0111 99374861 0101 fbc87154 0111 9e0dfc8f 0111 00000640 0040 c65690ee 7779c452 958def23 2261f752 8b8969af 584a2f07 7239479d cb46cbb3 33d1f245 9ba93b31 ec433796 95607b0f 15c9ad39 239ad588 b69ec81e 826539fa
+1 01 4000053c 001 00001011 415e719d 0010 415e719d 1000 1545b09e 0011 1545b09e 1100 927161d8 0001 927161d8 1100 113c38b5 0011 113c38b5 0000 c6154fca 0010 c6154fca 1100 dfd518b0 0011 dfd518b0 0100 00000530 0030 f7f683ea 2139e962 f8bdbaad 8af92633 64d49612 cde9d1f0 f0a39e3e b32009e5 4306ba1f 8df8f427 9387c5ab 41924cfa
+0 01 40000500 001 00000111 93763981 93763981 c0e3e6fe c0e3e6fe 90003e37 90003e37 9396303c 9396303c
+0 01 40000736 000 00001010 38264707 38264707 ac2e0ec3 ac2e0ec3 ac2e0ec3 ac2e0ec3 96676d62 96676d62 96676d62 96676d62 7bb8d795
+0 10 400007a0 001 00000011 459e0706 459e0706 b27a9212 b27a9212
+0 10 400005c7 000 00000111 f9516f77 241f432a 241f432a 241f432a 241f432a f9516f77 f9516f77 f9516f77
+1 01 400004c3 000 00001100 c4000000 1000 f47d8acd 0001 f47d8acd 0000 f47d8acd 0100 f47d8acd 1000 54e7c650 0001 54e7c650 0010 54e7c650 0100 54e7c650 1000 b74fc1bd 0001 b74fc1bd 0000 b74fc1bd 0100 b74fc1bd 1000 000004c0 0010 9ad64144 bad9256f 583a1b68 587b220a
+1 01 400004c8 001 00000011 8772eb1c 0011 8772eb1c 0100 a4a013d7 0000 a4a013d7 1100 000004c0 0010 9ad64144 bad9256f 83a4d7f4 44c7f56e
+1 01 400002d8 001 00000101 5c4624bf 0011 5c4624bf 1000 228d362b 0001 228d362b 1000 51795b5a 0011 51795b5a 1100 000002d0 0020 67af1f64 25c8ac7e 70dcbb07 469c168d 95c343f0 d55fff69 ea28117e 648b62d8
+1 01 400006e4 010 00001101 bc8a7eee 0111 2d3b559c 1101 56106060 0111 db876256 0111 108a155d 0110 83b95852 1010 803d3697 1111 b5f34350 1111 bbc88fc4 0111 7795ccd3 0110 89464f11 1111 59b6b9d8 1110 8a7a98cc 1111 931028d1 0111 000006e0 0040 ab97db46 cd06a676 c70da7e9 92904908 e6d4049d 5d128794 45446baa d175e41b 582ad893 a65009dc a8a76833 485c5dfa 71f62b95 6f2dc01b dec6cedd 91934e71
+0 10 400003fc 010 00000111 aff0fbb7 172713f6 a105d158 4a855e30 0218db4c 20f9f0aa d2eed112 81ab9ee1
+1 01 40000030 001 00001100 13246507 0011 13246507 1100 8345eefc 0000 8345eefc 1100 0cc3dae1 0011 0cc3dae1 1100 d0d53f6a 0011 d0d53f6a 1100 52218e15 0010 52218e15 1100 2f424516 0011 2f424516 1100 0000d6e3 0011 00000030 0020 cbefbb74 ade12dc9 3f4952b5 b7501213 e8b8b34b 169951d7 477aef1c 57334e38
+0 10 4000041a 001 00000111 ca8fdc96 f5f2a69a f5f2a69a 4010f5b2 4010f5b2 c4b174f1 c4b174f1 ca8fdc96
+0 10 4000078e 001 00000001 a2e333f1 a2e333f1
+1 01 40000224 001 00001010 d7e2b0ab 0010 d7e2b0ab 1100 94b10615 0001 94b10615 1100 f9cad50f 0001 f9cad50f 1100 a46c7993 0010 a46c7993 0100 d971b3a9 0010 d971b3a9 1100 00002699 0011 00000220 0020 28ea7c7f f3f415b4 d565676b 73d77463 263edb29 07d7aae5 1eebd917 2fe93ac6
+1 01 400000a0 010 00001011 b2f1585b 1111 28203708 0111 64e150cc 1111 c56cea60 1101 b177b9e3 1111 5121693c 1111 ddde6029 1111 f7bb9d2f 0111 12e5d36c 1101 eb87e728 0101 ae510a84 1101 35552821 0111 000000a0 0030 733d4af1 dbfd6519 e80b80c8 121714e2 ea160da0 8e213579 69761c06 dc2d1a9b 0acc0dfd 2eb0ac1b f2c57c6f de735675
+1 01 40000200 001 00001100 4fa9a0f7 0001 4fa9a0f7 0000 4da97051 0011 4da97051 0100 d93ba0db 0001 d93ba0db 1100 d380adfd 0011 d380adfd 0100 8a6db10b 0011 8a6db10b 1100 34e5149c 0001 34e5149c 1100 00001715 0011 00000200 0020 d02105ee 288d9d43 9a1e9cb1 f5e7e690 f4077bb6 3c3733be 6add2006 e00b5372
+1 01 40000750 001 00001001 58f29597 0000 58f29597 1100 2cd83f1f 0001 2cd83f1f 1100 7441de09 0001 7441de09 1100 1b6b7159 0011 1b6b7159 1100 a263f820 0011 a263f820 0100 00000750 0020 814878b4 f970dd75 58ad1d05 b830a599 72c22578 60fa6726 9bf344a5 fea95aa4
+0 01 4000048c 000 00000001 65712768 65712768
+1 01 400004e8 001 00001001 7065dd15 0001 7065dd15 1100 d234db84 0011 d234db84 1100 83e81c01 0000 83e81c01 1100 b473c5e6 0010 b473c5e6 1100 4f665889 0011 4f665889 1100 000004e0 0020 fca07a08 14f96452 8c6ccf8c 74e1c522 92f6d356 bda66fe3 2af38a46 ea4270cb
+1 01 40000516 001 00000101 b5370000 0000 ce16e979 0011 ce16e979 1000 dbd0225d 0011 dbd0225d 1100 000074af 0011 00000510 0020 e552d29c 1b0da8f3 0c46f59b 26b0cc09 28593433 047cc889 9bcfb70a 14d0224f
+1 01 40000728 010 00000000 f33f54b2 1111 00000720 0010 14dd5d2d 8f738917 5167dc23 b01d9175
+0 01 40000724 010 00000111 802a0b3c f33f54b2 8777f00e ac1dbc7c 38264707 ac2e0ec3 96676d62 7bb8d795
+1 01 40000664 010 00000100 29bad8a6 1111 52209576 1001 ed13d00c 1011 318832b7 1011 e372bb82 1111 00000660 0020 959b3c52 d27c15cb 885c451c 2518cc69 5dce387a ae22665e b69ec81e 826539fa
+0 10 400006a8 010 00000001 0cd9cb06 cebeb0bf
+1 01 400002de 001 00001000 e8ec0000 0100 32067989 0011 32067989 0000 9019662b 0011 9019662b 1100 a24ee717 0011 a24ee717 1000 c6fde633 0011 c6fde633 1100 000002d0 0020 67af1f64 25c8ac7e 6c4fd23b 7dd62114 47da9014 9e7493b9 d7881885 f1c0b259
+1 01 400001e4 010 00001110 5826d783 0111 99f6104b 0011 41d625ca 1111 f314b1c8 1111 5dbc6763 1011 92b32fc5 0010 312c7858 1011 eae2c25b 1110 de52a727 1111 8c95984f 1011 f648f438 1011 7890cb7a 0110 7bb3fd22 0111 7c67894d 1110 733e2743 1111 000001e0 0040 45491ba6 2f5d50ae a5c1a300 7884a263 2200b491 3783eac6 2de3de29 e6171f4e c65d7bb2 8dafaa61 adfeb6ad 9ee60a98 528bb306 896b78eb 21642e10 c87ff2b9
+0 10 40000654 001 00001111 0f4cad66 0f4cad66 c6b71737 c6b71737 0f4a8145 0f4a8145 e3c44149 e3c44149 c8c90c19 c8c90c19 a5e20214 a5e20214 e66f1d43 e66f1d43 31f8d19e 31f8d19e
+1 01 400001be 000 00001101 32230000 0100 32230000 1000 c072bb4f 0001 c072bb4f 0000 c072bb4f 0100 c072bb4f 1000 cd20ddcc 0001 cd20ddcc 0010 cd20ddcc 0100 cd20ddcc 1000 a18b5d8c 0001 a18b5d8c 0010 a18b5d8c 0100 a18b5d8c 1000 000001b0 0020 7d98e36d e545727f dd58a130 cefcbfc2 dcff5426 6f0bb96b b57f0239 595682a9
+0 01 400005ca 001 00000000 0330eb21
+1 01 4000034a 001 00000101 406a0000 0100 3ccb6342 0010 3ccb6342 1100 bc9b44e0 0001 bc9b44e0 0000 00001c8a 0001 00000340 0020 41d78ff5 0e9c352e 4357d88c a6bbfad2 23af5500 5cbd3e9b b122b917 473d3fb6
+1 01 4000018e 001 00001100 73840000 1100 33352bf4 0010 33352bf4 1100 e137dc0a 0011 e137dc0a 1100 b7407d86 0011 b7407d86 0100 cb929160 0011 cb929160 1100 7a0edec1 0011 7a0edec1 1000 6d6c5d6f 0011 6d6c5d6f 1100 00000180 0030 d647aa30 af22fd1f 67348a11 70b0b478 aa3ccd29 a75bbb7d ca35b7a5 cbde1a91 f61c10cc de275d54 f4df49ed 53d06338
+1 01 4000043e 001 00000011 75d70000 1100 67a2e847 0001 67a2e847 0100 0000fdde 0011 00000430 0020 24a684d5 5f6fc9cd 6e26981c 97d768ef b5991102 ec19691b fd8106c3 90f160f5
+1 01 4000014f 000 00000000 2d000000 1000 00000140 0010 0d49021d f0d23d96 37d458f1 48a00b2c
+0 10 4000074c 010 00000111 9995e141 58f2830d 2cd8ad1f 74419009 1b6b7159 7bb8d795 450445d8 4aa0e998
+1 01 40000010 010 00000111 32c5d8ea 0111 cd57267e 1011 db3a780e 1111 5b64dc03 0101 c633943e 1001 220671c4 0001 9727b76f 1111 09a867c1 1010 00000010 0020 ba50fa81 415f5c4a 2f9bb416 1788ad76 02572517 222d0415 1c17f629 bd7aca4d
+1 01 40000594 001 00001101 770aea36 0011 770aea36 0100 b98f1b8a 0010 b98f1b8a 1100 be9aa711 0011 be9aa711 1100 345b4662 0011 345b4662 1000 1642d655 0001 1642d655 1100 3b31cd36 0011 3b31cd36 1100 e50b081c 0011 e50b081c 1000 00000590 0020 e4b6c1d9 0367a7e6 c8eda63f d4df4750 1158b13f b3b2edf4 772f0d6a f51c3fca
+1 01 4000052e 001 00001100 6aca0000 1100 452ed2f0 0011 452ed2f0 1100 fb6d74aa 0011 fb6d74aa 1000 fb1269c3 0011 fb1269c3 1000 b028bde7 0011 b028bde7 1000 7df5e7f2 0011 7df5e7f2 1100 cae57b42 0011 cae57b42 1100 00000520 0030 28593433 047cc889 6fc736a7 945e98ba e8438502 3a0f623f b82fda19 84a64081 6305350e 64abc36a f0a39e3e b32009e5
+0 01 40000224 010 00001111 d7e2b029 94b18a15 f9ca630f 256c790a d971b319 b2b42699 be2020b6 e42078db ab640793 ced5fa0a af3dd387 07810088 1de3f88c 64845ae4 786a9f5c ac3878e9
+0 01 4000062d 000 00000111 0cb5e38d 0cb5e38d 0cb5e38d 673cdc1f 673cdc1f 673cdc1f 673cdc1f c442100a
+1 01 400003a3 000 00000010 e1000000 1000 00007bf5 0001 00007bf5 0000 000003a0 0010 a291501b faa1b2ea 18218909 e7ab8906
+0 10 400006c6 001 00000111 1ecc36c5 0d3d3c19 0d3d3c19 67e9372b 67e9372b cb0af807 cb0af807 1ecc36c5
+0 10 40000200 001 00001111 eae2c2f7 eae2c2f7 de52a727 de52a727 8c3b984f 8c3b984f f680f438 f680f438 8a90cb0b 8a90cb0b 34b3fd22 34b3fd22 7c678915 7c678915 733e2743 733e2743
+1 01 40000790 000 00001011 79c71e76 0001 79c71e76 0010 79c71e76 0000 79c71e76 1000 76308a33 0001 76308a33 0000 76308a33 0000 76308a33 1000 1cf4034f 0001 1cf4034f 0010 1cf4034f 0100 1cf4034f 0000 00000790 0010 8577c436 b59fdb5a 7d27bd9d 01ae12f2
+1 01 400006a4 010 00000011 c5b9af87 1111 069815fd 1011 594fb7cb 1001 72f35e42 1111 000006a0 0020 3a749c1c 3d1dd1e4 ddfa2a21 b89efb8b 487c8d6a 74023ab5 335c9ea7 0c212f7a
+1 01 40000050 001 00001101 348303ec 0001 348303ec 1100 4310dd8e 0001 4310dd8e 0100 861ab571 0011 861ab571 1100 a9c9f45d 0010 a9c9f45d 1100 5cfb9d90 0001 5cfb9d90 0100 4bf8f099 0011 4bf8f099 1100 d44654af 0011 d44654af 1100 00000050 0020 6a55e6e4 4f6c5686 c7821f0a 81de3e8c 4cd9cc59 fc03ee0c df417ec1 22862788
+1 01 40000026 001 00000011 d7120000 1100 e3defa68 0011 e3defa68 1100 0000b4f6 0011 00000020 0010 f672cb74 8791aa91 15fdf5a8 6ff73742
+0 01 40000688 001 00000111 ee075657 ee075657 db94d4ee db94d4ee 44d10973 44d10973 8e5a304b 8e5a304b
+1 01 400001f6 001 00001100 e1250000 1000 f2007bc5 0011 f2007bc5 1100 9e07c002 0011 9e07c002 0100 660c5301 0010 660c5301 1100 fa497a3d 0011 fa497a3d 0000 4dd0be02 0001 4dd0be02 1100 8a27bede 0011 8a27bede 1100 000001f0 0020 f3e66297 7fa2b43b c6c22261 31841be5 35cbe6f9 5a7530ff 4b4a0416 78d4588b
+1 01 40000798 010 00001001 9cd934c6 1110 2858b100 0111 5b7aa47f 1011 81cb76ca 1011 3d2f310f 0111 2b586575 1011 5f758c24 0111 8dd9c3a4 1101 34982bd6 0011 05055c99 1111 00000790 0030 8577c436 b59fdb5a 7c916874 11d81712 0bde709c 20acf296 50e55725 21e7741f 0fcb44a4 037d5652 5bf496b7 e0f8ae2d
+1 01 400000e4 001 00000000 00006bd9 0011 000000e0 0010 d5815d3a d20b9411 624dbd04 c6a21638
+0 01 40000032 001 00001000 13246507 8345d335 8345d335 0cc3dae1 0cc3dae1 d0d53f6a d0d53f6a 52218e74 52218e74
+1 01 400005c5 000 00001111 b0cb6100 0010 b0cb6100 0100 b0cb6100 1000 cb5ccb89 0001 cb5ccb89 0000 cb5ccb89 0100 cb5ccb89 1000 bb5b5e52 0001 bb5b5e52 0010 bb5b5e52 0100 bb5b5e52 1000 e9ce7eaf 0001 e9ce7eaf 0010 e9ce7eaf 0100 e9ce7eaf 1000 000000a8 0000 000005c0 0020 bc2f93bf 16e46f1c 0a8f525a 0f19722a c63892f9 b238f687 bfc99981 4c853bfa
+1 01 400006fc 010 00001011 bc0625f4 1110 d6e7bc21 1110 63961c7d 1111 b09f472a 1101 aa410e9d 1010 e0f0cf8f 0110 c4820ba0 1010 acd7c9cd 0111 f1aeb923 0111 02dad006 1110 060d6d79 1011 47c74bcb 1111 000006f0 0040 e6d4049d 5d128794 6607cfdf 171f687a 4b983c9c b1178af8 e3f33691 34523892 290eafb6 31e33015 f5488494 42ad2ece 0f24a854 917b2363 ec01b988 9e8e068c
+0 10 40000184 010 00000011 199f7e45 d4eec922 738450ab 75ce46b0
+0 10 400006de 001 00001111 530198f7 cb0af807 cb0af807 1ecc36c5 1ecc36c5 0d3d3c19 0d3d3c19 67e9372b 67e9372b f92843bc f92843bc 28f6d5d9 28f6d5d9 4b2545a9 4b2545a9 530198f7
+1 01 400003ac 010 00000011 2835b773 1110 54737c28 1110 dbdcee8f 1101 f97327c2 0111 000003a0 0020 a291501b faa1b2ea 4df889c3 33349525 9a4601d8 557c6243 70746fa9 0836e7cd
+1 01 4000044c 010 00000000 cf953545 0011 00000440 0010 b5991102 ec19691b 8fd633e3 b0f87d27
+1 01 40000044 000 00000001 00000a3e 0001 00000a3e 0010 00000040 0010 c5dba947 011315c4 477aef1c 57334e38
+0 01 400005a6 001 00000111 16421e55 3b31cd36 3b31cd36 e55a081c e55a081c ed608125 ed608125 2f348ced
+0 10 4000012a 000 00000001 4e46be93 4e46be93
+1 01 40000614 000 00000101 092e9aeb 0001 092e9aeb 0010 092e9aeb 0100 092e9aeb 0000 0000994e 0001 0000994e 0010 00000610 0010 e3d5c16b c0f861ea 6ccdac89 0cd07363
+1 01 4000018c 000 00000110 4a2f208a 0000 4a2f208a 0010 4a2f208a 0100 4a2f208a 0000 004c85ae 0000 004c85ae 0000 004c85ae 0100 00000180 0020 d647aa30 af22fd1f 5207ef42 b812fc1e ea226525 94b3071b ca35b7a5 cbde1a91
+0 01 4000068a 000 00000110 ee075657 ee075657 db94d4ee db94d4ee db94d4ee db94d4ee 44d10973
+0 10 40000212 000 00000011 8a90cb0b 8a90cb0b 8a90cb0b 8a90cb0b
+0 10 40000717 000 00001111 c47a0bcc bbd7c9cd bbd7c9cd bbd7c9cd bbd7c9cd 48aeb923 48aeb923 48aeb923 48aeb923 59f0cf8c 59f0cf8c 59f0cf8c 59f0cf8c c47a0bcc c47a0bcc c47a0bcc
+1 01 40000050 000 00000000 00000094 0000 00000050 0010 6a55e6e4 4f6c5686 c7821f0a 81de3e8c
+1 01 4000038c 010 00001000 060700eb 1011 2b6339e5 1011 a310ba01 0111 4a703620 1111 5aba8c9c 1011 831b779b 1110 a94dfc23 0110 83c6a5da 1010 334cd929 0110 00000380 0030 f6566979 f807a6f2 20f79fb7 225be7f9 ca9c6704 22aefd75 7905ffbc a2c8947d f9848bf2 af4a5d5d ef95c311 f48a5abe
+0 01 400000ca 001 00000010 ae513384 e1552821 e1552821
+1 01 40000158 010 00001000 49ca09fe 0111 e3a243a4 1111 93b17d69 0111 d7628b87 1101 28cf4fe0 1111 66e922ba 0111 6086c127 1111 35b9fa52 1111 8a165417 0111 00000150 0030 02941796 a7b86602 fd81e648 dbeeb996 d5e4fe6f 3736555e 04c25a87 fd908943 f3845c82 12cc46e1 21d9ccbf ca06ade0
+1 01 40000098 010 00001100 7815dcba 1111 5b762e6f 1110 365e35e0 1110 b443ee39 1010 a3be6ec7 1111 ec94763c 1111 f2d752ff 1111 04deeba2 1001 ed78f344 0111 25d47cd2 0111 1edc7165 1101 97159adb 1111 e1b64039 1111 00000090 0040 9a1570c9 dacc7cbd 81b6ae1c 7b4e1507 b6fa208e b5b402dd c014348c d26a63a9 814a4fd3 c89cab4a 45f22d76 dd320525 06622ff5 8e417e81 3f4aaf36 2e8de40b
+1 01 40000268 001 00000100 eaa738be 0010 eaa738be 1100 89c2e6cb 0001 89c2e6cb 1100 00009c3f 0001 00000260 0020 27f5d5ae a6eaa852 b35fd2a6 5cdb6eb5 3aac25dd df8e63b7 0d403858 18c175f8
+0 01 400004e2 001 00000101 7245160a 59af3e6a 59af3e6a 70655815 70655815 d234db84
+1 01 4000054c 010 00000011 1abec9f2 1101 2a005b4c 0101 9d0db07d 1111 e37a4530 0011 00000540 0020 6305350e 64abc36a ccd3026a a98877c6 c440c284 a6508e61 67d2ad7a 72fc94ac
+0 01 400000d1 000 00001001 daf1ebb4 daf1ebb4 daf1ebb4 60de30a8 60de30a8 60de30a8 60de30a8 f56620a2 f56620a2 f56620a2
+1 01 400000a0 001 00001100 d3aea39f 0001 d3aea39f 0100 d5f9dea0 0011 d5f9dea0 1100 d58bd8e4 0011 d58bd8e4 1000 d8613a24 0011 d8613a24 0000 d13213fe 0011 d13213fe 1100 f33d7a39 0010 f33d7a39 0100 00009b71 0011 000000a0 0020 cddbdf63 b60e185d ce42f6b3 1636e488 75c0ac8b 55da3aed d0f61f8f 06587fe2
+0 01 40000508 000 00000111 90003e37 90003e37 90003e37 90003e37 9396303c 9396303c 9396303c 9396303c
+1 01 400007a0 010 00000010 0e4060f8 0111 c8852aab 1011 7fc464a5 0010 000007a0 0010 b10653e5 98d69377 454f8e72 93f2fa9c
+0 01 400006a4 001 00000100 c5b9af87 c5b9af87 06d915fd 06d915fd 59beb0cb
+1 01 40000038 010 00000001 1dfe909a 1100 ed83e011 1101 00000030 0010 cbefbb74 ade12dc9 d9155165 4c565bc2
+0 10 400005e0 010 00000001 62baf696 a338b22f
+0 01 40000074 010 00000110 56e0e96c 3d324a1a adf8058c ad22eb6a 863a8cc2 6fb5bf4d 29ee2c11
+0 10 4000035c 010 00000111 3c1daa79 d4ad6131 d70b7ba0 976abc13 3ccb637b 7834d6e0 f723e08a 7d003ffe
+0 10 4000070e 001 00000111 aa460e11 d6e7bc50 d6e7bc50 63961c7d 63961c7d b09fcc2a b09fcc2a aa460e11
+1 01 40000692 001 00001110 77ed0000 1100 aef22726 0010 aef22726 1100 a7fe522f 0010 a7fe522f 0100 4ad4a479 0011 4ad4a479 1100 519483de 0000 519483de 1100 5e139deb 0011 5e139deb 0100 6af8a9fb 0001 6af8a9fb 1000 77b30d76 0011 77b30d76 1000 00000690 0020 51cfc559 812dd086 e2201c25 c030ecba 6062a33a 618f7f93 17f1fb17 fd12ad18
+0 01 400005e5 000 00001010 a338b22f a338b22f a338b22f d9daa771 d9daa771 d9daa771 d9daa771 a0b0b5cb a0b0b5cb a0b0b5cb a0b0b5cb
+1 01 40000044 000 00000001 0000fa91 0001 0000fa91 0010 00000040 0010 9ef015a7 65c462bf 477aef1c 57334e38
+0 10 400003f8 010 00000111 81ab9ee1 aff0fbb7 172713f6 a105d158 4a855e30 0218db4c 20f9f0aa d2eed112
+0 10 400006d6 001 00000001 28f6d5d9 28f6d5d9
+0 10 400003a8 000 00000011 8379a57c 8379a57c 8379a57c 8379a57c
+0 10 400002e2 000 00000011 51797989 51797989 51797989 51797989
+0 01 40000714 001 00001011 c47a0bcc c47a0bcc bbd7c9cd bbd7c9cd 48aeb923 48aeb923 02dad034 02dad034 062a6d79 062a6d79 47c74bcb 47c74bcb
+1 01 4000009c 010 00000010 93e67d27 1011 9773414b 0011 6c66b899 1001 00000090 0020 9a1570c9 dacc7cbd 16fd16a1 ee1cb401 0cb1ae75 2751191a ce42f6b3 1636e488
+0 10 400000cc 000 00000111 e1552821 e1552821 e1552821 e1552821 e1b64039 e1b64039 e1b64039 e1b64039
+1 01 400002e6 001 00001101 c7c80000 1000 925eeee5 0011 925eeee5 1100 3f1da5da 0001 3f1da5da 1100 966cc213 0011 966cc213 1000 9fa802fd 0000 9fa802fd 0100 dd7528df 0011 dd7528df 1100 72b1f440 0011 72b1f440 1000 0000da71 0011 000002e0 0030 7c8f687b 80e7161c 77c1e091 0b05f233 fc57b1b0 2f7ac295 49fbf7c2 4fa5dbc4 530550d9 b9cf41fe e2a17ad6 9dd07075
+0 01 40000640 000 00001101 e3c44149 e3c44149 e3c44149 e3c44149 c8c90c19 c8c90c19 c8c90c19 c8c90c19 a5e20214 a5e20214 a5e20214 a5e20214 e66f1d43 e66f1d43
+1 01 400005d4 001 00001111 49a88343 0001 49a88343 1100 5193f703 0010 5193f703 1100 5569dcfa 0011 5569dcfa 1100 241e630f 0011 241e630f 1100 9fc6fb22 0011 9fc6fb22 1100 7f531cb1 0011 7f531cb1 1000 df30533f 0011 df30533f 1000 2f9e94f1 0011 2f9e94f1 1000 000005d0 0030 20f3ee2f d054a0c5 e4f2019f a97e9cc4 62dea4c4 76ec7331 6628b18c 87d1d4d3 de072aff 3fb62c9c 950602a7 8772a13f
+1 01 400001ea 001 00001010 e0b10000 1000 22f8ae53 0011 22f8ae53 1100 3ec4c0ca 0011 3ec4c0ca 1100 a9234dfa 0010 a9234dfa 1100 46ab7789 0001 46ab7789 1100 161fa8c2 0011 161fa8c2 1100 000001e0 0020 45491ba6 2f5d50ae 39dabccf bd141798 ddb0ebc7 335d0d94 50ef3750 7d084435
+0 01 400007d2 001 00001001 14a987ef 5466dda0 5466dda0 07720206 07720206 d0799ad6 d0799ad6 f65bde89 f65bde89 d98d6e35
+1 01 4000016c 001 00000001 eb85ab99 0011 eb85ab99 1100 00000160 0010 d5e4fe6f 3736555e a8b167ef 3ba277b5
+0 10 40000041 000 00000001 52218e74 52218e74
+0 10 40000294 010 00000001 c790db11 5b3815a2
+0 01 40000481 000 00001100 657bf0f5 657bf0f5 657bf0f5 b0033419 b0033419 b0033419 b0033419 6a5574e6 6a5574e6 6a5574e6 6a5574e6 65712768 65712768
+0 10 40000354 001 00000001 f723e08a f723e08a
+1 01 40000362 001 00000110 280c0000 1000 763d0852 0011 763d0852 1000 241fb31d 0011 241fb31d 1000 b9e6cfbe 0011 b9e6cfbe 1100 00000360 0010 47d64d4e c8e23244 b382ac55 7bfb084d
+1 01 4000031d 000 00000111 eb141400 0010 eb141400 0100 eb141400 0000 015eaf17 0001 015eaf17 0010 015eaf17 0100 015eaf17 1000 00000042 0001 00000310 0020 9dd28140 d90803a3 41a520b7 621af442 02c1b14b 7373e83b 5c8b34f3 873c87c9
+0 01 4000056c 010 00000001 50b96027 637cb497
+0 10 400005c6 000 00001111 b0cb6177 b0cb6177 cb5ceb89 cb5ceb89 cb5ceb89 cb5ceb89 bb5b5e52 bb5b5e52 bb5b5e52 bb5b5e52 241f432a 241f432a 241f432a 241f432a b0cb6177 b0cb6177
+0 01 400000e0 001 00001001 c43efbb2 c43efbb2 ef7f6bd9 ef7f6bd9 26325138 26325138 b1f7e55d b1f7e55d 72fa54ca 72fa54ca
+1 01 400004dc 000 00001111 dac325f4 0001 dac325f4 0010 dac325f4 0100 dac325f4 0000 d27c7637 0000 d27c7637 0010 d27c7637 0100 d27c7637 1000 0c56078f 0000 0c56078f 0010 0c56078f 0100 0c56078f 1000 19d8cfcd 0001 19d8cfcd 0010 19d8cfcd 0100 19d8cfcd 1000 000004d0 0020 197c90e4 e0d68355 d7732588 967434d2 82b8d2ce 0f37b916 c729a0fb d33f0607
+1 01 40000106 001 00000010 a1c20000 1100 d769e2c2 0011 d769e2c2 1100 00000100 0010 45823272 4d2d35a1 6c6c4664 0c129c32
+0 01 4000048c 010 00001110 65712768 5cc55a41 56a1119e 48b1d890 2f02dcf2 94ce381f 21b82fec ba60a2ca f91a5dfc 03ab9768 6a6eda2f 632af213 af1616f8 c43bdee4 f47d56cd
+1 01 40000070 001 00001110 2eee74c2 0001 2eee74c2 1100 675ec840 0010 675ec840 0100 5486eae7 0010 5486eae7 1100 76cae3fb 0010 76cae3fb 1100 7594820c 0001 7594820c 1100 1ad35f86 0011 1ad35f86 1000 12a6456e 0011 12a6456e 0100 00007700 0011 00000070 0020 6d5dd672 31ab0e11 c849dbce b852fb85 4f1ab9af e3af05e8 2ea29b8e cf346284
+1 01 400005d2 001 00001110 38640000 0100 bdf85db0 0010 bdf85db0 1100 283327d5 0011 283327d5 1000 e7be7583 0011 e7be7583 0100 6a40cdaa 0011 6a40cdaa 1000 1c4f9688 0011 1c4f9688 0100 15be222e 0001 15be222e 1100 45c5c2e7 0011 45c5c2e7 0100 000005d0 0020 d0bffeb2 69e69395 d97424b6 08f0b9db c988b99e eed25240 c429e3ea edf2f807
+1 01 40000090 001 00001000 a90651b8 0001 a90651b8 1100 9a35f2bd 0011 9a35f2bd 1100 129e0b69 0010 129e0b69 0000 ff132794 0001 ff132794 1100 0000c4a0 0011 00000090 0020 81e373f0 70d5229c 0ebae638 f3fba8e4 6b9d1aa2 69831b2a ce42f6b3 1636e488
+1 01 40000231 000 00000110 85f4b100 0000 85f4b100 0100 85f4b100 1000 dd1fa783 0001 dd1fa783 0010 dd1fa783 0100 dd1fa783 0000 00000230 0010 1617c02a 466d6aba 1eebd917 2fe93ac6
+0 10 400005ea 001 00001111 15be1c2e dfc5c2e7 dfc5c2e7 2f9594f1 2f9594f1 2aaedad3 2aaedad3 e90d5597 e90d5597 4be97d79 4be97d79 6a1ecdaa 6a1ecdaa 9f4f9688 9f4f9688 15be1c2e
+1 01 400006fa 000 00000011 f2730000 0100 f2730000 1000 00009523 0001 00009523 0000 000006f0 0010 e6d4049d 5d128794 c23a6a0f c2cd71f8
+0 10 400001e0 010 00000001 97e50aa8 0426d783
+1 01 400001d3 000 00001010 8e000000 0000 9dab40d8 0001 9dab40d8 0000 9dab40d8 0100 9dab40d8 1000 b4a92c2e 0001 b4a92c2e 0000 b4a92c2e 0000 b4a92c2e 1000 00002468 0001 00002468 0000 000001d0 0010 52727604 0ce3baef dca5ea0f ea4818a1
+1 01 4000020c 010 00000101 9c259f76 1111 e20fbb93 1011 b748e972 1111 25904cef 1111 08e117dd 1101 3b77373b 1111 00000200 0030 35cbe6f9 5a7530ff c8b86cbc 777bf3a2 e20a9a1e 2cab0b96 68b1caba 2d9da721 e6b9255d 3505e6ad d565676b 73d77463
+1 01 40000604 010 00000011 de0cba8c 1111 d7881a20 0010 b4ba966a 1000 847b22bc 1101 00000600 0020 f986c744 5746329b 9299cd90 a80054ad e5f06cd3 7dd06608 6ccdac89 0cd07363
+0 01 400003f0 010 00000100 20f9f0aa d2eed112 81ab9ee1 aff0fbb7 6d02953e
+0 10 4000011a 000 00000011 6dbd555a 6dbd555a 6dbd555a 6dbd555a
+1 01 40000275 000 00000011 dd8e1c00 0010 dd8e1c00 0000 dd8e1c00 1000 000000c4 0001 00000270 0010 dd852731 09c9707e 6cb70cb3 ae763098
+0 10 40000488 010 00000001 6a5574e6 65712768
+0 01 4000039a 001 00001110 4a703620 5abf8c9c 5abf8c9c 831b777e 831b777e 8a4dfcf5 8a4dfcf5 8379a57c 8379a57c 284cd9cd 284cd9cd 54737c67 54737c67 dbdc6c8f dbdc6c8f
+0 01 40000658 001 00000000 c6b71737
+1 01 400007be 001 00000101 cefc0000 1100 3b416e1b 0010 3b416e1b 0000 eb43ea16 0000 eb43ea16 1100 00002102 0011 000007b0 0020 0fcb44a4 037d5652 02d9bb4e a1168a91 6ff55549 4d9881a5 0371217a f4da42fb
+0 10 40000693 000 00000111 77ed0973 aef2274b aef2274b aef2274b aef2274b 77ed0973 77ed0973 77ed0973
+0 10 400005e1 000 00000001 6a1ecdaa 6a1ecdaa
+0 01 400002db 000 00001000 5c1f24bf 22ecb72b 22ecb72b 22ecb72b 22ecb72b 51797989 51797989 51797989 51797989
+0 01 4000062f 000 00000111 0cb5e38d 673cdc1f 673cdc1f 673cdc1f 673cdc1f c442100a c442100a c442100a
+0 01 40000044 001 00001100 2f42fa91 2f42fa91 9d7fd6e3 9d7fd6e3 4f70028e 4f70028e 348326ec 348326ec b010468e b010468e 861ab571 861ab571 a9c9f47c
+0 10 400007dc 001 00000111 d0799ad6 d0799ad6 14a987ef 14a987ef 5466dda0 5466dda0 07720206 07720206
+0 01 4000026c 001 00001111 89c20acb 89c20acb 9b80183f 9b80183f dd0b1cdf dd0b1cdf e7c887c4 e7c887c4 99460938 99460938 122b8e45 122b8e45 ece51a04 ece51a04 fc862a38 fc862a38
+0 01 400000b8 001 00000111 dd789b71 dd789b71 03d47cd2 03d47cd2 1edcf665 1edcf665 97159adb 97159adb
+1 01 40000024 000 00001110 29d6133c 0000 29d6133c 0010 29d6133c 0100 29d6133c 0000 2ead9e0f 0000 2ead9e0f 0010 2ead9e0f 0100 2ead9e0f 1000 6def6454 0001 6def6454 0010 6def6454 0000 6def6454 1000 001dd486 0001 001dd486 0010 001dd486 0100 00000020 0020 5883f71d 9fe8ae23 9044a379 27d029b3 9b17ba73 69e5cb9a d9155165 4c565bc2
+1 01 40000588 000 00000010 00790c46 0001 00790c46 0010 00790c46 0100 00000580 0010 29bd85d5 709cc19b d8835967 72c60973
+1 01 400007cb 000 00001100 f3000000 0000 ee2b86e4 0000 ee2b86e4 0000 ee2b86e4 0100 ee2b86e4 1000 b25edf2c 0001 b25edf2c 0010 b25edf2c 0000 b25edf2c 1000 f85e62ba 0001 f85e62ba 0000 f85e62ba 0100 f85e62ba 0000 000007c0 0020 6ff55549 4d9881a5 a1c735a3 c2b3f7a7 ef8722a0 86b8f3b6 abca4ded 614edf15
+0 10 400002cc 010 00000011 73e23a6b cb111abb c33d33b1 4afc7387
+0 10 4000005d 000 00001111 a9c9f47c a9c9f47c a9c9f47c 348326ec 348326ec 348326ec 348326ec b010468e b010468e b010468e b010468e 861ab571 861ab571 861ab571 861ab571 a9c9f47c
+1 01 400003e5 000 00001011 8579b200 0010 8579b200 0100 8579b200 1000 069683c4 0001 069683c4 0010 069683c4 0000 069683c4 1000 653bd38a 0000 653bd38a 0000 653bd38a 0100 653bd38a 1000 00000015 0001 000003e0 0020 6f671821 732a00e2 45319dfd 3728dbaa 63f49e20 f09f4afd 9763e3a9 826ebef4
+0 10 40000064 001 00000011 4bf8f099 4bf8f099 e4fbb390 e4fbb390
+1 01 4000057c 001 00001000 867dc15f 0010 867dc15f 0000 ca9e3ed7 0010 ca9e3ed7 1100 9ccd9db0 0000 9ccd9db0 0100 7921800a 0011 7921800a 0100 0000e63c 0001 00000570 0020 ac61bd7f e9d9fb84 a3a89996 25b75207 fc15ed29 0112b5d0 16eba5d8 a5c77f58
+1 01 40000568 010 00000111 e441cb8f 1110 a9dec9a5 1011 0cccf11c 0100 674c16f6 0101 c01d66e8 1111 6ca5515f 1010 7c3e847b 1111 12b92790 1110 00000560 0030 c0e85ac7 ad6f83fc 81cfce59 02c94e26 d966adfe b881091c 2db11b04 c61e952d 3bab888e 4cd8e82b 16eba5d8 a5c77f58
+0 01 40000472 001 00001001 bada3f1f 67fb2015 67fb2015 fd8659f9 fd8659f9 3ab16367 3ab16367 657bf0f5 657bf0f5 b0033419
+1 01 40000112 000 00000100 f42c0000 0100 f42c0000 1000 00b3f091 0001 00b3f091 0010 00b3f091 0100 00000110 0010 e0ec742c bb5acfd2 c1b93d1c 39b359aa
+0 01 40000010 010 00001111 d2c5d8ea cdbf267e db3a780e cf64e503 c6e2123e d7d613c4 2ead9e68 6d426454 131dd486 8345d335 1dfedae1 ed833f11 52218e74 2f42fa91 9d7fd6e3 4f70028e
+0 10 400004b6 000 00000001 6a6eda2f 6a6eda2f
+0 10 4000076f 000 00001111 8b8d18bb 1e63f820 1e63f820 1e63f820 1e63f820 b9180670 b9180670 b9180670 b9180670 ed3e0ba1 ed3e0ba1 ed3e0ba1 ed3e0ba1 8b8d18bb 8b8d18bb 8b8d18bb
+1 01 4000004c 000 00001110 4b0796bc 0001 4b0796bc 0010 4b0796bc 0000 4b0796bc 1000 08f5c7c9 0001 08f5c7c9 0010 08f5c7c9 0100 08f5c7c9 0000 14bd2f16 0000 14bd2f16 0010 14bd2f16 0100 14bd2f16 1000 00e7e90d 0001 00e7e90d 0010 00e7e90d 0100 00000040 0020 9ef015a7 65c462bf 24fdea8f a36b68fc b737c822 2966a857 b92b638e 2767dba2
+1 01 400003a0 010 00000001 a74823b5 1001 5963b91c 0100 000003a0 0010 05fa5804 e4460ed3 ef95c311 f48a5abe
+0 01 40000708 010 00000100 b09fcc2a aa460e11 59f0cf8c c47a0bcc bbd7c9cd
+0 01 40000378 001 00001010 a1b792d7 a1b792d7 58f7635a 58f7635a a8916510 a8916510 dbfa2abd dbfa2abd fbd44cb9 fbd44cb9 066600eb
+0 01 400005d6 001 00001111 bdf85d43 289327d5 289327d5 55be7583 55be7583 6a1ecdaa 6a1ecdaa 9f4f9688 9f4f9688 15be1c2e 15be1c2e dfc5c2e7 dfc5c2e7 2f9594f1 2f9594f1 2aaedad3
+1 01 40000366 001 00001101 bfbf0000 1100 4ca3f9f6 0011 4ca3f9f6 0100 b67be92d 0011 b67be92d 0000 d21e2cfd 0011 d21e2cfd 1100 bb6505a1 0011 bb6505a1 1000 ccf2efc2 0001 ccf2efc2 1100 1192f681 0011 1192f681 1100 0000d011 0011 00000360 0030 0e9dec45 3ab1fb47 562bc13b 4d9010a2 cbb4c34e d2efb16f 1301b3ce 82e967ff fd7f5652 3a353d95 20f79fb7 225be7f9
+1 01 40000200 010 00000101 394fbdfe 1101 719d237a 1101 ad55d7aa 1111 5c327c7a 1111 2e167dec 1010 2bf2eebb 1100 00000200 0020 83577005 52698694 7b82f748 207d792a de3fcc91 ddb3bb57 68b1caba 2d9da721
+1 01 40000182 000 00000110 3bb80000 0100 3bb80000 1000 be8a7400 0001 be8a7400 0000 be8a7400 0000 be8a7400 1000 000000be 0000 00000180 0010 92e4d60b 14f1c2e4 5207ef42 b812fc1e
+1 01 40000080 001 00000101 5e717380 0011 5e717380 1100 d72f18b1 0011 d72f18b1 0100 e5370d1e 0011 e5370d1e 1100 00000080 0010 b1dcb8d3 d62cfec0 3c117c06 5886862e
+1 01 40000168 001 00001111 1ad471c4 0010 1ad471c4 1100 a395198e 0011 a395198e 0000 2751a39d 0001 2751a39d 0000 fec99bf1 0001 fec99bf1 1100 bda487e3 0011 bda487e3 1100 e1491ef9 0010 e1491ef9 0000 7d01d05b 0011 7d01d05b 1100 0b1b5490 0010 0b1b5490 1100 00000160 0030 d5e4fe6f 3736555e df07ae52 fffb13b6 2080fdd1 66562ada 06433584 de10018e 7a22be2a aaab0877 5207ef42 b812fc1e
+0 01 400004da 000 00000000 4296f85c
+1 01 400004d5 000 00001111 46524900 0010 46524900 0100 46524900 0000 87fac756 0001 87fac756 0010 87fac756 0100 87fac756 0000 b3ff6456 0001 b3ff6456 0010 b3ff6456 0000 b3ff6456 1000 ebb1407a 0001 ebb1407a 0010 ebb1407a 0100 ebb1407a 0000 000000db 0001 000004d0 0020 069c2a8e ae78e4aa 96e1fcd5 4668cef9 21360e10 d90d06f0 c729a0fb d33f0607
+0 10 400001ba 001 00000001 6755e040 6755e040
+0 01 4000001c 010 00001001 cf64e503 c6e2123e d7d613c4 2ead9e68 6d426454 131dd486 8345d335 1dfedae1 ed833f11 52218e74
+1 01 4000028c 010 00000010 85e15fdf 1101 4747bfa9 1011 b3c505b8 0011 00000280 0020 6db867af cd836445 a15b6378 81719b23 5e1e0b0c b22b68e8 b6290026 5d959fef
+0 01 400004ec 010 00001001 d234db84 83e85273 b473c5cf 4f665889 ce6b09f2 93763981 c0e3e6fe 90003e37 9396303c 98a47ac0
+0 10 400001f0 000 00000111 3ec4c0ca 3ec4c0ca 3ec4c0ca 3ec4c0ca a9234d63 a9234d63 a9234d63 a9234d63
+0 01 40000636 000 00001001 c442100a c442100a a55fc674 a55fc674 a55fc674 a55fc674 eb24da97 eb24da97 eb24da97 eb24da97
+1 01 400003bc 000 00000101 02f23682 0001 02f23682 0010 02f23682 0100 02f23682 1000 00002aad 0000 00002aad 0010 000003b0 0020 9a4601d8 557c6243 50cb6404 126086ae 21ff8d91 8455b969 b46dee5b f3762219
+0 10 4000021e 001 00000011 08e127dd 25904cef 25904cef 08e127dd
+1 01 400006e8 010 00001010 6fa78e2a 0001 27585734 1011 a193ca70 0110 3a37b0ae 0111 038f4403 0110 81fba833 1000 d1c4d78e 0011 9ad44c49 1111 70309e09 1111 ce80587b 0111 991d1e1a 1111 000006e0 0040 ab97db46 cd06a676 e3e8cc37 8d5f3a17 67239d20 50ae2115 41cf3a75 091223ae 7cf1f834 e8ef3597 b3d17b7e 9c0e3783 66b309e8 b3d2a47e f5488494 42ad2ece
+0 01 40000124 001 00001100 606f08df 606f08df 4e46be93 4e46be93 d1fae7a3 d1fae7a3 eab39bb5 eab39bb5 fe5bb9af fe5bb9af 11c7fd42 11c7fd42 558f00ee
+0 01 40000378 010 00001110 ccf292c2 1192f681 a891d011 dbfa2abd fbd44cb9 066600eb 2bdd39e5 a310ba01 4a703620 5abf8c9c a71b77b5 8a63fcf5 8379a57c 284cd9cd 54737c67
+0 10 40000727 000 00000001 062a6d79 062a6d79
+1 01 40000796 000 00000010 23d90000 0100 23d90000 1000 000000fc 0001 00000790 0010 b0570454 53b69d82 a8423ae3 368e0611
+1 01 40000016 000 00001000 b41e0000 0000 b41e0000 0000 64f997ad 0001 64f997ad 0010 64f997ad 0100 64f997ad 1000 00abb188 0000 00abb188 0010 00abb188 0100 00000010 0010 ba50fa81 415f5c4a 3726809b 6faa14a0
+0 01 400001fb 000 00000000 46ab7b89
+0 10 400003eb 000 00001111 068583c4 653bdb4c 653bdb4c 653bdb4c 653bdb4c 172713f6 172713f6 172713f6 172713f6 8579b258 8579b258 8579b258 8579b258 068583c4 068583c4 068583c4
+1 01 400005e8 010 00001000 c675ea7c 0010 61baa0f4 1110 4ce538b8 1011 4677d6df 1111 bba3b11f 1111 e40c8863 1011 edb2028c 0100 a893b9ea 1111 59aa9d8b 1110 000005e0 0030 c988b99e eed25240 64238a93 5c192bea bc4215f7 23b71054 fc71de44 60877f11 6e314db0 fe0806c2 e56588dd 80057508
+1 01 400001ec 001 00001110 8df464db 0000 8df464db 1100 ba2d6b0d 0011 ba2d6b0d 1100 fd769147 0001 fd769147 1000 d2ccaab1 0011 d2ccaab1 1000 73cfefcf 0011 73cfefcf 0100 b59719ad 0011 b59719ad 1000 aaae5539 0001 aaae5539 1100 000066c1 0001 000001e0 0030 45491ba6 2f5d50ae 3ee4e0a9 1aa1e54a 0916d5da 3b6c37ae ce6b7da6 d44eaa9b 2dd38b3f bdee5951 2619e516 83139cf5
+0 10 400000b8 010 00000011 dd789b71 03d47cd2 d13213fe 043d7aa2
+1 01 40000130 010 00000101 a25e8226 1101 4edb5aff 1001 9a74083d 1111 abdce456 1101 90c0ad2c 1011 b3721a2a 1110 00000130 0020 4ccb77d0 3c6c3923 4fbd9b03 ca848dba a7f7e9ec 2c04ff10 37d458f1 48a00b2c
+1 01 40000478 010 00000000 5da574d5 1010 00000470 0010 8104696e 502d81e4 f6c8aec0 eced1fed
+0 01 4000027c 001 00001101 99460938 99460938 122b8e45 122b8e45 ece51a04 ece51a04 fc862a38 fc862a38 85e10ddf 85e10ddf 4738bfa9 4738bfa9 c79005b8 c79005b8
+0 10 40000313 000 00001111 3b2fae81 979b7dd4 979b7dd4 979b7dd4 979b7dd4 8743d3b4 8743d3b4 8743d3b4 8743d3b4 a314142c a314142c a314142c a314142c 3b2fae81 3b2fae81 3b2fae81
+0 01 4000009c 001 00000111 ff137d94 ff137d94 36aec4a0 36aec4a0 6cf9de99 6cf9de99 d5bed8e4 d5bed8e4
+1 01 400004d1 000 00000100 87a52a00 0010 87a52a00 0100 87a52a00 1000 000018d5 0001 000018d5 0000 000004d0 0010 18c01f1f 468963ff 96e1fcd5 4668cef9
+0 01 400007dc 010 00000000 d0799ad6
+0 10 40000480 001 00001111 657bf0f5 657bf0f5 b0033419 b0033419 6a5574e6 6a5574e6 65712768 65712768 5cc55a41 5cc55a41 56a1119e 56a1119e 48b1d890 48b1d890 2f02dcf2 2f02dcf2
+0 10 400006f2 000 00000001 2a93ca56 2a93ca56
+0 10 4000003f 000 00000011 ed833f11 ed833f11 ed833f11 ed833f11
+1 01 40000331 000 00000101 cfed6800 0010 cfed6800 0100 cfed6800 1000 006cfe47 0000 006cfe47 0000 006cfe47 0000 00000330 0010 a67ff747 3b43572e 457f565c 34b4e686
+0 01 400007a0 010 00000010 5b4060f8 c87a2aab 742f640f
+0 01 40000232 001 00000110 85f4790a d91fa783 d91fa783 b2b42699 b2b42699 be2020b6 be2020b6
+1 01 400002e2 001 00000101 a3490000 0100 4600256f 0011 4600256f 1100 88138cb7 0011 88138cb7 1100 00008aa0 0011 000002e0 0010 c0ac74f7 91745e03 812e6f4b 649192fa
+1 01 400006dc 010 00001011 ec266846 1101 4f6c9901 1111 0302c811 1011 34714933 1011 0318efd3 1111 6c3950ff 1110 c33575d1 1101 8ce2586f 1001 01902d30 1111 ef210470 1111 3012840b 1101 bbab810d 1101 000006d0 0040 53a73872 e34ac6d2 d34f9422 fc285551 11c52815 4f2e6ff1 b47cdc8c 7e0b79be a3cf59b0 71433f3a af71bffb 1fd9d4e2 f68ae7cf 98257e32 920f58cb 0afe8a0e
+1 01 4000048a 001 00000110 f1cc0000 1100 980df6d7 0011 980df6d7 1100 d27037e3 0001 d27037e3 1100 57e058af 0011 57e058af 1100 00000480 0020 c6b679a6 802257bd bb84ba0d 5e4c3dd8 106491c9 243b9867 6c873efb e7bfdcfe
+0 01 40000279 000 00001101 e7c887c4 e7c887c4 e7c887c4 99460938 99460938 99460938 99460938 122b8e45 122b8e45 122b8e45 122b8e45 ece51a04 ece51a04 ece51a04
+0 10 400007de 000 00000001 d0799ad6 d0799ad6
+1 01 40000388 001 00000000 0000342c 0001 00000380 0010 fd7f5652 3a353d95 613cfb35 c71d8dac
+0 10 400005d6 001 00000001 bdf85d43 bdf85d43
+1 01 400005b1 000 00000001 007ede00 0000 007ede00 0100 000005b0 0010 c3eaa228 30f57c64 aaab1abb 90214d7c
+1 01 4000079a 001 00001101 248f0000 1100 012d07e8 0011 012d07e8 1000 c34ec25f 0011 c34ec25f 1100 5ad41bd7 0011 5ad41bd7 1100 4635145b 0011 4635145b 1000 623e8d69 0011 623e8d69 1100 06cd5a0d 0000 06cd5a0d 1100 0000b366 0011 00000790 0030 b0570454 53b69d82 11191647 a4e43f92 01e0adf8 21aacf4d 97cfb3c4 d76b4055 4133d176 6b9e318c 02d9bb4e a1168a91
+1 01 40000198 010 00000011 ea79adf9 1111 9e19f03b 1100 fa7b56d1 0101 d98fceac 1111 00000190 0020 ea226525 94b3071b ab47ed5e e2fec407 1ec775f6 04f62bf4 f4df49ed 53d06338
+1 01 40000216 001 00001101 15cc0000 0000 8759af0e 0011 8759af0e 1100 9e4e5c2b 0011 9e4e5c2b 1100 35295f38 0001 35295f38 1100 0d35aab1 0011 0d35aab1 0100 93472dec 0011 93472dec 0100 859395ee 0001 859395ee 1000 0000d3bb 0011 00000210 0030 de3fcc91 ddb3bb57 2ae81c1e c050837e b70c3d83 e8f7487d 8fd6d494 594e19ba 52426272 8a9ea387 1eebd917 2fe93ac6
+1 01 40000508 001 00000101 ea0aa6e6 0001 ea0aa6e6 1100 c755c507 0011 c755c507 1100 4601676a 0001 4601676a 1000 00000500 0020 45affc12 46f6f2a0 34f9efaf ccec4f13 46bb440e 5a2c3784 0c46f59b 26b0cc09
+1 01 400002cc 010 00000110 ca21f2fa 0110 6b7f355b 1111 8e251155 1111 7793ae8f 1110 bc69010c 1110 58b21147 1110 c40fa35b 1111 000002c0 0030 d506b7c3 c25a9989 238aaf01 9c7504c4 faec7de4 f90b0bef 17a3b133 64eb0d3e 1ca6cd04 e9dd91a1 812e6f4b 649192fa
+1 01 40000582 001 00000011 f3090000 0100 5f592cf9 0010 5f592cf9 1100 000000e1 0011 00000580 0010 e7261d8a f95e8d58 f5a9cb13 ae6eb9ba
+0 10 40000098 000 00001111 78150bba 78150bba 78150bba 78150bba ff137d94 ff137d94 ff137d94 ff137d94 a906eeb8 a906eeb8 a906eeb8 a906eeb8 9a35f2bd 9a35f2bd 9a35f2bd 9a35f2bd
+0 10 400006c6 001 00000001 1ecc36c5 1ecc36c5
+1 01 40000450 001 00000011 a30a71f4 0010 a30a71f4 0100 f0a5d3fb 0001 f0a5d3fb 1100 00000450 0010 d8a7e1a1 bc2f6df9 2300d440 ed86b702
+1 01 40000708 010 00001101 f5f9f7f5 1010 79dd1b5d 1111 38246499 0110 5d2959f0 1001 0359861f 1111 997e8f3a 1111 39d05a82 0111 5f57b1a1 1101 66c2963f 1111 375eeea5 0011 8ba51b0a 0111 02acdb00 1111 42df1d81 0001 38a55ccc 1111 00000700 0040 f68ae7cf 98257e32 7096f5fe 1a9cb9b3 6e825cf5 6f63feca 441d425d 9eefe0cb 16b5235d 3384abe5 68d0788f e1775c73 47823ed4 7bf0a723 80d267ff 5cc93c99
+0 01 4000054a 000 00000000 a64e38b5
+1 01 400002f1 000 00000011 41b7c600 0010 41b7c600 0100 41b7c600 1000 0000002c 0001 000002f0 0010 ac33397e 6f3b0b2a 49fbf7c2 4fa5dbc4
+0 10 400001ec 010 00000001 8df4ae53 e079104b
+1 01 400006e5 000 00001111 a8d0d800 0000 a8d0d800 0000 a8d0d800 1000 98c32d3e 0001 98c32d3e 0010 98c32d3e 0000 98c32d3e 1000 e9fbb855 0001 e9fbb855 0010 e9fbb855 0100 e9fbb855 1000 6231e2a1 0001 6231e2a1 0000 6231e2a1 0100 6231e2a1 1000 00000090 0001 000006e0 0020 da3a4216 8b76bbb7 719d7a15 04c4ebc6 3650b176 aef924b9 af71bffb 1fd9d4e2
+0 10 4000007e 001 00000001 76cae38c 76cae38c
+0 01 40000414 010 00001101 c4b174f1 ca8fdc96 f5f2a69a 689b27f4 e1c388db 7cd7d3c2 96727d01 4de2f75f 15875f0a c230e476 75d7d8de 28a22e47 7f7cfdde a0b1a4db
+0 01 40000455 000 00000011 f0a593fb f0a593fb f0a593fb d9c08797
+1 01 4000030c 001 00000110 5ca1d445 0011 5ca1d445 1100 f7e2983e 0011 f7e2983e 1100 a6c20c17 0011 a6c20c17 1000 0000b578 0011 00000300 0020 530550d9 b9cf41fe 9f87cbcd 6ac88388 fbaea8ca 79ecd290 ed3750df 090805bd
+1 01 40000266 001 00000101 419f0000 1100 8956595c 0011 8956595c 1100 e34e4df9 0001 e34e4df9 0100 00008d0c 0011 00000260 0020 00e09619 b15246ea 8a0dce5d 4f914aff fee356c3 477e9052 6cb70cb3 ae763098
+0 01 400003ef 000 00000100 653bdb4c 20f9f015 20f9f015 20f9f015 20f9f015
+1 01 40000448 010 00001100 9fa4c509 1011 8c7b590c 0011 972f3b4f 1110 931613bf 1101 5f2cab9e 0110 00d9cb5b 1111 a87be801 0111 eb241495 1110 16cf5e58 1111 d8d7d14b 1100 25132407 1111 3b92edba 1110 e2ba80e8 1001 00000440 0040 b5991102 ec19691b d5731d30 62b7f12f ff714467 5fcc4ca5 c476622b 8f1ed95c a5f0598a c98efe0a ae64032f af93c7c8 5eeb0afd 75a485d0 9d6c7758 6ed6f2c7
+0 01 40000110 001 00000100 f42cc5f1 f42cc5f1 21b3f091 21b3f091 6dbd555a
+1 01 40000034 010 00000100 842b5e50 1011 a4a3b9d2 1111 252bab07 0010 c633c4cd 0101 3bd1cb7e 1111 00000030 0020 b4945f01 dbf45004 8cdabe13 685b9bdf 9ae580e2 9a256e43 24fdea8f a36b68fc
+0 01 40000474 000 00001111 3b92ed15 3b92ed15 3b92ed15 3b92ed15 e28674e8 e28674e8 e28674e8 e28674e8 3ab16367 3ab16367 3ab16367 3ab16367 657bf0f5 657bf0f5 657bf0f5 657bf0f5
+0 10 40000091 000 00000011 a906eeb8 a906eeb8 a906eeb8 a906eeb8
+1 01 400006e3 000 00000000 d7000000 0000 000006e0 0010 da3a4216 8b76bbb7 719d7a15 04c4ebc6
+0 01 40000478 010 00001001 e28674e8 3ab16367 657bf0f5 b0033419 f1cc74e6 980df6d7 d2705ae3 57e058af 48b1d890 2f02dcf2
+1 01 40000514 010 00001011 7d893294 1110 cb18ce30 0101 a01f856f 1111 2e0f80b7 1010 e8d68c0f 0011 f2a1dfec 1101 459d1a98 1011 f31734a6 1011 8b615d8e 1111 d987ffd1 1110 0c7c8b33 0111 fa8db28f 1010 00000510 0040 b56bb51e b0b437c8 3d04acec 90270639 b67d3b53 2574dd86 ab79e32d a7fce2f8 dee5704b 874aca19 fe899a21 0c0d8bbb 66789244 093ffb42 ccd3026a a98877c6
+1 01 400005e4 010 00000001 0e2177c4 0111 9938e5f0 1111 000005e0 0010 705b2ea8 523754af db1f6dba 8cfa832d
+0 01 4000002c 001 00000110 6d426454 6d426454 131dd486 131dd486 84455e50 84455e50 a4a3b9d2
diff --git a/fpga/xilinx/xlnx_axi_crossbar/Makefile b/fpga/xilinx/xlnx_axi_crossbar/Makefile
new file mode 100644
index 0000000..521e01a
--- /dev/null
+++ b/fpga/xilinx/xlnx_axi_crossbar/Makefile
@@ -0,0 +1,2 @@
+PROJECT:=xlnx_axi_crossbar
+include ../common.mk
diff --git a/fpga/xilinx/xlnx_axi_crossbar/tcl/run.tcl b/fpga/xilinx/xlnx_axi_crossbar/tcl/run.tcl
new file mode 100644
index 0000000..4674a80
--- /dev/null
+++ b/fpga/xilinx/xlnx_axi_crossbar/tcl/run.tcl
@@ -0,0 +1,18 @@
+set partNumber $::env(XILINX_PART)
+set boardName  $::env(XILINX_BOARD)
+
+set ipName xlnx_axi_crossbar
+
+create_project $ipName . -force -part $partNumber
+set_property board_part $boardName [current_project]
+
+create_ip -name axi_crossbar -vendor xilinx.com -library ip -version 2.1 -module_name $ipName
+
+set_property -dict [list CONFIG.ADDR_WIDTH {64} CONFIG.DATA_WIDTH {64} CONFIG.ID_WIDTH {5}] [get_ips $ipName]
+set_property -dict [list CONFIG.NUM_SI {2} CONFIG.NUM_MI {10} CONFIG.ADDR_WIDTH {64} CONFIG.DATA_WIDTH {64} CONFIG.ID_WIDTH {4} CONFIG.AWUSER_WIDTH {128} CONFIG.ARUSER_WIDTH {128} CONFIG.WUSER_WIDTH {128} CONFIG.RUSER_WIDTH {128} CONFIG.BUSER_WIDTH {128} CONFIG.S00_THREAD_ID_WIDTH {3} CONFIG.S01_THREAD_ID_WIDTH {3} CONFIG.S02_THREAD_ID_WIDTH {3} CONFIG.S03_THREAD_ID_WIDTH {3} CONFIG.S04_THREAD_ID_WIDTH {3} CONFIG.S05_THREAD_ID_WIDTH {3} CONFIG.S06_THREAD_ID_WIDTH {3} CONFIG.S07_THREAD_ID_WIDTH {3} CONFIG.S08_THREAD_ID_WIDTH {3} CONFIG.S09_THREAD_ID_WIDTH {3} CONFIG.S10_THREAD_ID_WIDTH {3} CONFIG.S11_THREAD_ID_WIDTH {3} CONFIG.S12_THREAD_ID_WIDTH {3} CONFIG.S13_THREAD_ID_WIDTH {3} CONFIG.S14_THREAD_ID_WIDTH {3} CONFIG.S15_THREAD_ID_WIDTH {3} CONFIG.S01_BASE_ID {0x00000008} CONFIG.S02_BASE_ID {0x00000010} CONFIG.S03_BASE_ID {0x00000018} CONFIG.S04_BASE_ID {0x00000020} CONFIG.S05_BASE_ID {0x00000028} CONFIG.S06_BASE_ID {0x00000030} CONFIG.S07_BASE_ID {0x00000038} CONFIG.S08_BASE_ID {0x00000040} CONFIG.S09_BASE_ID {0x00000048} CONFIG.S10_BASE_ID {0x00000050} CONFIG.S11_BASE_ID {0x00000058} CONFIG.S12_BASE_ID {0x00000060} CONFIG.S13_BASE_ID {0x00000068} CONFIG.S14_BASE_ID {0x00000070} CONFIG.S15_BASE_ID {0x00000078} CONFIG.M01_A00_BASE_ADDR {0x0000000000010000} CONFIG.M02_A00_BASE_ADDR {0x0000000002000000} CONFIG.M03_A00_BASE_ADDR {0x000000000C000000} CONFIG.M04_A00_BASE_ADDR {0x0000000010000000} CONFIG.M05_A00_BASE_ADDR {0x0000000018000000} CONFIG.M06_A00_BASE_ADDR {0x0000000020000000} CONFIG.M07_A00_BASE_ADDR {0x0000000030000000} CONFIG.M08_A00_BASE_ADDR {0x0000000040000000} CONFIG.M09_A00_BASE_ADDR {0x0000000080000000} CONFIG.M01_A00_ADDR_WIDTH {16} CONFIG.M02_A00_ADDR_WIDTH {20} CONFIG.M03_A00_ADDR_WIDTH {26} CONFIG.M06_A00_ADDR_WIDTH {23} CONFIG.M07_A00_ADDR_WIDTH {16} CONFIG.M09_A00_ADDR_WIDTH {28} CONFIG.Component_Name {xlnx_axi_crossbar}] [get_ips $ipName]
+
+generate_target {instantiation_template} [get_files ./$ipName.srcs/sources_1/ip/$ipName/$ipName.xci]
+generate_target all [get_files  ./$ipName.srcs/sources_1/ip/$ipName/$ipName.xci]
+create_ip_run [get_files -of_objects [get_fileset sources_1] ./$ipName.srcs/sources_1/ip/$ipName/$ipName.xci]
+launch_run -jobs 8 ${ipName}_synth_1
+wait_on_run ${ipName}_synth_1
diff --git a/include/ariane_axi_pkg.sv b/include/ariane_axi_pkg.sv
index 45583e3..2ec2af4 100644
--- a/include/ariane_axi_pkg.sv
+++ b/include/ariane_axi_pkg.sv
@@ -20,7 +20,7 @@ package ariane_axi;
     // used in axi_adapter.sv
     typedef enum logic { SINGLE_REQ, CACHE_LINE_REQ } ad_req_t;
 
-    localparam UserWidth = 1;
+    localparam UserWidth = ariane_pkg::DCACHE_ET_WIDTH;
     localparam AddrWidth = 64;
     localparam DataWidth = 64;
     localparam StrbWidth = DataWidth / 8;
diff --git a/include/ariane_pkg.sv b/include/ariane_pkg.sv
index 04f603a..7b3bc84 100644
--- a/include/ariane_pkg.sv
+++ b/include/ariane_pkg.sv
@@ -222,6 +222,10 @@ package ariane_pkg;
     localparam REG_ADDR_SIZE = 6;
     localparam NR_WB_PORTS = 4;
 
+    // Z extension
+    // Enclave Tweak Size
+    localparam ET_WIDTH = 134;
+
     // static debug hartinfo
     localparam dm::hartinfo_t DebugHartInfo = '{
                                                 zero1:        '0,
@@ -423,13 +427,18 @@ package ariane_pkg;
     localparam int unsigned ICACHE_TAG_WIDTH   = riscv::PLEN-ICACHE_INDEX_WIDTH;  // in bit
     localparam int unsigned ICACHE_LINE_WIDTH  = 128; // in bit
     localparam int unsigned ICACHE_SET_ASSOC   = 4;
+    localparam int unsigned ICACHE_ET_WIDTH    = ET_WIDTH;
     // D$
     localparam int unsigned DCACHE_INDEX_WIDTH = 12;  // in bit
     localparam int unsigned DCACHE_TAG_WIDTH   = riscv::PLEN-DCACHE_INDEX_WIDTH;  // in bit
-    localparam int unsigned DCACHE_LINE_WIDTH  = 128; // in bit
+    localparam int unsigned DCACHE_LINE_WIDTH  = 128*4; // in bit
     localparam int unsigned DCACHE_SET_ASSOC   = 8;
+    localparam int unsigned DCACHE_ET_WIDTH    = ET_WIDTH;
 `endif
 
+    localparam int unsigned AXI_USER_ETWEAK_LOW  = 0;
+    localparam int unsigned AXI_USER_ETWEAK_HIGH = ET_WIDTH-1;
+
     // ---------------
     // EX Stage
     // ---------------
@@ -654,31 +663,35 @@ package ariane_pkg;
     // ----------------------
     // I$ address translation requests
     typedef struct packed {
-        logic                     fetch_valid;     // address translation valid
-        logic [riscv::PLEN-1:0]   fetch_paddr;     // physical address in
-        exception_t               fetch_exception; // exception occurred during fetch
+        logic                       fetch_valid;     // address translation valid
+        logic [riscv::PLEN-1:0]     fetch_paddr;     // physical address in
+        exception_t                 fetch_exception; // exception occurred during fetch
+        logic [ICACHE_ET_WIDTH-1:0] fetch_etweak;    // Enclave tweak
     } icache_areq_i_t;
 
     typedef struct packed {
-        logic                     fetch_req;       // address translation request
-        logic [riscv::VLEN-1:0]   fetch_vaddr;     // virtual address out
+        logic                       fetch_req;       // address translation request
+        logic [riscv::VLEN-1:0]     fetch_vaddr;     // virtual address out
+        logic [ICACHE_ET_WIDTH-1:0] fetch_etweak;    // Enclave tweak out
     } icache_areq_o_t;
 
     // I$ data requests
     typedef struct packed {
-        logic                     req;                    // we request a new word
-        logic                     kill_s1;                // kill the current request
-        logic                     kill_s2;                // kill the last request
-        logic                     spec;                   // request is speculative
-        logic [riscv::VLEN-1:0]   vaddr;                  // 1st cycle: 12 bit index is taken for lookup
+        logic                       req;                    // we request a new word
+        logic                       kill_s1;                // kill the current request
+        logic                       kill_s2;                // kill the last request
+        logic                       spec;                   // request is speculative
+        logic [riscv::VLEN-1:0]     vaddr;                  // 1st cycle: 12 bit index is taken for lookup
+        logic [ICACHE_ET_WIDTH-1:0] etweak;                 // Enclave tweak
     } icache_dreq_i_t;
 
     typedef struct packed {
-        logic                     ready;                  // icache is ready
-        logic                     valid;                  // signals a valid read
-        logic [FETCH_WIDTH-1:0]   data;                   // 2+ cycle out: tag
-        logic [riscv::VLEN-1:0]   vaddr;                  // virtual address out
-        exception_t               ex;                     // we've encountered an exception
+        logic                       ready;                  // icache is ready
+        logic                       valid;                  // signals a valid read
+        logic [FETCH_WIDTH-1:0]     data;                   // 2+ cycle out: tag
+        logic [riscv::VLEN-1:0]     vaddr;                  // virtual address out
+        logic [ICACHE_ET_WIDTH-1:0] etweak;                 // Enclave tweak 
+        exception_t                 ex;                     // we've encountered an exception
     } icache_dreq_o_t;
 
     // AMO request going to cache. this request is unconditionally valid as soon
@@ -699,11 +712,14 @@ package ariane_pkg;
         logic [63:0] result; // sign-extended, result
     } amo_resp_t;
 
+    typedef riscv::enclave_tweak_t cache_tweak_t;
+
     // D$ data requests
     typedef struct packed {
         logic [DCACHE_INDEX_WIDTH-1:0] address_index;
         logic [DCACHE_TAG_WIDTH-1:0]   address_tag;
         logic [63:0]                   data_wdata;
+        cache_tweak_t                  etweak_w;
         logic                          data_req;
         logic                          data_we;
         logic [7:0]                    data_be;
@@ -712,10 +728,12 @@ package ariane_pkg;
         logic                          tag_valid;
     } dcache_req_i_t;
 
+    // D$ data response
     typedef struct packed {
         logic                          data_gnt;
         logic                          data_rvalid;
         logic [63:0]                   data_rdata;
+        cache_tweak_t                  etweak_r;
     } dcache_req_o_t;
 
     // ----------------------
diff --git a/include/riscv_pkg.sv b/include/riscv_pkg.sv
index 238663b..846ec3a 100644
--- a/include/riscv_pkg.sv
+++ b/include/riscv_pkg.sv
@@ -34,6 +34,9 @@ package riscv;
     // Warning: VLEN must be superior or equal to PLEN
     localparam VLEN       = (XLEN == 32) ? 32 : 64;    // virtual address length
     localparam PLEN       = (XLEN == 32) ? 32 : 56;    // physical address length
+    
+    // Z extension
+    localparam ENCLAVE_VOFFSET = 33;    // Voffset field size because of SV39
 
     localparam IS_XLEN64  = (XLEN == 32) ? 1'b0 : 1'b1;
     localparam ModeW      = (XLEN == 32) ? 1 : 4;
@@ -265,7 +268,25 @@ package riscv;
     // ----------------------
     // memory management, pte
     typedef struct packed {
-        logic [9:0]  reserved;
+        logic [6:0]  reserved;
+        logic [1:0]  enclave_sid_selection;
+        logic        enclave_encrypted_page;
+    } pte_msb_t;
+
+    typedef struct packed {
+        logic [1:0]  rsw;
+        logic d;
+        logic a;
+        logic g;
+        logic u;
+        logic x;
+        logic w;
+        logic r;
+        logic v;
+    } pte_lsb_t;
+
+    typedef struct packed {
+        pte_msb_t  msb;
         logic [PLEN-12-1:0] ppn;
         logic [1:0]  rsw;
         logic d;
@@ -295,6 +316,7 @@ package riscv;
     localparam logic [XLEN-1:0] INSTR_PAGE_FAULT      = 12; // Instruction page fault
     localparam logic [XLEN-1:0] LOAD_PAGE_FAULT       = 13; // Load page fault
     localparam logic [XLEN-1:0] STORE_PAGE_FAULT      = 15; // Store page fault
+    localparam logic [XLEN-1:0] DECRYPTION_INTEGRITY_FAILURE = 16; // Z extension decryption integrity failure
     localparam logic [XLEN-1:0] DEBUG_REQUEST         = 24; // Debug request
 
     localparam int unsigned IRQ_S_SOFT  = 1;
@@ -454,7 +476,83 @@ package riscv;
         CSR_HPM_COUNTER_28 = 12'hC1C,  // reserved
         CSR_HPM_COUNTER_29 = 12'hC1D,  // reserved
         CSR_HPM_COUNTER_30 = 12'hC1E,  // reserved
-        CSR_HPM_COUNTER_31 = 12'hC1F  // reserved
+        CSR_HPM_COUNTER_31 = 12'hC1F,  // reserved
+
+        // Z extension
+        // Supervisor R/W
+        CSR_E_SRANGE_VBASE           = 12'h5C0,
+        CSR_E_SRANGE_VSIZE           = 12'h5C1,
+        CSR_E_SSID_0                 = 12'h5C2,
+        CSR_E_SSID_1                 = 12'h5C3,
+
+        // Machine R/W
+        CSR_E_MRANGE_VBASE           = 12'h7C0,
+        CSR_E_MRANGE_VSIZE           = 12'h7C1,
+        CSR_E_MSID_0                 = 12'h7C2,
+        CSR_E_MSID_1                 = 12'h7C3,
+        CSR_E_LTWEAK                 = 12'h7C5,
+        CSR_E_LTWEAK_XRANGE_MAP      = 12'h7C6,
+        CSR_E_LTWEAK_XRANGE_MAP_MASK = 12'h7C7,
+        CSR_E_LTWEAK_PRV_LVL         = 12'h7C8,
+        CSR_E_LTWEAK_PRV_LVL_MASK    = 12'h7C9,
+        CSR_E_LTWEAK_TWEAK_EN        = 12'h7CA,
+        CSR_E_LTWEAK_PTE_MSB         = 12'h7CB,
+        CSR_E_LTWEAK_PTE_MSB_MASK    = 12'h7CC,
+        CSR_E_LTWEAK_PTE_LSB         = 12'h7CD,
+        CSR_E_LTWEAK_PTE_LSB_MASK    = 12'h7CE,
+        CSR_E_STWEAK                 = 12'h7CF,
+        CSR_E_STWEAK_XRANGE_MAP      = 12'h7D0,
+        CSR_E_STWEAK_XRANGE_MAP_MASK = 12'h7D1,
+        CSR_E_STWEAK_PRV_LVL         = 12'h7D2,
+        CSR_E_STWEAK_PRV_LVL_MASK    = 12'h7D3,
+        CSR_E_STWEAK_TWEAK_EN        = 12'h7D4,
+        CSR_E_STWEAK_PTE_MSB         = 12'h7D5,
+        CSR_E_STWEAK_PTE_MSB_MASK    = 12'h7D6,
+        CSR_E_STWEAK_PTE_LSB         = 12'h7D7,
+        CSR_E_STWEAK_PTE_LSB_MASK    = 12'h7D8,
+        CSR_E_STATUS                 = 12'h7D9,
+        CSR_E_SECS                   = 12'h7DA,
+        CSR_E_TCS                    = 12'h7DB,
+
+        // Z extension User R/WE
+        CSR_E_URANGE_VBASE               = 12'h801,
+        CSR_E_URANGE_VSIZE               = 12'h802,
+        CSR_E_USID_0                     = 12'h803,
+        CSR_E_USID_1                     = 12'h804,
+        // Z extension User R/W for DEBUGGING!
+        CSR_E_DBG_CONTROL                = 12'h823,
+        CSR_E_DBG_MRANGE_VBASE           = 12'h824,
+        CSR_E_DBG_MRANGE_VSIZE           = 12'h825,
+        CSR_E_DBG_SRANGE_VBASE           = 12'h826,
+        CSR_E_DBG_SRANGE_VSIZE           = 12'h827,
+        CSR_E_DBG_MSID_0                 = 12'h828,
+        CSR_E_DBG_MSID_1                 = 12'h829,
+        CSR_E_DBG_SSID_0                 = 12'h82A,
+        CSR_E_DBG_SSID_1                 = 12'h82B,
+        CSR_E_DBG_LTWEAK                 = 12'h830,
+        CSR_E_DBG_LTWEAK_XRANGE_MAP      = 12'h831,
+        CSR_E_DBG_LTWEAK_XRANGE_MAP_MASK = 12'h832,
+        CSR_E_DBG_LTWEAK_PRV_LVL         = 12'h833,
+        CSR_E_DBG_LTWEAK_PRV_LVL_MASK    = 12'h834,
+        CSR_E_DBG_LTWEAK_TWEAK_EN        = 12'h835,
+        CSR_E_DBG_LTWEAK_PTE_MSB         = 12'h836,
+        CSR_E_DBG_LTWEAK_PTE_MSB_MASK    = 12'h837,
+        CSR_E_DBG_LTWEAK_PTE_LSB         = 12'h838,
+        CSR_E_DBG_LTWEAK_PTE_LSB_MASK    = 12'h839,
+        CSR_E_DBG_STWEAK                 = 12'h83A,
+        CSR_E_DBG_STWEAK_XRANGE_MAP      = 12'h83B,
+        CSR_E_DBG_STWEAK_XRANGE_MAP_MASK = 12'h83C,
+        CSR_E_DBG_STWEAK_PRV_LVL         = 12'h83D,
+        CSR_E_DBG_STWEAK_PRV_LVL_MASK    = 12'h83E,
+        CSR_E_DBG_STWEAK_TWEAK_EN        = 12'h83F,
+        CSR_E_DBG_STWEAK_PTE_MSB         = 12'h840,
+        CSR_E_DBG_STWEAK_PTE_MSB_MASK    = 12'h841,
+        CSR_E_DBG_STWEAK_PTE_LSB         = 12'h842,
+        CSR_E_DBG_STWEAK_PTE_LSB_MASK    = 12'h843,
+        CSR_E_DBG_STATUS                 = 12'h844,
+        CSR_E_DBG_SECS                   = 12'h845,
+        CSR_E_DBG_TCS                    = 12'h846
+
     } csr_reg_t;
 
     localparam logic [63:0] SSTATUS_UIE  = 'h00000001;
@@ -501,6 +599,89 @@ package riscv;
         CSRRCI = 3'h7
     } csr_op_t;
 
+    // Z extension
+    typedef struct packed {
+        logic mrange;
+        logic srange;
+        logic urange;
+    } enclave_range_map_t;
+
+    localparam int unsigned ENCLAVE_TWEAK_SID1_BITSIZE = 16;
+
+    typedef struct packed {
+        logic [ENCLAVE_TWEAK_SID1_BITSIZE-1:0] S1;
+        logic [63:0] S0;
+    } enclave_sid_t;
+    
+    typedef struct packed {
+        logic u;
+        logic g;
+        logic r;
+        logic w;
+        logic x;
+    } enclave_pte_lsb_t;
+
+    typedef struct packed {
+        logic [1:0] SID_selector;
+    } enclave_pte_msb_t;
+
+    localparam int unsigned E_TWEAK_LENGTH      = 134;
+
+    // should be size of ariane_pkg.sv ET_WIDTH
+    typedef struct packed {
+        logic [ENCLAVE_VOFFSET-1:0]  voffset;   // 33 Bits
+        enclave_range_map_t range_map;          //  3 Bits
+        priv_lvl_t prv;                         //  2 Bits
+        enclave_pte_msb_t pte_msb;              //  2 Bits
+        enclave_pte_lsb_t pte_lsb;              //  5 Bits
+        enclave_sid_t SID;                      // 80 Bits
+    } enclave_tweak_t;
+
+    typedef struct packed {
+        riscv::xlen_t vbase;
+        riscv::xlen_t vsize;
+    } enclave_range_t;
+
+    typedef struct packed {
+        logic [63:3] reserved;
+        logic vsize_xrange_is_size_not_mask_no_alignment;
+        logic allow_unsafe_code_fetches;
+        logic auth_weak;
+    } enclave_debug_control_t;
+
+    typedef struct packed {
+        enclave_range_map_t xrange_map;
+        enclave_range_map_t xrange_map_mask;
+        logic [1:0] prv_lvl_mask;
+        priv_lvl_t prv_lvl;
+        logic tweak_en;
+        logic [9:0] pte_lsb;
+        logic [9:0] pte_lsb_mask;
+        logic [9:0] pte_msb;      // currently unused
+        logic [9:0] pte_msb_mask; // currently unused
+    } enclave_tweak_override_t;
+
+    typedef struct packed {
+        enclave_range_t mrange;
+        enclave_range_t srange;
+        enclave_range_t urange;
+        enclave_tweak_override_t ltweak;
+        enclave_tweak_override_t stweak;
+        // enclave_sid_t msid;
+        riscv::xlen_t rtid;       // msid_0
+        riscv::xlen_t sid_shcode; // msid_1
+        // enclave_sid_t ssid;
+        riscv::xlen_t ssid_0;     // currently unused SSID_0 register
+        riscv::xlen_t ssid_1;     // currently unused SSID_1 register
+        // enclave_sid_t usid;
+        riscv::xlen_t sesskeyl;   // USID_0
+        riscv::xlen_t sesskeyh;   // USID_1
+        riscv::xlen_t status;
+        riscv::xlen_t secs;
+        riscv::xlen_t tcs;
+        enclave_debug_control_t dbg_control;
+    } enclave_t;
+
     // decoded CSR address
     typedef struct packed {
         logic [1:0]  rw;
diff --git a/include/wt_cache_pkg.sv b/include/wt_cache_pkg.sv
index 0293be3..1c32c32 100644
--- a/include/wt_cache_pkg.sv
+++ b/include/wt_cache_pkg.sv
@@ -77,6 +77,7 @@ package wt_cache_pkg;
   typedef struct packed {
     logic [ariane_pkg::DCACHE_INDEX_WIDTH+ariane_pkg::DCACHE_TAG_WIDTH-1:0] wtag;
     logic [63:0]                                                            data;
+    logic [ariane_pkg::DCACHE_ET_WIDTH-1:0]                                 wetweak;
     logic [7:0]                                                             dirty;   // byte is dirty
     logic [7:0]                                                             valid;   // byte is valid
     logic [7:0]                                                             txblock; // byte is part of transaction in-flight
@@ -127,6 +128,7 @@ package wt_cache_pkg;
     logic [riscv::PLEN-1:0]                          paddr;       // physical address
     logic                                            nc;          // noncacheable
     logic [CACHE_ID_WIDTH-1:0]                       tid;         // threadi id (used as transaction id in Ariane)
+    logic [ariane_pkg::ICACHE_ET_WIDTH-1:0]          etweak;      // enclave tweak
   } icache_req_t;
 
   typedef struct packed {
@@ -134,6 +136,7 @@ package wt_cache_pkg;
     logic [ariane_pkg::ICACHE_LINE_WIDTH-1:0]        data;        // full cache line width
     cache_inval_t                                    inv;         // invalidation vector
     logic [CACHE_ID_WIDTH-1:0]                       tid;         // threadi id (used as transaction id in Ariane)
+    logic [ariane_pkg::ICACHE_ET_WIDTH-1:0]          etweak;      // enclave tweak
   } icache_rtrn_t;
 
   // dcache interface
@@ -146,6 +149,7 @@ package wt_cache_pkg;
     logic                                            nc;          // noncacheable
     logic [CACHE_ID_WIDTH-1:0]                       tid;         // threadi id (used as transaction id in Ariane)
     ariane_pkg::amo_t                                amo_op;      // amo opcode
+    logic [ariane_pkg::DCACHE_ET_WIDTH-1:0]          etweak;      // enclave tweak
   } dcache_req_t;
 
   typedef struct packed {
diff --git a/src/ariane.sv b/src/ariane.sv
index eddc767..e508f40 100644
--- a/src/ariane.sv
+++ b/src/ariane.sv
@@ -159,6 +159,7 @@ module ariane import ariane_pkg::*; #(
   // --------------
   // CSR <-> *
   // --------------
+  riscv::enclave_t          enclave_config;
   logic [4:0]               fflags_csr_commit;
   riscv::xs_t               fs;
   logic [2:0]               frm_csr_id_issue_ex;
@@ -431,6 +432,10 @@ module ariane import ariane_pkg::*; #(
     .mxr_i                  ( mxr_csr_ex                  ), // from CSR
     .satp_ppn_i             ( satp_ppn_csr_ex             ), // from CSR
     .asid_i                 ( asid_csr_ex                 ), // from CSR
+    // Z extension
+    .enclave_config_i       ( enclave_config              ), // from CSR
+    .fetch_tweak_o          ( ), // fetch tweak for I-Cache
+
     .icache_areq_i          ( icache_areq_cache_ex        ),
     .icache_areq_o          ( icache_areq_ex_cache        ),
     // DCACHE interfaces
@@ -516,6 +521,7 @@ module ariane import ariane_pkg::*; #(
     .set_debug_pc_o         ( set_debug_pc                  ),
     .trap_vector_base_o     ( trap_vector_base_commit_pcgen ),
     .priv_lvl_o             ( priv_lvl                      ),
+    .enclave_config_o       ( enclave_config                ),
     .fs_o                   ( fs                            ),
     .fflags_o               ( fflags_csr_commit             ),
     .frm_o                  ( frm_csr_id_issue_ex           ),
diff --git a/src/axi_shim.sv b/src/axi_shim.sv
index 2aeeb74..9a1afb7 100644
--- a/src/axi_shim.sv
+++ b/src/axi_shim.sv
@@ -20,46 +20,48 @@
 
 
 module axi_shim #(
-    parameter int unsigned AxiNumWords       = 4, // data width in dwords, this is also the maximum burst length, must be >=2
-    parameter int unsigned AxiIdWidth        = 4  // stick to the spec
+    parameter int unsigned AxiNumWords              = 4, // data width in dwords, this is also the maximum burst length, must be >=2
+    parameter int unsigned AxiIdWidth               = 4  // stick to the spec
 ) (
-    input  logic                            clk_i,  // Clock
-    input  logic                            rst_ni, // Asynchronous reset active low
+    input  logic                                    clk_i,  // Clock
+    input  logic                                    rst_ni, // Asynchronous reset active low
     // read channel
     // request
-    input  logic                            rd_req_i,
-    output logic                            rd_gnt_o,
-    input  logic [63:0]                     rd_addr_i,
-    input  logic [$clog2(AxiNumWords)-1:0]  rd_blen_i, // axi convention: LEN-1
-    input  logic [1:0]                      rd_size_i,
-    input  logic [AxiIdWidth-1:0]           rd_id_i,   // use same ID for reads, or make sure you only have one outstanding read tx
-    input  logic                            rd_lock_i,
+    input  logic                                    rd_req_i,
+    output logic                                    rd_gnt_o,
+    input  logic [63:0]                             rd_addr_i,
+    input  logic [ariane_pkg::DCACHE_ET_WIDTH-1:0]  rd_etweak_i,
+    input  logic [$clog2(AxiNumWords)-1:0]          rd_blen_i, // axi convention: LEN-1
+    input  logic [1:0]                              rd_size_i,
+    input  logic [AxiIdWidth-1:0]                   rd_id_i,   // use same ID for reads, or make sure you only have one outstanding read tx
+    input  logic                                    rd_lock_i,
     // read response (we have to unconditionally sink the response)
-    input  logic                            rd_rdy_i,
-    output logic                            rd_last_o,
-    output logic                            rd_valid_o,
-    output logic [63:0]                     rd_data_o,
-    output logic [AxiIdWidth-1:0]           rd_id_o,
-    output logic                            rd_exokay_o, // indicates whether exclusive tx succeeded
+    input  logic                                    rd_rdy_i,
+    output logic                                    rd_last_o,
+    output logic                                    rd_valid_o,
+    output logic [63:0]                             rd_data_o,
+    output logic [AxiIdWidth-1:0]                   rd_id_o,
+    output logic                                    rd_exokay_o, // indicates whether exclusive tx succeeded
     // write channel
-    input  logic                            wr_req_i,
-    output logic                            wr_gnt_o,
-    input  logic [63:0]                     wr_addr_i,
-    input  logic [AxiNumWords-1:0][63:0]    wr_data_i,
-    input  logic [AxiNumWords-1:0][7:0]     wr_be_i,
-    input  logic [$clog2(AxiNumWords)-1:0]  wr_blen_i, // axi convention: LEN-1
-    input  logic [1:0]                      wr_size_i,
-    input  logic [AxiIdWidth-1:0]           wr_id_i,
-    input  logic                            wr_lock_i,
-    input  logic [5:0]                      wr_atop_i,
+    input  logic                                    wr_req_i,
+    output logic                                    wr_gnt_o,
+    input  logic [63:0]                             wr_addr_i,
+    input  logic [ariane_pkg::DCACHE_ET_WIDTH-1:0]  wr_etweak_i,
+    input  logic [AxiNumWords-1:0][63:0]            wr_data_i,
+    input  logic [AxiNumWords-1:0][7:0]             wr_be_i,
+    input  logic [$clog2(AxiNumWords)-1:0]          wr_blen_i, // axi convention: LEN-1
+    input  logic [1:0]                              wr_size_i,
+    input  logic [AxiIdWidth-1:0]                   wr_id_i,
+    input  logic                                    wr_lock_i,
+    input  logic [5:0]                              wr_atop_i,
     // write response
-    input  logic                            wr_rdy_i,
-    output logic                            wr_valid_o,
-    output logic [AxiIdWidth-1:0]           wr_id_o,
-    output logic                            wr_exokay_o, // indicates whether exclusive tx succeeded
+    input  logic                                    wr_rdy_i,
+    output logic                                    wr_valid_o,
+    output logic [AxiIdWidth-1:0]                   wr_id_o,
+    output logic                                    wr_exokay_o, // indicates whether exclusive tx succeeded
     // AXI port
-    output ariane_axi::req_t                axi_req_o,
-    input  ariane_axi::resp_t               axi_resp_i
+    output ariane_axi::req_t                        axi_req_o,
+    input  ariane_axi::resp_t                       axi_resp_i
 );
     localparam AddrIndex = ($clog2(AxiNumWords) > 0) ? $clog2(AxiNumWords) : 1;
 
@@ -80,6 +82,7 @@ module axi_shim #(
     // address
     assign axi_req_o.aw.burst  = (wr_single_req) ? 2'b00 : 2'b01;  // fixed size for single request and incremental transfer for everything else
     assign axi_req_o.aw.addr   = wr_addr_i;
+    assign axi_req_o.aw.user   = wr_etweak_i;
     assign axi_req_o.aw.size   = wr_size_i;
     assign axi_req_o.aw.len    = wr_blen_i;
     assign axi_req_o.aw.id     = wr_id_i;
@@ -237,6 +240,7 @@ module axi_shim #(
     assign axi_req_o.ar.burst  = (rd_blen_i == 0)      ? 2'b00 :
                                                          2'b01;  
     assign axi_req_o.ar.addr   = rd_addr_i;
+    assign axi_req_o.ar.user   = rd_etweak_i;
     assign axi_req_o.ar.size   = rd_size_i;
     assign axi_req_o.ar.len    = rd_blen_i;
     assign axi_req_o.ar.id     = rd_id_i;
diff --git a/src/cache_subsystem/cva6_icache.sv b/src/cache_subsystem/cva6_icache.sv
index 7c0b330..eb85655 100644
--- a/src/cache_subsystem/cva6_icache.sv
+++ b/src/cache_subsystem/cva6_icache.sv
@@ -52,6 +52,7 @@ module cva6_icache import ariane_pkg::*; import wt_cache_pkg::*; #(
   // signals
   logic                                 cache_en_d, cache_en_q;       // cache is enabled
   logic [riscv::VLEN-1:0]               vaddr_d, vaddr_q;
+  logic [ICACHE_ET_WIDTH-1:0]           etweak_d, etweak_q;
   logic                                 paddr_is_nc;                  // asserted if physical address is non-cacheable
   logic [ICACHE_SET_ASSOC-1:0]          cl_hit;                       // hit from tag compare
   logic                                 cache_rden;                   // triggers cache lookup
@@ -80,6 +81,8 @@ module cva6_icache import ariane_pkg::*; import wt_cache_pkg::*; #(
   logic [ICACHE_OFFSET_WIDTH-1:0]       cl_offset_d, cl_offset_q;     // offset in cache line
   logic [ICACHE_TAG_WIDTH-1:0]          cl_tag_d, cl_tag_q;           // this is the cache tag
   logic [ICACHE_TAG_WIDTH-1:0]          cl_tag_rdata [ICACHE_SET_ASSOC-1:0]; // these are the tags coming from the tagmem
+  logic [ICACHE_ET_WIDTH-1:0]           cl_etweak_d, cl_etweak_q;     // this is the cache tweak
+  logic [ICACHE_ET_WIDTH-1:0]           cl_etweak_rdata [ICACHE_SET_ASSOC-1:0]; // these are the enclave tweaks coming from the etmem
   logic [ICACHE_LINE_WIDTH-1:0]         cl_rdata     [ICACHE_SET_ASSOC-1:0]; // these are the cachelines coming from the cache
   logic [ICACHE_SET_ASSOC-1:0][FETCH_WIDTH-1:0]cl_sel;                // selected word from each cacheline
   logic [ICACHE_SET_ASSOC-1:0]          vld_req;                      // bit enable for valid regs
@@ -99,6 +102,8 @@ module cva6_icache import ariane_pkg::*; import wt_cache_pkg::*; #(
   // extract tag from physical address, check if NC
   assign cl_tag_d  = (areq_i.fetch_valid) ? areq_i.fetch_paddr[ICACHE_TAG_WIDTH+ICACHE_INDEX_WIDTH-1:ICACHE_INDEX_WIDTH] : cl_tag_q;
 
+  assign cl_etweak_d = (areq_i.fetch_valid) ? areq_i.fetch_etweak : cl_etweak_q;
+
   // noncacheable if request goes to I/O space, or if cache is disabled
   assign paddr_is_nc = (~cache_en_q) | (~ariane_pkg::is_inside_cacheable_regions(ArianeCfg, {{{64-riscv::PLEN}{1'b0}}, cl_tag_d, {ICACHE_INDEX_WIDTH{1'b0}}}));
 
@@ -108,7 +113,9 @@ module cva6_icache import ariane_pkg::*; import wt_cache_pkg::*; #(
   // latch this in case we have to stall later on
   // make sure this is 32bit aligned
   assign vaddr_d = (dreq_o.ready & dreq_i.req) ? dreq_i.vaddr : vaddr_q;
+  assign etweak_d = (dreq_o.ready & dreq_i.req) ? dreq_i.etweak : etweak_q;
   assign areq_o.fetch_vaddr = {vaddr_q>>2, 2'b0};
+  assign areq_o.fetch_etweak = etweak_q;
 
   // split virtual address into index and offset to address cache arrays
   assign cl_index    = vaddr_d[ICACHE_INDEX_WIDTH-1:ICACHE_OFFSET_WIDTH];
@@ -133,6 +140,7 @@ end else begin : gen_piton_offset
                                               {cl_tag_d, vaddr_q[ICACHE_INDEX_WIDTH-1:ICACHE_OFFSET_WIDTH], {ICACHE_OFFSET_WIDTH{1'b0}}}; // align to cl
   end
 
+  assign mem_data_o.etweak = cl_etweak_d;
 
   assign mem_data_o.tid   = RdTxId;
 
@@ -140,6 +148,7 @@ end else begin : gen_piton_offset
   // way that is being replaced
   assign mem_data_o.way   = repl_way;
   assign dreq_o.vaddr     = vaddr_q;
+  assign dreq_o.etweak    = etweak_q;
 
   // invalidations take two cycles
   assign inv_d = inv_en;
@@ -399,7 +408,8 @@ end else begin : gen_piton_offset
     .cnt_o   ( hit_idx ),
     .empty_o (         )
   );
-
+  // double assignment temporarily removed
+  //assign dreq_o.etweak = cl_etweak_rdata[hit_idx];
   assign dreq_o.data = (cmp_en_q) ? cl_sel[hit_idx] :
                                     mem_rtrn_i.data[{cl_offset_q,3'b0} +: FETCH_WIDTH];
 
@@ -408,7 +418,7 @@ end else begin : gen_piton_offset
 ///////////////////////////////////////////////////////
 
 
-  logic [ICACHE_TAG_WIDTH:0] cl_tag_valid_rdata [ICACHE_SET_ASSOC-1:0];
+  logic [ICACHE_TAG_WIDTH:0]  cl_tag_valid_rdata    [ICACHE_SET_ASSOC-1:0];
 
   for (genvar i = 0; i < ICACHE_SET_ASSOC; i++) begin : gen_sram
     // Tag RAM
@@ -429,8 +439,25 @@ end else begin : gen_piton_offset
       .rdata_o   ( cl_tag_valid_rdata[i]    )
     );
 
-    assign cl_tag_rdata[i] = cl_tag_valid_rdata[i][ICACHE_TAG_WIDTH-1:0];
-    assign vld_rdata[i]    = cl_tag_valid_rdata[i][ICACHE_TAG_WIDTH];
+    sram #(
+      // enclave tweak
+      .DATA_WIDTH ( ICACHE_ET_WIDTH    ),
+      .NUM_WORDS  ( ICACHE_NUM_WORDS   )
+    ) etweak_sram (
+      .clk_i      ( clk_i                    ),
+      .rst_ni     ( rst_ni                   ),
+      .req_i      ( vld_req[i]               ),
+      .we_i       ( vld_we                   ),
+      .addr_i     ( vld_addr                 ),
+      // we can always use the saved tag here since it takes a
+      // couple of cycle until we write to the cache upon a miss
+      .wdata_i    ( cl_etweak_q              ),
+      .be_i       ( '1                       ),
+      .rdata_o    ( cl_etweak_rdata[i]       )
+    );
+
+    assign cl_tag_rdata[i]    = cl_tag_valid_rdata[i][ICACHE_TAG_WIDTH-1:0];
+    assign vld_rdata[i]       = cl_tag_valid_rdata[i][ICACHE_TAG_WIDTH];
 
     // Data RAM
     sram #(
@@ -452,8 +479,10 @@ end else begin : gen_piton_offset
   always_ff @(posedge clk_i or negedge rst_ni) begin : p_regs
     if(!rst_ni) begin
       cl_tag_q      <= '0;
+      cl_etweak_q   <= '0;
       flush_cnt_q   <= '0;
       vaddr_q       <= '0;
+      etweak_q      <= '0;
       cmp_en_q      <= '0;
       cache_en_q    <= '0;
       flush_q       <= '0;
@@ -463,8 +492,10 @@ end else begin : gen_piton_offset
       inv_q         <= '0;
     end else begin
       cl_tag_q      <= cl_tag_d;
+      cl_etweak_q   <= cl_etweak_d;
       flush_cnt_q   <= flush_cnt_d;
       vaddr_q       <= vaddr_d;
+      etweak_q      <= etweak_d;
       cmp_en_q      <= cmp_en_d;
       cache_en_q    <= cache_en_d;
       flush_q       <= flush_d;
diff --git a/src/cache_subsystem/cva6_icache_axi_wrapper.sv b/src/cache_subsystem/cva6_icache_axi_wrapper.sv
index 1aeab62..112d09e 100644
--- a/src/cache_subsystem/cva6_icache_axi_wrapper.sv
+++ b/src/cache_subsystem/cva6_icache_axi_wrapper.sv
@@ -126,6 +126,7 @@ module cva6_icache_axi_wrapper import ariane_pkg::*; import wt_cache_pkg::*; #(
     .rd_req_i        ( axi_rd_req        ),
     .rd_gnt_o        ( axi_rd_gnt        ),
     .rd_addr_i       ( axi_rd_addr       ),
+    .rd_etweak_i     ( '0                ),
     .rd_blen_i       ( axi_rd_blen       ),
     .rd_size_i       ( axi_rd_size       ),
     .rd_id_i         ( axi_rd_id_in      ),
@@ -139,6 +140,7 @@ module cva6_icache_axi_wrapper import ariane_pkg::*; import wt_cache_pkg::*; #(
     .wr_req_i        ( '0                ),
     .wr_gnt_o        (                   ),
     .wr_addr_i       ( '0                ),
+    .wr_etweak_i     ( '0                ),
     .wr_data_i       ( '0                ),
     .wr_be_i         ( '0                ),
     .wr_blen_i       ( '0                ),
diff --git a/src/cache_subsystem/wt_axi_adapter.sv b/src/cache_subsystem/wt_axi_adapter.sv
index 20c638d..8608fcf 100644
--- a/src/cache_subsystem/wt_axi_adapter.sv
+++ b/src/cache_subsystem/wt_axi_adapter.sv
@@ -64,6 +64,7 @@ module wt_axi_adapter import ariane_pkg::*; import wt_cache_pkg::*; #(
   logic axi_wr_valid, axi_rd_valid, axi_rd_rdy, axi_wr_rdy;
   logic axi_rd_lock, axi_wr_lock, axi_rd_exokay, axi_wr_exokay, wr_exokay;
   logic [63:0]                    axi_rd_addr, axi_wr_addr;
+  logic [ariane_pkg::DCACHE_ET_WIDTH-1:0] axi_rd_etweak, axi_wr_etweak;
   logic [$clog2(AxiNumWords)-1:0] axi_rd_blen, axi_wr_blen;
   logic [1:0] axi_rd_size, axi_wr_size;
   logic [$size(axi_resp_i.r.id)-1:0] axi_rd_id_in, axi_wr_id_in, axi_rd_id_out, axi_wr_id_out, wr_id_out;
@@ -118,17 +119,18 @@ module wt_axi_adapter import ariane_pkg::*; import wt_cache_pkg::*; #(
   // request side
   always_comb begin : p_axi_req
     // write channel
-    axi_wr_id_in = arb_idx;
-    axi_wr_data  = dcache_data.data;
-    axi_wr_addr  = {{64-riscv::PLEN{1'b0}}, dcache_data.paddr};
-    axi_wr_size  = dcache_data.size[1:0];
-    axi_wr_req   = 1'b0;
-    axi_wr_blen  = '0;// single word writes
-    axi_wr_be    = '0;
-    axi_wr_lock  = '0;
-    axi_wr_atop  = '0;
-    amo_off_d    = '0;
-    amo_gen_r_d  = amo_gen_r_q;
+    axi_wr_id_in  = arb_idx;
+    axi_wr_data   = dcache_data.data;
+    axi_wr_addr   = {{64-riscv::PLEN{1'b0}}, dcache_data.paddr};
+    axi_wr_etweak = dcache_data.etweak;
+    axi_wr_size   = dcache_data.size[1:0];
+    axi_wr_req    = 1'b0;
+    axi_wr_blen   = '0;// single word writes
+    axi_wr_be     = '0;
+    axi_wr_lock   = '0;
+    axi_wr_atop   = '0;
+    amo_off_d     = '0;
+    amo_gen_r_d   = amo_gen_r_q;
 
     // read channel
     axi_rd_id_in = arb_idx;
@@ -138,14 +140,16 @@ module wt_axi_adapter import ariane_pkg::*; import wt_cache_pkg::*; #(
 
     // arbiter mux
     if (arb_idx) begin
-      axi_rd_addr  = {{64-riscv::PLEN{1'b0}}, dcache_data.paddr};
-      axi_rd_size  = dcache_data.size[1:0];
+      axi_rd_addr   = {{64-riscv::PLEN{1'b0}}, dcache_data.paddr};
+      axi_rd_size   = dcache_data.size[1:0];
+      axi_rd_etweak = dcache_data.etweak;
       if (dcache_data.size[2]) begin
         axi_rd_blen = ariane_pkg::DCACHE_LINE_WIDTH/64-1;
       end
     end else begin
-      axi_rd_addr  = {{64-riscv::PLEN{1'b0}}, icache_data.paddr};
-      axi_rd_size  = 2'b11;// always request 64bit words in case of ifill
+      axi_rd_addr   = {{64-riscv::PLEN{1'b0}}, icache_data.paddr};
+      axi_rd_size   = 2'b11;// always request 64bit words in case of ifill
+      axi_rd_etweak = icache_data.etweak;
       if (!icache_data.nc) begin
         axi_rd_blen = ariane_pkg::ICACHE_LINE_WIDTH/64-1;
       end
@@ -546,6 +550,7 @@ module wt_axi_adapter import ariane_pkg::*; import wt_cache_pkg::*; #(
     .rd_req_i        ( axi_rd_req        ),
     .rd_gnt_o        ( axi_rd_gnt        ),
     .rd_addr_i       ( axi_rd_addr       ),
+    .rd_etweak_i     ( axi_rd_etweak     ),
     .rd_blen_i       ( axi_rd_blen       ),
     .rd_size_i       ( axi_rd_size       ),
     .rd_id_i         ( axi_rd_id_in      ),
@@ -559,6 +564,7 @@ module wt_axi_adapter import ariane_pkg::*; import wt_cache_pkg::*; #(
     .wr_req_i        ( axi_wr_req        ),
     .wr_gnt_o        ( axi_wr_gnt        ),
     .wr_addr_i       ( axi_wr_addr       ),
+    .wr_etweak_i     ( axi_wr_etweak     ),
     .wr_data_i       ( axi_wr_data       ),
     .wr_be_i         ( axi_wr_be         ),
     .wr_blen_i       ( axi_wr_blen       ),
diff --git a/src/cache_subsystem/wt_dcache.sv b/src/cache_subsystem/wt_dcache.sv
index 28e1d4a..e4cbb4c 100644
--- a/src/cache_subsystem/wt_dcache.sv
+++ b/src/cache_subsystem/wt_dcache.sv
@@ -57,6 +57,7 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
   logic                           wr_cl_nc;
   logic [DCACHE_SET_ASSOC-1:0]    wr_cl_we;
   logic [DCACHE_TAG_WIDTH-1:0]    wr_cl_tag;
+  logic [DCACHE_ET_WIDTH-1:0]     wr_cl_etweak;
   logic [DCACHE_CL_IDX_WIDTH-1:0] wr_cl_idx;
   logic [DCACHE_OFFSET_WIDTH-1:0] wr_cl_off;
   logic [DCACHE_LINE_WIDTH-1:0]   wr_cl_data;
@@ -75,6 +76,7 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
   logic [NumPorts-1:0]                          miss_nc;
   logic [NumPorts-1:0]                          miss_we;
   logic [NumPorts-1:0][63:0]                    miss_wdata;
+  logic [NumPorts-1:0][DCACHE_ET_WIDTH-1:0]     miss_wetweak;
   logic [NumPorts-1:0][riscv::PLEN-1:0]         miss_paddr;
   logic [NumPorts-1:0][DCACHE_SET_ASSOC-1:0]    miss_vld_bits;
   logic [NumPorts-1:0][2:0]                     miss_size;
@@ -92,6 +94,7 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
   logic [NumPorts-1:0][DCACHE_CL_IDX_WIDTH-1:0] rd_idx;
   logic [NumPorts-1:0][DCACHE_OFFSET_WIDTH-1:0] rd_off;
   logic [63:0]                                  rd_data;
+  logic [NumPorts-1:0][DCACHE_ET_WIDTH-1:0]     rd_etweak;
   logic [DCACHE_SET_ASSOC-1:0]                  rd_vld_bits;
   logic [DCACHE_SET_ASSOC-1:0]                  rd_hit_oh;
 
@@ -129,6 +132,7 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
     .miss_nc_i          ( miss_nc            ),
     .miss_we_i          ( miss_we            ),
     .miss_wdata_i       ( miss_wdata         ),
+    .miss_wetweak_i     ( miss_wetweak       ),
     .miss_paddr_i       ( miss_paddr         ),
     .miss_vld_bits_i    ( miss_vld_bits      ),
     .miss_size_i        ( miss_size          ),
@@ -147,6 +151,7 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
     .wr_cl_idx_o        ( wr_cl_idx          ),
     .wr_cl_off_o        ( wr_cl_off          ),
     .wr_cl_data_o       ( wr_cl_data         ),
+    .wr_cl_etweak_o     ( wr_cl_etweak       ),
     .wr_cl_data_be_o    ( wr_cl_data_be      ),
     .wr_vld_bits_o      ( wr_vld_bits        ),
     // memory interface
@@ -181,6 +186,7 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
       .miss_ack_i      ( miss_ack      [k] ),
       .miss_we_o       ( miss_we       [k] ),
       .miss_wdata_o    ( miss_wdata    [k] ),
+      .miss_wetweak_o  ( miss_wetweak  [k] ),  
       .miss_vld_bits_o ( miss_vld_bits [k] ),
       .miss_paddr_o    ( miss_paddr    [k] ),
       .miss_nc_o       ( miss_nc       [k] ),
@@ -198,6 +204,7 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
       .rd_tag_only_o   ( rd_tag_only   [k] ),
       .rd_ack_i        ( rd_ack        [k] ),
       .rd_data_i       ( rd_data           ),
+      .rd_etweak_o     ( rd_etweak     [k] ),
       .rd_vld_bits_i   ( rd_vld_bits       ),
       .rd_hit_oh_i     ( rd_hit_oh         )
     );
@@ -227,6 +234,7 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
     .miss_ack_i      ( miss_ack      [2]   ),
     .miss_we_o       ( miss_we       [2]   ),
     .miss_wdata_o    ( miss_wdata    [2]   ),
+    .miss_wetweak_o  ( miss_wetweak  [2]   ),
     .miss_vld_bits_o ( miss_vld_bits [2]   ),
     .miss_paddr_o    ( miss_paddr    [2]   ),
     .miss_nc_o       ( miss_nc       [2]   ),
@@ -242,6 +250,7 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
     .rd_tag_only_o   ( rd_tag_only   [2]   ),
     .rd_ack_i        ( rd_ack        [2]   ),
     .rd_data_i       ( rd_data             ),
+    .rd_etweak_o     ( rd_etweak     [2]   ),
     .rd_vld_bits_i   ( rd_vld_bits         ),
     .rd_hit_oh_i     ( rd_hit_oh           ),
      // incoming invalidations/cache refills
@@ -281,6 +290,7 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
     .rd_vld_bits_o     ( rd_vld_bits        ),
     .rd_hit_oh_o       ( rd_hit_oh          ),
     .rd_data_o         ( rd_data            ),
+    .rd_etweak_i       ( rd_etweak          ),
     // cacheline write port
     .wr_cl_vld_i       ( wr_cl_vld          ),
     .wr_cl_nc_i        ( wr_cl_nc           ),
@@ -291,6 +301,7 @@ module wt_dcache import ariane_pkg::*; import wt_cache_pkg::*; #(
     .wr_cl_data_i      ( wr_cl_data         ),
     .wr_cl_data_be_i   ( wr_cl_data_be      ),
     .wr_vld_bits_i     ( wr_vld_bits        ),
+    .wr_cl_etweak_i    ( wr_cl_etweak       ),
     // single word write port
     .wr_req_i          ( wr_req             ),
     .wr_ack_o          ( wr_ack             ),
diff --git a/src/cache_subsystem/wt_dcache_ctrl.sv b/src/cache_subsystem/wt_dcache_ctrl.sv
index 2254870..0361c83 100644
--- a/src/cache_subsystem/wt_dcache_ctrl.sv
+++ b/src/cache_subsystem/wt_dcache_ctrl.sv
@@ -28,6 +28,7 @@ module wt_dcache_ctrl import ariane_pkg::*; import wt_cache_pkg::*; #(
   input  logic                            miss_ack_i,
   output logic                            miss_we_o,       // unused (set to 0)
   output logic [63:0]                     miss_wdata_o,    // unused (set to 0)
+  output logic [DCACHE_ET_WIDTH-1:0]      miss_wetweak_o,
   output logic [DCACHE_SET_ASSOC-1:0]     miss_vld_bits_o, // valid bits at the missed index
   output logic [riscv::PLEN-1:0]          miss_paddr_o,
   output logic                            miss_nc_o,       // request to I/O space
@@ -45,6 +46,7 @@ module wt_dcache_ctrl import ariane_pkg::*; import wt_cache_pkg::*; #(
   output logic                            rd_tag_only_o,   // set to zero here
   input  logic                            rd_ack_i,
   input  logic [63:0]                     rd_data_i,
+  output  logic [DCACHE_ET_WIDTH-1:0]      rd_etweak_o,
   input  logic [DCACHE_SET_ASSOC-1:0]     rd_vld_bits_i,
   input  logic [DCACHE_SET_ASSOC-1:0]     rd_hit_oh_i
 );
@@ -54,6 +56,7 @@ module wt_dcache_ctrl import ariane_pkg::*; import wt_cache_pkg::*; #(
   state_e state_d, state_q;
 
   logic [DCACHE_TAG_WIDTH-1:0]    address_tag_d, address_tag_q;
+  logic [DCACHE_ET_WIDTH-1:0]     etweak_d, etweak_q;
   logic [DCACHE_CL_IDX_WIDTH-1:0] address_idx_d, address_idx_q;
   logic [DCACHE_OFFSET_WIDTH-1:0] address_off_d, address_off_q;
   logic [DCACHE_SET_ASSOC-1:0]    vld_data_d,    vld_data_q;
@@ -66,6 +69,7 @@ module wt_dcache_ctrl import ariane_pkg::*; import wt_cache_pkg::*; #(
 
   // map address to tag/idx/offset and save
   assign vld_data_d    = (rd_req_q)            ? rd_vld_bits_i                                                      : vld_data_q;
+  assign etweak_d      = (save_tag)            ? req_port_i.etweak_w                                                : etweak_q;
   assign address_tag_d = (save_tag)            ? req_port_i.address_tag                                             : address_tag_q;
   assign address_idx_d = (req_port_o.data_gnt) ? req_port_i.address_index[DCACHE_INDEX_WIDTH-1:DCACHE_OFFSET_WIDTH] : address_idx_q;
   assign address_off_d = (req_port_o.data_gnt) ? req_port_i.address_index[DCACHE_OFFSET_WIDTH-1:0]                  : address_off_q;
@@ -73,24 +77,26 @@ module wt_dcache_ctrl import ariane_pkg::*; import wt_cache_pkg::*; #(
   assign rd_tag_o      = address_tag_d;
   assign rd_idx_o      = address_idx_d;
   assign rd_off_o      = address_off_d;
+  assign rd_etweak_o   = etweak_d;
 
   assign req_port_o.data_rdata = rd_data_i;
 
   // to miss unit
   assign miss_vld_bits_o       = vld_data_q;
   assign miss_paddr_o          = {address_tag_q, address_idx_q, address_off_q};
+  assign miss_wetweak_o        = etweak_q;
   assign miss_size_o           = (miss_nc_o) ? data_size_q : 3'b111;
 
   // noncacheable if request goes to I/O space, or if cache is disabled
   assign miss_nc_o = (~cache_en_i) | (~ariane_pkg::is_inside_cacheable_regions(ArianeCfg, {{{64-DCACHE_TAG_WIDTH}{1'b0}}, address_tag_q, {DCACHE_INDEX_WIDTH{1'b0}}}));
 
 
-  assign miss_we_o    = '0;
-  assign miss_wdata_o = '0;
-  assign miss_id_o    = RdTxId;
-  assign rd_req_d     = rd_req_o;
-  assign rd_ack_d     = rd_ack_i;
-  assign rd_tag_only_o = '0;
+  assign miss_we_o      = '0;
+  assign miss_wdata_o   = '0;
+  assign miss_id_o      = RdTxId;
+  assign rd_req_d       = rd_req_o;
+  assign rd_ack_d       = rd_ack_i;
+  assign rd_tag_only_o  = '0;
 
 ///////////////////////////////////////////////////////
 // main control logic
@@ -232,6 +238,7 @@ module wt_dcache_ctrl import ariane_pkg::*; import wt_cache_pkg::*; #(
     if(!rst_ni) begin
       state_q          <= IDLE;
       address_tag_q    <= '0;
+      etweak_q         <= '0;
       address_idx_q    <= '0;
       address_off_q    <= '0;
       vld_data_q       <= '0;
@@ -241,6 +248,9 @@ module wt_dcache_ctrl import ariane_pkg::*; import wt_cache_pkg::*; #(
     end else begin
       state_q          <= state_d;
       address_tag_q    <= address_tag_d;
+`ifdef RVAS
+      etweak_q         <= etweak_d;
+`endif
       address_idx_q    <= address_idx_d;
       address_off_q    <= address_off_d;
       vld_data_q       <= vld_data_d;
diff --git a/src/cache_subsystem/wt_dcache_mem.sv b/src/cache_subsystem/wt_dcache_mem.sv
index 54833c8..1a7b4f8 100644
--- a/src/cache_subsystem/wt_dcache_mem.sv
+++ b/src/cache_subsystem/wt_dcache_mem.sv
@@ -45,6 +45,8 @@ module wt_dcache_mem import ariane_pkg::*; import wt_cache_pkg::*; #(
   output logic                [DCACHE_SET_ASSOC-1:0]        rd_hit_oh_o,
   output logic                [63:0]                        rd_data_o,
 
+  input  logic                [DCACHE_ET_WIDTH-1:0]         rd_etweak_i,
+
   // only available on port 0, uses address signals of port 0
   input  logic                                              wr_cl_vld_i,
   input  logic                                              wr_cl_nc_i,         // noncacheable access
@@ -55,8 +57,9 @@ module wt_dcache_mem import ariane_pkg::*; import wt_cache_pkg::*; #(
   input  logic                [DCACHE_LINE_WIDTH-1:0]       wr_cl_data_i,
   input  logic                [DCACHE_LINE_WIDTH/8-1:0]     wr_cl_data_be_i,
   input  logic                [DCACHE_SET_ASSOC-1:0]        wr_vld_bits_i,
+  input  logic                [DCACHE_ET_WIDTH-1:0]         wr_cl_etweak_i,
 
-  // separate port for single word write, no tag access
+  // separate port for single word write, no tag and tweak access
   input  logic                [DCACHE_SET_ASSOC-1:0]        wr_req_i,           // write a single word to offset off_i[:3]
   output logic                                              wr_ack_o,
   input  logic                [DCACHE_CL_IDX_WIDTH-1:0]     wr_idx_i,
@@ -80,17 +83,21 @@ module wt_dcache_mem import ariane_pkg::*; import wt_cache_pkg::*; #(
   logic [DCACHE_SET_ASSOC-1:0][63:0]                            rdata_cl;                     // selected word from each cacheline
 
   logic [DCACHE_TAG_WIDTH-1:0]                                  rd_tag;
+  logic [DCACHE_ET_WIDTH-1:0]                                   rd_etweak;
   logic [DCACHE_SET_ASSOC-1:0]                                  vld_req;                      // bit enable for valid regs
   logic                                                         vld_we;                       // valid bits write enable
   logic [DCACHE_SET_ASSOC-1:0]                                  vld_wdata;                    // valid bits to write
   logic [DCACHE_SET_ASSOC-1:0][DCACHE_TAG_WIDTH-1:0]            tag_rdata;                    // these are the tags coming from the tagmem
   logic                       [DCACHE_CL_IDX_WIDTH-1:0]         vld_addr;                     // valid bit
 
+  logic [DCACHE_SET_ASSOC-1:0][DCACHE_ET_WIDTH-1:0]             etweak_rdata;                 // selected enclave tweak from each cacheline
+
   logic [$clog2(NumPorts)-1:0]                                  vld_sel_d, vld_sel_q;
 
   logic [DCACHE_WBUF_DEPTH-1:0]                                 wbuffer_hit_oh;
   logic [7:0]                                                   wbuffer_be;
   logic [63:0]                                                  wbuffer_rdata, rdata;
+  logic [DCACHE_ET_WIDTH-1:0]                                   wbuffer_etweak, retweak;
   logic [63:0]                                                  wbuffer_cmp_addr;
 
   logic                                                         cmp_en_d, cmp_en_q;
@@ -123,6 +130,7 @@ module wt_dcache_mem import ariane_pkg::*; import wt_cache_pkg::*; #(
   assign vld_wdata  = wr_vld_bits_i;
   assign vld_addr   = (wr_cl_vld_i) ? wr_cl_idx_i   : rd_idx_i[vld_sel_d];
   assign rd_tag     = rd_tag_i[vld_sel_q]; //delayed by one cycle
+  assign rd_etweak  = rd_etweak_i[vld_sel_q];
   assign bank_off_d = (wr_cl_vld_i) ? wr_cl_off_i   : rd_off_i[vld_sel_d];
   assign bank_idx_d = (wr_cl_vld_i) ? wr_cl_idx_i   : rd_idx_i[vld_sel_d];
   assign vld_req    = (wr_cl_vld_i) ? wr_cl_we_i    : (rd_acked) ? '1 : '0;
@@ -202,7 +210,11 @@ module wt_dcache_mem import ariane_pkg::*; import wt_cache_pkg::*; #(
   // hit generation
   for (genvar i=0;i<DCACHE_SET_ASSOC;i++) begin : gen_tag_cmpsel
     // tag comparison of ways >0
+`ifdef RVAS
+    assign rd_hit_oh_o[i] = (rd_tag == tag_rdata[i]) & rd_vld_bits_o[i]  & cmp_en_q & (rd_etweak[i] == etweak_rdata[i]);
+`else
     assign rd_hit_oh_o[i] = (rd_tag == tag_rdata[i]) & rd_vld_bits_o[i]  & cmp_en_q;
+`endif
     // byte offset mux of ways >0
     assign rdata_cl[i] = bank_rdata[bank_off_q[DCACHE_OFFSET_WIDTH-1:3]][i];
   end
@@ -227,8 +239,9 @@ module wt_dcache_mem import ariane_pkg::*; import wt_cache_pkg::*; #(
     .empty_o (              )
   );
 
-  assign wbuffer_rdata = wbuffer_data_i[wbuffer_hit_idx].data;
-  assign wbuffer_be    = (|wbuffer_hit_oh) ? wbuffer_data_i[wbuffer_hit_idx].valid : '0;
+  assign wbuffer_rdata  = wbuffer_data_i[wbuffer_hit_idx].data;
+  assign wbuffer_etweak = wbuffer_data_i[wbuffer_hit_idx].wetweak;
+  assign wbuffer_be     = (|wbuffer_hit_oh) ? wbuffer_data_i[wbuffer_hit_idx].valid : '0;
 
   if (Axi64BitCompliant) begin : gen_axi_off
       assign wr_cl_off     = (wr_cl_nc_i) ? '0 : wr_cl_off_i[DCACHE_OFFSET_WIDTH-1:3];
@@ -249,6 +262,7 @@ module wt_dcache_mem import ariane_pkg::*; import wt_cache_pkg::*; #(
 ///////////////////////////////////////////////////////
 
   logic [DCACHE_TAG_WIDTH:0] vld_tag_rdata [DCACHE_SET_ASSOC-1:0];
+  logic [DCACHE_ET_WIDTH-1:0] vld_etweak_rdata [DCACHE_SET_ASSOC-1:0];
 
   for (genvar k = 0; k < DCACHE_NUM_BANKS; k++) begin : gen_data_banks
     // Data RAM
@@ -267,6 +281,29 @@ module wt_dcache_mem import ariane_pkg::*; import wt_cache_pkg::*; #(
     );
   end
 
+  for (genvar i = 0; i < DCACHE_SET_ASSOC; i++) begin : gen_etweak_srams
+`ifdef RVAS
+    assign etweak_rdata[i]  = vld_etweak_rdata[i];
+    // ETweak RAM
+    sram #(
+      .DATA_WIDTH ( ariane_pkg::DCACHE_ET_WIDTH       ),
+      .NUM_WORDS  ( wt_cache_pkg::DCACHE_NUM_WORDS    )
+    ) i_etweak_sram (
+
+      .clk_i     ( clk_i               ),
+      .rst_ni    ( rst_ni              ),
+      .req_i     ( vld_req[i]          ),
+      .we_i      ( vld_we              ),
+      .addr_i    ( vld_addr            ),
+      .wdata_i   ( wr_cl_etweak_i      ),
+      .be_i      ( '1                  ),
+      .rdata_o   ( vld_etweak_rdata[i] )
+    );
+  `else
+    assign etweak_rdata  = '0;
+  `endif
+  end
+
   for (genvar i = 0; i < DCACHE_SET_ASSOC; i++) begin : gen_tag_srams
 
     assign tag_rdata[i]     = vld_tag_rdata[i][DCACHE_TAG_WIDTH-1:0];
diff --git a/src/cache_subsystem/wt_dcache_missunit.sv b/src/cache_subsystem/wt_dcache_missunit.sv
index ae1f7a1..863ba84 100644
--- a/src/cache_subsystem/wt_dcache_missunit.sv
+++ b/src/cache_subsystem/wt_dcache_missunit.sv
@@ -38,6 +38,7 @@ module wt_dcache_missunit import ariane_pkg::*; import wt_cache_pkg::*; #(
   input  logic [NumPorts-1:0]                        miss_nc_i,
   input  logic [NumPorts-1:0]                        miss_we_i,
   input  logic [NumPorts-1:0][63:0]                  miss_wdata_i,
+  input  logic [NumPorts-1:0][DCACHE_ET_WIDTH-1:0]   miss_wetweak_i,
   input  logic [NumPorts-1:0][riscv::PLEN-1:0]       miss_paddr_i,
   input  logic [NumPorts-1:0][DCACHE_SET_ASSOC-1:0]  miss_vld_bits_i,
   input  logic [NumPorts-1:0][2:0]                   miss_size_i,
@@ -58,6 +59,7 @@ module wt_dcache_missunit import ariane_pkg::*; import wt_cache_pkg::*; #(
   output logic [DCACHE_CL_IDX_WIDTH-1:0]             wr_cl_idx_o,
   output logic [DCACHE_OFFSET_WIDTH-1:0]             wr_cl_off_o,
   output logic [DCACHE_LINE_WIDTH-1:0]               wr_cl_data_o,
+  output logic [DCACHE_ET_WIDTH-1:0]                 wr_cl_etweak_o,
   output logic [DCACHE_LINE_WIDTH/8-1:0]             wr_cl_data_be_o,
   output logic [DCACHE_SET_ASSOC-1:0]                wr_vld_bits_o,
   // memory interface
@@ -74,13 +76,14 @@ module wt_dcache_missunit import ariane_pkg::*; import wt_cache_pkg::*; #(
 
   // MSHR for reads
   typedef struct packed {
-    logic [riscv::PLEN-1:0]              paddr   ;
-    logic [2:0]                          size    ;
-    logic [DCACHE_SET_ASSOC-1:0]         vld_bits;
-    logic [CACHE_ID_WIDTH-1:0]          id      ;
-    logic                                nc      ;
-    logic [$clog2(DCACHE_SET_ASSOC)-1:0] repl_way;
-    logic [$clog2(NumPorts)-1:0]        miss_port_idx;
+    logic [riscv::PLEN-1:0]                 paddr   ;
+    logic [2:0]                             size    ;
+    logic [DCACHE_SET_ASSOC-1:0]            vld_bits;
+    logic [CACHE_ID_WIDTH-1:0]              id      ;
+    logic                                   nc      ;
+    logic [$clog2(DCACHE_SET_ASSOC)-1:0]    repl_way;
+    logic [$clog2(NumPorts)-1:0]            miss_port_idx;
+    logic [ariane_pkg::DCACHE_ET_WIDTH-1:0] etweak;
   } mshr_t;
 
   mshr_t mshr_d, mshr_q;
@@ -169,6 +172,7 @@ module wt_dcache_missunit import ariane_pkg::*; import wt_cache_pkg::*; #(
   assign mshr_d.nc              = (mshr_allocate)  ? miss_nc_i      [miss_port_idx] : mshr_q.nc;
   assign mshr_d.repl_way        = (mshr_allocate)  ? repl_way                       : mshr_q.repl_way;
   assign mshr_d.miss_port_idx   = (mshr_allocate)  ? miss_port_idx                  : mshr_q.miss_port_idx;
+  assign mshr_d.etweak          = (mshr_allocate)  ? miss_wetweak_i [miss_port_idx] : mshr_q.etweak;
 
   // currently we only have one outstanding read TX, hence an incoming load clears the MSHR
   assign mshr_vld_d = (mshr_allocate) ? 1'b1 :
@@ -225,6 +229,7 @@ module wt_dcache_missunit import ariane_pkg::*; import wt_cache_pkg::*; #(
   assign mem_data_o.data   = (amo_sel) ? amo_data            : miss_wdata_i[miss_port_idx];
   assign mem_data_o.size   = (amo_sel) ? amo_req_i.size      : miss_size_i [miss_port_idx];
   assign mem_data_o.amo_op = (amo_sel) ? amo_req_i.amo_op    : AMO_NONE;
+  assign mem_data_o.etweak = (amo_sel) ? '0                  : miss_wetweak_i[miss_port_idx];
 
   assign tmp_paddr         = (amo_sel) ? amo_req_i.operand_a[riscv::PLEN-1:0] : miss_paddr_i[miss_port_idx];
   assign mem_data_o.paddr  = wt_cache_pkg::paddrSizeAlign(tmp_paddr, mem_data_o.size);
@@ -339,6 +344,7 @@ module wt_dcache_missunit import ariane_pkg::*; import wt_cache_pkg::*; #(
   assign wr_cl_tag_o     = mshr_q.paddr[DCACHE_TAG_WIDTH+DCACHE_INDEX_WIDTH-1:DCACHE_INDEX_WIDTH];
   assign wr_cl_off_o     = mshr_q.paddr[DCACHE_OFFSET_WIDTH-1:0];
   assign wr_cl_data_o    = mem_rtrn_i.data;
+  assign wr_cl_etweak_o  = mshr_q.etweak;
   assign wr_cl_data_be_o = (cl_write_en) ? '1 : '0;// we only write complete cachelines into the memory
 
   // only non-NC responses write to the cache
diff --git a/src/cache_subsystem/wt_dcache_wbuffer.sv b/src/cache_subsystem/wt_dcache_wbuffer.sv
index e87d8d8..842b6ad 100644
--- a/src/cache_subsystem/wt_dcache_wbuffer.sv
+++ b/src/cache_subsystem/wt_dcache_wbuffer.sv
@@ -67,6 +67,7 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
   output logic                               miss_req_o,
   output logic                               miss_we_o,       // always 1 here
   output logic [63:0]                        miss_wdata_o,
+  output logic [DCACHE_ET_WIDTH-1:0]         miss_wetweak_o,
   output logic [DCACHE_SET_ASSOC-1:0]        miss_vld_bits_o, // unused here (set to 0)
   output logic                               miss_nc_o,       // request to I/O space
   output logic [2:0]                         miss_size_o,     //
@@ -81,12 +82,13 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
   output logic                               rd_req_o,        // read the word at offset off_i[:3] in all ways
   output logic                               rd_tag_only_o,   // set to 1 here as we do not have to read the data arrays
   input  logic                               rd_ack_i,
-  input logic  [63:0]                        rd_data_i,       // unused
-  input logic  [DCACHE_SET_ASSOC-1:0]        rd_vld_bits_i,   // unused
-  input logic  [DCACHE_SET_ASSOC-1:0]        rd_hit_oh_i,
+  input  logic  [63:0]                       rd_data_i,       // unused
+  output logic  [DCACHE_ET_WIDTH-1:0]        rd_etweak_o,    
+  input  logic  [DCACHE_SET_ASSOC-1:0]       rd_vld_bits_i,   // unused
+  input  logic  [DCACHE_SET_ASSOC-1:0]       rd_hit_oh_i,
   // cacheline writes
-  input logic                                wr_cl_vld_i,
-  input logic [DCACHE_CL_IDX_WIDTH-1:0]      wr_cl_idx_i,
+  input  logic                                wr_cl_vld_i,
+  input  logic [DCACHE_CL_IDX_WIDTH-1:0]      wr_cl_idx_i,
   // cache word write interface
   output logic [DCACHE_SET_ASSOC-1:0]        wr_req_o,
   input  logic                               wr_ack_i,
@@ -106,6 +108,7 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
   logic     [DCACHE_WBUF_DEPTH-1:0]         dirty;
   logic     [DCACHE_WBUF_DEPTH-1:0]         tocheck;
   logic     [DCACHE_WBUF_DEPTH-1:0]         wbuffer_hit_oh, inval_hit;
+  logic     [DCACHE_WBUF_DEPTH-1:0]         etweak_miss;
   logic     [DCACHE_WBUF_DEPTH-1:0][7:0]    bdirty;
 
   logic [$clog2(DCACHE_WBUF_DEPTH)-1:0] next_ptr, dirty_ptr, hit_ptr, wr_ptr, check_ptr_d, check_ptr_q, check_ptr_q1, rtrn_ptr;
@@ -115,6 +118,7 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
   logic [7:0] tx_be;
   logic [riscv::PLEN-1:0] wr_paddr, rd_paddr;
   logic [DCACHE_TAG_WIDTH-1:0] rd_tag_d, rd_tag_q;
+  logic [DCACHE_ET_WIDTH-1:0]  rd_etweak_d, rd_etweak_q;
   logic [DCACHE_SET_ASSOC-1:0] rd_hit_oh_d, rd_hit_oh_q;
   logic check_en_d, check_en_q, check_en_q1;
   logic full, dirty_rd_en, rdy;
@@ -175,6 +179,8 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
   assign miss_paddr_o = {wbuffer_dirty_mux.wtag, bdirty_off};
   assign miss_id_o    = tx_id;
 
+  assign miss_wetweak_o = wbuffer_dirty_mux.wetweak;
+
   // is there any dirty word to be transmitted, and is there a free TX slot?
   assign miss_req_o = (|dirty) && free_tx_slots;
 
@@ -269,16 +275,18 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
 // cache readout & update
 ///////////////////////////////////////////////////////
 
-  assign rd_tag_d   = rd_paddr>>DCACHE_INDEX_WIDTH;
+  assign rd_tag_d    = rd_paddr>>DCACHE_INDEX_WIDTH;
+  assign rd_etweak_d = wbuffer_check_mux.wetweak;
 
   // trigger TAG readout in cache
   assign rd_tag_only_o = 1'b1;
-  assign rd_paddr   = wbuffer_check_mux.wtag<<3;
-  assign rd_req_o   = |tocheck;
-  assign rd_tag_o   = rd_tag_q;//delay by one cycle
-  assign rd_idx_o   = rd_paddr[DCACHE_INDEX_WIDTH-1:DCACHE_OFFSET_WIDTH];
-  assign rd_off_o   = rd_paddr[DCACHE_OFFSET_WIDTH-1:0];
-  assign check_en_d = rd_req_o & rd_ack_i;
+  assign rd_paddr    = wbuffer_check_mux.wtag<<3;
+  assign rd_req_o    = |tocheck;
+  assign rd_tag_o    = rd_tag_q;//delay by one cycle
+  assign rd_etweak_o = rd_etweak_q;
+  assign rd_idx_o    = rd_paddr[DCACHE_INDEX_WIDTH-1:DCACHE_OFFSET_WIDTH];
+  assign rd_off_o    = rd_paddr[DCACHE_OFFSET_WIDTH-1:0];
+  assign check_en_d  = rd_req_o & rd_ack_i;
 
   // cache update port
   assign rtrn_ptr     = tx_stat_q[rtrn_id].ptr;
@@ -290,7 +298,6 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
   assign wr_off_o     = wr_paddr[DCACHE_OFFSET_WIDTH-1:0];
   assign wr_data_o    = wbuffer_q[rtrn_ptr].data;
 
-
 ///////////////////////////////////////////////////////
 // readout of status bits, index calculation
 ///////////////////////////////////////////////////////
@@ -314,6 +321,8 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
     assign valid[k]          = |wbuffer_q[k].valid;
     assign wbuffer_hit_oh[k] = valid[k] & (wbuffer_q[k].wtag == {req_port_i.address_tag, req_port_i.address_index[DCACHE_INDEX_WIDTH-1:3]});
 
+    assign etweak_miss[k]    = valid[k] & (wbuffer_q[k].wtag == {req_port_i.address_tag, req_port_i.address_index[DCACHE_INDEX_WIDTH-1:3]})
+                                        & (wbuffer_q[k].wetweak != req_port_i.etweak_w);
     // checks if an invalidation/cache refill hits a particular word
     // note: an invalidation can hit multiple words!
     // need to respect previous cycle, too, since we add a cycle of latency to the rd_hit_oh_i signal...
@@ -389,6 +398,7 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
 
   assign req_port_o.data_rvalid = '0;
   assign req_port_o.data_rdata  = '0;
+  assign req_port_o.etweak_r    = '0;
 
   assign rd_hit_oh_d = rd_hit_oh_i;
  
@@ -422,6 +432,13 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
       end
     end
 
+    for (int k=0; k<DCACHE_WBUF_DEPTH; k++) begin
+      if (etweak_miss[k]) begin
+        wbuffer_d[k].valid = 1'b0;
+        wbuffer_d[k].dirty = 1'b0;
+      end
+    end
+
     // once TX write response came back, we can clear the TX block. if it was not dirty, we
     // can completely evict it - otherwise we have to leave it there for retransmission
     if (evict) begin
@@ -467,7 +484,7 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
 
         wbuffer_d[wr_ptr].checked = 1'b0;
         wbuffer_d[wr_ptr].wtag    = {req_port_i.address_tag, req_port_i.address_index[DCACHE_INDEX_WIDTH-1:3]};
-
+        wbuffer_d[wr_ptr].wetweak = req_port_i.etweak_w;
         // mark bytes as dirty
         for (int k=0; k<8; k++) begin
           if (req_port_i.data_be[k]) begin
@@ -495,6 +512,7 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
       check_en_q    <= '0;
       check_en_q1   <= '0;
       rd_tag_q      <= '0;
+      rd_etweak_q   <= '0;
       rd_hit_oh_q   <= '0;
       wr_cl_vld_q   <= '0;
       wr_cl_idx_q   <= '0;
@@ -507,6 +525,7 @@ module wt_dcache_wbuffer import ariane_pkg::*; import wt_cache_pkg::*; #(
       check_en_q    <= check_en_d;
       check_en_q1   <= check_en_q;
       rd_tag_q      <= rd_tag_d;
+      rd_etweak_q   <= rd_etweak_d;
       rd_hit_oh_q   <= rd_hit_oh_d;
       wr_cl_vld_q   <= wr_cl_vld_d;
       wr_cl_idx_q   <= wr_cl_idx_d;
diff --git a/src/csr_regfile.sv b/src/csr_regfile.sv
index 628074f..68ee181 100644
--- a/src/csr_regfile.sv
+++ b/src/csr_regfile.sv
@@ -60,6 +60,7 @@ module csr_regfile import ariane_pkg::*; #(
     output logic                  en_translation_o,           // enable VA translation
     output logic                  en_ld_st_translation_o,     // enable VA translation for load and stores
     output riscv::priv_lvl_t      ld_st_priv_lvl_o,           // Privilege level at which load and stores should happen
+    output riscv::enclave_t       enclave_config_o,           // Configuration for the enclave from CSRs
     output logic                  sum_o,
     output logic                  mxr_o,
     output logic[riscv::PPNW-1:0] satp_ppn_o,
@@ -134,6 +135,10 @@ module csr_regfile import ariane_pkg::*; #(
     riscv::xlen_t dcache_q,    dcache_d;
     riscv::xlen_t icache_q,    icache_d;
 
+    // Z extension
+    riscv::enclave_t    E_q,          E_d;
+    assign enclave_config_o = E_q;
+
     logic        wfi_d,       wfi_q;
 
     riscv::xlen_t cycle_q,     cycle_d;
@@ -303,6 +308,98 @@ module csr_regfile import ariane_pkg::*; #(
                 riscv::CSR_PMPADDR13:        csr_rdata = {10'b0, pmpaddr_q[13][riscv::PLEN-3:1], (pmpcfg_q[13].addr_mode[1] == 1'b1 ? 1'b1 : 1'b0)};
                 riscv::CSR_PMPADDR14:        csr_rdata = {10'b0, pmpaddr_q[14][riscv::PLEN-3:1], (pmpcfg_q[14].addr_mode[1] == 1'b1 ? 1'b1 : 1'b0)};
                 riscv::CSR_PMPADDR15:        csr_rdata = {10'b0, pmpaddr_q[15][riscv::PLEN-3:1], (pmpcfg_q[15].addr_mode[1] == 1'b1 ? 1'b1 : 1'b0)};
+
+`ifdef RVAS
+                // Z extension:
+                riscv::CSR_E_DBG_SRANGE_VBASE,
+                riscv::CSR_E_SRANGE_VBASE:                      csr_rdata = E_q.srange.vbase;
+                riscv::CSR_E_DBG_SRANGE_VSIZE,
+                riscv::CSR_E_SRANGE_VSIZE:                      csr_rdata = E_q.srange.vsize;
+                riscv::CSR_E_DBG_SSID_0,
+                riscv::CSR_E_SSID_0:                            csr_rdata = E_q.ssid_0;
+                riscv::CSR_E_DBG_SSID_1,
+                riscv::CSR_E_SSID_1:                            csr_rdata = E_q.ssid_1;
+                riscv::CSR_E_DBG_MRANGE_VBASE,
+                riscv::CSR_E_MRANGE_VBASE:                      csr_rdata = E_q.mrange.vbase;
+                riscv::CSR_E_DBG_MRANGE_VSIZE,
+                riscv::CSR_E_MRANGE_VSIZE:                      csr_rdata = E_q.mrange.vsize;
+                riscv::CSR_E_DBG_MSID_0,
+                riscv::CSR_E_MSID_0:                            csr_rdata = E_q.rtid;
+                riscv::CSR_E_DBG_MSID_1,
+                riscv::CSR_E_MSID_1:                            csr_rdata = E_q.sid_shcode;
+                riscv::CSR_E_DBG_LTWEAK,
+                riscv::CSR_E_LTWEAK: begin
+                    csr_rdata[50:48] = E_q.ltweak.xrange_map_mask;
+                    csr_rdata[47:45] = E_q.ltweak.xrange_map;
+                    csr_rdata[44:43] = E_q.ltweak.prv_lvl_mask;
+                    csr_rdata[42:41] = E_q.ltweak.prv_lvl;
+                    csr_rdata[40:40] = E_q.ltweak.tweak_en;
+                    csr_rdata[39:30] = E_q.ltweak.pte_msb_mask;
+                    csr_rdata[29:20] = E_q.ltweak.pte_msb;
+                    csr_rdata[19:10] = E_q.ltweak.pte_lsb_mask;
+                    csr_rdata[ 9: 0] = E_q.ltweak.pte_lsb;
+                end
+                riscv::CSR_E_DBG_LTWEAK_XRANGE_MAP,
+                riscv::CSR_E_LTWEAK_XRANGE_MAP:                 csr_rdata = E_q.ltweak.xrange_map;
+                riscv::CSR_E_DBG_LTWEAK_XRANGE_MAP_MASK,
+                riscv::CSR_E_LTWEAK_XRANGE_MAP_MASK:            csr_rdata = E_q.ltweak.xrange_map_mask;
+                riscv::CSR_E_DBG_LTWEAK_PRV_LVL,
+                riscv::CSR_E_LTWEAK_PRV_LVL:                    csr_rdata = E_q.ltweak.prv_lvl;
+                riscv::CSR_E_DBG_LTWEAK_PRV_LVL_MASK,
+                riscv::CSR_E_LTWEAK_PRV_LVL_MASK:               csr_rdata = E_q.ltweak.prv_lvl_mask;
+                riscv::CSR_E_DBG_LTWEAK_TWEAK_EN,
+                riscv::CSR_E_LTWEAK_TWEAK_EN:                   csr_rdata = E_q.ltweak.tweak_en;
+                riscv::CSR_E_DBG_LTWEAK_PTE_MSB,
+                riscv::CSR_E_LTWEAK_PTE_MSB:                    csr_rdata = E_q.ltweak.pte_msb;
+                riscv::CSR_E_DBG_LTWEAK_PTE_MSB_MASK,
+                riscv::CSR_E_LTWEAK_PTE_MSB_MASK:               csr_rdata = E_q.ltweak.pte_msb_mask;
+                riscv::CSR_E_DBG_LTWEAK_PTE_LSB,
+                riscv::CSR_E_LTWEAK_PTE_LSB:                    csr_rdata = E_q.ltweak.pte_lsb;
+                riscv::CSR_E_DBG_LTWEAK_PTE_LSB_MASK,
+                riscv::CSR_E_LTWEAK_PTE_LSB_MASK:               csr_rdata = E_q.ltweak.pte_lsb_mask;
+                riscv::CSR_E_DBG_STWEAK,
+                riscv::CSR_E_STWEAK: begin
+                    csr_rdata[50:48] = E_q.stweak.xrange_map_mask;
+                    csr_rdata[47:45] = E_q.stweak.xrange_map;
+                    csr_rdata[44:43] = E_q.stweak.prv_lvl_mask;
+                    csr_rdata[42:41] = E_q.stweak.prv_lvl;
+                    csr_rdata[40:40] = E_q.stweak.tweak_en;
+                    csr_rdata[39:30] = E_q.stweak.pte_msb_mask;
+                    csr_rdata[29:20] = E_q.stweak.pte_msb;
+                    csr_rdata[19:10] = E_q.stweak.pte_lsb_mask;
+                    csr_rdata[ 9: 0] = E_q.stweak.pte_lsb;
+                end
+                riscv::CSR_E_DBG_STWEAK_XRANGE_MAP,
+                riscv::CSR_E_STWEAK_XRANGE_MAP:                 csr_rdata = E_q.stweak.xrange_map;
+                riscv::CSR_E_DBG_STWEAK_XRANGE_MAP_MASK,
+                riscv::CSR_E_STWEAK_XRANGE_MAP_MASK:            csr_rdata = E_q.stweak.xrange_map_mask;
+                riscv::CSR_E_DBG_STWEAK_PRV_LVL,
+                riscv::CSR_E_STWEAK_PRV_LVL:                    csr_rdata = E_q.stweak.prv_lvl;
+                riscv::CSR_E_DBG_STWEAK_PRV_LVL_MASK,
+                riscv::CSR_E_STWEAK_PRV_LVL_MASK:               csr_rdata = E_q.stweak.prv_lvl_mask;
+                riscv::CSR_E_DBG_STWEAK_TWEAK_EN,
+                riscv::CSR_E_STWEAK_TWEAK_EN:                   csr_rdata = E_q.stweak.tweak_en;
+                riscv::CSR_E_DBG_STWEAK_PTE_MSB,
+                riscv::CSR_E_STWEAK_PTE_MSB:                    csr_rdata = E_q.stweak.pte_msb;
+                riscv::CSR_E_DBG_STWEAK_PTE_MSB_MASK,
+                riscv::CSR_E_STWEAK_PTE_MSB_MASK:               csr_rdata = E_q.stweak.pte_msb_mask;
+                riscv::CSR_E_DBG_STWEAK_PTE_LSB,
+                riscv::CSR_E_STWEAK_PTE_LSB:                    csr_rdata = E_q.stweak.pte_lsb;
+                riscv::CSR_E_DBG_STWEAK_PTE_LSB_MASK,
+                riscv::CSR_E_STWEAK_PTE_LSB_MASK:               csr_rdata = E_q.stweak.pte_lsb_mask;
+                riscv::CSR_E_DBG_STATUS,
+                riscv::CSR_E_STATUS:                            csr_rdata = E_q.status;
+                riscv::CSR_E_DBG_SECS,
+                riscv::CSR_E_SECS:                              csr_rdata = E_q.secs;
+                riscv::CSR_E_DBG_TCS,
+                riscv::CSR_E_TCS:                               csr_rdata = E_q.tcs;
+                riscv::CSR_E_URANGE_VBASE:                      csr_rdata = E_q.urange.vbase;
+                riscv::CSR_E_URANGE_VSIZE:                      csr_rdata = E_q.urange.vsize;
+                riscv::CSR_E_USID_0:                            csr_rdata = E_q.sesskeyl;
+                riscv::CSR_E_USID_1:                            csr_rdata = E_q.sesskeyh;
+                riscv::CSR_E_DBG_CONTROL:                       csr_rdata = E_q.dbg_control;
+`endif
+
                 default: read_access_exception = 1'b1;
             endcase
         end
@@ -392,6 +489,10 @@ module csr_regfile import ariane_pkg::*; #(
         pmpcfg_d                = pmpcfg_q;
         pmpaddr_d               = pmpaddr_q;
 
+
+        // Z extension
+        E_d                     = E_q;
+
         // check for correct access rights and that we are writing
         if (csr_we) begin
             unique case (csr_addr.address)
@@ -623,6 +724,98 @@ module csr_regfile import ariane_pkg::*; #(
                 riscv::CSR_PMPADDR13:  if (!pmpcfg_q[13].locked && !(pmpcfg_q[14].locked && pmpcfg_q[14].addr_mode == riscv::TOR))  pmpaddr_d[13]  = csr_wdata[riscv::PLEN-3:0];
                 riscv::CSR_PMPADDR14:  if (!pmpcfg_q[14].locked && !(pmpcfg_q[15].locked && pmpcfg_q[15].addr_mode == riscv::TOR))  pmpaddr_d[14]  = csr_wdata[riscv::PLEN-3:0];
                 riscv::CSR_PMPADDR15:  if (!pmpcfg_q[15].locked)  pmpaddr_d[15]  = csr_wdata[riscv::PLEN-3:0];
+
+`ifdef RVAS
+                // Z extension:
+                riscv::CSR_E_DBG_SRANGE_VBASE,
+                riscv::CSR_E_SRANGE_VBASE:                    E_d.srange.vbase = csr_wdata;
+                riscv::CSR_E_DBG_SRANGE_VSIZE,
+                riscv::CSR_E_SRANGE_VSIZE:                    E_d.srange.vsize = csr_wdata;
+                riscv::CSR_E_DBG_SSID_0,
+                riscv::CSR_E_SSID_0:                          E_d.ssid_0 = csr_wdata;
+                riscv::CSR_E_DBG_SSID_1,
+                riscv::CSR_E_SSID_1:                          E_d.ssid_1 = csr_wdata;
+                riscv::CSR_E_DBG_MRANGE_VBASE,
+                riscv::CSR_E_MRANGE_VBASE:                    E_d.mrange.vbase = csr_wdata;
+                riscv::CSR_E_DBG_MRANGE_VSIZE,
+                riscv::CSR_E_MRANGE_VSIZE:                    E_d.mrange.vsize = csr_wdata;
+                riscv::CSR_E_DBG_MSID_0,
+                riscv::CSR_E_MSID_0:                          E_d.rtid = csr_wdata;
+                riscv::CSR_E_DBG_MSID_1,
+                riscv::CSR_E_MSID_1:                          E_d.sid_shcode = csr_wdata;
+                riscv::CSR_E_DBG_LTWEAK,
+                riscv::CSR_E_LTWEAK: begin
+                    E_d.ltweak.xrange_map_mask  = csr_wdata[50:48];
+                    E_d.ltweak.xrange_map       = csr_wdata[47:45];
+                    E_d.ltweak.prv_lvl_mask     = csr_wdata[44:43];
+                    E_d.ltweak.prv_lvl          = riscv::priv_lvl_t'(csr_wdata[42:41]);
+                    E_d.ltweak.tweak_en         = csr_wdata[40];
+                    E_d.ltweak.pte_msb_mask     = csr_wdata[39:30];
+                    E_d.ltweak.pte_msb          = csr_wdata[29:20];
+                    E_d.ltweak.pte_lsb_mask     = csr_wdata[19:10];
+                    E_d.ltweak.pte_lsb          = csr_wdata[ 9: 0];
+                end
+                riscv::CSR_E_DBG_LTWEAK_XRANGE_MAP,
+                riscv::CSR_E_LTWEAK_XRANGE_MAP:               E_d.ltweak.xrange_map = csr_wdata;
+                riscv::CSR_E_DBG_LTWEAK_XRANGE_MAP_MASK,
+                riscv::CSR_E_LTWEAK_XRANGE_MAP_MASK:          E_d.ltweak.xrange_map_mask = csr_wdata;
+                riscv::CSR_E_DBG_LTWEAK_PRV_LVL,
+                riscv::CSR_E_LTWEAK_PRV_LVL:                  E_d.ltweak.prv_lvl = riscv::priv_lvl_t'(csr_wdata);
+                riscv::CSR_E_DBG_LTWEAK_PRV_LVL_MASK,
+                riscv::CSR_E_LTWEAK_PRV_LVL_MASK:             E_d.ltweak.prv_lvl_mask = csr_wdata;
+                riscv::CSR_E_DBG_LTWEAK_TWEAK_EN,
+                riscv::CSR_E_LTWEAK_TWEAK_EN:                 E_d.ltweak.tweak_en = csr_wdata;
+                riscv::CSR_E_DBG_LTWEAK_PTE_MSB,
+                riscv::CSR_E_LTWEAK_PTE_MSB:                  E_d.ltweak.pte_msb = csr_wdata;
+                riscv::CSR_E_DBG_LTWEAK_PTE_MSB_MASK,
+                riscv::CSR_E_LTWEAK_PTE_MSB_MASK:             E_d.ltweak.pte_msb_mask = csr_wdata;
+                riscv::CSR_E_DBG_LTWEAK_PTE_LSB,
+                riscv::CSR_E_LTWEAK_PTE_LSB:                  E_d.ltweak.pte_lsb = csr_wdata;
+                riscv::CSR_E_DBG_LTWEAK_PTE_LSB_MASK,
+                riscv::CSR_E_LTWEAK_PTE_LSB_MASK:             E_d.ltweak.pte_lsb_mask = csr_wdata;
+                riscv::CSR_E_DBG_STWEAK,
+                riscv::CSR_E_STWEAK: begin
+                    E_d.stweak.xrange_map_mask  = csr_wdata[50:48];
+                    E_d.stweak.xrange_map       = csr_wdata[47:45];
+                    E_d.stweak.prv_lvl_mask     = csr_wdata[44:43];
+                    E_d.stweak.prv_lvl          = riscv::priv_lvl_t'(csr_wdata[42:41]);
+                    E_d.stweak.tweak_en         = csr_wdata[40];
+                    E_d.stweak.pte_msb_mask     = csr_wdata[39:30];
+                    E_d.stweak.pte_msb          = csr_wdata[29:20];
+                    E_d.stweak.pte_lsb_mask     = csr_wdata[19:10];
+                    E_d.stweak.pte_lsb          = csr_wdata[ 9: 0];
+                end
+                riscv::CSR_E_DBG_STWEAK_XRANGE_MAP,
+                riscv::CSR_E_STWEAK_XRANGE_MAP:               E_d.stweak.xrange_map = csr_wdata;
+                riscv::CSR_E_DBG_STWEAK_XRANGE_MAP_MASK,
+                riscv::CSR_E_STWEAK_XRANGE_MAP_MASK:          E_d.stweak.xrange_map_mask = csr_wdata;
+                riscv::CSR_E_DBG_STWEAK_PRV_LVL,
+                riscv::CSR_E_STWEAK_PRV_LVL:                  E_d.stweak.prv_lvl = riscv::priv_lvl_t'(csr_wdata);
+                riscv::CSR_E_DBG_STWEAK_PRV_LVL_MASK,
+                riscv::CSR_E_STWEAK_PRV_LVL_MASK:             E_d.stweak.prv_lvl_mask = csr_wdata;
+                riscv::CSR_E_DBG_STWEAK_TWEAK_EN,
+                riscv::CSR_E_STWEAK_TWEAK_EN:                 E_d.stweak.tweak_en = csr_wdata;
+                riscv::CSR_E_DBG_STWEAK_PTE_MSB,
+                riscv::CSR_E_STWEAK_PTE_MSB:                  E_d.stweak.pte_msb = csr_wdata;
+                riscv::CSR_E_DBG_STWEAK_PTE_MSB_MASK,
+                riscv::CSR_E_STWEAK_PTE_MSB_MASK:             E_d.stweak.pte_msb_mask = csr_wdata;
+                riscv::CSR_E_DBG_STWEAK_PTE_LSB,
+                riscv::CSR_E_STWEAK_PTE_LSB:                  E_d.stweak.pte_lsb = csr_wdata;
+                riscv::CSR_E_DBG_STWEAK_PTE_LSB_MASK,
+                riscv::CSR_E_STWEAK_PTE_LSB_MASK:             E_d.stweak.pte_lsb_mask = csr_wdata;
+                riscv::CSR_E_DBG_STATUS,
+                riscv::CSR_E_STATUS:                          E_d.status = csr_wdata; 
+                riscv::CSR_E_DBG_SECS,
+                riscv::CSR_E_SECS:                            E_d.secs = csr_wdata;
+                riscv::CSR_E_DBG_TCS,
+                riscv::CSR_E_TCS:                             E_d.tcs = csr_wdata;
+                riscv::CSR_E_URANGE_VBASE:                    E_d.urange.vbase = csr_wdata;
+                riscv::CSR_E_URANGE_VSIZE:                    E_d.urange.vsize = csr_wdata;
+                riscv::CSR_E_USID_0:                          E_d.sesskeyl = csr_wdata;
+                riscv::CSR_E_USID_1:                          E_d.sesskeyh = csr_wdata;
+                riscv::CSR_E_DBG_CONTROL:                     E_d.dbg_control = csr_wdata;
+`endif
+
                 default: update_access_exception = 1'b1;
             endcase
         end
@@ -990,7 +1183,7 @@ module csr_regfile import ariane_pkg::*; #(
         // check if we are in vectored mode, if yes then do BASE + 4 * cause
         // we are imposing an additional alignment-constraint of 64 * 4 bytes since
         // we want to spare the costly addition
-        if ((mtvec_q[0] || stvec_q[0]) && ex_i.cause[riscv::XLEN-1]) begin
+        if ((mtvec_q[0] || stvec_q[0]) /* && ex_i.cause[riscv::XLEN-1] */ ) begin
             trap_vector_base_o[7:2] = ex_i.cause[5:0];
         end
 
@@ -1107,6 +1300,7 @@ module csr_regfile import ariane_pkg::*; #(
             // pmp
             pmpcfg_q               <= '0;
             pmpaddr_q              <= '0;
+            E_q                    <= '0;
         end else begin
             priv_lvl_q             <= priv_lvl_d;
             // floating-point registers
@@ -1157,6 +1351,12 @@ module csr_regfile import ariane_pkg::*; #(
                     pmpaddr_q[i] <= '0;
                 end
             end
+            // Z extension
+`ifdef RVAS
+            E_q                    <= E_d;
+`else 
+            E_q                    <= '0;
+`endif
         end
     end
 
diff --git a/src/enclave_effective_tweak.sv b/src/enclave_effective_tweak.sv
new file mode 100644
index 0000000..9f9d3e8
--- /dev/null
+++ b/src/enclave_effective_tweak.sv
@@ -0,0 +1,313 @@
+module enclave_effective_tweak import ariane_pkg::*; #(
+    parameter ariane_pkg::ariane_cfg_t ArianeCfg = ariane_pkg::ArianeDefaultConfig
+) (
+    input  logic                     clk_i,    // Clock TBD
+    input  logic                     rst_ni,   // Asynchronous reset active low TBD
+
+    input  logic [riscv::VLEN-1:0]   instr_vaddr,
+    input  logic [riscv::VLEN-1:0]   data_vaddr,
+    input  riscv::priv_lvl_t         priv_lvl_i,
+    input  riscv::priv_lvl_t         ld_st_priv_lvl_i,
+    input  riscv::pte_t              itlb_pte_entry_i,
+    input  riscv::pte_t              dtlb_pte_entry_i,
+    input  riscv::enclave_t          enclave_config_i,
+    output riscv::enclave_tweak_t    load_tweak_o,
+    output riscv::enclave_tweak_t    store_tweak_o,
+    output riscv::enclave_tweak_t    fetch_tweak_o
+);
+    // the normal tweak based on the CPU state
+    riscv::enclave_tweak_t ls_state_tweak;
+    // the effective tweak with applied override
+    riscv::enclave_tweak_t load_effective_tweak;
+    riscv::enclave_tweak_t store_effective_tweak;
+    // riscv::enclave_range_map_t range_map;
+
+    localparam int unsigned DCACHELINE_WIDTH_BIT = $clog2(ariane_pkg::DCACHE_LINE_WIDTH);
+    localparam int unsigned ICACHELINE_WIDTH_BIT = $clog2(ariane_pkg::ICACHE_LINE_WIDTH);
+    
+    // determine affected range
+    always_comb begin
+        // register marks start and end not masking a range (more expensive but great for debugging)
+        ls_state_tweak.range_map  = '0;
+        if (enclave_config_i.dbg_control.vsize_xrange_is_size_not_mask_no_alignment) begin
+            if (0 != enclave_config_i.mrange.vsize && enclave_config_i.mrange.vbase <= data_vaddr && data_vaddr < (enclave_config_i.mrange.vbase + enclave_config_i.mrange.vsize) ) begin
+                ls_state_tweak.range_map.mrange  = 1'b1;
+            end
+            if (0 != enclave_config_i.srange.vsize && enclave_config_i.srange.vbase <= data_vaddr && data_vaddr < (enclave_config_i.srange.vbase + enclave_config_i.srange.vsize) ) begin
+                ls_state_tweak.range_map.srange  = 1'b1;
+            end
+            if (0 != enclave_config_i.urange.vsize && enclave_config_i.urange.vbase <= data_vaddr && data_vaddr < (enclave_config_i.urange.vbase + enclave_config_i.urange.vsize) ) begin
+                ls_state_tweak.range_map.urange  = 1'b1;
+            end
+        // size is determined via simple mask, requires alignment
+        end else begin
+            if ((data_vaddr & ~(enclave_config_i.mrange.vsize) == enclave_config_i.mrange.vbase) && enclave_config_i.mrange.vsize != '0 ) begin
+                ls_state_tweak.range_map.mrange  = 1'b1;
+            end
+            if ((data_vaddr & ~(enclave_config_i.srange.vsize) == enclave_config_i.srange.vbase) && enclave_config_i.srange.vsize != '0 ) begin
+                ls_state_tweak.range_map.srange  = 1'b1;
+            end
+            if ((data_vaddr & ~(enclave_config_i.urange.vsize) == enclave_config_i.urange.vbase) && enclave_config_i.urange.vsize != '0 ) begin
+                ls_state_tweak.range_map.urange  = 1'b1;
+            end
+        end
+    end
+
+    // range map override in case of a tweak enable
+    always_comb begin
+        load_effective_tweak.range_map  = ls_state_tweak.range_map;
+        store_effective_tweak.range_map = ls_state_tweak.range_map;
+
+        if (enclave_config_i.ltweak.tweak_en) begin
+            load_effective_tweak.range_map   = (ls_state_tweak.range_map & ~enclave_config_i.ltweak.xrange_map_mask) | (enclave_config_i.ltweak.xrange_map & enclave_config_i.ltweak.xrange_map_mask);
+        end
+
+        if (enclave_config_i.stweak.tweak_en) begin
+            store_effective_tweak.range_map  = (ls_state_tweak.range_map & ~enclave_config_i.stweak.xrange_map_mask) | (enclave_config_i.stweak.xrange_map & enclave_config_i.stweak.xrange_map_mask);
+        end
+    end
+
+    // Determine voffset we are using either SV39 or SV32
+    always_comb begin
+        load_effective_tweak.voffset  = '0;
+        store_effective_tweak.voffset = '0;
+        ls_state_tweak.voffset        = '0;
+        // load offset
+        if (load_effective_tweak.range_map.mrange == 1'b1) begin
+            logic [riscv::VLEN-1:0] load_mrange_offset;
+            load_mrange_offset           = data_vaddr - enclave_config_i.mrange.vbase;
+            load_effective_tweak.voffset[riscv::SV-1-DCACHELINE_WIDTH_BIT:0] = load_mrange_offset[riscv::SV-1 :  DCACHELINE_WIDTH_BIT];
+        end else if (load_effective_tweak.range_map.srange == 1'b1) begin
+            logic [riscv::VLEN-1:0] load_srange_offset;
+            load_srange_offset           = data_vaddr - enclave_config_i.srange.vbase;
+            load_effective_tweak.voffset[riscv::SV-1-DCACHELINE_WIDTH_BIT:0] = load_srange_offset[riscv::SV-1 :  DCACHELINE_WIDTH_BIT];
+        end else if (load_effective_tweak.range_map.urange == 1'b1) begin
+            logic [riscv::VLEN-1:0] load_urange_offset;
+            load_urange_offset           = data_vaddr - enclave_config_i.urange.vbase;
+            load_effective_tweak.voffset[riscv::SV-1-DCACHELINE_WIDTH_BIT:0] = load_urange_offset[riscv::SV-1 :  DCACHELINE_WIDTH_BIT];
+        end else begin
+            load_effective_tweak.voffset[riscv::SV-1-DCACHELINE_WIDTH_BIT:0] = '0;
+        end        
+        // store offset
+        if (store_effective_tweak.range_map.mrange == 1'b1) begin
+            logic [riscv::VLEN-1:0] store_mrange_offset;
+            store_mrange_offset           = data_vaddr - enclave_config_i.mrange.vbase;
+            store_effective_tweak.voffset[riscv::SV-1-DCACHELINE_WIDTH_BIT:0] = store_mrange_offset[riscv::SV-1 :  DCACHELINE_WIDTH_BIT];
+        end else if (store_effective_tweak.range_map.srange == 1'b1) begin
+            logic [riscv::VLEN-1:0] store_srange_offset;
+            store_srange_offset           = data_vaddr - enclave_config_i.srange.vbase;
+            store_effective_tweak.voffset[riscv::SV-1-DCACHELINE_WIDTH_BIT:0] = store_srange_offset[riscv::SV-1 :  DCACHELINE_WIDTH_BIT];
+        end else if (store_effective_tweak.range_map.urange == 1'b1) begin
+            logic [riscv::VLEN-1:0] store_urange_offset;
+            store_urange_offset           = data_vaddr - enclave_config_i.urange.vbase;
+            store_effective_tweak.voffset[riscv::SV-1-DCACHELINE_WIDTH_BIT:0] = store_urange_offset[riscv::SV-1 :  DCACHELINE_WIDTH_BIT];
+        end else begin
+            store_effective_tweak.voffset[riscv::SV-1-DCACHELINE_WIDTH_BIT:0] = '0;
+        end
+        // state based offset (used for fetches)
+        if (ls_state_tweak.range_map.mrange == 1'b1) begin
+            logic [riscv::VLEN-1:0] state_mrange_offset;
+            state_mrange_offset           = data_vaddr - enclave_config_i.mrange.vbase;
+            ls_state_tweak.voffset[riscv::SV-1-ICACHELINE_WIDTH_BIT:0]        = state_mrange_offset[riscv::SV-1 :  ICACHELINE_WIDTH_BIT];
+        end else if (ls_state_tweak.range_map.srange == 1'b1) begin
+            logic [riscv::VLEN-1:0] state_srange_offset;
+            state_srange_offset           = data_vaddr - enclave_config_i.srange.vbase;
+            ls_state_tweak.voffset[riscv::SV-1-ICACHELINE_WIDTH_BIT:0]        = state_srange_offset[riscv::SV-1 :  ICACHELINE_WIDTH_BIT];
+        end else if (ls_state_tweak.range_map.urange == 1'b1) begin
+            logic [riscv::VLEN-1:0] state_urange_offset;
+            state_urange_offset           = data_vaddr - enclave_config_i.urange.vbase;
+            ls_state_tweak.voffset[riscv::SV-1-ICACHELINE_WIDTH_BIT:0]        = state_urange_offset[riscv::SV-1 :  ICACHELINE_WIDTH_BIT];
+        end else begin
+            ls_state_tweak.voffset[riscv::SV-1-ICACHELINE_WIDTH_BIT:0]        = '0;
+        end
+    end
+
+    // set the privilege level
+    always_comb begin
+        ls_state_tweak.prv        = ld_st_priv_lvl_i;
+        load_effective_tweak.prv  = ld_st_priv_lvl_i;
+        store_effective_tweak.prv = ld_st_priv_lvl_i;
+
+        if (enclave_config_i.ltweak.tweak_en) begin
+            load_effective_tweak.prv  = riscv::priv_lvl_t'((ld_st_priv_lvl_i & ~enclave_config_i.ltweak.prv_lvl_mask) | (enclave_config_i.ltweak.prv_lvl & enclave_config_i.ltweak.prv_lvl_mask));
+        end
+        if (enclave_config_i.stweak.tweak_en) begin
+            store_effective_tweak.prv = riscv::priv_lvl_t'((ld_st_priv_lvl_i & ~enclave_config_i.stweak.prv_lvl_mask) | (enclave_config_i.stweak.prv_lvl & enclave_config_i.stweak.prv_lvl_mask));
+        end
+    end
+
+    // pte msb bits
+    always_comb begin
+        // register marks start and end not masking a range (more expensive but great for debugging)
+        riscv::pte_msb_t pte_msb_load;
+        riscv::pte_msb_t pte_msb_store;
+
+        load_effective_tweak.pte_msb.SID_selector  = dtlb_pte_entry_i.msb.enclave_sid_selection;
+        store_effective_tweak.pte_msb.SID_selector = dtlb_pte_entry_i.msb.enclave_sid_selection;
+        ls_state_tweak.pte_msb.SID_selector        = dtlb_pte_entry_i.msb.enclave_sid_selection;
+
+        // with override applied
+        if (enclave_config_i.ltweak.tweak_en) begin
+            pte_msb_load  = (dtlb_pte_entry_i.msb & ~enclave_config_i.ltweak.pte_msb_mask) | (enclave_config_i.ltweak.pte_msb & enclave_config_i.ltweak.pte_msb_mask);
+            load_effective_tweak.pte_msb.SID_selector  = pte_msb_load.enclave_sid_selection;
+        end
+        if (enclave_config_i.stweak.tweak_en) begin
+            pte_msb_store = (dtlb_pte_entry_i.msb & ~enclave_config_i.stweak.pte_msb_mask) | (enclave_config_i.stweak.pte_msb & enclave_config_i.stweak.pte_msb_mask);
+            store_effective_tweak.pte_msb.SID_selector = pte_msb_store.enclave_sid_selection;
+        end
+
+    end
+
+    // pte lsb bits
+    always_comb begin
+        // register marks start and end not masking a range (more expensive but great for debugging)
+        riscv::pte_lsb_t pte_lsb_load;
+        riscv::pte_lsb_t pte_lsb_store;
+        riscv::pte_lsb_t pte_lsb;
+        
+        pte_lsb_load           = '0;
+        pte_lsb_store          = '0;
+        ls_state_tweak.pte_lsb = '0;
+
+
+        // assign separate fields so we can apply our mask before selecting only a handfull of bits from the lsb
+        pte_lsb.rsw                        = dtlb_pte_entry_i.rsw;
+        pte_lsb.d                          = dtlb_pte_entry_i.d;
+        pte_lsb.a                          = dtlb_pte_entry_i.a;
+        pte_lsb.g                          = dtlb_pte_entry_i.g;
+        pte_lsb.u                          = dtlb_pte_entry_i.u;
+        pte_lsb.x                          = dtlb_pte_entry_i.x;
+        pte_lsb.w                          = dtlb_pte_entry_i.w;
+        pte_lsb.r                          = dtlb_pte_entry_i.r;
+        pte_lsb.v                          = dtlb_pte_entry_i.v;
+        
+        // non override mode
+        ls_state_tweak.pte_lsb.u           = dtlb_pte_entry_i.u;
+        ls_state_tweak.pte_lsb.g           = dtlb_pte_entry_i.g;
+        ls_state_tweak.pte_lsb.r           = dtlb_pte_entry_i.r;
+        ls_state_tweak.pte_lsb.w           = dtlb_pte_entry_i.w;
+        ls_state_tweak.pte_lsb.x           = dtlb_pte_entry_i.x;
+
+        load_effective_tweak.pte_lsb.u     = pte_lsb_load.u;
+        load_effective_tweak.pte_lsb.g     = pte_lsb_load.g;
+        load_effective_tweak.pte_lsb.r     = pte_lsb_load.r;
+        load_effective_tweak.pte_lsb.w     = pte_lsb_load.w;
+        load_effective_tweak.pte_lsb.x     = pte_lsb_load.x;
+
+        store_effective_tweak.pte_lsb.u    = pte_lsb_store.u;
+        store_effective_tweak.pte_lsb.g    = pte_lsb_store.g;
+        store_effective_tweak.pte_lsb.r    = pte_lsb_store.r;
+        store_effective_tweak.pte_lsb.w    = pte_lsb_store.w;
+        store_effective_tweak.pte_lsb.x    = pte_lsb_store.x;
+
+        // apply override
+        if (enclave_config_i.ltweak.tweak_en) begin
+            pte_lsb_load  = (pte_lsb & ~enclave_config_i.ltweak.pte_lsb_mask) | (enclave_config_i.ltweak.pte_lsb & enclave_config_i.ltweak.pte_lsb_mask);
+            load_effective_tweak.pte_lsb.u     = pte_lsb_load.u;
+            load_effective_tweak.pte_lsb.g     = pte_lsb_load.g;
+            load_effective_tweak.pte_lsb.r     = pte_lsb_load.r;
+            load_effective_tweak.pte_lsb.w     = pte_lsb_load.w;
+            load_effective_tweak.pte_lsb.x     = pte_lsb_load.x;
+        end
+        if (enclave_config_i.stweak.tweak_en) begin
+            pte_lsb_store = (pte_lsb & ~enclave_config_i.stweak.pte_lsb_mask) | (enclave_config_i.stweak.pte_lsb & enclave_config_i.stweak.pte_lsb_mask);
+            store_effective_tweak.pte_lsb.u    = pte_lsb_store.u;
+            store_effective_tweak.pte_lsb.g    = pte_lsb_store.g;
+            store_effective_tweak.pte_lsb.r    = pte_lsb_store.r;
+            store_effective_tweak.pte_lsb.x    = pte_lsb_store.x;
+            store_effective_tweak.pte_lsb.w    = pte_lsb_store.w;
+        end
+    end
+
+    // set SID registers based on the effective tweak
+    always_comb begin
+        load_effective_tweak.SID  = '0;
+        store_effective_tweak.SID = '0;
+        ls_state_tweak.SID        = '0;
+
+        // LSB selector bit
+        // load tweak
+        if (load_effective_tweak.pte_msb.SID_selector & 2'b1 == 2'b01) begin
+            if (load_effective_tweak.range_map.mrange == 1'b1) begin
+                load_effective_tweak.SID.S0 = enclave_config_i.rtid;
+            end else if (load_effective_tweak.range_map.srange == 1'b1) begin
+                load_effective_tweak.SID.S0 = enclave_config_i.ssid_0;
+            end else if (load_effective_tweak.range_map.urange == 1'b1) begin
+                load_effective_tweak.SID.S0 = enclave_config_i.sesskeyl;
+            end
+        end
+
+        // store tweak
+        if (store_effective_tweak.pte_msb.SID_selector & 2'b1 == 2'b01) begin
+            if (store_effective_tweak.range_map.mrange == 1'b1) begin
+                store_effective_tweak.SID.S0 = enclave_config_i.rtid;
+            end else if (store_effective_tweak.range_map.srange == 1'b1) begin
+                store_effective_tweak.SID.S0 = enclave_config_i.ssid_0;
+            end else if (store_effective_tweak.range_map.urange == 1'b1) begin
+                store_effective_tweak.SID.S0 = enclave_config_i.sesskeyl;
+            end
+        end
+        
+        // state-based tweak
+        if (ls_state_tweak.pte_msb.SID_selector & 2'b1 == 2'b01) begin
+            if (ls_state_tweak.range_map.mrange == 1'b1) begin
+                ls_state_tweak.SID.S0 = enclave_config_i.rtid;
+            end else if (ls_state_tweak.range_map.srange == 1'b1) begin
+                ls_state_tweak.SID.S0 = enclave_config_i.ssid_0;
+            end else if (ls_state_tweak.range_map.urange == 1'b1) begin
+                ls_state_tweak.SID.S0 = enclave_config_i.sesskeyl;
+            end
+        end
+        
+        // MSB selector bit
+        // load tweak
+        if (load_effective_tweak.pte_msb.SID_selector & 2'b10 == 2'b10) begin
+            if (load_effective_tweak.range_map.mrange == 1'b1) begin
+                load_effective_tweak.SID.S1 = enclave_config_i.sid_shcode[riscv::ENCLAVE_TWEAK_SID1_BITSIZE-1:0];
+            end else if (load_effective_tweak.range_map.srange == 1'b1) begin
+                load_effective_tweak.SID.S1 = enclave_config_i.ssid_1[riscv::ENCLAVE_TWEAK_SID1_BITSIZE-1:0];
+            end else if (load_effective_tweak.range_map.urange == 1'b1) begin
+                load_effective_tweak.SID.S1 = enclave_config_i.sesskeyh[riscv::ENCLAVE_TWEAK_SID1_BITSIZE-1:0];
+            end
+        end
+
+        // store tweak
+        if (store_effective_tweak.pte_msb.SID_selector & 2'b10 == 2'b10) begin
+            if (store_effective_tweak.range_map.mrange == 1'b1) begin
+                store_effective_tweak.SID.S1 = enclave_config_i.sid_shcode[riscv::ENCLAVE_TWEAK_SID1_BITSIZE-1:0];
+            end else if (store_effective_tweak.range_map.srange == 1'b1) begin
+                store_effective_tweak.SID.S1 = enclave_config_i.ssid_1[riscv::ENCLAVE_TWEAK_SID1_BITSIZE-1:0];
+            end else if (store_effective_tweak.range_map.urange == 1'b1) begin
+                store_effective_tweak.SID.S1 = enclave_config_i.sesskeyh[riscv::ENCLAVE_TWEAK_SID1_BITSIZE-1:0];
+            end
+        end
+        
+        // state-based tweak
+        if (ls_state_tweak.pte_msb.SID_selector & 2'b10 == 2'b10) begin
+            if (ls_state_tweak.range_map.mrange == 1'b1) begin
+                ls_state_tweak.SID.S1 = enclave_config_i.sid_shcode[riscv::ENCLAVE_TWEAK_SID1_BITSIZE-1:0];
+            end else if (ls_state_tweak.range_map.srange == 1'b1) begin
+                ls_state_tweak.SID.S1 = enclave_config_i.ssid_1[riscv::ENCLAVE_TWEAK_SID1_BITSIZE-1:0];
+            end else if (ls_state_tweak.range_map.urange == 1'b1) begin
+                ls_state_tweak.SID.S1 = enclave_config_i.sesskeyh[riscv::ENCLAVE_TWEAK_SID1_BITSIZE-1:0];
+            end
+        end
+    end
+
+    // output assignment
+    always_comb begin
+            load_tweak_o  = load_effective_tweak;
+            store_tweak_o = store_effective_tweak;
+            fetch_tweak_o = ls_state_tweak;
+        if (load_effective_tweak.range_map == 'b0  && enclave_config_i.ltweak.tweak_en == 'b0) begin
+            load_tweak_o  = '0;
+        end
+        if (store_effective_tweak.range_map == 'b0 && enclave_config_i.stweak.tweak_en == 'b0) begin
+            store_tweak_o = '0;
+        end
+        if (ls_state_tweak.range_map == 'b0) begin
+            fetch_tweak_o = '0;
+        end
+    end
+
+endmodule
\ No newline at end of file
diff --git a/src/ex_stage.sv b/src/ex_stage.sv
index 6d4fa1f..d1f5852 100644
--- a/src/ex_stage.sv
+++ b/src/ex_stage.sv
@@ -89,6 +89,9 @@ module ex_stage import ariane_pkg::*; #(
     input  logic                                   mxr_i,
     input  logic [riscv::PPNW-1:0]                 satp_ppn_i,
     input  logic [ASID_WIDTH-1:0]                  asid_i,
+    // Z extension
+    input  riscv::enclave_t                        enclave_config_i,
+    output riscv::enclave_tweak_t                  fetch_tweak_o,
     // icache translation requests
     input  icache_areq_o_t                         icache_areq_i,
     output icache_areq_i_t                         icache_areq_o,
@@ -303,6 +306,9 @@ module ex_stage import ariane_pkg::*; #(
         .mxr_i,
         .satp_ppn_i,
         .asid_i,
+        // Z extension
+        .enclave_config_i,
+        .fetch_tweak_o,
         .asid_to_be_flushed_i (asid_to_be_flushed),
         .vaddr_to_be_flushed_i (vaddr_to_be_flushed),
         .flush_tlb_i,
diff --git a/src/load_store_unit.sv b/src/load_store_unit.sv
index a88454f..4f0f89f 100644
--- a/src/load_store_unit.sv
+++ b/src/load_store_unit.sv
@@ -54,6 +54,11 @@ module load_store_unit import ariane_pkg::*; #(
     input  logic                     mxr_i,                    // From CSR register file
     input  logic [riscv::PPNW-1:0]   satp_ppn_i,               // From CSR register file
     input  logic [ASID_WIDTH-1:0]    asid_i,                   // From CSR register file
+    // Z extension
+    input  riscv::enclave_t          enclave_config_i,         // From CSR register file
+    output riscv::enclave_tweak_t    fetch_tweak_o,
+
+
     input  logic [ASID_WIDTH-1:0]    asid_to_be_flushed_i,
     input  logic [riscv::VLEN-1:0]   vaddr_to_be_flushed_i,
     input  logic                     flush_tlb_i,
@@ -61,6 +66,7 @@ module load_store_unit import ariane_pkg::*; #(
     output logic                     itlb_miss_o,
     output logic                     dtlb_miss_o,
 
+
     // interface to dcache
     input  dcache_req_o_t [2:0]      dcache_req_ports_i,
     output dcache_req_i_t [2:0]      dcache_req_ports_o,
@@ -97,7 +103,7 @@ module load_store_unit import ariane_pkg::*; #(
     assign vaddr_xlen = $unsigned($signed(fu_data_i.imm) + $signed(fu_data_i.operand_a));
     assign vaddr_i = vaddr_xlen[riscv::VLEN-1:0];
     // we work with SV39 or SV32, so if VM is enabled, check that all bits [XLEN-1:38] or [XLEN-1:31] are equal
-    assign overflow = !((&vaddr_xlen[riscv::XLEN-1:riscv::SV-1]) == 1'b1 || (|vaddr_xlen[riscv::XLEN-1:riscv::SV-1]) == 1'b0);
+    assign overflow = 0; //!((&vaddr_xlen[riscv::XLEN-1:riscv::SV-1]) == 1'b1 || (|vaddr_xlen[riscv::XLEN-1:riscv::SV-1]) == 1'b0);
 
     logic                     st_valid_i;
     logic                     ld_valid_i;
@@ -127,6 +133,37 @@ module load_store_unit import ariane_pkg::*; #(
     exception_t               ld_ex;
     exception_t               st_ex;
 
+    // -------------------
+    // Enclave Effective Tweak generator
+    // -------------------
+    riscv::enclave_tweak_t    enclave_load_tweak;
+    riscv::enclave_tweak_t    enclave_store_tweak;
+    riscv::enclave_tweak_t    enclave_fetch_tweak;
+    riscv::pte_t              itlb_pte_content;
+    riscv::pte_t              dtlb_pte_content;
+
+`ifdef RVAS
+    enclave_effective_tweak i_enclave_effective_tweak (
+        .clk_i,
+        .rst_ni,
+        .priv_lvl_i,
+        .ld_st_priv_lvl_i,
+        .itlb_pte_entry_i    ( itlb_pte_content          ),
+        .dtlb_pte_entry_i    ( dtlb_pte_content          ),
+        .instr_vaddr         ( icache_areq_i.fetch_vaddr ),
+        .data_vaddr          ( lsu_ctrl.vaddr            ),
+        .enclave_config_i,
+        .load_tweak_o        ( enclave_load_tweak        ),
+        .store_tweak_o       ( enclave_store_tweak       ),
+        .fetch_tweak_o       ( enclave_fetch_tweak       )
+    );
+`else
+    assign enclave_load_tweak  = '0;
+    assign enclave_store_tweak = '0;
+    assign enclave_fetch_tweak = '0;
+`endif
+
+
     // -------------------
     // MMU e.g.: TLBs/PTW
     // -------------------
@@ -136,7 +173,7 @@ module load_store_unit import ariane_pkg::*; #(
         .ASID_WIDTH             ( ASID_WIDTH             ),
         .ArianeCfg              ( ArianeCfg              )
     ) i_mmu (
-            // misaligned bypass
+        // misaligned bypass
         .misaligned_ex_i        ( misaligned_exception   ),
         .lsu_is_store_i         ( st_translation_req     ),
         .lsu_req_i              ( translation_req        ),
@@ -156,6 +193,9 @@ module load_store_unit import ariane_pkg::*; #(
         .icache_areq_o          ( icache_areq_o          ),
         .pmpcfg_i,
         .pmpaddr_i,
+        // Z extension
+        .itlb_pte_entry_o    ( itlb_pte_content    ),
+        .dtlb_pte_entry_o    ( dtlb_pte_content    ),
         .*
     );
     logic store_buffer_empty;
@@ -194,7 +234,9 @@ module load_store_unit import ariane_pkg::*; #(
         .amo_resp_i,
         // to memory arbiter
         .req_port_i             ( dcache_req_ports_i [2] ),
-        .req_port_o             ( dcache_req_ports_o [2] )
+        .req_port_o             ( dcache_req_ports_o [2] ),
+        // Z extension
+        .store_tweak_i          ( enclave_store_tweak )
     );
 
     // ------------------
@@ -227,6 +269,8 @@ module load_store_unit import ariane_pkg::*; #(
         .req_port_o            ( dcache_req_ports_o [1] ),
         .dcache_wbuffer_not_ni_i,
         .commit_tran_id_i,
+        // Z extension
+        .load_tweak_i           ( enclave_load_tweak  ),
         .*
     );
 
diff --git a/src/load_unit.sv b/src/load_unit.sv
index c8a0286..fa7b992 100644
--- a/src/load_unit.sv
+++ b/src/load_unit.sv
@@ -43,7 +43,9 @@ module load_unit import ariane_pkg::*; #(
     // D$ interface
     input dcache_req_o_t             req_port_i,
     output dcache_req_i_t            req_port_o,
-    input  logic                     dcache_wbuffer_not_ni_i
+    input  logic                     dcache_wbuffer_not_ni_i,
+    // Z extension
+    input  riscv::enclave_tweak_t    load_tweak_i
 );
     enum logic [3:0] { IDLE, WAIT_GNT, SEND_TAG, WAIT_PAGE_OFFSET,
                        ABORT_TRANSACTION, ABORT_TRANSACTION_NI, WAIT_TRANSLATION, WAIT_FLUSH,
@@ -73,6 +75,7 @@ module load_unit import ariane_pkg::*; #(
     assign req_port_o.address_tag   = paddr_i[ariane_pkg::DCACHE_TAG_WIDTH     +
                                               ariane_pkg::DCACHE_INDEX_WIDTH-1 :
                                               ariane_pkg::DCACHE_INDEX_WIDTH];
+    
     // directly output an exception
     assign ex_o = ex_i;
 
@@ -86,6 +89,10 @@ module load_unit import ariane_pkg::*; #(
     assign inflight_stores = (!dcache_wbuffer_not_ni_i || !store_buffer_empty_i);
     assign stall_ni = (inflight_stores || not_commit_time) && paddr_ni;
 
+    // Z extension
+    riscv::enclave_tweak_t    load_tweak_n, load_tweak_q;
+    assign req_port_o.etweak_w     =  load_tweak_q;
+
     // ---------------
     // Load Control
     // ---------------
@@ -101,6 +108,7 @@ module load_unit import ariane_pkg::*; #(
         req_port_o.data_be   = lsu_ctrl_i.be;
         req_port_o.data_size = extract_transfer_size(lsu_ctrl_i.operator);
         pop_ld_o             = 1'b0;
+        load_tweak_n         = load_tweak_q;
 
         case (state_q)
             IDLE: begin
@@ -118,6 +126,8 @@ module load_unit import ariane_pkg::*; #(
                             state_d = WAIT_GNT;
                         end else begin
                             if (dtlb_hit_i && !stall_ni) begin
+                                // Z extension
+                                load_tweak_n = load_tweak_i;
                                 // we got a grant and a hit on the DTLB so we can send the tag in the next cycle
                                 state_d = SEND_TAG;
                                 pop_ld_o = 1'b1;
@@ -364,13 +374,15 @@ module load_unit import ariane_pkg::*; #(
 
     always_ff @(posedge clk_i or negedge rst_ni) begin : p_regs
         if (~rst_ni) begin
-            idx_q     <= 0;
-            signed_q  <= 0;
-            fp_sign_q <= 0;
+            idx_q        <= 0;
+            signed_q     <= 0;
+            fp_sign_q    <= 0;
+            load_tweak_q <= 0;
         end else begin
-            idx_q     <= idx_d;
-            signed_q  <= signed_d;
-            fp_sign_q <= fp_sign_d;
+            idx_q        <= idx_d;
+            signed_q     <= signed_d;
+            fp_sign_q    <= fp_sign_d;
+            load_tweak_q <= load_tweak_n;
         end
     end
     // end result mux fast
diff --git a/src/mmu.sv b/src/mmu.sv
index cb82430..7476554 100644
--- a/src/mmu.sv
+++ b/src/mmu.sv
@@ -63,7 +63,11 @@ module mmu import ariane_pkg::*; #(
     output dcache_req_i_t                   req_port_o,
     // PMP
     input  riscv::pmpcfg_t [15:0]           pmpcfg_i,
-    input  logic [15:0][riscv::PLEN-3:0]    pmpaddr_i
+    input  logic [15:0][riscv::PLEN-3:0]    pmpaddr_i,
+
+    // Z extension
+    output riscv::pte_t                    itlb_pte_entry_o,
+    output riscv::pte_t                    dtlb_pte_entry_o
 );
 
     logic                   iaccess_err;   // insufficient privilege to access this instruction page
@@ -89,11 +93,16 @@ module mmu import ariane_pkg::*; #(
     logic        dtlb_is_1G;
     logic        dtlb_lu_hit;
 
+    riscv::pte_t dtlb_pte_n,      dtlb_pte_q;
 
     // Assignments
     assign itlb_lu_access = icache_areq_i.fetch_req;
     assign dtlb_lu_access = lsu_req_i;
 
+    // Z extension
+    assign itlb_pte_entry_o = itlb_content;
+    assign dtlb_pte_entry_o = dtlb_pte_q;
+
 
     tlb #(
         .TLB_ENTRIES      ( INSTR_TLB_ENTRIES          ),
@@ -288,7 +297,6 @@ module mmu import ariane_pkg::*; #(
     // Data Interface
     //-----------------------
     logic [riscv::VLEN-1:0] lsu_vaddr_n,     lsu_vaddr_q;
-    riscv::pte_t dtlb_pte_n,      dtlb_pte_q;
     exception_t  misaligned_ex_n, misaligned_ex_q;
     logic        lsu_req_n,       lsu_req_q;
     logic        lsu_is_store_n,  lsu_is_store_q;
diff --git a/src/store_buffer.sv b/src/store_buffer.sv
index e1639ad..fc4fce0 100644
--- a/src/store_buffer.sv
+++ b/src/store_buffer.sv
@@ -40,18 +40,22 @@ module store_buffer import ariane_pkg::*; (
 
     // D$ interface
     input  dcache_req_o_t req_port_i,
-    output dcache_req_i_t req_port_o
+    output dcache_req_i_t req_port_o,
+
+    // Z extension
+    input  riscv::enclave_tweak_t    store_tweak_i
 );
 
     // the store queue has two parts:
     // 1. Speculative queue
     // 2. Commit queue which is non-speculative, e.g.: the store will definitely happen.
     struct packed {
-        logic [riscv::PLEN-1:0] address;
-        riscv::xlen_t           data;
-        logic [7:0]             be;
-        logic [1:0]             data_size;
-        logic                   valid;     // this entry is valid, we need this for checking if the address offset matches
+        logic [riscv::PLEN-1:0]    address;
+        ariane_pkg::cache_tweak_t  etweak_w;
+        riscv::xlen_t              data;
+        logic [7:0]                be;
+        logic [1:0]                data_size;
+        logic                      valid;     // this entry is valid, we need this for checking if the address offset matches
     } speculative_queue_n [DEPTH_SPEC-1:0], speculative_queue_q [DEPTH_SPEC-1:0],
       commit_queue_n [DEPTH_COMMIT-1:0],    commit_queue_q [DEPTH_COMMIT-1:0];
 
@@ -84,6 +88,7 @@ module store_buffer import ariane_pkg::*; (
         // we are ready to accept a new entry and the input data is valid
         if (valid_i) begin
             speculative_queue_n[speculative_write_pointer_q].address   = paddr_i;
+            speculative_queue_n[speculative_write_pointer_q].etweak_w  = store_tweak_i;
             speculative_queue_n[speculative_write_pointer_q].data      = data_i;
             speculative_queue_n[speculative_write_pointer_q].be        = be_i;
             speculative_queue_n[speculative_write_pointer_q].data_size = data_size_i;
@@ -133,6 +138,8 @@ module store_buffer import ariane_pkg::*; (
     assign req_port_o.address_tag   = commit_queue_q[commit_read_pointer_q].address[ariane_pkg::DCACHE_TAG_WIDTH     +
                                                                                     ariane_pkg::DCACHE_INDEX_WIDTH-1 :
                                                                                     ariane_pkg::DCACHE_INDEX_WIDTH];
+    
+    assign req_port_o.etweak_w      = commit_queue_q[commit_read_pointer_q].etweak_w;
     assign req_port_o.data_wdata    = (req_port_o.address_index[2] == 1'b0) ? {{64-riscv::XLEN{1'b0}}, commit_queue_q[commit_read_pointer_q].data} :
                                                                               {commit_queue_q[commit_read_pointer_q].data, {64-riscv::XLEN{1'b0}}};
     assign req_port_o.data_be       = commit_queue_q[commit_read_pointer_q].be;
diff --git a/src/store_unit.sv b/src/store_unit.sv
index 19cb0fd..fcb44f0 100644
--- a/src/store_unit.sv
+++ b/src/store_unit.sv
@@ -44,7 +44,9 @@ module store_unit import ariane_pkg::*; (
     output amo_req_t                 amo_req_o,
     input  amo_resp_t                amo_resp_i,
     input  dcache_req_o_t            req_port_i,
-    output dcache_req_i_t            req_port_o
+    output dcache_req_i_t            req_port_o,
+    // Z extension
+    input  riscv::enclave_tweak_t    store_tweak_i
 );
     // it doesn't matter what we are writing back as stores don't return anything
     assign result_o = '0;
@@ -70,6 +72,9 @@ module store_unit import ariane_pkg::*; (
 
     logic [TRANS_ID_BITS-1:0] trans_id_n, trans_id_q;
 
+    // Z extension
+    riscv::enclave_tweak_t    store_tweak_n, store_tweak_q;
+
     // output assignments
     assign vaddr_o    = lsu_ctrl_i.vaddr; // virtual address
     assign trans_id_o = trans_id_q; // transaction id from previous cycle
@@ -82,7 +87,8 @@ module store_unit import ariane_pkg::*; (
         pop_st_o               = 1'b0;
         ex_o                   = ex_i;
         trans_id_n             = lsu_ctrl_i.trans_id;
-        state_d                     = state_q;
+        state_d                = state_q;
+        store_tweak_n          = store_tweak_q;
 
         case (state_q)
             // we got a valid store
@@ -91,16 +97,19 @@ module store_unit import ariane_pkg::*; (
                     state_d = VALID_STORE;
                     translation_req_o = 1'b1;
                     pop_st_o = 1'b1;
+                    store_tweak_n = store_tweak_i;
                     // check if translation was valid and we have space in the store buffer
                     // otherwise simply stall
                     if (!dtlb_hit_i) begin
                         state_d = WAIT_TRANSLATION;
                         pop_st_o = 1'b0;
+                        store_tweak_n = store_tweak_q;
                     end
 
                     if (!st_ready) begin
                         state_d = WAIT_STORE_READY;
                         pop_st_o = 1'b0;
+                        store_tweak_n = store_tweak_q;
                     end
                 end
             end
@@ -235,7 +244,9 @@ module store_unit import ariane_pkg::*; (
         .be_i                  ( st_be_q                ),
         .data_size_i           ( st_data_size_q         ),
         .req_port_i            ( req_port_i             ),
-        .req_port_o            ( req_port_o             )
+        .req_port_o            ( req_port_o             ),
+        // Z extension
+        .store_tweak_i         ( store_tweak_q          )
     );
 
     amo_buffer i_amo_buffer (
@@ -265,6 +276,7 @@ module store_unit import ariane_pkg::*; (
             st_data_size_q <= '0;
             trans_id_q     <= '0;
             amo_op_q       <= AMO_NONE;
+            store_tweak_q  <= '0;
         end else begin
             state_q        <= state_d;
             st_be_q        <= st_be_n;
@@ -272,6 +284,7 @@ module store_unit import ariane_pkg::*; (
             trans_id_q     <= trans_id_n;
             st_data_size_q <= st_data_size_n;
             amo_op_q       <= amo_op_d;
+            store_tweak_q  <= store_tweak_n;
         end
     end
 
diff --git a/src/util/axi_master_connect.sv b/src/util/axi_master_connect.sv
index 9448f2f..1f212b6 100644
--- a/src/util/axi_master_connect.sv
+++ b/src/util/axi_master_connect.sv
@@ -28,14 +28,14 @@ module axi_master_connect (
     assign master.aw_qos        = axi_req_i.aw.qos;
     assign master.aw_atop       = axi_req_i.aw.atop;
     assign master.aw_region     = axi_req_i.aw.region;
-    assign master.aw_user       = '0;
+    assign master.aw_user       = axi_req_i.aw.user;
     assign master.aw_valid      = axi_req_i.aw_valid;
     assign axi_resp_o.aw_ready  = master.aw_ready;
 
     assign master.w_data        = axi_req_i.w.data;
     assign master.w_strb        = axi_req_i.w.strb;
     assign master.w_last        = axi_req_i.w.last;
-    assign master.w_user        = '0;
+    assign master.w_user        = axi_req_i.w.user;
     assign master.w_valid       = axi_req_i.w_valid;
     assign axi_resp_o.w_ready   = master.w_ready;
 
@@ -54,7 +54,7 @@ module axi_master_connect (
     assign master.ar_prot       = axi_req_i.ar.prot;
     assign master.ar_qos        = axi_req_i.ar.qos;
     assign master.ar_region     = axi_req_i.ar.region;
-    assign master.ar_user       = '0;
+    assign master.ar_user       = axi_req_i.ar.user;
     assign master.ar_valid      = axi_req_i.ar_valid;
     assign axi_resp_o.ar_ready  = master.ar_ready;
 
diff --git a/src/util/axi_master_connect_rev.sv b/src/util/axi_master_connect_rev.sv
index 620b303..95074bb 100644
--- a/src/util/axi_master_connect_rev.sv
+++ b/src/util/axi_master_connect_rev.sv
@@ -28,14 +28,14 @@ module axi_master_connect_rev (
     assign  axi_req_o.aw.prot    = master.aw_prot;
     assign  axi_req_o.aw.qos     = master.aw_qos;
     assign  axi_req_o.aw.region  = master.aw_region;
-    // assign                     = master.aw_user;
+    assign  axi_req_o.aw.user  = master.aw_user;
     assign  axi_req_o.aw_valid   = master.aw_valid;
     assign  master.aw_ready       = axi_resp_i.aw_ready;
 
     assign  axi_req_o.w.data     = master.w_data;
     assign  axi_req_o.w.strb     = master.w_strb;
     assign  axi_req_o.w.last     = master.w_last;
-    // assign                     = master.w_user;
+    assign  axi_req_o.w.user     = master.w_user;
     assign  axi_req_o.w_valid    = master.w_valid;
     assign  master.w_ready        = axi_resp_i.w_ready;
 
@@ -54,7 +54,7 @@ module axi_master_connect_rev (
     assign  axi_req_o.ar.prot    = master.ar_prot;
     assign  axi_req_o.ar.qos     = master.ar_qos;
     assign  axi_req_o.ar.region  = master.ar_region;
-    // assign                     = master.ar_user;
+    assign  axi_req_o.ar.user  = master.ar_user;
     assign  axi_req_o.ar_valid   = master.ar_valid;
     assign  master.ar_ready       = axi_resp_i.ar_ready;
 
diff --git a/src/util/axi_slave_connect.sv b/src/util/axi_slave_connect.sv
index ce5dede..67494da 100644
--- a/src/util/axi_slave_connect.sv
+++ b/src/util/axi_slave_connect.sv
@@ -28,14 +28,14 @@ module axi_slave_connect (
     assign  axi_req_o.aw.qos     = slave.aw_qos;
     assign  axi_req_o.aw.atop    = slave.aw_atop;
     assign  axi_req_o.aw.region  = slave.aw_region;
-    // assign                     = slave.aw_user;
+    assign  axi_req_o.aw.user    = slave.aw_user;
     assign  axi_req_o.aw_valid   = slave.aw_valid;
     assign  slave.aw_ready       = axi_resp_i.aw_ready;
 
     assign  axi_req_o.w.data     = slave.w_data;
     assign  axi_req_o.w.strb     = slave.w_strb;
     assign  axi_req_o.w.last     = slave.w_last;
-    // assign                     = slave.w_user;
+    assign  axi_req_o.w.user     = slave.w_user;
     assign  axi_req_o.w_valid    = slave.w_valid;
     assign  slave.w_ready        = axi_resp_i.w_ready;
 
@@ -55,7 +55,7 @@ module axi_slave_connect (
     assign  axi_req_o.ar.prot    = slave.ar_prot;
     assign  axi_req_o.ar.qos     = slave.ar_qos;
     assign  axi_req_o.ar.region  = slave.ar_region;
-    // assign                     = slave.ar_user;
+    assign  axi_req_o.ar.user    = slave.ar_user;
     assign  axi_req_o.ar_valid   = slave.ar_valid;
     assign  slave.ar_ready       = axi_resp_i.ar_ready;
 
diff --git a/src/util/axi_slave_connect_rev.sv b/src/util/axi_slave_connect_rev.sv
index 5dbaaab..22054b5 100644
--- a/src/util/axi_slave_connect_rev.sv
+++ b/src/util/axi_slave_connect_rev.sv
@@ -27,14 +27,14 @@ module axi_slave_connect_rev (
     assign slave.aw_prot       = axi_req_i.aw.prot;
     assign slave.aw_qos        = axi_req_i.aw.qos;
     assign slave.aw_region     = axi_req_i.aw.region;
-    assign slave.aw_user       = '0;
+    assign slave.aw_user       = axi_req_i.aw.user;
     assign slave.aw_valid      = axi_req_i.aw_valid;
     assign axi_resp_o.aw_ready = slave.aw_ready;
 
     assign slave.w_data        = axi_req_i.w.data;
     assign slave.w_strb        = axi_req_i.w.strb;
     assign slave.w_last        = axi_req_i.w.last;
-    assign slave.w_user        = '0;
+    assign slave.w_user        = axi_req_i.w.user;
     assign slave.w_valid       = axi_req_i.w_valid;
     assign axi_resp_o.w_ready  = slave.w_ready;
 
@@ -53,7 +53,7 @@ module axi_slave_connect_rev (
     assign slave.ar_prot       = axi_req_i.ar.prot;
     assign slave.ar_qos        = axi_req_i.ar.qos;
     assign slave.ar_region     = axi_req_i.ar.region;
-    assign slave.ar_user       = '0;
+    assign slave.ar_user       = axi_req_i.ar.user;
     assign slave.ar_valid      = axi_req_i.ar_valid;
     assign axi_resp_o.ar_ready = slave.ar_ready;
 
diff --git a/tb/ariane_soc_pkg.sv b/tb/ariane_soc_pkg.sv
index 5036162..d861ab6 100644
--- a/tb/ariane_soc_pkg.sv
+++ b/tb/ariane_soc_pkg.sv
@@ -48,7 +48,7 @@ package ariane_soc;
   localparam logic[63:0] SPILength      = 64'h800000;
   localparam logic[63:0] EthernetLength = 64'h10000;
   localparam logic[63:0] GPIOLength     = 64'h1000;
-  localparam logic[63:0] DRAMLength     = 64'h40000000; // 1GByte of DDR (split between two chips on Genesys2)
+  localparam logic[63:0] DRAMLength     = 64'h10000000; // 256MByte of DDR (split between two chips on Genesys2)
   localparam logic[63:0] SRAMLength     = 64'h1800000;  // 24 MByte of SRAM
   // Instantiate AXI protocol checkers
   localparam bit GenProtocolChecker = 1'b0;
diff --git a/tb/ariane_testharness.sv b/tb/ariane_testharness.sv
index ba8f9aa..b8ca310 100644
--- a/tb/ariane_testharness.sv
+++ b/tb/ariane_testharness.sv
@@ -13,6 +13,8 @@
 // Description: Test-harness for Ariane
 //              Instantiates an AXI-Bus and memories
 
+`include "testbench_defines.svh"
+
 module ariane_testharness #(
   parameter int unsigned AXI_USER_WIDTH    = 1,
   parameter int unsigned AXI_ADDRESS_WIDTH = 64,
@@ -65,6 +67,61 @@ module ariane_testharness #(
   logic        dmi_resp_ready;
   logic        dmi_resp_valid;
 
+  `ifdef MEMSEC
+  wire [3:0]  axi_mem_memsec_awid;
+  wire [29:0] axi_mem_memsec_awaddr;
+  wire [7:0]  axi_mem_memsec_awlen;
+  wire [2:0]  axi_mem_memsec_awsize;
+  wire [1:0]  axi_mem_memsec_awburst;
+  wire [3:0]  axi_mem_memsec_awcache;
+  wire [2:0]  axi_mem_memsec_awprot;
+  wire [3:0]  axi_mem_memsec_awqos;
+  wire [0:0]  axi_mem_memsec_awuser;
+  wire        axi_mem_memsec_awvalid;
+  wire        axi_mem_memsec_awready;
+  wire [63:0] axi_mem_memsec_wdata;
+  wire [7:0]  axi_mem_memsec_wstrb;
+  wire        axi_mem_memsec_wlast;
+  wire [0:0]  axi_mem_memsec_wuser;
+  wire        axi_mem_memsec_wvalid;
+  wire        axi_mem_memsec_wready;
+  wire [3:0]  axi_mem_memsec_bid;
+  wire [1:0]  axi_mem_memsec_bresp;
+  wire [0:0]  axi_mem_memsec_buser;
+  wire        axi_mem_memsec_bvalid;
+  wire        axi_mem_memsec_bready;
+  wire [3:0]  axi_mem_memsec_arid;
+  wire [29:0] axi_mem_memsec_araddr;
+  wire [7:0]  axi_mem_memsec_arlen;
+  wire [2:0]  axi_mem_memsec_arsize;
+  wire [1:0]  axi_mem_memsec_arburst;
+  wire [3:0]  axi_mem_memsec_arcache;
+  wire [2:0]  axi_mem_memsec_arprot;
+  wire [3:0]  axi_mem_memsec_arqos;
+  wire [0:0]  axi_mem_memsec_aruser;
+  wire        axi_mem_memsec_arvalid;
+  wire        axi_mem_memsec_arready;
+  wire [3:0]  axi_mem_memsec_rid;
+  wire [63:0] axi_mem_memsec_rdata;
+  wire [1:0]  axi_mem_memsec_rresp;
+  wire        axi_mem_memsec_rlast;
+  wire [0:0]  axi_mem_memsec_ruser;
+  wire        axi_mem_memsec_rvalid;
+  wire        axi_mem_memsec_rready;
+`endif 
+
+
+   logic        some_weird_register_in_ariane_testharness_file_d, some_weird_register_in_ariane_testharness_file_q;
+
+    always_ff @(posedge clk_i or negedge rst_ni) begin : some_funny_process
+        if(!rst_ni) begin
+        some_weird_register_in_ariane_testharness_file_q <= 0;
+        end else begin
+        some_weird_register_in_ariane_testharness_file_q <= some_weird_register_in_ariane_testharness_file_d;
+        end
+    end
+
+
   dm::dmi_req_t  jtag_dmi_req;
   dm::dmi_req_t  dmi_req;
 
@@ -77,14 +134,14 @@ module ariane_testharness #(
     .AXI_ADDR_WIDTH ( AXI_ADDRESS_WIDTH   ),
     .AXI_DATA_WIDTH ( AXI_DATA_WIDTH      ),
     .AXI_ID_WIDTH   ( ariane_soc::IdWidth ),
-    .AXI_USER_WIDTH ( AXI_USER_WIDTH      )
+    .AXI_USER_WIDTH ( ariane_axi::UserWidth)
   ) slave[ariane_soc::NrSlaves-1:0]();
 
   AXI_BUS #(
     .AXI_ADDR_WIDTH ( AXI_ADDRESS_WIDTH        ),
     .AXI_DATA_WIDTH ( AXI_DATA_WIDTH           ),
     .AXI_ID_WIDTH   ( ariane_soc::IdWidthSlave ),
-    .AXI_USER_WIDTH ( AXI_USER_WIDTH           )
+    .AXI_USER_WIDTH ( ariane_axi::UserWidth    )
   ) master[ariane_soc::NB_PERIPHERALS-1:0]();
 
   rstgen i_rstgen_main (
@@ -256,7 +313,7 @@ module ariane_testharness #(
     .AXI_ID_WIDTH   ( ariane_soc::IdWidthSlave ),
     .AXI_ADDR_WIDTH ( AXI_ADDRESS_WIDTH        ),
     .AXI_DATA_WIDTH ( AXI_DATA_WIDTH           ),
-    .AXI_USER_WIDTH ( AXI_USER_WIDTH           )
+    .AXI_USER_WIDTH ( ariane_axi::UserWidth    )
   ) i_dm_axi2mem (
     .clk_i      ( clk_i                     ),
     .rst_ni     ( rst_ni                    ),
@@ -311,7 +368,7 @@ module ariane_testharness #(
     .AXI_ID_WIDTH   ( ariane_soc::IdWidthSlave ),
     .AXI_ADDR_WIDTH ( AXI_ADDRESS_WIDTH        ),
     .AXI_DATA_WIDTH ( AXI_DATA_WIDTH           ),
-    .AXI_USER_WIDTH ( AXI_USER_WIDTH           )
+    .AXI_USER_WIDTH ( ariane_axi::UserWidth    )
   ) i_axi2rom (
     .clk_i  ( clk_i                   ),
     .rst_ni ( ndmreset_n              ),
@@ -346,7 +403,7 @@ module ariane_testharness #(
     .AXI_ADDR_WIDTH ( AXI_ADDRESS_WIDTH        ),
     .AXI_DATA_WIDTH ( AXI_DATA_WIDTH           ),
     .AXI_ID_WIDTH   ( ariane_soc::IdWidthSlave ),
-    .AXI_USER_WIDTH ( AXI_USER_WIDTH           )
+    .AXI_USER_WIDTH ( ariane_axi::UserWidth    )
   ) dram();
 
   logic                         req;
@@ -360,7 +417,7 @@ module ariane_testharness #(
     .AXI_ADDR_WIDTH ( AXI_ADDRESS_WIDTH        ),
     .AXI_DATA_WIDTH ( AXI_DATA_WIDTH           ),
     .AXI_ID_WIDTH   ( ariane_soc::IdWidthSlave ),
-    .AXI_USER_WIDTH ( AXI_USER_WIDTH           ),
+    .AXI_USER_WIDTH ( ariane_axi::UserWidth    ),
     .AXI_MAX_WRITE_TXNS ( 1  ),
     .RISCV_WORD_WIDTH   ( 64 )
   ) i_axi_riscv_atomics (
@@ -374,7 +431,7 @@ module ariane_testharness #(
     .AXI_ADDR_WIDTH ( AXI_ADDRESS_WIDTH        ),
     .AXI_DATA_WIDTH ( AXI_DATA_WIDTH           ),
     .AXI_ID_WIDTH   ( ariane_soc::IdWidthSlave ),
-    .AXI_USER_WIDTH ( AXI_USER_WIDTH           )
+    .AXI_USER_WIDTH ( ariane_axi::UserWidth    )
   ) dram_delayed();
 
   ariane_axi::aw_chan_slv_t aw_chan_i;
@@ -444,6 +501,7 @@ module ariane_testharness #(
   assign aw_chan_i.prot = dram.aw_prot;
   assign aw_chan_i.qos = dram.aw_qos;
   assign aw_chan_i.region = dram.aw_region;
+  assign aw_chan_i.user = dram.aw_user;
 
   assign ar_chan_i.id = dram.ar_id;
   assign ar_chan_i.addr = dram.ar_addr;
@@ -455,6 +513,7 @@ module ariane_testharness #(
   assign ar_chan_i.prot = dram.ar_prot;
   assign ar_chan_i.qos = dram.ar_qos;
   assign ar_chan_i.region = dram.ar_region;
+  assign ar_chan_i.user = dram.ar_user;
 
   assign w_chan_i.data = dram.w_data;
   assign w_chan_i.strb = dram.w_strb;
@@ -479,7 +538,7 @@ module ariane_testharness #(
   assign dram_delayed.aw_qos = aw_chan_o.qos;
   assign dram_delayed.aw_atop = aw_chan_o.atop;
   assign dram_delayed.aw_region = aw_chan_o.region;
-  assign dram_delayed.aw_user = '0;
+  assign dram_delayed.aw_user = aw_chan_o.user;
 
   assign dram_delayed.ar_id = ar_chan_o.id;
   assign dram_delayed.ar_addr = ar_chan_o.addr;
@@ -491,12 +550,12 @@ module ariane_testharness #(
   assign dram_delayed.ar_prot = ar_chan_o.prot;
   assign dram_delayed.ar_qos = ar_chan_o.qos;
   assign dram_delayed.ar_region = ar_chan_o.region;
-  assign dram_delayed.ar_user = '0;
+  assign dram_delayed.ar_user = ar_chan_o.user;
 
   assign dram_delayed.w_data = w_chan_o.data;
   assign dram_delayed.w_strb = w_chan_o.strb;
   assign dram_delayed.w_last = w_chan_o.last;
-  assign dram_delayed.w_user = '0;
+  assign dram_delayed.w_user = w_chan_o.user;
 
   assign r_chan_i.id = dram_delayed.r_id;
   assign r_chan_i.data = dram_delayed.r_data;
@@ -508,15 +567,62 @@ module ariane_testharness #(
   assign b_chan_i.resp = dram_delayed.b_resp;
   assign dram.b_user = '0;
 
+  // Z extension 
+  logic [ariane_axi::UserWidth:0]  tweak_axi_ar_user;
+  logic [ariane_axi::UserWidth:0]  tweak_axi_aw_user;
+
+  AXI_BUS #(
+    .AXI_ADDR_WIDTH ( AXI_ADDRESS_WIDTH        ),
+    .AXI_DATA_WIDTH ( AXI_DATA_WIDTH           ),
+    .AXI_ID_WIDTH   ( ariane_soc::IdWidthSlave ),
+    .AXI_USER_WIDTH ( ariane_axi::UserWidth    )
+  ) memsec_master();
+
+`ifdef MEMSEC
+  // TODO due to user signals not working properly, this should be before the actual DRAM delayer
+  memsec_mockup #(
+    // ADDR_WIDTH                      ( ariane_soc::IdWidthSlave),
+    // DATA_WIDTH                      ( ariane_soc::IdWidthSlave),
+    .AXI_ADDR_WIDTH                  ( AXI_ADDRESS_WIDTH),
+    .AXI_DATA_WIDTH                  ( AXI_DATA_WIDTH),
+    .AXI_ID_WIDTH_MASTER             ( ariane_soc::IdWidthSlave),
+    .AXI_ID_WIDTH_SLAVE              ( ariane_soc::IdWidthSlave),
+    .AXI_USER_WIDTH                  ( ariane_axi::UserWidth ),
+    .TWEAK_WIDTH                     ( riscv::E_TWEAK_LENGTH),
+    .NUM_WORDS                       ( NUM_WORDS)
+  ) msec
+  (
+    //Input
+    .clk_i         ( clk_i                  ),
+    .rst_ni        ( rst_ni                 ),
+    .s_axi_aclk    ( clk_i                  ),
+    .s_axi_aresetn ( ndmreset_n             ),
+    .the_slave         (dram_delayed        ),
+    .force_encrypt_i ( 1 ),
+    //Output
+    .m_axi_aclk    ( clk_i                  ),
+    .m_axi_aresetn ( ndmreset_n             ),
+    .the_master        ( memsec_master      ),
+    .tweak_read_violation_o   ( ),
+    .tweak_write_violation_o   ( ),
+    .tweak_axi_ar_user_i ( tweak_axi_ar_user ),
+    .tweak_axi_aw_user_i ( tweak_axi_aw_user )
+  );
+`endif
+
   axi2mem #(
     .AXI_ID_WIDTH   ( ariane_soc::IdWidthSlave ),
     .AXI_ADDR_WIDTH ( AXI_ADDRESS_WIDTH        ),
     .AXI_DATA_WIDTH ( AXI_DATA_WIDTH           ),
-    .AXI_USER_WIDTH ( AXI_USER_WIDTH           )
+    .AXI_USER_WIDTH ( ariane_axi::UserWidth    )
   ) i_axi2mem (
     .clk_i  ( clk_i        ),
     .rst_ni ( ndmreset_n   ),
+`ifdef MEMSEC
+    .slave  ( memsec_master),
+`else
     .slave  ( dram_delayed ),
+`endif
     .req_o  ( req          ),
     .we_o   ( we           ),
     .addr_o ( addr         ),
@@ -553,7 +659,7 @@ module ariane_testharness #(
     .NB_REGION          ( ariane_soc::NrRegion       ),
     .AXI_ADDR_WIDTH     ( AXI_ADDRESS_WIDTH          ),
     .AXI_DATA_WIDTH     ( AXI_DATA_WIDTH             ),
-    .AXI_USER_WIDTH     ( AXI_USER_WIDTH             ),
+    .AXI_USER_WIDTH     ( ariane_axi::UserWidth      ),
     .AXI_ID_WIDTH       ( ariane_soc::IdWidth        )
     // .MASTER_SLICE_DEPTH ( 0                          ),
     // .SLAVE_SLICE_DEPTH  ( 0                          )
@@ -679,6 +785,10 @@ module ariane_testharness #(
   ariane_axi::req_t    axi_ariane_req;
   ariane_axi::resp_t   axi_ariane_resp;
 
+  // Z extension 
+  assign tweak_axi_ar_user = axi_ariane_req.ar.user;
+  assign tweak_axi_aw_user = axi_ariane_req.aw.user;
+
   ariane #(
     .ArianeCfg  ( ariane_soc::ArianeSocCfg )
   ) i_ariane (
diff --git a/tb/include/testbench_defines.svh b/tb/include/testbench_defines.svh
new file mode 100644
index 0000000..39b0e9a
--- /dev/null
+++ b/tb/include/testbench_defines.svh
@@ -0,0 +1,45 @@
+// Copyright 2018 ETH Zurich and University of Bologna.
+// Copyright and related rights are licensed under the Solderpad Hardware
+// License, Version 0.51 (the "License"); you may not use this file except in
+// compliance with the License.  You may obtain a copy of the License at
+// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
+// or agreed to in writing, software, hardware and materials distributed under
+// this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+// CONDITIONS OF ANY KIND, either express or implied. See the License for the
+// specific language governing permissions and limitations under the License.
+
+// Description: Set global FPGA degines
+// Author: Florian Zaruba <zarubaf@iis.ee.ethz.ch>
+
+`define ARIANE_DATA_WIDTH 64
+
+// Instantiate protocl checker
+// `define PROTOCOL_CHECKER
+
+// write-back cache
+`define WB_DCACHE
+
+// write-through cache
+`define WT_DCACHE
+
+
+// MEMSEC configuration
+`define MEMSEC
+`define MEMSEC_C_S_AXI_TARGET_SLAVE_BASE_ADDR (64'h0000000080000000)
+
+`define CRYPTO_CONFIG               (32'h00000001)
+`define DATA_MEMORY_SIZE            (32'h10000000)
+`define TREE_ARITY                  (32'h00000000)
+`define TREE_ROOTS                  (32'h00000000)
+`define TREE_NODE_CACHE_SIZE        (32'h00000000)
+`define DATA_BLOCK_SIZE             (32'h00000040)
+`define BLOCKS_PER_SECTOR           (32'h00000002)
+`define DATA_TAG_SIZE               (32'h00000010)
+
+localparam NumWords = (24 * 1024 * 1024) / 8;
+localparam NBSlave = 2; // debug, ariane
+localparam AxiAddrWidth = 64;
+localparam AxiDataWidth = 64;
+localparam AxiIdWidthMaster = 4;
+localparam AxiIdWidthSlaves = AxiIdWidthMaster + $clog2(NBSlave); // 5
+localparam AxiUserWidth = 1;
\ No newline at end of file
-- 
2.25.1

